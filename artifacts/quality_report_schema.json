{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Extraction Quality Report Schema",
  "description": "Schema for Phase 1 claim extraction quality reports (Week 1 validation artifact)",
  "type": "object",
  "required": [
    "report_metadata",
    "precision_analysis",
    "recall_analysis",
    "distribution_analysis",
    "performance_metrics"
  ],
  "properties": {
    "report_metadata": {
      "type": "object",
      "description": "Report generation metadata and high-level statistics",
      "required": [
        "generation_timestamp",
        "phase",
        "total_claims_extracted",
        "tools_version"
      ],
      "properties": {
        "generation_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "ISO8601 timestamp of report generation (e.g., 2025-10-02T14:30:00Z)"
        },
        "phase": {
          "type": "string",
          "const": "Phase 1: Claim Extraction Infrastructure",
          "description": "Fixed phase identifier for Week 1 deliverables"
        },
        "total_claims_extracted": {
          "type": "integer",
          "minimum": 0,
          "description": "Combined claim count from formal extractor (docs/) + code extractor (src/)"
        },
        "tools_version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+\\.\\d+$",
          "description": "Semantic version of extraction tools (e.g., 1.0.0)",
          "examples": ["1.0.0", "1.1.2"]
        }
      },
      "additionalProperties": false
    },
    "precision_analysis": {
      "type": "object",
      "description": "Manual review results from stratified random sample (40 claims)",
      "required": [
        "sample_size",
        "stratification",
        "overall_precision",
        "false_positives"
      ],
      "properties": {
        "sample_size": {
          "type": "integer",
          "const": 40,
          "description": "Fixed sample size for manual precision validation"
        },
        "stratification": {
          "type": "object",
          "description": "Precision by priority tier (oversamples CRITICAL for safety)",
          "required": ["CRITICAL", "HIGH", "MEDIUM"],
          "properties": {
            "CRITICAL": {
              "type": "object",
              "description": "Safety-critical claims (10/40 sample)",
              "required": ["count", "correct", "precision"],
              "properties": {
                "count": {
                  "type": "integer",
                  "const": 10,
                  "description": "Fixed sample size for CRITICAL tier"
                },
                "correct": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 10,
                  "description": "Number of true positives in manual review"
                },
                "precision": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "description": "Precision = correct/count (target: ≥0.95 for CRITICAL)"
                }
              },
              "additionalProperties": false
            },
            "HIGH": {
              "type": "object",
              "description": "High-priority claims (15/40 sample)",
              "required": ["count", "correct", "precision"],
              "properties": {
                "count": {
                  "type": "integer",
                  "const": 15,
                  "description": "Fixed sample size for HIGH tier"
                },
                "correct": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 15,
                  "description": "Number of true positives in manual review"
                },
                "precision": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "description": "Precision = correct/count (target: ≥0.90 for HIGH)"
                }
              },
              "additionalProperties": false
            },
            "MEDIUM": {
              "type": "object",
              "description": "Medium-priority claims (15/40 sample)",
              "required": ["count", "correct", "precision"],
              "properties": {
                "count": {
                  "type": "integer",
                  "const": 15,
                  "description": "Fixed sample size for MEDIUM tier"
                },
                "correct": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 15,
                  "description": "Number of true positives in manual review"
                },
                "precision": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "description": "Precision = correct/count (target: ≥0.85 for MEDIUM)"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "overall_precision": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Weighted precision across all tiers (target: ≥0.90)"
        },
        "false_positives": {
          "type": "array",
          "description": "Detailed list of incorrectly extracted claims for root cause analysis",
          "items": {
            "type": "object",
            "required": ["claim_id", "claim_text", "reason", "action"],
            "properties": {
              "claim_id": {
                "type": "string",
                "description": "Unique claim identifier (e.g., claim_0042)"
              },
              "claim_text": {
                "type": "string",
                "description": "Extracted text that was incorrectly identified as a claim"
              },
              "reason": {
                "type": "string",
                "description": "Root cause classification",
                "enum": [
                  "not_a_claim",
                  "duplicate",
                  "incomplete_extraction",
                  "wrong_scope",
                  "regex_false_match",
                  "other"
                ]
              },
              "action": {
                "type": "string",
                "description": "Corrective action for pattern improvement",
                "examples": [
                  "Add negative lookahead for 'may implement'",
                  "Require citation for high confidence",
                  "Filter out design discussion sections"
                ]
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "recall_analysis": {
      "type": "object",
      "description": "Ground truth validation on manually-verified reference files",
      "required": [
        "ground_truth_files",
        "expected_claims",
        "extracted_claims",
        "recall",
        "false_negatives"
      ],
      "properties": {
        "ground_truth_files": {
          "type": "array",
          "description": "Hand-picked files with manually verified claim counts",
          "items": {
            "type": "string"
          },
          "examples": [
            "docs/theory/smc_theory_complete.md",
            "src/controllers/smc/classic_smc.py",
            "docs/mathematical_foundations/lyapunov_stability.md"
          ],
          "minItems": 2
        },
        "expected_claims": {
          "type": "integer",
          "minimum": 1,
          "description": "Manually counted claims in ground truth files (reference baseline)"
        },
        "extracted_claims": {
          "type": "integer",
          "minimum": 0,
          "description": "Claims successfully extracted by tools from ground truth files"
        },
        "recall": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Recall = extracted/expected (target: ≥0.95)"
        },
        "false_negatives": {
          "type": "array",
          "description": "Known claims that extractors failed to detect",
          "items": {
            "type": "object",
            "required": ["expected_claim", "file_path", "line_number", "reason"],
            "properties": {
              "expected_claim": {
                "type": "string",
                "description": "Text of claim that should have been extracted"
              },
              "file_path": {
                "type": "string",
                "description": "Absolute path to file containing missed claim"
              },
              "line_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Line number where claim appears"
              },
              "reason": {
                "type": "string",
                "description": "Root cause for extraction failure",
                "examples": [
                  "Multi-line statement broke regex",
                  "Informal phrasing (no 'implements' keyword)",
                  "Nested in code comment instead of docstring"
                ]
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "distribution_analysis": {
      "type": "object",
      "description": "Statistical distribution of extracted claims across multiple dimensions",
      "required": ["by_source", "by_priority", "by_confidence"],
      "properties": {
        "by_source": {
          "type": "object",
          "description": "Claims by extractor type",
          "required": ["formal_extractor", "code_extractor"],
          "properties": {
            "formal_extractor": {
              "type": "integer",
              "minimum": 0,
              "description": "Claims from markdown docs (expected: 40-50 formal theorems/lemmas)"
            },
            "code_extractor": {
              "type": "integer",
              "minimum": 0,
              "description": "Claims from Python docstrings (expected: 150-250 implementation claims)"
            }
          },
          "additionalProperties": false
        },
        "by_priority": {
          "type": "object",
          "description": "Claims by priority tier (affects validation order)",
          "required": ["CRITICAL", "HIGH", "MEDIUM"],
          "properties": {
            "CRITICAL": {
              "type": "integer",
              "minimum": 0,
              "description": "Safety-critical control laws (expected: ~29 claims)"
            },
            "HIGH": {
              "type": "integer",
              "minimum": 0,
              "description": "Core algorithms with performance impact (expected: ~136 claims)"
            },
            "MEDIUM": {
              "type": "integer",
              "minimum": 0,
              "description": "Supporting utilities and validation code (expected: ~335 claims)"
            }
          },
          "additionalProperties": false
        },
        "by_confidence": {
          "type": "object",
          "description": "Claims by confidence score (determines manual review priority)",
          "required": ["high_0.8_1.0", "medium_0.5_0.8", "low_0.0_0.5"],
          "properties": {
            "high_0.8_1.0": {
              "type": "integer",
              "minimum": 0,
              "description": "High-confidence claims with citations/proofs (expected: ~60%)"
            },
            "medium_0.5_0.8": {
              "type": "integer",
              "minimum": 0,
              "description": "Medium-confidence claims with partial evidence (expected: ~35%)"
            },
            "low_0.0_0.5": {
              "type": "integer",
              "minimum": 0,
              "description": "Low-confidence claims requiring verification (expected: ~5%)"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "performance_metrics": {
      "type": "object",
      "description": "Execution performance benchmarks (CRITICAL acceptance criterion: <5s total)",
      "required": [
        "formal_extractor_time_sec",
        "code_extractor_time_sec",
        "merge_time_sec",
        "total_time_sec"
      ],
      "properties": {
        "formal_extractor_time_sec": {
          "type": "number",
          "minimum": 0,
          "maximum": 1.4,
          "description": "Regex-based extraction from 259 markdown files (target: ≤1.4s)"
        },
        "code_extractor_time_sec": {
          "type": "number",
          "minimum": 0,
          "maximum": 2.5,
          "description": "AST-based extraction from 165 Python files (target: ≤2.5s)"
        },
        "merge_time_sec": {
          "type": "number",
          "minimum": 0,
          "maximum": 0.5,
          "description": "Deduplication and priority merging (target: ≤0.5s)"
        },
        "total_time_sec": {
          "type": "number",
          "minimum": 0,
          "maximum": 5.0,
          "description": "End-to-end pipeline execution time (CRITICAL: must be <5.0s)"
        }
      },
      "additionalProperties": false
    },
    "recommendations": {
      "type": "array",
      "description": "Actionable recommendations for Phase 2 improvements",
      "items": {
        "type": "object",
        "required": ["priority", "issue", "action", "expected_impact"],
        "properties": {
          "priority": {
            "type": "string",
            "enum": ["HIGH", "MEDIUM", "LOW"],
            "description": "Implementation priority for recommendation"
          },
          "issue": {
            "type": "string",
            "description": "Identified problem or limitation",
            "examples": [
              "15% of CRITICAL claims have low confidence scores",
              "Multi-line theorem statements cause regex failures",
              "Code extractor misses nested function docstrings"
            ]
          },
          "action": {
            "type": "string",
            "description": "Specific corrective action",
            "examples": [
              "Add mandatory citation requirement for CRITICAL tier",
              "Implement multi-line AST-based formal extractor",
              "Enhance visitor pattern to handle nested scopes"
            ]
          },
          "expected_impact": {
            "type": "string",
            "description": "Quantified improvement prediction",
            "examples": [
              "Precision +5% (0.90 → 0.95)",
              "Recall +8% (0.92 → 1.00)",
              "False negative reduction: 12 → 2 claims"
            ]
          }
        },
        "additionalProperties": false
      }
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "report_metadata": {
        "generation_timestamp": "2025-10-02T14:30:00Z",
        "phase": "Phase 1: Claim Extraction Infrastructure",
        "total_claims_extracted": 487,
        "tools_version": "1.0.0"
      },
      "precision_analysis": {
        "sample_size": 40,
        "stratification": {
          "CRITICAL": {
            "count": 10,
            "correct": 9,
            "precision": 0.90
          },
          "HIGH": {
            "count": 15,
            "correct": 14,
            "precision": 0.93
          },
          "MEDIUM": {
            "count": 15,
            "correct": 13,
            "precision": 0.87
          }
        },
        "overall_precision": 0.90,
        "false_positives": [
          {
            "claim_id": "claim_0042",
            "claim_text": "May implement adaptive control in future",
            "reason": "not_a_claim",
            "action": "Add negative lookahead for speculative language (may/could/might)"
          }
        ]
      },
      "recall_analysis": {
        "ground_truth_files": [
          "docs/theory/smc_theory_complete.md",
          "src/controllers/smc/classic_smc.py"
        ],
        "expected_claims": 18,
        "extracted_claims": 17,
        "recall": 0.94,
        "false_negatives": [
          {
            "expected_claim": "Lyapunov function guarantees finite-time convergence",
            "file_path": "docs/theory/smc_theory_complete.md",
            "line_number": 142,
            "reason": "Multi-line statement broke regex (spanned 3 lines)"
          }
        ]
      },
      "distribution_analysis": {
        "by_source": {
          "formal_extractor": 45,
          "code_extractor": 442
        },
        "by_priority": {
          "CRITICAL": 29,
          "HIGH": 136,
          "MEDIUM": 322
        },
        "by_confidence": {
          "high_0.8_1.0": 292,
          "medium_0.5_0.8": 170,
          "low_0.0_0.5": 25
        }
      },
      "performance_metrics": {
        "formal_extractor_time_sec": 1.2,
        "code_extractor_time_sec": 2.3,
        "merge_time_sec": 0.4,
        "total_time_sec": 3.9
      },
      "recommendations": [
        {
          "priority": "HIGH",
          "issue": "1 false negative in ground truth validation",
          "action": "Implement multi-line statement handling in regex patterns",
          "expected_impact": "Recall +5.5% (0.94 → 1.00)"
        }
      ]
    }
  ]
}
