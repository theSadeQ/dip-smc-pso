{
  "metadata": {
    "total_claims": 23,
    "cited": 1,
    "uncited": 22,
    "by_type": {
      "theorem": 12,
      "definition": 10,
      "assumption": 1
    },
    "avg_confidence": 0.7652173913043478
  },
  "claims": [
    {
      "id": "FORMAL-THEOREM-001",
      "type": "theorem",
      "number": null,
      "statement": "Hysteresis with deadband $\\delta$ prevents oscillation for residuals with bounded derivative.",
      "proof": null,
      "file_path": "docs/fdi_threshold_calibration_methodology.md",
      "line_number": 261,
      "has_citation": false,
      "confidence": 0.8,
      "suggested_keywords": [],
      "context": "    pass\n```\n\n### Oscillation Prevention Mechanism\n\n**Theorem**: Hysteresis with deadband $\\delta$ prevents oscillation for residuals with bounded derivative.\n\n**Proof Sketch**:\n- Once in FAULT state, residual must decrease by $\\geq \\delta$ to return to OK\n- Once in OK state, residual must increase by $\\geq \\delta$ to fault\n- For bounded $\\frac{dr}{dt}$, finite time required to traverse deadband"
    },
    {
      "id": "FORMAL-DEFINITION-002",
      "type": "definition",
      "number": null,
      "statement": "The sliding surface is defined as:",
      "proof": null,
      "file_path": "docs/mathematical_algorithm_validation.md",
      "line_number": 54,
      "has_citation": false,
      "confidence": 0.6,
      "suggested_keywords": [],
      "context": "\\end{align}\n```\n\n#### Sliding Surface Design\n\n**Definition**: The sliding surface is defined as:\n```latex\ns = \\lambda_1 e_1 + \\lambda_2 e_2 + \\dot{e}_1 + \\dot{e}_2\n```\n\nwhere:"
    },
    {
      "id": "FORMAL-DEFINITION-003",
      "type": "definition",
      "number": null,
      "statement": "Parameter sensitivity matrix:",
      "proof": null,
      "file_path": "docs/mathematical_algorithm_validation.md",
      "line_number": 620,
      "has_citation": false,
      "confidence": 0.6,
      "suggested_keywords": [],
      "context": "\n### 7.1 Parameter Sensitivity Analysis\n\n#### Sensitivity to Controller Gains\n\n**Definition**: Parameter sensitivity matrix:\n```latex\nS_{ij} = \\frac{\\partial J}{\\partial p_i} \\frac{p_i}{J}\n```\n\nwhere $J$ is the performance index and $p_i$ are controller parameters."
    },
    {
      "id": "FORMAL-THEOREM-004",
      "type": "theorem",
      "number": null,
      "statement": "The PSO-optimized gains ensure global asymptotic stability of the DIP system.",
      "proof": "Consider the composite Lyapunov function V = V_sliding + V_reaching where:\n- V_sliding = ½sᵀPs for the sliding surface dynamics\n- V_reaching = ½(s - s_eq)ᵀ(s - s_eq) for the reaching phase\n\nUnder the derived bounds, both V_sliding and V_reaching are positive definite with negative definite derivatives, ensuring stability.",
      "file_path": "docs/pso_gain_bounds_mathematical_foundations.md",
      "line_number": 733,
      "has_citation": false,
      "confidence": 1.0,
      "suggested_keywords": [
        "PSO",
        "asymptotic",
        "Lyapunov",
        "stability"
      ],
      "context": "\n## Mathematical Appendix\n\n### A.1 Lyapunov Function Proofs\n\n**Theorem**: The PSO-optimized gains ensure global asymptotic stability of the DIP system.\n\n**Proof**: Consider the composite Lyapunov function V = V_sliding + V_reaching where:\n- V_sliding = ½sᵀPs for the sliding surface dynamics\n- V_reaching = ½(s - s_eq)ᵀ(s - s_eq) for the reaching phase\n"
    },
    {
      "id": "FORMAL-THEOREM-005",
      "type": "theorem",
      "number": null,
      "statement": "The PSO-optimized gains maintain Lyapunov stability for the closed-loop DIP system.",
      "proof": null,
      "file_path": "docs/pso_integration_technical_specification.md",
      "line_number": 875,
      "has_citation": false,
      "confidence": 0.9,
      "suggested_keywords": [
        "PSO",
        "super-twisting",
        "stability",
        "finite-time",
        "Lyapunov"
      ],
      "context": "\n## 9. Mathematical Appendix\n\n### 9.1 Lyapunov Stability Analysis for Optimized Gains\n\n**Theorem**: The PSO-optimized gains maintain Lyapunov stability for the closed-loop DIP system.\n\n**Proof Sketch**:\n1. Sliding surface design ensures finite-time reachability: `V̇ = s·ṡ < -η|s|` for η > 0\n2. Super-twisting gains satisfy: `K₁² > 4K₂L` where L is the Lipschitz constant\n3. Surface coefficients ensure characteristic polynomial has negative real parts"
    },
    {
      "id": "FORMAL-DEFINITION-006",
      "type": "definition",
      "number": 1,
      "statement": "The optimization problem is defined over a D-dimensional search space:",
      "proof": null,
      "file_path": "docs/theory/pso_optimization_complete.md",
      "line_number": 18,
      "has_citation": false,
      "confidence": 0.7,
      "suggested_keywords": [
        "convergence"
      ],
      "context": "- **Social learning** (social component)\n- **Collective convergence** toward optimal solutions\n\n### Mathematical Foundation\n\n**Definition 1 (Search Space)**: The optimization problem is defined over a D-dimensional search space:\n\n```{math}\n:label: eq:search_space\n\\Omega = \\{\\vec{\\theta} \\in \\mathbb{R}^D : \\vec{\\theta}^{min} \\leq \\vec{\\theta} \\leq \\vec{\\theta}^{max}\\}\n```"
    },
    {
      "id": "FORMAL-DEFINITION-007",
      "type": "definition",
      "number": 2,
      "statement": "The fitness landscape is defined by:",
      "proof": null,
      "file_path": "docs/theory/pso_optimization_complete.md",
      "line_number": 27,
      "has_citation": false,
      "confidence": 0.6,
      "suggested_keywords": [],
      "context": "\\Omega = \\{\\vec{\\theta} \\in \\mathbb{R}^D : \\vec{\\theta}^{min} \\leq \\vec{\\theta} \\leq \\vec{\\theta}^{max}\\}\n```\n\nwhere $\\vec{\\theta}$ represents the parameter vector to be optimized.\n\n**Definition 2 (Objective Function)**: The fitness landscape is defined by:\n\n```{math}\n:label: eq:objective_function\nf: \\Omega \\rightarrow \\mathbb{R}, \\quad f(\\vec{\\theta}) \\mapsto \\text{performance metric}\n```"
    },
    {
      "id": "FORMAL-THEOREM-008",
      "type": "theorem",
      "number": 1,
      "statement": "The particle converges to a stable trajectory if:",
      "proof": null,
      "file_path": "docs/theory/pso_optimization_complete.md",
      "line_number": 86,
      "has_citation": false,
      "confidence": 0.9,
      "suggested_keywords": [
        "stability"
      ],
      "context": "```{math}\n:label: eq:deterministic_dynamics\n\\vec{v}_i^{(k+1)} = w\\vec{v}_i^{(k)} + c_1(\\vec{p}_i - \\vec{x}_i^{(k)}) + c_2(\\vec{g} - \\vec{x}_i^{(k)})\n```\n\n**Theorem 1 (Stability Condition)**: The particle converges to a stable trajectory if:\n\n```{math}\n:label: eq:stability_condition\n0 < w < 1 \\quad \\text{and} \\quad 0 < c_1 + c_2 < 2(1 + w)\n```"
    },
    {
      "id": "FORMAL-DEFINITION-009",
      "type": "definition",
      "number": 3,
      "statement": "The swarm converges in mean square if:",
      "proof": null,
      "file_path": "docs/theory/pso_optimization_complete.md",
      "line_number": 106,
      "has_citation": false,
      "confidence": 0.7,
      "suggested_keywords": [
        "convergence"
      ],
      "context": "\n### Stochastic Analysis\n\nIn the presence of randomness, convergence analysis requires stochastic techniques.\n\n**Definition 3 (Mean Square Convergence)**: The swarm converges in mean square if:\n\n```{math}\n:label: eq:mean_square_convergence\n\\lim_{k \\rightarrow \\infty} \\mathbb{E}[\\|\\vec{x}_i^{(k)} - \\vec{x}^*\\|^2] = 0\n```"
    },
    {
      "id": "FORMAL-THEOREM-010",
      "type": "theorem",
      "number": 2,
      "statement": "Under the stability condition and with decreasing inertia weight, PSO converges to the global optimum with probability 1 for unimodal functions.",
      "proof": null,
      "file_path": "docs/theory/pso_optimization_complete.md",
      "line_number": 115,
      "has_citation": false,
      "confidence": 0.9,
      "suggested_keywords": [
        "PSO",
        "convergence",
        "stability"
      ],
      "context": "\\lim_{k \\rightarrow \\infty} \\mathbb{E}[\\|\\vec{x}_i^{(k)} - \\vec{x}^*\\|^2] = 0\n```\n\nwhere $\\vec{x}^*$ is the global optimum.\n\n**Theorem 2 (Stochastic Convergence)**: Under the stability condition and with decreasing inertia weight, PSO converges to the global optimum with probability 1 for unimodal functions.\n\n### No Free Lunch Theorem\n\n**Theorem 3 (No Free Lunch)**: Averaged over all possible optimization problems, no optimization algorithm performs better than random search {cite}`wolpert1997no`.\n"
    },
    {
      "id": "FORMAL-THEOREM-011",
      "type": "theorem",
      "number": 3,
      "statement": "Averaged over all possible optimization problems, no optimization algorithm performs better than random search {cite}`wolpert1997no`.",
      "proof": null,
      "file_path": "docs/theory/pso_optimization_complete.md",
      "line_number": 119,
      "has_citation": true,
      "confidence": 0.6,
      "suggested_keywords": [
        "PSO",
        "convergence",
        "stability"
      ],
      "context": "\n**Theorem 2 (Stochastic Convergence)**: Under the stability condition and with decreasing inertia weight, PSO converges to the global optimum with probability 1 for unimodal functions.\n\n### No Free Lunch Theorem\n\n**Theorem 3 (No Free Lunch)**: Averaged over all possible optimization problems, no optimization algorithm performs better than random search {cite}`wolpert1997no`.\n\n**Implication**: PSO effectiveness depends on matching algorithm characteristics to problem structure.\n\n## Multi-Objective PSO for Control Design\n"
    },
    {
      "id": "FORMAL-DEFINITION-012",
      "type": "definition",
      "number": 4,
      "statement": "Solution $\\vec{\\theta}_1$ dominates $\\vec{\\theta}_2$ (denoted $\\vec{\\theta}_1 \\prec \\vec{\\theta}_2$) if:",
      "proof": null,
      "file_path": "docs/theory/pso_optimization_complete.md",
      "line_number": 184,
      "has_citation": false,
      "confidence": 0.6,
      "suggested_keywords": [],
      "context": "\nwhere $w_i \\geq 0$ and $\\sum_{i=1}^m w_i = 1$.\n\n### Pareto Optimality\n\n**Definition 4 (Pareto Dominance)**: Solution $\\vec{\\theta}_1$ dominates $\\vec{\\theta}_2$ (denoted $\\vec{\\theta}_1 \\prec \\vec{\\theta}_2$) if:\n\n```{math}\n:label: eq:pareto_dominance\nf_i(\\vec{\\theta}_1) \\leq f_i(\\vec{\\theta}_2) \\quad \\forall i \\in \\{1, \\ldots, m\\}\n```"
    },
    {
      "id": "FORMAL-DEFINITION-013",
      "type": "definition",
      "number": 5,
      "statement": "The Pareto optimal set is:",
      "proof": null,
      "file_path": "docs/theory/pso_optimization_complete.md",
      "line_number": 193,
      "has_citation": false,
      "confidence": 0.6,
      "suggested_keywords": [],
      "context": "f_i(\\vec{\\theta}_1) \\leq f_i(\\vec{\\theta}_2) \\quad \\forall i \\in \\{1, \\ldots, m\\}\n```\n\nwith strict inequality for at least one objective.\n\n**Definition 5 (Pareto Optimal Set)**: The Pareto optimal set is:\n\n```{math}\n:label: eq:pareto_set\n\\mathcal{P} = \\{\\vec{\\theta} \\in \\Omega : \\nexists \\vec{\\theta}' \\in \\Omega \\text{ such that } \\vec{\\theta}' \\prec \\vec{\\theta}\\}\n```"
    },
    {
      "id": "FORMAL-DEFINITION-014",
      "type": "definition",
      "number": 1,
      "statement": "A sliding surface $\\mathcal{S}$ is a subset of the state space defined by:",
      "proof": null,
      "file_path": "docs/theory/smc_theory_complete.md",
      "line_number": 11,
      "has_citation": false,
      "confidence": 0.7,
      "suggested_keywords": [
        "convergence",
        "sliding mode",
        "SMC",
        "Utkin",
        "finite-time",
        "robust"
      ],
      "context": "\nSliding Mode Control (SMC) is a robust control methodology that provides finite-time convergence and inherent disturbance rejection capabilities {cite}`utkin1999sliding`. The fundamental principle is to constrain the system trajectory to evolve on a lower-dimensional sliding surface where desired dynamics are enforced.\n\n### Fundamental Concepts\n\n**Definition 1 (Sliding Surface)**: A sliding surface $\\mathcal{S}$ is a subset of the state space defined by:\n\n```{math}\n:label: eq:sliding_surface_definition\n\\mathcal{S} = \\{\\vec{x} \\in \\mathbb{R}^n : s(\\vec{x}, t) = 0\\}\n```"
    },
    {
      "id": "FORMAL-DEFINITION-015",
      "type": "definition",
      "number": 2,
      "statement": "The system is said to be in sliding mode when:",
      "proof": null,
      "file_path": "docs/theory/smc_theory_complete.md",
      "line_number": 24,
      "has_citation": false,
      "confidence": 0.6,
      "suggested_keywords": [
        "sliding mode",
        "SMC"
      ],
      "context": "\n```{note}\n**Implementation Note**: The sliding surface calculation is implemented in {py:obj}`src.controllers.classic_smc.ClassicalSMC.compute_sliding_surface` using the equations defined above.\n```\n\n**Definition 2 (Sliding Mode)**: The system is said to be in sliding mode when:\n1. The trajectory reaches the sliding surface: $s(\\vec{x}, t) = 0$\n2. The trajectory remains on the surface: $\\dot{s}(\\vec{x}, t) = 0$\n\n## Sliding Surface Design for DIP System\n"
    },
    {
      "id": "FORMAL-THEOREM-016",
      "type": "theorem",
      "number": 1,
      "statement": "If all sliding surface parameters $c_i > 0$, then the sliding surface dynamics are exponentially stable with convergence rates determined by $c_i$.",
      "proof": null,
      "file_path": "docs/theory/smc_theory_complete.md",
      "line_number": 71,
      "has_citation": false,
      "confidence": 0.9,
      "suggested_keywords": [
        "sliding mode",
        "convergence",
        "stability"
      ],
      "context": "\\dot{\\vec{e}}_p + \\mat{C}\\vec{e}_p = 0\n```\n\nwhere $\\mat{C} = \\text{diag}(c_x, c_{\\theta_1}, c_{\\theta_2})$.\n\n**Theorem 1 (Surface Stability)**: If all sliding surface parameters $c_i > 0$, then the sliding surface dynamics are exponentially stable with convergence rates determined by $c_i$.\n\n*Proof*: The characteristic polynomial of each error component is $s + c_i = 0$, yielding eigenvalues $\\lambda_i = -c_i < 0$ for $c_i > 0$. □\n\n## Classical Sliding Mode Control\n"
    },
    {
      "id": "FORMAL-ASSUMPTION-017",
      "type": "assumption",
      "number": 1,
      "statement": "The matrix $\\mat{S}\\vec{g}(\\vec{x})$ is invertible for all $\\vec{x}$ in the domain of interest.",
      "proof": null,
      "file_path": "docs/theory/smc_theory_complete.md",
      "line_number": 106,
      "has_citation": false,
      "confidence": 0.7,
      "suggested_keywords": [
        "robust"
      ],
      "context": "```{math}\n:label: eq:equivalent_control\nu_{eq} = (\\mat{S}\\vec{g}(\\vec{x}))^{-1}[\\dot{\\vec{x}}_r - \\mat{S}\\vec{f}(\\vec{x})]\n```\n\n**Assumption 1**: The matrix $\\mat{S}\\vec{g}(\\vec{x})$ is invertible for all $\\vec{x}$ in the domain of interest.\n\n### Switching Control Design\n\nThe switching control provides robustness against uncertainties and disturbances:\n"
    },
    {
      "id": "FORMAL-DEFINITION-018",
      "type": "definition",
      "number": 3,
      "statement": "The system trajectory reaches the sliding surface in finite time if:",
      "proof": null,
      "file_path": "docs/theory/smc_theory_complete.md",
      "line_number": 123,
      "has_citation": false,
      "confidence": 0.7,
      "suggested_keywords": [
        "chattering",
        "reaching condition",
        "boundary layer"
      ],
      "context": "- $\\eta > 0$ - switching gain\n- $\\epsilon > 0$ - boundary layer thickness (chattering reduction)\n\n### Reaching Condition\n\n**Definition 3 (Reaching Condition)**: The system trajectory reaches the sliding surface in finite time if:\n\n```{math}\n:label: eq:reaching_condition\ns \\cdot \\dot{s} \\leq -\\alpha |s|\n```"
    },
    {
      "id": "FORMAL-THEOREM-019",
      "type": "theorem",
      "number": 2,
      "statement": "Under the reaching condition {eq}`eq:reaching_condition`, the system reaches the sliding surface in finite time bounded by:",
      "proof": null,
      "file_path": "docs/theory/smc_theory_complete.md",
      "line_number": 132,
      "has_citation": false,
      "confidence": 0.9,
      "suggested_keywords": [
        "reaching condition",
        "finite-time"
      ],
      "context": "s \\cdot \\dot{s} \\leq -\\alpha |s|\n```\n\nfor some $\\alpha > 0$.\n\n**Theorem 2 (Finite-Time Reaching)**: Under the reaching condition {eq}`eq:reaching_condition`, the system reaches the sliding surface in finite time bounded by:\n\n```{math}\n:label: eq:reaching_time_bound\nt_{reach} \\leq \\frac{|s(0)|}{\\alpha}\n```"
    },
    {
      "id": "FORMAL-THEOREM-020",
      "type": "theorem",
      "number": 3,
      "statement": "The classical SMC law {eq}`eq:classical_smc_structure` with switching gain $\\eta > \\rho$ (where $\\rho$ is the uncertainty bound) ensures global finite-time convergence to the sliding surface.",
      "proof": null,
      "file_path": "docs/theory/smc_theory_complete.md",
      "line_number": 160,
      "has_citation": false,
      "confidence": 0.9,
      "suggested_keywords": [
        "uncertainty",
        "convergence",
        "SMC",
        "stability",
        "finite-time",
        "Lyapunov"
      ],
      "context": "V(s) = \\frac{1}{2}s^2\n```\n\n### Stability Proof\n\n**Theorem 3 (Classical SMC Stability)**: The classical SMC law {eq}`eq:classical_smc_structure` with switching gain $\\eta > \\rho$ (where $\\rho$ is the uncertainty bound) ensures global finite-time convergence to the sliding surface.\n\n*Proof*: Consider the Lyapunov function derivative:\n\n```{math}\n:label: eq:lyapunov_derivative"
    },
    {
      "id": "FORMAL-THEOREM-021",
      "type": "theorem",
      "number": 4,
      "statement": "The super-twisting algorithm ensures finite-time convergence to the second-order sliding set $\\{s = 0, \\dot{s} = 0\\}$ if the parameters satisfy:",
      "proof": null,
      "file_path": "docs/theory/smc_theory_complete.md",
      "line_number": 206,
      "has_citation": false,
      "confidence": 0.9,
      "suggested_keywords": [
        "convergence",
        "super-twisting",
        "stability",
        "finite-time",
        "Lyapunov"
      ],
      "context": "\nwhere $\\alpha > 0$ and $\\beta > 0$ are tuning parameters.\n\n### Lyapunov Analysis for Super-Twisting\n\n**Theorem 4 (Super-Twisting Stability)**: The super-twisting algorithm ensures finite-time convergence to the second-order sliding set $\\{s = 0, \\dot{s} = 0\\}$ if the parameters satisfy:\n\n```{math}\n:label: eq:supertwisting_conditions\n\\alpha > \\frac{2\\sqrt{2\\rho}}{\\sqrt{\\gamma}}, \\quad \\beta > \\frac{\\rho}{\\gamma}\n```"
    },
    {
      "id": "FORMAL-THEOREM-022",
      "type": "theorem",
      "number": 5,
      "statement": "The adaptive control law {eq}`eq:adaptive_smc_law` ensures:",
      "proof": null,
      "file_path": "docs/theory/smc_theory_complete.md",
      "line_number": 270,
      "has_citation": false,
      "confidence": 0.9,
      "suggested_keywords": [
        "convergence",
        "SMC",
        "stability",
        "adaptive",
        "Lyapunov"
      ],
      "context": "- $\\hat{\\vec{\\theta}}$ - parameter estimates\n- $\\Gamma > 0$ - adaptation gain matrix\n\n### Adaptive Stability Analysis\n\n**Theorem 5 (Adaptive SMC Stability)**: The adaptive control law {eq}`eq:adaptive_smc_law` ensures:\n1. Global boundedness of all signals\n2. Convergence of the sliding variable: $\\lim_{t \\rightarrow \\infty} s(t) = 0$\n3. Parameter convergence under persistence of excitation\n\n*Proof*: Consider the composite Lyapunov function:"
    },
    {
      "id": "FORMAL-THEOREM-023",
      "type": "theorem",
      "number": 6,
      "statement": "With the boundary layer method, the tracking error is ultimately bounded by:",
      "proof": null,
      "file_path": "docs/theory/smc_theory_complete.md",
      "line_number": 322,
      "has_citation": false,
      "confidence": 0.9,
      "suggested_keywords": [
        "convergence",
        "boundary layer"
      ],
      "context": "s/\\epsilon & \\text{if } |s| \\leq \\epsilon \\\\\n\\text{sign}(s) & \\text{if } |s| > \\epsilon\n\\end{cases}\n```\n\n**Theorem 6 (Boundary Layer Convergence)**: With the boundary layer method, the tracking error is ultimately bounded by:\n\n```{math}\n:label: eq:boundary_layer_bound\n\\limsup_{t \\rightarrow \\infty} |\\vec{e}(t)| \\leq \\frac{\\epsilon}{\\lambda_{\\min}(\\mat{C})}\n```"
    }
  ]
}