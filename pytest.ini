[pytest]
# Pytest Configuration for DIP-SMC-PSO Project
# Version: 1.0
# Last Updated: 2025-09-30

# ==================================================================================
# Test Discovery
# ==================================================================================
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# ==================================================================================
# Custom Markers Registration
# ==================================================================================
# Functional markers
markers =
    integration: Integration tests requiring multiple components
    slow: Tests that take more than 5 seconds to complete
    end_to_end: Full system tests from input to output

    # Performance markers
    benchmark: Performance benchmark tests (use with pytest-benchmark)
    memory: Memory usage and leak detection tests

    # Numerical analysis markers
    numerical_stability: Numerical stability and conditioning tests
    numerical_robustness: Robustness to numerical edge cases
    convergence: Algorithm convergence verification tests

    # Statistical markers
    statistical: Statistical analysis and hypothesis testing
    property_based: Property-based tests using Hypothesis

    # System markers
    concurrent: Tests requiring concurrent execution
    error_recovery: Tests validating error recovery mechanisms

    # Category markers for filtering
    unit: Unit tests for individual components
    regression: Regression tests to prevent known issues
    smoke: Quick smoke tests for basic functionality
    critical: Safety-critical component tests (require 100% coverage)

# ==================================================================================
# Output and Reporting
# ==================================================================================
# Verbose output with summary
addopts =
    -ra
    --strict-markers
    --strict-config
    --showlocals
    -v

# Console output format
console_output_style = progress

# Show extra test summary info
# r: PASSED, a: all except passed, s: skipped, x: xfailed, X: xpassed, f: failed, E: error
junit_logging = all

# ==================================================================================
# Warning Configuration
# ==================================================================================
filterwarnings =
    error::DeprecationWarning
    error::PendingDeprecationWarning
    ignore::pytest.PytestUnraisableExceptionWarning
    ignore::DeprecationWarning:pkg_resources
    ignore::DeprecationWarning:distutils

    # NumPy 2.0 compatibility warnings
    ignore:.*numpy.core.*:DeprecationWarning
    ignore:.*ComplexWarning.*:RuntimeWarning

    # PSO optimizer warnings
    ignore:.*swarm optimization.*:UserWarning
    ignore:.*particle initialization.*:UserWarning

    # Matplotlib backend warnings
    ignore:.*backend.*:UserWarning:matplotlib

    # SciPy warnings for edge cases
    ignore:.*ill-conditioned.*:RuntimeWarning:scipy
    ignore:.*singular matrix.*:RuntimeWarning:scipy

# ==================================================================================
# Coverage Configuration
# ==================================================================================
# Coverage thresholds (enforced externally via pytest-cov)
# Target: 85% overall, 95% critical components
# Use: pytest --cov=src --cov-report=html --cov-fail-under=85

# ==================================================================================
# Test Collection Configuration
# ==================================================================================
# Don't descend into directories starting with _
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    __pycache__
    .pytest_cache
    .hypothesis
    .benchmarks
    .archive
    .artifacts
    .dev_tools
    _build
    _static
    node_modules

# Minimum Python version
minversion = 6.0

# ==================================================================================
# Doctest Configuration
# ==================================================================================
doctest_optionflags =
    NORMALIZE_WHITESPACE
    ELLIPSIS
    IGNORE_EXCEPTION_DETAIL

# ==================================================================================
# Timeout Configuration (if pytest-timeout installed)
# ==================================================================================
# Default timeout for all tests (seconds)
# timeout = 300
# timeout_method = thread

# ==================================================================================
# Logging Configuration
# ==================================================================================
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# ==================================================================================
# Test Execution Options
# ==================================================================================
# Use shorter traceback format for cleaner output
# Can be overridden with --tb=long
# tb = short

# Show slowest N tests
# Can be enabled with --durations=N
# durations = 10

# ==================================================================================
# Fixtures Configuration
# ==================================================================================
# Load all conftest.py files in test directories
# confcutdir = tests

# ==================================================================================
# Distributed Testing (if pytest-xdist installed)
# ==================================================================================
# Number of CPUs to use for parallel testing
# Can be enabled with -n auto
# numprocesses = auto

# ==================================================================================
# Live Logging (for debugging)
# ==================================================================================
# Enable with --log-cli
# Useful for debugging slow or hanging tests
# log_cli = true
# log_cli_level = DEBUG