[pytest]
addopts = -q --tb=short
# Treat *all* warnings as errors to keep the suite warning-free.
filterwarnings =
    error
    # Do not fail tests when the benchmark fixture is declared but unused.
    ignore::pytest_benchmark.logger.PytestBenchmarkWarning
    # Ignore known warnings that don't affect test validity
    ignore::UserWarning:factory_module.factory
    # Ignore adaptation rate warnings in test configurations
    ignore:Large adaptation rate may cause instability:UserWarning
    # Ignore parameter range warnings in validation tests
    ignore:.*outside typical range.*:UserWarning
    # Ignore deprecation warnings from third-party packages
    ignore::DeprecationWarning:pkg_resources
    ignore::DeprecationWarning:optuna
    ignore::PendingDeprecationWarning
    # Ignore control saturation warnings in test environments
    ignore:The 'linear' switching method implements a piecewise.*:RuntimeWarning
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    benchmark: marks tests as benchmarks
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    full_dynamics: marks tests as full dynamics tests
    determinism: marks tests for determinism checking
    extra: marks tests as extra/optional
    # Advanced test categories for comprehensive coverage
    concurrent: marks tests as concurrent/thread-safety tests
    end_to_end: marks tests as end-to-end workflow tests
    error_recovery: marks tests as error recovery and resilience tests
    memory: marks tests as memory management and resource tests
    numerical_stability: marks tests as numerical stability tests
    convergence: marks tests as convergence analysis tests
    numerical_robustness: marks tests as numerical robustness tests
    property_based: marks tests as property-based/hypothesis tests
    statistical: marks tests as statistical analysis tests
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*