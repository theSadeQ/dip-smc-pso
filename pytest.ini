# Pytest Configuration
# DIP SMC PSO Testing Infrastructure
# Week 17: Testing Infrastructure Maturity - Phase 1

[pytest]
# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Command-line options applied automatically
addopts =
    # Coverage options
    --cov=src
    --cov-report=html
    --cov-report=term-missing:skip-covered
    --cov-report=json
    --cov-fail-under=85

    # Output options
    -v
    --tb=short
    --strict-markers
    --strict-config

    # Warnings
    -W error::DeprecationWarning
    -W error::PendingDeprecationWarning

    # Performance
    --durations=10

    # Color output
    --color=yes

# Custom markers for test categorization
markers =
    # Coverage categories
    safety_critical: Safety-critical component tests (100% coverage required)
    critical: Critical component tests (95% coverage required)
    general: General component tests (85% coverage required)

    # Test types
    unit: Unit tests (fast, isolated)
    integration: Integration tests (moderate speed, cross-component)
    end_to_end: End-to-end tests (slow, full system)

    # Quality gates
    property: Property-based tests (Hypothesis)
    benchmark: Performance benchmark tests (pytest-benchmark)
    mathematical: Mathematical property validation tests

    # Performance
    slow: Slow tests (>1 second)
    fast: Fast tests (<100ms)

    # Infrastructure
    memory: Memory leak and usage tests
    numerical: Numerical stability tests
    stability: Lyapunov stability validation tests

    # Component-specific
    controller: Controller tests
    optimizer: PSO optimization tests
    dynamics: Dynamics model tests
    simulation: Simulation tests
    factory: Factory pattern tests

# Test timeout (fail tests running longer than this)
timeout = 300

# Minimum Python version
minversion = 3.9

# Directories to ignore
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    __pycache__
    .cache
    .pytest_cache
    htmlcov
    .htmlcov
    .coverage
    .benchmarks
    .hypothesis
    .numba_cache
    node_modules

# Log configuration
log_cli = False
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s:%(lineno)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging
log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)s - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Console output
console_output_style = progress

# XFail behavior
xfail_strict = True

# Doctest configuration
doctest_optionflags = NORMALIZE_WHITESPACE ELLIPSIS

# Coverage configuration integration
# (Detailed coverage config in .coveragerc)

# Filter warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:hypothesis.*
    ignore::DeprecationWarning:pkg_resources.*

# Asyncio configuration (if needed in future)
# asyncio_mode = auto  # Disabled: pytest does not recognize this option

# Pytest-benchmark configuration
[tool:pytest-benchmark]
disable_gc = True
warmup = True
warmup_iterations = 100
min_rounds = 5
timer = time.perf_counter
calibration_precision = 10
max_time = 1.0
