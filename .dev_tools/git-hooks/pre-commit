#!/usr/bin/env bash
#==========================================================================================\\\
#======================== .dev_tools/git-hooks/pre-commit ================================\\\
#==========================================================================================\\\
#
# Documentation Quality Pre-Commit Hook
#
# This hook enforces CLAUDE.md Section 15: Documentation Quality Standards
# by scanning staged markdown files for AI-ish language patterns.
#
# Installation:
#   cp .dev_tools/git-hooks/pre-commit .git/hooks/pre-commit
#   chmod +x .git/hooks/pre-commit
#
# Bypass (emergency only):
#   git commit --no-verify
#
#==========================================================================================\\\

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}[PRE-COMMIT] Running documentation quality checks...${NC}"

# Get staged markdown files in docs/
STAGED_MD_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '^docs/.*\.md$' || true)

if [ -z "$STAGED_MD_FILES" ]; then
    echo -e "${GREEN}[PRE-COMMIT] No documentation files staged. Skipping quality checks.${NC}"
    exit 0
fi

echo -e "${BLUE}[PRE-COMMIT] Checking ${STAGED_MD_FILES} staged documentation files...${NC}"

# Initialize counters
TOTAL_FILES=0
FAILED_FILES=0
TOTAL_PATTERNS=0

# Temporary file for results
RESULTS_FILE=$(mktemp)

# Check if pattern detection script exists
if [ ! -f "scripts/docs/detect_ai_patterns.py" ]; then
    echo -e "${YELLOW}[PRE-COMMIT] Warning: Pattern detection script not found. Skipping quality checks.${NC}"
    exit 0
fi

# Check each staged markdown file
for FILE in $STAGED_MD_FILES; do
    TOTAL_FILES=$((TOTAL_FILES + 1))

    echo -e "${BLUE}[PRE-COMMIT] Scanning: $FILE${NC}"

    # Run pattern detection on the file
    PATTERN_OUTPUT=$(python scripts/docs/detect_ai_patterns.py --file "$FILE" 2>&1 || true)

    # Extract pattern count from output
    PATTERN_COUNT=$(echo "$PATTERN_OUTPUT" | grep -oP 'Total AI-ish patterns: \K\d+' || echo "0")

    TOTAL_PATTERNS=$((TOTAL_PATTERNS + PATTERN_COUNT))

    # Check if file exceeds threshold (5 patterns per file)
    if [ "$PATTERN_COUNT" -gt 5 ]; then
        FAILED_FILES=$((FAILED_FILES + 1))
        echo -e "${RED}[FAIL] $FILE: $PATTERN_COUNT patterns detected (threshold: 5)${NC}" | tee -a "$RESULTS_FILE"
        echo "$PATTERN_OUTPUT" >> "$RESULTS_FILE"
    elif [ "$PATTERN_COUNT" -gt 0 ]; then
        echo -e "${YELLOW}[WARN] $FILE: $PATTERN_COUNT patterns detected (acceptable: â‰¤5)${NC}"
    else
        echo -e "${GREEN}[PASS] $FILE: No AI-ish patterns detected${NC}"
    fi
done

# Summary
echo ""
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}Documentation Quality Check Summary${NC}"
echo -e "${BLUE}========================================${NC}"
echo -e "Files scanned: ${TOTAL_FILES}"
echo -e "Total AI-ish patterns: ${TOTAL_PATTERNS}"
echo -e "Files exceeding threshold: ${FAILED_FILES}"

# Decide whether to block commit
if [ "$FAILED_FILES" -gt 0 ]; then
    echo ""
    echo -e "${RED}========================================${NC}"
    echo -e "${RED}COMMIT BLOCKED: Documentation Quality Failure${NC}"
    echo -e "${RED}========================================${NC}"
    echo ""
    echo -e "${RED}$FAILED_FILES file(s) exceed the AI-ish pattern threshold (>5 patterns per file).${NC}"
    echo ""
    echo -e "${YELLOW}Please review and fix the following issues:${NC}"
    cat "$RESULTS_FILE"
    echo ""
    echo -e "${YELLOW}Guidance:${NC}"
    echo -e "  1. Review CLAUDE.md Section 15: Documentation Quality Standards"
    echo -e "  2. Consult docs/DOCUMENTATION_STYLE_GUIDE.md for professional writing guidelines"
    echo -e "  3. Run: python scripts/docs/suggest_fixes.py --file <filename> for automated suggestions"
    echo ""
    echo -e "${YELLOW}To bypass this check (emergency only):${NC}"
    echo -e "  git commit --no-verify"
    echo ""

    rm -f "$RESULTS_FILE"
    exit 1
else
    echo ""
    echo -e "${GREEN}========================================${NC}"
    echo -e "${GREEN}COMMIT APPROVED: Documentation Quality Passed${NC}"
    echo -e "${GREEN}========================================${NC}"
    echo ""

    rm -f "$RESULTS_FILE"
    exit 0
fi
