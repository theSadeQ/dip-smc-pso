[91mD:\Projects\main\docs\examples\index.md:16: WARNING: toctree contains reference to nonexisting document 'examples/examples/mathematical_notation_standards'[39;49;00m
[91mD:\Projects\main\docs\guides\interactive\index.md:219: WARNING: toctree contains reference to nonexisting document 'guides/interactive/guides/interactive/3d-pendulum-demo'[39;49;00m
[91mD:\Projects\main\docs\guides\interactive\index.md:219: WARNING: toctree contains reference to nonexisting document 'guides/interactive/guides/interactive/jupyter-notebooks-demo'[39;49;00m
[91mD:\Projects\main\docs\guides\interactive\index.md:219: WARNING: toctree contains reference to nonexisting document 'guides/interactive/guides/interactive/live-python-demo'[39;49;00m
[91mD:\Projects\main\docs\guides\interactive\index.md:219: WARNING: toctree contains reference to nonexisting document 'guides/interactive/guides/interactive/mathematical-visualizations-demo'[39;49;00m
[91mD:\Projects\main\docs\guides\interactive\index.md:219: WARNING: toctree contains reference to nonexisting document 'guides/interactive/guides/interactive/plotly-charts-demo'[39;49;00m
[91mD:\Projects\main\docs\optimization/pso_core_algorithm_guide.md:13: WARNING: 'contents': Has content, but none permitted [myst.directive_parse][39;49;00m
[91mD:\Projects\main\docs\optimization/pso_core_algorithm_guide.md:60: WARNING: 'literalinclude': Has content, but none permitted [myst.directive_parse][39;49;00m
[91mD:\Projects\main\docs\optimization/pso_core_algorithm_guide.md:60: WARNING: Include file 'D:\\Projects\\main\\src\\optimization\\algorithms\\swarm\\pso.py:language: python' not found or reading it failed[39;49;00m
[91mD:\Projects\main\docs\optimization/pso_core_algorithm_guide.md:218: WARNING: Non-consecutive header level increase; H1 to H3 [myst.header][39;49;00m
[91mD:\Projects\main\docs\presentation\index.md:24: WARNING: toctree contains reference to nonexisting document 'presentation/presentation/0-Introduction & Motivation'[39;49;00m
[91mD:\Projects\main\docs\presentation\index.md:24: WARNING: toctree contains reference to nonexisting document 'presentation/presentation/1-Problem Statement & Objectives'[39;49;00m
[91mD:\Projects\main\docs\presentation\index.md:24: WARNING: toctree contains reference to nonexisting document 'presentation/presentation/2-Previous Works'[39;49;00m
[91mD:\Projects\main\docs\presentation\index.md:24: WARNING: toctree contains reference to nonexisting document 'presentation/presentation/3-System Modling'[39;49;00m
[91mD:\Projects\main\docs\presentation\index.md:24: WARNING: toctree contains reference to nonexisting document 'presentation/presentation/4-0-SMC'[39;49;00m
[91mD:\Projects\main\docs\presentation\index.md:24: WARNING: toctree contains reference to nonexisting document 'presentation/presentation/5-Chattering & Mitigation'[39;49;00m
[91mD:\Projects\main\docs\presentation\index.md:24: WARNING: toctree contains reference to nonexisting document 'presentation/presentation/6-PSO'[39;49;00m
[91mD:\Projects\main\docs\presentation\index.md:24: WARNING: toctree contains reference to nonexisting document 'presentation/presentation/7-Simulation Setup'[39;49;00m
[91mD:\Projects\main\docs\presentation\index.md:24: WARNING: toctree contains reference to nonexisting document 'presentation/presentation/8-Results and Discussion'[39;49;00m
[91mD:\Projects\main\docs\references\index.md:3: WARNING: toctree contains reference to nonexisting document 'references/citation_index'[39;49;00m
[91mD:\Projects\main\docs\references\index.md:3: WARNING: toctree contains reference to nonexisting document 'references/references/notation_guide'[39;49;00m
[91mD:\Projects\main\docs\references/index.md:14: WARNING: 'grid-item-card': Invalid option value for 'link-type': doc Organized index of citations by topic and application area.: "doc Organized index of citations by topic and application area." unknown; choose from "url", "any", "ref", or "doc",
[91mD:\Projects\main\docs\references/index.md:14: WARNING: The parent of a 'grid-item' should be a 'grid-row' [design.grid][39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/PSO_OPTIMIZATION_TEST_VALIDATION_REPORT'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/ULTIMATE_ORCHESTRATOR_ISSUE_9_STRATEGIC_ASSESSMENT_REPORT'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/coverage_quality_report'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/factory_code_beautification_report'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/integration_health_report'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/integration_validation_final_report'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/integration_validation_report'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/integration_validation_report_2025_09_29'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/issue_10_ultrathink_resolution'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/issue_2_implementation_verification_report'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/issue_5_comment'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/issue_6_comment'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/issue_8_ultrathink_prompt'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/issue_9_ultrathink_prompt'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/optimization_report_factory_code'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/pso_algorithm_validation_report'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/pso_code_quality_beautification_assessment'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/pso_code_quality_optimization_report'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/pso_optimization_reality_check_report'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/sphinx_concatenated_headings_fix_report'[39;49;00m
[91mD:\Projects\main\docs\reports\index.md:13: WARNING: toctree contains reference to nonexisting document 'reports/reports/test_infrastructure_analysis_report'[39;49;00m
[91mD:\Projects\main\docs\results\index.md:3: WARNING: toctree contains reference to nonexisting document 'results/performance_analysis'[39;49;00m
[91mD:\Projects\main\docs\results\index.md:3: WARNING: toctree contains reference to nonexisting document 'results/optimization_results'[39;49;00m
[91mD:\Projects\main\docs\results\index.md:3: WARNING: toctree contains reference to nonexisting document 'results/comparative_study'[39;49;00m
[91mD:\Projects\main\docs\results\index.md:3: WARNING: toctree contains reference to nonexisting document 'results/experimental_validation'[39;49;00m
[91mD:\Projects\main\docs\testing\index.md:28: WARNING: toctree contains reference to nonexisting document 'testing/testing/BROWSER_TESTING_CHECKLIST'[39;49;00m
[91mD:\Projects\main\docs\testing\index.md:28: WARNING: toctree contains reference to nonexisting document 'testing/testing/PHASE5_SETUP_COMPLETE'[39;49;00m
[91mD:\Projects\main\docs\testing\index.md:28: WARNING: toctree contains reference to nonexisting document 'testing/testing/PHASE6_TEST_EXECUTION_REPORT'[39;49;00m
[91mD:\Projects\main\docs\testing\index.md:28: WARNING: toctree contains reference to nonexisting document 'testing/testing/TESTING_PROCEDURES'[39;49;00m
[91mD:\Projects\main\docs\testing\index.md:28: WARNING: toctree contains reference to nonexisting document 'testing/testing/code_collapse_validation_report'[39;49;00m
[91mD:\Projects\main\docs\theory\index.md:3: WARNING: toctree contains reference to nonexisting document 'theory/theory/notation_and_conventions'[39;49;00m
[91mD:\Projects\main\docs\theory/index.md:21: WARNING: 'grid-item-card': Invalid options format (bad YAML) [myst.directive_parse][39;49;00m
[91mD:\Projects\main\docs\theory/index.md:21: WARNING: The parent of a 'grid-item' should be a 'grid-row' [design.grid][39;49;00m
[91mD:\Projects\main\docs\theory/system_dynamics_complete.md:5: WARNING: 'figure': Invalid option value for 'width': 600px Double-inverted pendulum system with coordinate definitions.: not a positive measure of one of the following units:
[91mD:\Projects\main\docs\theory\system_dynamics_complete.md:: WARNING: image file not readable: visual/dip_system_diagram.png[39;49;00m
[91mD:\Projects\main\docs\visual\index.md:3: WARNING: toctree contains reference to nonexisting document 'visual/algorithm_flowcharts'[39;49;00m
[91mD:\Projects\main\docs\visual\index.md:3: WARNING: toctree contains reference to nonexisting document 'visual/block_diagrams'[39;49;00m
[91mD:\Projects\main\docs\visual\index.md:3: WARNING: toctree contains reference to nonexisting document 'visual/results_visualization'[39;49;00m
[91mD:\Projects\main\docs\visual\index.md:3: WARNING: toctree contains reference to nonexisting document 'visual/visual/system_diagrams'[39;49;00m
[91mD:\Projects\main\docs\visual/index.md:16: WARNING: 'grid-item-card': Invalid option value for 'link-type': doc Templates and examples for plotting simulation results and performance analysis.: "doc Templates and examples for plotting simulation results and performance analysis." unknown; choose from "url", "any", "ref", or "doc",
[91mD:\Projects\main\docs\visual/index.md:16: WARNING: The parent of a 'grid-item' should be a 'grid-row' [design.grid][39;49;00m
[01mchecking consistency... [39;49;00m[91mD:\Projects\main\docs\advanced/numerical_stability.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\analysis/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\architecture/controller_system_architecture.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\controllers/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\controllers/legacy-index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\coverage/README.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\deployment/production_deployment_guide.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\examples/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\examples/mathematical_notation_standards.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\factory/README.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\factory_integration_troubleshooting_guide.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\for_reviewers/README.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\guides/features/README.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\guides/features/code-collapse/troubleshooting.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\guides/features/code-collapse/user-guide.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\guides/interactive/3d-pendulum-demo.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\guides/interactive/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\guides/interactive/jupyter-notebooks-demo.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\guides/interactive/live-python-demo.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\guides/interactive/mathematical-visualizations-demo.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\guides/interactive/plotly-charts-demo.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\mcp-debugging/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\optimization/legacy-index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation/guide.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\plans/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\plant/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\presentation/0-Introduction & Motivation.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\presentation/1-Problem Statement & Objectives.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\presentation/2-Previous Works.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\presentation/3-System Modling.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\presentation/4-0-SMC.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\presentation/5-Chattering & Mitigation.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\presentation/6-PSO.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\presentation/7-Simulation Setup.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\presentation/8-Results and Discussion.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\presentation/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\pso_algorithm_mathematical_foundations.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\pso_gain_bounds_mathematical_foundations.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\pso_integration_system_architecture.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reference/implementation/code_documentation_index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reference/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reference/presentation/results-discussion.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\references/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\references/notation_guide.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/PSO_OPTIMIZATION_TEST_VALIDATION_REPORT.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/ULTIMATE_ORCHESTRATOR_ISSUE_9_STRATEGIC_ASSESSMENT_REPORT.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/coverage_quality_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/factory_code_beautification_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/integration_health_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/integration_validation_final_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/integration_validation_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/integration_validation_report_2025_09_29.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/issue_10_ultrathink_resolution.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/issue_2_implementation_verification_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/issue_5_comment.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/issue_6_comment.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/issue_8_ultrathink_prompt.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/issue_9_ultrathink_prompt.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/optimization_report_factory_code.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/pso_algorithm_validation_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/pso_code_quality_beautification_assessment.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/pso_code_quality_optimization_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/pso_optimization_reality_check_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/sphinx_concatenated_headings_fix_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\reports/test_infrastructure_analysis_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\results/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\styling-library/README.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\technical/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\testing/BROWSER_TESTING_CHECKLIST.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\testing/PHASE5_SETUP_COMPLETE.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\testing/PHASE6_TEST_EXECUTION_REPORT.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\testing/TESTING_PROCEDURES.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\testing/code_collapse_validation_report.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\testing/reports/guides/control_systems_unit_testing.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\testing/reports/guides/performance_benchmarking.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\troubleshooting/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\tutorials/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\visual/index.md: WARNING: document isn't included in any toctree[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:52: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:129: WARNING: Pygments lexer name 'pythonavailable' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:153: WARNING: Pygments lexer name 'pythonall_controllers' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:184: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:254: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:321: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:362: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:377: WARNING: Lexing literal_block "# example-metadata:\n\n# runnable: false def _get_controller_info(controller_type: str) -> Dict[str, Any]\n\n``` **Note**: This is an internal function. Use public functions like `list_available_controllers()` instead.\n\n#### Registry Structure The `CONTROLLER_REGISTRY` contains metadata for each controller:\n\n```python# example-metadata:\n# runnable: false CONTROLLER_REGISTRY = { 'controller_type': { 'class':\n\nControllerClass, # Implementation class 'config_class': ConfigClass, # Configuration class 'default_gains': [float, ...], # Default gain values 'gain_count': int, # Expected number of gains 'description': str, # Human-readable description 'supports_dynamics': bool, # Supports dynamics model 'required_params': [str, ...] # Required parameters }\n}\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:395: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:413: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:419: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:428: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:446: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:461: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:467: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:495: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:511: WARNING: Pygments lexer name 'pythonclass' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:522: WARNING: Lexing literal_block 'class ConfigValueError(ValueError): """Exception raised for invalid configuration values.""" pass\n``` **Usage Example:**\n\n```python\n\ntry: controller = create_controller(\'mpc_controller\', config=invalid_config)\nexcept ConfigValueError as e: print(f"Configuration error: {e}") # Handle invalid configuration\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:536: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:546: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:558: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:564: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:578: WARNING: Pygments lexer name 'python#!/usr/bin/env' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_methods_reference.md:593: WARNING: Pygments lexer name 'python#!/usr/bin/env' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_reference.md:59: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_reference.md:103: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_reference.md:156: WARNING: Lexing literal_block "\n## Integration Examples\n\n### Simulation Integration\n\n```python src.controllers.factory import create_controller\n\nfrom src.core.simulation_runner import SimulationRunner # Create controller via factory\ncontroller = create_controller('adaptive_smc') # Use in simulation\nrunner = SimulationRunner(controller=controller, dynamics=dynamics)\nresults = runner.run(initial_state=[0.1, 0.0, 0.05, 0.0, 0.1, 0.0], duration=2.0)\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_reference.md:198: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_reference.md:216: WARNING: Pygments lexer name 'pythonimport' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:6: WARNING: undefined label: '/api/factory_system_api_reference.md#overview'[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:8: WARNING: undefined label: '/api/factory_system_api_reference.md#core-factory-functions'[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:9: WARNING: undefined label: '/api/factory_system_api_reference.md#controller-registry-system'[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:10: WARNING: undefined label: '/api/factory_system_api_reference.md#pso-integration'[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:11: WARNING: undefined label: '/api/factory_system_api_reference.md#configuration-schema-mapping'[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:12: WARNING: undefined label: '/api/factory_system_api_reference.md#validation-rules'[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:13: WARNING: undefined label: '/api/factory_system_api_reference.md#error-handling'[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:14: WARNING: undefined label: '/api/factory_system_api_reference.md#extensibility-guide'[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:43: WARNING: Lexing literal_block 'src/controllers/factory.py\n\u251c\u2500\u2500 Type Definitions\n\u2502 \u251c\u2500\u2500 StateVector, ControlOutput, GainsArray, ConfigDict\n\u2502 \u251c\u2500\u2500 ControllerProtocol (Protocol class)\n\u2502 \u2514\u2500\u2500 SMCType, SMCConfig (Backward compatibility)\n\u2502\n\u251c\u2500\u2500 Controller Registry\n\u2502 \u251c\u2500\u2500 CONTROLLER_REGISTRY: Dict[str, ControllerMetadata]\n\u2502 \u2514\u2500\u2500 CONTROLLER_ALIASES: Dict[str, str]\n\u2502\n\u251c\u2500\u2500 Core Factory Functions\n\u2502 \u251c\u2500\u2500 create_controller(controller_type, config, gains)\n\u2502 \u251c\u2500\u2500 list_available_controllers()\n\u2502 \u251c\u2500\u2500 list_all_controllers()\n\u2502 \u2514\u2500\u2500 get_default_gains(controller_type)\n\u2502\n\u251c\u2500\u2500 Helper Functions (Internal)\n\u2502 \u251c\u2500\u2500 _canonicalize_controller_type(name)\n\u2502 \u251c\u2500\u2500 _get_controller_info(controller_type)\n\u2502 \u251c\u2500\u2500 _resolve_controller_gains(gains, config, type, info)\n\u2502 \u251c\u2500\u2500 _validate_controller_gains(gains, info, type)\n\u2502 \u251c\u2500\u2500 _create_dynamics_model(config)\n\u2502 \u251c\u2500\u2500 _extract_controller_parameters(config, type, info)\n\u2502 \u2514\u2500\u2500 _validate_mpc_parameters(config_params, controller_params)\n\u2502\n\u251c\u2500\u2500 PSO Integration Classes\n\u2502 \u251c\u2500\u2500 PSOControllerWrapper: PSO-compatible controller interface\n\u2502 \u251c\u2500\u2500 SMCFactory: Factory class for SMCType enum\n\u2502 \u2514\u2500\u2500 SMCGainSpec: Gain specification with bounds\n\u2502\n\u2514\u2500\u2500 PSO Factory Functions \u251c\u2500\u2500 create_smc_for_pso(smc_type, gains, plant_config, **kwargs) \u251c\u2500\u2500 create_pso_controller_factory(smc_type, plant_config, **kwargs) \u251c\u2500\u2500 get_expected_gain_count(smc_type) \u251c\u2500\u2500 get_gain_bounds_for_pso(smc_type) \u2514\u2500\u2500 validate_smc_gains(smc_type, gains)\n' as "python" resulted in an error at token: '\u251c'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:79: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:118: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:152: WARNING: Lexing literal_block '\n#### Return Value Returns a controller instance implementing the `ControllerProtocol` interface:\n\n```python# example-metadata:\n# runnable: false class ControllerProtocol(Protocol): def compute_control( self, state:\n\nStateVector, last_control: float, history: ConfigDict ) -> ControlOutput: """Compute control output for given state.""" ... def reset(self) -> None: """Reset controller internal state.""" ... @property def gains(self) -> List[float]: """Return controller gains.""" ...\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:172: WARNING: Lexing literal_block '\nfrom src.config import load_config # Load configuration\nconfig = load_config("config.yaml") # Create controller with config defaults\ncontroller = create_controller(\'classical_smc\', config) # Use controller in simulation\nstate = np.array([0.0, 0.1, 0.05, 0.0, 0.0, 0.0])\ncontrol_output = controller.compute_control(state, 0.0, {})\nprint(f"Control force: {control_output.u:.3f} N")\n``` **Example 2: PSO-Optimized Controller Creation** ```python\nfrom src.controllers.factory import create_controller\nfrom src.optimization.algorithms.pso_optimizer import PSOTuner\nfrom src.config import load_config # Load configuration\nconfig = load_config("config.yaml") # PSO optimization finds optimal gains\n# (See PSO Integration section for complete optimization workflow)\noptimized_gains = [25.3, 18.7, 14.2, 10.8, 42.6, 6.1] # From PSO # Create controller with optimized gains\ncontroller = create_controller(\'classical_smc\', config, gains=optimized_gains) # Optimized controller has lower cost than defaults\nbaseline_cost = evaluate_controller(create_controller(\'classical_smc\', config))\noptimized_cost = evaluate_controller(controller)\nprint(f"Cost improvement: {((baseline_cost - optimized_cost) / baseline_cost * 100):.1f}%")\n``` **Example 3: Batch Controller Creation for Comparison** ```python\n\nfrom src.controllers.factory import create_controller, list_available_controllers\nfrom src.config import load_config config = load_config("config.yaml") # Create all available controller types\ncontrollers = {}\nfor controller_type in list_available_controllers(): try: controllers[controller_type] = create_controller(controller_type, config) print(f"\u2713 Created {controller_type}") except Exception as e: print(f"\u2717 Failed to create {controller_type}: {e}") # Run comparative simulation\nfor name, controller in controllers.items(): cost = simulate_and_evaluate(controller) print(f"{name}: cost={cost:.3f}")\n``` **Example 4: Custom Configuration Override** ```python\nfrom src.controllers.factory import create_controller\nfrom src.config import load_config config = load_config("config.yaml") # Override specific controller parameters\ncustom_gains = [30.0, 20.0, 15.0, 12.0, 45.0, 7.0]\ncontroller = create_controller( \'classical_smc\', config, gains=custom_gains\n) # Verify custom gains applied\nassert controller.gains == custom_gains\nprint(f"Controller created with custom gains: {controller.gains}")\n``` **Example 5: Type Alias Usage** ```python\n\nfrom src.controllers.factory import create_controller # All these create the same controller type (\'sta_smc\')\ncontroller1 = create_controller(\'sta_smc\') # Canonical name\ncontroller2 = create_controller(\'super_twisting\') # Alias\ncontroller3 = create_controller(\'sta\') # Short alias # Verify all are the same type\nassert type(controller1) == type(controller2) == type(controller3)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:221: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:228: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:236: WARNING: Lexing literal_block '\navailable = list_available_controllers()\nprint(f"Available controllers: {available}") if \'mpc_controller\' in available: mpc = create_controller(\'mpc_controller\') print("MPC controller created successfully")\nelse: print("MPC not available (install cvxpy: pip install cvxpy)")\n``` **Example 2: Dynamic Benchmarking** ```python\n\nfrom src.controllers.factory import list_available_controllers, create_controller\nimport pandas as pd # Benchmark all available controllers\nresults = []\nfor controller_type in list_available_controllers(): controller = create_controller(controller_type) cost, time = evaluate_controller(controller) results.append({ \'controller\': controller_type, \'cost\': cost, \'computation_time\': time }) # Display results\ndf = pd.DataFrame(results)\nprint(df.sort_values(\'cost\'))\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:257: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:263: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:279: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:303: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:347: WARNING: Pygments lexer name "python'classical_smc':" is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:414: WARNING: Pygments lexer name '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:448: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:481: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:503: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:509: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:519: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:550: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:571: WARNING: Pygments lexer name 'yamlcontrollers:' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:592: WARNING: Lexing literal_block '# config.yaml\n\ncontrollers: classical_smc: gains: [25.0, 18.0, 14.0, 10.0, 42.0, 6.0] max_force: 150.0 boundary_layer: 0.3 dt: 0.001\n``` ```python\n# example-metadata:\n\n# runnable: false # Maps to ClassicalSMC initialization:\n\ncontroller = ClassicalSMC( gains=[25.0, 18.0, 14.0, 10.0, 42.0, 6.0], max_force=150.0, boundary_layer=0.3, dt=0.001, regularization_alpha=1e-4, # Default min_regularization=1e-10, # Default max_condition_number=1e14, # Default use_adaptive_regularization=True, # Default dynamics_model=<DIPDynamics instance> # Auto-created from config.physics\n)\n' as "yaml" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:614: WARNING: Lexing literal_block "# config.yaml\n\ncontrollers: sta_smc: gains: [30.0, 18.0, 22.0, 14.0, 9.0, 7.0] # K1=30 > K2=18 \u2713 max_force: 150.0 dt: 0.001 boundary_layer: 0.3 switch_method: 'tanh'\n``` ```python\n# example-metadata:\n\n# runnable: false # Maps to SuperTwistingSMC initialization:\n\ncontroller = SuperTwistingSMC( gains=[30.0, 18.0, 22.0, 14.0, 9.0, 7.0], max_force=150.0, dt=0.001, boundary_layer=0.3, switch_method='tanh', damping_gain=0.0, # Default power_exponent=0.5, # Default dynamics_model=<DIPDynamics instance>\n)\n" as "yaml" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:641: WARNING: Lexing literal_block '# config.yaml\n\ncontrollers: adaptive_smc: gains: [28.0, 20.0, 16.0, 12.0, 5.0] # Exactly 5 gains max_force: 150.0 dt: 0.001 # Required! leak_rate: 0.01 dead_zone: 0.05 smooth_switch: true\n``` ```python\n# example-metadata:\n\n# runnable: false # Maps to AdaptiveSMC initialization:\n\ncontroller = AdaptiveSMC( gains=[28.0, 20.0, 16.0, 12.0, 5.0], max_force=150.0, dt=0.001, leak_rate=0.01, dead_zone=0.05, adapt_rate_limit=10.0, # Default K_min=0.1, # Default K_max=100.0, # Default K_init=10.0, # Default alpha=0.5, # Default boundary_layer=0.01, # Default smooth_switch=True, dynamics_model=<DIPDynamics instance>\n)\n' as "yaml" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:670: WARNING: Lexing literal_block '# config.yaml\n\ncontrollers: hybrid_adaptive_sta_smc: max_force: 150.0 dt: 0.001 k1_init: 4.0 k2_init: 0.4 gamma1: 2.0 gamma2: 0.5 dead_zone: 0.05\n``` ```python\n# Factory auto-creates sub-configs:\n\nfrom src.controllers.smc.algorithms.classical.config import ClassicalSMCConfig\nfrom src.controllers.smc.algorithms.adaptive.config import AdaptiveSMCConfig\nfrom src.controllers.smc.algorithms.hybrid.config import HybridMode classical_config = ClassicalSMCConfig( gains=[20.0, 15.0, 12.0, 8.0, 35.0, 5.0], max_force=150.0, dt=0.001, boundary_layer=0.02\n) adaptive_config = AdaptiveSMCConfig( gains=[25.0, 18.0, 15.0, 10.0, 4.0], max_force=150.0, dt=0.001\n) # Maps to ModularHybridSMC initialization:\nfrom src.controllers.smc.algorithms.hybrid.controller import ModularHybridSMC\ncontroller = ModularHybridSMC( HybridAdaptiveSTASMCConfig( hybrid_mode=HybridMode.CLASSICAL_ADAPTIVE, dt=0.001, max_force=150.0, classical_config=classical_config, adaptive_config=adaptive_config, dynamics_model=None # Hybrid uses sub-controller dynamics )\n)\n' as "yaml" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:711: WARNING: Pygments lexer name '**Adaptive' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:742: WARNING: Lexing literal_block '\ngains = [20.0, 15.0, 12.0, 8.0, 35.0, 5.0]\ncontroller = create_controller(\'classical_smc\', gains=gains) # \u2713 Success\n``` **Example 2: Invalid Gain Count** ```python\n\nfrom src.controllers.factory import create_controller # Invalid: Wrong number of gains\ngains = [20.0, 15.0, 12.0] # Only 3 gains, need 6\ntry: controller = create_controller(\'classical_smc\', gains=gains)\nexcept ValueError as e: print(e) # Output: "Controller \'Classical sliding mode controller with boundary layer\' # requires 6 gains, got 3"\n``` **Example 3: Invalid STA Constraint** ```python\n\nfrom src.controllers.factory import create_controller # Invalid: K1 \u2264 K2 violates super-twisting stability\ngains = [15.0, 20.0, 12.0, 8.0, 6.0, 4.0] # K1=15 \u2264 K2=20 \u2717\ntry: controller = create_controller(\'sta_smc\', gains=gains)\nexcept ValueError as e: print(e) # Output: "Super-Twisting stability requires K1 > K2 > 0"\n``` **Example 4: Automatic Correction** The factory attempts automatic correction for invalid default gains: ```python\n# Factory detects invalid default gains and auto-corrects\n\ncontroller = create_controller(\'sta_smc\') # Uses defaults # If defaults violate K1 > K2, factory automatically uses:\n# [25.0, 15.0, 20.0, 12.0, 8.0, 6.0] # K1=25 > K2=15 \u2713\n\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:772: WARNING: Pygments lexer name 'Exception' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:795: WARNING: Lexing literal_block 'def _canonicalize_controller_type(name: str) -> str: if not isinstance(name, str): raise ValueError(f"Controller type must be string, got {type(name)}") if not name.strip(): raise ValueError("Controller type cannot be empty") key = name.strip().lower().replace(\'-\', \'_\').replace(\' \', \'_\') return CONTROLLER_ALIASES.get(key, key)\n``` **Error Example:**\n\n```python\n\ntry: controller = create_controller(123) # Wrong type\nexcept ValueError as e: print(e) # Output: "Controller type must be string, got <class \'int\'>"\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:807: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:818: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:827: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:861: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:869: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:879: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:888: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:896: WARNING: Pygments lexer name 'yamlcontrollers:' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:901: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:912: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:946: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:958: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\factory_system_api_reference.md:972: WARNING: Pygments lexer name 'python"""' is not known[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:369: WARNING: local id not found in doc 'theory/pso_algorithm_foundations': '72-bounds-selection-rationale' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:370: WARNING: local id not found in doc 'api/factory_system_api_reference': '53-gain-validation-rules' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:10: WARNING: undefined label: '/api/optimization_module_api_reference.md#1-overview--architecture'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:10: WARNING: undefined label: '/api/optimization_module_api_reference.md#11-optimization-system-architecture'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:10: WARNING: undefined label: '/api/optimization_module_api_reference.md#12-pso-workflow'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:10: WARNING: undefined label: '/api/optimization_module_api_reference.md#13-module-relationships'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:12: WARNING: undefined label: '/api/optimization_module_api_reference.md#2-psotuner-api'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:12: WARNING: undefined label: '/api/optimization_module_api_reference.md#21-class-overview'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:12: WARNING: undefined label: '/api/optimization_module_api_reference.md#22-initialization'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:12: WARNING: undefined label: '/api/optimization_module_api_reference.md#23-optimization-workflow'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:12: WARNING: undefined label: '/api/optimization_module_api_reference.md#24-fitness-function-design'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:12: WARNING: undefined label: '/api/optimization_module_api_reference.md#25-cost-normalization'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:13: WARNING: undefined label: '/api/optimization_module_api_reference.md#3-convergence-analysis-api'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:13: WARNING: undefined label: '/api/optimization_module_api_reference.md#31-enhancedconvergenceanalyzer-class'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:13: WARNING: undefined label: '/api/optimization_module_api_reference.md#32-convergence-metrics'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:13: WARNING: undefined label: '/api/optimization_module_api_reference.md#33-convergence-criteria'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:13: WARNING: undefined label: '/api/optimization_module_api_reference.md#34-real-time-monitoring'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:14: WARNING: undefined label: '/api/optimization_module_api_reference.md#4-bounds-validation-api'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:14: WARNING: undefined label: '/api/optimization_module_api_reference.md#41-psoboundsvalidator-class'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:14: WARNING: undefined label: '/api/optimization_module_api_reference.md#42-controller-specific-bounds'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:14: WARNING: undefined label: '/api/optimization_module_api_reference.md#43-validation-rules'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:14: WARNING: undefined label: '/api/optimization_module_api_reference.md#44-automatic-adjustment'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:15: WARNING: undefined label: '/api/optimization_module_api_reference.md#5-bounds-optimization-api'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:15: WARNING: undefined label: '/api/optimization_module_api_reference.md#51-psoboundsoptimizer-class'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:15: WARNING: undefined label: '/api/optimization_module_api_reference.md#52-optimization-strategies'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:15: WARNING: undefined label: '/api/optimization_module_api_reference.md#53-multi-criteria-selection'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:16: WARNING: undefined label: '/api/optimization_module_api_reference.md#6-hyperparameter-optimization-api'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:16: WARNING: undefined label: '/api/optimization_module_api_reference.md#61-psohyperparameteroptimizer-class'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:16: WARNING: undefined label: '/api/optimization_module_api_reference.md#62-meta-optimization'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:16: WARNING: undefined label: '/api/optimization_module_api_reference.md#63-multi-objective-optimization'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:17: WARNING: undefined label: '/api/optimization_module_api_reference.md#7-factory-integration-api'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:17: WARNING: undefined label: '/api/optimization_module_api_reference.md#71-enhancedpsofactory'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:17: WARNING: undefined label: '/api/optimization_module_api_reference.md#72-integration-patterns'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:18: WARNING: undefined label: '/api/optimization_module_api_reference.md#8-complete-code-examples'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:18: WARNING: undefined label: '/api/optimization_module_api_reference.md#81-basic-pso-optimization'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:18: WARNING: undefined label: '/api/optimization_module_api_reference.md#82-real-time-convergence-monitoring'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:18: WARNING: undefined label: '/api/optimization_module_api_reference.md#83-bounds-validation-and-adjustment'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:18: WARNING: undefined label: '/api/optimization_module_api_reference.md#84-hyperparameter-optimization'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:18: WARNING: undefined label: '/api/optimization_module_api_reference.md#85-complete-optimization-pipeline'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:19: WARNING: undefined label: '/api/optimization_module_api_reference.md#9-performance--tuning-guidelines'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:19: WARNING: undefined label: '/api/optimization_module_api_reference.md#91-pso-parameter-selection'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:19: WARNING: undefined label: '/api/optimization_module_api_reference.md#92-convergence-criteria-tuning'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:19: WARNING: undefined label: '/api/optimization_module_api_reference.md#93-computational-efficiency'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:20: WARNING: undefined label: '/api/optimization_module_api_reference.md#10-theory-cross-references'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:20: WARNING: undefined label: '/api/optimization_module_api_reference.md#101-phase-22-links-pso-foundations'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:20: WARNING: undefined label: '/api/optimization_module_api_reference.md#102-phase-42-links-factory-system'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:20: WARNING: undefined label: '/api/optimization_module_api_reference.md#103-related-documentation'[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:183: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:352: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:380: WARNING: Pygments lexer name 'pythonclass' is not known[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:386: WARNING: Lexing literal_block '\nclass BoundsOptimizationStrategy(Enum): """Bounds optimization strategies.""" PHYSICS_BASED = "physics_based" # Stability-constrained bounds PERFORMANCE_DRIVEN = "performance_driven" # Empirically validated bounds CONVERGENCE_FOCUSED = "convergence_focused" # PSO-optimized bounds HYBRID = "hybrid" # Weighted combination\n``` **Strategy Descriptions:** 1. **PHYSICS_BASED:** - Derives bounds from controller stability analysis - Uses Lyapunov stability conditions to determine minimum gains - Computes maximum gains from actuator saturation limits - **Pros**: Guaranteed stability, theoretically sound - **Cons**: May be overly conservative 2. **PERFORMANCE_DRIVEN:** - Analyzes historical optimization results - Identifies parameter ranges that produced best controllers - Uses percentile-based bounds (e.g., 5th-95th percentile of successful gains) - **Pros**: Empirically validated, practical - **Cons**: Requires historical data 3. **CONVERGENCE_FOCUSED:** - Optimizes bounds to improve PSO convergence rate - Minimizes: $J_{bounds} = w_1 \\cdot t_{conv} + w_2 \\cdot N_{evals} + w_3 \\cdot (1 - q_{final})$ - Where $t_{conv}$ = convergence time, $N_{evals}$ = function evaluations, $q_{final}$ = solution quality - **Pros**: Fast optimization, fewer iterations - **Cons**: May sacrifice solution quality for speed 4. **HYBRID (Recommended):** - Weighted combination of all three strategies - Default weights: $(w_{phys}, w_{perf}, w_{conv}) = (0.4, 0.4, 0.2)$ - Balances theoretical soundness, practical performance, and convergence speed - **Pros**: Robust, balanced approach - **Cons**: Requires tuning of strategy weights\n\n### 5.3 Multi-Criteria Selection **Optimization Method:**\n\n```python# example-metadata:\n# runnable: false def optimize_bounds_for_controller( self, controller_type: SMCType, strategy:\n\nBoundsOptimizationStrategy = BoundsOptimizationStrategy.HYBRID, max_optimization_time: float = 300.0, n_trials: int = 10\n) -> BoundsValidationResult: """ Optimize PSO parameter bounds for specific controller type. Algorithm: 1. Generate candidate bounds from selected strategy 2. Evaluate candidates through PSO trials 3. Score candidates using multi-criteria objective 4. Select optimal bounds via Pareto dominance 5. Validate through testing Parameters ---------- controller_type : SMCType Controller type to optimize bounds for strategy : BoundsOptimizationStrategy, optional Optimization strategy (default: HYBRID) max_optimization_time : float, optional Maximum time in seconds (default: 300) n_trials : int, optional Number of PSO trials per candidate (default: 10) Returns ------- BoundsValidationResult Optimized bounds with performance metrics """\n``` **Multi-Criteria Objective:** Bounds are scored using: $$\n\nJ_{bounds} = w_1 \\cdot R_{conv} + w_2 \\cdot Q_{final} + w_3 \\cdot P_{success} + w_4 \\cdot S_{robust}\n$$ where:\n- $R_{conv}$: Convergence rate improvement (normalized)\n- $Q_{final}$: Final cost quality improvement (normalized)\n- $P_{success}$: Success rate across trials ([0, 1])\n- $S_{robust}$: Robustness score (performance variance metric)\n- Weights: $(w_1, w_2, w_3, w_4) = (0.3, 0.4, 0.2, 0.1)$ **Example:** ```python\nfrom src.optimization.validation.pso_bounds_optimizer import ( PSOBoundsOptimizer, BoundsOptimizationStrategy\n)\nfrom src.controllers.factory import SMCType\nfrom src.config import load_config config = load_config("config.yaml")\noptimizer = PSOBoundsOptimizer(config) # Optimize bounds for Classical SMC\nresult = optimizer.optimize_bounds_for_controller( controller_type=SMCType.CLASSICAL, strategy=BoundsOptimizationStrategy.HYBRID, max_optimization_time=600.0, n_trials=20\n) print(f"Optimized Bounds:")\nprint(f" Lower: {result.adjusted_bounds[\'lower\']}")\nprint(f" Upper: {result.adjusted_bounds[\'upper\']}")\nprint(f"\\nPerformance Improvements:")\nprint(f" Convergence: {result.convergence_estimate:.2%}")\nprint(f" Quality: {result.stability_analysis[\'quality_improvement\']:.2%}")\nprint(f" Success Rate: {result.stability_analysis[\'success_rate\']:.2%}")\n``` **Cross-References:**\n\n- **Theory**: [Phase 2.2, Section 4: Parameter Sensitivity](../theory/pso_algorithm_foundations.md#4-parameter-sensitivity)\n- **Factory**: [Phase 4.2, Section 5.4: Bounds Management](factory_system_api_reference.md#54-bounds-management)\n\n---\n\n## 6.\n\nHyperparameter Optimization API\n\n### 6.1 PSOHyperparameterOptimizer Class **Location:** `src/optimization/tuning/pso_hyperparameter_optimizer.py`\n\n```pythonclass PSOHyperparameterOptimizer: """ Meta-optimization of PSO hyperparameters for controller tuning. Optimizes PSO algorithm parameters (w, c1, c2, swarm_size) to improve convergence speed and solution quality for specific controller types. """\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:444: WARNING: Pygments lexer name '**Objective' is not known[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:592: WARNING: Lexing literal_block '\n# example-metadata:\n\n# runnable: false #!/usr/bin/env python3\n\n"""\nExample 2: Real-Time Convergence Monitoring Demonstrates:\n- EnhancedConvergenceAnalyzer integration\n- Multi-criteria convergence detection\n- Real-time metric logging\n- Early stopping based on convergence status\n""" import matplotlib.pyplot as plt\nimport numpy as np\nfrom functools import partial from src.optimization.algorithms.pso_optimizer import PSOTuner\nfrom src.optimization.validation.enhanced_convergence_analyzer import ( EnhancedConvergenceAnalyzer, ConvergenceCriteria, ConvergenceStatus\n)\nfrom src.controllers.factory import create_controller, SMCType\nfrom src.config import load_config # ============================================================================\n# Configuration\n\n# ============================================================================ CONFIG_PATH = "config.yaml"\n\nCONTROLLER_TYPE = \'sta_smc\'\nSEED = 42 # ============================================================================\n# Convergence Monitoring Callback\n\n# ============================================================================ class ConvergenceMonitor: """Callback for real-time convergence monitoring.""" def __init__(self, analyzer: EnhancedConvergenceAnalyzer): self.analyzer = analyzer self.metrics_history = [] def __call__(self, iteration: int, best_fitness: float, mean_fitness: float, fitness_std: float, swarm_positions: np.ndarray): """Check convergence at each iteration.""" status, metrics = self.analyzer.check_convergence( iteration=iteration, best_fitness=best_fitness, mean_fitness=mean_fitness, fitness_std=fitness_std, swarm_positions=swarm_positions ) self.metrics_history.append(metrics) # Log key metrics if iteration % 10 == 0: print(f"Iter {iteration:3d} | Status: {status.value:20s} | " f"Best: {metrics.best_fitness:.6f} | " f"Diversity: {metrics.population_diversity:.4f} | " f"Conv.\n\nVelocity: {metrics.convergence_velocity:.4e} | " f"Predicted Remaining: {metrics.predicted_iterations_remaining:3d}") # Early stopping if status == ConvergenceStatus.CONVERGED: print(f"\\n>>> CONVERGENCE DETECTED at iteration {iteration} <<<") return True # Signal early stop elif status == ConvergenceStatus.STAGNATED: print(f"\\n>>> STAGNATION DETECTED at iteration {iteration} <<<") return True # Signal early stop return False # Continue # ============================================================================\n\n# Main\n\n# ============================================================================ def main(): # Load configuration config = load_config(CONFIG_PATH) # Initialize convergence analyzer with custom criteria criteria = ConvergenceCriteria( fitness_tolerance=1e-6, relative_improvement_threshold=1e-4, min_diversity_threshold=1e-3, max_stagnation_iterations=50, enable_performance_prediction=True, premature_convergence_detection=True ) analyzer = EnhancedConvergenceAnalyzer( criteria=criteria, controller_type=SMCType.STA ) monitor = ConvergenceMonitor(analyzer) # Create controller factory controller_factory = partial( create_controller, controller_type=CONTROLLER_TYPE, config=config ) # Initialize PSO tuner tuner = PSOTuner( controller_factory=controller_factory, config=config, seed=SEED ) # Run optimization with monitoring print(f"Running PSO optimization with real-time convergence monitoring...") print(f"{\'=\'*120}") result = tuner.optimise() print(f"{\'=\'*120}\\n") # Plot convergence metrics metrics = monitor.metrics_history iterations = [m.iteration for m in metrics] best_fitness = [m.best_fitness for m in metrics] diversity = [m.population_diversity for m in metrics] conv_velocity = [m.convergence_velocity for m in metrics] fig, axes = plt.subplots(3, 1, figsize=(12, 10)) # Best fitness axes[0].plot(iterations, best_fitness, linewidth=2, color=\'blue\') axes[0].set_ylabel(\'Best Fitness\', fontsize=12) axes[0].set_yscale(\'log\') axes[0].set_title(\'Convergence Monitoring - STA SMC\', fontsize=14, fontweight=\'bold\') axes[0].grid(True, alpha=0.3) # Population diversity axes[1].plot(iterations, diversity, linewidth=2, color=\'green\') axes[1].set_ylabel(\'Population Diversity\', fontsize=12) axes[1].grid(True, alpha=0.3) # Convergence velocity axes[2].plot(iterations, conv_velocity, linewidth=2, color=\'red\') axes[2].set_ylabel(\'Convergence Velocity\', fontsize=12) axes[2].set_xlabel(\'Iteration\', fontsize=12) axes[2].grid(True, alpha=0.3) plt.tight_layout() plt.savefig(\'pso_convergence_monitoring.png\', dpi=300) print("Convergence monitoring plot saved: pso_convergence_monitoring.png") if __name__ == "__main__": main()\n\n``` **Expected Output:** ```\n\nRunning PSO optimization with real-time convergence monitoring...\n========================================================================================================================\nIter 0 | Status: INITIALIZING | Best: 1.234567 | Diversity: 15.2341 | Conv. Velocity: 0.00e+00 | Predicted Remaining: 100\nIter 10 | Status: EXPLORING | Best: 0.567890 | Diversity: 12.4567 | Conv. Velocity: -6.67e-02 | Predicted Remaining: 85\nIter 20 | Status: CONVERGING | Best: 0.234567 | Diversity: 8.9012 | Conv. Velocity: -3.33e-02 | Predicted Remaining: 60\nIter 30 | Status: CONVERGING | Best: 0.123456 | Diversity: 5.2341 | Conv. Velocity: -1.11e-02 | Predicted Remaining: 40\nIter 40 | Status: CONVERGING | Best: 0.098765 | Diversity: 2.4567 | Conv. Velocity: -2.47e-03 | Predicted Remaining: 20 >>> CONVERGENCE DETECTED at iteration 45 <<<\n======================================================================================================================== Convergence monitoring plot saved: pso_convergence_monitoring.png\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\optimization_module_api_reference.md:643: WARNING: Lexing literal_block '\n# example-metadata:\n\n# runnable: false #!/usr/bin/env python3\n\n"""\nExample 3: Bounds Validation and Automatic Adjustment Demonstrates:\n- PSOBoundsValidator usage\n- Controller-specific bounds validation\n- Automatic adjustment algorithms\n- Performance comparison with/without adjustment\n""" from src.optimization.validation.pso_bounds_validator import PSOBoundsValidator\nfrom src.optimization.algorithms.pso_optimizer import PSOTuner\nfrom src.controllers.factory import create_controller\nfrom src.config import load_config\nfrom functools import partial\nimport numpy as np # ============================================================================\n# Configuration\n\n# ============================================================================ CONFIG_PATH = "config.yaml"\n\nCONTROLLER_TYPE = \'adaptive_smc\' # Test bounds (intentionally suboptimal)\nTEST_BOUNDS_LOWER = [0.1, 0.1, 0.1, 0.1, 0.01] # Too narrow\nTEST_BOUNDS_UPPER = [5.0, 5.0, 5.0, 5.0, 1.0] # Too narrow # ============================================================================\n# Main\n\n# ============================================================================ def main(): # Load configuration config = load_config(CONFIG_PATH) # Initialize bounds validator validator = PSOBoundsValidator(config) # Validate test bounds print("Validating test bounds for Adaptive SMC...") print(f"Lower: {TEST_BOUNDS_LOWER}") print(f"Upper: {TEST_BOUNDS_UPPER}") print() result = validator.validate_bounds( controller_type=CONTROLLER_TYPE, lower_bounds=TEST_BOUNDS_LOWER, upper_bounds=TEST_BOUNDS_UPPER ) if result.is_valid: print("\u2713 Bounds are valid!") else: print("\u2717 Bounds validation failed!") print("\\nWarnings:") for warning in result.warnings: print(f" - {warning}") print("\\nRecommendations:") for rec in result.recommendations: print(f" - {rec}") if result.adjusted_bounds: print("\\nAutomatically adjusted bounds:") adjusted_lower = result.adjusted_bounds[\'lower\'] adjusted_upper = result.adjusted_bounds[\'upper\'] print(f" Lower: {adjusted_lower}") print(f" Upper: {adjusted_upper}") # Compare PSO performance with original vs. adjusted bounds print("\\n" + "="*80) print("Performance Comparison: Original vs.\n\nAdjusted Bounds") print("="*80) controller_factory = partial( create_controller, controller_type=CONTROLLER_TYPE, config=config ) # PSO with original bounds print("\\n[1/2] Running PSO with ORIGINAL bounds...") tuner_original = PSOTuner( controller_factory=controller_factory, config=config, seed=42 ) # Override bounds config.pso.bounds.min = TEST_BOUNDS_LOWER config.pso.bounds.max = TEST_BOUNDS_UPPER result_original = tuner_original.optimise(iters_override=50) # PSO with adjusted bounds print("[2/2] Running PSO with ADJUSTED bounds...") tuner_adjusted = PSOTuner( controller_factory=controller_factory, config=config, seed=42 ) # Override bounds with adjusted config.pso.bounds.min = adjusted_lower config.pso.bounds.max = adjusted_upper result_adjusted = tuner_adjusted.optimise(iters_override=50) # Compare results print("\\n" + "="*80) print("Results Comparison") print("="*80) print(f"{\'Metric\':<30s} | {\'Original Bounds\':>20s} | {\'Adjusted Bounds\':>20s} | {\'Improvement\':>15s}") print("-"*80) cost_original = result_original[\'best_cost\'] cost_adjusted = result_adjusted[\'best_cost\'] improvement = (cost_original - cost_adjusted) / cost_original * 100 print(f"{\'Best Cost\':<30s} | {cost_original:20.6f} | {cost_adjusted:20.6f} | {improvement:14.2f}%") print(f"{\'Best Gains\':<30s}") print(f" Original: {result_original[\'best_pos\']}") print(f" Adjusted: {result_adjusted[\'best_pos\']}") print("="*80) if improvement > 0: print(f"\\n\u2713 Adjusted bounds achieved {improvement:.2f}% cost reduction!") else: print(f"\\n\u2717 Adjusted bounds did not improve performance.") if __name__ == "__main__": main()\n\n' as "python" resulted in an error at token: '\u2713'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:10: WARNING: undefined label: '/api/simulation_engine_api_reference.md#1-overview--architecture'[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:12: WARNING: undefined label: '/api/simulation_engine_api_reference.md#2-core-simulation-engine-api'[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:13: WARNING: undefined label: '/api/simulation_engine_api_reference.md#3-dynamics-model-api'[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:14: WARNING: undefined label: '/api/simulation_engine_api_reference.md#4-orchestrator-system-api'[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:15: WARNING: undefined label: '/api/simulation_engine_api_reference.md#5-integrator-system-api'[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:16: WARNING: undefined label: '/api/simulation_engine_api_reference.md#6-result-container-api'[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:17: WARNING: undefined label: '/api/simulation_engine_api_reference.md#7-safety--monitoring-api'[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:18: WARNING: undefined label: '/api/simulation_engine_api_reference.md#8-complete-code-examples'[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:19: WARNING: undefined label: '/api/simulation_engine_api_reference.md#9-integration-patterns'[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:20: WARNING: undefined label: '/api/simulation_engine_api_reference.md#10-theory-cross-references--performance'[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:45: WARNING: Pygments lexer name '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:129: WARNING: Pygments lexer name 'START' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:134: WARNING: Lexing literal_block 'PSO Tuner \u2502 \u251c\u2500\u25b6 Generate N particles (gain sets) \u2502 \u251c\u2500\u25b6 Create controller factory: functools.partial(create_controller, ...) \u2502 \u251c\u2500\u25b6 FOR each particle p: \u2502 \u2502 \u2502 \u251c\u2500\u25b6 Instantiate controller: ctrl = factory(gains=particle_p) \u2502 \u2502 \u2502 \u251c\u2500\u25b6 BatchOrchestrator.execute() \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25b6 Initialize batch_size trajectories \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25b6 FOR each step: \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25b6 Vectorized control computation (batch_size x) \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25b6 Safety guard check (each trajectory) \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25b6 Dynamics step (each trajectory) \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25b6 Collect results \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u25b6 Return BatchResultContainer \u2502 \u2502 \u2502 \u251c\u2500\u25b6 Compute fitness metrics: \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u25b6 Settling time (2% threshold) \u2502 \u2502 \u251c\u2500\u25b6 Overshoot (peak deviation) \u2502 \u2502 \u251c\u2500\u25b6 ISE (Integral Squared Error) \u2502 \u2502 \u2514\u2500\u25b6 Control effort (sum |u|) \u2502 \u2502 \u2502 \u2514\u2500\u25b6 Store fitness[p] = combined_cost \u2502 \u2514\u2500\u25b6 PSO iteration: Update velocities and positions \u2502 \u251c\u2500\u25b6 Convergence check (EnhancedConvergenceAnalyzer) \u2502 \u2502 \u2502 \u251c\u2500\u25b6 Population diversity < threshold \u2502 \u251c\u2500\u25b6 Fitness stagnation > N iterations \u2502 \u2514\u2500\u25b6 Velocity convergence < threshold \u2502 \u2514\u2500\u25b6 [Converged] \u2192 Return optimal gains [Not converged] \u2192 Continue PSO iteration\n' as "python" resulted in an error at token: '\u2502'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:142: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:238: WARNING: Pygments lexer name 'pythonTuple[np.ndarray,' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:263: WARNING: Lexing literal_block 'class MyDynamics: def step(self, state: np.ndarray, u: float, dt: float) -> np.ndarray: """Integrate dynamics forward one timestep.""" return next_state\n``` **Contract:**\n\n- Input: `state` (n-dimensional), `u` (scalar or 1D array), `dt` (float)\n- Output: `next_state` (n-dimensional, same shape as input state)\n- Must handle exceptions gracefully (return NaN/Inf triggers truncation)\n\n#### 2.1.6 Control Saturation Logic\n\n```python# example-metadata:\n# runnable: false # Priority hierarchy:\n# 1.\n\nExplicit u_max parameter\nif u_max is not None: u_limit = float(u_max)\n# 2.\n\nController\'s max_force attribute\nelif hasattr(controller, \'max_force\'): u_limit = float(controller.max_force)\n# 3. No saturation\nelse: u_limit = None # Apply saturation\nif u_limit is not None: u = np.clip(u, -u_limit, u_limit)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:312: WARNING: Pygments lexer name '**Impact:**' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:342: WARNING: Pygments lexer name 'pythonclass' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:354: WARNING: Pygments lexer name 'pythonself.dynamics_model:' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:364: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:393: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:403: WARNING: Lexing literal_block 'def get_step_fn(): """Return appropriate step function based on configuration."""\n``` Returns either `src.plant.models.dip_full.step` or `src.plant.models.dip_lowrank.step` based on `config.simulation.use_full_dynamics`. **Usage:**\n\n```python\n\nfrom src.simulation import get_step_fn # Get configured step function\nstep_fn = get_step_fn()\nx_next = step_fn(x, u, dt)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:424: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:432: WARNING: Lexing literal_block 'class DynamicsResult(NamedTuple): """Result of dynamics computation.""" state_derivative: np.ndarray # dx/dt vector success: bool # Whether computation succeeded info: Dict[str, Any] # Additional diagnostic information\n``` **Factory Methods:**\n\n```python\n# example-metadata:\n\n# runnable: false # Create successful result\n\nresult = DynamicsResult.success_result( state_derivative=dx_dt, time=t, energy=total_energy\n) # Create failure result\nresult = DynamicsResult.failure_result( reason="Singular matrix detected", condition_number=1e15\n)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:453: WARNING: Pygments lexer name 'pythonclass' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:458: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:475: WARNING: Pygments lexer name '**Dimension' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:493: WARNING: Pygments lexer name 'pythonclass' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:524: WARNING: Lexing literal_block '\n#### 3.3.5 Method: `compute_dynamics()`\n\n```pythondef compute_dynamics( self, state: np.ndarray, control_input: np.ndarray, time: float = 0.0, **kwargs: Any\n) -> DynamicsResult: """Compute low-rank DIP dynamics."""\n``` **Returns DynamicsResult with:**\n\n- `state_derivative`: 6-dimensional dx/dt vector\n- `success`: True if computation succeeded\n- `info`: Dictionary with diagnostics (energy, conditioning, etc.)\n\n#### 3.3.6 Method: `get_physics_matrices()`\n\n```pythondef get_physics_matrices( self, state: np.ndarray\n) -> Tuple[np.ndarray, np.ndarray, np.ndarray]: """Get simplified physics matrices M, C, G."""\n``` **Returns:**\n\n- `M`: Mass/inertia matrix (3x3)\n- `C`: Coriolis/damping matrix (3x3)\n- `G`: Gravity vector (3,)\n\n---\n\n### 3.4 `LinearDynamicsModel` Base Class **File:** `src/plant/models/base/dynamics_interface.py:252` Base class for linear system dynamics: `\u1e8b = Ax + Bu + f(t)`\n\n#### 3.4.1 Class Definition\n\n```pythonclass LinearDynamicsModel(BaseDynamicsModel): """Base class for linear dynamics models.""" def __init__(self, A: np.ndarray, B: np.ndarray, parameters: Any): """Initialize linear dynamics model.""" super().__init__(parameters) self.A = A # System matrix self.B = B # Input matrix self._validate_matrices()\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:557: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:566: WARNING: Pygments lexer name 'pythonimport' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:596: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:638: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:690: WARNING: Lexing literal_block 'orchestrator = ParallelOrchestrator( dynamics=dynamics, integrator=integrator, num_workers=4\n) # Execute parameter sweep\nparam_grid = generate_parameter_combinations() # (1000, n_params)\nresults = orchestrator.execute_parameter_sweep(param_grid)\n``` **Note:** ParallelOrchestrator currently has thread-safety issues (see CLAUDE.md Section 9). Use only for read-only dynamics models or single-threaded with batch execution.\n\n---\n\n## 4.5 `RealTimeOrchestrator` **File:** `src/simulation/orchestrators/real_time.py` Real-time constraint enforcement for hardware-in-loop (HIL) applications.\n\n#### 4.5.1 Features - \u2705 **Real-time timing** synchronized with wall clock\n\n- \u2705 **Deadline monitoring** with configurable tolerance\n- \u2705 **Late execution detection** and logging\n- \u2705 **Compatible with HIL interfaces**\n\n#### 4.5.2 Usage Example\n\n```python src.simulation.orchestrators import RealTimeOrchestrator\nfrom src.interfaces.hil import PlantServer # Create real-time orchestrator\norchestrator = RealTimeOrchestrator( dynamics=hardware_interface, integrator=integrator, real_time_factor=1.0, # Real-time (use 0.5 for slow-motion, 2.0 for fast) deadline_tolerance=0.001 # 1ms tolerance\n) # Execute HIL simulation\nresult = orchestrator.execute( initial_state=x0, control_inputs=None, # Generated dynamically dt=0.01, horizon=1000, controller=controller\n) # Check timing statistics\nstats = orchestrator.get_timing_stats()\nprint(f"Deadline misses: {stats[\'deadline_misses\']}")\nprint(f"Average execution time: {stats[\'mean_exec_time\']:.3f}ms")\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:744: WARNING: Pygments lexer name 'python@classmethod' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:763: WARNING: Lexing literal_block '# example-metadata:\n# runnable: false IntegratorFactory.list_available_integrators()\n# Returns: [\'euler\', \'forward_euler\', \'backward_euler\', \'rk2\', \'rk4\', ...]\n``` **get_integrator_info()**\n\n```python\ninfo = IntegratorFactory.get_integrator_info(\'rk4\')\n# Returns:\n# {\n# \'class_name\': \'RungeKutta4\',\n# \'module\': \'src.simulation.integrators.fixed_step.runge_kutta\',\n# \'order\': 4,\n# \'adaptive\': False,\n# \'description\': \'Classic 4th-order Runge-Kutta method\'\n# }\n``` **register_integrator()** (Advanced)\n\n```python\n# example-metadata:\n# runnable: false from src.simulation.integrators.base import BaseIntegrator class MyCustomIntegrator(BaseIntegrator): """Custom integration method.""" ORDER = 3 ADAPTIVE = False # ... implement integrate() method ... # Register custom integrator\nIntegratorFactory.register_integrator(\'my_custom\', MyCustomIntegrator)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:819: WARNING: Lexing literal_block "k1 = f(x_n, u_n, t_n)\nk2 = f(x_n + dt/2 * k1, u_n, t_n + dt/2)\nk3 = f(x_n + dt/2 * k2, u_n, t_n + dt/2)\nk4 = f(x_n + dt * k3, u_n, t_n + dt)\nx_{n+1} = x_n + dt/6 * (k1 + 2*k2 + 2*k3 + k4)\n``` **Use Cases:**\n\n- Standard choice for most simulations\n- Good accuracy with reasonable performance\n- DIP control system simulations (dt=0.01s typical) **Example:**\n```python\nrk4 = IntegratorFactory.create_integrator('rk4', dt=0.01)\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:845: WARNING: Lexing literal_block 'dp45 = IntegratorFactory.create_integrator( \'dormand_prince\', dt=0.01, # Initial step size atol=1e-6, # Absolute error tolerance rtol=1e-3, # Relative error tolerance min_step=1e-6, # Minimum allowed step size max_step=0.1, # Maximum allowed step size safety_factor=0.9 # Step size adjustment factor\n)\n``` **Error Control:**\n\n- Computes error estimate: `err = ||x_5 - x_4|| / (atol + rtol * ||x||)`\n- Accepts step if `err < 1.0`\n- Adjusts next step: `dt_next = dt * safety_factor * err^(-1/5)` **Use Cases:**\n- High-accuracy simulations\n- Stiff dynamics (with small initial dt)\n- Variable dynamics (rapidly changing time constants)\n- Scientific validation and benchmarking **Example:**\n```python\nfrom src.simulation.integrators import IntegratorFactory # High-accuracy integration\ndp45 = IntegratorFactory.create_integrator( \'dp45\', dt=0.01, atol=1e-8, # Tight tolerance rtol=1e-6\n) # Use with orchestrator\norchestrator = SequentialOrchestrator(dynamics, dp45)\nresult = orchestrator.execute( initial_state=x0, control_inputs=controls, dt=0.01, # Initial dt (will adapt) horizon=1000\n) # Check integration statistics\nstats = dp45.get_statistics()\nprint(f"Accepted steps: {stats[\'accepted_steps\']}")\nprint(f"Rejected steps: {stats[\'rejected_steps\']}")\nprint(f"Average step size: {stats[\'mean_step_size\']:.4f}s")\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:884: WARNING: Lexing literal_block "u_held = u_n # Control held constant\nx_{n+1} = x_n + dt * f(x_n, u_held, t_n) # Euler step with held control\n``` **Use Cases:**\n\n- Discrete-time controller testing\n- Sampled-data systems\n- Hardware-in-loop with discrete actuators **Example:**\n```python\nzoh = IntegratorFactory.create_integrator('zoh', dt=0.01) # Typical use with discrete controller\norchestrator = SequentialOrchestrator(dynamics, zoh)\nresult = orchestrator.execute( initial_state=x0, control_inputs=discrete_controls, # Piecewise constant dt=0.01, horizon=500\n)\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:905: WARNING: Lexing literal_block 'Need adaptive step size?\n\u251c\u2500 YES \u2192 DormandPrince45 (atol=1e-6, rtol=1e-3)\n\u2502 Use for: High accuracy, stiff systems, variable dynamics\n\u2502\n\u2514\u2500 NO \u2192 Need high accuracy? \u251c\u2500 YES \u2192 RungeKutta4 (dt=0.001-0.01) \u2502 Use for: Standard simulations, balance speed/accuracy \u2502 \u2514\u2500 NO \u2192 Need maximum speed? \u251c\u2500 YES \u2192 ForwardEuler (dt=0.0001-0.001) \u2502 Use for: Fast prototyping, real-time constraints \u2502 \u2514\u2500 Discrete control? \u2192 ZeroOrderHold (dt=sampling period) Use for: Discrete-time, HIL, sampled-data\n' as "python" resulted in an error at token: '?'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:923: WARNING: Pygments lexer name 'High' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:958: WARNING: Pygments lexer name 'pythonself.states:' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:966: WARNING: Lexing literal_block 'def add_trajectory(self, states: np.ndarray, times: np.ndarray, **metadata) -> None: """Add trajectory data to container."""\n``` Stores states, times, and optional controls/metadata. **get_states()**\n\n```python\ndef get_states(self) -> np.ndarray: """Get state trajectories."""\n``` Returns: State array (n_steps+1, state_dim) or empty array if no data. **get_times()**\n\n```python\ndef get_times(self) -> np.ndarray: """Get time vectors."""\n``` Returns: Time array (n_steps+1,) or empty array if no data. **export()**\n\n```python\ndef export(self, format_type: str, filepath: str) -> None: """Export results to specified format."""\n``` Supported formats: `\'csv\'`, `\'hdf5\'`\n\n#### 6.2.3 Usage Example\n\n```python\nfrom src.simulation.results import StandardResultContainer # Create container\nresult = StandardResultContainer() # Add simulation data\nresult.add_trajectory( states=x_arr, times=t_arr, controls=u_arr, controller_type=\'classical_smc\', initial_state=x0\n) # Access data\nstates = result.get_states() # (n_steps+1, 6)\ntimes = result.get_times() # (n_steps+1,) # Export\nresult.export(\'csv\', \'results/simulation_001.csv\')\nresult.export(\'hdf5\', \'results/simulation_001.h5\')\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:1001: WARNING: Pygments lexer name 'pythonself.batch_data:' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:1013: WARNING: Lexing literal_block 'def add_trajectory(self, states: np.ndarray, times: np.ndarray, **metadata) -> None: """Add trajectory data to batch container."""\n``` Automatically assigns `batch_index` if not provided in metadata. **get_states()**\n\n```python\ndef get_states(self, batch_index: Optional[int] = None) -> np.ndarray: """Get state trajectories for specific batch or all batches."""\n``` Returns:\n\n- If `batch_index` specified: (n_steps+1, state_dim)\n- If `batch_index=None`: (batch_size, n_steps+1, state_dim) **get_times()**\n```python\ndef get_times(self, batch_index: Optional[int] = None) -> np.ndarray: """Get time vectors for specific batch or all batches."""\n``` Returns:\n\n- If `batch_index` specified: (n_steps+1,)\n- If `batch_index=None`: (n_steps+1,) (assumes all batches have same times)\n\n#### 6.3.3 Usage Example\n\n```python src.simulation.results import BatchResultContainer # Create batch container\nbatch_result = BatchResultContainer() # Add multiple trajectories\nfor i in range(10): batch_result.add_trajectory( states=x_arr_list[i], times=t_arr, controls=u_arr_list[i], batch_index=i, initial_condition=ic_list[i] ) # Access specific trajectory\nstates_3 = batch_result.get_states(batch_index=3) # (n_steps+1, 6) # Access all trajectories\nall_states = batch_result.get_states() # (10, n_steps+1, 6) # Compute aggregate statistics\nsettling_times = []\nfor i in range(10): states_i = batch_result.get_states(batch_index=i) settling_times.append(compute_settling_time(states_i)) mean_settling = np.mean(settling_times)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:1052: WARNING: Pygments lexer name '**Usage:**' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:1065: WARNING: Pygments lexer name '**Usage:**' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:1102: WARNING: Lexing literal_block 'def _guard_no_nan(state: np.ndarray) -> None: """Check for NaN or Inf values.""" if not np.all(np.isfinite(state)): raise SafetyViolationError("State contains NaN or Inf")\n``` **_guard_energy()**\n\n```python\ndef _guard_energy(state: np.ndarray, config: Any) -> None: """Check total energy within bounds.""" E_kinetic = 0.5 * m * (x_dot**2 + theta1_dot**2 + theta2_dot**2) E_potential = m * g * (L1 * cos(theta1) + L2 * cos(theta2)) E_total = E_kinetic + E_potential if E_total > config.safety.max_energy: raise SafetyViolationError(f"Energy {E_total:.2f}J exceeds {config.safety.max_energy}J")\n``` **_guard_bounds()**\n\n```python\n# example-metadata:\n# runnable: false def _guard_bounds(state: np.ndarray, config:\n\nAny) -> None: """Check state within configured bounds.""" bounds = config.safety.state_bounds # [x_min, x_max, theta_min, theta_max, ...] for i, (val, (min_val, max_val)) in enumerate(zip(state, bounds)): if not (min_val <= val <= max_val): raise SafetyViolationError( f"State[{i}] = {val:.3f} outside bounds [{min_val}, {max_val}]" )\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:1119: WARNING: Pygments lexer name 'yaml#' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:1159: WARNING: Pygments lexer name '**Usage' is not known[39;49;00m
[91mD:\Projects\main\docs\api\simulation_engine_api_reference.md:1175: WARNING: Pygments lexer name 'python"""' is not known[39;49;00m
[91mD:\Projects\main\docs\benchmarks_methodology.md:86: WARNING: Lexing literal_block "\nWhere:\n- `x\u0304`: sample mean\n- `s`: sample standard deviation (Bessel's correction)\n- `n`: number of trials (30)\n- `1.96`: z-score for 95% confidence level\n\n### Random Seed Management\n\n```python# Base seed for reproducibility\n\nbase_seed = 1234 # Each trial gets independent seed\ntrial_seeds = rng.integers(0, 2**32-1, size=n_trials)\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\benchmarks_methodology.md:111: WARNING: Pygments lexer name 'yamlphysics_uncertainty:' is not known[39;49;00m
[91mD:\Projects\main\docs\benchmarks_methodology.md:117: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\benchmarks_methodology.md:125: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\benchmarks_methodology.md:149: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\benchmarks_methodology.md:157: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\benchmarks_methodology.md:188: WARNING: Pygments lexer name 'yamlcost_function:' is not known[39;49;00m
[91mD:\Projects\main\docs\benchmarks_methodology.md:195: WARNING: Pygments lexer name 'Where' is not known[39;49;00m
[91mD:\Projects\main\docs\benchmarks_methodology.md:217: WARNING: Pygments lexer name 'Classical' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:31: WARNING: undefined label: '/controllers/classical_smc_technical_guide.md#algorithm-architecture'[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:32: WARNING: undefined label: '/controllers/classical_smc_technical_guide.md#implementation-details'[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:33: WARNING: undefined label: '/controllers/classical_smc_technical_guide.md#parameter-configuration'[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:34: WARNING: undefined label: '/controllers/classical_smc_technical_guide.md#integration-guide'[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:57: WARNING: Pygments lexer name 'All' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:93: WARNING: Pygments lexer name '-' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:112: WARNING: Lexing literal_block '|\u03c3(t)| \u2264 |\u03c3(0)|e^(-\u03b7t)\n``` **95% Settling Time**:\n\n' as "python" resulted in an error at token: '\u2264'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:118: WARNING: Lexing literal_block '\n---\n\n## Algorithm Architecture\n\n### 1. Modular Controller Structure\n\n```python\nclass ClassicalSMC: """ Classical Sliding-Mode Controller with modular design: Components: - Sliding surface computation (linear combination) - Equivalent control (model-based feedforward) - Robust switching term (chattering reduction) - Saturation and safety mechanisms """\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:141: WARNING: Pygments lexer name '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:261: WARNING: Pygments lexer name '**Hysteresis' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:294: WARNING: Pygments lexer name 'yamlgains:' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:311: WARNING: Lexing literal_block '\n---\n\n## Integration Guide\n\n### 1. Basic Usage\n\n#### 1.1 Direct Instantiation\n\n```python src.controllers.smc import ClassicalSMC # Create controller with specified gains\n\ncontroller = ClassicalSMC( gains=[10.0, 8.0, 15.0, 12.0, 50.0, 5.0], max_force=100.0, boundary_layer=0.01, switch_method="tanh"\n) # Initialize (stateless for classical SMC)\nstate_vars = controller.initialize_state() # Returns ()\nhistory = controller.initialize_history() # Returns {} # Main control loop\nfor t in simulation_time: state = get_system_state() # [x, \u03b81, \u03b82, \u1e8b, \u03b8\u03071, \u03b8\u03072] result = controller.compute_control(state, state_vars, history) # Extract results control_force = result.control history = result.history # Apply control apply_control(control_force)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:366: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:373: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:382: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:482: WARNING: Lexing literal_block '\ngains: [10, 8, 15, 12, 100, 5] # K: 50 \u2192 100\n``` **Option 2**: Increase surface gains (faster sliding dynamics)\n\n```yaml\n\ngains: [15, 12, 30, 25, 50, 5] # Higher k\u2081, k\u2082, \u03bb\u2081, \u03bb\u2082\n``` **Option 3**: Add damping\n\n```yaml\n\ngains: [10, 8, 15, 12, 50, 10] # kd: 5 \u2192 10\n``` **Option 4**: Decrease boundary layer\n\n```yaml\n\nboundary_layer: 0.005 # From 0.01 (smaller \u03b5)\n' as "yaml" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:537: WARNING: Lexing literal_block "# example-metadata:\n\n# runnable: false controller = create_controller('adaptive_smc', ...) # Can achieve zero error\n\n``` **Option 3**: Increase switching gain K\n\n```yaml\n\ngains: [10, 8, 15, 12, 100, 5] # Higher K \u2192 tighter tracking\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:555: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\classical_smc_technical_guide.md:563: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:9: WARNING: undefined label: '/controllers/control_primitives_reference.md#saturation-functions'[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:10: WARNING: undefined label: '/controllers/control_primitives_reference.md#control-output-structures'[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:11: WARNING: undefined label: '/controllers/control_primitives_reference.md#parameter-validation'[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:12: WARNING: undefined label: '/controllers/control_primitives_reference.md#numerical-stability'[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:13: WARNING: undefined label: '/controllers/control_primitives_reference.md#usage-patterns'[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:14: WARNING: undefined label: '/controllers/control_primitives_reference.md#best-practices'[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:29: WARNING: Pygments lexer name 'src/utils/' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:50: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:62: WARNING: Pygments lexer name '**Linear' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:74: WARNING: Pygments lexer name '**Slope' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:101: WARNING: Lexing literal_block '\n### 2.3 Dead Zone Function\n\n```python# example-metadata:\n# runnable: false def dead_zone( x:\n\nUnion[float, np.ndarray], threshold: float\n) -> Union[float, np.ndarray]: """Apply dead zone to input signal. Args: x: Input signal threshold: Dead zone threshold (must be positive) Returns: Signal with dead zone applied """\n``` **Mathematical Definition:**\n\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:115: WARNING: Pygments lexer name '**Purpose:**' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:139: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:155: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:168: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:180: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:199: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:233: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:248: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:254: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:269: WARNING: Lexing literal_block '\ndef safe_log( x: NumericType, min_value: float = 1e-15, warn: bool = False,\n) -> NumericType: """Safe natural logarithm with zero/negative protection. Mathematical Definition: safe_log(x) = ln(max(x, min_value)) """\n``` **Usage (Optimization):** ```python\nfrom src.utils.numerical_stability import safe_log # PSO cost function with log penalty\ncost = ise + 1000 * safe_log(1 + instability_penalty)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:280: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:291: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:370: WARNING: Pygments lexer name '**Validate' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\control_primitives_reference.md:382: WARNING: Pygments lexer name '**Use' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:26: WARNING: undefined label: '/controllers/hybrid_smc_technical_guide.md#algorithm-architecture'[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:124: WARNING: Pygments lexer name 'mermaid' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:134: WARNING: Pygments lexer name 'pythonemergency_reset' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:156: WARNING: Lexing literal_block '# example-metadata:\n\n# runnable: false def _compute_sliding_surface(self, state: np.ndarray) -> float: """Compute unified sliding surface with dual formulation support.\n\nMathematical Implementation: s = c1*(\u03b8\u0307\u2081 + \u03bb\u2081*\u03b8\u2081) + c2*(\u03b8\u0307\u2082 + \u03bb\u2082*\u03b8\u2082) + cart_term or (relative mode): s = c1*(\u03b8\u0307\u2081 + \u03bb\u2081*\u03b8\u2081) + c2*((\u03b8\u0307\u2082-\u03b8\u0307\u2081) + \u03bb\u2082*(\u03b8\u2082-\u03b8\u2081)) + cart_term """ x, th1, th2, xdot, th1dot, th2dot = state if self.use_relative_surface: rel_dot = th2dot - th1dot rel_ang = th2 - th1 pendulum_term = self.c1 * (th1dot + self.lambda1 * th1) + \\ self.c2 * (rel_dot + self.lambda2 * rel_ang) else: pendulum_term = self.c1 * (th1dot + self.lambda1 * th1) + \\ self.c2 * (th2dot + self.lambda2 * th2) cart_term = self.cart_gain * (xdot + self.cart_lambda * x) return float(-(pendulum_term - cart_term))\n\n' as "python" resulted in an error at token: '\u2081'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:167: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:177: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:189: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:204: WARNING: Lexing literal_block '# example-metadata:\n\n# runnable: false def compute_control(self, state, state_vars, history): # ... 674 lines of controller logic ... # Missing return statement here! def reset(self) -> None: # ... reset logic ... return HybridSTAOutput(u_sat, (k1_new, k2_new, u_int_new), history, float(s)) # ^^^^ Variables not in scope! ^^^^\n\n``` **After Fix**:\n\n```python\n# example-metadata:\n\n# runnable: false def compute_control(self, state, state_vars, history): # ... 674 lines of controller logic ... return HybridSTAOutput(u_sat, (k1_new, k2_new, u_int_new), history, float(s)) def reset(self) -> None: # ... reset logic only ... pass\n\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:232: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:249: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:288: WARNING: Pygments lexer name 'yaml#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:335: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:348: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:371: WARNING: Pygments lexer name 'Controller:' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:389: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:421: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:489: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:497: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:508: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\hybrid_smc_technical_guide.md:517: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:38: WARNING: undefined label: '/controllers/swing_up_smc_technical_guide.md#algorithm-architecture'[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:39: WARNING: undefined label: '/controllers/swing_up_smc_technical_guide.md#implementation-details'[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:43: WARNING: undefined label: '/controllers/swing_up_smc_technical_guide.md#troubleshooting'[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:56: WARNING: Lexing literal_block 'E(q, q\u0307) = T(q\u0307) + V(q)\n``` **Kinetic Energy** (T):\n\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:63: WARNING: Pygments lexer name 'where:' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:70: WARNING: Pygments lexer name '**Energy' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:79: WARNING: Pygments lexer name '**Physical' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:94: WARNING: Pygments lexer name 'For' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:98: WARNING: Pygments lexer name 'Using' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:102: WARNING: Pygments lexer name '**Intuition**:' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:109: WARNING: Pygments lexer name 'For' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:113: WARNING: Pygments lexer name 'When' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:148: WARNING: Pygments lexer name '**Typical' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:155: WARNING: Pygments lexer name '**Purpose' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:183: WARNING: Pygments lexer name '**Convergence' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:233: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:250: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:333: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:454: WARNING: Pygments lexer name '**Super-Twisting' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:501: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:517: WARNING: Pygments lexer name 'pythonimport' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:541: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:549: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:564: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:609: WARNING: Pygments lexer name '**Convergence' is not known[39;49;00m
[91mD:\Projects\main\docs\controllers\swing_up_smc_technical_guide.md:767: WARNING: Pygments lexer name '**Mode' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\README.md:187: WARNING: local id not found in doc 'factory/troubleshooting_guide': 'controller-creation-errors' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\factory\README.md:187: WARNING: local id not found in doc 'factory/troubleshooting_guide': 'thread-safety-issues' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\factory\README.md:194: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\factory_api_reference.md:48: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\factory_api_reference.md:88: WARNING: Lexing literal_block "\n#### Parameters| Parameter | Type | Description | Required |\n|-----------|------|-------------|----------|\n| `controller_type` | `str` | Controller type identifier | \u2713 |\n\n#### ReturnsList of default gain values\n\n#### Raises- `ValueError`:\n\nUnknown controller type\n\n#### Example```python\n\ndefaults = get_default_gains('classical_smc')\nprint(defaults)\n# Output: [20.0, 15.0, 12.0, 8.0, 35.0, 5.0]\n\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory\factory_api_reference.md:112: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\factory_api_reference.md:198: WARNING: Lexing literal_block "\n#### Mathematical Foundation- **Surface Gains**: `[k1, k2, \u03bb1, \u03bb2]` - unified sliding surface\n\n- **Hybrid Modes**: `CLASSICAL_ADAPTIVE`, `STA_ADAPTIVE`, `FULL_HYBRID`\n- **Mode Switching**: Performance-based or error-threshold switching\n\n#### Example```python\n\nfrom src.controllers.smc.algorithms.hybrid.config import HybridMode controller = create_controller( 'hybrid_adaptive_sta_smc', gains=[18.0, 12.0, 10.0, 8.0], hybrid_mode=HybridMode.CLASSICAL_ADAPTIVE, max_force=150.0, dt=0.001\n)\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory\factory_api_reference.md:219: WARNING: Lexing literal_block '\n#### Parameters| Parameter | Type | Description | Required |\n\n|-----------|------|-------------|----------|\n| `smc_type` | `SMCType` | SMC controller type enum | \u2713 |\n| `plant_config` | `Optional[Any]` | Plant configuration | \u2717 |\n| `**kwargs` | `Any` | Additional controller parameters | \u2717 |\n\n#### ReturnsFactory function compatible with PSO optimization\n\n#### Example```python\n\nfrom src.controllers.factory import SMCType, create_pso_controller_factory # Create PSO factory for classical SMC\nfactory_func = create_pso_controller_factory( SMCType.CLASSICAL, max_force=150.0, boundary_layer=0.02\n) # Use in PSO optimization\noptimized_gains = pso_optimizer.optimize(factory_func)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory\factory_api_reference.md:245: WARNING: Lexing literal_block '\n#### Parameters| Parameter | Type | Description | Required |\n\n|-----------|------|-------------|----------|\n| `smc_type` | `SMCType` | SMC controller type enum | \u2713 |\n\n#### ReturnsTuple of `(lower_bounds, upper_bounds)` lists\n\n#### Controller-Specific Bounds | Controller | Lower Bounds | Upper Bounds ||-----------|--------------|--------------|\n\n| Classical | `[1.0, 1.0, 1.0, 1.0, 5.0, 0.1]` | `[30.0, 30.0, 20.0, 20.0, 50.0, 10.0]` |\n| Adaptive | `[2.0, 2.0, 1.0, 1.0, 0.5]` | `[40.0, 40.0, 25.0, 25.0, 10.0]` |\n| Super-Twisting | `[3.0, 2.0, 2.0, 2.0, 0.5, 0.5]` | `[50.0, 30.0, 30.0, 30.0, 20.0, 20.0]` |\n| Hybrid | `[2.0, 2.0, 1.0, 1.0]` | `[30.0, 30.0, 20.0, 20.0]` |\n\n#### Example```python\n\nfrom src.controllers.factory import SMCType, get_gain_bounds_for_pso bounds = get_gain_bounds_for_pso(SMCType.CLASSICAL)\nlower, upper = bounds\nprint(f"Lower bounds: {lower}")\nprint(f"Upper bounds: {upper}")\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory\factory_api_reference.md:278: WARNING: Lexing literal_block '\n#### Parameters| Parameter | Type | Description | Required |\n\n|-----------|------|-------------|----------|\n| `smc_type` | `SMCType` | SMC controller type enum | \u2713 |\n| `gains` | `Union[List[float], np.ndarray]` | Gains to validate | \u2713 |\n\n#### Returns`True` if gains are valid, `False` otherwise\n\n#### Validation Criteria1. **Length validation**:\n\nCorrect number of gains for controller type\n2. **Type validation**: All gains must be numeric\n3. **Range validation**: All gains must be positive\n4. **Stability validation**: Controller-specific stability constraints\n\n#### Example```python\n\nfrom src.controllers.factory import SMCType, validate_smc_gains gains = [20.0, 15.0, 12.0, 8.0, 35.0, 5.0]\nis_valid = validate_smc_gains(SMCType.CLASSICAL, gains)\nprint(f"Gains valid: {is_valid}")\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory\factory_api_reference.md:306: WARNING: Pygments lexer name 'pythonclass' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\factory_api_reference.md:383: WARNING: Lexing literal_block '\n## Thread Safety\n\n### Thread Safety Guarantees The factory system provides thread safety: 1. **Reentrant Locks**:\n\nAll factory operations use `threading.RLock()`2. **Timeout Protection**: 10-second timeout on lock acquisition\n3. **Immutable Registry**: Controller registry is read-only after initialization\n4. **Instance Isolation**: Each controller instance is independent\n\n### Thread-Safe Usage Patterns\n\n```pythonimport threading\nfrom src.controllers.factory import create_controller def worker_thread(thread_id): """Thread-safe controller creation.""" controller = create_controller( \'classical_smc\', gains=[20.0, 15.0, 12.0, 8.0, 35.0, 5.0] ) # Each thread gets independent controller instance return controller # Safe concurrent execution\nthreads = []\nfor i in range(10): thread = threading.Thread(target=worker_thread, args=(i,)) threads.append(thread) thread.start() for thread in threads: thread.join()\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory\factory_api_reference.md:405: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\factory_api_reference.md:442: WARNING: Lexing literal_block '\n## API Evolution and Versioning\n\n### Backward Compatibility Policy 1. **Legacy Functions**:\n\nDeprecated functions remain available with warnings2. **Parameter Migration**: Automatic migration of deprecated parameters\n3. **Interface Stability**: Core interfaces maintain backward compatibility\n4. **Deprecation Timeline**: 3-version deprecation cycle before removal\n\n### Version History | Version | Changes | Compatibility ||---------|---------|---------------|\n| 2.0.0 | GitHub Issue #6 resolution | \u2713 Full backward compatibility |\n| 1.x.x | Legacy factory system | \u2713 Supported via compatibility layer |\n\n### Future API Changes Planned enhancements maintain backward compatibility:- Enhanced type safety with generic types\n- Additional controller types\n- Improved PSO integration\n- Advanced validation features\n\n## Usage Examples\n\n### Complete Workflow Example\n\n```python src.controllers.factory import ( create_controller, SMCType, get_gain_bounds_for_pso, create_pso_controller_factory\n\n)\nfrom src.optimizer.pso_optimizer import PSOTuner # 1. Create initial controller\ncontroller = create_controller( \'classical_smc\', gains=[20.0, 15.0, 12.0, 8.0, 35.0, 5.0]\n) # 2. Set up PSO optimization\nbounds = get_gain_bounds_for_pso(SMCType.CLASSICAL)\nfactory_func = create_pso_controller_factory(SMCType.CLASSICAL) tuner = PSOTuner( controller_factory=factory_func, bounds=bounds, n_particles=20, max_iterations=200\n) # 3. Optimize controller gains\noptimized_gains, best_cost = tuner.optimize() # 4. Create optimized controller\noptimized_controller = create_controller( \'classical_smc\', gains=optimized_gains\n) print(f"Optimization improved cost from {initial_cost} to {best_cost}")\n``` This API reference provides documentation for the enhanced factory system, enabling efficient and reliable controller creation for advanced control systems research.\n' as "python" resulted in an error at token: '\u2713'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory\factory_integration_user_guide.md:82: WARNING: Lexing literal_block "\n### Super-Twisting SMC (STA-SMC)\n**Parameter Count**: 6 gains\n**Gains Array**: `[K1, K2, k1, k2, \u03bb1, \u03bb2]`\n**Required Parameters**: `gains`, `max_force`, `dt` ```python\n# example-metadata:\n\n# runnable: false sta_config = { 'gains': [25.0, 15.0, 20.0, 12.0, 8.0, 6.0], 'max_force': 150.0, 'dt': 0.001, 'power_exponent': 0.5, 'regularization': 1e-6, 'boundary_layer': 0.01, 'switch_method': 'tanh'\n\n} controller = create_controller('sta_smc', **sta_config)\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory\factory_integration_user_guide.md:104: WARNING: Lexing literal_block "\n### Hybrid Adaptive-STA SMC\n**Parameter Count**: 4 surface gains\n**Gains Array**: `[k1, k2, \u03bb1, \u03bb2]`\n**Required Parameters**: `classical_config`, `adaptive_config`, `hybrid_mode` ```python\nfrom src.controllers.smc.algorithms.hybrid.config import HybridMode hybrid_config = { 'gains': [18.0, 12.0, 10.0, 8.0], # Surface gains only 'hybrid_mode': HybridMode.CLASSICAL_ADAPTIVE, 'max_force': 150.0, 'dt': 0.001\n} controller = create_controller('hybrid_adaptive_sta_smc', **hybrid_config)\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory\factory_integration_user_guide.md:184: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\factory_integration_user_guide.md:213: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\factory_integration_user_guide.md:220: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\factory_integration_user_guide.md:235: WARNING: Pygments lexer name 'pythonimport' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\factory_integration_user_guide.md:269: WARNING: Lexing literal_block '\n### Issue 2: "All gains must be positive" **Cause**: Negative or zero gains in array**Solution**: Ensure all gains are positive numbers\n\n```python\n# Validate gains before use\n\ndef validate_gains(gains): if any(g <= 0 for g in gains): raise ValueError("All gains must be positive") return gains validated_gains = validate_gains([20.0, 15.0, 12.0, 8.0, 35.0, 5.0])\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory\factory_integration_user_guide.md:290: WARNING: Lexing literal_block "\n## Migration from Legacy Systems\n\n### Automated Parameter Migration\n\n```python src.controllers.factory.deprecation import check_deprecated_config # Migrate old configuration format\nold_config = { 'K_switching': 2.0, 'gamma': 0.1, # Invalid for classical SMC 'switch_function': 'sign'\n} # Automatic migration with warnings\nmigrated_config = check_deprecated_config('classical_smc', old_config)\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory\factory_integration_user_guide.md:304: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:20: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:47: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:58: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:71: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:82: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:95: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:108: WARNING: Pygments lexer name 'yaml#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:116: WARNING: Pygments lexer name 'json//' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:134: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:177: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:185: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:194: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory\migration_guide.md:202: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:28: WARNING: Lexing literal_block 'Factory Integration System\n\u251c\u2500\u2500 Enterprise Controller Factory (src/controllers/factory.py)\n\u2502 \u251c\u2500\u2500 Thread-safe Operations (RLock with timeout)\n\u2502 \u251c\u2500\u2500 Type-safe Interfaces (Protocol-based design)\n\u2502 \u251c\u2500\u2500 Configuration Validation (Pydantic integration)\n\u2502 \u2514\u2500\u2500 PSO Optimization Integration (Native PSO support)\n\u251c\u2500\u2500 Controller Registry System\n\u2502 \u251c\u2500\u2500 Metadata Management (Gain specifications, requirements)\n\u2502 \u251c\u2500\u2500 Alias Resolution (Backward compatibility)\n\u2502 \u2514\u2500\u2500 Dynamic Registration (Extensible design)\n\u251c\u2500\u2500 Configuration Integration Layer\n\u2502 \u251c\u2500\u2500 Multi-source Configuration Resolution\n\u2502 \u251c\u2500\u2500 Deprecation Handling (Graceful migrations)\n\u2502 \u2514\u2500\u2500 Fallback Mechanisms (Graceful degradation)\n\u2514\u2500\u2500 PSO Integration Layer \u251c\u2500\u2500 Controller Wrapper System (PSO-compatible interfaces) \u251c\u2500\u2500 Gain Validation (Domain-specific validation) \u2514\u2500\u2500 Batch Creation (Performance optimization)\n' as "python" resulted in an error at token: '\u251c'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:61: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:70: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:81: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:88: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:102: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:108: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:120: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:140: WARNING: Lexing literal_block '\n### Configuration Validation Type-safe configuration validation using Pydantic models:\n\n```python# example-metadata:\n# runnable: false @dataclass(frozen=True)\n\nclass ClassicalSMCConfig: """Type-safe configuration for Classical SMC controller.""" gains: List[float] = field() # [k1, k2, lam1, lam2, K, kd] max_force: float = field() # Control saturation limit boundary_layer: float = field() # Chattering reduction thickness dt: float = field(default=0.01) # Control timestep switch_method: Literal["tanh", "linear", "sign"] = field(default="tanh") def __post_init__(self): """Validate configuration after creation.""" self._validate_gains() self._validate_control_parameters() self._validate_stability_requirements()\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:152: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:166: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:174: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:186: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:235: WARNING: Pygments lexer name 'pythonclass' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:241: WARNING: Pygments lexer name 'pythonclass' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:280: WARNING: Pygments lexer name 'yaml#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:311: WARNING: Pygments lexer name '**Causes:**' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:383: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:399: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:408: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:431: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:458: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:466: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\factory_integration_documentation.md:473: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:292: WARNING: 'myst' cross-reference target not found: 'tutorials/' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:293: WARNING: 'myst' cross-reference target not found: 'how-to/' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:294: WARNING: 'myst' cross-reference target not found: 'api/' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:19: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:28: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:36: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:45: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:55: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:62: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:71: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:92: WARNING: Pygments lexer name 'yaml#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:100: WARNING: Pygments lexer name 'yaml#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:138: WARNING: Pygments lexer name 'pythonimport' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:180: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:187: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:195: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:204: WARNING: Lexing literal_block '\nproject_root/\n\u251c\u2500\u2500 simulate.py # Main CLI\n\u251c\u2500\u2500 streamlit_app.py # Web UI\n\u251c\u2500\u2500 config.yaml # Main configuration\n\u251c\u2500\u2500 requirements.txt # Dependencies\n\u2502\n\u251c\u2500\u2500 src/ # Source code\n\u2502 \u251c\u2500\u2500 controllers/ # Controller implementations\n\u2502 \u2502 \u251c\u2500\u2500 factory/ # Factory system\n\u2502 \u2502 \u251c\u2500\u2500 smc/ # 4 core SMC controllers\n\u2502 \u2502 \u251c\u2500\u2500 specialized/ # Specialized controllers\n\u2502 \u2502 \u2514\u2500\u2500 mpc/ # MPC (experimental)\n\u2502 \u251c\u2500\u2500 core/ # Simulation engine\n\u2502 \u251c\u2500\u2500 optimizer/ # PSO implementation\n\u2502 \u2514\u2500\u2500 utils/ # Utilities\n\u2502\n\u251c\u2500\u2500 tests/ # Test suite\n\u2502 \u251c\u2500\u2500 test_controllers/ # Controller tests\n\u2502 \u251c\u2500\u2500 test_core/ # Simulation tests\n\u2502 \u2514\u2500\u2500 test_optimizer/ # PSO tests\n\u2502\n\u251c\u2500\u2500 docs/ # Documentation\n\u2502 \u2514\u2500\u2500 guides/ # This directory\n\u2502\n\u2514\u2500\u2500 scripts/ # Utility scripts \u2514\u2500\u2500 validate_documentation.py\n' as "python" resulted in an error at token: '\u251c'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:239: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:253: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\QUICK_REFERENCE.md:265: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\api\README.md:10: WARNING: 'myst' cross-reference target not found: '../how-to/' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\guides\api\README.md:17: WARNING: 'myst' cross-reference target not found: '../tutorials/' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\guides\api\README.md:18: WARNING: 'myst' cross-reference target not found: '../how-to/' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\guides\api\README.md:198: WARNING: local id not found in doc 'guides/api/optimization': 'custom-cost-functions' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\guides\api\README.md:204: WARNING: 'myst' cross-reference target not found: '../how-to/' [myst.xref_missing][39;49;00m
[91mD:\Projects\main\docs\guides\api\README.md:26: WARNING: Lexing literal_block '\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 User Application Layer \u2502\n\u2502 (simulate.py, streamlit_app.py, custom scripts) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 High-Level API Layer \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Controllers API \u2502 Simulation API \u2502 Optimization API \u2502\n\u2502 - Factory pattern \u2502 - Runner \u2502 - PSO Tuner \u2502\n\u2502 - 4 SMC types \u2502 - Dynamics \u2502 - Cost functions \u2502\n\u2502 - Custom creation \u2502 - Context \u2502 - Bounds \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Supporting Services Layer \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Configuration API \u2502 Plant Models \u2502 Utilities API \u2502\n\u2502 - YAML loading \u2502 - Physics \u2502 - Validation \u2502\n\u2502 - Schema validation \u2502 - Dynamics \u2502 - Control prims \u2502\n\u2502 - Overrides \u2502 - Parameters \u2502 - Monitoring \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n' as "python" resulted in an error at token: '\u250c'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\guides\api\README.md:56: WARNING: Lexing literal_block '``` **Covers:**\n\n- Factory pattern (create_controller, create_smc_for_pso)\n- 4 SMC controller types (Classical, STA, Adaptive, Hybrid)\n- Custom controller development\n- Parameter configuration **When to use:** Creating controllers, tuning gains, implementing custom SMC variants **See:** [Controllers API Guide \u2192](controllers.md)\n\n---\n\n### [Simulation API](simulation.md) **Run simulations with dynamics models**\n\n```python\n\nfrom src.core import SimulationRunner runner = SimulationRunner(config)\nresult = runner.run(controller)\n``` **Covers:**\n\n- SimulationRunner interface\n- Dynamics models (simplified vs full)\n- Simulation context and state management\n- Batch processing with vector_sim **When to use:** Running simulations, selecting dynamics models, batch experiments **See:** [Simulation API Guide \u2192](simulation.md)\n\n---\n\n### [Optimization API](optimization.md) **Optimize controller gains with PSO**\n\n```python\nfrom src.optimizer import PSOTuner tuner = PSOTuner(controller_type=SMCType.CLASSICAL, bounds=bounds)\nbest_gains, best_cost = tuner.optimize()\n``` **Covers:**\n\n- PSOTuner configuration\n- Custom cost function design\n- Gain bounds specification\n- Convergence monitoring **When to use:** Automated gain tuning, multi-objective optimization, parameter search **See:** [Optimization API Guide \u2192](optimization.md)\n\n---\n\n### [Configuration API](configuration.md) **Load and manage configuration**\n\n```python\n\nfrom src.config import load_config config = load_config(\'config.yaml\')\n``` **Covers:**\n\n- Configuration loading and validation\n- Schema structure (physics, controllers, simulation, PSO)\n- Programmatic configuration creation\n- Environment variables and overrides **When to use:** Managing configurations, parameter validation, environment-specific setups **See:** [Configuration API Guide \u2192](configuration.md)\n\n---\n\n### [Plant Models API](plant-models.md) **Physics models and parameters**\n\n```python\nfrom src.core import DoubleInvertedPendulum dynamics = DoubleInvertedPendulum(m0=1.0, m1=0.1, m2=0.1, l1=0.5, l2=0.5)\n``` **Covers:**\n\n- System physics and equations of motion\n- Model types (simplified, full nonlinear, low-rank)\n- Parameter definitions (masses, lengths, friction)\n- Custom dynamics implementation **When to use:** Understanding system physics, selecting models, parameter sensitivity analysis **See:** [Plant Models API Guide \u2192](plant-models.md)\n\n---\n\n### [Utilities API](utilities.md) **Helper functions and tools**\n\n```python\n\n# example-metadata:\n\n# runnable: false from src.utils import validate_state, saturation, PerformanceMonitor\n\n``` **Covers:**\n\n- Validation utilities\n- Control primitives (saturation, deadzone, smoothing)\n- Monitoring and diagnostics\n- Analysis tools **When to use:** Input validation, real-time monitoring, performance analysis **See:** [Utilities API Guide \u2192](utilities.md)\n\n---\n\n## Quick Start Patterns\n\n### Pattern 1: Basic Simulation\n\n```python src.config import load_config\nfrom src.controllers import create_controller\nfrom src.core import SimulationRunner # Load configuration\nconfig = load_config(\'config.yaml\') # Create controller\ncontroller = create_controller(\'classical_smc\', config=config.controllers.classical_smc) # Run simulation\nrunner = SimulationRunner(config)\nresult = runner.run(controller) # Access results\nprint(f"ISE: {result[\'metrics\'][\'ise\']:.4f}")\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\guides\how-to\running-simulations.md:25: WARNING: undefined label: '/guides/how-to/running-simulations.md#advanced-patterns'[39;49;00m
[91mD:\Projects\main\docs\guides\how-to\running-simulations.md:43: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\how-to\running-simulations.md:174: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\how-to\running-simulations.md:285: WARNING: Pygments lexer name 'pythonimport' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\how-to\running-simulations.md:329: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\index.md:17: WARNING: undefined label: '/guides/index.md#theory--background'[39;49;00m
[91mD:\Projects\main\docs\guides\index.md:218: WARNING: Lexing literal_block 'Getting Started \u2192 Tutorial 01 \u2192 How-To: Running Simulations\n' as "python" resulted in an error at token: '\u2192'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\guides\index.md:231: WARNING: Lexing literal_block 'Getting Started \u2192 Tutorial 01 \u2192 Tutorial 02 \u2192 Tutorial 03 \u2192 SMC Theory \u2192 How-To: Optimization Workflows\n' as "python" resulted in an error at token: '\u2192'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\guides\index.md:244: WARNING: Lexing literal_block 'Getting Started \u2192 Tutorials 01-02 \u2192 Controllers API \u2192 Tutorial 04 \u2192 Tutorial 03 \u2192 How-To: Testing & Validation \u2192 SMC Theory\n' as "python" resulted in an error at token: '\u2192'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\guides\index.md:257: WARNING: Lexing literal_block 'Complete Paths 1-2 \u2192 Tutorial 05 \u2192 How-To: Result Analysis \u2192 PSO Theory \u2192 DIP Dynamics \u2192 User Guide (Batch Processing) \u2192 All API Reference\n' as "python" resulted in an error at token: '\u2192'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\guides\interactive\index.md:145: WARNING: Lexing literal_block '[Browser]\n  \u2514\u2500 [Main Thread]\n       \u251c\u2500 pyodide-runner.js (UI controller)\n       \u2514\u2500 [Web Worker]\n            \u251c\u2500 Pyodide Runtime (Python 3.11 WASM)\n            \u251c\u2500 NumPy Package (~25MB)\n            \u2514\u2500 Matplotlib Package (~22MB)\n' as "python" resulted in an error at token: '\u2514'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\guides\tutorials\tutorial-03-pso-optimization.md:32: WARNING: Pygments lexer name 'Initialize' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\tutorials\tutorial-03-pso-optimization.md:144: WARNING: Pygments lexer name '**Step' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\tutorials\tutorial-03-pso-optimization.md:266: WARNING: Pygments lexer name '**Red' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\workflows\monte-carlo-validation-quickstart.md:63: WARNING: Lexing literal_block '\n### 2. Hypothesis Testing (Welch\'s t-test)\n\n```python\nfrom scipy.stats import ttest_ind # Load data\ndf = pd.read_csv(\'monte_carlo_quick_test/results.csv\') classical = df[df[\'controller\'] == \'classical_smc\'][\'ise\'].values\nsta = df[df[\'controller\'] == \'sta_smc\'][\'ise\'].values # Welch\'s t-test (unequal variances)\nt_stat, p_value = ttest_ind(classical, sta, equal_var=False) # Effect size (Cohen\'s d)\npooled_std = np.sqrt((classical.std()**2 + sta.std()**2) / 2)\ncohens_d = (classical.mean() - sta.mean()) / pooled_std # Interpret results\nalpha = 0.05\nsignificant = p_value < alpha print("\\\\nHypothesis Test Results:")\nprint(f" H\u2080: No difference between controllers")\nprint(f" H\u2081: Controllers have different performance")\nprint(f" \\\\n t-statistic: {t_stat:.4f}")\nprint(f" p-value: {p_value:.4f}")\nprint(f" Significance level (\u03b1): {alpha}")\nprint(f" Result: {\'REJECT H\u2080\' if significant else \'FAIL TO REJECT H\u2080\'} (p {\'<\' if significant else \'>=\'} {alpha})")\nprint(f" \\\\n Effect size (Cohen\'s d): {cohens_d:.4f}")\nprint(f" Interpretation: {interpret_cohens_d(cohens_d)}") def interpret_cohens_d(d): """Interpret Cohen\'s d effect size.""" abs_d = abs(d) if abs_d < 0.2: return "Negligible" elif abs_d < 0.5: return "Small" elif abs_d < 0.8: return "Medium" else: return "Large"\n``` **Example Output:**\n\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\guides\workflows\monte-carlo-validation-quickstart.md:89: WARNING: Pygments lexer name '**Interpretation:**' is not known[39;49;00m
[91mD:\Projects\main\docs\guides\workflows\monte-carlo-validation-quickstart.md:113: WARNING: Lexing literal_block '\n---\n\n## Confidence Interval Visualization\n\n```python\n\nimport matplotlib.pyplot as plt\nimport numpy as np # Load data\ndf = pd.read_csv(\'monte_carlo_quick_test/results.csv\') # Compute statistics for each controller\ncontrollers = df[\'controller\'].unique()\nstats_data = [] for ctrl in controllers: data = df[df[\'controller\'] == ctrl][\'ise\'].values mean = data.mean() ci = stats.t.interval(0.95, len(data)-1, loc=mean, scale=stats.sem(data)) stats_data.append({ \'controller\': ctrl, \'mean\': mean, \'ci_lower\': ci[0], \'ci_upper\': ci[1] }) stats_df = pd.DataFrame(stats_data) # Plot\nfig, ax = plt.subplots(figsize=(8, 6)) x = np.arange(len(controllers))\nmeans = stats_df[\'mean\'].values\nci_errors = np.array([stats_df[\'mean\'] - stats_df[\'ci_lower\'], stats_df[\'ci_upper\'] - stats_df[\'mean\']]) ax.bar(x, means, alpha=0.7, color=[\'blue\', \'orange\'])\nax.errorbar(x, means, yerr=ci_errors, fmt=\'none\', ecolor=\'black\', capsize=5, capthick=2, label=\'95% CI\') ax.set_xlabel(\'Controller\')\nax.set_ylabel(\'ISE (Integral Squared Error)\')\nax.set_title(\'Controller Performance Comparison\\\\n(N=10 trials, 95% confidence intervals)\')\nax.set_xticks(x)\nax.set_xticklabels(controllers, rotation=15)\nax.legend()\nax.grid(axis=\'y\', alpha=0.3) plt.tight_layout()\nplt.savefig(\'monte_carlo_quick_test/performance_comparison.png\', dpi=150)\nprint("\\\\nPlot saved: monte_carlo_quick_test/performance_comparison.png")\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:3: WARNING: undefined label: '/mathematical_foundations/advanced_algorithms_guide.md#introduction'[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:6: WARNING: undefined label: '/mathematical_foundations/advanced_algorithms_guide.md#super-twisting-algorithm'[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:10: WARNING: undefined label: '/mathematical_foundations/advanced_algorithms_guide.md#advanced-topics'[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:11: WARNING: undefined label: '/mathematical_foundations/advanced_algorithms_guide.md#best-practices'[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:115: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:128: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:188: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:257: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:328: WARNING: Pygments lexer name '**Epsilon' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:352: WARNING: Lexing literal_block '\n#### 4.\n\nSafe Normalization **Problem:** Zero-length vectors cause division by zero **Solution:** $$\\text{safe\\_normalize}(\\mathbf{v}) = \\frac{\\mathbf{v}}{\\max(\\|\\mathbf{v}\\|, \\epsilon)}\n$$ **Usage in Gradient Descent:** ```python\nfrom src.utils.numerical_stability import safe_normalize # Normalized gradient for optimization\ngradient = compute_gradient(params) # UNSAFE: if gradient is exactly zero\n# step_direction = gradient / np.linalg.norm(gradient) # SAFE: returns zero vector if gradient is zero\nstep_direction = safe_normalize( gradient, min_norm=1e-15, fallback=np.zeros_like(gradient)\n)\n' as "python" resulted in an error at token: '$'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:453: WARNING: Pygments lexer name 'pythonimport' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:507: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\advanced_algorithms_guide.md:525: WARNING: Pygments lexer name 'pythonimport' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:19: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:33: WARNING: Lexing literal_block '# example-metadata:\n\n# runnable: false def test_boundary_layer_continuity(): """Test that boundary layer provides continuous switching.""" boundary_layer = BoundaryLayer(thickness=0.1, switch_method="tanh") # Test continuity at surface (s=0) epsilon = 1e-8 switch_left = boundary_layer.compute_switching_function(-epsilon) switch_right = boundary_layer.compute_switching_function(epsilon) switch_center = boundary_layer.compute_switching_function(0.0) # Values should be very close at the boundary assert abs(switch_left - switch_center) < 1e-6 assert abs(switch_right - switch_center) < 1e-6\n\n``` 2. **Monotonicity**: ```python def test_boundary_layer_monotonicity(): """Test that switching function is monotonic.""" boundary_layer = BoundaryLayer(thickness=0.1, switch_method="tanh") s_values = np.linspace(-1, 1, 100) switch_values = [boundary_layer.compute_switching_function(s) for s in s_values] # Switching function should be strictly increasing for i in range(len(switch_values) - 1): assert switch_values[i+1] >= switch_values[i] ``` 3. **Asymptotic Behavior**: ```python def test_boundary_layer_asymptotic_behavior(): """Test asymptotic limits of switching function.""" boundary_layer = BoundaryLayer(thickness=0.1, switch_method="tanh") # Large positive surface value switch_pos = boundary_layer.compute_switching_function(10.0) assert abs(switch_pos - 1.0) < 1e-3 # Large negative surface value switch_neg = boundary_layer.compute_switching_function(-10.0) assert abs(switch_neg - (-1.0)) < 1e-3 ```\n\n### 2.2 Configuration Validation Tests **Test Suite:** `tests/test_controllers/smc/algorithms/classical/test_config_validation.py`\n\n#### 2.2.1 Parameter Validation\n\n```python\n# example-metadata:\n\n# runnable: false class TestClassicalSMCConfigValidation: """Test configuration parameter validation.""" def test_positive_gain_requirement(self): """Test that all surface gains must be positive.""" # Valid configuration valid_gains = [5.0, 3.0, 4.0, 2.0, 10.0, 1.0] config = ClassicalSMCConfig(gains=valid_gains, max_force=100, dt=0.01, boundary_layer=0.01) # Invalid: zero gain with pytest.raises(ValueError, match="must be positive"): invalid_gains = [0.0, 3.0, 4.0, 2.0, 10.0, 1.0] ClassicalSMCConfig(gains=invalid_gains, max_force=100, dt=0.01, boundary_layer=0.01) # Invalid: negative gain with pytest.raises(ValueError, match="must be positive"): invalid_gains = [5.0, -3.0, 4.0, 2.0, 10.0, 1.0] ClassicalSMCConfig(gains=invalid_gains, max_force=100, dt=0.01, boundary_layer=0.01) def test_switching_gain_validation(self): """Test switching gain must be positive.""" with pytest.raises(ValueError, match="Switching gain K must be positive"): invalid_gains = [5.0, 3.0, 4.0, 2.0, -10.0, 1.0] # K < 0 ClassicalSMCConfig(gains=invalid_gains, max_force=100, dt=0.01, boundary_layer=0.01) def test_boundary_layer_validation(self): """Test boundary layer thickness validation.""" # Valid boundary layer valid_gains = [5.0, 3.0, 4.0, 2.0, 10.0, 1.0] config = ClassicalSMCConfig(gains=valid_gains, max_force=100, dt=0.01, boundary_layer=0.05) # Invalid: zero boundary layer with pytest.raises(ValueError, match="boundary_layer must be positive"):\n\nClassicalSMCConfig(gains=valid_gains, max_force=100, dt=0.01, boundary_layer=0.0) # Invalid: negative boundary layer with pytest.raises(ValueError, match="boundary_layer must be positive"): ClassicalSMCConfig(gains=valid_gains, max_force=100, dt=0.01, boundary_layer=-0.01)\n\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:55: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:64: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:78: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:90: WARNING: Pygments lexer name 'tests/test_controllers/smc/' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:113: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:123: WARNING: Pygments lexer name 'bash#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:144: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:152: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:171: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:183: WARNING: Pygments lexer name 'bash#!/bin/bash' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\test_validation_methodology.md:196: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:5: WARNING: undefined label: '/mathematical_foundations/validation_framework_guide.md#introduction'[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:28: WARNING: Pygments lexer name '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:55: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:93: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:122: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:149: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:178: WARNING: Pygments lexer name 'pythonclass' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:231: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:310: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:331: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:343: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:363: WARNING: Lexing literal_block '\n### 4. Testing Validation Logic\n\n```python\nimport pytest def test_controller_parameter_validation(): """Test that controller rejects invalid parameters.""" # Valid parameters should work controller = PIDController(kp=10.0, ki=2.0, kd=5.0, u_max=50.0) assert controller.kp == 10.0 # Negative gain should fail with pytest.raises(ValueError, match="proportional_gain must be > 0"): PIDController(kp=-1.0, ki=2.0, kd=5.0, u_max=50.0) # Excessive saturation should fail with pytest.raises(ValueError, match="control_saturation must be in the interval"): PIDController(kp=10.0, ki=2.0, kd=5.0, u_max=1000.0)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\mathematical_foundations\validation_framework_guide.md:373: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:10: WARNING: Lexing literal_block 'src/plant/core/numerical_stability.py\n\u251c\u2500\u2500 AdaptiveRegularizer # 5-level adaptive regularization\n\u251c\u2500\u2500 MatrixInverter # Robust matrix inversion\n\u251c\u2500\u2500 NumericalStabilityMonitor # Performance tracking\n\u2514\u2500\u2500 fast_condition_estimate # Lightweight condition checking\n' as "python" resulted in an error at token: '\u251c'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:27: WARNING: Pygments lexer name 'Where:' is not known[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:62: WARNING: Lexing literal_block '\n### Level 3:\n\nModerate (`sv_ratio < 1e-6`) **Trigger**: Singular value ratio below `1e-6`**Scaling**: **100x** base regularization\n**Use Case**: Approaching ill-conditioning threshold ```python\nif sv_ratio < 1e-6: reg_scale = alpha * s[0] * 1e2\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:77: WARNING: Lexing literal_block '\n### Level 5:\n\nWell-Conditioned (Default) **Trigger**: Condition number < `1e10` and `sv_ratio > 1e-6`**Scaling**: **1x** base regularization (minimal)\n**Use Case**: Normal operation ```python\nelse: reg_scale = alpha * s[0]\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:110: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:122: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:129: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:137: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:206: WARNING: Lexing literal_block '# Check if adaptive mode is enabled\nprint(regularizer.use_fixed) # Should be False # Check condition number\ncond_num = np.linalg.cond(M)\nprint(f"Condition number: {cond_num:.2e}")\n``` **Solution**:\n\n- If `use_fixed=True`, switch to adaptive mode\n- If `cond_num > 1e14`, increase `max_condition_number`\n- Check for NaN/Inf values in matrix\n\n### Problem:\n\nInaccurate results **Diagnosis**:```python\n# Check if over-regularization is occurring\n\nsv_ratio = s[-1] / s[0]\nprint(f"SV ratio: {sv_ratio:.2e}")\n``` **Solution**:\n\n- If `sv_ratio > 1e-6`, reduce `regularization_alpha`\n- For well-conditioned systems, use fixed mode\n- Verify matrix construction is correct\n\n### Problem:\n\nPerformance degradation **Diagnosis**:```python\n# Check regularization trigger frequency\nmonitor = NumericalStabilityMonitor()\nstats = monitor.get_statistics()\nprint(f"Regularization rate: {stats[\'regularization_rate\']:.1%}")\n``` **Solution**:\n\n- If regularization rate > 50%, investigate matrix conditioning\n- Consider caching matrix inversions if repeated\n- Use `fast_condition_estimate()` for lightweight checking\n\n---\n\n## Best Practices\n\n### 1. Use Standardized Parameters\n\n```python\n# Recommended defaults for production\n\nregularizer = AdaptiveRegularizer( regularization_alpha=1e-4, max_condition_number=1e14, min_regularization=1e-10, use_fixed_regularization=False\n)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:258: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:268: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\numerical_stability_guide.md:276: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization\pso_core_algorithm_guide.md:368: WARNING: unknown document: 'fitness_function_design_guide'[39;49;00m
[91mD:\Projects\main\docs\optimization\pso_core_algorithm_guide.md:369: WARNING: unknown document: 'controller_integration_patterns'[39;49;00m
[91mD:\Projects\main\docs\optimization\pso_core_algorithm_guide.md:370: WARNING: unknown document: '../tutorials/optimization/basic_pso_workflow'[39;49;00m
[91mD:\Projects\main\docs\optimization\pso_core_algorithm_guide.md:40: WARNING: Pygments lexer name 'mermaid' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization\pso_core_algorithm_guide.md:171: WARNING: Lexing literal_block '\n### Adaptive Strategy Selection **Based on Swarm Diversity:**\n\n```python# example-metadata:\n\n# runnable: false def adaptive_strategy(self, diversity: float) -> None: """Adjust parameters based on swarm diversity.\n\nArgs: diversity: Current swarm diversity metric """ threshold_low = 0.1 threshold_high = 0.5 if diversity < threshold_low: # Low diversity \u2192 Premature convergence risk # Increase exploration self.inertia_weight = min(0.9, self.inertia_weight * 1.1) self.cognitive_weight = min(2.5, self.cognitive_weight * 1.1) self.logger.info("Low diversity detected - increasing exploration") elif diversity > threshold_high: # High diversity \u2192 Slow convergence # Increase exploitation self.inertia_weight = max(0.4, self.inertia_weight * 0.9) self.social_weight = min(2.5, self.social_weight * 1.1) self.logger.info("High diversity detected - increasing exploitation")\n\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\optimization\pso_core_algorithm_guide.md:189: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization\pso_core_algorithm_guide.md:204: WARNING: Lexing literal_block '\n---\n\n## Performance Monitoring\n\n### Fitness History Tracking\n\n```python# example-metadata:\n# runnable: false def log_iteration_statistics(self, iteration: int, fitness: np.ndarray) -> None: """Log statistics for current iteration.\n\nArgs: iteration: Current iteration number fitness: Fitness values for all particles """ # Best fitness best_fitness = np.min(fitness) self.fitness_history.append(best_fitness) # Average and worst fitness avg_fitness = np.mean(fitness) worst_fitness = np.max(fitness[fitness < np.inf]) # Diversity diversity = self.compute_diversity() self.diversity_history.append(diversity) # Improvement rate if len(self.fitness_history) > 1: improvement = self.fitness_history[-2] - self.fitness_history[-1] improvement_pct = 100 * improvement / self.fitness_history[-2] else: improvement_pct = 0.0 # Log to console/file self.logger.info( f"Iteration {iteration:3d}: " f"Best={best_fitness:8.4f}, " f"Avg={avg_fitness:8.4f}, " f"Diversity={diversity:.4f}, " f"Improvement={improvement_pct:+.2f}%" )\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\optimization\pso_core_algorithm_guide.md:246: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization\pso_core_algorithm_guide.md:262: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization\pso_core_algorithm_guide.md:335: WARNING: Lexing literal_block '\nif diversity < 0.01: print("WARNING: Premature convergence detected")\n``` **3. Check Fitness Range:**\n```python\n\nif np.any(fitness > 1e6): print(f"WARNING: {np.sum(fitness > 1e6)} constraint violations")\n``` **4. Visualize Swarm:**\n```python\n\nplt.scatter(positions[:, 0], positions[:, 1], alpha=0.5)\nplt.scatter(global_best_position[0], global_best_position[1], c=\'red\', marker=\'*\', s=200)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\optimization\pso_core_algorithm_guide.md:360: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:13: WARNING: undefined label: '/optimization_simulation/guide.md#simulation-infrastructure'[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:14: WARNING: undefined label: '/optimization_simulation/guide.md#configuration-system'[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:15: WARNING: undefined label: '/optimization_simulation/guide.md#vectorized-batch-simulation'[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:18: WARNING: undefined label: '/optimization_simulation/guide.md#usage-examples'[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:38: WARNING: Pygments lexer name '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:85: WARNING: Pygments lexer name 'yamlpso:' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:183: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:241: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:254: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:260: WARNING: Lexing literal_block '\nt, x_batch, u_batch, sigma_batch = simulate_system_batch( controller_factory=factory, particles=particles, sim_time=10.0, dt=0.01, convergence_tol=0.001, # Stop when max(|\u03c3|) < 0.001 grace_period=1.0 # Wait 1 second before checking\n) print(f"Converged early: {len(t)} steps < {int(10.0/0.01)} max steps")\n``` **Benefits:**\n- Reduces PSO computational cost by 30-70% for well-converged controllers\n- Avoids wasting computation on settled trajectories\n- Ensures minimum settling time via grace period\n\n---\n\n## Configuration System\n\n### Overview\n\nThe configuration system uses Pydantic for type-safe, validated parameter management.\n\n**Source:** [`src/config/schemas.py`](../../src/config/schemas.py)\n\n### Architecture\n\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:310: WARNING: Lexing literal_block '\n### Type-Safe Configuration Pydantic provides compile-time type safety and runtime validation:\n\n```python\n\nfrom src.config import load_config # Load and validate configuration\nconfig = load_config("config.yaml") # Access with full IDE autocomplete and type checking\ncart_mass: float = config.physics.cart_mass\nduration: float = config.simulation.duration\nn_particles: int = config.pso.n_particles # Pydantic prevents typos and type errors\ntry: invalid = config.simulation.durration # AttributeError\nexcept AttributeError: print("Typo caught at runtime!") try: config.physics.cart_mass = "not a number" # ValidationError\nexcept Exception: print("Type error prevented!")\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:330: WARNING: Pygments lexer name 'python@field_validator("cart_mass",' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:345: WARNING: Pygments lexer name 'python@model_validator(mode="after")' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\guide.md:364: WARNING: Pygments lexer name 'yaml#' is not known[39;49;00m
[91mD:\Projects\main\docs\optimization_simulation\index.md:75: WARNING: Lexing literal_block 'Configuration System (Pydantic Schemas) \u2502 \u251c\u2500\u2500\u25ba PSO Optimizer \u2502 \u251c\u2500 Cost Function \u2502 \u251c\u2500 Uncertainty Evaluation \u2502 \u2514\u2500 Batch Simulation \u2502 \u251c\u2500\u2500\u25ba Simulation Runner \u2502 \u251c\u2500 Euler Integration \u2502 \u2514\u2500 State Management \u2502 \u2514\u2500\u2500\u25ba Vector Simulation \u251c\u2500 Safety Guards \u2514\u2500 Early Stopping\n' as "python" resulted in an error at token: '\u2502'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:13: WARNING: undefined label: '/pso_factory_integration_patterns.md#gain-optimization-workflows'[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:33: WARNING: Pygments lexer name 'PSO' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:55: WARNING: Lexing literal_block 'import numpy as np def simple_fitness_function(gains_array: np.ndarray) -> float: """Simple PSO fitness evaluation using direct controller creation.""" # Create controller directly from gains controller = create_smc_for_pso( SMCType.CLASSICAL, gains=gains_array, max_force=150.0, dt=0.001 ) # Evaluate controller performance performance_metrics = evaluate_controller_performance(controller) # Return fitness value (minimize) return performance_metrics[\'total_cost\'] # PSO optimization setup\nfrom src.optimization.algorithms.pso_optimizer import PSOTuner bounds = get_gain_bounds_for_pso(SMCType.CLASSICAL)\ntuner = PSOTuner( controller_factory=simple_fitness_function, config=config\n)\nbest_gains, best_fitness = tuner.optimize()\n``` **Advantages:**\n\n- \u2705 Simple and straightforward\n- \u2705 Minimal setup code\n- \u2705 Direct control over parameters **Disadvantages:**\n- \u274c Recreates factory overhead for each evaluation\n- \u274c Less efficient for high-frequency PSO calls\n\n### Pattern 2: Factory Function Pattern (Recommended) **Use Case:** High-performance PSO optimization with thousands of fitness evaluations.\n\n```python src.controllers.factory import create_pso_controller_factory, SMCType def optimized_pso_workflow(): """High-performance PSO workflow using factory function pattern.""" # Create factory function once (expensive operation) controller_factory = create_pso_controller_factory( SMCType.CLASSICAL, plant_config=config.physics, max_force=150.0, dt=0.001 ) # Factory function has required PSO attributes assert hasattr(controller_factory, \'n_gains\') # Number of gains required assert hasattr(controller_factory, \'controller_type\') # Controller type string assert hasattr(controller_factory, \'max_force\') # Force saturation limit # Define fitness function using pre-created factory def fitness_function(gains_array: np.ndarray) -> float: """Fast fitness evaluation using factory function.""" # Create controller (fast operation) controller = controller_factory(gains_array) # Evaluate performance return evaluate_controller_performance(controller)[\'total_cost\'] # PSO optimization with optimized factory tuner = PSOTuner( controller_factory=fitness_function, config=config ) return tuner.optimize()\n``` **Advantages:**\n\n- \u2705 Maximum performance for PSO loops\n- \u2705 Factory overhead paid only once\n- \u2705 Built-in PSO metadata (n_gains, controller_type)\n- \u2705 Thread-safe operation **Disadvantages:**\n- \u274c Slightly more complex setup\n\n### Pattern 3: Batch Controller Creation **Use Case:** Comparative studies, batch optimization, multi-objective PSO.\n\n```python src.controllers.factory import create_all_smc_controllers def multi_controller_optimization(): """Optimize gains for multiple controller types simultaneously.""" # Define gain sets for all controller types gains_dict = { \'classical\': [20.0, 15.0, 12.0, 8.0, 35.0, 5.0], \'adaptive\': [25.0, 18.0, 15.0, 10.0, 4.0], \'sta\': [25.0, 15.0, 20.0, 12.0, 8.0, 6.0], \'hybrid\': [18.0, 12.0, 10.0, 8.0] } # Create all controllers efficiently controllers = create_all_smc_controllers( gains_dict, max_force=150.0, dt=0.001 ) # Evaluate all controllers performance_results = {} for controller_type, controller in controllers.items(): performance_results[controller_type] = evaluate_controller_performance(controller) return performance_results def parallel_multi_objective_pso(): """Multi-objective PSO across different controller types.""" controller_types = [SMCType.CLASSICAL, SMCType.ADAPTIVE, SMCType.SUPER_TWISTING] # Create factory functions for each type factories = { ctrl_type: create_pso_controller_factory(ctrl_type) for ctrl_type in controller_types } def multi_objective_fitness(gains_dict: Dict[str, np.ndarray]) -> List[float]: """Multi-objective fitness evaluation.""" objectives = [] for ctrl_type, gains in gains_dict.items(): controller = factories[ctrl_type](gains) performance = evaluate_controller_performance(controller) objectives.append(performance[\'total_cost\']) return objectives # Pareto optimization # Run multi-objective PSO return run_multi_objective_pso(multi_objective_fitness)\n``` **Advantages:**\n\n- \u2705 Efficient for multiple controller types\n- \u2705 Unified configuration management\n- \u2705 Parallel evaluation support\n\n---\n\n## Gain Optimization Workflows\n\n### Basic PSO Workflow\n\n```python\n# example-metadata:\n\n# runnable: false def basic_pso_optimization(controller_type: SMCType) -> Tuple[np.ndarray, float]: """Standard PSO optimization workflow for SMC controllers.""" # Step 1:\n\nGet gain bounds based on control theory lower_bounds, upper_bounds = get_gain_bounds_for_pso(controller_type) # Step 2: Create optimized factory function controller_factory = create_pso_controller_factory( controller_type, plant_config=load_config("config.yaml").physics ) # Step 3: Define fitness function with validation def fitness_function(gains: np.ndarray) -> float: """PSO fitness function with robust error handling.""" # Pre-validate gains if not validate_smc_gains(controller_type, gains): return float(\'inf\') # Invalid gains get worst fitness try: # Create controller controller = controller_factory(gains) # Evaluate performance metrics = evaluate_controller_performance(controller) # Combine multiple objectives fitness = ( 0.4 * metrics[\'control_effort\'] + 0.3 * metrics[\'tracking_error\'] + 0.2 * metrics[\'settling_time\'] + 0.1 * metrics[\'overshoot_penalty\'] ) return fitness except Exception as e: logger.warning(f"Controller evaluation failed: {e}") return float(\'inf\') # Step 4: Configure and run PSO pso_config = { \'n_particles\': 30, \'max_iter\': 100, \'bounds\': (lower_bounds, upper_bounds), \'w\': 0.9, # Inertia weight \'c1\': 2.0, # Cognitive coefficient \'c2\': 2.0 # Social coefficient } tuner = PSOTuner( controller_factory=fitness_function, config=config, **pso_config ) # Step 5: Run optimization best_gains, best_fitness = tuner.optimize() # Step 6: Validate results final_controller = controller_factory(best_gains) final_metrics = evaluate_controller_performance(final_controller) logger.info(f"Optimization complete:") logger.info(f"Best gains: {best_gains}") logger.info(f"Best fitness: {best_fitness}") logger.info(f"Final metrics: {final_metrics}") return best_gains, best_fitness\n\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:106: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:114: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:128: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:143: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:161: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:166: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:178: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:185: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:197: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:204: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:215: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\pso_factory_integration_patterns.md:238: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\references\index.md:22: WARNING: could not find bibtex key "utkin1999sliding"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:23: WARNING: could not find bibtex key "edwards1998sliding"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:27: WARNING: could not find bibtex key "davila2005second"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:32: WARNING: could not find bibtex key "clerc2002particle"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:35: WARNING: could not find bibtex key "deb2001multi"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:36: WARNING: could not find bibtex key "furuta2003swing"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:37: WARNING: could not find bibtex key "boubaker2013double"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:38: WARNING: could not find bibtex key "prasad2014double"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:39: WARNING: could not find bibtex key "mills2009control"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:40: WARNING: could not find bibtex key "wang2011experimental"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:40: WARNING: could not find bibtex key "utkin1999sliding"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:40: WARNING: could not find bibtex key "edwards1998sliding"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:40: WARNING: could not find bibtex key "levant2003higher"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:40: WARNING: could not find bibtex key "davila2005second"[39;49;00m
[91mD:\Projects\main\docs\references\index.md:40: WARNING: unknown document: '../implementation/api/optimizer'[39;49;00m
[91mD:\Projects\main\docs\references\index.md:44: WARNING: Pygments lexer name '###' is not known[39;49;00m
[91mD:\Projects\main\docs\reports\sphinx_concatenated_headings_fix_report.md:80: WARNING: Lexing literal_block 'FOR each markdown file:\n  Track code fence state (in/out of code block)\n  FOR each line:\n    IF line is heading (^#{1,6} ):\n      IF next line exists AND not blank:\n        INSERT blank line after heading\n    IF line is closing code fence (^```$):\n      IF next line exists AND not blank AND not heading:\n        INSERT blank line after fence\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\reports\sphinx_concatenated_headings_fix_report.md:251: WARNING: Lexing literal_block '\n**After:**\n```markdown\n```python\n\ncode here\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\reports\sphinx_concatenated_headings_fix_report.md:261: WARNING: Lexing literal_block '\n### 5.\n\nToctree + Immediate Entries (118 occurrences)\n\n**Before:**\n```markdown\n```{toctree}\n:maxdepth: 2\n\nREADME.md\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\reports\sphinx_concatenated_headings_fix_report.md:576: WARNING: Lexing literal_block '\n---\n\n## Verification and Validation\n\n### Test Execution\n\n```bash\n$ python -m pytest tests/test_scripts/test_fix_concatenated_headings.py -v\n\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_is_heading_detects_all_levels PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_is_heading_rejects_non_headings PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_is_code_fence_detects_fences PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_is_code_fence_rejects_non_fences PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_is_blank_detects_blank_lines PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_is_blank_rejects_non_blank PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_needs_blank_line_after_heading PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_no_blank_line_after_heading_already_blank PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_no_blank_line_inside_code_block PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_needs_blank_line_after_code_fence PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_fix_simple_concatenated_heading PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_fix_multiple_concatenated_headings PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_fix_preserves_existing_blank_lines PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_fix_code_blocks_not_modified PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_fix_blank_line_after_code_fence PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestMarkdownHeadingFixer::test_dry_run_does_not_modify_file PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestRegressionOnFixedFiles::test_no_changes_to_quality_gates PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestRegressionOnFixedFiles::test_no_changes_to_index PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestDirectoryProcessing::test_fix_directory_non_recursive PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestDirectoryProcessing::test_fix_directory_recursive PASSED\ntests/test_scripts/test_fix_concatenated_headings.py::TestDirectoryProcessing::test_fix_directory_with_exclusions PASSED\n\n============================= 21 passed in 1.69s ==============================\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\results\index.md:91: WARNING: Pygments lexer name '{mermaid}flowchart' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:10: WARNING: undefined label: '/technical/configuration_schema_reference.md#schema-overview'[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:15: WARNING: undefined label: '/technical/configuration_schema_reference.md#adaptive-smc-configuration'[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:16: WARNING: undefined label: '/technical/configuration_schema_reference.md#hybrid-smc-configuration'[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:37: WARNING: Pygments lexer name 'Controller' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:64: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:127: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:165: WARNING: Pygments lexer name 'u\u2081' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:219: WARNING: Lexing literal_block 'K\u0307 = \u03b3|s| - \u03c3K (outside dead zone)\nK\u0307 = -\u03c3K (inside dead zone)\nu = -K(t) sign(s)\n``` Where:\n\n- `\u03b3 > 0` is the adaptation rate (gains[4])\n- `\u03c3 > 0` is the leakage term preventing parameter drift\n- Dead zone prevents adaptation during small tracking errors\n\n#### Required Parameters **`gains:\n\nList[float]`** - Adaptive control gains `[k1, k2, \u03bb1, \u03bb2, \u03b3]`- **Length**: Exactly 5 elements\n- **Mathematical meaning**: - `k1, k2`: Surface gains for joints 1 and 2 - `\u03bb1, \u03bb2`: Sliding surface coefficients - `\u03b3`: Adaptation rate\n- **Constraints**: All gains must be positive\n\n#### Adaptation Parameters **`leak_rate: float`** - Parameter drift prevention- **Default**: 0.01\n\n- **Symbol**: \u03c3 in adaptation law\n- **Purpose**: Prevents unbounded parameter growth **`dead_zone: float`** - Adaptation dead zone width\n- **Default**: 0.05\n- **Purpose**: Prevents adaptation during measurement noise **`adapt_rate_limit: float`** - Maximum adaptation rate\n- **Default**: 10.0 [1/s]\n- **Purpose**: Prevents excessive adaptation transients **`K_min, K_max: float`** - Adaptive gain bounds\n- **Defaults**: 0.1, 100.0\n- **Purpose**: Bounded adaptation for stability\n\n### Configuration Examples\n\n#### Robust Adaptation Configuration```python\n\n# example-metadata:\n\n# runnable: false robust_adaptive_config = AdaptiveSMCConfig( gains=[15.0, 12.0, 8.0, 6.0, 2.0], # Conservative adaptation rate max_force=150.0, dt=0.001, leak_rate=0.05, # Higher leakage for robustness dead_zone=0.1, # Wider dead zone adapt_rate_limit=5.0, # Conservative adaptation K_min=1.0, K_max=50.0, boundary_layer=0.05\n\n)\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:263: WARNING: Lexing literal_block '\n---\n\n## Hybrid SMC Configuration\n\n### Schema Definition\n\n```python# example-metadata:\n# runnable: false @dataclass(frozen=True)\nclass HybridSMCConfig: """Configuration for Hybrid Adaptive STA-SMC controller.""" # Required Parameters hybrid_mode: HybridMode # Control mode selection dt: float # Integration timestep [s] max_force: float # Control saturation limit [N] # Sub-Controller Configurations classical_config: ClassicalSMCConfig # Classical SMC settings adaptive_config: AdaptiveSMCConfig # Adaptive SMC settings # Hybrid-Specific Parameters k1_init: float = 4.0 # Initial proportional gain k2_init: float = 0.4 # Initial integral gain gamma1: float = 2.0 # k1 adaptation rate gamma2: float = 0.5 # k2 adaptation rate dead_zone: float = 0.05 # Adaptation dead zone # Advanced Options enable_equivalent: bool = False # Model-based equivalent control damping_gain: float = 3.0 # Additional damping adapt_rate_limit: float = 5.0 # Rate limiting sat_soft_width: float = 0.05 # Soft saturation width\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:292: WARNING: Pygments lexer name 'Classical' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:353: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\configuration_schema_reference.md:390: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:12: WARNING: undefined label: '/technical/controller_factory_integration.md#error-handling--recovery'[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:31: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:63: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:86: WARNING: Pygments lexer name 'python@dataclass(frozen=True)' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:119: WARNING: Pygments lexer name 'mermaid' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:125: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:130: WARNING: Lexing literal_block 'class ControllerInterface: def compute_control( self, state: np.ndarray, last_control: Any, history: dict ) -> ControlResult: """Compute control action for given state.""" pass\n``` **Control Result Structure:**\n\n```python\n\n@dataclass\nclass ControlResult: u: float # Control action sliding_surface: float # Current sliding surface value equivalent_control: float # Equivalent control component switching_control: float # Switching control component controller_state: dict # Internal controller state\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:148: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:160: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:166: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:174: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:195: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:204: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:212: WARNING: Pygments lexer name 'mermaid' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:242: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:252: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:271: WARNING: Pygments lexer name 'where:' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:305: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:313: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:321: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\controller_factory_integration.md:329: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:10: WARNING: undefined label: '/technical/factory_integration_fixes_issue6.md#executive-summary'[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:35: WARNING: Pygments lexer name 'Controller' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:150: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:167: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:185: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:192: WARNING: Lexing literal_block 'u\u2081 = -K\u2081|s|^\u03b1 sign(s) + u\u2082\nu\u0307\u2082 = -K\u2082 sign(s)\n``` Where:\n\n- `K\u2081, K\u2082` must satisfy stability conditions: `K\u2081 > 0`, `K\u2082 > (L_f)/(2\u221a(K\u2081))`\n- `\u03b1 \u2208 (0,1)` controls convergence rate (typically 0.5)\n- `L_f` is the Lipschitz constant of the uncertainty\n\n#### Optimized Configuration (Issue #2 Resolution)\n\n```python# Reduced overshoot configuration (verified solution)\nreduced_overshoot_config = SuperTwistingSMCConfig( gains=[8.0, 4.0, 12.0, 6.0, 4.85, 3.43], # Optimized \u03bb\u2081, \u03bb\u2082 max_force=150.0, K1=8.0, # Algorithmic gain (maintained) K2=4.0, # Reduced from 8.0 for damping power_exponent=0.5, dt=0.001\n)\n' as "python" resulted in an error at token: '\u2081'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:214: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:223: WARNING: Pygments lexer name 'K\u0307' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:246: WARNING: Pygments lexer name 'pythonclass' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:268: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:276: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:339: WARNING: Lexing literal_block "# example-metadata:\n# runnable: false controller = create_controller('classical', gains=[...])\n# ValueError: Unknown controller type 'classical'.\n\nAvailable: [...]\n``` **Solution:**\n\n```python\n# example-metadata:\n# runnable: false # Use correct controller type names\ncontroller = create_controller('classical_smc', gains=[...]) # Or use aliases\ncontroller = create_controller('classic_smc', gains=[...]) # Check available types\nfrom src.controllers.factory import list_available_controllers\nprint(list_available_controllers())\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:359: WARNING: Lexing literal_block '# example-metadata:\n# runnable: false # ClassicalSMCConfig validation error:\n\nSurface gains must be positive\nconfig = ClassicalSMCConfig(gains=[0, 5, 3, 2, 10, 1], ...)\n``` **Solution:**\n\n```python\n# example-metadata:\n# runnable: false # Ensure all surface gains are positive\nconfig = ClassicalSMCConfig( gains=[1.0, 5.0, 3.0, 2.0, 10.0, 1.0], # k1 > 0 max_force=150.0, boundary_layer=0.02\n) # Check gain constraints:\n# - Position gains k1, k2 > 0\n# - Surface coefficients \u03bb1, \u03bb2 > 0\n# - Switching gain K > 0\n# - Derivative gain kd \u2265 0\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:381: WARNING: Lexing literal_block "# example-metadata:\n# runnable: false # TypeError:\n\nHybridSMCConfig() missing required arguments\ncontroller = create_controller('hybrid_adaptive_sta_smc', gains=[...])\n``` **Solution:**\n\n```python\n# Hybrid controllers require special handling - factory handles this automatically\ncontroller = create_controller( controller_type='hybrid_adaptive_sta_smc', gains=[8.0, 6.0, 4.0, 3.0] # Surface gains only\n) # For advanced configuration:\nfrom src.controllers.smc.algorithms.hybrid.config import HybridSMCConfig, HybridMode\nfrom src.controllers.smc.algorithms.classical.config import ClassicalSMCConfig\nfrom src.controllers.smc.algorithms.adaptive.config import AdaptiveSMCConfig classical_sub = ClassicalSMCConfig( gains=[8.0, 6.0, 4.0, 3.0, 15.0, 2.0], max_force=150.0, dt=0.001, boundary_layer=0.02\n) adaptive_sub = AdaptiveSMCConfig( gains=[12.0, 10.0, 6.0, 5.0, 2.5], max_force=150.0, dt=0.001\n) hybrid_config = HybridSMCConfig( hybrid_mode=HybridMode.CLASSICAL_ADAPTIVE, dt=0.001, max_force=150.0, classical_config=classical_sub, adaptive_config=adaptive_sub\n) controller = create_controller('hybrid_adaptive_sta_smc', config=hybrid_config)\n" as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:405: WARNING: Lexing literal_block '# PSO optimization results in poor fitness values\nresult = pso_factory.optimize_controller()\n# Best cost: 1000.0 (penalty value)\n``` **Diagnosis and Solutions:** ```python\n# example-metadata:\n\n# runnable: false # 1.\n\nCheck parameter bounds\n\nbounds = get_gain_bounds_for_pso(SMCType.CLASSICAL)\nprint(f"Bounds: {bounds}") # 2. Adjust PSO configuration\npso_config = PSOFactoryConfig( controller_type=ControllerType.CLASSICAL_SMC, population_size=30, # Increase population max_iterations=100, # More iterations convergence_threshold=1e-5, # Stricter convergence fitness_timeout=20.0 # Longer evaluation time\n) # 3. robust evaluation\npso_config.use_robust_evaluation = True # 4. Check diagnostics\ndiagnostics = pso_factory.get_optimization_diagnostics()\nprint(f"Failed evaluations: {diagnostics[\'validation_statistics\'][\'failed_evaluations\']}")\nprint(f"Parameter violations: {diagnostics[\'validation_statistics\'][\'parameter_violations\']}")\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:435: WARNING: Pygments lexer name '**Solution:**' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:468: WARNING: Pygments lexer name '**Solution:**' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_integration_fixes_issue6.md:506: WARNING: Pygments lexer name '**Solution:**' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_usage_examples.md:32: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_usage_examples.md:112: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_usage_examples.md:202: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\factory_usage_examples.md:278: WARNING: Pygments lexer name 'python"""Production-ready' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\integration_protocols.md:23: WARNING: Pygments lexer name 'mermaid' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\integration_protocols.md:47: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\integration_protocols.md:58: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\integration_protocols.md:79: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\integration_protocols.md:102: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\integration_protocols.md:149: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\integration_protocols.md:176: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:10: WARNING: undefined label: '/technical/pso_integration_workflows.md#pso-integration-overview'[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:38: WARNING: Pygments lexer name 'PSO' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:65: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:74: WARNING: Pygments lexer name 'pythonclass' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:100: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:109: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:126: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:178: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:200: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:208: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:216: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:252: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:262: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:279: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:286: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:299: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:307: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:324: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:333: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:356: WARNING: Lexing literal_block '\n#### Convergence Criteria\n\n```python# example-metadata:\n# runnable: false def configure_convergence_criteria(controller_type:\n\nControllerType, optimization_goal: str) -> PSOFactoryConfig: """Configure convergence criteria based on optimization goals.""" criteria_map = { \'fast_prototyping\': { \'max_iterations\': 30, \'convergence_threshold\': 1e-4, \'max_stagnation_iterations\': 8 }, \'research_quality\': { \'max_iterations\': 75, \'convergence_threshold\': 1e-5, \'max_stagnation_iterations\': 12 }, \'production_grade\': { \'max_iterations\': 100, \'convergence_threshold\': 1e-6, \'max_stagnation_iterations\': 15 } } criteria = criteria_map.get(optimization_goal, criteria_map[\'research_quality\']) population_size = get_recommended_population_size(controller_type) return PSOFactoryConfig( controller_type=controller_type, population_size=population_size, **criteria, use_robust_evaluation=True, enable_adaptive_bounds=True ) # Usage examples\nfast_config = configure_convergence_criteria(ControllerType.CLASSICAL_SMC, \'fast_prototyping\')\nresearch_config = configure_convergence_criteria(ControllerType.STA_SMC, \'research_quality\')\nproduction_config = configure_convergence_criteria(ControllerType.ADAPTIVE_SMC, \'production_grade\')\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:371: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:382: WARNING: Pygments lexer name 'pythondef' is not known[39;49;00m
[91mD:\Projects\main\docs\technical\pso_integration_workflows.md:390: WARNING: Pygments lexer name 'python#' is not known[39;49;00m
[91mD:\Projects\main\docs\testing\index.md:13: WARNING: undefined label: '/testing/index.md#unit-testing--infrastructure'[39;49;00m
[91mD:\Projects\main\docs\testing\reports\2025-09-30\technical\resolution_roadmap.md:27: WARNING: Pygments lexer name 'mermaid' is not known[39;49;00m
[91mD:\Projects\main\docs\testing\reports\2025-09-30\technical\resolution_roadmap.md:64: WARNING: Lexing literal_block '\n#### **Integration Points**- Update `src/core/simulation_runner.py` to use adaptive FDI\n- Modify configuration schema in `config.yaml`\n- Add FDI monitoring to HIL systems\n\n#### **Validation Criteria**- [ ] False positive rate < 5%\n- [ ] True fault detection rate > 95%\n- [ ] No performance impact on control loops\n- [ ] Compatible with all controller types\n\n---\n\n## **P0-B:\n\nMemory Management Resolution** \u23f1\ufe0f **2-3 Days**\n\n#### **Root Cause Analysis**```python\n# Current Issues:\n\n1. Controller instantiation memory leaks\n2. Numpy array allocation inefficiencies\n3. Missing cleanup in controller destructors\n4. Memory pool allocation failures\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\testing\reports\2025-09-30\technical\resolution_roadmap.md:100: WARNING: Lexing literal_block '\n##### **2.\n\nNumpy Memory Optimization**```python\n# example-metadata:\n\n# runnable: false # File: src/utils/memory/numpy_optimizer.py\n\nclass NumpyMemoryOptimizer: """Optimized numpy operations to minimize allocations.""" @staticmethod def in_place_matrix_operations(matrix: np.ndarray, operation: str) -> np.ndarray: """Perform matrix operations in-place to avoid allocations.""" if operation == "normalize": norm = np.linalg.norm(matrix) if norm > 1e-10: matrix /= norm # In-place division return matrix elif operation == "clip": np.clip(matrix, -1000.0, 1000.0, out=matrix) # In-place clipping return matrix @staticmethod def memory_pool_context(): """Context manager for temporary memory pool usage.""" return MemoryPoolContext() class MemoryPoolContext: """Context manager for bounded memory operations.""" def __enter__(self): self.initial_memory = psutil.Process().memory_info().rss return self def __exit__(self, exc_type, exc_val, exc_tb): final_memory = psutil.Process().memory_info().rss memory_growth = final_memory - self.initial_memory if memory_growth > MEMORY_GROWTH_THRESHOLD: warnings.warn(f"Memory growth detected: {memory_growth/1024/1024:.2f} MB")\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\testing\reports\2025-09-30\technical\resolution_roadmap.md:157: WARNING: Lexing literal_block '\n#### **Implementation Strategy**\n\n##### **1.\n\nRobust Matrix Operations**```python\n# example-metadata:\n\n# runnable: false # File: src/utils/numerical/robust_matrix_ops.py\n\nclass RobustMatrixOperations: """Numerically stable matrix operations for control systems.""" def __init__(self, condition_threshold: float = 1e6, regularization_eps: float = 1e-10): self.condition_threshold = condition_threshold self.regularization_eps = regularization_eps def safe_matrix_inverse(self, matrix: np.ndarray) -> np.ndarray: """Numerically stable matrix inversion with fallback methods.""" try: # Check condition number condition_number = np.linalg.cond(matrix) if condition_number > self.condition_threshold: return self._regularized_inverse(matrix) # Standard inversion for well-conditioned matrices return np.linalg.inv(matrix) except np.linalg.LinAlgError: # Fallback to pseudoinverse return self._robust_pseudoinverse(matrix) def _regularized_inverse(self, matrix: np.ndarray) -> np.ndarray: """Tikhonov regularization for ill-conditioned matrices.""" regularization = self.regularization_eps * np.trace(matrix) / matrix.shape[0] regularized_matrix = matrix + regularization * np.eye(matrix.shape[0]) return np.linalg.inv(regularized_matrix) def _robust_pseudoinverse(self, matrix: np.ndarray) -> np.ndarray: """SVD-based pseudoinverse with numerical thresholding.""" U, sigma, Vt = np.linalg.svd(matrix, full_matrices=False) # Threshold small singular values sigma_threshold = self.regularization_eps * np.max(sigma) sigma_inv = np.where(sigma > sigma_threshold, 1.0 / sigma, 0.0) return Vt.T @ np.diag(sigma_inv) @ U.T def safe_division(self, numerator: float, denominator: float) -> float: """Division with zero-protection.""" if abs(denominator) < self.regularization_eps: return np.sign(denominator) * numerator / self.regularization_eps return numerator / denominator\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\testing\reports\2025-09-30\technical\resolution_roadmap.md:183: WARNING: Lexing literal_block '\n##### **3.\n\nGain Validation and Bounding**```python\n# example-metadata:\n\n# runnable: false # File: src/utils/validation/gain_validator.py\n\nclass GainValidator: """gain validation for numerical stability.""" def __init__(self, stability_margins: dict): self.min_gains = stability_margins["min_gains"] self.max_gains = stability_margins["max_gains"] self.stability_constraints = stability_margins["stability_constraints"] def validate_gain_stability(self, gains: List[float], controller_type: str) -> ValidationResult: """Validate gains for numerical and control stability.""" results = ValidationResult() # Basic bounds checking if not self._check_gain_bounds(gains): results.add_error("Gains outside allowable bounds") # Stability-specific validation if controller_type == "classical_smc": results.merge(self._validate_classical_smc_gains(gains)) elif controller_type == "adaptive_smc": results.merge(self._validate_adaptive_smc_gains(gains)) # Numerical conditioning checks results.merge(self._validate_numerical_conditioning(gains)) return results def _validate_numerical_conditioning(self, gains: List[float]) -> ValidationResult: """Check for potential numerical conditioning issues.""" results = ValidationResult() # Check for extreme gain ratios gain_ratios = [g1/g2 for g1 in gains for g2 in gains if g2 != 0] max_ratio = max(gain_ratios) if max_ratio > NUMERICAL_CONDITIONING_THRESHOLD: results.add_warning(f"Large gain ratio detected: {max_ratio:.2e}") # Check for very small or large gains if any(g < MINIMUM_STABLE_GAIN for g in gains): results.add_error("Gains too small for numerical stability") if any(g > MAXIMUM_STABLE_GAIN for g in gains): results.add_error("Gains too large for numerical stability") return results\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\testing\reports\2025-09-30\technical\resolution_roadmap.md:202: WARNING: Lexing literal_block '\n#### **Integration Points**- Update all SMC controller implementations\n- Integrate with matrix operations in dynamics models\n- Add to PSO optimization numerical validation\n- Update HIL systems with numerical safeguards\n\n#### **Validation Criteria**- [ ] Handle matrices with condition numbers up to 1e12\n- [ ] Zero division protection in all operations\n- [ ] Control outputs remain bounded for all valid inputs\n- [ ] No numerical exceptions in normal operation\n- [ ] Performance impact < 5% computational overhead\n\n---\n\n## \U0001f4ca Phase 2:\n\nQuality Infrastructure (Days 5-7)\n\n### **P1-A:\n\nTest Quality Infrastructure** \u23f1\ufe0f **1-2 Days**\n\n#### **Implementation Strategy**```python\n# example-metadata:\n\n# runnable: false # File: pytest.ini\n\n[tool:pytest]\nmarkers = integration: Integration tests requiring full system slow: Slow tests (>10 seconds) memory: Memory-intensive tests numerical: Numerical stability tests hardware: Hardware-in-loop tests benchmark: Performance benchmark tests smoke: Quick smoke tests for CI regression: Regression prevention tests # Test timeout and memory limits\ntimeout = 300\nmaxfail = 5\n' as "python" resulted in an error at token: '\u23f1'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\testing\reports\2025-09-30\technical\resolution_roadmap.md:242: WARNING: Lexing literal_block '\n---\n\n## \U0001f527 Phase 3:\n\nSystem Integration & Validation (Days 8-10)\n\n### **Integration Testing Protocol**1. **Component Integration**:\n\nTest fixed components with existing system\n2. **End-to-End Validation**: Full simulation runs with all fixes\n3. **Performance Regression**: Ensure no performance degradation\n4. **Memory Stress Testing**: 24-hour continuous operation validation\n5. **Numerical Robustness**: Extreme condition testing\n\n### **Validation Matrix**| Component | Unit Tests | Integration Tests | Stress Tests | Documentation |\n|-----------|------------|-------------------|--------------|---------------|\n| FDI System | \u2705 | \u2705 | \u2705 | \u2705 |\n| Memory Management | \u2705 | \u2705 | \u2705 | \u2705 |\n| Numerical Stability | \u2705 | \u2705 | \u2705 | \u2705 |\n| System Integration | N/A | \u2705 | \u2705 | \u2705 |\n\n---\n\n## \U0001f3af Success Metrics & Exit Criteria\n\n### Technical Success Criteria- [ ] **All 11 test failures resolved**\n- [ ] **Test success rate \u2265 99.5%**\n- [ ] **Memory growth < 10MB in 24-hour test**\n- [ ] **Numerical stability for condition numbers up to 1e12**\n- [ ] **FDI false positive rate < 1%**\n\n### Performance Success Criteria- [ ] **Control loop performance maintained within 5%**\n- [ ] **PSO optimization convergence unchanged**\n- [ ] **System startup time < 10 seconds**\n- [ ] **Memory usage bounded during operation**\n\n### Quality Success Criteria- [ ] **Code coverage \u2265 95% for modified components**\n- [ ] **All pytest warnings resolved**\n- [ ] **Documentation updated and validated**\n- [ ] **Integration tests passing consistently**\n\n---\n\n## \U0001f4c5 Implementation Timeline\n\n### **Week 1:\n\nCritical Fixes**```\n\nDay 1: FDI threshold calibration + basic testing\nDay 2: Memory management infrastructure + unit tests\nDay 3: Numerical stability core implementation\nDay 4: Integration testing of critical fixes\n' as "python" resulted in an error at token: '\u2705'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\testing\reports\2025-09-30\technical\resolution_roadmap.md:306: WARNING: Lexing literal_block '\n### **Week 3:\n\nValidation & Deployment**```\n\nDay 8-9: testing and validation\nDay 10: Production deployment preparation\n' as "python" resulted in an error at token: '`'. Retrying in relaxed mode.[39;49;00m
[91mD:\Projects\main\docs\theory\index.md:51: WARNING: unknown document: '../implementation/index'[39;49;00m
[91mD:\Projects\main\docs\theory\system_dynamics_complete.md:3: WARNING: Failed to create a cross reference. Any number is not assigned: fig-dip-system[39;49;00m
[91mD:\Projects\main\docs\theory\system_dynamics_complete.md:12: WARNING: Pygments lexer name '{math}:label:' is not known[39;49;00m
[91mD:\Projects\main\docs\theory\system_dynamics_complete.md:27: WARNING: Pygments lexer name '**First' is not known[39;49;00m
[91mD:\Projects\main\docs\theory\system_dynamics_complete.md:45: WARNING: Pygments lexer name '**First' is not known[39;49;00m
[91mD:\Projects\main\docs\theory\system_dynamics_complete.md:61: WARNING: Pygments lexer name '{math}:label:' is not known[39;49;00m
[91mD:\Projects\main\docs\theory\system_dynamics_complete.md:110: WARNING: Pygments lexer name '{math}:label:' is not known[39;49;00m
[91mD:\Projects\main\docs\theory\system_dynamics_complete.md:130: WARNING: Pygments lexer name '{math}:label:' is not known[39;49;00m
[91mD:\Projects\main\docs\theory\system_dynamics_complete.md:143: WARNING: Pygments lexer name '{math}:label:' is not known[39;49;00m
[91mD:\Projects\main\docs\theory\system_dynamics_complete.md:183: WARNING: Pygments lexer name '{math}:label:' is not known[39;49;00m
[91mD:\Projects\main\docs\theory\system_dynamics_complete.md:232: WARNING: Pygments lexer name '{math}:label:' is not known[39;49;00m
[91mD:\Projects\main\docs\visual\index.md:42: WARNING: unknown document: 'results_visualization'[39;49;00m
[91mD:\Projects\main\docs\visual\index.md:49: WARNING: unknown document: '../implementation/examples/visualization_tutorial'[39;49;00m
[91mD:\Projects\main\docs\visual\index.md:55: WARNING: unknown document: 'block_diagrams'[39;49;00m
[91mD:\Projects\main\docs\visual\index.md:56: WARNING: unknown document: 'algorithm_flowcharts'[39;49;00m
[91mD:\Projects\main\docs\visual\index.md:57: WARNING: unknown document: 'results_visualization'[39;49;00m
Binary file (standard input) matches
