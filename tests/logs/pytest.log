2025-10-01 10:15:05 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=88)
           2	RESUME(arg=0, lineno=88)
           4	LOAD_FAST(arg=3, lineno=109)
           6	UNARY_NEGATIVE(arg=None, lineno=109)
           8	LOAD_GLOBAL(arg=1, lineno=109)
          18	LOAD_ATTR(arg=2, lineno=109)
          38	LOAD_GLOBAL(arg=1, lineno=109)
          48	LOAD_ATTR(arg=4, lineno=109)
          68	LOAD_FAST(arg=1, lineno=109)
          70	CALL(arg=1, lineno=109)
          78	CALL(arg=1, lineno=109)
          86	BINARY_OP(arg=5, lineno=109)
          90	LOAD_FAST(arg=2, lineno=109)
          92	BINARY_OP(arg=5, lineno=109)
          96	STORE_FAST(arg=10, lineno=109)
          98	LOAD_FAST(arg=0, lineno=110)
         100	STORE_FAST(arg=11, lineno=110)
         102	LOAD_FAST(arg=8, lineno=112)
         104	LOAD_FAST(arg=10, lineno=112)
         106	BINARY_OP(arg=0, lineno=112)
         110	LOAD_FAST(arg=11, lineno=112)
         112	BINARY_OP(arg=0, lineno=112)
         116	LOAD_FAST(arg=5, lineno=112)
         118	LOAD_FAST(arg=1, lineno=112)
         120	BINARY_OP(arg=5, lineno=112)
         124	BINARY_OP(arg=10, lineno=112)
         128	STORE_FAST(arg=12, lineno=112)
         130	LOAD_FAST(arg=12, lineno=114)
         132	STORE_FAST(arg=13, lineno=114)
         134	LOAD_FAST(arg=13, lineno=115)
         136	LOAD_FAST(arg=7, lineno=115)
         138	COMPARE_OP(arg=68, lineno=115)
         142	POP_JUMP_IF_FALSE(arg=3, lineno=115)
         144	LOAD_FAST(arg=7, lineno=116)
         146	STORE_FAST(arg=13, lineno=116)
         148	JUMP_FORWARD(arg=9, lineno=116)
>        150	LOAD_FAST(arg=13, lineno=117)
         152	LOAD_FAST(arg=7, lineno=117)
         154	UNARY_NEGATIVE(arg=None, lineno=117)
         156	COMPARE_OP(arg=2, lineno=117)
         160	POP_JUMP_IF_FALSE(arg=3, lineno=117)
         162	LOAD_FAST(arg=7, lineno=118)
         164	UNARY_NEGATIVE(arg=None, lineno=118)
         166	STORE_FAST(arg=13, lineno=118)
>        168	LOAD_FAST(arg=0, lineno=120)
         170	LOAD_FAST(arg=4, lineno=120)
         172	LOAD_FAST(arg=2, lineno=120)
         174	BINARY_OP(arg=5, lineno=120)
         178	LOAD_FAST(arg=6, lineno=120)
         180	BINARY_OP(arg=5, lineno=120)
         184	BINARY_OP(arg=10, lineno=120)
         188	LOAD_FAST(arg=9, lineno=120)
         190	LOAD_FAST(arg=13, lineno=120)
         192	LOAD_FAST(arg=12, lineno=120)
         194	BINARY_OP(arg=10, lineno=120)
         198	BINARY_OP(arg=5, lineno=120)
         202	LOAD_FAST(arg=6, lineno=120)
         204	BINARY_OP(arg=5, lineno=120)
         208	BINARY_OP(arg=0, lineno=120)
         212	STORE_FAST(arg=14, lineno=120)
         214	LOAD_FAST(arg=14, lineno=122)
         216	LOAD_FAST(arg=7, lineno=122)
         218	COMPARE_OP(arg=68, lineno=122)
         222	POP_JUMP_IF_FALSE(arg=3, lineno=122)
         224	LOAD_FAST(arg=7, lineno=123)
         226	STORE_FAST(arg=14, lineno=123)
         228	JUMP_FORWARD(arg=9, lineno=123)
>        230	LOAD_FAST(arg=14, lineno=124)
         232	LOAD_FAST(arg=7, lineno=124)
         234	UNARY_NEGATIVE(arg=None, lineno=124)
         236	COMPARE_OP(arg=2, lineno=124)
         240	POP_JUMP_IF_FALSE(arg=3, lineno=124)
         242	LOAD_FAST(arg=7, lineno=125)
         244	UNARY_NEGATIVE(arg=None, lineno=125)
         246	STORE_FAST(arg=14, lineno=125)
>        248	LOAD_GLOBAL(arg=7, lineno=126)
         258	LOAD_FAST(arg=13, lineno=126)
         260	CALL(arg=1, lineno=126)
         268	LOAD_GLOBAL(arg=7, lineno=126)
         278	LOAD_FAST(arg=14, lineno=126)
         280	CALL(arg=1, lineno=126)
         288	LOAD_GLOBAL(arg=7, lineno=126)
         298	LOAD_FAST(arg=1, lineno=126)
         300	CALL(arg=1, lineno=126)
         308	BUILD_TUPLE(arg=3, lineno=126)
         310	RETURN_VALUE(arg=None, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:119 - stack: []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=88)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=88)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_FAST(arg=3, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=6, inst=UNARY_NEGATIVE(arg=None, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$alg_gain_K14.0']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$6unary_negative.1']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=18, inst=LOAD_ATTR(arg=2, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$6unary_negative.1', '$null$8.3', '$8load_global.2']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=38, inst=LOAD_GLOBAL(arg=1, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$6unary_negative.1', '$null$8.3', '$18load_attr.4']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=48, inst=LOAD_ATTR(arg=4, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$6unary_negative.1', '$null$8.3', '$18load_attr.4', '$null$38.6', '$38load_global.5']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=68, inst=LOAD_FAST(arg=1, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$6unary_negative.1', '$null$8.3', '$18load_attr.4', '$null$38.6', '$48load_attr.7']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=70, inst=CALL(arg=1, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$6unary_negative.1', '$null$8.3', '$18load_attr.4', '$null$38.6', '$48load_attr.7', '$sigma68.8']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=78, inst=CALL(arg=1, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$6unary_negative.1', '$null$8.3', '$18load_attr.4', '$70call.9']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=86, inst=BINARY_OP(arg=5, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$6unary_negative.1', '$78call.10']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_mul86.11']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=92, inst=BINARY_OP(arg=5, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_mul86.11', '$sgn_sigma90.12']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=96, inst=STORE_FAST(arg=10, lineno=109)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_mul92.13']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=98, inst=LOAD_FAST(arg=0, lineno=110)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=100, inst=STORE_FAST(arg=11, lineno=110)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$z98.14']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=102, inst=LOAD_FAST(arg=8, lineno=112)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=104, inst=LOAD_FAST(arg=10, lineno=112)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$u_eq102.15']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=106, inst=BINARY_OP(arg=0, lineno=112)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$u_eq102.15', '$u_cont104.16']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=110, inst=LOAD_FAST(arg=11, lineno=112)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_add106.17']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=112, inst=BINARY_OP(arg=0, lineno=112)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_add106.17', '$u_dis110.18']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=116, inst=LOAD_FAST(arg=5, lineno=112)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_add112.19']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=118, inst=LOAD_FAST(arg=1, lineno=112)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_add112.19', '$damping_gain116.20']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=120, inst=BINARY_OP(arg=5, lineno=112)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_add112.19', '$damping_gain116.20', '$sigma118.21']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=124, inst=BINARY_OP(arg=10, lineno=112)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_add112.19', '$binop_mul120.22']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=128, inst=STORE_FAST(arg=12, lineno=112)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_sub124.23']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=130, inst=LOAD_FAST(arg=12, lineno=114)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=132, inst=STORE_FAST(arg=13, lineno=114)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$u_raw130.24']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=134, inst=LOAD_FAST(arg=13, lineno=115)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=136, inst=LOAD_FAST(arg=7, lineno=115)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$u_sat134.25']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=138, inst=COMPARE_OP(arg=68, lineno=115)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$u_sat134.25', '$max_force136.26']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=142, inst=POP_JUMP_IF_FALSE(arg=3, lineno=115)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$138compare_op.27']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=144, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=144 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:119 - stack: []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=144 nstack_initial=0)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=144, inst=LOAD_FAST(arg=7, lineno=116)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=146, inst=STORE_FAST(arg=13, lineno=116)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$max_force144.0']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=148, inst=JUMP_FORWARD(arg=9, lineno=116)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=150 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:119 - stack: []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=150 nstack_initial=0)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=150, inst=LOAD_FAST(arg=13, lineno=117)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=152, inst=LOAD_FAST(arg=7, lineno=117)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$u_sat150.0']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=154, inst=UNARY_NEGATIVE(arg=None, lineno=117)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$u_sat150.0', '$max_force152.1']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=156, inst=COMPARE_OP(arg=2, lineno=117)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$u_sat150.0', '$154unary_negative.2']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=160, inst=POP_JUMP_IF_FALSE(arg=3, lineno=117)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$156compare_op.3']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=162, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:119 - stack: []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=168 nstack_initial=0)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=168, inst=LOAD_FAST(arg=0, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=170, inst=LOAD_FAST(arg=4, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$z168.0']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$z168.0', '$alg_gain_K2170.1']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=174, inst=BINARY_OP(arg=5, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$z168.0', '$alg_gain_K2170.1', '$sgn_sigma172.2']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=178, inst=LOAD_FAST(arg=6, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$z168.0', '$binop_mul174.3']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=180, inst=BINARY_OP(arg=5, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$z168.0', '$binop_mul174.3', '$dt178.4']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=184, inst=BINARY_OP(arg=10, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$z168.0', '$binop_mul180.5']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=188, inst=LOAD_FAST(arg=9, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_sub184.6']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=190, inst=LOAD_FAST(arg=13, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_sub184.6', '$Kaw188.7']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=192, inst=LOAD_FAST(arg=12, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_sub184.6', '$Kaw188.7', '$u_sat190.8']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=194, inst=BINARY_OP(arg=10, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_sub184.6', '$Kaw188.7', '$u_sat190.8', '$u_raw192.9']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=198, inst=BINARY_OP(arg=5, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_sub184.6', '$Kaw188.7', '$binop_sub194.10']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=202, inst=LOAD_FAST(arg=6, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_sub184.6', '$binop_mul198.11']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=204, inst=BINARY_OP(arg=5, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_sub184.6', '$binop_mul198.11', '$dt202.12']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=208, inst=BINARY_OP(arg=0, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_sub184.6', '$binop_mul204.13']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=212, inst=STORE_FAST(arg=14, lineno=120)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$binop_add208.14']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=214, inst=LOAD_FAST(arg=14, lineno=122)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=216, inst=LOAD_FAST(arg=7, lineno=122)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$new_z214.15']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=218, inst=COMPARE_OP(arg=68, lineno=122)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$new_z214.15', '$max_force216.16']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=222, inst=POP_JUMP_IF_FALSE(arg=3, lineno=122)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$218compare_op.17']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=224, stack=(), blockstack=(), npush=0), Edge(pc=230, stack=(), blockstack=(), npush=0)]
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=162 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=224 nstack_initial=0), State(pc_initial=230 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:119 - stack: []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=162 nstack_initial=0)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=162, inst=LOAD_FAST(arg=7, lineno=118)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=164, inst=UNARY_NEGATIVE(arg=None, lineno=118)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$max_force162.0']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=166, inst=STORE_FAST(arg=13, lineno=118)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$164unary_negative.1']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=224 nstack_initial=0), State(pc_initial=230 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=224 nstack_initial=0), State(pc_initial=230 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:119 - stack: []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=224 nstack_initial=0)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=224, inst=LOAD_FAST(arg=7, lineno=123)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=226, inst=STORE_FAST(arg=14, lineno=123)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$max_force224.0']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=228, inst=JUMP_FORWARD(arg=9, lineno=123)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=248, stack=(), blockstack=(), npush=0)]
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=230 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=248 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:119 - stack: []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=230 nstack_initial=0)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=230, inst=LOAD_FAST(arg=14, lineno=124)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=232, inst=LOAD_FAST(arg=7, lineno=124)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$new_z230.0']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=234, inst=UNARY_NEGATIVE(arg=None, lineno=124)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$new_z230.0', '$max_force232.1']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=236, inst=COMPARE_OP(arg=2, lineno=124)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$new_z230.0', '$234unary_negative.2']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=240, inst=POP_JUMP_IF_FALSE(arg=3, lineno=124)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$236compare_op.3']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=242, stack=(), blockstack=(), npush=0), Edge(pc=248, stack=(), blockstack=(), npush=0)]
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=248 nstack_initial=0), State(pc_initial=242 nstack_initial=0), State(pc_initial=248 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=248 nstack_initial=0), State(pc_initial=242 nstack_initial=0), State(pc_initial=248 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:119 - stack: []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=248 nstack_initial=0)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=248, inst=LOAD_GLOBAL(arg=7, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=258, inst=LOAD_FAST(arg=13, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$null$248.1', '$248load_global.0']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=260, inst=CALL(arg=1, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$null$248.1', '$248load_global.0', '$u_sat258.2']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=268, inst=LOAD_GLOBAL(arg=7, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$260call.3']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=278, inst=LOAD_FAST(arg=14, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$260call.3', '$null$268.5', '$268load_global.4']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=280, inst=CALL(arg=1, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$260call.3', '$null$268.5', '$268load_global.4', '$new_z278.6']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=288, inst=LOAD_GLOBAL(arg=7, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$260call.3', '$280call.7']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=298, inst=LOAD_FAST(arg=1, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$260call.3', '$280call.7', '$null$288.9', '$288load_global.8']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=300, inst=CALL(arg=1, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$260call.3', '$280call.7', '$null$288.9', '$288load_global.8', '$sigma298.10']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=308, inst=BUILD_TUPLE(arg=3, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$260call.3', '$280call.7', '$300call.11']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=310, inst=RETURN_VALUE(arg=None, lineno=126)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$308build_tuple.12']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=242 nstack_initial=0), State(pc_initial=248 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:119 - stack: []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=242 nstack_initial=0)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=242, inst=LOAD_FAST(arg=7, lineno=125)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack []
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=244, inst=UNARY_NEGATIVE(arg=None, lineno=125)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$max_force242.0']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:350 - dispatch pc=246, inst=STORE_FAST(arg=14, lineno=125)
2025-10-01 10:15:05 [   DEBUG] byteflow.py:351 - stack ['$244unary_negative.1']
2025-10-01 10:15:05 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=248, stack=(), blockstack=(), npush=0)]
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=248 nstack_initial=0), State(pc_initial=248 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=248 nstack_initial=0)])
2025-10-01 10:15:05 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-01 10:15:05 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=144 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=162 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set(),
             State(pc_initial=224 nstack_initial=0): set(),
             State(pc_initial=230 nstack_initial=0): set(),
             State(pc_initial=242 nstack_initial=0): set(),
             State(pc_initial=248 nstack_initial=0): set()})
2025-10-01 10:15:05 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-01 10:15:05 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-01 10:15:05 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-01 10:15:05 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-01 10:15:05 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-01 10:15:05 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-01 10:15:05 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$alg_gain_K14.0'}), (6, {'value': '$alg_gain_K14.0', 'res': '$6unary_negative.1'}), (8, {'idx': 0, 'res': '$8load_global.2'}), (18, {'item': '$8load_global.2', 'res': '$18load_attr.4'}), (38, {'idx': 0, 'res': '$38load_global.5'}), (48, {'item': '$38load_global.5', 'res': '$48load_attr.7'}), (68, {'res': '$sigma68.8'}), (70, {'func': '$48load_attr.7', 'args': ['$sigma68.8'], 'kw_names': None, 'res': '$70call.9'}), (78, {'func': '$18load_attr.4', 'args': ['$70call.9'], 'kw_names': None, 'res': '$78call.10'}), (86, {'op': '*', 'lhs': '$6unary_negative.1', 'rhs': '$78call.10', 'res': '$binop_mul86.11'}), (90, {'res': '$sgn_sigma90.12'}), (92, {'op': '*', 'lhs': '$binop_mul86.11', 'rhs': '$sgn_sigma90.12', 'res': '$binop_mul92.13'}), (96, {'value': '$binop_mul92.13'}), (98, {'res': '$z98.14'}), (100, {'value': '$z98.14'}), (102, {'res': '$u_eq102.15'}), (104, {'res': '$u_cont104.16'}), (106, {'op': '+', 'lhs': '$u_eq102.15', 'rhs': '$u_cont104.16', 'res': '$binop_add106.17'}), (110, {'res': '$u_dis110.18'}), (112, {'op': '+', 'lhs': '$binop_add106.17', 'rhs': '$u_dis110.18', 'res': '$binop_add112.19'}), (116, {'res': '$damping_gain116.20'}), (118, {'res': '$sigma118.21'}), (120, {'op': '*', 'lhs': '$damping_gain116.20', 'rhs': '$sigma118.21', 'res': '$binop_mul120.22'}), (124, {'op': '-', 'lhs': '$binop_add112.19', 'rhs': '$binop_mul120.22', 'res': '$binop_sub124.23'}), (128, {'value': '$binop_sub124.23'}), (130, {'res': '$u_raw130.24'}), (132, {'value': '$u_raw130.24'}), (134, {'res': '$u_sat134.25'}), (136, {'res': '$max_force136.26'}), (138, {'lhs': '$u_sat134.25', 'rhs': '$max_force136.26', 'res': '$138compare_op.27'}), (142, {'pred': '$138compare_op.27'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={144: (), 150: ()})
2025-10-01 10:15:06 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=144 nstack_initial=0):
AdaptBlockInfo(insts=((144, {'res': '$max_force144.0'}), (146, {'value': '$max_force144.0'}), (148, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
2025-10-01 10:15:06 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$u_sat150.0'}), (152, {'res': '$max_force152.1'}), (154, {'value': '$max_force152.1', 'res': '$154unary_negative.2'}), (156, {'lhs': '$u_sat150.0', 'rhs': '$154unary_negative.2', 'res': '$156compare_op.3'}), (160, {'pred': '$156compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={162: (), 168: ()})
2025-10-01 10:15:06 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=162 nstack_initial=0):
AdaptBlockInfo(insts=((162, {'res': '$max_force162.0'}), (164, {'value': '$max_force162.0', 'res': '$164unary_negative.1'}), (166, {'value': '$164unary_negative.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
2025-10-01 10:15:06 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$z168.0'}), (170, {'res': '$alg_gain_K2170.1'}), (172, {'res': '$sgn_sigma172.2'}), (174, {'op': '*', 'lhs': '$alg_gain_K2170.1', 'rhs': '$sgn_sigma172.2', 'res': '$binop_mul174.3'}), (178, {'res': '$dt178.4'}), (180, {'op': '*', 'lhs': '$binop_mul174.3', 'rhs': '$dt178.4', 'res': '$binop_mul180.5'}), (184, {'op': '-', 'lhs': '$z168.0', 'rhs': '$binop_mul180.5', 'res': '$binop_sub184.6'}), (188, {'res': '$Kaw188.7'}), (190, {'res': '$u_sat190.8'}), (192, {'res': '$u_raw192.9'}), (194, {'op': '-', 'lhs': '$u_sat190.8', 'rhs': '$u_raw192.9', 'res': '$binop_sub194.10'}), (198, {'op': '*', 'lhs': '$Kaw188.7', 'rhs': '$binop_sub194.10', 'res': '$binop_mul198.11'}), (202, {'res': '$dt202.12'}), (204, {'op': '*', 'lhs': '$binop_mul198.11', 'rhs': '$dt202.12', 'res': '$binop_mul204.13'}), (208, {'op': '+', 'lhs': '$binop_sub184.6', 'rhs': '$binop_mul204.13', 'res': '$binop_add208.14'}), (212, {'value': '$binop_add208.14'}), (214, {'res': '$new_z214.15'}), (216, {'res': '$max_force216.16'}), (218, {'lhs': '$new_z214.15', 'rhs': '$max_force216.16', 'res': '$218compare_op.17'}), (222, {'pred': '$218compare_op.17'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={224: (), 230: ()})
2025-10-01 10:15:06 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=224 nstack_initial=0):
AdaptBlockInfo(insts=((224, {'res': '$max_force224.0'}), (226, {'value': '$max_force224.0'}), (228, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={248: ()})
2025-10-01 10:15:06 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=230 nstack_initial=0):
AdaptBlockInfo(insts=((230, {'res': '$new_z230.0'}), (232, {'res': '$max_force232.1'}), (234, {'value': '$max_force232.1', 'res': '$234unary_negative.2'}), (236, {'lhs': '$new_z230.0', 'rhs': '$234unary_negative.2', 'res': '$236compare_op.3'}), (240, {'pred': '$236compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={242: (), 248: ()})
2025-10-01 10:15:06 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=242 nstack_initial=0):
AdaptBlockInfo(insts=((242, {'res': '$max_force242.0'}), (244, {'value': '$max_force242.0', 'res': '$244unary_negative.1'}), (246, {'value': '$244unary_negative.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={248: ()})
2025-10-01 10:15:06 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=248 nstack_initial=0):
AdaptBlockInfo(insts=((248, {'idx': 3, 'res': '$248load_global.0'}), (258, {'res': '$u_sat258.2'}), (260, {'func': '$248load_global.0', 'args': ['$u_sat258.2'], 'kw_names': None, 'res': '$260call.3'}), (268, {'idx': 3, 'res': '$268load_global.4'}), (278, {'res': '$new_z278.6'}), (280, {'func': '$268load_global.4', 'args': ['$new_z278.6'], 'kw_names': None, 'res': '$280call.7'}), (288, {'idx': 3, 'res': '$288load_global.8'}), (298, {'res': '$sigma298.10'}), (300, {'func': '$288load_global.8', 'args': ['$sigma298.10'], 'kw_names': None, 'res': '$300call.11'}), (308, {'items': ['$260call.3', '$280call.7', '$300call.11'], 'res': '$308build_tuple.12'}), (310, {'retval': '$308build_tuple.12', 'castval': '$310return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-01 10:15:06 [   DEBUG] interpreter.py:1416 - label 0:
    z = arg(0, name=z)                       ['z']
    sigma = arg(1, name=sigma)               ['sigma']
    sgn_sigma = arg(2, name=sgn_sigma)       ['sgn_sigma']
    alg_gain_K1 = arg(3, name=alg_gain_K1)   ['alg_gain_K1']
    alg_gain_K2 = arg(4, name=alg_gain_K2)   ['alg_gain_K2']
    damping_gain = arg(5, name=damping_gain) ['damping_gain']
    dt = arg(6, name=dt)                     ['dt']
    max_force = arg(7, name=max_force)       ['max_force']
    u_eq = arg(8, name=u_eq)                 ['u_eq']
    Kaw = arg(9, name=Kaw)                   ['Kaw']
    $6unary_negative.1 = unary(fn=<built-in function neg>, value=alg_gain_K1) ['$6unary_negative.1', 'alg_gain_K1']
    $8load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $18load_attr.4 = getattr(value=$8load_global.2, attr=sqrt) ['$18load_attr.4', '$8load_global.2']
    $38load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$38load_global.5']
    $48load_attr.7 = getattr(value=$38load_global.5, attr=abs) ['$38load_global.5', '$48load_attr.7']
    $70call.9 = call $48load_attr.7(sigma, func=$48load_attr.7, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_attr.7', '$70call.9', 'sigma']
    $78call.10 = call $18load_attr.4($70call.9, func=$18load_attr.4, args=[Var($70call.9, sta_smc.py:109)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_attr.4', '$70call.9', '$78call.10']
    $binop_mul86.11 = $6unary_negative.1 * $78call.10 ['$6unary_negative.1', '$78call.10', '$binop_mul86.11']
    u_cont = $binop_mul86.11 * sgn_sigma     ['$binop_mul86.11', 'sgn_sigma', 'u_cont']
    u_dis = z                                ['u_dis', 'z']
    $binop_add106.17 = u_eq + u_cont         ['$binop_add106.17', 'u_cont', 'u_eq']
    $binop_add112.19 = $binop_add106.17 + u_dis ['$binop_add106.17', '$binop_add112.19', 'u_dis']
    $binop_mul120.22 = damping_gain * sigma  ['$binop_mul120.22', 'damping_gain', 'sigma']
    u_raw = $binop_add112.19 - $binop_mul120.22 ['$binop_add112.19', '$binop_mul120.22', 'u_raw']
    u_sat = u_raw                            ['u_raw', 'u_sat']
    $138compare_op.27 = u_sat > max_force    ['$138compare_op.27', 'max_force', 'u_sat']
    bool142 = global(bool: <class 'bool'>)   ['bool142']
    $142pred = call bool142($138compare_op.27, func=bool142, args=(Var($138compare_op.27, sta_smc.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$138compare_op.27', '$142pred', 'bool142']
    branch $142pred, 144, 150                ['$142pred']
label 144:
    u_sat = max_force                        ['max_force', 'u_sat']
    jump 168                                 []
label 150:
    $154unary_negative.2 = unary(fn=<built-in function neg>, value=max_force) ['$154unary_negative.2', 'max_force']
    $156compare_op.3 = u_sat < $154unary_negative.2 ['$154unary_negative.2', '$156compare_op.3', 'u_sat']
    bool160 = global(bool: <class 'bool'>)   ['bool160']
    $160pred = call bool160($156compare_op.3, func=bool160, args=(Var($156compare_op.3, sta_smc.py:117),), kws=(), vararg=None, varkwarg=None, target=None) ['$156compare_op.3', '$160pred', 'bool160']
    branch $160pred, 162, 168                ['$160pred']
label 162:
    u_sat = unary(fn=<built-in function neg>, value=max_force) ['max_force', 'u_sat']
    jump 168                                 []
label 168:
    $binop_mul174.3 = alg_gain_K2 * sgn_sigma ['$binop_mul174.3', 'alg_gain_K2', 'sgn_sigma']
    $binop_mul180.5 = $binop_mul174.3 * dt   ['$binop_mul174.3', '$binop_mul180.5', 'dt']
    $binop_sub184.6 = z - $binop_mul180.5    ['$binop_mul180.5', '$binop_sub184.6', 'z']
    $binop_sub194.10 = u_sat - u_raw         ['$binop_sub194.10', 'u_raw', 'u_sat']
    $binop_mul198.11 = Kaw * $binop_sub194.10 ['$binop_mul198.11', '$binop_sub194.10', 'Kaw']
    $binop_mul204.13 = $binop_mul198.11 * dt ['$binop_mul198.11', '$binop_mul204.13', 'dt']
    new_z = $binop_sub184.6 + $binop_mul204.13 ['$binop_mul204.13', '$binop_sub184.6', 'new_z']
    $218compare_op.17 = new_z > max_force    ['$218compare_op.17', 'max_force', 'new_z']
    bool222 = global(bool: <class 'bool'>)   ['bool222']
    $222pred = call bool222($218compare_op.17, func=bool222, args=(Var($218compare_op.17, sta_smc.py:122),), kws=(), vararg=None, varkwarg=None, target=None) ['$218compare_op.17', '$222pred', 'bool222']
    branch $222pred, 224, 230                ['$222pred']
label 224:
    new_z = max_force                        ['max_force', 'new_z']
    jump 248                                 []
label 230:
    $234unary_negative.2 = unary(fn=<built-in function neg>, value=max_force) ['$234unary_negative.2', 'max_force']
    $236compare_op.3 = new_z < $234unary_negative.2 ['$234unary_negative.2', '$236compare_op.3', 'new_z']
    bool240 = global(bool: <class 'bool'>)   ['bool240']
    $240pred = call bool240($236compare_op.3, func=bool240, args=(Var($236compare_op.3, sta_smc.py:124),), kws=(), vararg=None, varkwarg=None, target=None) ['$236compare_op.3', '$240pred', 'bool240']
    branch $240pred, 242, 248                ['$240pred']
label 242:
    new_z = unary(fn=<built-in function neg>, value=max_force) ['max_force', 'new_z']
    jump 248                                 []
label 248:
    $248load_global.0 = global(float: <class 'float'>) ['$248load_global.0']
    $260call.3 = call $248load_global.0(u_sat, func=$248load_global.0, args=[Var(u_sat, sta_smc.py:114)], kws=(), vararg=None, varkwarg=None, target=None) ['$248load_global.0', '$260call.3', 'u_sat']
    $268load_global.4 = global(float: <class 'float'>) ['$268load_global.4']
    $280call.7 = call $268load_global.4(new_z, func=$268load_global.4, args=[Var(new_z, sta_smc.py:120)], kws=(), vararg=None, varkwarg=None, target=None) ['$268load_global.4', '$280call.7', 'new_z']
    $288load_global.8 = global(float: <class 'float'>) ['$288load_global.8']
    $300call.11 = call $288load_global.8(sigma, func=$288load_global.8, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None) ['$288load_global.8', '$300call.11', 'sigma']
    $308build_tuple.12 = build_tuple(items=[Var($260call.3, sta_smc.py:126), Var($280call.7, sta_smc.py:126), Var($300call.11, sta_smc.py:126)]) ['$260call.3', '$280call.7', '$300call.11', '$308build_tuple.12']
    $310return_value.13 = cast(value=$308build_tuple.12) ['$308build_tuple.12', '$310return_value.13']
    return $310return_value.13               ['$310return_value.13']

2025-10-01 10:15:06 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000234FDC7B440>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: z = arg(0, name=z)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: sigma = arg(1, name=sigma)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: sgn_sigma = arg(2, name=sgn_sigma)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: alg_gain_K1 = arg(3, name=alg_gain_K1)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: alg_gain_K2 = arg(4, name=alg_gain_K2)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: damping_gain = arg(5, name=damping_gain)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: dt = arg(6, name=dt)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: max_force = arg(7, name=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_eq = arg(8, name=u_eq)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: Kaw = arg(9, name=Kaw)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $6unary_negative.1 = unary(fn=<built-in function neg>, value=alg_gain_K1)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $8load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $18load_attr.4 = getattr(value=$8load_global.2, attr=sqrt)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $38load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $48load_attr.7 = getattr(value=$38load_global.5, attr=abs)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $70call.9 = call $48load_attr.7(sigma, func=$48load_attr.7, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $78call.10 = call $18load_attr.4($70call.9, func=$18load_attr.4, args=[Var($70call.9, sta_smc.py:109)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul86.11 = $6unary_negative.1 * $78call.10
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_cont = $binop_mul86.11 * sgn_sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_dis = z
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_add106.17 = u_eq + u_cont
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_add112.19 = $binop_add106.17 + u_dis
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul120.22 = damping_gain * sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_raw = $binop_add112.19 - $binop_mul120.22
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat = u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $138compare_op.27 = u_sat > max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool142 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $142pred = call bool142($138compare_op.27, func=bool142, args=(Var($138compare_op.27, sta_smc.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $142pred, 144, 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 144
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000234FDC7B440>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat = max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000234FDC7B440>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $154unary_negative.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $156compare_op.3 = u_sat < $154unary_negative.2
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool160 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $160pred = call bool160($156compare_op.3, func=bool160, args=(Var($156compare_op.3, sta_smc.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $160pred, 162, 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 162
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000234FDC7B440>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000234FDC7B440>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul174.3 = alg_gain_K2 * sgn_sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul180.5 = $binop_mul174.3 * dt
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_sub184.6 = z - $binop_mul180.5
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_sub194.10 = u_sat - u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul198.11 = Kaw * $binop_sub194.10
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul204.13 = $binop_mul198.11 * dt
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = $binop_sub184.6 + $binop_mul204.13
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $218compare_op.17 = new_z > max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool222 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $222pred = call bool222($218compare_op.17, func=bool222, args=(Var($218compare_op.17, sta_smc.py:122),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $222pred, 224, 230
2025-10-01 10:15:06 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 224
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000234FDC7B440>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 230
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000234FDC7B440>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $234unary_negative.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $236compare_op.3 = new_z < $234unary_negative.2
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool240 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $240pred = call bool240($236compare_op.3, func=bool240, args=(Var($236compare_op.3, sta_smc.py:124),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $240pred, 242, 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 242
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000234FDC7B440>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000234FDC7B440>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $248load_global.0 = global(float: <class 'float'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $260call.3 = call $248load_global.0(u_sat, func=$248load_global.0, args=[Var(u_sat, sta_smc.py:114)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $268load_global.4 = global(float: <class 'float'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $280call.7 = call $268load_global.4(new_z, func=$268load_global.4, args=[Var(new_z, sta_smc.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $288load_global.8 = global(float: <class 'float'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $300call.11 = call $288load_global.8(sigma, func=$288load_global.8, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $308build_tuple.12 = build_tuple(items=[Var($260call.3, sta_smc.py:126), Var($280call.7, sta_smc.py:126), Var($300call.11, sta_smc.py:126)])
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $310return_value.13 = cast(value=$308build_tuple.12)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: return $310return_value.13
2025-10-01 10:15:06 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$138compare_op.27': [(<numba.core.ir.Assign object at 0x00000234FDCBEA50>,
                                    0)],
             '$142pred': [(<numba.core.ir.Assign object at 0x00000234FDCBEC60>,
                           0)],
             '$154unary_negative.2': [(<numba.core.ir.Assign object at 0x00000234FDCBED80>,
                                       150)],
             '$156compare_op.3': [(<numba.core.ir.Assign object at 0x00000234FDCBEED0>,
                                   150)],
             '$160pred': [(<numba.core.ir.Assign object at 0x00000234FDCBF0E0>,
                           150)],
             '$18load_attr.4': [(<numba.core.ir.Assign object at 0x00000234FDCBD340>,
                                 0)],
             '$218compare_op.17': [(<numba.core.ir.Assign object at 0x00000234FDCD4710>,
                                    168)],
             '$222pred': [(<numba.core.ir.Assign object at 0x00000234FDCD4950>,
                           168)],
             '$234unary_negative.2': [(<numba.core.ir.Assign object at 0x00000234FDCD4B00>,
                                       230)],
             '$236compare_op.3': [(<numba.core.ir.Assign object at 0x00000234FDCD4C80>,
                                   230)],
             '$240pred': [(<numba.core.ir.Assign object at 0x00000234FDCD4EC0>,
                           230)],
             '$248load_global.0': [(<numba.core.ir.Assign object at 0x00000234FDCD5250>,
                                    248)],
             '$260call.3': [(<numba.core.ir.Assign object at 0x00000234FDCD54F0>,
                             248)],
             '$268load_global.4': [(<numba.core.ir.Assign object at 0x00000234FDCD55E0>,
                                    248)],
             '$280call.7': [(<numba.core.ir.Assign object at 0x00000234FDCD5880>,
                             248)],
             '$288load_global.8': [(<numba.core.ir.Assign object at 0x00000234FDCD5970>,
                                    248)],
             '$300call.11': [(<numba.core.ir.Assign object at 0x00000234FDCD5C10>,
                              248)],
             '$308build_tuple.12': [(<numba.core.ir.Assign object at 0x00000234FDCD5D00>,
                                     248)],
             '$310return_value.13': [(<numba.core.ir.Assign object at 0x00000234FDCD5E50>,
                                      248)],
             '$38load_global.5': [(<numba.core.ir.Assign object at 0x00000234FDCBD400>,
                                   0)],
             '$48load_attr.7': [(<numba.core.ir.Assign object at 0x00000234FDCBD4C0>,
                                 0)],
             '$6unary_negative.1': [(<numba.core.ir.Assign object at 0x00000234FDCBD1C0>,
                                     0)],
             '$70call.9': [(<numba.core.ir.Assign object at 0x00000234FDCBD670>,
                            0)],
             '$78call.10': [(<numba.core.ir.Assign object at 0x00000234FDCBD760>,
                             0)],
             '$8load_global.2': [(<numba.core.ir.Assign object at 0x00000234FDCBD280>,
                                  0)],
             '$binop_add106.17': [(<numba.core.ir.Assign object at 0x00000234FDCBDE50>,
                                   0)],
             '$binop_add112.19': [(<numba.core.ir.Assign object at 0x00000234FDCBE060>,
                                   0)],
             '$binop_mul120.22': [(<numba.core.ir.Assign object at 0x00000234FDCBE360>,
                                   0)],
             '$binop_mul174.3': [(<numba.core.ir.Assign object at 0x00000234FDCBF740>,
                                  168)],
             '$binop_mul180.5': [(<numba.core.ir.Assign object at 0x00000234FDCBF950>,
                                  168)],
             '$binop_mul198.11': [(<numba.core.ir.Assign object at 0x00000234FDCBFF80>,
                                   168)],
             '$binop_mul204.13': [(<numba.core.ir.Assign object at 0x00000234FDCD41D0>,
                                   168)],
             '$binop_mul86.11': [(<numba.core.ir.Assign object at 0x00000234FDCBD820>,
                                  0)],
             '$binop_sub184.6': [(<numba.core.ir.Assign object at 0x00000234FDCBFA70>,
                                  168)],
             '$binop_sub194.10': [(<numba.core.ir.Assign object at 0x00000234FDCBFE60>,
                                   168)],
             'Kaw': [(<numba.core.ir.Assign object at 0x00000234FDCBD040>, 0)],
             'alg_gain_K1': [(<numba.core.ir.Assign object at 0x00000234FDCBCCE0>,
                              0)],
             'alg_gain_K2': [(<numba.core.ir.Assign object at 0x00000234FDCBCD70>,
                              0)],
             'bool142': [(<numba.core.ir.Assign object at 0x00000234FDCBEB70>,
                          0)],
             'bool160': [(<numba.core.ir.Assign object at 0x00000234FDCBEFF0>,
                          150)],
             'bool222': [(<numba.core.ir.Assign object at 0x00000234FDCD4830>,
                          168)],
             'bool240': [(<numba.core.ir.Assign object at 0x00000234FDCD4DA0>,
                          230)],
             'damping_gain': [(<numba.core.ir.Assign object at 0x00000234FDCBCE00>,
                               0)],
             'dt': [(<numba.core.ir.Assign object at 0x00000234FDCBCE90>, 0)],
             'max_force': [(<numba.core.ir.Assign object at 0x00000234FDCBCF20>,
                            0)],
             'new_z': [(<numba.core.ir.Assign object at 0x00000234FDCD42F0>,
                        168),
                       (<numba.core.ir.Assign object at 0x00000234FDCBFC20>,
                        224),
                       (<numba.core.ir.Assign object at 0x00000234FDCD5100>,
                        242)],
             'sgn_sigma': [(<numba.core.ir.Assign object at 0x00000234FDCBCC50>,
                            0)],
             'sigma': [(<numba.core.ir.Assign object at 0x00000234FDCBCBC0>,
                        0)],
             'u_cont': [(<numba.core.ir.Assign object at 0x00000234FDCBD970>,
                         0)],
             'u_dis': [(<numba.core.ir.Assign object at 0x00000234FDCBDB20>,
                        0)],
             'u_eq': [(<numba.core.ir.Assign object at 0x00000234FDCBCFB0>, 0)],
             'u_raw': [(<numba.core.ir.Assign object at 0x00000234FDCBE480>,
                        0)],
             'u_sat': [(<numba.core.ir.Assign object at 0x00000234FDCBE720>, 0),
                       (<numba.core.ir.Assign object at 0x00000234FDCBDF10>,
                        144),
                       (<numba.core.ir.Assign object at 0x00000234FDCBF2F0>,
                        162)],
             'z': [(<numba.core.ir.Assign object at 0x00000234FDCBCB30>, 0)]})
2025-10-01 10:15:06 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x00000234FDD1F800>
2025-10-01 10:15:06 [   DEBUG] ssa.py:64 - Fix SSA violator on var u_sat
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD1EF60>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: z = arg(0, name=z)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: sigma = arg(1, name=sigma)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: sgn_sigma = arg(2, name=sgn_sigma)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: alg_gain_K1 = arg(3, name=alg_gain_K1)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: alg_gain_K2 = arg(4, name=alg_gain_K2)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: damping_gain = arg(5, name=damping_gain)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: dt = arg(6, name=dt)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: max_force = arg(7, name=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_eq = arg(8, name=u_eq)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: Kaw = arg(9, name=Kaw)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $6unary_negative.1 = unary(fn=<built-in function neg>, value=alg_gain_K1)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $8load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $18load_attr.4 = getattr(value=$8load_global.2, attr=sqrt)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $38load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $48load_attr.7 = getattr(value=$38load_global.5, attr=abs)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $70call.9 = call $48load_attr.7(sigma, func=$48load_attr.7, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $78call.10 = call $18load_attr.4($70call.9, func=$18load_attr.4, args=[Var($70call.9, sta_smc.py:109)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul86.11 = $6unary_negative.1 * $78call.10
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_cont = $binop_mul86.11 * sgn_sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_dis = z
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_add106.17 = u_eq + u_cont
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_add112.19 = $binop_add106.17 + u_dis
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul120.22 = damping_gain * sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_raw = $binop_add112.19 - $binop_mul120.22
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat = u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:302 - first assign: u_sat
2025-10-01 10:15:06 [   DEBUG] ssa.py:216 - replaced with: u_sat = u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $138compare_op.27 = u_sat > max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool142 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $142pred = call bool142($138compare_op.27, func=bool142, args=(Var($138compare_op.27, sta_smc.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $142pred, 144, 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 144
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD1EF60>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat = max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:216 - replaced with: u_sat.1 = max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD1EF60>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $154unary_negative.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $156compare_op.3 = u_sat < $154unary_negative.2
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool160 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $160pred = call bool160($156compare_op.3, func=bool160, args=(Var($156compare_op.3, sta_smc.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $160pred, 162, 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 162
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD1EF60>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:216 - replaced with: u_sat.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD1EF60>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul174.3 = alg_gain_K2 * sgn_sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul180.5 = $binop_mul174.3 * dt
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_sub184.6 = z - $binop_mul180.5
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_sub194.10 = u_sat - u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul198.11 = Kaw * $binop_sub194.10
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul204.13 = $binop_mul198.11 * dt
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = $binop_sub184.6 + $binop_mul204.13
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $218compare_op.17 = new_z > max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool222 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $222pred = call bool222($218compare_op.17, func=bool222, args=(Var($218compare_op.17, sta_smc.py:122),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $222pred, 224, 230
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 224
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD1EF60>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 230
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD1EF60>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $234unary_negative.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $236compare_op.3 = new_z < $234unary_negative.2
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool240 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $240pred = call bool240($236compare_op.3, func=bool240, args=(Var($236compare_op.3, sta_smc.py:124),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $240pred, 242, 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 242
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD1EF60>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD1EF60>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $248load_global.0 = global(float: <class 'float'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $260call.3 = call $248load_global.0(u_sat, func=$248load_global.0, args=[Var(u_sat, sta_smc.py:114)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $268load_global.4 = global(float: <class 'float'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $280call.7 = call $268load_global.4(new_z, func=$268load_global.4, args=[Var(new_z, sta_smc.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $288load_global.8 = global(float: <class 'float'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $300call.11 = call $288load_global.8(sigma, func=$288load_global.8, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $308build_tuple.12 = build_tuple(items=[Var($260call.3, sta_smc.py:126), Var($280call.7, sta_smc.py:126), Var($300call.11, sta_smc.py:126)])
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $310return_value.13 = cast(value=$308build_tuple.12)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: return $310return_value.13
2025-10-01 10:15:06 [   DEBUG] ssa.py:70 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000234FDD386E0>],
             144: [<numba.core.ir.Assign object at 0x00000234FDD38E00>],
             162: [<numba.core.ir.Assign object at 0x00000234FDD39850>]})
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD3B8F0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: z = arg(0, name=z)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: sigma = arg(1, name=sigma)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: sgn_sigma = arg(2, name=sgn_sigma)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: alg_gain_K1 = arg(3, name=alg_gain_K1)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: alg_gain_K2 = arg(4, name=alg_gain_K2)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: damping_gain = arg(5, name=damping_gain)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: dt = arg(6, name=dt)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: max_force = arg(7, name=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_eq = arg(8, name=u_eq)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: Kaw = arg(9, name=Kaw)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $6unary_negative.1 = unary(fn=<built-in function neg>, value=alg_gain_K1)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $8load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $18load_attr.4 = getattr(value=$8load_global.2, attr=sqrt)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $38load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $48load_attr.7 = getattr(value=$38load_global.5, attr=abs)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $70call.9 = call $48load_attr.7(sigma, func=$48load_attr.7, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $78call.10 = call $18load_attr.4($70call.9, func=$18load_attr.4, args=[Var($70call.9, sta_smc.py:109)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul86.11 = $6unary_negative.1 * $78call.10
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_cont = $binop_mul86.11 * sgn_sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_dis = z
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_add106.17 = u_eq + u_cont
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_add112.19 = $binop_add106.17 + u_dis
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul120.22 = damping_gain * sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_raw = $binop_add112.19 - $binop_mul120.22
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat = u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $138compare_op.27 = u_sat > max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:386 - find_def var='u_sat' stmt=$138compare_op.27 = u_sat > max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool142 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $142pred = call bool142($138compare_op.27, func=bool142, args=(Var($138compare_op.27, sta_smc.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $142pred, 144, 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 144
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD3B8F0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat.1 = max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD3B8F0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $154unary_negative.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $156compare_op.3 = u_sat < $154unary_negative.2
2025-10-01 10:15:06 [   DEBUG] ssa.py:386 - find_def var='u_sat' stmt=$156compare_op.3 = u_sat < $154unary_negative.2
2025-10-01 10:15:06 [   DEBUG] ssa.py:417 - find_def_from_top label 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:454 - idom 0 from label 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:460 - find_def_from_bottom label 0
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool160 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $160pred = call bool160($156compare_op.3, func=bool160, args=(Var($156compare_op.3, sta_smc.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $160pred, 162, 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 162
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD3B8F0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD3B8F0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul174.3 = alg_gain_K2 * sgn_sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul180.5 = $binop_mul174.3 * dt
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_sub184.6 = z - $binop_mul180.5
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_sub194.10 = u_sat - u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:386 - find_def var='u_sat' stmt=$binop_sub194.10 = u_sat - u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:417 - find_def_from_top label 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:434 - insert phi node u_sat.3 = phi(incoming_values=[], incoming_blocks=[]) at 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:460 - find_def_from_bottom label 144
2025-10-01 10:15:06 [   DEBUG] ssa.py:442 - incoming_def u_sat.1 = max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:460 - find_def_from_bottom label 162
2025-10-01 10:15:06 [   DEBUG] ssa.py:442 - incoming_def u_sat.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:460 - find_def_from_bottom label 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:417 - find_def_from_top label 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:454 - idom 0 from label 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:460 - find_def_from_bottom label 0
2025-10-01 10:15:06 [   DEBUG] ssa.py:442 - incoming_def u_sat = u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:216 - replaced with: $binop_sub194.10 = u_sat.3 - u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul198.11 = Kaw * $binop_sub194.10
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul204.13 = $binop_mul198.11 * dt
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = $binop_sub184.6 + $binop_mul204.13
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $218compare_op.17 = new_z > max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool222 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $222pred = call bool222($218compare_op.17, func=bool222, args=(Var($218compare_op.17, sta_smc.py:122),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $222pred, 224, 230
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 224
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD3B8F0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 230
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD3B8F0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $234unary_negative.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $236compare_op.3 = new_z < $234unary_negative.2
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool240 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $240pred = call bool240($236compare_op.3, func=bool240, args=(Var($236compare_op.3, sta_smc.py:124),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $240pred, 242, 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 242
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD3B8F0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD3B8F0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $248load_global.0 = global(float: <class 'float'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $260call.3 = call $248load_global.0(u_sat, func=$248load_global.0, args=[Var(u_sat, sta_smc.py:114)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:386 - find_def var='u_sat' stmt=$260call.3 = call $248load_global.0(u_sat, func=$248load_global.0, args=[Var(u_sat, sta_smc.py:114)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:417 - find_def_from_top label 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:454 - idom 168 from label 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:460 - find_def_from_bottom label 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:216 - replaced with: $260call.3 = call $248load_global.0(u_sat.3, func=$248load_global.0, args=[Var(u_sat.3, sta_smc.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $268load_global.4 = global(float: <class 'float'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $280call.7 = call $268load_global.4(new_z, func=$268load_global.4, args=[Var(new_z, sta_smc.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $288load_global.8 = global(float: <class 'float'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $300call.11 = call $288load_global.8(sigma, func=$288load_global.8, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $308build_tuple.12 = build_tuple(items=[Var($260call.3, sta_smc.py:126), Var($280call.7, sta_smc.py:126), Var($300call.11, sta_smc.py:126)])
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $310return_value.13 = cast(value=$308build_tuple.12)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: return $310return_value.13
2025-10-01 10:15:06 [   DEBUG] ssa.py:64 - Fix SSA violator on var new_z
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD39AC0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: z = arg(0, name=z)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: sigma = arg(1, name=sigma)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: sgn_sigma = arg(2, name=sgn_sigma)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: alg_gain_K1 = arg(3, name=alg_gain_K1)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: alg_gain_K2 = arg(4, name=alg_gain_K2)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: damping_gain = arg(5, name=damping_gain)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: dt = arg(6, name=dt)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: max_force = arg(7, name=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_eq = arg(8, name=u_eq)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: Kaw = arg(9, name=Kaw)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $6unary_negative.1 = unary(fn=<built-in function neg>, value=alg_gain_K1)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $8load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $18load_attr.4 = getattr(value=$8load_global.2, attr=sqrt)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $38load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $48load_attr.7 = getattr(value=$38load_global.5, attr=abs)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $70call.9 = call $48load_attr.7(sigma, func=$48load_attr.7, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $78call.10 = call $18load_attr.4($70call.9, func=$18load_attr.4, args=[Var($70call.9, sta_smc.py:109)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul86.11 = $6unary_negative.1 * $78call.10
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_cont = $binop_mul86.11 * sgn_sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_dis = z
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_add106.17 = u_eq + u_cont
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_add112.19 = $binop_add106.17 + u_dis
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul120.22 = damping_gain * sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_raw = $binop_add112.19 - $binop_mul120.22
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat = u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $138compare_op.27 = u_sat > max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool142 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $142pred = call bool142($138compare_op.27, func=bool142, args=(Var($138compare_op.27, sta_smc.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $142pred, 144, 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 144
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD39AC0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat.1 = max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 150
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD39AC0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $154unary_negative.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $156compare_op.3 = u_sat < $154unary_negative.2
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool160 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $160pred = call bool160($156compare_op.3, func=bool160, args=(Var($156compare_op.3, sta_smc.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $160pred, 162, 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 162
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD39AC0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 168
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD39AC0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: u_sat.3 = phi(incoming_values=[Var(u_sat.1, sta_smc.py:116), Var(u_sat.2, sta_smc.py:118), Var(u_sat, sta_smc.py:114)], incoming_blocks=[144, 162, 150])
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul174.3 = alg_gain_K2 * sgn_sigma
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul180.5 = $binop_mul174.3 * dt
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_sub184.6 = z - $binop_mul180.5
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_sub194.10 = u_sat.3 - u_raw
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul198.11 = Kaw * $binop_sub194.10
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $binop_mul204.13 = $binop_mul198.11 * dt
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = $binop_sub184.6 + $binop_mul204.13
2025-10-01 10:15:06 [   DEBUG] ssa.py:302 - first assign: new_z
2025-10-01 10:15:06 [   DEBUG] ssa.py:216 - replaced with: new_z = $binop_sub184.6 + $binop_mul204.13
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $218compare_op.17 = new_z > max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool222 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $222pred = call bool222($218compare_op.17, func=bool222, args=(Var($218compare_op.17, sta_smc.py:122),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $222pred, 224, 230
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 224
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD39AC0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:216 - replaced with: new_z.1 = max_force
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: jump 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 230
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD39AC0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $234unary_negative.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $236compare_op.3 = new_z < $234unary_negative.2
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: bool240 = global(bool: <class 'bool'>)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: $240pred = call bool240($236compare_op.3, func=bool240, args=(Var($236compare_op.3, sta_smc.py:124),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: branch $240pred, 242, 248
2025-10-01 10:15:06 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 242
2025-10-01 10:15:06 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD39AC0>
2025-10-01 10:15:06 [   DEBUG] ssa.py:210 - on stmt: new_z = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:07 [   DEBUG] ssa.py:216 - replaced with: new_z.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: jump 248
2025-10-01 10:15:07 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 248
2025-10-01 10:15:07 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x00000234FDD39AC0>
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $248load_global.0 = global(float: <class 'float'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $260call.3 = call $248load_global.0(u_sat.3, func=$248load_global.0, args=[Var(u_sat.3, sta_smc.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $268load_global.4 = global(float: <class 'float'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $280call.7 = call $268load_global.4(new_z, func=$268load_global.4, args=[Var(new_z, sta_smc.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $288load_global.8 = global(float: <class 'float'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $300call.11 = call $288load_global.8(sigma, func=$288load_global.8, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $308build_tuple.12 = build_tuple(items=[Var($260call.3, sta_smc.py:126), Var($280call.7, sta_smc.py:126), Var($300call.11, sta_smc.py:126)])
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $310return_value.13 = cast(value=$308build_tuple.12)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: return $310return_value.13
2025-10-01 10:15:07 [   DEBUG] ssa.py:70 - Replaced assignments: defaultdict(<class 'list'>,
            {168: [<numba.core.ir.Assign object at 0x00000234FDD5FB00>],
             224: [<numba.core.ir.Assign object at 0x00000234FDD6C290>],
             242: [<numba.core.ir.Assign object at 0x00000234FDD6CD40>]})
2025-10-01 10:15:07 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-01 10:15:07 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD4F5F0>
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: z = arg(0, name=z)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: sigma = arg(1, name=sigma)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: sgn_sigma = arg(2, name=sgn_sigma)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: alg_gain_K1 = arg(3, name=alg_gain_K1)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: alg_gain_K2 = arg(4, name=alg_gain_K2)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: damping_gain = arg(5, name=damping_gain)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: dt = arg(6, name=dt)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: max_force = arg(7, name=max_force)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: u_eq = arg(8, name=u_eq)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: Kaw = arg(9, name=Kaw)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $6unary_negative.1 = unary(fn=<built-in function neg>, value=alg_gain_K1)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $8load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $18load_attr.4 = getattr(value=$8load_global.2, attr=sqrt)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $38load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $48load_attr.7 = getattr(value=$38load_global.5, attr=abs)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $70call.9 = call $48load_attr.7(sigma, func=$48load_attr.7, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $78call.10 = call $18load_attr.4($70call.9, func=$18load_attr.4, args=[Var($70call.9, sta_smc.py:109)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $binop_mul86.11 = $6unary_negative.1 * $78call.10
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: u_cont = $binop_mul86.11 * sgn_sigma
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: u_dis = z
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $binop_add106.17 = u_eq + u_cont
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $binop_add112.19 = $binop_add106.17 + u_dis
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $binop_mul120.22 = damping_gain * sigma
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: u_raw = $binop_add112.19 - $binop_mul120.22
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: u_sat = u_raw
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $138compare_op.27 = u_sat > max_force
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: bool142 = global(bool: <class 'bool'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $142pred = call bool142($138compare_op.27, func=bool142, args=(Var($138compare_op.27, sta_smc.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: branch $142pred, 144, 150
2025-10-01 10:15:07 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 144
2025-10-01 10:15:07 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD4F5F0>
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: u_sat.1 = max_force
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: jump 168
2025-10-01 10:15:07 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 150
2025-10-01 10:15:07 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD4F5F0>
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $154unary_negative.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $156compare_op.3 = u_sat < $154unary_negative.2
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: bool160 = global(bool: <class 'bool'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $160pred = call bool160($156compare_op.3, func=bool160, args=(Var($156compare_op.3, sta_smc.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: branch $160pred, 162, 168
2025-10-01 10:15:07 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 162
2025-10-01 10:15:07 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD4F5F0>
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: u_sat.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: jump 168
2025-10-01 10:15:07 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 168
2025-10-01 10:15:07 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD4F5F0>
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: u_sat.3 = phi(incoming_values=[Var(u_sat.1, sta_smc.py:116), Var(u_sat.2, sta_smc.py:118), Var(u_sat, sta_smc.py:114)], incoming_blocks=[144, 162, 150])
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $binop_mul174.3 = alg_gain_K2 * sgn_sigma
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $binop_mul180.5 = $binop_mul174.3 * dt
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $binop_sub184.6 = z - $binop_mul180.5
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $binop_sub194.10 = u_sat.3 - u_raw
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $binop_mul198.11 = Kaw * $binop_sub194.10
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $binop_mul204.13 = $binop_mul198.11 * dt
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: new_z = $binop_sub184.6 + $binop_mul204.13
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $218compare_op.17 = new_z > max_force
2025-10-01 10:15:07 [   DEBUG] ssa.py:386 - find_def var='new_z' stmt=$218compare_op.17 = new_z > max_force
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: bool222 = global(bool: <class 'bool'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $222pred = call bool222($218compare_op.17, func=bool222, args=(Var($218compare_op.17, sta_smc.py:122),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: branch $222pred, 224, 230
2025-10-01 10:15:07 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 224
2025-10-01 10:15:07 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD4F5F0>
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: new_z.1 = max_force
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: jump 248
2025-10-01 10:15:07 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 230
2025-10-01 10:15:07 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD4F5F0>
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $234unary_negative.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $236compare_op.3 = new_z < $234unary_negative.2
2025-10-01 10:15:07 [   DEBUG] ssa.py:386 - find_def var='new_z' stmt=$236compare_op.3 = new_z < $234unary_negative.2
2025-10-01 10:15:07 [   DEBUG] ssa.py:417 - find_def_from_top label 230
2025-10-01 10:15:07 [   DEBUG] ssa.py:454 - idom 168 from label 230
2025-10-01 10:15:07 [   DEBUG] ssa.py:460 - find_def_from_bottom label 168
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: bool240 = global(bool: <class 'bool'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $240pred = call bool240($236compare_op.3, func=bool240, args=(Var($236compare_op.3, sta_smc.py:124),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: branch $240pred, 242, 248
2025-10-01 10:15:07 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 242
2025-10-01 10:15:07 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD4F5F0>
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: new_z.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: jump 248
2025-10-01 10:15:07 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 248
2025-10-01 10:15:07 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x00000234FDD4F5F0>
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $248load_global.0 = global(float: <class 'float'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $260call.3 = call $248load_global.0(u_sat.3, func=$248load_global.0, args=[Var(u_sat.3, sta_smc.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $268load_global.4 = global(float: <class 'float'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $280call.7 = call $268load_global.4(new_z, func=$268load_global.4, args=[Var(new_z, sta_smc.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:386 - find_def var='new_z' stmt=$280call.7 = call $268load_global.4(new_z, func=$268load_global.4, args=[Var(new_z, sta_smc.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:417 - find_def_from_top label 248
2025-10-01 10:15:07 [   DEBUG] ssa.py:434 - insert phi node new_z.3 = phi(incoming_values=[], incoming_blocks=[]) at 248
2025-10-01 10:15:07 [   DEBUG] ssa.py:460 - find_def_from_bottom label 224
2025-10-01 10:15:07 [   DEBUG] ssa.py:442 - incoming_def new_z.1 = max_force
2025-10-01 10:15:07 [   DEBUG] ssa.py:460 - find_def_from_bottom label 242
2025-10-01 10:15:07 [   DEBUG] ssa.py:442 - incoming_def new_z.2 = unary(fn=<built-in function neg>, value=max_force)
2025-10-01 10:15:07 [   DEBUG] ssa.py:460 - find_def_from_bottom label 230
2025-10-01 10:15:07 [   DEBUG] ssa.py:417 - find_def_from_top label 230
2025-10-01 10:15:07 [   DEBUG] ssa.py:454 - idom 168 from label 230
2025-10-01 10:15:07 [   DEBUG] ssa.py:460 - find_def_from_bottom label 168
2025-10-01 10:15:07 [   DEBUG] ssa.py:442 - incoming_def new_z = $binop_sub184.6 + $binop_mul204.13
2025-10-01 10:15:07 [   DEBUG] ssa.py:216 - replaced with: $280call.7 = call $268load_global.4(new_z.3, func=$268load_global.4, args=[Var(new_z.3, sta_smc.py:126)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $288load_global.8 = global(float: <class 'float'>)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $300call.11 = call $288load_global.8(sigma, func=$288load_global.8, args=[Var(sigma, sta_smc.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $308build_tuple.12 = build_tuple(items=[Var($260call.3, sta_smc.py:126), Var($280call.7, sta_smc.py:126), Var($300call.11, sta_smc.py:126)])
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: $310return_value.13 = cast(value=$308build_tuple.12)
2025-10-01 10:15:07 [   DEBUG] ssa.py:210 - on stmt: return $310return_value.13
