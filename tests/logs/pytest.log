2025-10-06 11:52:55 [    INFO] loader.py:168 - Configuration loaded from sources: ENV > .env > config.yaml
2025-10-06 11:52:55 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=266)
           2	RESUME(arg=0, lineno=266)
           4	LOAD_FAST(arg=2, lineno=277)
           6	LOAD_FAST(arg=3, lineno=277)
           8	BINARY_OP(arg=0, lineno=277)
          12	LOAD_FAST(arg=4, lineno=277)
          14	BINARY_OP(arg=0, lineno=277)
          18	STORE_FAST(arg=11, lineno=277)
          20	LOAD_FAST(arg=3, lineno=278)
          22	LOAD_FAST(arg=7, lineno=278)
          24	LOAD_CONST(arg=1, lineno=278)
          26	BINARY_OP(arg=8, lineno=278)
          30	BINARY_OP(arg=5, lineno=278)
          34	LOAD_FAST(arg=4, lineno=278)
          36	LOAD_FAST(arg=5, lineno=278)
          38	LOAD_CONST(arg=1, lineno=278)
          40	BINARY_OP(arg=8, lineno=278)
          44	BINARY_OP(arg=5, lineno=278)
          48	BINARY_OP(arg=0, lineno=278)
          52	LOAD_FAST(arg=9, lineno=278)
          54	BINARY_OP(arg=0, lineno=278)
          58	LOAD_FAST(arg=4, lineno=278)
          60	LOAD_FAST(arg=8, lineno=278)
          62	LOAD_CONST(arg=1, lineno=278)
          64	BINARY_OP(arg=8, lineno=278)
          68	BINARY_OP(arg=5, lineno=278)
          72	BINARY_OP(arg=0, lineno=278)
          76	LOAD_FAST(arg=10, lineno=278)
          78	BINARY_OP(arg=0, lineno=278)
          82	STORE_FAST(arg=12, lineno=278)
          84	LOAD_FAST(arg=4, lineno=279)
          86	LOAD_FAST(arg=8, lineno=279)
          88	LOAD_CONST(arg=1, lineno=279)
          90	BINARY_OP(arg=8, lineno=279)
          94	BINARY_OP(arg=5, lineno=279)
          98	LOAD_FAST(arg=10, lineno=279)
         100	BINARY_OP(arg=0, lineno=279)
         104	STORE_FAST(arg=13, lineno=279)
         106	LOAD_GLOBAL(arg=1, lineno=282)
         116	LOAD_ATTR(arg=2, lineno=282)
         136	LOAD_FAST(arg=0, lineno=282)
         138	CALL(arg=1, lineno=282)
         146	STORE_FAST(arg=14, lineno=282)
         148	LOAD_GLOBAL(arg=1, lineno=283)
         158	LOAD_ATTR(arg=2, lineno=283)
         178	LOAD_FAST(arg=1, lineno=283)
         180	CALL(arg=1, lineno=283)
         188	STORE_FAST(arg=15, lineno=283)
         190	LOAD_CONST(arg=2, lineno=285)
         192	LOAD_FAST(arg=3, lineno=285)
         194	LOAD_FAST(arg=7, lineno=285)
         196	BINARY_OP(arg=5, lineno=285)
         200	LOAD_FAST(arg=4, lineno=285)
         202	LOAD_FAST(arg=5, lineno=285)
         204	BINARY_OP(arg=5, lineno=285)
         208	BINARY_OP(arg=0, lineno=285)
         212	BINARY_OP(arg=5, lineno=285)
         216	LOAD_FAST(arg=14, lineno=285)
         218	BINARY_OP(arg=5, lineno=285)
         222	LOAD_CONST(arg=2, lineno=285)
         224	LOAD_FAST(arg=4, lineno=285)
         226	BINARY_OP(arg=5, lineno=285)
         230	LOAD_FAST(arg=8, lineno=285)
         232	BINARY_OP(arg=5, lineno=285)
         236	LOAD_FAST(arg=15, lineno=285)
         238	BINARY_OP(arg=5, lineno=285)
         242	BINARY_OP(arg=0, lineno=285)
         246	STORE_FAST(arg=16, lineno=285)
         248	LOAD_CONST(arg=2, lineno=286)
         250	LOAD_FAST(arg=4, lineno=286)
         252	BINARY_OP(arg=5, lineno=286)
         256	LOAD_FAST(arg=8, lineno=286)
         258	BINARY_OP(arg=5, lineno=286)
         262	LOAD_FAST(arg=15, lineno=286)
         264	BINARY_OP(arg=5, lineno=286)
         268	STORE_FAST(arg=17, lineno=286)
         270	LOAD_CONST(arg=3, lineno=287)
         272	LOAD_FAST(arg=4, lineno=287)
         274	LOAD_FAST(arg=8, lineno=287)
         276	LOAD_CONST(arg=1, lineno=287)
         278	BINARY_OP(arg=8, lineno=287)
         282	BINARY_OP(arg=5, lineno=287)
         286	LOAD_FAST(arg=10, lineno=287)
         288	BINARY_OP(arg=0, lineno=287)
         292	BINARY_OP(arg=5, lineno=287)
         296	STORE_FAST(arg=18, lineno=287)
         298	LOAD_GLOBAL(arg=1, lineno=289)
         308	LOAD_ATTR(arg=4, lineno=289)
         328	LOAD_FAST(arg=11, lineno=290)
         330	LOAD_FAST(arg=16, lineno=290)
         332	LOAD_FAST(arg=17, lineno=290)
         334	BUILD_LIST(arg=3, lineno=290)
         336	LOAD_FAST(arg=16, lineno=291)
         338	LOAD_FAST(arg=12, lineno=291)
         340	LOAD_FAST(arg=18, lineno=291)
         342	BUILD_LIST(arg=3, lineno=291)
         344	LOAD_FAST(arg=17, lineno=292)
         346	LOAD_FAST(arg=18, lineno=292)
         348	LOAD_FAST(arg=13, lineno=292)
         350	BUILD_LIST(arg=3, lineno=292)
         352	BUILD_LIST(arg=3, lineno=289)
         354	CALL(arg=1, lineno=289)
         362	STORE_FAST(arg=19, lineno=289)
         364	LOAD_FAST(arg=19, lineno=295)
         366	RETURN_VALUE(arg=None, lineno=295)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:52:55 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:55 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=266)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=266)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=277)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=6, inst=LOAD_FAST(arg=3, lineno=277)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$m04.0']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=8, inst=BINARY_OP(arg=0, lineno=277)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$m04.0', '$m16.1']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=12, inst=LOAD_FAST(arg=4, lineno=277)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add8.2']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=14, inst=BINARY_OP(arg=0, lineno=277)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add8.2', '$m212.3']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=18, inst=STORE_FAST(arg=11, lineno=277)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add14.4']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=22, inst=LOAD_FAST(arg=7, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$m120.5']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$m120.5', '$Lc122.6']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=26, inst=BINARY_OP(arg=8, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$m120.5', '$Lc122.6', '$const24.7']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=30, inst=BINARY_OP(arg=5, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$m120.5', '$binop_pow26.8']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul30.9']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=36, inst=LOAD_FAST(arg=5, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul30.9', '$m234.10']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul30.9', '$m234.10', '$L136.11']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=40, inst=BINARY_OP(arg=8, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul30.9', '$m234.10', '$L136.11', '$const38.12']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=44, inst=BINARY_OP(arg=5, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul30.9', '$m234.10', '$binop_pow40.13']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=48, inst=BINARY_OP(arg=0, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul30.9', '$binop_mul44.14']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=52, inst=LOAD_FAST(arg=9, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add48.15']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=54, inst=BINARY_OP(arg=0, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add48.15', '$I152.16']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add54.17']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=60, inst=LOAD_FAST(arg=8, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add54.17', '$m258.18']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=62, inst=LOAD_CONST(arg=1, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add54.17', '$m258.18', '$Lc260.19']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=64, inst=BINARY_OP(arg=8, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add54.17', '$m258.18', '$Lc260.19', '$const62.20']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=68, inst=BINARY_OP(arg=5, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add54.17', '$m258.18', '$binop_pow64.21']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=72, inst=BINARY_OP(arg=0, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add54.17', '$binop_mul68.22']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=76, inst=LOAD_FAST(arg=10, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add72.23']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=78, inst=BINARY_OP(arg=0, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add72.23', '$I276.24']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=82, inst=STORE_FAST(arg=12, lineno=278)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add78.25']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=84, inst=LOAD_FAST(arg=4, lineno=279)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=86, inst=LOAD_FAST(arg=8, lineno=279)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$m284.26']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=88, inst=LOAD_CONST(arg=1, lineno=279)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$m284.26', '$Lc286.27']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=90, inst=BINARY_OP(arg=8, lineno=279)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$m284.26', '$Lc286.27', '$const88.28']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=94, inst=BINARY_OP(arg=5, lineno=279)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$m284.26', '$binop_pow90.29']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=98, inst=LOAD_FAST(arg=10, lineno=279)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul94.30']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=100, inst=BINARY_OP(arg=0, lineno=279)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul94.30', '$I298.31']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=104, inst=STORE_FAST(arg=13, lineno=279)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add100.32']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=106, inst=LOAD_GLOBAL(arg=1, lineno=282)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=116, inst=LOAD_ATTR(arg=2, lineno=282)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$null$106.34', '$106load_global.33']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=136, inst=LOAD_FAST(arg=0, lineno=282)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$null$106.34', '$116load_attr.35']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=138, inst=CALL(arg=1, lineno=282)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$null$106.34', '$116load_attr.35', '$theta1136.36']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=146, inst=STORE_FAST(arg=14, lineno=282)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$138call.37']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=148, inst=LOAD_GLOBAL(arg=1, lineno=283)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=158, inst=LOAD_ATTR(arg=2, lineno=283)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$null$148.39', '$148load_global.38']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=178, inst=LOAD_FAST(arg=1, lineno=283)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$null$148.39', '$158load_attr.40']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=180, inst=CALL(arg=1, lineno=283)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$null$148.39', '$158load_attr.40', '$theta2178.41']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=188, inst=STORE_FAST(arg=15, lineno=283)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$180call.42']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=190, inst=LOAD_CONST(arg=2, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=192, inst=LOAD_FAST(arg=3, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const190.43']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const190.43', '$m1192.44']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=196, inst=BINARY_OP(arg=5, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const190.43', '$m1192.44', '$Lc1194.45']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=200, inst=LOAD_FAST(arg=4, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const190.43', '$binop_mul196.46']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=202, inst=LOAD_FAST(arg=5, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const190.43', '$binop_mul196.46', '$m2200.47']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=204, inst=BINARY_OP(arg=5, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const190.43', '$binop_mul196.46', '$m2200.47', '$L1202.48']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=208, inst=BINARY_OP(arg=0, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const190.43', '$binop_mul196.46', '$binop_mul204.49']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=212, inst=BINARY_OP(arg=5, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const190.43', '$binop_add208.50']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=216, inst=LOAD_FAST(arg=14, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul212.51']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=218, inst=BINARY_OP(arg=5, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul212.51', '$c1216.52']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=222, inst=LOAD_CONST(arg=2, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul218.53']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=224, inst=LOAD_FAST(arg=4, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul218.53', '$const222.54']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=226, inst=BINARY_OP(arg=5, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul218.53', '$const222.54', '$m2224.55']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=230, inst=LOAD_FAST(arg=8, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul218.53', '$binop_mul226.56']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=232, inst=BINARY_OP(arg=5, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul218.53', '$binop_mul226.56', '$Lc2230.57']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=236, inst=LOAD_FAST(arg=15, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul218.53', '$binop_mul232.58']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=238, inst=BINARY_OP(arg=5, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul218.53', '$binop_mul232.58', '$c2236.59']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=242, inst=BINARY_OP(arg=0, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul218.53', '$binop_mul238.60']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=246, inst=STORE_FAST(arg=16, lineno=285)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_add242.61']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=248, inst=LOAD_CONST(arg=2, lineno=286)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=250, inst=LOAD_FAST(arg=4, lineno=286)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const248.62']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=252, inst=BINARY_OP(arg=5, lineno=286)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const248.62', '$m2250.63']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=256, inst=LOAD_FAST(arg=8, lineno=286)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul252.64']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=258, inst=BINARY_OP(arg=5, lineno=286)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul252.64', '$Lc2256.65']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=262, inst=LOAD_FAST(arg=15, lineno=286)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul258.66']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=264, inst=BINARY_OP(arg=5, lineno=286)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul258.66', '$c2262.67']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=268, inst=STORE_FAST(arg=17, lineno=286)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul264.68']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=270, inst=LOAD_CONST(arg=3, lineno=287)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=272, inst=LOAD_FAST(arg=4, lineno=287)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const270.69']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=274, inst=LOAD_FAST(arg=8, lineno=287)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const270.69', '$m2272.70']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=276, inst=LOAD_CONST(arg=1, lineno=287)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const270.69', '$m2272.70', '$Lc2274.71']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=278, inst=BINARY_OP(arg=8, lineno=287)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const270.69', '$m2272.70', '$Lc2274.71', '$const276.72']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=282, inst=BINARY_OP(arg=5, lineno=287)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const270.69', '$m2272.70', '$binop_pow278.73']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=286, inst=LOAD_FAST(arg=10, lineno=287)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const270.69', '$binop_mul282.74']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=288, inst=BINARY_OP(arg=0, lineno=287)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const270.69', '$binop_mul282.74', '$I2286.75']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=292, inst=BINARY_OP(arg=5, lineno=287)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$const270.69', '$binop_add288.76']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=296, inst=STORE_FAST(arg=18, lineno=287)
2025-10-06 11:52:55 [   DEBUG] byteflow.py:351 - stack ['$binop_mul292.77']
2025-10-06 11:52:55 [   DEBUG] byteflow.py:350 - dispatch pc=298, inst=LOAD_GLOBAL(arg=1, lineno=289)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=308, inst=LOAD_ATTR(arg=4, lineno=289)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$298load_global.78']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=328, inst=LOAD_FAST(arg=11, lineno=290)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=330, inst=LOAD_FAST(arg=16, lineno=290)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$M11328.81']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=332, inst=LOAD_FAST(arg=17, lineno=290)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$M11328.81', '$M12330.82']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=334, inst=BUILD_LIST(arg=3, lineno=290)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$M11328.81', '$M12330.82', '$M13332.83']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=336, inst=LOAD_FAST(arg=16, lineno=291)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$334build_list.84']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=338, inst=LOAD_FAST(arg=12, lineno=291)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$334build_list.84', '$M12336.85']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=340, inst=LOAD_FAST(arg=18, lineno=291)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$334build_list.84', '$M12336.85', '$M22338.86']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=342, inst=BUILD_LIST(arg=3, lineno=291)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$334build_list.84', '$M12336.85', '$M22338.86', '$M23340.87']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=344, inst=LOAD_FAST(arg=17, lineno=292)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$334build_list.84', '$342build_list.88']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=346, inst=LOAD_FAST(arg=18, lineno=292)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$334build_list.84', '$342build_list.88', '$M13344.89']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=348, inst=LOAD_FAST(arg=13, lineno=292)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$334build_list.84', '$342build_list.88', '$M13344.89', '$M23346.90']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=350, inst=BUILD_LIST(arg=3, lineno=292)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$334build_list.84', '$342build_list.88', '$M13344.89', '$M23346.90', '$M33348.91']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=352, inst=BUILD_LIST(arg=3, lineno=289)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$334build_list.84', '$342build_list.88', '$350build_list.92']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=354, inst=CALL(arg=1, lineno=289)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$298.79', '$308load_attr.80', '$352build_list.93']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=362, inst=STORE_FAST(arg=19, lineno=289)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$354call.94']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=364, inst=LOAD_FAST(arg=19, lineno=295)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=366, inst=RETURN_VALUE(arg=None, lineno=295)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$M364.95']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:52:56 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:52:56 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:52:56 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:52:56 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$m04.0'}), (6, {'res': '$m16.1'}), (8, {'op': '+', 'lhs': '$m04.0', 'rhs': '$m16.1', 'res': '$binop_add8.2'}), (12, {'res': '$m212.3'}), (14, {'op': '+', 'lhs': '$binop_add8.2', 'rhs': '$m212.3', 'res': '$binop_add14.4'}), (18, {'value': '$binop_add14.4'}), (20, {'res': '$m120.5'}), (22, {'res': '$Lc122.6'}), (24, {'res': '$const24.7'}), (26, {'op': '**', 'lhs': '$Lc122.6', 'rhs': '$const24.7', 'res': '$binop_pow26.8'}), (30, {'op': '*', 'lhs': '$m120.5', 'rhs': '$binop_pow26.8', 'res': '$binop_mul30.9'}), (34, {'res': '$m234.10'}), (36, {'res': '$L136.11'}), (38, {'res': '$const38.12'}), (40, {'op': '**', 'lhs': '$L136.11', 'rhs': '$const38.12', 'res': '$binop_pow40.13'}), (44, {'op': '*', 'lhs': '$m234.10', 'rhs': '$binop_pow40.13', 'res': '$binop_mul44.14'}), (48, {'op': '+', 'lhs': '$binop_mul30.9', 'rhs': '$binop_mul44.14', 'res': '$binop_add48.15'}), (52, {'res': '$I152.16'}), (54, {'op': '+', 'lhs': '$binop_add48.15', 'rhs': '$I152.16', 'res': '$binop_add54.17'}), (58, {'res': '$m258.18'}), (60, {'res': '$Lc260.19'}), (62, {'res': '$const62.20'}), (64, {'op': '**', 'lhs': '$Lc260.19', 'rhs': '$const62.20', 'res': '$binop_pow64.21'}), (68, {'op': '*', 'lhs': '$m258.18', 'rhs': '$binop_pow64.21', 'res': '$binop_mul68.22'}), (72, {'op': '+', 'lhs': '$binop_add54.17', 'rhs': '$binop_mul68.22', 'res': '$binop_add72.23'}), (76, {'res': '$I276.24'}), (78, {'op': '+', 'lhs': '$binop_add72.23', 'rhs': '$I276.24', 'res': '$binop_add78.25'}), (82, {'value': '$binop_add78.25'}), (84, {'res': '$m284.26'}), (86, {'res': '$Lc286.27'}), (88, {'res': '$const88.28'}), (90, {'op': '**', 'lhs': '$Lc286.27', 'rhs': '$const88.28', 'res': '$binop_pow90.29'}), (94, {'op': '*', 'lhs': '$m284.26', 'rhs': '$binop_pow90.29', 'res': '$binop_mul94.30'}), (98, {'res': '$I298.31'}), (100, {'op': '+', 'lhs': '$binop_mul94.30', 'rhs': '$I298.31', 'res': '$binop_add100.32'}), (104, {'value': '$binop_add100.32'}), (106, {'idx': 0, 'res': '$106load_global.33'}), (116, {'item': '$106load_global.33', 'res': '$116load_attr.35'}), (136, {'res': '$theta1136.36'}), (138, {'func': '$116load_attr.35', 'args': ['$theta1136.36'], 'kw_names': None, 'res': '$138call.37'}), (146, {'value': '$138call.37'}), (148, {'idx': 0, 'res': '$148load_global.38'}), (158, {'item': '$148load_global.38', 'res': '$158load_attr.40'}), (178, {'res': '$theta2178.41'}), (180, {'func': '$158load_attr.40', 'args': ['$theta2178.41'], 'kw_names': None, 'res': '$180call.42'}), (188, {'value': '$180call.42'}), (190, {'res': '$const190.43'}), (192, {'res': '$m1192.44'}), (194, {'res': '$Lc1194.45'}), (196, {'op': '*', 'lhs': '$m1192.44', 'rhs': '$Lc1194.45', 'res': '$binop_mul196.46'}), (200, {'res': '$m2200.47'}), (202, {'res': '$L1202.48'}), (204, {'op': '*', 'lhs': '$m2200.47', 'rhs': '$L1202.48', 'res': '$binop_mul204.49'}), (208, {'op': '+', 'lhs': '$binop_mul196.46', 'rhs': '$binop_mul204.49', 'res': '$binop_add208.50'}), (212, {'op': '*', 'lhs': '$const190.43', 'rhs': '$binop_add208.50', 'res': '$binop_mul212.51'}), (216, {'res': '$c1216.52'}), (218, {'op': '*', 'lhs': '$binop_mul212.51', 'rhs': '$c1216.52', 'res': '$binop_mul218.53'}), (222, {'res': '$const222.54'}), (224, {'res': '$m2224.55'}), (226, {'op': '*', 'lhs': '$const222.54', 'rhs': '$m2224.55', 'res': '$binop_mul226.56'}), (230, {'res': '$Lc2230.57'}), (232, {'op': '*', 'lhs': '$binop_mul226.56', 'rhs': '$Lc2230.57', 'res': '$binop_mul232.58'}), (236, {'res': '$c2236.59'}), (238, {'op': '*', 'lhs': '$binop_mul232.58', 'rhs': '$c2236.59', 'res': '$binop_mul238.60'}), (242, {'op': '+', 'lhs': '$binop_mul218.53', 'rhs': '$binop_mul238.60', 'res': '$binop_add242.61'}), (246, {'value': '$binop_add242.61'}), (248, {'res': '$const248.62'}), (250, {'res': '$m2250.63'}), (252, {'op': '*', 'lhs': '$const248.62', 'rhs': '$m2250.63', 'res': '$binop_mul252.64'}), (256, {'res': '$Lc2256.65'}), (258, {'op': '*', 'lhs': '$binop_mul252.64', 'rhs': '$Lc2256.65', 'res': '$binop_mul258.66'}), (262, {'res': '$c2262.67'}), (264, {'op': '*', 'lhs': '$binop_mul258.66', 'rhs': '$c2262.67', 'res': '$binop_mul264.68'}), (268, {'value': '$binop_mul264.68'}), (270, {'res': '$const270.69'}), (272, {'res': '$m2272.70'}), (274, {'res': '$Lc2274.71'}), (276, {'res': '$const276.72'}), (278, {'op': '**', 'lhs': '$Lc2274.71', 'rhs': '$const276.72', 'res': '$binop_pow278.73'}), (282, {'op': '*', 'lhs': '$m2272.70', 'rhs': '$binop_pow278.73', 'res': '$binop_mul282.74'}), (286, {'res': '$I2286.75'}), (288, {'op': '+', 'lhs': '$binop_mul282.74', 'rhs': '$I2286.75', 'res': '$binop_add288.76'}), (292, {'op': '*', 'lhs': '$const270.69', 'rhs': '$binop_add288.76', 'res': '$binop_mul292.77'}), (296, {'value': '$binop_mul292.77'}), (298, {'idx': 0, 'res': '$298load_global.78'}), (308, {'item': '$298load_global.78', 'res': '$308load_attr.80'}), (328, {'res': '$M11328.81'}), (330, {'res': '$M12330.82'}), (332, {'res': '$M13332.83'}), (334, {'items': ['$M11328.81', '$M12330.82', '$M13332.83'], 'res': '$334build_list.84'}), (336, {'res': '$M12336.85'}), (338, {'res': '$M22338.86'}), (340, {'res': '$M23340.87'}), (342, {'items': ['$M12336.85', '$M22338.86', '$M23340.87'], 'res': '$342build_list.88'}), (344, {'res': '$M13344.89'}), (346, {'res': '$M23346.90'}), (348, {'res': '$M33348.91'}), (350, {'items': ['$M13344.89', '$M23346.90', '$M33348.91'], 'res': '$350build_list.92'}), (352, {'items': ['$334build_list.84', '$342build_list.88', '$350build_list.92'], 'res': '$352build_list.93'}), (354, {'func': '$308load_attr.80', 'args': ['$352build_list.93'], 'kw_names': None, 'res': '$354call.94'}), (362, {'value': '$354call.94'}), (364, {'res': '$M364.95'}), (366, {'retval': '$M364.95', 'castval': '$366return_value.96'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:56 [   DEBUG] interpreter.py:1416 - label 0:
    theta1 = arg(0, name=theta1)             ['theta1']
    theta2 = arg(1, name=theta2)             ['theta2']
    m0 = arg(2, name=m0)                     ['m0']
    m1 = arg(3, name=m1)                     ['m1']
    m2 = arg(4, name=m2)                     ['m2']
    L1 = arg(5, name=L1)                     ['L1']
    L2 = arg(6, name=L2)                     ['L2']
    Lc1 = arg(7, name=Lc1)                   ['Lc1']
    Lc2 = arg(8, name=Lc2)                   ['Lc2']
    I1 = arg(9, name=I1)                     ['I1']
    I2 = arg(10, name=I2)                    ['I2']
    $binop_add8.2 = m0 + m1                  ['$binop_add8.2', 'm0', 'm1']
    M11 = $binop_add8.2 + m2                 ['$binop_add8.2', 'M11', 'm2']
    $const24.7 = const(int, 2)               ['$const24.7']
    $binop_pow26.8 = Lc1 ** $const24.7       ['$binop_pow26.8', '$const24.7', 'Lc1']
    $binop_mul30.9 = m1 * $binop_pow26.8     ['$binop_mul30.9', '$binop_pow26.8', 'm1']
    $const38.12 = const(int, 2)              ['$const38.12']
    $binop_pow40.13 = L1 ** $const38.12      ['$binop_pow40.13', '$const38.12', 'L1']
    $binop_mul44.14 = m2 * $binop_pow40.13   ['$binop_mul44.14', '$binop_pow40.13', 'm2']
    $binop_add48.15 = $binop_mul30.9 + $binop_mul44.14 ['$binop_add48.15', '$binop_mul30.9', '$binop_mul44.14']
    $binop_add54.17 = $binop_add48.15 + I1   ['$binop_add48.15', '$binop_add54.17', 'I1']
    $const62.20 = const(int, 2)              ['$const62.20']
    $binop_pow64.21 = Lc2 ** $const62.20     ['$binop_pow64.21', '$const62.20', 'Lc2']
    $binop_mul68.22 = m2 * $binop_pow64.21   ['$binop_mul68.22', '$binop_pow64.21', 'm2']
    $binop_add72.23 = $binop_add54.17 + $binop_mul68.22 ['$binop_add54.17', '$binop_add72.23', '$binop_mul68.22']
    M22 = $binop_add72.23 + I2               ['$binop_add72.23', 'I2', 'M22']
    $const88.28 = const(int, 2)              ['$const88.28']
    $binop_pow90.29 = Lc2 ** $const88.28     ['$binop_pow90.29', '$const88.28', 'Lc2']
    $binop_mul94.30 = m2 * $binop_pow90.29   ['$binop_mul94.30', '$binop_pow90.29', 'm2']
    M33 = $binop_mul94.30 + I2               ['$binop_mul94.30', 'I2', 'M33']
    $106load_global.33 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$106load_global.33']
    $116load_attr.35 = getattr(value=$106load_global.33, attr=cos) ['$106load_global.33', '$116load_attr.35']
    c1 = call $116load_attr.35(theta1, func=$116load_attr.35, args=[Var(theta1, physics_matrices.py:266)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_attr.35', 'c1', 'theta1']
    $148load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$148load_global.38']
    $158load_attr.40 = getattr(value=$148load_global.38, attr=cos) ['$148load_global.38', '$158load_attr.40']
    c2 = call $158load_attr.40(theta2, func=$158load_attr.40, args=[Var(theta2, physics_matrices.py:266)], kws=(), vararg=None, varkwarg=None, target=None) ['$158load_attr.40', 'c2', 'theta2']
    $const190.43 = const(float, 0.5)         ['$const190.43']
    $binop_mul196.46 = m1 * Lc1              ['$binop_mul196.46', 'Lc1', 'm1']
    $binop_mul204.49 = m2 * L1               ['$binop_mul204.49', 'L1', 'm2']
    $binop_add208.50 = $binop_mul196.46 + $binop_mul204.49 ['$binop_add208.50', '$binop_mul196.46', '$binop_mul204.49']
    $binop_mul212.51 = $const190.43 * $binop_add208.50 ['$binop_add208.50', '$binop_mul212.51', '$const190.43']
    $binop_mul218.53 = $binop_mul212.51 * c1 ['$binop_mul212.51', '$binop_mul218.53', 'c1']
    $const222.54 = const(float, 0.5)         ['$const222.54']
    $binop_mul226.56 = $const222.54 * m2     ['$binop_mul226.56', '$const222.54', 'm2']
    $binop_mul232.58 = $binop_mul226.56 * Lc2 ['$binop_mul226.56', '$binop_mul232.58', 'Lc2']
    $binop_mul238.60 = $binop_mul232.58 * c2 ['$binop_mul232.58', '$binop_mul238.60', 'c2']
    M12 = $binop_mul218.53 + $binop_mul238.60 ['$binop_mul218.53', '$binop_mul238.60', 'M12']
    $const248.62 = const(float, 0.5)         ['$const248.62']
    $binop_mul252.64 = $const248.62 * m2     ['$binop_mul252.64', '$const248.62', 'm2']
    $binop_mul258.66 = $binop_mul252.64 * Lc2 ['$binop_mul252.64', '$binop_mul258.66', 'Lc2']
    M13 = $binop_mul258.66 * c2              ['$binop_mul258.66', 'M13', 'c2']
    $const270.69 = const(float, 0.8)         ['$const270.69']
    $const276.72 = const(int, 2)             ['$const276.72']
    $binop_pow278.73 = Lc2 ** $const276.72   ['$binop_pow278.73', '$const276.72', 'Lc2']
    $binop_mul282.74 = m2 * $binop_pow278.73 ['$binop_mul282.74', '$binop_pow278.73', 'm2']
    $binop_add288.76 = $binop_mul282.74 + I2 ['$binop_add288.76', '$binop_mul282.74', 'I2']
    M23 = $const270.69 * $binop_add288.76    ['$binop_add288.76', '$const270.69', 'M23']
    $298load_global.78 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$298load_global.78']
    $308load_attr.80 = getattr(value=$298load_global.78, attr=array) ['$298load_global.78', '$308load_attr.80']
    $334build_list.84 = build_list(items=[Var(M11, physics_matrices.py:277), Var(M12, physics_matrices.py:285), Var(M13, physics_matrices.py:286)]) ['$334build_list.84', 'M11', 'M12', 'M13']
    $342build_list.88 = build_list(items=[Var(M12, physics_matrices.py:285), Var(M22, physics_matrices.py:278), Var(M23, physics_matrices.py:287)]) ['$342build_list.88', 'M12', 'M22', 'M23']
    $350build_list.92 = build_list(items=[Var(M13, physics_matrices.py:286), Var(M23, physics_matrices.py:287), Var(M33, physics_matrices.py:279)]) ['$350build_list.92', 'M13', 'M23', 'M33']
    $352build_list.93 = build_list(items=[Var($334build_list.84, physics_matrices.py:290), Var($342build_list.88, physics_matrices.py:291), Var($350build_list.92, physics_matrices.py:292)]) ['$334build_list.84', '$342build_list.88', '$350build_list.92', '$352build_list.93']
    M = call $308load_attr.80($352build_list.93, func=$308load_attr.80, args=[Var($352build_list.93, physics_matrices.py:289)], kws=(), vararg=None, varkwarg=None, target=None) ['$308load_attr.80', '$352build_list.93', 'M']
    $366return_value.96 = cast(value=M)      ['$366return_value.96', 'M']
    return $366return_value.96               ['$366return_value.96']

2025-10-06 11:52:56 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:52:56 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B5F3230>
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: theta1 = arg(0, name=theta1)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: theta2 = arg(1, name=theta2)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: m0 = arg(2, name=m0)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: m1 = arg(3, name=m1)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: m2 = arg(4, name=m2)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: L1 = arg(5, name=L1)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: L2 = arg(6, name=L2)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: Lc1 = arg(7, name=Lc1)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: Lc2 = arg(8, name=Lc2)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: I1 = arg(9, name=I1)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: I2 = arg(10, name=I2)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_add8.2 = m0 + m1
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: M11 = $binop_add8.2 + m2
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $const24.7 = const(int, 2)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_pow26.8 = Lc1 ** $const24.7
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul30.9 = m1 * $binop_pow26.8
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $const38.12 = const(int, 2)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_pow40.13 = L1 ** $const38.12
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul44.14 = m2 * $binop_pow40.13
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_add48.15 = $binop_mul30.9 + $binop_mul44.14
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_add54.17 = $binop_add48.15 + I1
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $const62.20 = const(int, 2)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_pow64.21 = Lc2 ** $const62.20
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul68.22 = m2 * $binop_pow64.21
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_add72.23 = $binop_add54.17 + $binop_mul68.22
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: M22 = $binop_add72.23 + I2
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $const88.28 = const(int, 2)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_pow90.29 = Lc2 ** $const88.28
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul94.30 = m2 * $binop_pow90.29
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: M33 = $binop_mul94.30 + I2
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $106load_global.33 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $116load_attr.35 = getattr(value=$106load_global.33, attr=cos)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: c1 = call $116load_attr.35(theta1, func=$116load_attr.35, args=[Var(theta1, physics_matrices.py:266)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $148load_global.38 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $158load_attr.40 = getattr(value=$148load_global.38, attr=cos)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: c2 = call $158load_attr.40(theta2, func=$158load_attr.40, args=[Var(theta2, physics_matrices.py:266)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $const190.43 = const(float, 0.5)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul196.46 = m1 * Lc1
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul204.49 = m2 * L1
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_add208.50 = $binop_mul196.46 + $binop_mul204.49
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul212.51 = $const190.43 * $binop_add208.50
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul218.53 = $binop_mul212.51 * c1
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $const222.54 = const(float, 0.5)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul226.56 = $const222.54 * m2
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul232.58 = $binop_mul226.56 * Lc2
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul238.60 = $binop_mul232.58 * c2
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: M12 = $binop_mul218.53 + $binop_mul238.60
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $const248.62 = const(float, 0.5)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul252.64 = $const248.62 * m2
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul258.66 = $binop_mul252.64 * Lc2
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: M13 = $binop_mul258.66 * c2
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $const270.69 = const(float, 0.8)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $const276.72 = const(int, 2)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_pow278.73 = Lc2 ** $const276.72
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_mul282.74 = m2 * $binop_pow278.73
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $binop_add288.76 = $binop_mul282.74 + I2
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: M23 = $const270.69 * $binop_add288.76
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $298load_global.78 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $308load_attr.80 = getattr(value=$298load_global.78, attr=array)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $334build_list.84 = build_list(items=[Var(M11, physics_matrices.py:277), Var(M12, physics_matrices.py:285), Var(M13, physics_matrices.py:286)])
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $342build_list.88 = build_list(items=[Var(M12, physics_matrices.py:285), Var(M22, physics_matrices.py:278), Var(M23, physics_matrices.py:287)])
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $350build_list.92 = build_list(items=[Var(M13, physics_matrices.py:286), Var(M23, physics_matrices.py:287), Var(M33, physics_matrices.py:279)])
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $352build_list.93 = build_list(items=[Var($334build_list.84, physics_matrices.py:290), Var($342build_list.88, physics_matrices.py:291), Var($350build_list.92, physics_matrices.py:292)])
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: M = call $308load_attr.80($352build_list.93, func=$308load_attr.80, args=[Var($352build_list.93, physics_matrices.py:289)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $366return_value.96 = cast(value=M)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: return $366return_value.96
2025-10-06 11:52:56 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$106load_global.33': [(<numba.core.ir.Assign object at 0x000001253B5E0C20>,
                                     0)],
             '$116load_attr.35': [(<numba.core.ir.Assign object at 0x000001253B5E0D40>,
                                   0)],
             '$148load_global.38': [(<numba.core.ir.Assign object at 0x000001253B5E1190>,
                                     0)],
             '$158load_attr.40': [(<numba.core.ir.Assign object at 0x000001253B5E12B0>,
                                   0)],
             '$298load_global.78': [(<numba.core.ir.Assign object at 0x000001253B5F00E0>,
                                     0)],
             '$308load_attr.80': [(<numba.core.ir.Assign object at 0x000001253B5F0230>,
                                   0)],
             '$334build_list.84': [(<numba.core.ir.Assign object at 0x000001253B5F0650>,
                                    0)],
             '$342build_list.88': [(<numba.core.ir.Assign object at 0x000001253B5F0A70>,
                                    0)],
             '$350build_list.92': [(<numba.core.ir.Assign object at 0x000001253B5F0E90>,
                                    0)],
             '$352build_list.93': [(<numba.core.ir.Assign object at 0x000001253B5F0FE0>,
                                    0)],
             '$366return_value.96': [(<numba.core.ir.Assign object at 0x000001253B5F1490>,
                                      0)],
             '$binop_add208.50': [(<numba.core.ir.Assign object at 0x000001253B5E1E50>,
                                   0)],
             '$binop_add288.76': [(<numba.core.ir.Assign object at 0x000001253B5E3D70>,
                                   0)],
             '$binop_add48.15': [(<numba.core.ir.Assign object at 0x000001253B5B3740>,
                                  0)],
             '$binop_add54.17': [(<numba.core.ir.Assign object at 0x000001253B5B3920>,
                                  0)],
             '$binop_add72.23': [(<numba.core.ir.Assign object at 0x000001253B5B3F80>,
                                  0)],
             '$binop_add8.2': [(<numba.core.ir.Assign object at 0x000001253B5B2C60>,
                                0)],
             '$binop_mul196.46': [(<numba.core.ir.Assign object at 0x000001253B5E1A30>,
                                   0)],
             '$binop_mul204.49': [(<numba.core.ir.Assign object at 0x000001253B5E1D30>,
                                   0)],
             '$binop_mul212.51': [(<numba.core.ir.Assign object at 0x000001253B5E1F70>,
                                   0)],
             '$binop_mul218.53': [(<numba.core.ir.Assign object at 0x000001253B5E2180>,
                                   0)],
             '$binop_mul226.56': [(<numba.core.ir.Assign object at 0x000001253B5E24E0>,
                                   0)],
             '$binop_mul232.58': [(<numba.core.ir.Assign object at 0x000001253B5E2720>,
                                   0)],
             '$binop_mul238.60': [(<numba.core.ir.Assign object at 0x000001253B5E2960>,
                                   0)],
             '$binop_mul252.64': [(<numba.core.ir.Assign object at 0x000001253B5E2F00>,
                                   0)],
             '$binop_mul258.66': [(<numba.core.ir.Assign object at 0x000001253B5E3140>,
                                   0)],
             '$binop_mul282.74': [(<numba.core.ir.Assign object at 0x000001253B5E3B30>,
                                   0)],
             '$binop_mul30.9': [(<numba.core.ir.Assign object at 0x000001253B5B31D0>,
                                 0)],
             '$binop_mul44.14': [(<numba.core.ir.Assign object at 0x000001253B5B3620>,
                                  0)],
             '$binop_mul68.22': [(<numba.core.ir.Assign object at 0x000001253B5B3E60>,
                                  0)],
             '$binop_mul94.30': [(<numba.core.ir.Assign object at 0x000001253B5E0800>,
                                  0)],
             '$binop_pow26.8': [(<numba.core.ir.Assign object at 0x000001253B5B3110>,
                                 0)],
             '$binop_pow278.73': [(<numba.core.ir.Assign object at 0x000001253B5E39E0>,
                                   0)],
             '$binop_pow40.13': [(<numba.core.ir.Assign object at 0x000001253B5B3500>,
                                  0)],
             '$binop_pow64.21': [(<numba.core.ir.Assign object at 0x000001253B5B3D40>,
                                  0)],
             '$binop_pow90.29': [(<numba.core.ir.Assign object at 0x000001253B5E06E0>,
                                  0)],
             '$const190.43': [(<numba.core.ir.Assign object at 0x000001253B5E1700>,
                               0)],
             '$const222.54': [(<numba.core.ir.Assign object at 0x000001253B5E2270>,
                               0)],
             '$const24.7': [(<numba.core.ir.Assign object at 0x000001253B5B3020>,
                             0)],
             '$const248.62': [(<numba.core.ir.Assign object at 0x000001253B5E2C90>,
                               0)],
             '$const270.69': [(<numba.core.ir.Assign object at 0x000001253B5E3560>,
                               0)],
             '$const276.72': [(<numba.core.ir.Assign object at 0x000001253B5E3860>,
                               0)],
             '$const38.12': [(<numba.core.ir.Assign object at 0x000001253B5B33B0>,
                              0)],
             '$const62.20': [(<numba.core.ir.Assign object at 0x000001253B5B3BF0>,
                              0)],
             '$const88.28': [(<numba.core.ir.Assign object at 0x000001253B5E0590>,
                              0)],
             'I1': [(<numba.core.ir.Assign object at 0x000001253B5B2900>, 0)],
             'I2': [(<numba.core.ir.Assign object at 0x000001253B5B2990>, 0)],
             'L1': [(<numba.core.ir.Assign object at 0x000001253B5B26C0>, 0)],
             'L2': [(<numba.core.ir.Assign object at 0x000001253B5B2750>, 0)],
             'Lc1': [(<numba.core.ir.Assign object at 0x000001253B5B27E0>, 0)],
             'Lc2': [(<numba.core.ir.Assign object at 0x000001253B5B2870>, 0)],
             'M': [(<numba.core.ir.Assign object at 0x000001253B5F1190>, 0)],
             'M11': [(<numba.core.ir.Assign object at 0x000001253B5B2DB0>, 0)],
             'M12': [(<numba.core.ir.Assign object at 0x000001253B5E2AB0>, 0)],
             'M13': [(<numba.core.ir.Assign object at 0x000001253B5E3380>, 0)],
             'M22': [(<numba.core.ir.Assign object at 0x000001253B5E01D0>, 0)],
             'M23': [(<numba.core.ir.Assign object at 0x000001253B5E3EC0>, 0)],
             'M33': [(<numba.core.ir.Assign object at 0x000001253B5E0A10>, 0)],
             'c1': [(<numba.core.ir.Assign object at 0x000001253B5E0FB0>, 0)],
             'c2': [(<numba.core.ir.Assign object at 0x000001253B5E1520>, 0)],
             'm0': [(<numba.core.ir.Assign object at 0x000001253B5B2510>, 0)],
             'm1': [(<numba.core.ir.Assign object at 0x000001253B5B25A0>, 0)],
             'm2': [(<numba.core.ir.Assign object at 0x000001253B5B2630>, 0)],
             'theta1': [(<numba.core.ir.Assign object at 0x000001253B5B23F0>,
                         0)],
             'theta2': [(<numba.core.ir.Assign object at 0x000001253B5B2480>,
                         0)]})
2025-10-06 11:52:56 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253B630CE0>
2025-10-06 11:52:56 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=5431)
           2	RESUME(arg=0, lineno=5431)
           4	LOAD_GLOBAL(arg=1, lineno=5432)
          14	LOAD_FAST(arg=0, lineno=5432)
          16	LOAD_FAST(arg=1, lineno=5432)
          18	CALL(arg=2, lineno=5432)
          26	RETURN_VALUE(arg=None, lineno=5432)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=5431)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=5431)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=5432)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=5432)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=5432)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0', '$object14.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=18, inst=CALL(arg=2, lineno=5432)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0', '$object14.2', '$dtype16.3']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=5432)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$18call.4']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:52:56 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:52:56 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:52:56 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:52:56 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$object14.2'}), (16, {'res': '$dtype16.3'}), (18, {'func': '$4load_global.0', 'args': ['$object14.2', '$dtype16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:56 [   DEBUG] interpreter.py:1416 - label 0:
    object = arg(0, name=object)             ['object']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np_array: <intrinsic np_array>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(object, dtype, func=$4load_global.0, args=[Var(object, arrayobj.py:5431), Var(dtype, arrayobj.py:5431)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'dtype', 'object']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-10-06 11:52:56 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:52:56 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B633560>
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: object = arg(0, name=object)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: dtype = arg(1, name=dtype)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $4load_global.0 = global(np_array: <intrinsic np_array>)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $18call.4 = call $4load_global.0(object, dtype, func=$4load_global.0, args=[Var(object, arrayobj.py:5431), Var(dtype, arrayobj.py:5431)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: return $26return_value.5
2025-10-06 11:52:56 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001253B67DE20>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001253B67DBE0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001253B67D550>,
                                  0)],
             'dtype': [(<numba.core.ir.Assign object at 0x000001253B67D790>,
                        0)],
             'object': [(<numba.core.ir.Assign object at 0x000001253B67D880>,
                         0)]})
2025-10-06 11:52:56 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253B67E600>
2025-10-06 11:52:56 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=4253)
           2	RESUME(arg=0, lineno=4253)
           4	LOAD_FAST(arg=0, lineno=4256)
           6	LOAD_ATTR(arg=1, lineno=4256)
          26	LOAD_FAST(arg=1, lineno=4256)
          28	LOAD_FAST(arg=2, lineno=4256)
          30	CALL(arg=2, lineno=4256)
          38	RETURN_VALUE(arg=None, lineno=4256)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=4253)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=4253)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4256)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=4256)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$arrtype4.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=4256)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$6.1', '$6load_attr.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=4256)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$6.1', '$6load_attr.2', '$size26.3']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=30, inst=CALL(arg=2, lineno=4256)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$6.1', '$6load_attr.2', '$size26.3', '$align28.4']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4256)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$30call.5']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:52:56 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:52:56 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:52:56 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:52:56 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$arrtype4.0'}), (6, {'item': '$arrtype4.0', 'res': '$6load_attr.2'}), (26, {'res': '$size26.3'}), (28, {'res': '$align28.4'}), (30, {'func': '$6load_attr.2', 'args': ['$size26.3', '$align28.4'], 'kw_names': None, 'res': '$30call.5'}), (38, {'retval': '$30call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:56 [   DEBUG] interpreter.py:1416 - label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $6load_attr.2 = getattr(value=arrtype, attr=_allocate) ['$6load_attr.2', 'arrtype']
    $30call.5 = call $6load_attr.2(size, align, func=$6load_attr.2, args=[Var(size, arrayobj.py:4253), Var(align, arrayobj.py:4253)], kws=(), vararg=None, varkwarg=None, target=None) ['$30call.5', '$6load_attr.2', 'align', 'size']
    $38return_value.6 = cast(value=$30call.5) ['$30call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2025-10-06 11:52:56 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:52:56 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B7168A0>
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: arrtype = arg(0, name=arrtype)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: size = arg(1, name=size)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: align = arg(2, name=align)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $6load_attr.2 = getattr(value=arrtype, attr=_allocate)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $30call.5 = call $6load_attr.2(size, align, func=$6load_attr.2, args=[Var(size, arrayobj.py:4253), Var(align, arrayobj.py:4253)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $38return_value.6 = cast(value=$30call.5)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: return $38return_value.6
2025-10-06 11:52:56 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$30call.5': [(<numba.core.ir.Assign object at 0x000001253B714E90>,
                            0)],
             '$38return_value.6': [(<numba.core.ir.Assign object at 0x000001253B714FB0>,
                                    0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001253B714B00>,
                                0)],
             'align': [(<numba.core.ir.Assign object at 0x000001253B714890>,
                        0)],
             'arrtype': [(<numba.core.ir.Assign object at 0x000001253B714080>,
                          0)],
             'size': [(<numba.core.ir.Assign object at 0x000001253B7147A0>,
                       0)]})
2025-10-06 11:52:56 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253B716270>
2025-10-06 11:52:56 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=4248)
           2	RESUME(arg=0, lineno=4248)
           4	LOAD_GLOBAL(arg=1, lineno=4249)
          14	LOAD_FAST(arg=1, lineno=4249)
          16	LOAD_FAST(arg=2, lineno=4249)
          18	CALL(arg=2, lineno=4249)
          26	RETURN_VALUE(arg=None, lineno=4249)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=4248)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=4248)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4249)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=4249)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=4249)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0', '$allocsize14.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=18, inst=CALL(arg=2, lineno=4249)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0', '$allocsize14.2', '$align16.3']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=4249)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$18call.4']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:52:56 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:52:56 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:52:56 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:52:56 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:52:56 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$allocsize14.2'}), (16, {'res': '$align16.3'}), (18, {'func': '$4load_global.0', 'args': ['$allocsize14.2', '$align16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:56 [   DEBUG] interpreter.py:1416 - label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $4load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(allocsize, align, func=$4load_global.0, args=[Var(allocsize, arrayobj.py:4248), Var(align, arrayobj.py:4248)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'align', 'allocsize']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-10-06 11:52:56 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:52:56 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B715850>
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: cls = arg(0, name=cls)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: allocsize = arg(1, name=allocsize)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: align = arg(2, name=align)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $4load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $18call.4 = call $4load_global.0(allocsize, align, func=$4load_global.0, args=[Var(allocsize, arrayobj.py:4248), Var(align, arrayobj.py:4248)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-10-06 11:52:56 [   DEBUG] ssa.py:210 - on stmt: return $26return_value.5
2025-10-06 11:52:56 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001253B7C87A0>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001253B7C88C0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001253B715490>,
                                  0)],
             'align': [(<numba.core.ir.Assign object at 0x000001253B715610>,
                        0)],
             'allocsize': [(<numba.core.ir.Assign object at 0x000001253B715460>,
                            0)],
             'cls': [(<numba.core.ir.Assign object at 0x000001253B714CE0>, 0)]})
2025-10-06 11:52:56 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253B7C8B90>
2025-10-06 11:52:56 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	COPY_FREE_VARS(arg=3, lineno=214)
           4	RESUME(arg=0, lineno=214)
           6	PUSH_NULL(arg=None, lineno=216)
           8	LOAD_DEREF(arg=6, lineno=216)
          10	LOAD_CONST(arg=1, lineno=216)
          12	CALL(arg=1, lineno=216)
          20	STORE_FAST(arg=2, lineno=216)
          22	PUSH_NULL(arg=None, lineno=217)
          24	LOAD_DEREF(arg=6, lineno=217)
          26	LOAD_FAST(arg=0, lineno=217)
          28	CALL(arg=1, lineno=217)
          36	STORE_FAST(arg=0, lineno=217)
          38	LOAD_FAST(arg=1, lineno=218)
          40	LOAD_CONST(arg=2, lineno=218)
          42	COMPARE_OP(arg=2, lineno=218)
          46	POP_JUMP_IF_FALSE(arg=49, lineno=218)
          48	LOAD_CONST(arg=3, lineno=219)
          50	STORE_FAST(arg=3, lineno=219)
          52	LOAD_FAST(arg=1, lineno=220)
          54	UNARY_NEGATIVE(arg=None, lineno=220)
          56	STORE_FAST(arg=4, lineno=220)
          58	LOAD_FAST(arg=4, lineno=221)
          60	LOAD_CONST(arg=2, lineno=221)
          62	COMPARE_OP(arg=2, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=6, lineno=221)
          68	LOAD_GLOBAL(arg=0, lineno=222)
          78	RAISE_VARARGS(arg=1, lineno=222)
>         80	LOAD_DEREF(arg=5, lineno=223)
          82	POP_JUMP_IF_FALSE(arg=35, lineno=223)
          84	LOAD_FAST(arg=0, lineno=224)
          86	LOAD_CONST(arg=2, lineno=224)
          88	COMPARE_OP(arg=40, lineno=224)
          92	POP_JUMP_IF_FALSE(arg=15, lineno=224)
          94	LOAD_DEREF(arg=7, lineno=225)
          96	POP_JUMP_IF_FALSE(arg=2, lineno=225)
          98	LOAD_DEREF(arg=7, lineno=226)
         100	RETURN_VALUE(arg=None, lineno=226)
>        102	LOAD_GLOBAL(arg=3, lineno=228)
         112	LOAD_CONST(arg=4, lineno=228)
         114	CALL(arg=1, lineno=228)
         122	RAISE_VARARGS(arg=1, lineno=228)
>        124	LOAD_FAST(arg=0, lineno=229)
         126	LOAD_CONST(arg=1, lineno=229)
         128	COMPARE_OP(arg=55, lineno=229)
         132	POP_JUMP_IF_FALSE(arg=10, lineno=229)
         134	LOAD_FAST(arg=0, lineno=229)
         136	LOAD_CONST(arg=5, lineno=229)
         138	COMPARE_OP(arg=55, lineno=229)
         142	POP_JUMP_IF_FALSE(arg=5, lineno=229)
         144	RETURN_CONST(arg=2, lineno=230)
>        146	LOAD_CONST(arg=6, lineno=232)
         148	STORE_FAST(arg=3, lineno=232)
         150	LOAD_FAST(arg=1, lineno=233)
         152	STORE_FAST(arg=4, lineno=233)
>        154	LOAD_FAST(arg=4, lineno=234)
         156	LOAD_CONST(arg=7, lineno=234)
         158	COMPARE_OP(arg=68, lineno=234)
         162	POP_JUMP_IF_FALSE(arg=31, lineno=234)
         164	LOAD_GLOBAL(arg=5, lineno=236)
         174	LOAD_ATTR(arg=6, lineno=236)
         194	LOAD_FAST(arg=0, lineno=236)
         196	LOAD_GLOBAL(arg=9, lineno=236)
         206	LOAD_FAST(arg=1, lineno=236)
         208	CALL(arg=1, lineno=236)
         216	CALL(arg=2, lineno=236)
         224	RETURN_VALUE(arg=None, lineno=236)
>        226	LOAD_FAST(arg=4, lineno=237)
         228	LOAD_CONST(arg=2, lineno=237)
         230	COMPARE_OP(arg=55, lineno=237)
         234	POP_JUMP_IF_FALSE(arg=26, lineno=237)
>        236	LOAD_FAST(arg=4, lineno=238)
         238	LOAD_CONST(arg=1, lineno=238)
         240	BINARY_OP(arg=1, lineno=238)
         244	POP_JUMP_IF_FALSE(arg=5, lineno=238)
         246	LOAD_FAST(arg=2, lineno=239)
         248	LOAD_FAST(arg=0, lineno=239)
         250	BINARY_OP(arg=18, lineno=239)
         254	STORE_FAST(arg=2, lineno=239)
>        256	LOAD_FAST(arg=4, lineno=240)
         258	LOAD_CONST(arg=1, lineno=240)
         260	BINARY_OP(arg=22, lineno=240)
         264	STORE_FAST(arg=4, lineno=240)
         266	LOAD_FAST(arg=0, lineno=241)
         268	LOAD_FAST(arg=0, lineno=241)
         270	BINARY_OP(arg=18, lineno=241)
         274	STORE_FAST(arg=0, lineno=241)
         276	LOAD_FAST(arg=4, lineno=237)
         278	LOAD_CONST(arg=2, lineno=237)
         280	COMPARE_OP(arg=55, lineno=237)
         284	POP_JUMP_IF_FALSE(arg=1, lineno=237)
         286	JUMP_BACKWARD(arg=26, lineno=237)
>        288	LOAD_FAST(arg=3, lineno=243)
         290	POP_JUMP_IF_FALSE(arg=5, lineno=243)
         292	LOAD_CONST(arg=8, lineno=243)
         294	LOAD_FAST(arg=2, lineno=243)
         296	BINARY_OP(arg=11, lineno=243)
         300	RETURN_VALUE(arg=None, lineno=243)
>        302	LOAD_FAST(arg=2, lineno=243)
         304	RETURN_VALUE(arg=None, lineno=243)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=214)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=COPY_FREE_VARS(arg=3, lineno=214)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=RESUME(arg=0, lineno=214)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=6, inst=PUSH_NULL(arg=None, lineno=216)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=8, inst=LOAD_DEREF(arg=6, lineno=216)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$6.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=216)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$6.0', '$8load_deref.1']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=12, inst=CALL(arg=1, lineno=216)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$6.0', '$8load_deref.1', '$const10.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=20, inst=STORE_FAST(arg=2, lineno=216)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$12call.3']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=22, inst=PUSH_NULL(arg=None, lineno=217)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=24, inst=LOAD_DEREF(arg=6, lineno=217)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$22.4']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=217)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$22.4', '$24load_deref.5']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=28, inst=CALL(arg=1, lineno=217)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$22.4', '$24load_deref.5', '$a26.6']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=36, inst=STORE_FAST(arg=0, lineno=217)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$28call.7']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=218)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=218)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$b38.8']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=42, inst=COMPARE_OP(arg=2, lineno=218)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$b38.8', '$const40.9']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=46, inst=POP_JUMP_IF_FALSE(arg=49, lineno=218)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$42compare_op.10']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0), Edge(pc=146, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=48 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=219)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=50, inst=STORE_FAST(arg=3, lineno=219)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$const48.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=220)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=54, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$b52.1']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=56, inst=STORE_FAST(arg=4, lineno=220)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$54unary_negative.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=221)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=60, inst=LOAD_CONST(arg=2, lineno=221)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp58.3']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=62, inst=COMPARE_OP(arg=2, lineno=221)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp58.3', '$const60.4']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=6, lineno=221)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$62compare_op.5']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=80, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=80 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=146 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=146, inst=LOAD_CONST(arg=6, lineno=232)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=148, inst=STORE_FAST(arg=3, lineno=232)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$const146.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=150, inst=LOAD_FAST(arg=1, lineno=233)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=152, inst=STORE_FAST(arg=4, lineno=233)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$b150.1']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=68, inst=LOAD_GLOBAL(arg=0, lineno=222)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=78, inst=RAISE_VARARGS(arg=1, lineno=222)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$68load_global.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=80 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=80, inst=LOAD_DEREF(arg=5, lineno=223)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=35, lineno=223)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$80load_deref.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=154 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=234)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=156, inst=LOAD_CONST(arg=7, lineno=234)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp154.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=158, inst=COMPARE_OP(arg=68, lineno=234)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp154.0', '$const156.1']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=162, inst=POP_JUMP_IF_FALSE(arg=31, lineno=234)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$158compare_op.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=164, stack=(), blockstack=(), npush=0), Edge(pc=226, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=226 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=84 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=224)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=86, inst=LOAD_CONST(arg=2, lineno=224)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$a84.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=88, inst=COMPARE_OP(arg=40, lineno=224)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$a84.0', '$const86.1']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=15, lineno=224)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$88compare_op.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=124, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=226 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=164 nstack_initial=0), State(pc_initial=226 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=164 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=164, inst=LOAD_GLOBAL(arg=5, lineno=236)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=174, inst=LOAD_ATTR(arg=6, lineno=236)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$164.1', '$164load_global.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=194, inst=LOAD_FAST(arg=0, lineno=236)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$164.1', '$174load_attr.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=196, inst=LOAD_GLOBAL(arg=9, lineno=236)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$164.1', '$174load_attr.2', '$a194.3']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=206, inst=LOAD_FAST(arg=1, lineno=236)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$164.1', '$174load_attr.2', '$a194.3', '$null$196.5', '$196load_global.4']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=208, inst=CALL(arg=1, lineno=236)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$164.1', '$174load_attr.2', '$a194.3', '$null$196.5', '$196load_global.4', '$b206.6']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=216, inst=CALL(arg=2, lineno=236)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$164.1', '$174load_attr.2', '$a194.3', '$208call.7']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=224, inst=RETURN_VALUE(arg=None, lineno=236)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$216call.8']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=226 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=226 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=226, inst=LOAD_FAST(arg=4, lineno=237)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=228, inst=LOAD_CONST(arg=2, lineno=237)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp226.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=230, inst=COMPARE_OP(arg=55, lineno=237)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp226.0', '$const228.1']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=234, inst=POP_JUMP_IF_FALSE(arg=26, lineno=237)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$230compare_op.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=236, stack=(), blockstack=(), npush=0), Edge(pc=288, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=236 nstack_initial=0), State(pc_initial=288 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=94 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=94, inst=LOAD_DEREF(arg=7, lineno=225)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=2, lineno=225)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$94load_deref.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=98, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=236 nstack_initial=0), State(pc_initial=288 nstack_initial=0), State(pc_initial=98 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=124 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=229)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=229)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$a124.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=128, inst=COMPARE_OP(arg=55, lineno=229)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$a124.0', '$const126.1']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=132, inst=POP_JUMP_IF_FALSE(arg=10, lineno=229)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$128compare_op.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=236 nstack_initial=0), State(pc_initial=288 nstack_initial=0), State(pc_initial=98 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=236 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=236, inst=LOAD_FAST(arg=4, lineno=238)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=238, inst=LOAD_CONST(arg=1, lineno=238)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp236.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=240, inst=BINARY_OP(arg=1, lineno=238)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp236.0', '$const238.1']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=244, inst=POP_JUMP_IF_FALSE(arg=5, lineno=238)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$binop_and_240.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=246, stack=(), blockstack=(), npush=0), Edge(pc=256, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=288 nstack_initial=0), State(pc_initial=98 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=256 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=288 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=288, inst=LOAD_FAST(arg=3, lineno=243)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=290, inst=POP_JUMP_IF_FALSE(arg=5, lineno=243)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$invert288.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=98 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=98, inst=LOAD_DEREF(arg=7, lineno=226)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=226)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$98load_deref.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=102, inst=LOAD_GLOBAL(arg=3, lineno=228)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=228)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$102.1', '$102load_global.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=114, inst=CALL(arg=1, lineno=228)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$null$102.1', '$102load_global.0', '$const112.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=122, inst=RAISE_VARARGS(arg=1, lineno=228)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$114call.3']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=134 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=134, inst=LOAD_FAST(arg=0, lineno=229)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=136, inst=LOAD_CONST(arg=5, lineno=229)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$a134.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=138, inst=COMPARE_OP(arg=55, lineno=229)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$a134.0', '$const136.1']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=142, inst=POP_JUMP_IF_FALSE(arg=5, lineno=229)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$138compare_op.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=144, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=246 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=246 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=246, inst=LOAD_FAST(arg=2, lineno=239)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=248, inst=LOAD_FAST(arg=0, lineno=239)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$r246.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=250, inst=BINARY_OP(arg=18, lineno=239)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$r246.0', '$a248.1']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=254, inst=STORE_FAST(arg=2, lineno=239)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$binop_imul250.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=256, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:56 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=256 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=256 nstack_initial=0)])
2025-10-06 11:52:56 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=256 nstack_initial=0)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=256, inst=LOAD_FAST(arg=4, lineno=240)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=258, inst=LOAD_CONST(arg=1, lineno=240)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp256.0']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=260, inst=BINARY_OP(arg=22, lineno=240)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp256.0', '$const258.1']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=264, inst=STORE_FAST(arg=4, lineno=240)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$binop_irshift260.2']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=266, inst=LOAD_FAST(arg=0, lineno=241)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=268, inst=LOAD_FAST(arg=0, lineno=241)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$a266.3']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=270, inst=BINARY_OP(arg=18, lineno=241)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$a266.3', '$a268.4']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=274, inst=STORE_FAST(arg=0, lineno=241)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$binop_imul270.5']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=276, inst=LOAD_FAST(arg=4, lineno=237)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=278, inst=LOAD_CONST(arg=2, lineno=237)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp276.6']
2025-10-06 11:52:56 [   DEBUG] byteflow.py:350 - dispatch pc=280, inst=COMPARE_OP(arg=55, lineno=237)
2025-10-06 11:52:56 [   DEBUG] byteflow.py:351 - stack ['$exp276.6', '$const278.7']
2025-10-06 11:52:57 [   DEBUG] byteflow.py:350 - dispatch pc=284, inst=POP_JUMP_IF_FALSE(arg=1, lineno=237)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:351 - stack ['$280compare_op.8']
2025-10-06 11:52:57 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=286, stack=(), blockstack=(), npush=0), Edge(pc=288, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:57 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=286 nstack_initial=0), State(pc_initial=288 nstack_initial=0)])
2025-10-06 11:52:57 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:57 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=292 nstack_initial=0)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:350 - dispatch pc=292, inst=LOAD_CONST(arg=8, lineno=243)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:57 [   DEBUG] byteflow.py:350 - dispatch pc=294, inst=LOAD_FAST(arg=2, lineno=243)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:351 - stack ['$const292.0']
2025-10-06 11:52:57 [   DEBUG] byteflow.py:350 - dispatch pc=296, inst=BINARY_OP(arg=11, lineno=243)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:351 - stack ['$const292.0', '$r294.1']
2025-10-06 11:52:57 [   DEBUG] byteflow.py:350 - dispatch pc=300, inst=RETURN_VALUE(arg=None, lineno=243)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:351 - stack ['$binop_truediv296.2']
2025-10-06 11:52:57 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:57 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=286 nstack_initial=0), State(pc_initial=288 nstack_initial=0)])
2025-10-06 11:52:57 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:57 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=302 nstack_initial=0)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:350 - dispatch pc=302, inst=LOAD_FAST(arg=2, lineno=243)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:57 [   DEBUG] byteflow.py:350 - dispatch pc=304, inst=RETURN_VALUE(arg=None, lineno=243)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:351 - stack ['$r302.0']
2025-10-06 11:52:57 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:57 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=144 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=286 nstack_initial=0), State(pc_initial=288 nstack_initial=0)])
2025-10-06 11:52:57 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:57 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=144 nstack_initial=0)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:350 - dispatch pc=144, inst=RETURN_CONST(arg=2, lineno=230)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:57 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:57 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=286 nstack_initial=0), State(pc_initial=288 nstack_initial=0)])
2025-10-06 11:52:57 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=256 nstack_initial=0), State(pc_initial=286 nstack_initial=0), State(pc_initial=288 nstack_initial=0)])
2025-10-06 11:52:57 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=286 nstack_initial=0), State(pc_initial=288 nstack_initial=0)])
2025-10-06 11:52:57 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:57 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=286 nstack_initial=0)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:350 - dispatch pc=286, inst=JUMP_BACKWARD(arg=26, lineno=237)
2025-10-06 11:52:57 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:57 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=236, stack=(), blockstack=(), npush=0)]
2025-10-06 11:52:57 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=288 nstack_initial=0), State(pc_initial=236 nstack_initial=0)])
2025-10-06 11:52:57 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=236 nstack_initial=0)])
2025-10-06 11:52:57 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:52:57 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=144 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=164 nstack_initial=0): set(),
             State(pc_initial=226 nstack_initial=0): set(),
             State(pc_initial=236 nstack_initial=0): set(),
             State(pc_initial=246 nstack_initial=0): set(),
             State(pc_initial=256 nstack_initial=0): set(),
             State(pc_initial=286 nstack_initial=0): set(),
             State(pc_initial=288 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:52:57 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:52:57 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {}), (8, {'res': '$8load_deref.1'}), (10, {'res': '$const10.2'}), (12, {'func': '$8load_deref.1', 'args': ['$const10.2'], 'kw_names': None, 'res': '$12call.3'}), (20, {'value': '$12call.3'}), (22, {}), (24, {'res': '$24load_deref.5'}), (26, {'res': '$a26.6'}), (28, {'func': '$24load_deref.5', 'args': ['$a26.6'], 'kw_names': None, 'res': '$28call.7'}), (36, {'value': '$28call.7'}), (38, {'res': '$b38.8'}), (40, {'res': '$const40.9'}), (42, {'lhs': '$b38.8', 'rhs': '$const40.9', 'res': '$42compare_op.10'}), (46, {'pred': '$42compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: (), 146: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$const48.0'}), (50, {'value': '$const48.0'}), (52, {'res': '$b52.1'}), (54, {'value': '$b52.1', 'res': '$54unary_negative.2'}), (56, {'value': '$54unary_negative.2'}), (58, {'res': '$exp58.3'}), (60, {'res': '$const60.4'}), (62, {'lhs': '$exp58.3', 'rhs': '$const60.4', 'res': '$62compare_op.5'}), (66, {'pred': '$62compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 80: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'idx': 0, 'res': '$68load_global.0'}), (78, {'exc': '$68load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$80load_deref.0'}), (82, {'pred': '$80load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 154: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (92, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 124: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$94load_deref.0'}), (96, {'pred': '$94load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: (), 102: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$98load_deref.0'}), (100, {'retval': '$98load_deref.0', 'castval': '$100return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'idx': 1, 'res': '$102load_global.0'}), (112, {'res': '$const112.2'}), (114, {'func': '$102load_global.0', 'args': ['$const112.2'], 'kw_names': None, 'res': '$114call.3'}), (122, {'exc': '$114call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$a124.0'}), (126, {'res': '$const126.1'}), (128, {'lhs': '$a124.0', 'rhs': '$const126.1', 'res': '$128compare_op.2'}), (132, {'pred': '$128compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: (), 154: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$a134.0'}), (136, {'res': '$const136.1'}), (138, {'lhs': '$a134.0', 'rhs': '$const136.1', 'res': '$138compare_op.2'}), (142, {'pred': '$138compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={144: (), 154: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=144 nstack_initial=0):
AdaptBlockInfo(insts=((144, {'retval': '$const144.0', 'castval': '$144return_const.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$const146.0'}), (148, {'value': '$const146.0'}), (150, {'res': '$b150.1'}), (152, {'value': '$b150.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158compare_op.2'}), (162, {'pred': '$158compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={164: (), 226: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=164 nstack_initial=0):
AdaptBlockInfo(insts=((164, {'idx': 2, 'res': '$164load_global.0'}), (174, {'item': '$164load_global.0', 'res': '$174load_attr.2'}), (194, {'res': '$a194.3'}), (196, {'idx': 4, 'res': '$196load_global.4'}), (206, {'res': '$b206.6'}), (208, {'func': '$196load_global.4', 'args': ['$b206.6'], 'kw_names': None, 'res': '$208call.7'}), (216, {'func': '$174load_attr.2', 'args': ['$a194.3', '$208call.7'], 'kw_names': None, 'res': '$216call.8'}), (224, {'retval': '$216call.8', 'castval': '$224return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=226 nstack_initial=0):
AdaptBlockInfo(insts=((226, {'res': '$exp226.0'}), (228, {'res': '$const228.1'}), (230, {'lhs': '$exp226.0', 'rhs': '$const228.1', 'res': '$230compare_op.2'}), (234, {'pred': '$230compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={236: (), 288: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=236 nstack_initial=0):
AdaptBlockInfo(insts=((236, {'res': '$exp236.0'}), (238, {'res': '$const238.1'}), (240, {'op': '&', 'lhs': '$exp236.0', 'rhs': '$const238.1', 'res': '$binop_and_240.2'}), (244, {'pred': '$binop_and_240.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={246: (), 256: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=246 nstack_initial=0):
AdaptBlockInfo(insts=((246, {'res': '$r246.0'}), (248, {'res': '$a248.1'}), (250, {'op': '*=', 'lhs': '$r246.0', 'rhs': '$a248.1', 'res': '$binop_imul250.2'}), (254, {'value': '$binop_imul250.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={256: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=256 nstack_initial=0):
AdaptBlockInfo(insts=((256, {'res': '$exp256.0'}), (258, {'res': '$const258.1'}), (260, {'op': '>>=', 'lhs': '$exp256.0', 'rhs': '$const258.1', 'res': '$binop_irshift260.2'}), (264, {'value': '$binop_irshift260.2'}), (266, {'res': '$a266.3'}), (268, {'res': '$a268.4'}), (270, {'op': '*=', 'lhs': '$a266.3', 'rhs': '$a268.4', 'res': '$binop_imul270.5'}), (274, {'value': '$binop_imul270.5'}), (276, {'res': '$exp276.6'}), (278, {'res': '$const278.7'}), (280, {'lhs': '$exp276.6', 'rhs': '$const278.7', 'res': '$280compare_op.8'}), (284, {'pred': '$280compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={286: (), 288: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=286 nstack_initial=0):
AdaptBlockInfo(insts=((286, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={236: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=288 nstack_initial=0):
AdaptBlockInfo(insts=((288, {'res': '$invert288.0'}), (290, {'pred': '$invert288.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$const292.0'}), (294, {'res': '$r294.1'}), (296, {'op': '/', 'lhs': '$const292.0', 'rhs': '$r294.1', 'res': '$binop_truediv296.2'}), (300, {'retval': '$binop_truediv296.2', 'castval': '$300return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:57 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$r302.0'}), (304, {'retval': '$r302.0', 'castval': '$304return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:57 [   DEBUG] interpreter.py:1416 - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $8load_deref.1 = freevar(tp: float64)    ['$8load_deref.1']
    $const10.2 = const(int, 1)               ['$const10.2']
    r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$8load_deref.1', '$const10.2', 'r']
    $24load_deref.5 = freevar(tp: float64)   ['$24load_deref.5']
    a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_deref.5', 'a', 'a.1']
    $const40.9 = const(int, 0)               ['$const40.9']
    $42compare_op.10 = b < $const40.9        ['$42compare_op.10', '$const40.9', 'b']
    bool46 = global(bool: <class 'bool'>)    ['bool46']
    $46pred = call bool46($42compare_op.10, func=bool46, args=(Var($42compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$42compare_op.10', '$46pred', 'bool46']
    branch $46pred, 48, 146                  ['$46pred']
label 48:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const60.4 = const(int, 0)               ['$const60.4']
    $62compare_op.5 = exp < $const60.4       ['$62compare_op.5', '$const60.4', 'exp']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($62compare_op.5, func=bool66, args=(Var($62compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$62compare_op.5', '$66pred', 'bool66']
    branch $66pred, 68, 80                   ['$66pred']
label 68:
    $68load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$68load_global.0']
    raise $68load_global.0                   ['$68load_global.0']
label 80:
    $80load_deref.0 = freevar(is_integer: False) ['$80load_deref.0']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80load_deref.0, func=bool82, args=(Var($80load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$80load_deref.0', '$82pred', 'bool82']
    branch $82pred, 84, 154                  ['$82pred']
label 84:
    $const86.1 = const(int, 0)               ['$const86.1']
    $88compare_op.2 = a.1 == $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($88compare_op.2, func=bool92, args=(Var($88compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 124                  ['$92pred']
label 94:
    $94load_deref.0 = freevar(zerodiv_return: False) ['$94load_deref.0']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94load_deref.0, func=bool96, args=(Var($94load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$94load_deref.0', '$96pred', 'bool96']
    branch $96pred, 98, 102                  ['$96pred']
label 98:
    $98load_deref.0 = freevar(zerodiv_return: False) ['$98load_deref.0']
    $100return_value.1 = cast(value=$98load_deref.0) ['$100return_value.1', '$98load_deref.0']
    return $100return_value.1                ['$100return_value.1']
label 102:
    $102load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$102load_global.0']
    $const112.2 = const(str, 0 cannot be raised to a negative power) ['$const112.2']
    $114call.3 = call $102load_global.0($const112.2, func=$102load_global.0, args=[Var($const112.2, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$102load_global.0', '$114call.3', '$const112.2']
    raise $114call.3                         ['$114call.3']
label 124:
    $const126.1 = const(int, 1)              ['$const126.1']
    $128compare_op.2 = a.1 != $const126.1    ['$128compare_op.2', '$const126.1', 'a.1']
    bool132 = global(bool: <class 'bool'>)   ['bool132']
    $132pred = call bool132($128compare_op.2, func=bool132, args=(Var($128compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$128compare_op.2', '$132pred', 'bool132']
    branch $132pred, 134, 154                ['$132pred']
label 134:
    $const136.1 = const(int, -1)             ['$const136.1']
    $138compare_op.2 = a.1 != $const136.1    ['$138compare_op.2', '$const136.1', 'a.1']
    bool142 = global(bool: <class 'bool'>)   ['bool142']
    $142pred = call bool142($138compare_op.2, func=bool142, args=(Var($138compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$138compare_op.2', '$142pred', 'bool142']
    branch $142pred, 144, 154                ['$142pred']
label 144:
    $const144.0 = const(int, 0)              ['$const144.0']
    $144return_const.1 = cast(value=$const144.0) ['$144return_const.1', '$const144.0']
    return $144return_const.1                ['$144return_const.1']
label 146:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 65536)          ['$const156.1']
    $158compare_op.2 = exp > $const156.1     ['$158compare_op.2', '$const156.1', 'exp']
    bool162 = global(bool: <class 'bool'>)   ['bool162']
    $162pred = call bool162($158compare_op.2, func=bool162, args=(Var($158compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$158compare_op.2', '$162pred', 'bool162']
    branch $162pred, 164, 226                ['$162pred']
label 164:
    $164load_global.0 = global(math: <module 'math' (built-in)>) ['$164load_global.0']
    $174load_attr.2 = getattr(value=$164load_global.0, attr=pow) ['$164load_global.0', '$174load_attr.2']
    $196load_global.4 = global(float: <class 'float'>) ['$196load_global.4']
    $208call.7 = call $196load_global.4(b, func=$196load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$196load_global.4', '$208call.7', 'b']
    $216call.8 = call $174load_attr.2(a.1, $208call.7, func=$174load_attr.2, args=[Var(a.1, numbers.py:217), Var($208call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$174load_attr.2', '$208call.7', '$216call.8', 'a.1']
    $224return_value.9 = cast(value=$216call.8) ['$216call.8', '$224return_value.9']
    return $224return_value.9                ['$224return_value.9']
label 226:
    $const228.1 = const(int, 0)              ['$const228.1']
    $230compare_op.2 = exp != $const228.1    ['$230compare_op.2', '$const228.1', 'exp']
    bool234 = global(bool: <class 'bool'>)   ['bool234']
    $234pred = call bool234($230compare_op.2, func=bool234, args=(Var($230compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$230compare_op.2', '$234pred', 'bool234']
    branch $234pred, 236, 288                ['$234pred']
label 236:
    $const238.1 = const(int, 1)              ['$const238.1']
    $binop_and_240.2 = exp & $const238.1     ['$binop_and_240.2', '$const238.1', 'exp']
    bool244 = global(bool: <class 'bool'>)   ['bool244']
    $244pred = call bool244($binop_and_240.2, func=bool244, args=(Var($binop_and_240.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$244pred', '$binop_and_240.2', 'bool244']
    branch $244pred, 246, 256                ['$244pred']
label 246:
    $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul250.2', 'a.1', 'r']
    r = $binop_imul250.2                     ['$binop_imul250.2', 'r']
    jump 256                                 []
label 256:
    $const258.1 = const(int, 1)              ['$const258.1']
    $binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_irshift260.2', '$const258.1', 'exp']
    exp = $binop_irshift260.2                ['$binop_irshift260.2', 'exp']
    $binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul270.5', 'a.1', 'a.1']
    a.1 = $binop_imul270.5                   ['$binop_imul270.5', 'a.1']
    $const278.7 = const(int, 0)              ['$const278.7']
    $280compare_op.8 = exp != $const278.7    ['$280compare_op.8', '$const278.7', 'exp']
    bool284 = global(bool: <class 'bool'>)   ['bool284']
    $284pred = call bool284($280compare_op.8, func=bool284, args=(Var($280compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$280compare_op.8', '$284pred', 'bool284']
    branch $284pred, 286, 288                ['$284pred']
label 286:
    jump 236                                 []
label 288:
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290(invert, func=bool290, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$290pred', 'bool290', 'invert']
    branch $290pred, 292, 302                ['$290pred']
label 292:
    $const292.0 = const(float, 1.0)          ['$const292.0']
    $binop_truediv296.2 = $const292.0 / r    ['$binop_truediv296.2', '$const292.0', 'r']
    $300return_value.3 = cast(value=$binop_truediv296.2) ['$300return_value.3', '$binop_truediv296.2']
    return $300return_value.3                ['$300return_value.3']
label 302:
    $304return_value.1 = cast(value=r)       ['$304return_value.1', 'r']
    return $304return_value.1                ['$304return_value.1']

2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a = arg(0, name=a)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: b = arg(1, name=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $8load_deref.1 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const10.2 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $24load_deref.5 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const40.9 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $42compare_op.10 = b < $const40.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool46 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $46pred = call bool46($42compare_op.10, func=bool46, args=(Var($42compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $46pred, 48, 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 48
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, True)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const60.4 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $62compare_op.5 = exp < $const60.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool66 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $66pred = call bool66($62compare_op.5, func=bool66, args=(Var($62compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $66pred, 68, 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 68
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $68load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: <static> raise <class 'OverflowError'>
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $80load_deref.0 = freevar(is_integer: False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool82 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $82pred = call bool82($80load_deref.0, func=bool82, args=(Var($80load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = b
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const156.1 = const(int, 65536)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $158compare_op.2 = exp > $const156.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool162 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $162pred = call bool162($158compare_op.2, func=bool162, args=(Var($158compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $162pred, 164, 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 164
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $164load_global.0 = global(math: <module 'math' (built-in)>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $174load_attr.2 = getattr(value=$164load_global.0, attr=pow)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $196load_global.4 = global(float: <class 'float'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $208call.7 = call $196load_global.4(b, func=$196load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $216call.8 = call $174load_attr.2(a.1, $208call.7, func=$174load_attr.2, args=[Var(a.1, numbers.py:217), Var($208call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $224return_value.9 = cast(value=$216call.8)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $224return_value.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const228.1 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $230compare_op.2 = exp != $const228.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool234 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $234pred = call bool234($230compare_op.2, func=bool234, args=(Var($230compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $234pred, 236, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const238.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_and_240.2 = exp & $const238.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool244 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $244pred = call bool244($binop_and_240.2, func=bool244, args=(Var($binop_and_240.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $244pred, 246, 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r = $binop_imul250.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const258.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = $binop_irshift260.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = $binop_imul270.5
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const278.7 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $280compare_op.8 = exp != $const278.7
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool284 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $284pred = call bool284($280compare_op.8, func=bool284, args=(Var($280compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $284pred, 286, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool290 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $290pred = call bool290(invert, func=bool290, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $290pred, 292, 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 292
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const292.0 = const(float, 1.0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_truediv296.2 = $const292.0 / r
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $300return_value.3 = cast(value=$binop_truediv296.2)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $300return_value.3
2025-10-06 11:52:57 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253B8B9F10>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $304return_value.1 = cast(value=r)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $304return_value.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$158compare_op.2': [(<numba.core.ir.Assign object at 0x000001253B8A5D90>,
                                   154)],
             '$162pred': [(<numba.core.ir.Assign object at 0x000001253B8A5FD0>,
                           154)],
             '$164load_global.0': [(<numba.core.ir.Assign object at 0x000001253B8A6150>,
                                    164)],
             '$174load_attr.2': [(<numba.core.ir.Assign object at 0x000001253B8A62A0>,
                                  164)],
             '$196load_global.4': [(<numba.core.ir.Assign object at 0x000001253B8A64B0>,
                                    164)],
             '$208call.7': [(<numba.core.ir.Assign object at 0x000001253B8A6750>,
                             164)],
             '$216call.8': [(<numba.core.ir.Assign object at 0x000001253B8A68D0>,
                             164)],
             '$224return_value.9': [(<numba.core.ir.Assign object at 0x000001253B8A69F0>,
                                     164)],
             '$230compare_op.2': [(<numba.core.ir.Assign object at 0x000001253B8A6DB0>,
                                   226)],
             '$234pred': [(<numba.core.ir.Assign object at 0x000001253B8A6FF0>,
                           226)],
             '$244pred': [(<numba.core.ir.Assign object at 0x000001253B8A7650>,
                           236)],
             '$24load_deref.5': [(<numba.core.ir.Assign object at 0x000001253B88DB50>,
                                  0)],
             '$280compare_op.8': [(<numba.core.ir.Assign object at 0x000001253B8B8620>,
                                   256)],
             '$284pred': [(<numba.core.ir.Assign object at 0x000001253B8B8860>,
                           256)],
             '$290pred': [(<numba.core.ir.Assign object at 0x000001253B8B8BF0>,
                           288)],
             '$300return_value.3': [(<numba.core.ir.Assign object at 0x000001253B8B91C0>,
                                     292)],
             '$304return_value.1': [(<numba.core.ir.Assign object at 0x000001253B8B9460>,
                                     302)],
             '$42compare_op.10': [(<numba.core.ir.Assign object at 0x000001253B88E270>,
                                   0)],
             '$46pred': [(<numba.core.ir.Assign object at 0x000001253B88E510>,
                          0)],
             '$62compare_op.5': [(<numba.core.ir.Assign object at 0x000001253B88ED20>,
                                  48)],
             '$66pred': [(<numba.core.ir.Assign object at 0x000001253B88EF90>,
                          48)],
             '$68load_global.0': [(<numba.core.ir.Assign object at 0x000001253B88EAB0>,
                                   68)],
             '$80load_deref.0': [(<numba.core.ir.Assign object at 0x000001253B88F1A0>,
                                  80)],
             '$82pred': [(<numba.core.ir.Assign object at 0x000001253B88F440>,
                          80)],
             '$8load_deref.1': [(<numba.core.ir.Assign object at 0x000001253B88D670>,
                                 0)],
             '$binop_and_240.2': [(<numba.core.ir.Assign object at 0x000001253B8A7410>,
                                   236)],
             '$binop_imul250.2': [(<numba.core.ir.Assign object at 0x000001253B8A7A10>,
                                   246)],
             '$binop_imul270.5': [(<numba.core.ir.Assign object at 0x000001253B8B8230>,
                                   256)],
             '$binop_irshift260.2': [(<numba.core.ir.Assign object at 0x000001253B8A7E30>,
                                      256)],
             '$binop_truediv296.2': [(<numba.core.ir.Assign object at 0x000001253B8B90A0>,
                                      292)],
             '$const10.2': [(<numba.core.ir.Assign object at 0x000001253B88D7C0>,
                             0)],
             '$const156.1': [(<numba.core.ir.Assign object at 0x000001253B8A5C10>,
                              154)],
             '$const228.1': [(<numba.core.ir.Assign object at 0x000001253B8A6C30>,
                              226)],
             '$const238.1': [(<numba.core.ir.Assign object at 0x000001253B8A7290>,
                              236)],
             '$const258.1': [(<numba.core.ir.Assign object at 0x000001253B8A7CB0>,
                              256)],
             '$const278.7': [(<numba.core.ir.Assign object at 0x000001253B8B84A0>,
                              256)],
             '$const292.0': [(<numba.core.ir.Assign object at 0x000001253B8B8E30>,
                              292)],
             '$const40.9': [(<numba.core.ir.Assign object at 0x000001253B88E0F0>,
                             0)],
             '$const60.4': [(<numba.core.ir.Assign object at 0x000001253B88EBA0>,
                             48)],
             'a': [(<numba.core.ir.Assign object at 0x000001253B88D370>, 0)],
             'a.1': [(<numba.core.ir.Assign object at 0x000001253B88DDF0>, 0),
                     (<numba.core.ir.Assign object at 0x000001253B8B8290>,
                      256)],
             'b': [(<numba.core.ir.Assign object at 0x000001253B88D460>, 0)],
             'bool162': [(<numba.core.ir.Assign object at 0x000001253B8A5EB0>,
                          154)],
             'bool234': [(<numba.core.ir.Assign object at 0x000001253B8A6ED0>,
                          226)],
             'bool244': [(<numba.core.ir.Assign object at 0x000001253B8A7530>,
                          236)],
             'bool284': [(<numba.core.ir.Assign object at 0x000001253B8B8740>,
                          256)],
             'bool290': [(<numba.core.ir.Assign object at 0x000001253B8B8AD0>,
                          288)],
             'bool46': [(<numba.core.ir.Assign object at 0x000001253B88E3C0>,
                         0)],
             'bool66': [(<numba.core.ir.Assign object at 0x000001253B88EE40>,
                         48)],
             'bool82': [(<numba.core.ir.Assign object at 0x000001253B88F2F0>,
                         80)],
             'exp': [(<numba.core.ir.Assign object at 0x000001253B88E8A0>, 48),
                     (<numba.core.ir.Assign object at 0x000001253B8A5A30>, 146),
                     (<numba.core.ir.Assign object at 0x000001253B8A7E90>,
                      256)],
             'invert': [(<numba.core.ir.Assign object at 0x000001253B88D2B0>,
                         48),
                        (<numba.core.ir.Assign object at 0x000001253B8A5820>,
                         146)],
             'r': [(<numba.core.ir.Assign object at 0x000001253B88D970>, 0),
                   (<numba.core.ir.Assign object at 0x000001253B8A7A70>, 246)]})
2025-10-06 11:52:57 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253B8FE570>
2025-10-06 11:52:57 [   DEBUG] ssa.py:64 - Fix SSA violator on var r
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a = arg(0, name=a)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: b = arg(1, name=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $8load_deref.1 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const10.2 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:302 - first assign: r
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $24load_deref.5 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const40.9 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $42compare_op.10 = b < $const40.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool46 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $46pred = call bool46($42compare_op.10, func=bool46, args=(Var($42compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $46pred, 48, 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 48
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, True)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const60.4 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $62compare_op.5 = exp < $const60.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool66 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $66pred = call bool66($62compare_op.5, func=bool66, args=(Var($62compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $66pred, 68, 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 68
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $68load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: <static> raise <class 'OverflowError'>
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $80load_deref.0 = freevar(is_integer: False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool82 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $82pred = call bool82($80load_deref.0, func=bool82, args=(Var($80load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = b
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const156.1 = const(int, 65536)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $158compare_op.2 = exp > $const156.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool162 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $162pred = call bool162($158compare_op.2, func=bool162, args=(Var($158compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $162pred, 164, 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 164
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $164load_global.0 = global(math: <module 'math' (built-in)>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $174load_attr.2 = getattr(value=$164load_global.0, attr=pow)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $196load_global.4 = global(float: <class 'float'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $208call.7 = call $196load_global.4(b, func=$196load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $216call.8 = call $174load_attr.2(a.1, $208call.7, func=$174load_attr.2, args=[Var(a.1, numbers.py:217), Var($208call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $224return_value.9 = cast(value=$216call.8)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $224return_value.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const228.1 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $230compare_op.2 = exp != $const228.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool234 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $234pred = call bool234($230compare_op.2, func=bool234, args=(Var($230compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $234pred, 236, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const238.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_and_240.2 = exp & $const238.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool244 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $244pred = call bool244($binop_and_240.2, func=bool244, args=(Var($binop_and_240.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $244pred, 246, 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r = $binop_imul250.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: r.1 = $binop_imul250.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const258.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = $binop_irshift260.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = $binop_imul270.5
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const278.7 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $280compare_op.8 = exp != $const278.7
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool284 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $284pred = call bool284($280compare_op.8, func=bool284, args=(Var($280compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $284pred, 286, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool290 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $290pred = call bool290(invert, func=bool290, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $290pred, 292, 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 292
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const292.0 = const(float, 1.0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_truediv296.2 = $const292.0 / r
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $300return_value.3 = cast(value=$binop_truediv296.2)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $300return_value.3
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B8FF320>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $304return_value.1 = cast(value=r)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $304return_value.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:70 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001253B8FF0B0>],
             246: [<numba.core.ir.Assign object at 0x000001253B912090>]})
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a = arg(0, name=a)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: b = arg(1, name=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $8load_deref.1 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const10.2 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $24load_deref.5 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const40.9 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $42compare_op.10 = b < $const40.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool46 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $46pred = call bool46($42compare_op.10, func=bool46, args=(Var($42compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $46pred, 48, 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 48
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, True)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const60.4 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $62compare_op.5 = exp < $const60.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool66 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $66pred = call bool66($62compare_op.5, func=bool66, args=(Var($62compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $66pred, 68, 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 68
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $68load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: <static> raise <class 'OverflowError'>
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $80load_deref.0 = freevar(is_integer: False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool82 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $82pred = call bool82($80load_deref.0, func=bool82, args=(Var($80load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = b
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const156.1 = const(int, 65536)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $158compare_op.2 = exp > $const156.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool162 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $162pred = call bool162($158compare_op.2, func=bool162, args=(Var($158compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $162pred, 164, 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 164
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $164load_global.0 = global(math: <module 'math' (built-in)>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $174load_attr.2 = getattr(value=$164load_global.0, attr=pow)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $196load_global.4 = global(float: <class 'float'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $208call.7 = call $196load_global.4(b, func=$196load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $216call.8 = call $174load_attr.2(a.1, $208call.7, func=$174load_attr.2, args=[Var(a.1, numbers.py:217), Var($208call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $224return_value.9 = cast(value=$216call.8)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $224return_value.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const228.1 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $230compare_op.2 = exp != $const228.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool234 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $234pred = call bool234($230compare_op.2, func=bool234, args=(Var($230compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $234pred, 236, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const238.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_and_240.2 = exp & $const238.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool244 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $244pred = call bool244($binop_and_240.2, func=bool244, args=(Var($binop_and_240.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $244pred, 246, 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='r' stmt=$binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 236 from label 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:434 - insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 154 from label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 0 from label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 256 from label 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:434 - insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[226])
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def r.1 = $binop_imul250.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[236, 246])
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.1 = $binop_imul250.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const258.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = $binop_irshift260.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = $binop_imul270.5
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const278.7 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $280compare_op.8 = exp != $const278.7
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool284 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $284pred = call bool284($280compare_op.8, func=bool284, args=(Var($280compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $284pred, 286, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool290 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $290pred = call bool290(invert, func=bool290, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $290pred, 292, 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 292
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const292.0 = const(float, 1.0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_truediv296.2 = $const292.0 / r
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='r' stmt=$binop_truediv296.2 = $const292.0 / r
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 292
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 288 from label 292
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:434 - insert phi node r.4 = phi(incoming_values=[], incoming_blocks=[]) at 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[236, 246])
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 154 from label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 0 from label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: $binop_truediv296.2 = $const292.0 / r.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $300return_value.3 = cast(value=$binop_truediv296.2)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $300return_value.3
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B913B00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $304return_value.1 = cast(value=r)
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='r' stmt=$304return_value.1 = cast(value=r)
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 288 from label 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: $304return_value.1 = cast(value=r.4)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $304return_value.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:64 - Fix SSA violator on var a.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a = arg(0, name=a)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: b = arg(1, name=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $8load_deref.1 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const10.2 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $24load_deref.5 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:302 - first assign: a.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const40.9 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $42compare_op.10 = b < $const40.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool46 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $46pred = call bool46($42compare_op.10, func=bool46, args=(Var($42compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $46pred, 48, 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 48
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, True)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const60.4 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $62compare_op.5 = exp < $const60.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool66 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $66pred = call bool66($62compare_op.5, func=bool66, args=(Var($62compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $66pred, 68, 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 68
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $68load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: <static> raise <class 'OverflowError'>
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $80load_deref.0 = freevar(is_integer: False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool82 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $82pred = call bool82($80load_deref.0, func=bool82, args=(Var($80load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = b
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const156.1 = const(int, 65536)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $158compare_op.2 = exp > $const156.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool162 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $162pred = call bool162($158compare_op.2, func=bool162, args=(Var($158compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $162pred, 164, 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 164
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $164load_global.0 = global(math: <module 'math' (built-in)>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $174load_attr.2 = getattr(value=$164load_global.0, attr=pow)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $196load_global.4 = global(float: <class 'float'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $208call.7 = call $196load_global.4(b, func=$196load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $216call.8 = call $174load_attr.2(a.1, $208call.7, func=$174load_attr.2, args=[Var(a.1, numbers.py:217), Var($208call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $224return_value.9 = cast(value=$216call.8)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $224return_value.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const228.1 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $230compare_op.2 = exp != $const228.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool234 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $234pred = call bool234($230compare_op.2, func=bool234, args=(Var($230compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $234pred, 236, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[226, 286])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const238.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_and_240.2 = exp & $const238.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool244 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $244pred = call bool244($binop_and_240.2, func=bool244, args=(Var($binop_and_240.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $244pred, 246, 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.1 = $binop_imul250.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[236, 246])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const258.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = $binop_irshift260.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = $binop_imul270.5
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: a.1.1 = $binop_imul270.5
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const278.7 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $280compare_op.8 = exp != $const278.7
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool284 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $284pred = call bool284($280compare_op.8, func=bool284, args=(Var($280compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $284pred, 286, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[256, 226])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool290 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $290pred = call bool290(invert, func=bool290, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $290pred, 292, 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 292
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const292.0 = const(float, 1.0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_truediv296.2 = $const292.0 / r.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $300return_value.3 = cast(value=$binop_truediv296.2)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $300return_value.3
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B912F00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $304return_value.1 = cast(value=r.4)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $304return_value.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:70 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001253B933AD0>],
             256: [<numba.core.ir.Assign object at 0x000001253B943740>]})
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a = arg(0, name=a)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: b = arg(1, name=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $8load_deref.1 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const10.2 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $24load_deref.5 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const40.9 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $42compare_op.10 = b < $const40.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool46 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $46pred = call bool46($42compare_op.10, func=bool46, args=(Var($42compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $46pred, 48, 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 48
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, True)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const60.4 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $62compare_op.5 = exp < $const60.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool66 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $66pred = call bool66($62compare_op.5, func=bool66, args=(Var($62compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $66pred, 68, 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 68
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $68load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: <static> raise <class 'OverflowError'>
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $80load_deref.0 = freevar(is_integer: False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool82 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $82pred = call bool82($80load_deref.0, func=bool82, args=(Var($80load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = b
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const156.1 = const(int, 65536)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $158compare_op.2 = exp > $const156.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool162 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $162pred = call bool162($158compare_op.2, func=bool162, args=(Var($158compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $162pred, 164, 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 164
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $164load_global.0 = global(math: <module 'math' (built-in)>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $174load_attr.2 = getattr(value=$164load_global.0, attr=pow)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $196load_global.4 = global(float: <class 'float'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $208call.7 = call $196load_global.4(b, func=$196load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $216call.8 = call $174load_attr.2(a.1, $208call.7, func=$174load_attr.2, args=[Var(a.1, numbers.py:217), Var($208call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='a.1' stmt=$216call.8 = call $174load_attr.2(a.1, $208call.7, func=$174load_attr.2, args=[Var(a.1, numbers.py:217), Var($208call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 164
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 154 from label 164
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 0 from label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $224return_value.9 = cast(value=$216call.8)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $224return_value.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const228.1 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $230compare_op.2 = exp != $const228.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool234 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $234pred = call bool234($230compare_op.2, func=bool234, args=(Var($230compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $234pred, 236, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[226, 286])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const238.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_and_240.2 = exp & $const238.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool244 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $244pred = call bool244($binop_and_240.2, func=bool244, args=(Var($binop_and_240.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $244pred, 246, 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='a.1' stmt=$binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 236 from label 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:434 - insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 154 from label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 0 from label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 256 from label 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def a.1.1 = $binop_imul270.5
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.1 = $binop_imul250.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[236, 246])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const258.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = $binop_irshift260.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='a.1' stmt=$binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 236 from label 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: $binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1.1 = $binop_imul270.5
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const278.7 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $280compare_op.8 = exp != $const278.7
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool284 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $284pred = call bool284($280compare_op.8, func=bool284, args=(Var($280compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $284pred, 286, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[256, 226])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool290 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $290pred = call bool290(invert, func=bool290, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $290pred, 292, 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 292
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const292.0 = const(float, 1.0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_truediv296.2 = $const292.0 / r.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $300return_value.3 = cast(value=$binop_truediv296.2)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $300return_value.3
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B931D00>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $304return_value.1 = cast(value=r.4)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $304return_value.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:64 - Fix SSA violator on var invert
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a = arg(0, name=a)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: b = arg(1, name=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $8load_deref.1 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const10.2 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $24load_deref.5 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const40.9 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $42compare_op.10 = b < $const40.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool46 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $46pred = call bool46($42compare_op.10, func=bool46, args=(Var($42compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $46pred, 48, 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 48
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, True)
2025-10-06 11:52:57 [   DEBUG] ssa.py:302 - first assign: invert
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: invert = const(bool, True)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const60.4 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $62compare_op.5 = exp < $const60.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool66 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $66pred = call bool66($62compare_op.5, func=bool66, args=(Var($62compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $66pred, 68, 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 68
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $68load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: <static> raise <class 'OverflowError'>
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $80load_deref.0 = freevar(is_integer: False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool82 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $82pred = call bool82($80load_deref.0, func=bool82, args=(Var($80load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: invert.1 = const(bool, False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = b
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const156.1 = const(int, 65536)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $158compare_op.2 = exp > $const156.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool162 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $162pred = call bool162($158compare_op.2, func=bool162, args=(Var($158compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $162pred, 164, 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 164
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $164load_global.0 = global(math: <module 'math' (built-in)>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $174load_attr.2 = getattr(value=$164load_global.0, attr=pow)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $196load_global.4 = global(float: <class 'float'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $208call.7 = call $196load_global.4(b, func=$196load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $216call.8 = call $174load_attr.2(a.1, $208call.7, func=$174load_attr.2, args=[Var(a.1, numbers.py:217), Var($208call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $224return_value.9 = cast(value=$216call.8)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $224return_value.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const228.1 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $230compare_op.2 = exp != $const228.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool234 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $234pred = call bool234($230compare_op.2, func=bool234, args=(Var($230compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $234pred, 236, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[226, 286])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[226, 286])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const238.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_and_240.2 = exp & $const238.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool244 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $244pred = call bool244($binop_and_240.2, func=bool244, args=(Var($binop_and_240.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $244pred, 246, 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.1 = $binop_imul250.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[236, 246])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const258.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = $binop_irshift260.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1.1 = $binop_imul270.5
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const278.7 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $280compare_op.8 = exp != $const278.7
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool284 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $284pred = call bool284($280compare_op.8, func=bool284, args=(Var($280compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $284pred, 286, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[256, 226])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool290 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $290pred = call bool290(invert, func=bool290, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $290pred, 292, 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 292
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const292.0 = const(float, 1.0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_truediv296.2 = $const292.0 / r.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $300return_value.3 = cast(value=$binop_truediv296.2)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $300return_value.3
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B943F50>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $304return_value.1 = cast(value=r.4)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $304return_value.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:70 - Replaced assignments: defaultdict(<class 'list'>,
            {48: [<numba.core.ir.Assign object at 0x000001253B974050>],
             146: [<numba.core.ir.Assign object at 0x000001253B975130>]})
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a = arg(0, name=a)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: b = arg(1, name=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $8load_deref.1 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const10.2 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $24load_deref.5 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const40.9 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $42compare_op.10 = b < $const40.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool46 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $46pred = call bool46($42compare_op.10, func=bool46, args=(Var($42compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $46pred, 48, 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 48
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, True)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const60.4 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $62compare_op.5 = exp < $const60.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool66 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $66pred = call bool66($62compare_op.5, func=bool66, args=(Var($62compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $66pred, 68, 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 68
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $68load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: <static> raise <class 'OverflowError'>
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $80load_deref.0 = freevar(is_integer: False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool82 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $82pred = call bool82($80load_deref.0, func=bool82, args=(Var($80load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert.1 = const(bool, False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = b
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const156.1 = const(int, 65536)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $158compare_op.2 = exp > $const156.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool162 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $162pred = call bool162($158compare_op.2, func=bool162, args=(Var($158compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $162pred, 164, 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 164
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $164load_global.0 = global(math: <module 'math' (built-in)>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $174load_attr.2 = getattr(value=$164load_global.0, attr=pow)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $196load_global.4 = global(float: <class 'float'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $208call.7 = call $196load_global.4(b, func=$196load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $216call.8 = call $174load_attr.2(a.1, $208call.7, func=$174load_attr.2, args=[Var(a.1, numbers.py:217), Var($208call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $224return_value.9 = cast(value=$216call.8)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $224return_value.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const228.1 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $230compare_op.2 = exp != $const228.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool234 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $234pred = call bool234($230compare_op.2, func=bool234, args=(Var($230compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $234pred, 236, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[226, 286])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[226, 286])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const238.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_and_240.2 = exp & $const238.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool244 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $244pred = call bool244($binop_and_240.2, func=bool244, args=(Var($binop_and_240.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $244pred, 246, 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.1 = $binop_imul250.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[236, 246])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const258.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = $binop_irshift260.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1.1 = $binop_imul270.5
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const278.7 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $280compare_op.8 = exp != $const278.7
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool284 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $284pred = call bool284($280compare_op.8, func=bool284, args=(Var($280compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $284pred, 286, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[256, 226])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool290 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $290pred = call bool290(invert, func=bool290, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='invert' stmt=$290pred = call bool290(invert, func=bool290, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 226 from label 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 154 from label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:434 - insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 48 from label 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 48
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def invert = const(bool, True)
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def invert.1 = const(bool, False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: $290pred = call bool290(invert.2, func=bool290, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $290pred, 292, 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 292
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const292.0 = const(float, 1.0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_truediv296.2 = $const292.0 / r.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $300return_value.3 = cast(value=$binop_truediv296.2)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $300return_value.3
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B95EED0>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $304return_value.1 = cast(value=r.4)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $304return_value.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:64 - Fix SSA violator on var exp
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a = arg(0, name=a)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: b = arg(1, name=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $8load_deref.1 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const10.2 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $24load_deref.5 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const40.9 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $42compare_op.10 = b < $const40.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool46 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $46pred = call bool46($42compare_op.10, func=bool46, args=(Var($42compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $46pred, 48, 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 48
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, True)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:302 - first assign: exp
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: exp = unary(fn=<built-in function neg>, value=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const60.4 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $62compare_op.5 = exp < $const60.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool66 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $66pred = call bool66($62compare_op.5, func=bool66, args=(Var($62compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $66pred, 68, 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 68
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $68load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: <static> raise <class 'OverflowError'>
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $80load_deref.0 = freevar(is_integer: False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool82 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $82pred = call bool82($80load_deref.0, func=bool82, args=(Var($80load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert.1 = const(bool, False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = b
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: exp.1 = b
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[80, 146])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const156.1 = const(int, 65536)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $158compare_op.2 = exp > $const156.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool162 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $162pred = call bool162($158compare_op.2, func=bool162, args=(Var($158compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $162pred, 164, 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 164
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $164load_global.0 = global(math: <module 'math' (built-in)>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $174load_attr.2 = getattr(value=$164load_global.0, attr=pow)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $196load_global.4 = global(float: <class 'float'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $208call.7 = call $196load_global.4(b, func=$196load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $216call.8 = call $174load_attr.2(a.1, $208call.7, func=$174load_attr.2, args=[Var(a.1, numbers.py:217), Var($208call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $224return_value.9 = cast(value=$216call.8)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $224return_value.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const228.1 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $230compare_op.2 = exp != $const228.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool234 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $234pred = call bool234($230compare_op.2, func=bool234, args=(Var($230compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $234pred, 236, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[226, 286])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[226, 286])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const238.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_and_240.2 = exp & $const238.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool244 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $244pred = call bool244($binop_and_240.2, func=bool244, args=(Var($binop_and_240.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $244pred, 246, 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.1 = $binop_imul250.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[236, 246])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const258.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = $binop_irshift260.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: exp.2 = $binop_irshift260.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1.1 = $binop_imul270.5
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const278.7 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $280compare_op.8 = exp != $const278.7
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool284 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $284pred = call bool284($280compare_op.8, func=bool284, args=(Var($280compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $284pred, 286, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[256, 226])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool290 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $290pred = call bool290(invert.2, func=bool290, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $290pred, 292, 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 292
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const292.0 = const(float, 1.0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_truediv296.2 = $const292.0 / r.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $300return_value.3 = cast(value=$binop_truediv296.2)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $300return_value.3
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FreshVarHandler object at 0x000001253B977C80>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $304return_value.1 = cast(value=r.4)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $304return_value.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:70 - Replaced assignments: defaultdict(<class 'list'>,
            {48: [<numba.core.ir.Assign object at 0x000001253B997350>],
             146: [<numba.core.ir.Assign object at 0x000001253B9A44A0>],
             256: [<numba.core.ir.Assign object at 0x000001253B9A6A50>]})
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 0
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a = arg(0, name=a)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: b = arg(1, name=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $8load_deref.1 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const10.2 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $24load_deref.5 = freevar(tp: float64)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1 = call $24load_deref.5(a, func=$24load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const40.9 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $42compare_op.10 = b < $const40.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool46 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $46pred = call bool46($42compare_op.10, func=bool46, args=(Var($42compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $46pred, 48, 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 48
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert = const(bool, True)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const60.4 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $62compare_op.5 = exp < $const60.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='exp' stmt=$62compare_op.5 = exp < $const60.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool66 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $66pred = call bool66($62compare_op.5, func=bool66, args=(Var($62compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $66pred, 68, 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 68
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $68load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: <static> raise <class 'OverflowError'>
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $80load_deref.0 = freevar(is_integer: False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool82 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $82pred = call bool82($80load_deref.0, func=bool82, args=(Var($80load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert.1 = const(bool, False)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp.1 = b
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[80, 146])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const156.1 = const(int, 65536)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $158compare_op.2 = exp > $const156.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='exp' stmt=$158compare_op.2 = exp > $const156.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:434 - insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 48 from label 80
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 48
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def exp = unary(fn=<built-in function neg>, value=b)
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 146
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def exp.1 = b
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: $158compare_op.2 = exp.3 > $const156.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool162 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $162pred = call bool162($158compare_op.2, func=bool162, args=(Var($158compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $162pred, 164, 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 164
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $164load_global.0 = global(math: <module 'math' (built-in)>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $174load_attr.2 = getattr(value=$164load_global.0, attr=pow)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $196load_global.4 = global(float: <class 'float'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $208call.7 = call $196load_global.4(b, func=$196load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $216call.8 = call $174load_attr.2(a.1, $208call.7, func=$174load_attr.2, args=[Var(a.1, numbers.py:217), Var($208call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $224return_value.9 = cast(value=$216call.8)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $224return_value.9
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const228.1 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $230compare_op.2 = exp != $const228.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='exp' stmt=$230compare_op.2 = exp != $const228.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 154 from label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: $230compare_op.2 = exp.3 != $const228.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool234 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $234pred = call bool234($230compare_op.2, func=bool234, args=(Var($230compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $234pred, 236, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[226, 286])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[226, 286])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const238.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_and_240.2 = exp & $const238.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='exp' stmt=$binop_and_240.2 = exp & $const238.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:434 - insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 154 from label 226
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 154
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[80, 146])
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 256 from label 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:442 - incoming_def exp.2 = $binop_irshift260.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: $binop_and_240.2 = exp.4 & $const238.1
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool244 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $244pred = call bool244($binop_and_240.2, func=bool244, args=(Var($binop_and_240.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $244pred, 246, 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 246
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul250.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.1 = $binop_imul250.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[236, 246])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const258.1 = const(int, 1)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='exp' stmt=$binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:417 - find_def_from_top label 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:454 - idom 236 from label 256
2025-10-06 11:52:57 [   DEBUG] ssa.py:460 - find_def_from_bottom label 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: $binop_irshift260.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const258.1, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: exp.2 = $binop_irshift260.2
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_imul270.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: a.1.1 = $binop_imul270.5
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const278.7 = const(int, 0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $280compare_op.8 = exp != $const278.7
2025-10-06 11:52:57 [   DEBUG] ssa.py:386 - find_def var='exp' stmt=$280compare_op.8 = exp != $const278.7
2025-10-06 11:52:57 [   DEBUG] ssa.py:216 - replaced with: $280compare_op.8 = exp.2 != $const278.7
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool284 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $284pred = call bool284($280compare_op.8, func=bool284, args=(Var($280compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $284pred, 286, 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 286
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: jump 236
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 288
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[256, 226])
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: bool290 = global(bool: <class 'bool'>)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $290pred = call bool290(invert.2, func=bool290, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: branch $290pred, 292, 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 292
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $const292.0 = const(float, 1.0)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $binop_truediv296.2 = $const292.0 / r.4
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $300return_value.3 = cast(value=$binop_truediv296.2)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $300return_value.3
2025-10-06 11:52:57 [   DEBUG] ssa.py:187 - ==== SSA block rewrite pass on 302
2025-10-06 11:52:57 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._FixSSAVars object at 0x000001253B994E30>
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: $304return_value.1 = cast(value=r.4)
2025-10-06 11:52:57 [   DEBUG] ssa.py:210 - on stmt: return $304return_value.1
2025-10-06 11:52:59 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=191)
           2	RESUME(arg=0, lineno=191)
           4	LOAD_GLOBAL(arg=1, lineno=202)
          14	LOAD_ATTR(arg=2, lineno=202)
          34	LOAD_FAST(arg=0, lineno=202)
          36	CALL(arg=1, lineno=202)
          44	STORE_FAST(arg=13, lineno=202)
          46	LOAD_GLOBAL(arg=1, lineno=203)
          56	LOAD_ATTR(arg=2, lineno=203)
          76	LOAD_FAST(arg=1, lineno=203)
          78	CALL(arg=1, lineno=203)
          86	STORE_FAST(arg=14, lineno=203)
          88	LOAD_GLOBAL(arg=1, lineno=204)
          98	LOAD_ATTR(arg=2, lineno=204)
         118	LOAD_FAST(arg=0, lineno=204)
         120	LOAD_FAST(arg=1, lineno=204)
         122	BINARY_OP(arg=10, lineno=204)
         126	CALL(arg=1, lineno=204)
         134	STORE_FAST(arg=15, lineno=204)
         136	LOAD_FAST(arg=10, lineno=207)
         138	STORE_FAST(arg=16, lineno=207)
         140	LOAD_FAST(arg=4, lineno=208)
         142	LOAD_FAST(arg=8, lineno=208)
         144	BINARY_OP(arg=5, lineno=208)
         148	LOAD_FAST(arg=5, lineno=208)
         150	LOAD_FAST(arg=6, lineno=208)
         152	BINARY_OP(arg=5, lineno=208)
         156	BINARY_OP(arg=0, lineno=208)
         160	UNARY_NEGATIVE(arg=None, lineno=208)
         162	LOAD_FAST(arg=13, lineno=208)
         164	BINARY_OP(arg=5, lineno=208)
         168	LOAD_FAST(arg=2, lineno=208)
         170	BINARY_OP(arg=5, lineno=208)
         174	LOAD_FAST(arg=5, lineno=208)
         176	LOAD_FAST(arg=9, lineno=208)
         178	BINARY_OP(arg=5, lineno=208)
         182	LOAD_FAST(arg=14, lineno=208)
         184	BINARY_OP(arg=5, lineno=208)
         188	LOAD_FAST(arg=3, lineno=208)
         190	BINARY_OP(arg=5, lineno=208)
         194	BINARY_OP(arg=10, lineno=208)
         198	STORE_FAST(arg=17, lineno=208)
         200	LOAD_FAST(arg=5, lineno=209)
         202	UNARY_NEGATIVE(arg=None, lineno=209)
         204	LOAD_FAST(arg=9, lineno=209)
         206	BINARY_OP(arg=5, lineno=209)
         210	LOAD_FAST(arg=14, lineno=209)
         212	BINARY_OP(arg=5, lineno=209)
         216	LOAD_FAST(arg=3, lineno=209)
         218	BINARY_OP(arg=5, lineno=209)
         222	STORE_FAST(arg=18, lineno=209)
         224	LOAD_CONST(arg=1, lineno=211)
         226	STORE_FAST(arg=19, lineno=211)
         228	LOAD_FAST(arg=11, lineno=212)
         230	LOAD_FAST(arg=5, lineno=212)
         232	LOAD_FAST(arg=6, lineno=212)
         234	BINARY_OP(arg=5, lineno=212)
         238	LOAD_FAST(arg=9, lineno=212)
         240	BINARY_OP(arg=5, lineno=212)
         244	LOAD_FAST(arg=15, lineno=212)
         246	BINARY_OP(arg=5, lineno=212)
         250	LOAD_FAST(arg=3, lineno=212)
         252	BINARY_OP(arg=5, lineno=212)
         256	BINARY_OP(arg=10, lineno=212)
         260	STORE_FAST(arg=20, lineno=212)
         262	LOAD_FAST(arg=5, lineno=213)
         264	UNARY_NEGATIVE(arg=None, lineno=213)
         266	LOAD_FAST(arg=6, lineno=213)
         268	BINARY_OP(arg=5, lineno=213)
         272	LOAD_FAST(arg=9, lineno=213)
         274	BINARY_OP(arg=5, lineno=213)
         278	LOAD_FAST(arg=15, lineno=213)
         280	BINARY_OP(arg=5, lineno=213)
         284	LOAD_FAST(arg=3, lineno=213)
         286	BINARY_OP(arg=5, lineno=213)
         290	STORE_FAST(arg=21, lineno=213)
         292	LOAD_CONST(arg=1, lineno=215)
         294	STORE_FAST(arg=22, lineno=215)
         296	LOAD_FAST(arg=5, lineno=216)
         298	LOAD_FAST(arg=6, lineno=216)
         300	BINARY_OP(arg=5, lineno=216)
         304	LOAD_FAST(arg=9, lineno=216)
         306	BINARY_OP(arg=5, lineno=216)
         310	LOAD_FAST(arg=15, lineno=216)
         312	BINARY_OP(arg=5, lineno=216)
         316	LOAD_FAST(arg=2, lineno=216)
         318	BINARY_OP(arg=5, lineno=216)
         322	STORE_FAST(arg=23, lineno=216)
         324	LOAD_FAST(arg=12, lineno=217)
         326	STORE_FAST(arg=24, lineno=217)
         328	LOAD_GLOBAL(arg=1, lineno=219)
         338	LOAD_ATTR(arg=4, lineno=219)
         358	LOAD_FAST(arg=16, lineno=220)
         360	LOAD_FAST(arg=17, lineno=220)
         362	LOAD_FAST(arg=18, lineno=220)
         364	BUILD_LIST(arg=3, lineno=220)
         366	LOAD_FAST(arg=19, lineno=221)
         368	LOAD_FAST(arg=20, lineno=221)
         370	LOAD_FAST(arg=21, lineno=221)
         372	BUILD_LIST(arg=3, lineno=221)
         374	LOAD_FAST(arg=22, lineno=222)
         376	LOAD_FAST(arg=23, lineno=222)
         378	LOAD_FAST(arg=24, lineno=222)
         380	BUILD_LIST(arg=3, lineno=222)
         382	BUILD_LIST(arg=3, lineno=219)
         384	CALL(arg=1, lineno=219)
         392	STORE_FAST(arg=25, lineno=219)
         394	LOAD_FAST(arg=25, lineno=225)
         396	RETURN_VALUE(arg=None, lineno=225)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:52:59 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=191)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=191)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=202)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=202)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=202)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=36, inst=CALL(arg=1, lineno=202)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2', '$theta134.3']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=44, inst=STORE_FAST(arg=13, lineno=202)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$36call.4']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=46, inst=LOAD_GLOBAL(arg=1, lineno=203)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=56, inst=LOAD_ATTR(arg=2, lineno=203)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$46load_global.5']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=76, inst=LOAD_FAST(arg=1, lineno=203)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$56load_attr.7']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=78, inst=CALL(arg=1, lineno=203)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$56load_attr.7', '$theta276.8']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=86, inst=STORE_FAST(arg=14, lineno=203)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$78call.9']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=204)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=98, inst=LOAD_ATTR(arg=2, lineno=204)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$88load_global.10']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=204)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=120, inst=LOAD_FAST(arg=1, lineno=204)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12', '$theta1118.13']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=122, inst=BINARY_OP(arg=10, lineno=204)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12', '$theta1118.13', '$theta2120.14']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=126, inst=CALL(arg=1, lineno=204)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12', '$binop_sub122.15']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=134, inst=STORE_FAST(arg=15, lineno=204)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$126call.16']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=136, inst=LOAD_FAST(arg=10, lineno=207)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=138, inst=STORE_FAST(arg=16, lineno=207)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c0136.17']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=140, inst=LOAD_FAST(arg=4, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=142, inst=LOAD_FAST(arg=8, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$m1140.18']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=144, inst=BINARY_OP(arg=5, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$m1140.18', '$Lc1142.19']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=148, inst=LOAD_FAST(arg=5, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul144.20']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=150, inst=LOAD_FAST(arg=6, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul144.20', '$m2148.21']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=152, inst=BINARY_OP(arg=5, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul144.20', '$m2148.21', '$L1150.22']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=156, inst=BINARY_OP(arg=0, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul144.20', '$binop_mul152.23']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=160, inst=UNARY_NEGATIVE(arg=None, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_add156.24']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=162, inst=LOAD_FAST(arg=13, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$160unary_negative.25']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=164, inst=BINARY_OP(arg=5, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$160unary_negative.25', '$s1162.26']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=168, inst=LOAD_FAST(arg=2, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul164.27']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=170, inst=BINARY_OP(arg=5, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul164.27', '$theta1_dot168.28']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=174, inst=LOAD_FAST(arg=5, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul170.29']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=176, inst=LOAD_FAST(arg=9, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul170.29', '$m2174.30']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=178, inst=BINARY_OP(arg=5, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul170.29', '$m2174.30', '$Lc2176.31']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=182, inst=LOAD_FAST(arg=14, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul170.29', '$binop_mul178.32']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=184, inst=BINARY_OP(arg=5, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul170.29', '$binop_mul178.32', '$s2182.33']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul170.29', '$binop_mul184.34']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=190, inst=BINARY_OP(arg=5, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul170.29', '$binop_mul184.34', '$theta2_dot188.35']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=194, inst=BINARY_OP(arg=10, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul170.29', '$binop_mul190.36']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=198, inst=STORE_FAST(arg=17, lineno=208)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_sub194.37']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=200, inst=LOAD_FAST(arg=5, lineno=209)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=202, inst=UNARY_NEGATIVE(arg=None, lineno=209)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$m2200.38']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=204, inst=LOAD_FAST(arg=9, lineno=209)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$202unary_negative.39']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=206, inst=BINARY_OP(arg=5, lineno=209)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$202unary_negative.39', '$Lc2204.40']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=210, inst=LOAD_FAST(arg=14, lineno=209)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul206.41']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=212, inst=BINARY_OP(arg=5, lineno=209)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul206.41', '$s2210.42']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=216, inst=LOAD_FAST(arg=3, lineno=209)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul212.43']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=218, inst=BINARY_OP(arg=5, lineno=209)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul212.43', '$theta2_dot216.44']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=222, inst=STORE_FAST(arg=18, lineno=209)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul218.45']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=224, inst=LOAD_CONST(arg=1, lineno=211)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=226, inst=STORE_FAST(arg=19, lineno=211)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$const224.46']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=228, inst=LOAD_FAST(arg=11, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=230, inst=LOAD_FAST(arg=5, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c1228.47']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=232, inst=LOAD_FAST(arg=6, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c1228.47', '$m2230.48']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=234, inst=BINARY_OP(arg=5, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c1228.47', '$m2230.48', '$L1232.49']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=238, inst=LOAD_FAST(arg=9, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c1228.47', '$binop_mul234.50']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=240, inst=BINARY_OP(arg=5, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c1228.47', '$binop_mul234.50', '$Lc2238.51']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=244, inst=LOAD_FAST(arg=15, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c1228.47', '$binop_mul240.52']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=246, inst=BINARY_OP(arg=5, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c1228.47', '$binop_mul240.52', '$s12244.53']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=250, inst=LOAD_FAST(arg=3, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c1228.47', '$binop_mul246.54']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=252, inst=BINARY_OP(arg=5, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c1228.47', '$binop_mul246.54', '$theta2_dot250.55']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=256, inst=BINARY_OP(arg=10, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c1228.47', '$binop_mul252.56']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=260, inst=STORE_FAST(arg=20, lineno=212)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_sub256.57']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=262, inst=LOAD_FAST(arg=5, lineno=213)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=264, inst=UNARY_NEGATIVE(arg=None, lineno=213)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$m2262.58']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=266, inst=LOAD_FAST(arg=6, lineno=213)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$264unary_negative.59']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=268, inst=BINARY_OP(arg=5, lineno=213)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$264unary_negative.59', '$L1266.60']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=272, inst=LOAD_FAST(arg=9, lineno=213)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul268.61']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=274, inst=BINARY_OP(arg=5, lineno=213)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul268.61', '$Lc2272.62']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=278, inst=LOAD_FAST(arg=15, lineno=213)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul274.63']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=280, inst=BINARY_OP(arg=5, lineno=213)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul274.63', '$s12278.64']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=284, inst=LOAD_FAST(arg=3, lineno=213)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul280.65']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=286, inst=BINARY_OP(arg=5, lineno=213)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul280.65', '$theta2_dot284.66']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=290, inst=STORE_FAST(arg=21, lineno=213)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul286.67']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=292, inst=LOAD_CONST(arg=1, lineno=215)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=294, inst=STORE_FAST(arg=22, lineno=215)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$const292.68']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=296, inst=LOAD_FAST(arg=5, lineno=216)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=298, inst=LOAD_FAST(arg=6, lineno=216)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$m2296.69']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=300, inst=BINARY_OP(arg=5, lineno=216)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$m2296.69', '$L1298.70']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=304, inst=LOAD_FAST(arg=9, lineno=216)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul300.71']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=306, inst=BINARY_OP(arg=5, lineno=216)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul300.71', '$Lc2304.72']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=310, inst=LOAD_FAST(arg=15, lineno=216)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul306.73']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=312, inst=BINARY_OP(arg=5, lineno=216)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul306.73', '$s12310.74']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=316, inst=LOAD_FAST(arg=2, lineno=216)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul312.75']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=318, inst=BINARY_OP(arg=5, lineno=216)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul312.75', '$theta1_dot316.76']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=322, inst=STORE_FAST(arg=23, lineno=216)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul318.77']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=324, inst=LOAD_FAST(arg=12, lineno=217)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=326, inst=STORE_FAST(arg=24, lineno=217)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$c2324.78']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=328, inst=LOAD_GLOBAL(arg=1, lineno=219)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=338, inst=LOAD_ATTR(arg=4, lineno=219)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$328load_global.79']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=358, inst=LOAD_FAST(arg=16, lineno=220)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=360, inst=LOAD_FAST(arg=17, lineno=220)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$C11358.82']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=362, inst=LOAD_FAST(arg=18, lineno=220)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$C11358.82', '$C12360.83']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=364, inst=BUILD_LIST(arg=3, lineno=220)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$C11358.82', '$C12360.83', '$C13362.84']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=366, inst=LOAD_FAST(arg=19, lineno=221)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$364build_list.85']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=368, inst=LOAD_FAST(arg=20, lineno=221)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$364build_list.85', '$C21366.86']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=370, inst=LOAD_FAST(arg=21, lineno=221)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$364build_list.85', '$C21366.86', '$C22368.87']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=372, inst=BUILD_LIST(arg=3, lineno=221)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$364build_list.85', '$C21366.86', '$C22368.87', '$C23370.88']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=374, inst=LOAD_FAST(arg=22, lineno=222)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$364build_list.85', '$372build_list.89']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=376, inst=LOAD_FAST(arg=23, lineno=222)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$364build_list.85', '$372build_list.89', '$C31374.90']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=378, inst=LOAD_FAST(arg=24, lineno=222)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$364build_list.85', '$372build_list.89', '$C31374.90', '$C32376.91']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=380, inst=BUILD_LIST(arg=3, lineno=222)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$364build_list.85', '$372build_list.89', '$C31374.90', '$C32376.91', '$C33378.92']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=382, inst=BUILD_LIST(arg=3, lineno=219)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$364build_list.85', '$372build_list.89', '$380build_list.93']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=384, inst=CALL(arg=1, lineno=219)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$328.80', '$338load_attr.81', '$382build_list.94']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=392, inst=STORE_FAST(arg=25, lineno=219)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$384call.95']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=394, inst=LOAD_FAST(arg=25, lineno=225)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=396, inst=RETURN_VALUE(arg=None, lineno=225)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$C394.96']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:59 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:52:59 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:52:59 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:52:59 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:52:59 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'item': '$4load_global.0', 'res': '$14load_attr.2'}), (34, {'res': '$theta134.3'}), (36, {'func': '$14load_attr.2', 'args': ['$theta134.3'], 'kw_names': None, 'res': '$36call.4'}), (44, {'value': '$36call.4'}), (46, {'idx': 0, 'res': '$46load_global.5'}), (56, {'item': '$46load_global.5', 'res': '$56load_attr.7'}), (76, {'res': '$theta276.8'}), (78, {'func': '$56load_attr.7', 'args': ['$theta276.8'], 'kw_names': None, 'res': '$78call.9'}), (86, {'value': '$78call.9'}), (88, {'idx': 0, 'res': '$88load_global.10'}), (98, {'item': '$88load_global.10', 'res': '$98load_attr.12'}), (118, {'res': '$theta1118.13'}), (120, {'res': '$theta2120.14'}), (122, {'op': '-', 'lhs': '$theta1118.13', 'rhs': '$theta2120.14', 'res': '$binop_sub122.15'}), (126, {'func': '$98load_attr.12', 'args': ['$binop_sub122.15'], 'kw_names': None, 'res': '$126call.16'}), (134, {'value': '$126call.16'}), (136, {'res': '$c0136.17'}), (138, {'value': '$c0136.17'}), (140, {'res': '$m1140.18'}), (142, {'res': '$Lc1142.19'}), (144, {'op': '*', 'lhs': '$m1140.18', 'rhs': '$Lc1142.19', 'res': '$binop_mul144.20'}), (148, {'res': '$m2148.21'}), (150, {'res': '$L1150.22'}), (152, {'op': '*', 'lhs': '$m2148.21', 'rhs': '$L1150.22', 'res': '$binop_mul152.23'}), (156, {'op': '+', 'lhs': '$binop_mul144.20', 'rhs': '$binop_mul152.23', 'res': '$binop_add156.24'}), (160, {'value': '$binop_add156.24', 'res': '$160unary_negative.25'}), (162, {'res': '$s1162.26'}), (164, {'op': '*', 'lhs': '$160unary_negative.25', 'rhs': '$s1162.26', 'res': '$binop_mul164.27'}), (168, {'res': '$theta1_dot168.28'}), (170, {'op': '*', 'lhs': '$binop_mul164.27', 'rhs': '$theta1_dot168.28', 'res': '$binop_mul170.29'}), (174, {'res': '$m2174.30'}), (176, {'res': '$Lc2176.31'}), (178, {'op': '*', 'lhs': '$m2174.30', 'rhs': '$Lc2176.31', 'res': '$binop_mul178.32'}), (182, {'res': '$s2182.33'}), (184, {'op': '*', 'lhs': '$binop_mul178.32', 'rhs': '$s2182.33', 'res': '$binop_mul184.34'}), (188, {'res': '$theta2_dot188.35'}), (190, {'op': '*', 'lhs': '$binop_mul184.34', 'rhs': '$theta2_dot188.35', 'res': '$binop_mul190.36'}), (194, {'op': '-', 'lhs': '$binop_mul170.29', 'rhs': '$binop_mul190.36', 'res': '$binop_sub194.37'}), (198, {'value': '$binop_sub194.37'}), (200, {'res': '$m2200.38'}), (202, {'value': '$m2200.38', 'res': '$202unary_negative.39'}), (204, {'res': '$Lc2204.40'}), (206, {'op': '*', 'lhs': '$202unary_negative.39', 'rhs': '$Lc2204.40', 'res': '$binop_mul206.41'}), (210, {'res': '$s2210.42'}), (212, {'op': '*', 'lhs': '$binop_mul206.41', 'rhs': '$s2210.42', 'res': '$binop_mul212.43'}), (216, {'res': '$theta2_dot216.44'}), (218, {'op': '*', 'lhs': '$binop_mul212.43', 'rhs': '$theta2_dot216.44', 'res': '$binop_mul218.45'}), (222, {'value': '$binop_mul218.45'}), (224, {'res': '$const224.46'}), (226, {'value': '$const224.46'}), (228, {'res': '$c1228.47'}), (230, {'res': '$m2230.48'}), (232, {'res': '$L1232.49'}), (234, {'op': '*', 'lhs': '$m2230.48', 'rhs': '$L1232.49', 'res': '$binop_mul234.50'}), (238, {'res': '$Lc2238.51'}), (240, {'op': '*', 'lhs': '$binop_mul234.50', 'rhs': '$Lc2238.51', 'res': '$binop_mul240.52'}), (244, {'res': '$s12244.53'}), (246, {'op': '*', 'lhs': '$binop_mul240.52', 'rhs': '$s12244.53', 'res': '$binop_mul246.54'}), (250, {'res': '$theta2_dot250.55'}), (252, {'op': '*', 'lhs': '$binop_mul246.54', 'rhs': '$theta2_dot250.55', 'res': '$binop_mul252.56'}), (256, {'op': '-', 'lhs': '$c1228.47', 'rhs': '$binop_mul252.56', 'res': '$binop_sub256.57'}), (260, {'value': '$binop_sub256.57'}), (262, {'res': '$m2262.58'}), (264, {'value': '$m2262.58', 'res': '$264unary_negative.59'}), (266, {'res': '$L1266.60'}), (268, {'op': '*', 'lhs': '$264unary_negative.59', 'rhs': '$L1266.60', 'res': '$binop_mul268.61'}), (272, {'res': '$Lc2272.62'}), (274, {'op': '*', 'lhs': '$binop_mul268.61', 'rhs': '$Lc2272.62', 'res': '$binop_mul274.63'}), (278, {'res': '$s12278.64'}), (280, {'op': '*', 'lhs': '$binop_mul274.63', 'rhs': '$s12278.64', 'res': '$binop_mul280.65'}), (284, {'res': '$theta2_dot284.66'}), (286, {'op': '*', 'lhs': '$binop_mul280.65', 'rhs': '$theta2_dot284.66', 'res': '$binop_mul286.67'}), (290, {'value': '$binop_mul286.67'}), (292, {'res': '$const292.68'}), (294, {'value': '$const292.68'}), (296, {'res': '$m2296.69'}), (298, {'res': '$L1298.70'}), (300, {'op': '*', 'lhs': '$m2296.69', 'rhs': '$L1298.70', 'res': '$binop_mul300.71'}), (304, {'res': '$Lc2304.72'}), (306, {'op': '*', 'lhs': '$binop_mul300.71', 'rhs': '$Lc2304.72', 'res': '$binop_mul306.73'}), (310, {'res': '$s12310.74'}), (312, {'op': '*', 'lhs': '$binop_mul306.73', 'rhs': '$s12310.74', 'res': '$binop_mul312.75'}), (316, {'res': '$theta1_dot316.76'}), (318, {'op': '*', 'lhs': '$binop_mul312.75', 'rhs': '$theta1_dot316.76', 'res': '$binop_mul318.77'}), (322, {'value': '$binop_mul318.77'}), (324, {'res': '$c2324.78'}), (326, {'value': '$c2324.78'}), (328, {'idx': 0, 'res': '$328load_global.79'}), (338, {'item': '$328load_global.79', 'res': '$338load_attr.81'}), (358, {'res': '$C11358.82'}), (360, {'res': '$C12360.83'}), (362, {'res': '$C13362.84'}), (364, {'items': ['$C11358.82', '$C12360.83', '$C13362.84'], 'res': '$364build_list.85'}), (366, {'res': '$C21366.86'}), (368, {'res': '$C22368.87'}), (370, {'res': '$C23370.88'}), (372, {'items': ['$C21366.86', '$C22368.87', '$C23370.88'], 'res': '$372build_list.89'}), (374, {'res': '$C31374.90'}), (376, {'res': '$C32376.91'}), (378, {'res': '$C33378.92'}), (380, {'items': ['$C31374.90', '$C32376.91', '$C33378.92'], 'res': '$380build_list.93'}), (382, {'items': ['$364build_list.85', '$372build_list.89', '$380build_list.93'], 'res': '$382build_list.94'}), (384, {'func': '$338load_attr.81', 'args': ['$382build_list.94'], 'kw_names': None, 'res': '$384call.95'}), (392, {'value': '$384call.95'}), (394, {'res': '$C394.96'}), (396, {'retval': '$C394.96', 'castval': '$396return_value.97'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:59 [   DEBUG] interpreter.py:1416 - label 0:
    theta1 = arg(0, name=theta1)             ['theta1']
    theta2 = arg(1, name=theta2)             ['theta2']
    theta1_dot = arg(2, name=theta1_dot)     ['theta1_dot']
    theta2_dot = arg(3, name=theta2_dot)     ['theta2_dot']
    m1 = arg(4, name=m1)                     ['m1']
    m2 = arg(5, name=m2)                     ['m2']
    L1 = arg(6, name=L1)                     ['L1']
    L2 = arg(7, name=L2)                     ['L2']
    Lc1 = arg(8, name=Lc1)                   ['Lc1']
    Lc2 = arg(9, name=Lc2)                   ['Lc2']
    c0 = arg(10, name=c0)                    ['c0']
    c1 = arg(11, name=c1)                    ['c1']
    c2 = arg(12, name=c2)                    ['c2']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $14load_attr.2 = getattr(value=$4load_global.0, attr=sin) ['$14load_attr.2', '$4load_global.0']
    s1 = call $14load_attr.2(theta1, func=$14load_attr.2, args=[Var(theta1, physics_matrices.py:191)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_attr.2', 's1', 'theta1']
    $46load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$46load_global.5']
    $56load_attr.7 = getattr(value=$46load_global.5, attr=sin) ['$46load_global.5', '$56load_attr.7']
    s2 = call $56load_attr.7(theta2, func=$56load_attr.7, args=[Var(theta2, physics_matrices.py:191)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_attr.7', 's2', 'theta2']
    $88load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$88load_global.10']
    $98load_attr.12 = getattr(value=$88load_global.10, attr=sin) ['$88load_global.10', '$98load_attr.12']
    $binop_sub122.15 = theta1 - theta2       ['$binop_sub122.15', 'theta1', 'theta2']
    s12 = call $98load_attr.12($binop_sub122.15, func=$98load_attr.12, args=[Var($binop_sub122.15, physics_matrices.py:204)], kws=(), vararg=None, varkwarg=None, target=None) ['$98load_attr.12', '$binop_sub122.15', 's12']
    C11 = c0                                 ['C11', 'c0']
    $binop_mul144.20 = m1 * Lc1              ['$binop_mul144.20', 'Lc1', 'm1']
    $binop_mul152.23 = m2 * L1               ['$binop_mul152.23', 'L1', 'm2']
    $binop_add156.24 = $binop_mul144.20 + $binop_mul152.23 ['$binop_add156.24', '$binop_mul144.20', '$binop_mul152.23']
    $160unary_negative.25 = unary(fn=<built-in function neg>, value=$binop_add156.24) ['$160unary_negative.25', '$binop_add156.24']
    $binop_mul164.27 = $160unary_negative.25 * s1 ['$160unary_negative.25', '$binop_mul164.27', 's1']
    $binop_mul170.29 = $binop_mul164.27 * theta1_dot ['$binop_mul164.27', '$binop_mul170.29', 'theta1_dot']
    $binop_mul178.32 = m2 * Lc2              ['$binop_mul178.32', 'Lc2', 'm2']
    $binop_mul184.34 = $binop_mul178.32 * s2 ['$binop_mul178.32', '$binop_mul184.34', 's2']
    $binop_mul190.36 = $binop_mul184.34 * theta2_dot ['$binop_mul184.34', '$binop_mul190.36', 'theta2_dot']
    C12 = $binop_mul170.29 - $binop_mul190.36 ['$binop_mul170.29', '$binop_mul190.36', 'C12']
    $202unary_negative.39 = unary(fn=<built-in function neg>, value=m2) ['$202unary_negative.39', 'm2']
    $binop_mul206.41 = $202unary_negative.39 * Lc2 ['$202unary_negative.39', '$binop_mul206.41', 'Lc2']
    $binop_mul212.43 = $binop_mul206.41 * s2 ['$binop_mul206.41', '$binop_mul212.43', 's2']
    C13 = $binop_mul212.43 * theta2_dot      ['$binop_mul212.43', 'C13', 'theta2_dot']
    C21 = const(float, 0.0)                  ['C21']
    $binop_mul234.50 = m2 * L1               ['$binop_mul234.50', 'L1', 'm2']
    $binop_mul240.52 = $binop_mul234.50 * Lc2 ['$binop_mul234.50', '$binop_mul240.52', 'Lc2']
    $binop_mul246.54 = $binop_mul240.52 * s12 ['$binop_mul240.52', '$binop_mul246.54', 's12']
    $binop_mul252.56 = $binop_mul246.54 * theta2_dot ['$binop_mul246.54', '$binop_mul252.56', 'theta2_dot']
    C22 = c1 - $binop_mul252.56              ['$binop_mul252.56', 'C22', 'c1']
    $264unary_negative.59 = unary(fn=<built-in function neg>, value=m2) ['$264unary_negative.59', 'm2']
    $binop_mul268.61 = $264unary_negative.59 * L1 ['$264unary_negative.59', '$binop_mul268.61', 'L1']
    $binop_mul274.63 = $binop_mul268.61 * Lc2 ['$binop_mul268.61', '$binop_mul274.63', 'Lc2']
    $binop_mul280.65 = $binop_mul274.63 * s12 ['$binop_mul274.63', '$binop_mul280.65', 's12']
    C23 = $binop_mul280.65 * theta2_dot      ['$binop_mul280.65', 'C23', 'theta2_dot']
    C31 = const(float, 0.0)                  ['C31']
    $binop_mul300.71 = m2 * L1               ['$binop_mul300.71', 'L1', 'm2']
    $binop_mul306.73 = $binop_mul300.71 * Lc2 ['$binop_mul300.71', '$binop_mul306.73', 'Lc2']
    $binop_mul312.75 = $binop_mul306.73 * s12 ['$binop_mul306.73', '$binop_mul312.75', 's12']
    C32 = $binop_mul312.75 * theta1_dot      ['$binop_mul312.75', 'C32', 'theta1_dot']
    C33 = c2                                 ['C33', 'c2']
    $328load_global.79 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$328load_global.79']
    $338load_attr.81 = getattr(value=$328load_global.79, attr=array) ['$328load_global.79', '$338load_attr.81']
    $364build_list.85 = build_list(items=[Var(C11, physics_matrices.py:207), Var(C12, physics_matrices.py:208), Var(C13, physics_matrices.py:209)]) ['$364build_list.85', 'C11', 'C12', 'C13']
    $372build_list.89 = build_list(items=[Var(C21, physics_matrices.py:211), Var(C22, physics_matrices.py:212), Var(C23, physics_matrices.py:213)]) ['$372build_list.89', 'C21', 'C22', 'C23']
    $380build_list.93 = build_list(items=[Var(C31, physics_matrices.py:215), Var(C32, physics_matrices.py:216), Var(C33, physics_matrices.py:217)]) ['$380build_list.93', 'C31', 'C32', 'C33']
    $382build_list.94 = build_list(items=[Var($364build_list.85, physics_matrices.py:220), Var($372build_list.89, physics_matrices.py:221), Var($380build_list.93, physics_matrices.py:222)]) ['$364build_list.85', '$372build_list.89', '$380build_list.93', '$382build_list.94']
    C = call $338load_attr.81($382build_list.94, func=$338load_attr.81, args=[Var($382build_list.94, physics_matrices.py:219)], kws=(), vararg=None, varkwarg=None, target=None) ['$338load_attr.81', '$382build_list.94', 'C']
    $396return_value.97 = cast(value=C)      ['$396return_value.97', 'C']
    return $396return_value.97               ['$396return_value.97']

2025-10-06 11:52:59 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:52:59 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253BB86F30>
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: theta1 = arg(0, name=theta1)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: theta2 = arg(1, name=theta2)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: theta1_dot = arg(2, name=theta1_dot)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: theta2_dot = arg(3, name=theta2_dot)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: m1 = arg(4, name=m1)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: m2 = arg(5, name=m2)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: L1 = arg(6, name=L1)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: L2 = arg(7, name=L2)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: Lc1 = arg(8, name=Lc1)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: Lc2 = arg(9, name=Lc2)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: c0 = arg(10, name=c0)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: c1 = arg(11, name=c1)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: c2 = arg(12, name=c2)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $14load_attr.2 = getattr(value=$4load_global.0, attr=sin)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: s1 = call $14load_attr.2(theta1, func=$14load_attr.2, args=[Var(theta1, physics_matrices.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $46load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $56load_attr.7 = getattr(value=$46load_global.5, attr=sin)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: s2 = call $56load_attr.7(theta2, func=$56load_attr.7, args=[Var(theta2, physics_matrices.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $88load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $98load_attr.12 = getattr(value=$88load_global.10, attr=sin)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_sub122.15 = theta1 - theta2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: s12 = call $98load_attr.12($binop_sub122.15, func=$98load_attr.12, args=[Var($binop_sub122.15, physics_matrices.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: C11 = c0
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul144.20 = m1 * Lc1
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul152.23 = m2 * L1
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_add156.24 = $binop_mul144.20 + $binop_mul152.23
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $160unary_negative.25 = unary(fn=<built-in function neg>, value=$binop_add156.24)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul164.27 = $160unary_negative.25 * s1
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul170.29 = $binop_mul164.27 * theta1_dot
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul178.32 = m2 * Lc2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul184.34 = $binop_mul178.32 * s2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul190.36 = $binop_mul184.34 * theta2_dot
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: C12 = $binop_mul170.29 - $binop_mul190.36
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $202unary_negative.39 = unary(fn=<built-in function neg>, value=m2)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul206.41 = $202unary_negative.39 * Lc2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul212.43 = $binop_mul206.41 * s2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: C13 = $binop_mul212.43 * theta2_dot
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: C21 = const(float, 0.0)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul234.50 = m2 * L1
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul240.52 = $binop_mul234.50 * Lc2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul246.54 = $binop_mul240.52 * s12
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul252.56 = $binop_mul246.54 * theta2_dot
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: C22 = c1 - $binop_mul252.56
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $264unary_negative.59 = unary(fn=<built-in function neg>, value=m2)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul268.61 = $264unary_negative.59 * L1
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul274.63 = $binop_mul268.61 * Lc2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul280.65 = $binop_mul274.63 * s12
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: C23 = $binop_mul280.65 * theta2_dot
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: C31 = const(float, 0.0)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul300.71 = m2 * L1
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul306.73 = $binop_mul300.71 * Lc2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul312.75 = $binop_mul306.73 * s12
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: C32 = $binop_mul312.75 * theta1_dot
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: C33 = c2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $328load_global.79 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $338load_attr.81 = getattr(value=$328load_global.79, attr=array)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $364build_list.85 = build_list(items=[Var(C11, physics_matrices.py:207), Var(C12, physics_matrices.py:208), Var(C13, physics_matrices.py:209)])
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $372build_list.89 = build_list(items=[Var(C21, physics_matrices.py:211), Var(C22, physics_matrices.py:212), Var(C23, physics_matrices.py:213)])
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $380build_list.93 = build_list(items=[Var(C31, physics_matrices.py:215), Var(C32, physics_matrices.py:216), Var(C33, physics_matrices.py:217)])
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $382build_list.94 = build_list(items=[Var($364build_list.85, physics_matrices.py:220), Var($372build_list.89, physics_matrices.py:221), Var($380build_list.93, physics_matrices.py:222)])
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: C = call $338load_attr.81($382build_list.94, func=$338load_attr.81, args=[Var($382build_list.94, physics_matrices.py:219)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $396return_value.97 = cast(value=C)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: return $396return_value.97
2025-10-06 11:52:59 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$14load_attr.2': [(<numba.core.ir.Assign object at 0x000001253BB53800>,
                                 0)],
             '$160unary_negative.25': [(<numba.core.ir.Assign object at 0x000001253BB7D430>,
                                        0)],
             '$202unary_negative.39': [(<numba.core.ir.Assign object at 0x000001253BB7E4E0>,
                                        0)],
             '$264unary_negative.59': [(<numba.core.ir.Assign object at 0x000001253BB7FE30>,
                                        0)],
             '$328load_global.79': [(<numba.core.ir.Assign object at 0x000001253BB858B0>,
                                     0)],
             '$338load_attr.81': [(<numba.core.ir.Assign object at 0x000001253BB85A00>,
                                   0)],
             '$364build_list.85': [(<numba.core.ir.Assign object at 0x000001253BB85E20>,
                                    0)],
             '$372build_list.89': [(<numba.core.ir.Assign object at 0x000001253BB86240>,
                                    0)],
             '$380build_list.93': [(<numba.core.ir.Assign object at 0x000001253BB86660>,
                                    0)],
             '$382build_list.94': [(<numba.core.ir.Assign object at 0x000001253BB867B0>,
                                    0)],
             '$396return_value.97': [(<numba.core.ir.Assign object at 0x000001253BB86C60>,
                                      0)],
             '$46load_global.5': [(<numba.core.ir.Assign object at 0x000001253BB53C80>,
                                   0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001253BB536B0>,
                                  0)],
             '$56load_attr.7': [(<numba.core.ir.Assign object at 0x000001253BB53DD0>,
                                 0)],
             '$88load_global.10': [(<numba.core.ir.Assign object at 0x000001253BB7C290>,
                                    0)],
             '$98load_attr.12': [(<numba.core.ir.Assign object at 0x000001253BB7C3E0>,
                                  0)],
             '$binop_add156.24': [(<numba.core.ir.Assign object at 0x000001253BB7D310>,
                                   0)],
             '$binop_mul144.20': [(<numba.core.ir.Assign object at 0x000001253BB7CE90>,
                                   0)],
             '$binop_mul152.23': [(<numba.core.ir.Assign object at 0x000001253BB7D1C0>,
                                   0)],
             '$binop_mul164.27': [(<numba.core.ir.Assign object at 0x000001253BB7D6A0>,
                                   0)],
             '$binop_mul170.29': [(<numba.core.ir.Assign object at 0x000001253BB7D8E0>,
                                   0)],
             '$binop_mul178.32': [(<numba.core.ir.Assign object at 0x000001253BB7DC10>,
                                   0)],
             '$binop_mul184.34': [(<numba.core.ir.Assign object at 0x000001253BB7DE50>,
                                   0)],
             '$binop_mul190.36': [(<numba.core.ir.Assign object at 0x000001253BB7E090>,
                                   0)],
             '$binop_mul206.41': [(<numba.core.ir.Assign object at 0x000001253BB7E750>,
                                   0)],
             '$binop_mul212.43': [(<numba.core.ir.Assign object at 0x000001253BB7E990>,
                                   0)],
             '$binop_mul234.50': [(<numba.core.ir.Assign object at 0x000001253BB7F320>,
                                   0)],
             '$binop_mul240.52': [(<numba.core.ir.Assign object at 0x000001253BB7F560>,
                                   0)],
             '$binop_mul246.54': [(<numba.core.ir.Assign object at 0x000001253BB7F7A0>,
                                   0)],
             '$binop_mul252.56': [(<numba.core.ir.Assign object at 0x000001253BB7F9E0>,
                                   0)],
             '$binop_mul268.61': [(<numba.core.ir.Assign object at 0x000001253BB840E0>,
                                   0)],
             '$binop_mul274.63': [(<numba.core.ir.Assign object at 0x000001253BB84320>,
                                   0)],
             '$binop_mul280.65': [(<numba.core.ir.Assign object at 0x000001253BB84560>,
                                   0)],
             '$binop_mul300.71': [(<numba.core.ir.Assign object at 0x000001253BB84E00>,
                                   0)],
             '$binop_mul306.73': [(<numba.core.ir.Assign object at 0x000001253BB85040>,
                                   0)],
             '$binop_mul312.75': [(<numba.core.ir.Assign object at 0x000001253BB85280>,
                                   0)],
             '$binop_sub122.15': [(<numba.core.ir.Assign object at 0x000001253BB7C740>,
                                   0)],
             'C': [(<numba.core.ir.Assign object at 0x000001253BB86960>, 0)],
             'C11': [(<numba.core.ir.Assign object at 0x000001253BB7CB30>, 0)],
             'C12': [(<numba.core.ir.Assign object at 0x000001253BB7E1E0>, 0)],
             'C13': [(<numba.core.ir.Assign object at 0x000001253BB7EBD0>, 0)],
             'C21': [(<numba.core.ir.Assign object at 0x000001253BB7EDE0>, 0)],
             'C22': [(<numba.core.ir.Assign object at 0x000001253BB7FB30>, 0)],
             'C23': [(<numba.core.ir.Assign object at 0x000001253BB847A0>, 0)],
             'C31': [(<numba.core.ir.Assign object at 0x000001253BB849B0>, 0)],
             'C32': [(<numba.core.ir.Assign object at 0x000001253BB854C0>, 0)],
             'C33': [(<numba.core.ir.Assign object at 0x000001253BB85760>, 0)],
             'L1': [(<numba.core.ir.Assign object at 0x000001253BB52EA0>, 0)],
             'L2': [(<numba.core.ir.Assign object at 0x000001253BB52FC0>, 0)],
             'Lc1': [(<numba.core.ir.Assign object at 0x000001253BB530E0>, 0)],
             'Lc2': [(<numba.core.ir.Assign object at 0x000001253BB53200>, 0)],
             'c0': [(<numba.core.ir.Assign object at 0x000001253BB53320>, 0)],
             'c1': [(<numba.core.ir.Assign object at 0x000001253BB53440>, 0)],
             'c2': [(<numba.core.ir.Assign object at 0x000001253BB53560>, 0)],
             'm1': [(<numba.core.ir.Assign object at 0x000001253BB52C60>, 0)],
             'm2': [(<numba.core.ir.Assign object at 0x000001253BB52D80>, 0)],
             's1': [(<numba.core.ir.Assign object at 0x000001253BB53AA0>, 0)],
             's12': [(<numba.core.ir.Assign object at 0x000001253BB7C8C0>, 0)],
             's2': [(<numba.core.ir.Assign object at 0x000001253BB7C0B0>, 0)],
             'theta1': [(<numba.core.ir.Assign object at 0x000001253BB52840>,
                         0)],
             'theta1_dot': [(<numba.core.ir.Assign object at 0x000001253BB52A20>,
                             0)],
             'theta2': [(<numba.core.ir.Assign object at 0x000001253BB52930>,
                         0)],
             'theta2_dot': [(<numba.core.ir.Assign object at 0x000001253BB52B40>,
                             0)]})
2025-10-06 11:52:59 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253BB84860>
2025-10-06 11:52:59 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=227)
           2	RESUME(arg=0, lineno=227)
           4	LOAD_GLOBAL(arg=1, lineno=236)
          14	LOAD_ATTR(arg=2, lineno=236)
          34	LOAD_FAST(arg=0, lineno=236)
          36	CALL(arg=1, lineno=236)
          44	STORE_FAST(arg=8, lineno=236)
          46	LOAD_GLOBAL(arg=1, lineno=237)
          56	LOAD_ATTR(arg=2, lineno=237)
          76	LOAD_FAST(arg=1, lineno=237)
          78	CALL(arg=1, lineno=237)
          86	STORE_FAST(arg=9, lineno=237)
          88	LOAD_CONST(arg=1, lineno=239)
          90	STORE_FAST(arg=10, lineno=239)
          92	LOAD_FAST(arg=2, lineno=240)
          94	LOAD_FAST(arg=5, lineno=240)
          96	BINARY_OP(arg=5, lineno=240)
         100	LOAD_FAST(arg=3, lineno=240)
         102	LOAD_FAST(arg=4, lineno=240)
         104	BINARY_OP(arg=5, lineno=240)
         108	BINARY_OP(arg=0, lineno=240)
         112	UNARY_NEGATIVE(arg=None, lineno=240)
         114	LOAD_FAST(arg=7, lineno=240)
         116	BINARY_OP(arg=5, lineno=240)
         120	LOAD_FAST(arg=8, lineno=240)
         122	BINARY_OP(arg=5, lineno=240)
         126	LOAD_FAST(arg=3, lineno=240)
         128	LOAD_FAST(arg=6, lineno=240)
         130	BINARY_OP(arg=5, lineno=240)
         134	LOAD_FAST(arg=7, lineno=240)
         136	BINARY_OP(arg=5, lineno=240)
         140	LOAD_FAST(arg=9, lineno=240)
         142	BINARY_OP(arg=5, lineno=240)
         146	BINARY_OP(arg=10, lineno=240)
         150	STORE_FAST(arg=11, lineno=240)
         152	LOAD_FAST(arg=3, lineno=241)
         154	UNARY_NEGATIVE(arg=None, lineno=241)
         156	LOAD_FAST(arg=6, lineno=241)
         158	BINARY_OP(arg=5, lineno=241)
         162	LOAD_FAST(arg=7, lineno=241)
         164	BINARY_OP(arg=5, lineno=241)
         168	LOAD_FAST(arg=9, lineno=241)
         170	BINARY_OP(arg=5, lineno=241)
         174	STORE_FAST(arg=12, lineno=241)
         176	LOAD_GLOBAL(arg=1, lineno=243)
         186	LOAD_ATTR(arg=4, lineno=243)
         206	LOAD_FAST(arg=10, lineno=243)
         208	LOAD_FAST(arg=11, lineno=243)
         210	LOAD_FAST(arg=12, lineno=243)
         212	BUILD_LIST(arg=3, lineno=243)
         214	CALL(arg=1, lineno=243)
         222	STORE_FAST(arg=13, lineno=243)
         224	LOAD_FAST(arg=13, lineno=245)
         226	RETURN_VALUE(arg=None, lineno=245)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:52:59 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=227)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=227)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=236)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=236)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=236)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=36, inst=CALL(arg=1, lineno=236)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2', '$theta134.3']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=44, inst=STORE_FAST(arg=8, lineno=236)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$36call.4']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=46, inst=LOAD_GLOBAL(arg=1, lineno=237)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=56, inst=LOAD_ATTR(arg=2, lineno=237)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$46load_global.5']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=76, inst=LOAD_FAST(arg=1, lineno=237)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$56load_attr.7']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=78, inst=CALL(arg=1, lineno=237)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$56load_attr.7', '$theta276.8']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=86, inst=STORE_FAST(arg=9, lineno=237)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$78call.9']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=88, inst=LOAD_CONST(arg=1, lineno=239)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=90, inst=STORE_FAST(arg=10, lineno=239)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$const88.10']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=94, inst=LOAD_FAST(arg=5, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$m192.11']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=96, inst=BINARY_OP(arg=5, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$m192.11', '$Lc194.12']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=100, inst=LOAD_FAST(arg=3, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul96.13']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul96.13', '$m2100.14']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=104, inst=BINARY_OP(arg=5, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul96.13', '$m2100.14', '$L1102.15']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=108, inst=BINARY_OP(arg=0, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul96.13', '$binop_mul104.16']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=112, inst=UNARY_NEGATIVE(arg=None, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_add108.17']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=114, inst=LOAD_FAST(arg=7, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$112unary_negative.18']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=116, inst=BINARY_OP(arg=5, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$112unary_negative.18', '$g114.19']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=120, inst=LOAD_FAST(arg=8, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul116.20']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=122, inst=BINARY_OP(arg=5, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul116.20', '$s1120.21']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul122.22']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=128, inst=LOAD_FAST(arg=6, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul122.22', '$m2126.23']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=130, inst=BINARY_OP(arg=5, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul122.22', '$m2126.23', '$Lc2128.24']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=134, inst=LOAD_FAST(arg=7, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul122.22', '$binop_mul130.25']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=136, inst=BINARY_OP(arg=5, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul122.22', '$binop_mul130.25', '$g134.26']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=140, inst=LOAD_FAST(arg=9, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul122.22', '$binop_mul136.27']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=142, inst=BINARY_OP(arg=5, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul122.22', '$binop_mul136.27', '$s2140.28']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=146, inst=BINARY_OP(arg=10, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul122.22', '$binop_mul142.29']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=150, inst=STORE_FAST(arg=11, lineno=240)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_sub146.30']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=152, inst=LOAD_FAST(arg=3, lineno=241)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=154, inst=UNARY_NEGATIVE(arg=None, lineno=241)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$m2152.31']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=156, inst=LOAD_FAST(arg=6, lineno=241)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$154unary_negative.32']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=158, inst=BINARY_OP(arg=5, lineno=241)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$154unary_negative.32', '$Lc2156.33']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=162, inst=LOAD_FAST(arg=7, lineno=241)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul158.34']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=164, inst=BINARY_OP(arg=5, lineno=241)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul158.34', '$g162.35']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=168, inst=LOAD_FAST(arg=9, lineno=241)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul164.36']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=170, inst=BINARY_OP(arg=5, lineno=241)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul164.36', '$s2168.37']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=174, inst=STORE_FAST(arg=12, lineno=241)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$binop_mul170.38']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=176, inst=LOAD_GLOBAL(arg=1, lineno=243)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=186, inst=LOAD_ATTR(arg=4, lineno=243)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$176.40', '$176load_global.39']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=206, inst=LOAD_FAST(arg=10, lineno=243)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$176.40', '$186load_attr.41']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=208, inst=LOAD_FAST(arg=11, lineno=243)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$176.40', '$186load_attr.41', '$G1206.42']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=210, inst=LOAD_FAST(arg=12, lineno=243)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$176.40', '$186load_attr.41', '$G1206.42', '$G2208.43']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=212, inst=BUILD_LIST(arg=3, lineno=243)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$176.40', '$186load_attr.41', '$G1206.42', '$G2208.43', '$G3210.44']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=214, inst=CALL(arg=1, lineno=243)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$176.40', '$186load_attr.41', '$212build_list.45']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=222, inst=STORE_FAST(arg=13, lineno=243)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$214call.46']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=224, inst=LOAD_FAST(arg=13, lineno=245)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=226, inst=RETURN_VALUE(arg=None, lineno=245)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$G224.47']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:59 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:52:59 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:52:59 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:52:59 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:52:59 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'item': '$4load_global.0', 'res': '$14load_attr.2'}), (34, {'res': '$theta134.3'}), (36, {'func': '$14load_attr.2', 'args': ['$theta134.3'], 'kw_names': None, 'res': '$36call.4'}), (44, {'value': '$36call.4'}), (46, {'idx': 0, 'res': '$46load_global.5'}), (56, {'item': '$46load_global.5', 'res': '$56load_attr.7'}), (76, {'res': '$theta276.8'}), (78, {'func': '$56load_attr.7', 'args': ['$theta276.8'], 'kw_names': None, 'res': '$78call.9'}), (86, {'value': '$78call.9'}), (88, {'res': '$const88.10'}), (90, {'value': '$const88.10'}), (92, {'res': '$m192.11'}), (94, {'res': '$Lc194.12'}), (96, {'op': '*', 'lhs': '$m192.11', 'rhs': '$Lc194.12', 'res': '$binop_mul96.13'}), (100, {'res': '$m2100.14'}), (102, {'res': '$L1102.15'}), (104, {'op': '*', 'lhs': '$m2100.14', 'rhs': '$L1102.15', 'res': '$binop_mul104.16'}), (108, {'op': '+', 'lhs': '$binop_mul96.13', 'rhs': '$binop_mul104.16', 'res': '$binop_add108.17'}), (112, {'value': '$binop_add108.17', 'res': '$112unary_negative.18'}), (114, {'res': '$g114.19'}), (116, {'op': '*', 'lhs': '$112unary_negative.18', 'rhs': '$g114.19', 'res': '$binop_mul116.20'}), (120, {'res': '$s1120.21'}), (122, {'op': '*', 'lhs': '$binop_mul116.20', 'rhs': '$s1120.21', 'res': '$binop_mul122.22'}), (126, {'res': '$m2126.23'}), (128, {'res': '$Lc2128.24'}), (130, {'op': '*', 'lhs': '$m2126.23', 'rhs': '$Lc2128.24', 'res': '$binop_mul130.25'}), (134, {'res': '$g134.26'}), (136, {'op': '*', 'lhs': '$binop_mul130.25', 'rhs': '$g134.26', 'res': '$binop_mul136.27'}), (140, {'res': '$s2140.28'}), (142, {'op': '*', 'lhs': '$binop_mul136.27', 'rhs': '$s2140.28', 'res': '$binop_mul142.29'}), (146, {'op': '-', 'lhs': '$binop_mul122.22', 'rhs': '$binop_mul142.29', 'res': '$binop_sub146.30'}), (150, {'value': '$binop_sub146.30'}), (152, {'res': '$m2152.31'}), (154, {'value': '$m2152.31', 'res': '$154unary_negative.32'}), (156, {'res': '$Lc2156.33'}), (158, {'op': '*', 'lhs': '$154unary_negative.32', 'rhs': '$Lc2156.33', 'res': '$binop_mul158.34'}), (162, {'res': '$g162.35'}), (164, {'op': '*', 'lhs': '$binop_mul158.34', 'rhs': '$g162.35', 'res': '$binop_mul164.36'}), (168, {'res': '$s2168.37'}), (170, {'op': '*', 'lhs': '$binop_mul164.36', 'rhs': '$s2168.37', 'res': '$binop_mul170.38'}), (174, {'value': '$binop_mul170.38'}), (176, {'idx': 0, 'res': '$176load_global.39'}), (186, {'item': '$176load_global.39', 'res': '$186load_attr.41'}), (206, {'res': '$G1206.42'}), (208, {'res': '$G2208.43'}), (210, {'res': '$G3210.44'}), (212, {'items': ['$G1206.42', '$G2208.43', '$G3210.44'], 'res': '$212build_list.45'}), (214, {'func': '$186load_attr.41', 'args': ['$212build_list.45'], 'kw_names': None, 'res': '$214call.46'}), (222, {'value': '$214call.46'}), (224, {'res': '$G224.47'}), (226, {'retval': '$G224.47', 'castval': '$226return_value.48'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:59 [   DEBUG] interpreter.py:1416 - label 0:
    theta1 = arg(0, name=theta1)             ['theta1']
    theta2 = arg(1, name=theta2)             ['theta2']
    m1 = arg(2, name=m1)                     ['m1']
    m2 = arg(3, name=m2)                     ['m2']
    L1 = arg(4, name=L1)                     ['L1']
    Lc1 = arg(5, name=Lc1)                   ['Lc1']
    Lc2 = arg(6, name=Lc2)                   ['Lc2']
    g = arg(7, name=g)                       ['g']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $14load_attr.2 = getattr(value=$4load_global.0, attr=sin) ['$14load_attr.2', '$4load_global.0']
    s1 = call $14load_attr.2(theta1, func=$14load_attr.2, args=[Var(theta1, physics_matrices.py:227)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_attr.2', 's1', 'theta1']
    $46load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$46load_global.5']
    $56load_attr.7 = getattr(value=$46load_global.5, attr=sin) ['$46load_global.5', '$56load_attr.7']
    s2 = call $56load_attr.7(theta2, func=$56load_attr.7, args=[Var(theta2, physics_matrices.py:227)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_attr.7', 's2', 'theta2']
    G1 = const(float, 0.0)                   ['G1']
    $binop_mul96.13 = m1 * Lc1               ['$binop_mul96.13', 'Lc1', 'm1']
    $binop_mul104.16 = m2 * L1               ['$binop_mul104.16', 'L1', 'm2']
    $binop_add108.17 = $binop_mul96.13 + $binop_mul104.16 ['$binop_add108.17', '$binop_mul104.16', '$binop_mul96.13']
    $112unary_negative.18 = unary(fn=<built-in function neg>, value=$binop_add108.17) ['$112unary_negative.18', '$binop_add108.17']
    $binop_mul116.20 = $112unary_negative.18 * g ['$112unary_negative.18', '$binop_mul116.20', 'g']
    $binop_mul122.22 = $binop_mul116.20 * s1 ['$binop_mul116.20', '$binop_mul122.22', 's1']
    $binop_mul130.25 = m2 * Lc2              ['$binop_mul130.25', 'Lc2', 'm2']
    $binop_mul136.27 = $binop_mul130.25 * g  ['$binop_mul130.25', '$binop_mul136.27', 'g']
    $binop_mul142.29 = $binop_mul136.27 * s2 ['$binop_mul136.27', '$binop_mul142.29', 's2']
    G2 = $binop_mul122.22 - $binop_mul142.29 ['$binop_mul122.22', '$binop_mul142.29', 'G2']
    $154unary_negative.32 = unary(fn=<built-in function neg>, value=m2) ['$154unary_negative.32', 'm2']
    $binop_mul158.34 = $154unary_negative.32 * Lc2 ['$154unary_negative.32', '$binop_mul158.34', 'Lc2']
    $binop_mul164.36 = $binop_mul158.34 * g  ['$binop_mul158.34', '$binop_mul164.36', 'g']
    G3 = $binop_mul164.36 * s2               ['$binop_mul164.36', 'G3', 's2']
    $176load_global.39 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$176load_global.39']
    $186load_attr.41 = getattr(value=$176load_global.39, attr=array) ['$176load_global.39', '$186load_attr.41']
    $212build_list.45 = build_list(items=[Var(G1, physics_matrices.py:239), Var(G2, physics_matrices.py:240), Var(G3, physics_matrices.py:241)]) ['$212build_list.45', 'G1', 'G2', 'G3']
    G = call $186load_attr.41($212build_list.45, func=$186load_attr.41, args=[Var($212build_list.45, physics_matrices.py:243)], kws=(), vararg=None, varkwarg=None, target=None) ['$186load_attr.41', '$212build_list.45', 'G']
    $226return_value.48 = cast(value=G)      ['$226return_value.48', 'G']
    return $226return_value.48               ['$226return_value.48']

2025-10-06 11:52:59 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:52:59 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253BC73320>
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: theta1 = arg(0, name=theta1)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: theta2 = arg(1, name=theta2)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: m1 = arg(2, name=m1)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: m2 = arg(3, name=m2)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: L1 = arg(4, name=L1)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: Lc1 = arg(5, name=Lc1)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: Lc2 = arg(6, name=Lc2)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: g = arg(7, name=g)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $14load_attr.2 = getattr(value=$4load_global.0, attr=sin)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: s1 = call $14load_attr.2(theta1, func=$14load_attr.2, args=[Var(theta1, physics_matrices.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $46load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $56load_attr.7 = getattr(value=$46load_global.5, attr=sin)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: s2 = call $56load_attr.7(theta2, func=$56load_attr.7, args=[Var(theta2, physics_matrices.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: G1 = const(float, 0.0)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul96.13 = m1 * Lc1
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul104.16 = m2 * L1
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_add108.17 = $binop_mul96.13 + $binop_mul104.16
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $112unary_negative.18 = unary(fn=<built-in function neg>, value=$binop_add108.17)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul116.20 = $112unary_negative.18 * g
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul122.22 = $binop_mul116.20 * s1
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul130.25 = m2 * Lc2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul136.27 = $binop_mul130.25 * g
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul142.29 = $binop_mul136.27 * s2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: G2 = $binop_mul122.22 - $binop_mul142.29
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $154unary_negative.32 = unary(fn=<built-in function neg>, value=m2)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul158.34 = $154unary_negative.32 * Lc2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $binop_mul164.36 = $binop_mul158.34 * g
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: G3 = $binop_mul164.36 * s2
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $176load_global.39 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $186load_attr.41 = getattr(value=$176load_global.39, attr=array)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $212build_list.45 = build_list(items=[Var(G1, physics_matrices.py:239), Var(G2, physics_matrices.py:240), Var(G3, physics_matrices.py:241)])
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: G = call $186load_attr.41($212build_list.45, func=$186load_attr.41, args=[Var($212build_list.45, physics_matrices.py:243)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $226return_value.48 = cast(value=G)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: return $226return_value.48
2025-10-06 11:52:59 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$112unary_negative.18': [(<numba.core.ir.Assign object at 0x000001253BC70DA0>,
                                        0)],
             '$14load_attr.2': [(<numba.core.ir.Assign object at 0x000001253BC578C0>,
                                 0)],
             '$154unary_negative.32': [(<numba.core.ir.Assign object at 0x000001253BC71E50>,
                                        0)],
             '$176load_global.39': [(<numba.core.ir.Assign object at 0x000001253BC72750>,
                                     0)],
             '$186load_attr.41': [(<numba.core.ir.Assign object at 0x000001253BC728A0>,
                                   0)],
             '$212build_list.45': [(<numba.core.ir.Assign object at 0x000001253BC72CC0>,
                                    0)],
             '$226return_value.48': [(<numba.core.ir.Assign object at 0x000001253BC73170>,
                                      0)],
             '$46load_global.5': [(<numba.core.ir.Assign object at 0x000001253BC57D70>,
                                   0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001253BC57770>,
                                  0)],
             '$56load_attr.7': [(<numba.core.ir.Assign object at 0x000001253BC57EC0>,
                                 0)],
             '$binop_add108.17': [(<numba.core.ir.Assign object at 0x000001253BC70C80>,
                                   0)],
             '$binop_mul104.16': [(<numba.core.ir.Assign object at 0x000001253BC70B30>,
                                   0)],
             '$binop_mul116.20': [(<numba.core.ir.Assign object at 0x000001253BC71010>,
                                   0)],
             '$binop_mul122.22': [(<numba.core.ir.Assign object at 0x000001253BC71250>,
                                   0)],
             '$binop_mul130.25': [(<numba.core.ir.Assign object at 0x000001253BC71580>,
                                   0)],
             '$binop_mul136.27': [(<numba.core.ir.Assign object at 0x000001253BC717C0>,
                                   0)],
             '$binop_mul142.29': [(<numba.core.ir.Assign object at 0x000001253BC71A00>,
                                   0)],
             '$binop_mul158.34': [(<numba.core.ir.Assign object at 0x000001253BC720C0>,
                                   0)],
             '$binop_mul164.36': [(<numba.core.ir.Assign object at 0x000001253BC72300>,
                                   0)],
             '$binop_mul96.13': [(<numba.core.ir.Assign object at 0x000001253BC70800>,
                                  0)],
             'G': [(<numba.core.ir.Assign object at 0x000001253BC72E70>, 0)],
             'G1': [(<numba.core.ir.Assign object at 0x000001253BC703B0>, 0)],
             'G2': [(<numba.core.ir.Assign object at 0x000001253BC71B50>, 0)],
             'G3': [(<numba.core.ir.Assign object at 0x000001253BC72540>, 0)],
             'L1': [(<numba.core.ir.Assign object at 0x000001253BC57290>, 0)],
             'Lc1': [(<numba.core.ir.Assign object at 0x000001253BC573B0>, 0)],
             'Lc2': [(<numba.core.ir.Assign object at 0x000001253BC574D0>, 0)],
             'g': [(<numba.core.ir.Assign object at 0x000001253BC575F0>, 0)],
             'm1': [(<numba.core.ir.Assign object at 0x000001253BC57050>, 0)],
             'm2': [(<numba.core.ir.Assign object at 0x000001253BC57170>, 0)],
             's1': [(<numba.core.ir.Assign object at 0x000001253BC57B60>, 0)],
             's2': [(<numba.core.ir.Assign object at 0x000001253BC701A0>, 0)],
             'theta1': [(<numba.core.ir.Assign object at 0x000001253BC56E10>,
                         0)],
             'theta2': [(<numba.core.ir.Assign object at 0x000001253BC56F30>,
                         0)]})
2025-10-06 11:52:59 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253BC80890>
2025-10-06 11:52:59 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=5431)
           2	RESUME(arg=0, lineno=5431)
           4	LOAD_GLOBAL(arg=1, lineno=5432)
          14	LOAD_FAST(arg=0, lineno=5432)
          16	LOAD_FAST(arg=1, lineno=5432)
          18	CALL(arg=2, lineno=5432)
          26	RETURN_VALUE(arg=None, lineno=5432)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:52:59 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=5431)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=5431)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=5432)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=5432)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=5432)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0', '$object14.2']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=18, inst=CALL(arg=2, lineno=5432)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0', '$object14.2', '$dtype16.3']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:350 - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=5432)
2025-10-06 11:52:59 [   DEBUG] byteflow.py:351 - stack ['$18call.4']
2025-10-06 11:52:59 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:52:59 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:52:59 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:52:59 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:52:59 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:52:59 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:52:59 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$object14.2'}), (16, {'res': '$dtype16.3'}), (18, {'func': '$4load_global.0', 'args': ['$object14.2', '$dtype16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:52:59 [   DEBUG] interpreter.py:1416 - label 0:
    object = arg(0, name=object)             ['object']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np_array: <intrinsic np_array>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(object, dtype, func=$4load_global.0, args=[Var(object, arrayobj.py:5431), Var(dtype, arrayobj.py:5431)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'dtype', 'object']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-10-06 11:52:59 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:52:59 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253BC83B30>
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: object = arg(0, name=object)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: dtype = arg(1, name=dtype)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $4load_global.0 = global(np_array: <intrinsic np_array>)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $18call.4 = call $4load_global.0(object, dtype, func=$4load_global.0, args=[Var(object, arrayobj.py:5431), Var(dtype, arrayobj.py:5431)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-10-06 11:52:59 [   DEBUG] ssa.py:210 - on stmt: return $26return_value.5
2025-10-06 11:52:59 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001253BC94F20>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001253BC95040>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001253BC94B90>,
                                  0)],
             'dtype': [(<numba.core.ir.Assign object at 0x000001253BC94A10>,
                        0)],
             'object': [(<numba.core.ir.Assign object at 0x000001253BC948F0>,
                         0)]})
2025-10-06 11:52:59 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253BC94680>
2025-10-06 11:53:00 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=4377)
           2	COPY_FREE_VARS(arg=1, lineno=4377)
           4	RESUME(arg=0, lineno=4377)
           6	LOAD_GLOBAL(arg=1, lineno=4378)
          16	LOAD_FAST(arg=0, lineno=4378)
          18	LOAD_FAST(arg=1, lineno=4378)
          20	LOAD_DEREF(arg=2, lineno=4378)
          22	CALL(arg=3, lineno=4378)
          30	RETURN_VALUE(arg=None, lineno=4378)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:53:00 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=4377)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4377)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=RESUME(arg=0, lineno=4377)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4378)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4378)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$6.1', '$6load_global.0']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=4378)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$6.1', '$6load_global.0', '$shape16.2']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=20, inst=LOAD_DEREF(arg=2, lineno=4378)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$6.1', '$6load_global.0', '$shape16.2', '$dtype18.3']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=22, inst=CALL(arg=3, lineno=4378)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$6.1', '$6load_global.0', '$shape16.2', '$dtype18.3', '$20load_deref.4']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=4378)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$22call.5']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:53:00 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:53:00 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:53:00 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:53:00 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:00 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:00 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:53:00 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:53:00 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:53:00 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (16, {'res': '$shape16.2'}), (18, {'res': '$dtype18.3'}), (20, {'res': '$20load_deref.4'}), (22, {'func': '$6load_global.0', 'args': ['$shape16.2', '$dtype18.3', '$20load_deref.4'], 'kw_names': None, 'res': '$22call.5'}), (30, {'retval': '$22call.5', 'castval': '$30return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:53:00 [   DEBUG] interpreter.py:1416 - label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $20load_deref.4 = freevar(retty: array(float64, 1d, C)) ['$20load_deref.4']
    $22call.5 = call $6load_global.0(shape, dtype, $20load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4377), Var(dtype, arrayobj.py:4377), Var($20load_deref.4, arrayobj.py:4378)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_deref.4', '$22call.5', '$6load_global.0', 'dtype', 'shape']
    $30return_value.6 = cast(value=$22call.5) ['$22call.5', '$30return_value.6']
    return $30return_value.6                 ['$30return_value.6']

2025-10-06 11:53:00 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:53:00 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253BCCB9E0>
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: shape = arg(0, name=shape)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: dtype = arg(1, name=dtype)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $20load_deref.4 = freevar(retty: array(float64, 1d, C))
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $22call.5 = call $6load_global.0(shape, dtype, $20load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4377), Var(dtype, arrayobj.py:4377), Var($20load_deref.4, arrayobj.py:4378)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $30return_value.6 = cast(value=$22call.5)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: return $30return_value.6
2025-10-06 11:53:00 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$20load_deref.4': [(<numba.core.ir.Assign object at 0x000001253BCE48C0>,
                                  0)],
             '$22call.5': [(<numba.core.ir.Assign object at 0x000001253BCE4A70>,
                            0)],
             '$30return_value.6': [(<numba.core.ir.Assign object at 0x000001253BCE4B90>,
                                    0)],
             '$6load_global.0': [(<numba.core.ir.Assign object at 0x000001253BCE45C0>,
                                  0)],
             'dtype': [(<numba.core.ir.Assign object at 0x000001253BCE4440>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x000001253BCE4320>,
                        0)]})
2025-10-06 11:53:00 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253BCB99D0>
2025-10-06 11:53:00 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=310)
           2	RESUME(arg=0, lineno=310)
           4	LOAD_GLOBAL(arg=1, lineno=319)
          14	LOAD_ATTR(arg=2, lineno=319)
          34	LOAD_FAST(arg=0, lineno=319)
          36	CALL(arg=1, lineno=319)
          44	STORE_FAST(arg=11, lineno=319)
          46	LOAD_GLOBAL(arg=1, lineno=320)
          56	LOAD_ATTR(arg=2, lineno=320)
          76	LOAD_FAST(arg=1, lineno=320)
          78	CALL(arg=1, lineno=320)
          86	STORE_FAST(arg=12, lineno=320)
          88	LOAD_GLOBAL(arg=1, lineno=321)
          98	LOAD_ATTR(arg=2, lineno=321)
         118	LOAD_FAST(arg=0, lineno=321)
         120	LOAD_FAST(arg=1, lineno=321)
         122	BINARY_OP(arg=10, lineno=321)
         126	CALL(arg=1, lineno=321)
         134	STORE_FAST(arg=13, lineno=321)
         136	LOAD_FAST(arg=2, lineno=324)
         138	LOAD_FAST(arg=3, lineno=324)
         140	BINARY_OP(arg=0, lineno=324)
         144	LOAD_FAST(arg=4, lineno=324)
         146	BINARY_OP(arg=0, lineno=324)
         150	STORE_FAST(arg=14, lineno=324)
         152	LOAD_FAST(arg=3, lineno=325)
         154	LOAD_FAST(arg=7, lineno=325)
         156	BINARY_OP(arg=5, lineno=325)
         160	LOAD_FAST(arg=4, lineno=325)
         162	LOAD_FAST(arg=5, lineno=325)
         164	BINARY_OP(arg=5, lineno=325)
         168	BINARY_OP(arg=0, lineno=325)
         172	LOAD_FAST(arg=11, lineno=325)
         174	BINARY_OP(arg=5, lineno=325)
         178	LOAD_FAST(arg=4, lineno=325)
         180	LOAD_FAST(arg=8, lineno=325)
         182	BINARY_OP(arg=5, lineno=325)
         186	LOAD_FAST(arg=12, lineno=325)
         188	BINARY_OP(arg=5, lineno=325)
         192	BINARY_OP(arg=0, lineno=325)
         196	STORE_FAST(arg=15, lineno=325)
         198	LOAD_FAST(arg=4, lineno=326)
         200	LOAD_FAST(arg=8, lineno=326)
         202	BINARY_OP(arg=5, lineno=326)
         206	LOAD_FAST(arg=12, lineno=326)
         208	BINARY_OP(arg=5, lineno=326)
         212	STORE_FAST(arg=16, lineno=326)
         214	LOAD_FAST(arg=15, lineno=328)
         216	STORE_FAST(arg=17, lineno=328)
         218	LOAD_FAST(arg=3, lineno=329)
         220	LOAD_FAST(arg=7, lineno=329)
         222	LOAD_CONST(arg=1, lineno=329)
         224	BINARY_OP(arg=8, lineno=329)
         228	BINARY_OP(arg=5, lineno=329)
         232	LOAD_FAST(arg=4, lineno=329)
         234	LOAD_FAST(arg=5, lineno=329)
         236	LOAD_CONST(arg=1, lineno=329)
         238	BINARY_OP(arg=8, lineno=329)
         242	BINARY_OP(arg=5, lineno=329)
         246	BINARY_OP(arg=0, lineno=329)
         250	LOAD_FAST(arg=9, lineno=329)
         252	BINARY_OP(arg=0, lineno=329)
         256	LOAD_FAST(arg=4, lineno=329)
         258	LOAD_FAST(arg=8, lineno=329)
         260	LOAD_CONST(arg=1, lineno=329)
         262	BINARY_OP(arg=8, lineno=329)
         266	BINARY_OP(arg=5, lineno=329)
         270	BINARY_OP(arg=0, lineno=329)
         274	LOAD_FAST(arg=10, lineno=329)
         276	BINARY_OP(arg=0, lineno=329)
         280	LOAD_CONST(arg=1, lineno=329)
         282	LOAD_FAST(arg=4, lineno=329)
         284	BINARY_OP(arg=5, lineno=329)
         288	LOAD_FAST(arg=5, lineno=329)
         290	BINARY_OP(arg=5, lineno=329)
         294	LOAD_FAST(arg=8, lineno=329)
         296	BINARY_OP(arg=5, lineno=329)
         300	LOAD_FAST(arg=13, lineno=329)
         302	BINARY_OP(arg=5, lineno=329)
         306	BINARY_OP(arg=0, lineno=329)
         310	STORE_FAST(arg=18, lineno=329)
         312	LOAD_FAST(arg=4, lineno=330)
         314	LOAD_FAST(arg=8, lineno=330)
         316	LOAD_CONST(arg=1, lineno=330)
         318	BINARY_OP(arg=8, lineno=330)
         322	BINARY_OP(arg=5, lineno=330)
         326	LOAD_FAST(arg=10, lineno=330)
         328	BINARY_OP(arg=0, lineno=330)
         332	LOAD_FAST(arg=4, lineno=330)
         334	LOAD_FAST(arg=5, lineno=330)
         336	BINARY_OP(arg=5, lineno=330)
         340	LOAD_FAST(arg=8, lineno=330)
         342	BINARY_OP(arg=5, lineno=330)
         346	LOAD_FAST(arg=13, lineno=330)
         348	BINARY_OP(arg=5, lineno=330)
         352	BINARY_OP(arg=0, lineno=330)
         356	STORE_FAST(arg=19, lineno=330)
         358	LOAD_FAST(arg=16, lineno=332)
         360	STORE_FAST(arg=20, lineno=332)
         362	LOAD_FAST(arg=19, lineno=333)
         364	STORE_FAST(arg=21, lineno=333)
         366	LOAD_FAST(arg=4, lineno=334)
         368	LOAD_FAST(arg=8, lineno=334)
         370	LOAD_CONST(arg=1, lineno=334)
         372	BINARY_OP(arg=8, lineno=334)
         376	BINARY_OP(arg=5, lineno=334)
         380	LOAD_FAST(arg=10, lineno=334)
         382	BINARY_OP(arg=0, lineno=334)
         386	STORE_FAST(arg=22, lineno=334)
         388	LOAD_GLOBAL(arg=1, lineno=336)
         398	LOAD_ATTR(arg=4, lineno=336)
         418	LOAD_FAST(arg=14, lineno=337)
         420	LOAD_FAST(arg=15, lineno=337)
         422	LOAD_FAST(arg=16, lineno=337)
         424	BUILD_LIST(arg=3, lineno=337)
         426	LOAD_FAST(arg=17, lineno=338)
         428	LOAD_FAST(arg=18, lineno=338)
         430	LOAD_FAST(arg=19, lineno=338)
         432	BUILD_LIST(arg=3, lineno=338)
         434	LOAD_FAST(arg=20, lineno=339)
         436	LOAD_FAST(arg=21, lineno=339)
         438	LOAD_FAST(arg=22, lineno=339)
         440	BUILD_LIST(arg=3, lineno=339)
         442	BUILD_LIST(arg=3, lineno=336)
         444	CALL(arg=1, lineno=336)
         452	STORE_FAST(arg=23, lineno=336)
         454	LOAD_FAST(arg=23, lineno=342)
         456	RETURN_VALUE(arg=None, lineno=342)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:53:00 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=310)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=310)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=319)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=319)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=319)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=36, inst=CALL(arg=1, lineno=319)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2', '$theta134.3']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=44, inst=STORE_FAST(arg=11, lineno=319)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$36call.4']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=46, inst=LOAD_GLOBAL(arg=1, lineno=320)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=56, inst=LOAD_ATTR(arg=2, lineno=320)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$46load_global.5']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=76, inst=LOAD_FAST(arg=1, lineno=320)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$56load_attr.7']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=78, inst=CALL(arg=1, lineno=320)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$56load_attr.7', '$theta276.8']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=86, inst=STORE_FAST(arg=12, lineno=320)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$78call.9']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=321)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=98, inst=LOAD_ATTR(arg=2, lineno=321)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$88load_global.10']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=321)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=120, inst=LOAD_FAST(arg=1, lineno=321)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12', '$theta1118.13']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=122, inst=BINARY_OP(arg=10, lineno=321)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12', '$theta1118.13', '$theta2120.14']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=126, inst=CALL(arg=1, lineno=321)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12', '$binop_sub122.15']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=134, inst=STORE_FAST(arg=13, lineno=321)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$126call.16']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=136, inst=LOAD_FAST(arg=2, lineno=324)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=138, inst=LOAD_FAST(arg=3, lineno=324)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m0136.17']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=140, inst=BINARY_OP(arg=0, lineno=324)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m0136.17', '$m1138.18']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=144, inst=LOAD_FAST(arg=4, lineno=324)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add140.19']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=146, inst=BINARY_OP(arg=0, lineno=324)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add140.19', '$m2144.20']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=150, inst=STORE_FAST(arg=14, lineno=324)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add146.21']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=152, inst=LOAD_FAST(arg=3, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=154, inst=LOAD_FAST(arg=7, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m1152.22']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=156, inst=BINARY_OP(arg=5, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m1152.22', '$Lc1154.23']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=160, inst=LOAD_FAST(arg=4, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul156.24']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=162, inst=LOAD_FAST(arg=5, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul156.24', '$m2160.25']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=164, inst=BINARY_OP(arg=5, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul156.24', '$m2160.25', '$L1162.26']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=168, inst=BINARY_OP(arg=0, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul156.24', '$binop_mul164.27']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=172, inst=LOAD_FAST(arg=11, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add168.28']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=174, inst=BINARY_OP(arg=5, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add168.28', '$c1172.29']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=178, inst=LOAD_FAST(arg=4, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul174.30']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=180, inst=LOAD_FAST(arg=8, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul174.30', '$m2178.31']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=182, inst=BINARY_OP(arg=5, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul174.30', '$m2178.31', '$Lc2180.32']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=186, inst=LOAD_FAST(arg=12, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul174.30', '$binop_mul182.33']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=188, inst=BINARY_OP(arg=5, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul174.30', '$binop_mul182.33', '$c2186.34']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=192, inst=BINARY_OP(arg=0, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul174.30', '$binop_mul188.35']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=196, inst=STORE_FAST(arg=15, lineno=325)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add192.36']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=198, inst=LOAD_FAST(arg=4, lineno=326)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=200, inst=LOAD_FAST(arg=8, lineno=326)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m2198.37']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=202, inst=BINARY_OP(arg=5, lineno=326)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m2198.37', '$Lc2200.38']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=206, inst=LOAD_FAST(arg=12, lineno=326)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul202.39']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=208, inst=BINARY_OP(arg=5, lineno=326)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul202.39', '$c2206.40']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=212, inst=STORE_FAST(arg=16, lineno=326)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul208.41']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=214, inst=LOAD_FAST(arg=15, lineno=328)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=216, inst=STORE_FAST(arg=17, lineno=328)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$M12214.42']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=218, inst=LOAD_FAST(arg=3, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=220, inst=LOAD_FAST(arg=7, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m1218.43']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=222, inst=LOAD_CONST(arg=1, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m1218.43', '$Lc1220.44']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=224, inst=BINARY_OP(arg=8, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m1218.43', '$Lc1220.44', '$const222.45']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=228, inst=BINARY_OP(arg=5, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m1218.43', '$binop_pow224.46']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=232, inst=LOAD_FAST(arg=4, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul228.47']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=234, inst=LOAD_FAST(arg=5, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul228.47', '$m2232.48']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=236, inst=LOAD_CONST(arg=1, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul228.47', '$m2232.48', '$L1234.49']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=238, inst=BINARY_OP(arg=8, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul228.47', '$m2232.48', '$L1234.49', '$const236.50']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=242, inst=BINARY_OP(arg=5, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul228.47', '$m2232.48', '$binop_pow238.51']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=246, inst=BINARY_OP(arg=0, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul228.47', '$binop_mul242.52']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=250, inst=LOAD_FAST(arg=9, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add246.53']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=252, inst=BINARY_OP(arg=0, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add246.53', '$I1250.54']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=256, inst=LOAD_FAST(arg=4, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add252.55']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=258, inst=LOAD_FAST(arg=8, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add252.55', '$m2256.56']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=260, inst=LOAD_CONST(arg=1, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add252.55', '$m2256.56', '$Lc2258.57']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=262, inst=BINARY_OP(arg=8, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add252.55', '$m2256.56', '$Lc2258.57', '$const260.58']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=266, inst=BINARY_OP(arg=5, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add252.55', '$m2256.56', '$binop_pow262.59']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=270, inst=BINARY_OP(arg=0, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add252.55', '$binop_mul266.60']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=274, inst=LOAD_FAST(arg=10, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add270.61']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=276, inst=BINARY_OP(arg=0, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add270.61', '$I2274.62']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=280, inst=LOAD_CONST(arg=1, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add276.63']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=282, inst=LOAD_FAST(arg=4, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add276.63', '$const280.64']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=284, inst=BINARY_OP(arg=5, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add276.63', '$const280.64', '$m2282.65']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=288, inst=LOAD_FAST(arg=5, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add276.63', '$binop_mul284.66']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=290, inst=BINARY_OP(arg=5, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add276.63', '$binop_mul284.66', '$L1288.67']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=294, inst=LOAD_FAST(arg=8, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add276.63', '$binop_mul290.68']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=296, inst=BINARY_OP(arg=5, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add276.63', '$binop_mul290.68', '$Lc2294.69']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=300, inst=LOAD_FAST(arg=13, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add276.63', '$binop_mul296.70']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=302, inst=BINARY_OP(arg=5, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add276.63', '$binop_mul296.70', '$c12300.71']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=306, inst=BINARY_OP(arg=0, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add276.63', '$binop_mul302.72']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=310, inst=STORE_FAST(arg=18, lineno=329)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add306.73']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=312, inst=LOAD_FAST(arg=4, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=314, inst=LOAD_FAST(arg=8, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m2312.74']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=316, inst=LOAD_CONST(arg=1, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m2312.74', '$Lc2314.75']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=318, inst=BINARY_OP(arg=8, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m2312.74', '$Lc2314.75', '$const316.76']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=322, inst=BINARY_OP(arg=5, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m2312.74', '$binop_pow318.77']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=326, inst=LOAD_FAST(arg=10, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul322.78']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=328, inst=BINARY_OP(arg=0, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul322.78', '$I2326.79']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=332, inst=LOAD_FAST(arg=4, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add328.80']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=334, inst=LOAD_FAST(arg=5, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add328.80', '$m2332.81']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=336, inst=BINARY_OP(arg=5, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add328.80', '$m2332.81', '$L1334.82']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=340, inst=LOAD_FAST(arg=8, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add328.80', '$binop_mul336.83']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=342, inst=BINARY_OP(arg=5, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add328.80', '$binop_mul336.83', '$Lc2340.84']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=346, inst=LOAD_FAST(arg=13, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add328.80', '$binop_mul342.85']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=348, inst=BINARY_OP(arg=5, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add328.80', '$binop_mul342.85', '$c12346.86']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=352, inst=BINARY_OP(arg=0, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add328.80', '$binop_mul348.87']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=356, inst=STORE_FAST(arg=19, lineno=330)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add352.88']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=358, inst=LOAD_FAST(arg=16, lineno=332)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=360, inst=STORE_FAST(arg=20, lineno=332)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$M13358.89']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=362, inst=LOAD_FAST(arg=19, lineno=333)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=364, inst=STORE_FAST(arg=21, lineno=333)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$M23362.90']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=366, inst=LOAD_FAST(arg=4, lineno=334)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=368, inst=LOAD_FAST(arg=8, lineno=334)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m2366.91']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=370, inst=LOAD_CONST(arg=1, lineno=334)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m2366.91', '$Lc2368.92']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=372, inst=BINARY_OP(arg=8, lineno=334)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m2366.91', '$Lc2368.92', '$const370.93']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=376, inst=BINARY_OP(arg=5, lineno=334)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$m2366.91', '$binop_pow372.94']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=380, inst=LOAD_FAST(arg=10, lineno=334)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul376.95']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=382, inst=BINARY_OP(arg=0, lineno=334)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_mul376.95', '$I2380.96']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=386, inst=STORE_FAST(arg=22, lineno=334)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$binop_add382.97']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=388, inst=LOAD_GLOBAL(arg=1, lineno=336)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=398, inst=LOAD_ATTR(arg=4, lineno=336)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$388load_global.98']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=418, inst=LOAD_FAST(arg=14, lineno=337)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=420, inst=LOAD_FAST(arg=15, lineno=337)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$M11418.101']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=422, inst=LOAD_FAST(arg=16, lineno=337)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$M11418.101', '$M12420.102']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=424, inst=BUILD_LIST(arg=3, lineno=337)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$M11418.101', '$M12420.102', '$M13422.103']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=426, inst=LOAD_FAST(arg=17, lineno=338)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$424build_list.104']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=428, inst=LOAD_FAST(arg=18, lineno=338)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$424build_list.104', '$M21426.105']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=430, inst=LOAD_FAST(arg=19, lineno=338)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$424build_list.104', '$M21426.105', '$M22428.106']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=432, inst=BUILD_LIST(arg=3, lineno=338)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$424build_list.104', '$M21426.105', '$M22428.106', '$M23430.107']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=434, inst=LOAD_FAST(arg=20, lineno=339)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$424build_list.104', '$432build_list.108']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=436, inst=LOAD_FAST(arg=21, lineno=339)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$424build_list.104', '$432build_list.108', '$M31434.109']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=438, inst=LOAD_FAST(arg=22, lineno=339)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$424build_list.104', '$432build_list.108', '$M31434.109', '$M32436.110']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=440, inst=BUILD_LIST(arg=3, lineno=339)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$424build_list.104', '$432build_list.108', '$M31434.109', '$M32436.110', '$M33438.111']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=442, inst=BUILD_LIST(arg=3, lineno=336)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$424build_list.104', '$432build_list.108', '$440build_list.112']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=444, inst=CALL(arg=1, lineno=336)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$null$388.99', '$398load_attr.100', '$442build_list.113']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=452, inst=STORE_FAST(arg=23, lineno=336)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$444call.114']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=454, inst=LOAD_FAST(arg=23, lineno=342)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:00 [   DEBUG] byteflow.py:350 - dispatch pc=456, inst=RETURN_VALUE(arg=None, lineno=342)
2025-10-06 11:53:00 [   DEBUG] byteflow.py:351 - stack ['$M454.115']
2025-10-06 11:53:00 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:53:00 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:53:00 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:53:00 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:53:00 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:00 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:00 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:53:00 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:53:00 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:53:00 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'item': '$4load_global.0', 'res': '$14load_attr.2'}), (34, {'res': '$theta134.3'}), (36, {'func': '$14load_attr.2', 'args': ['$theta134.3'], 'kw_names': None, 'res': '$36call.4'}), (44, {'value': '$36call.4'}), (46, {'idx': 0, 'res': '$46load_global.5'}), (56, {'item': '$46load_global.5', 'res': '$56load_attr.7'}), (76, {'res': '$theta276.8'}), (78, {'func': '$56load_attr.7', 'args': ['$theta276.8'], 'kw_names': None, 'res': '$78call.9'}), (86, {'value': '$78call.9'}), (88, {'idx': 0, 'res': '$88load_global.10'}), (98, {'item': '$88load_global.10', 'res': '$98load_attr.12'}), (118, {'res': '$theta1118.13'}), (120, {'res': '$theta2120.14'}), (122, {'op': '-', 'lhs': '$theta1118.13', 'rhs': '$theta2120.14', 'res': '$binop_sub122.15'}), (126, {'func': '$98load_attr.12', 'args': ['$binop_sub122.15'], 'kw_names': None, 'res': '$126call.16'}), (134, {'value': '$126call.16'}), (136, {'res': '$m0136.17'}), (138, {'res': '$m1138.18'}), (140, {'op': '+', 'lhs': '$m0136.17', 'rhs': '$m1138.18', 'res': '$binop_add140.19'}), (144, {'res': '$m2144.20'}), (146, {'op': '+', 'lhs': '$binop_add140.19', 'rhs': '$m2144.20', 'res': '$binop_add146.21'}), (150, {'value': '$binop_add146.21'}), (152, {'res': '$m1152.22'}), (154, {'res': '$Lc1154.23'}), (156, {'op': '*', 'lhs': '$m1152.22', 'rhs': '$Lc1154.23', 'res': '$binop_mul156.24'}), (160, {'res': '$m2160.25'}), (162, {'res': '$L1162.26'}), (164, {'op': '*', 'lhs': '$m2160.25', 'rhs': '$L1162.26', 'res': '$binop_mul164.27'}), (168, {'op': '+', 'lhs': '$binop_mul156.24', 'rhs': '$binop_mul164.27', 'res': '$binop_add168.28'}), (172, {'res': '$c1172.29'}), (174, {'op': '*', 'lhs': '$binop_add168.28', 'rhs': '$c1172.29', 'res': '$binop_mul174.30'}), (178, {'res': '$m2178.31'}), (180, {'res': '$Lc2180.32'}), (182, {'op': '*', 'lhs': '$m2178.31', 'rhs': '$Lc2180.32', 'res': '$binop_mul182.33'}), (186, {'res': '$c2186.34'}), (188, {'op': '*', 'lhs': '$binop_mul182.33', 'rhs': '$c2186.34', 'res': '$binop_mul188.35'}), (192, {'op': '+', 'lhs': '$binop_mul174.30', 'rhs': '$binop_mul188.35', 'res': '$binop_add192.36'}), (196, {'value': '$binop_add192.36'}), (198, {'res': '$m2198.37'}), (200, {'res': '$Lc2200.38'}), (202, {'op': '*', 'lhs': '$m2198.37', 'rhs': '$Lc2200.38', 'res': '$binop_mul202.39'}), (206, {'res': '$c2206.40'}), (208, {'op': '*', 'lhs': '$binop_mul202.39', 'rhs': '$c2206.40', 'res': '$binop_mul208.41'}), (212, {'value': '$binop_mul208.41'}), (214, {'res': '$M12214.42'}), (216, {'value': '$M12214.42'}), (218, {'res': '$m1218.43'}), (220, {'res': '$Lc1220.44'}), (222, {'res': '$const222.45'}), (224, {'op': '**', 'lhs': '$Lc1220.44', 'rhs': '$const222.45', 'res': '$binop_pow224.46'}), (228, {'op': '*', 'lhs': '$m1218.43', 'rhs': '$binop_pow224.46', 'res': '$binop_mul228.47'}), (232, {'res': '$m2232.48'}), (234, {'res': '$L1234.49'}), (236, {'res': '$const236.50'}), (238, {'op': '**', 'lhs': '$L1234.49', 'rhs': '$const236.50', 'res': '$binop_pow238.51'}), (242, {'op': '*', 'lhs': '$m2232.48', 'rhs': '$binop_pow238.51', 'res': '$binop_mul242.52'}), (246, {'op': '+', 'lhs': '$binop_mul228.47', 'rhs': '$binop_mul242.52', 'res': '$binop_add246.53'}), (250, {'res': '$I1250.54'}), (252, {'op': '+', 'lhs': '$binop_add246.53', 'rhs': '$I1250.54', 'res': '$binop_add252.55'}), (256, {'res': '$m2256.56'}), (258, {'res': '$Lc2258.57'}), (260, {'res': '$const260.58'}), (262, {'op': '**', 'lhs': '$Lc2258.57', 'rhs': '$const260.58', 'res': '$binop_pow262.59'}), (266, {'op': '*', 'lhs': '$m2256.56', 'rhs': '$binop_pow262.59', 'res': '$binop_mul266.60'}), (270, {'op': '+', 'lhs': '$binop_add252.55', 'rhs': '$binop_mul266.60', 'res': '$binop_add270.61'}), (274, {'res': '$I2274.62'}), (276, {'op': '+', 'lhs': '$binop_add270.61', 'rhs': '$I2274.62', 'res': '$binop_add276.63'}), (280, {'res': '$const280.64'}), (282, {'res': '$m2282.65'}), (284, {'op': '*', 'lhs': '$const280.64', 'rhs': '$m2282.65', 'res': '$binop_mul284.66'}), (288, {'res': '$L1288.67'}), (290, {'op': '*', 'lhs': '$binop_mul284.66', 'rhs': '$L1288.67', 'res': '$binop_mul290.68'}), (294, {'res': '$Lc2294.69'}), (296, {'op': '*', 'lhs': '$binop_mul290.68', 'rhs': '$Lc2294.69', 'res': '$binop_mul296.70'}), (300, {'res': '$c12300.71'}), (302, {'op': '*', 'lhs': '$binop_mul296.70', 'rhs': '$c12300.71', 'res': '$binop_mul302.72'}), (306, {'op': '+', 'lhs': '$binop_add276.63', 'rhs': '$binop_mul302.72', 'res': '$binop_add306.73'}), (310, {'value': '$binop_add306.73'}), (312, {'res': '$m2312.74'}), (314, {'res': '$Lc2314.75'}), (316, {'res': '$const316.76'}), (318, {'op': '**', 'lhs': '$Lc2314.75', 'rhs': '$const316.76', 'res': '$binop_pow318.77'}), (322, {'op': '*', 'lhs': '$m2312.74', 'rhs': '$binop_pow318.77', 'res': '$binop_mul322.78'}), (326, {'res': '$I2326.79'}), (328, {'op': '+', 'lhs': '$binop_mul322.78', 'rhs': '$I2326.79', 'res': '$binop_add328.80'}), (332, {'res': '$m2332.81'}), (334, {'res': '$L1334.82'}), (336, {'op': '*', 'lhs': '$m2332.81', 'rhs': '$L1334.82', 'res': '$binop_mul336.83'}), (340, {'res': '$Lc2340.84'}), (342, {'op': '*', 'lhs': '$binop_mul336.83', 'rhs': '$Lc2340.84', 'res': '$binop_mul342.85'}), (346, {'res': '$c12346.86'}), (348, {'op': '*', 'lhs': '$binop_mul342.85', 'rhs': '$c12346.86', 'res': '$binop_mul348.87'}), (352, {'op': '+', 'lhs': '$binop_add328.80', 'rhs': '$binop_mul348.87', 'res': '$binop_add352.88'}), (356, {'value': '$binop_add352.88'}), (358, {'res': '$M13358.89'}), (360, {'value': '$M13358.89'}), (362, {'res': '$M23362.90'}), (364, {'value': '$M23362.90'}), (366, {'res': '$m2366.91'}), (368, {'res': '$Lc2368.92'}), (370, {'res': '$const370.93'}), (372, {'op': '**', 'lhs': '$Lc2368.92', 'rhs': '$const370.93', 'res': '$binop_pow372.94'}), (376, {'op': '*', 'lhs': '$m2366.91', 'rhs': '$binop_pow372.94', 'res': '$binop_mul376.95'}), (380, {'res': '$I2380.96'}), (382, {'op': '+', 'lhs': '$binop_mul376.95', 'rhs': '$I2380.96', 'res': '$binop_add382.97'}), (386, {'value': '$binop_add382.97'}), (388, {'idx': 0, 'res': '$388load_global.98'}), (398, {'item': '$388load_global.98', 'res': '$398load_attr.100'}), (418, {'res': '$M11418.101'}), (420, {'res': '$M12420.102'}), (422, {'res': '$M13422.103'}), (424, {'items': ['$M11418.101', '$M12420.102', '$M13422.103'], 'res': '$424build_list.104'}), (426, {'res': '$M21426.105'}), (428, {'res': '$M22428.106'}), (430, {'res': '$M23430.107'}), (432, {'items': ['$M21426.105', '$M22428.106', '$M23430.107'], 'res': '$432build_list.108'}), (434, {'res': '$M31434.109'}), (436, {'res': '$M32436.110'}), (438, {'res': '$M33438.111'}), (440, {'items': ['$M31434.109', '$M32436.110', '$M33438.111'], 'res': '$440build_list.112'}), (442, {'items': ['$424build_list.104', '$432build_list.108', '$440build_list.112'], 'res': '$442build_list.113'}), (444, {'func': '$398load_attr.100', 'args': ['$442build_list.113'], 'kw_names': None, 'res': '$444call.114'}), (452, {'value': '$444call.114'}), (454, {'res': '$M454.115'}), (456, {'retval': '$M454.115', 'castval': '$456return_value.116'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:53:00 [   DEBUG] interpreter.py:1416 - label 0:
    theta1 = arg(0, name=theta1)             ['theta1']
    theta2 = arg(1, name=theta2)             ['theta2']
    m0 = arg(2, name=m0)                     ['m0']
    m1 = arg(3, name=m1)                     ['m1']
    m2 = arg(4, name=m2)                     ['m2']
    L1 = arg(5, name=L1)                     ['L1']
    L2 = arg(6, name=L2)                     ['L2']
    Lc1 = arg(7, name=Lc1)                   ['Lc1']
    Lc2 = arg(8, name=Lc2)                   ['Lc2']
    I1 = arg(9, name=I1)                     ['I1']
    I2 = arg(10, name=I2)                    ['I2']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $14load_attr.2 = getattr(value=$4load_global.0, attr=cos) ['$14load_attr.2', '$4load_global.0']
    c1 = call $14load_attr.2(theta1, func=$14load_attr.2, args=[Var(theta1, physics.py:310)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_attr.2', 'c1', 'theta1']
    $46load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$46load_global.5']
    $56load_attr.7 = getattr(value=$46load_global.5, attr=cos) ['$46load_global.5', '$56load_attr.7']
    c2 = call $56load_attr.7(theta2, func=$56load_attr.7, args=[Var(theta2, physics.py:310)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_attr.7', 'c2', 'theta2']
    $88load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$88load_global.10']
    $98load_attr.12 = getattr(value=$88load_global.10, attr=cos) ['$88load_global.10', '$98load_attr.12']
    $binop_sub122.15 = theta1 - theta2       ['$binop_sub122.15', 'theta1', 'theta2']
    c12 = call $98load_attr.12($binop_sub122.15, func=$98load_attr.12, args=[Var($binop_sub122.15, physics.py:321)], kws=(), vararg=None, varkwarg=None, target=None) ['$98load_attr.12', '$binop_sub122.15', 'c12']
    $binop_add140.19 = m0 + m1               ['$binop_add140.19', 'm0', 'm1']
    M11 = $binop_add140.19 + m2              ['$binop_add140.19', 'M11', 'm2']
    $binop_mul156.24 = m1 * Lc1              ['$binop_mul156.24', 'Lc1', 'm1']
    $binop_mul164.27 = m2 * L1               ['$binop_mul164.27', 'L1', 'm2']
    $binop_add168.28 = $binop_mul156.24 + $binop_mul164.27 ['$binop_add168.28', '$binop_mul156.24', '$binop_mul164.27']
    $binop_mul174.30 = $binop_add168.28 * c1 ['$binop_add168.28', '$binop_mul174.30', 'c1']
    $binop_mul182.33 = m2 * Lc2              ['$binop_mul182.33', 'Lc2', 'm2']
    $binop_mul188.35 = $binop_mul182.33 * c2 ['$binop_mul182.33', '$binop_mul188.35', 'c2']
    M12 = $binop_mul174.30 + $binop_mul188.35 ['$binop_mul174.30', '$binop_mul188.35', 'M12']
    $binop_mul202.39 = m2 * Lc2              ['$binop_mul202.39', 'Lc2', 'm2']
    M13 = $binop_mul202.39 * c2              ['$binop_mul202.39', 'M13', 'c2']
    M21 = M12                                ['M12', 'M21']
    $const222.45 = const(int, 2)             ['$const222.45']
    $binop_pow224.46 = Lc1 ** $const222.45   ['$binop_pow224.46', '$const222.45', 'Lc1']
    $binop_mul228.47 = m1 * $binop_pow224.46 ['$binop_mul228.47', '$binop_pow224.46', 'm1']
    $const236.50 = const(int, 2)             ['$const236.50']
    $binop_pow238.51 = L1 ** $const236.50    ['$binop_pow238.51', '$const236.50', 'L1']
    $binop_mul242.52 = m2 * $binop_pow238.51 ['$binop_mul242.52', '$binop_pow238.51', 'm2']
    $binop_add246.53 = $binop_mul228.47 + $binop_mul242.52 ['$binop_add246.53', '$binop_mul228.47', '$binop_mul242.52']
    $binop_add252.55 = $binop_add246.53 + I1 ['$binop_add246.53', '$binop_add252.55', 'I1']
    $const260.58 = const(int, 2)             ['$const260.58']
    $binop_pow262.59 = Lc2 ** $const260.58   ['$binop_pow262.59', '$const260.58', 'Lc2']
    $binop_mul266.60 = m2 * $binop_pow262.59 ['$binop_mul266.60', '$binop_pow262.59', 'm2']
    $binop_add270.61 = $binop_add252.55 + $binop_mul266.60 ['$binop_add252.55', '$binop_add270.61', '$binop_mul266.60']
    $binop_add276.63 = $binop_add270.61 + I2 ['$binop_add270.61', '$binop_add276.63', 'I2']
    $const280.64 = const(int, 2)             ['$const280.64']
    $binop_mul284.66 = $const280.64 * m2     ['$binop_mul284.66', '$const280.64', 'm2']
    $binop_mul290.68 = $binop_mul284.66 * L1 ['$binop_mul284.66', '$binop_mul290.68', 'L1']
    $binop_mul296.70 = $binop_mul290.68 * Lc2 ['$binop_mul290.68', '$binop_mul296.70', 'Lc2']
    $binop_mul302.72 = $binop_mul296.70 * c12 ['$binop_mul296.70', '$binop_mul302.72', 'c12']
    M22 = $binop_add276.63 + $binop_mul302.72 ['$binop_add276.63', '$binop_mul302.72', 'M22']
    $const316.76 = const(int, 2)             ['$const316.76']
    $binop_pow318.77 = Lc2 ** $const316.76   ['$binop_pow318.77', '$const316.76', 'Lc2']
    $binop_mul322.78 = m2 * $binop_pow318.77 ['$binop_mul322.78', '$binop_pow318.77', 'm2']
    $binop_add328.80 = $binop_mul322.78 + I2 ['$binop_add328.80', '$binop_mul322.78', 'I2']
    $binop_mul336.83 = m2 * L1               ['$binop_mul336.83', 'L1', 'm2']
    $binop_mul342.85 = $binop_mul336.83 * Lc2 ['$binop_mul336.83', '$binop_mul342.85', 'Lc2']
    $binop_mul348.87 = $binop_mul342.85 * c12 ['$binop_mul342.85', '$binop_mul348.87', 'c12']
    M23 = $binop_add328.80 + $binop_mul348.87 ['$binop_add328.80', '$binop_mul348.87', 'M23']
    M31 = M13                                ['M13', 'M31']
    M32 = M23                                ['M23', 'M32']
    $const370.93 = const(int, 2)             ['$const370.93']
    $binop_pow372.94 = Lc2 ** $const370.93   ['$binop_pow372.94', '$const370.93', 'Lc2']
    $binop_mul376.95 = m2 * $binop_pow372.94 ['$binop_mul376.95', '$binop_pow372.94', 'm2']
    M33 = $binop_mul376.95 + I2              ['$binop_mul376.95', 'I2', 'M33']
    $388load_global.98 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$388load_global.98']
    $398load_attr.100 = getattr(value=$388load_global.98, attr=array) ['$388load_global.98', '$398load_attr.100']
    $424build_list.104 = build_list(items=[Var(M11, physics.py:324), Var(M12, physics.py:325), Var(M13, physics.py:326)]) ['$424build_list.104', 'M11', 'M12', 'M13']
    $432build_list.108 = build_list(items=[Var(M21, physics.py:328), Var(M22, physics.py:329), Var(M23, physics.py:330)]) ['$432build_list.108', 'M21', 'M22', 'M23']
    $440build_list.112 = build_list(items=[Var(M31, physics.py:332), Var(M32, physics.py:333), Var(M33, physics.py:334)]) ['$440build_list.112', 'M31', 'M32', 'M33']
    $442build_list.113 = build_list(items=[Var($424build_list.104, physics.py:337), Var($432build_list.108, physics.py:338), Var($440build_list.112, physics.py:339)]) ['$424build_list.104', '$432build_list.108', '$440build_list.112', '$442build_list.113']
    M = call $398load_attr.100($442build_list.113, func=$398load_attr.100, args=[Var($442build_list.113, physics.py:336)], kws=(), vararg=None, varkwarg=None, target=None) ['$398load_attr.100', '$442build_list.113', 'M']
    $456return_value.116 = cast(value=M)     ['$456return_value.116', 'M']
    return $456return_value.116              ['$456return_value.116']

2025-10-06 11:53:00 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:53:00 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253DDD26F0>
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: theta1 = arg(0, name=theta1)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: theta2 = arg(1, name=theta2)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: m0 = arg(2, name=m0)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: m1 = arg(3, name=m1)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: m2 = arg(4, name=m2)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: L1 = arg(5, name=L1)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: L2 = arg(6, name=L2)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: Lc1 = arg(7, name=Lc1)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: Lc2 = arg(8, name=Lc2)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: I1 = arg(9, name=I1)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: I2 = arg(10, name=I2)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $14load_attr.2 = getattr(value=$4load_global.0, attr=cos)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: c1 = call $14load_attr.2(theta1, func=$14load_attr.2, args=[Var(theta1, physics.py:310)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $46load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $56load_attr.7 = getattr(value=$46load_global.5, attr=cos)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: c2 = call $56load_attr.7(theta2, func=$56load_attr.7, args=[Var(theta2, physics.py:310)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $88load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $98load_attr.12 = getattr(value=$88load_global.10, attr=cos)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_sub122.15 = theta1 - theta2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: c12 = call $98load_attr.12($binop_sub122.15, func=$98load_attr.12, args=[Var($binop_sub122.15, physics.py:321)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_add140.19 = m0 + m1
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: M11 = $binop_add140.19 + m2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul156.24 = m1 * Lc1
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul164.27 = m2 * L1
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_add168.28 = $binop_mul156.24 + $binop_mul164.27
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul174.30 = $binop_add168.28 * c1
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul182.33 = m2 * Lc2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul188.35 = $binop_mul182.33 * c2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: M12 = $binop_mul174.30 + $binop_mul188.35
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul202.39 = m2 * Lc2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: M13 = $binop_mul202.39 * c2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: M21 = M12
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $const222.45 = const(int, 2)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_pow224.46 = Lc1 ** $const222.45
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul228.47 = m1 * $binop_pow224.46
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $const236.50 = const(int, 2)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_pow238.51 = L1 ** $const236.50
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul242.52 = m2 * $binop_pow238.51
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_add246.53 = $binop_mul228.47 + $binop_mul242.52
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_add252.55 = $binop_add246.53 + I1
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $const260.58 = const(int, 2)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_pow262.59 = Lc2 ** $const260.58
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul266.60 = m2 * $binop_pow262.59
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_add270.61 = $binop_add252.55 + $binop_mul266.60
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_add276.63 = $binop_add270.61 + I2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $const280.64 = const(int, 2)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul284.66 = $const280.64 * m2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul290.68 = $binop_mul284.66 * L1
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul296.70 = $binop_mul290.68 * Lc2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul302.72 = $binop_mul296.70 * c12
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: M22 = $binop_add276.63 + $binop_mul302.72
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $const316.76 = const(int, 2)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_pow318.77 = Lc2 ** $const316.76
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul322.78 = m2 * $binop_pow318.77
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_add328.80 = $binop_mul322.78 + I2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul336.83 = m2 * L1
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul342.85 = $binop_mul336.83 * Lc2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul348.87 = $binop_mul342.85 * c12
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: M23 = $binop_add328.80 + $binop_mul348.87
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: M31 = M13
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: M32 = M23
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $const370.93 = const(int, 2)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_pow372.94 = Lc2 ** $const370.93
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $binop_mul376.95 = m2 * $binop_pow372.94
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: M33 = $binop_mul376.95 + I2
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $388load_global.98 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $398load_attr.100 = getattr(value=$388load_global.98, attr=array)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $424build_list.104 = build_list(items=[Var(M11, physics.py:324), Var(M12, physics.py:325), Var(M13, physics.py:326)])
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $432build_list.108 = build_list(items=[Var(M21, physics.py:328), Var(M22, physics.py:329), Var(M23, physics.py:330)])
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $440build_list.112 = build_list(items=[Var(M31, physics.py:332), Var(M32, physics.py:333), Var(M33, physics.py:334)])
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $442build_list.113 = build_list(items=[Var($424build_list.104, physics.py:337), Var($432build_list.108, physics.py:338), Var($440build_list.112, physics.py:339)])
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: M = call $398load_attr.100($442build_list.113, func=$398load_attr.100, args=[Var($442build_list.113, physics.py:336)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: $456return_value.116 = cast(value=M)
2025-10-06 11:53:00 [   DEBUG] ssa.py:210 - on stmt: return $456return_value.116
2025-10-06 11:53:00 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$14load_attr.2': [(<numba.core.ir.Assign object at 0x000001253DD9EBD0>,
                                 0)],
             '$388load_global.98': [(<numba.core.ir.Assign object at 0x000001253DDD22D0>,
                                     0)],
             '$398load_attr.100': [(<numba.core.ir.Assign object at 0x000001253DDD2420>,
                                    0)],
             '$424build_list.104': [(<numba.core.ir.Assign object at 0x000001253DDD2840>,
                                     0)],
             '$432build_list.108': [(<numba.core.ir.Assign object at 0x000001253DDD2C60>,
                                     0)],
             '$440build_list.112': [(<numba.core.ir.Assign object at 0x000001253DDD3080>,
                                     0)],
             '$442build_list.113': [(<numba.core.ir.Assign object at 0x000001253DDD31D0>,
                                     0)],
             '$456return_value.116': [(<numba.core.ir.Assign object at 0x000001253DDD3680>,
                                       0)],
             '$46load_global.5': [(<numba.core.ir.Assign object at 0x000001253DD9F080>,
                                   0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001253DD9EA80>,
                                  0)],
             '$56load_attr.7': [(<numba.core.ir.Assign object at 0x000001253DD9F1D0>,
                                 0)],
             '$88load_global.10': [(<numba.core.ir.Assign object at 0x000001253DD9F680>,
                                    0)],
             '$98load_attr.12': [(<numba.core.ir.Assign object at 0x000001253DD9F7D0>,
                                  0)],
             '$binop_add140.19': [(<numba.core.ir.Assign object at 0x000001253DDC40B0>,
                                   0)],
             '$binop_add168.28': [(<numba.core.ir.Assign object at 0x000001253DDC4B60>,
                                   0)],
             '$binop_add246.53': [(<numba.core.ir.Assign object at 0x000001253DDC6A80>,
                                   0)],
             '$binop_add252.55': [(<numba.core.ir.Assign object at 0x000001253DDC6CC0>,
                                   0)],
             '$binop_add270.61': [(<numba.core.ir.Assign object at 0x000001253DDC73E0>,
                                   0)],
             '$binop_add276.63': [(<numba.core.ir.Assign object at 0x000001253DDC7620>,
                                   0)],
             '$binop_add328.80': [(<numba.core.ir.Assign object at 0x000001253DDD0B00>,
                                   0)],
             '$binop_mul156.24': [(<numba.core.ir.Assign object at 0x000001253DDC46E0>,
                                   0)],
             '$binop_mul164.27': [(<numba.core.ir.Assign object at 0x000001253DDC4A10>,
                                   0)],
             '$binop_mul174.30': [(<numba.core.ir.Assign object at 0x000001253DDC4DA0>,
                                   0)],
             '$binop_mul182.33': [(<numba.core.ir.Assign object at 0x000001253DDC50D0>,
                                   0)],
             '$binop_mul188.35': [(<numba.core.ir.Assign object at 0x000001253DDC5310>,
                                   0)],
             '$binop_mul202.39': [(<numba.core.ir.Assign object at 0x000001253DDC5880>,
                                   0)],
             '$binop_mul228.47': [(<numba.core.ir.Assign object at 0x000001253DDC6360>,
                                   0)],
             '$binop_mul242.52': [(<numba.core.ir.Assign object at 0x000001253DDC6930>,
                                   0)],
             '$binop_mul266.60': [(<numba.core.ir.Assign object at 0x000001253DDC7290>,
                                   0)],
             '$binop_mul284.66': [(<numba.core.ir.Assign object at 0x000001253DDC79B0>,
                                   0)],
             '$binop_mul290.68': [(<numba.core.ir.Assign object at 0x000001253DDC7BF0>,
                                   0)],
             '$binop_mul296.70': [(<numba.core.ir.Assign object at 0x000001253DDC7E30>,
                                   0)],
             '$binop_mul302.72': [(<numba.core.ir.Assign object at 0x000001253DDD00B0>,
                                   0)],
             '$binop_mul322.78': [(<numba.core.ir.Assign object at 0x000001253DDD08C0>,
                                   0)],
             '$binop_mul336.83': [(<numba.core.ir.Assign object at 0x000001253DDD0E30>,
                                   0)],
             '$binop_mul342.85': [(<numba.core.ir.Assign object at 0x000001253DDD1070>,
                                   0)],
             '$binop_mul348.87': [(<numba.core.ir.Assign object at 0x000001253DDD12B0>,
                                   0)],
             '$binop_mul376.95': [(<numba.core.ir.Assign object at 0x000001253DDD1E80>,
                                   0)],
             '$binop_pow224.46': [(<numba.core.ir.Assign object at 0x000001253DDC6210>,
                                   0)],
             '$binop_pow238.51': [(<numba.core.ir.Assign object at 0x000001253DDC67E0>,
                                   0)],
             '$binop_pow262.59': [(<numba.core.ir.Assign object at 0x000001253DDC7140>,
                                   0)],
             '$binop_pow318.77': [(<numba.core.ir.Assign object at 0x000001253DDD0770>,
                                   0)],
             '$binop_pow372.94': [(<numba.core.ir.Assign object at 0x000001253DDD1D30>,
                                   0)],
             '$binop_sub122.15': [(<numba.core.ir.Assign object at 0x000001253DD9FB00>,
                                   0)],
             '$const222.45': [(<numba.core.ir.Assign object at 0x000001253DDC6090>,
                               0)],
             '$const236.50': [(<numba.core.ir.Assign object at 0x000001253DDC6660>,
                               0)],
             '$const260.58': [(<numba.core.ir.Assign object at 0x000001253DDC6FC0>,
                               0)],
             '$const280.64': [(<numba.core.ir.Assign object at 0x000001253DDC7740>,
                               0)],
             '$const316.76': [(<numba.core.ir.Assign object at 0x000001253DDD05F0>,
                               0)],
             '$const370.93': [(<numba.core.ir.Assign object at 0x000001253DDD1BB0>,
                               0)],
             'I1': [(<numba.core.ir.Assign object at 0x000001253DD9E7E0>, 0)],
             'I2': [(<numba.core.ir.Assign object at 0x000001253DD9E900>, 0)],
             'L1': [(<numba.core.ir.Assign object at 0x000001253DD9E360>, 0)],
             'L2': [(<numba.core.ir.Assign object at 0x000001253DD9E480>, 0)],
             'Lc1': [(<numba.core.ir.Assign object at 0x000001253DD9E5A0>, 0)],
             'Lc2': [(<numba.core.ir.Assign object at 0x000001253DD9E6C0>, 0)],
             'M': [(<numba.core.ir.Assign object at 0x000001253DDD3380>, 0)],
             'M11': [(<numba.core.ir.Assign object at 0x000001253DDC42F0>, 0)],
             'M12': [(<numba.core.ir.Assign object at 0x000001253DDC5460>, 0)],
             'M13': [(<numba.core.ir.Assign object at 0x000001253DDC5AC0>, 0)],
             'M21': [(<numba.core.ir.Assign object at 0x000001253DDC5D60>, 0)],
             'M22': [(<numba.core.ir.Assign object at 0x000001253DDD0200>, 0)],
             'M23': [(<numba.core.ir.Assign object at 0x000001253DDD1400>, 0)],
             'M31': [(<numba.core.ir.Assign object at 0x000001253DDD16A0>, 0)],
             'M32': [(<numba.core.ir.Assign object at 0x000001253DDD1880>, 0)],
             'M33': [(<numba.core.ir.Assign object at 0x000001253DDD20C0>, 0)],
             'c1': [(<numba.core.ir.Assign object at 0x000001253DD9EE70>, 0)],
             'c12': [(<numba.core.ir.Assign object at 0x000001253DD9FC80>, 0)],
             'c2': [(<numba.core.ir.Assign object at 0x000001253DD9F470>, 0)],
             'm0': [(<numba.core.ir.Assign object at 0x000001253DD9E000>, 0)],
             'm1': [(<numba.core.ir.Assign object at 0x000001253DD9E120>, 0)],
             'm2': [(<numba.core.ir.Assign object at 0x000001253DD9E240>, 0)],
             'theta1': [(<numba.core.ir.Assign object at 0x000001253DD9DDC0>,
                         0)],
             'theta2': [(<numba.core.ir.Assign object at 0x000001253DD9DEE0>,
                         0)]})
2025-10-06 11:53:00 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253BD71FD0>
2025-10-06 11:53:01 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=344)
           2	RESUME(arg=0, lineno=344)
           4	LOAD_GLOBAL(arg=1, lineno=354)
          14	LOAD_ATTR(arg=2, lineno=354)
          34	LOAD_FAST(arg=0, lineno=354)
          36	CALL(arg=1, lineno=354)
          44	STORE_FAST(arg=13, lineno=354)
          46	LOAD_GLOBAL(arg=1, lineno=355)
          56	LOAD_ATTR(arg=2, lineno=355)
          76	LOAD_FAST(arg=1, lineno=355)
          78	CALL(arg=1, lineno=355)
          86	STORE_FAST(arg=14, lineno=355)
          88	LOAD_GLOBAL(arg=1, lineno=356)
          98	LOAD_ATTR(arg=2, lineno=356)
         118	LOAD_FAST(arg=0, lineno=356)
         120	LOAD_FAST(arg=1, lineno=356)
         122	BINARY_OP(arg=10, lineno=356)
         126	CALL(arg=1, lineno=356)
         134	STORE_FAST(arg=15, lineno=356)
         136	LOAD_GLOBAL(arg=1, lineno=359)
         146	LOAD_ATTR(arg=4, lineno=359)
         166	LOAD_CONST(arg=1, lineno=359)
         168	CALL(arg=1, lineno=359)
         176	STORE_FAST(arg=16, lineno=359)
         178	LOAD_FAST(arg=10, lineno=362)
         180	POP_JUMP_IF_FALSE(arg=108, lineno=362)
         182	LOAD_FAST(arg=11, lineno=362)
         184	POP_JUMP_IF_FALSE(arg=106, lineno=362)
         186	LOAD_FAST(arg=4, lineno=363)
         188	LOAD_FAST(arg=8, lineno=363)
         190	BINARY_OP(arg=5, lineno=363)
         194	LOAD_FAST(arg=5, lineno=363)
         196	LOAD_FAST(arg=6, lineno=363)
         198	BINARY_OP(arg=5, lineno=363)
         202	BINARY_OP(arg=0, lineno=363)
         206	UNARY_NEGATIVE(arg=None, lineno=363)
         208	LOAD_FAST(arg=13, lineno=363)
         210	BINARY_OP(arg=5, lineno=363)
         214	LOAD_FAST(arg=2, lineno=363)
         216	BINARY_OP(arg=5, lineno=363)
         220	LOAD_FAST(arg=5, lineno=363)
         222	LOAD_FAST(arg=9, lineno=363)
         224	BINARY_OP(arg=5, lineno=363)
         228	LOAD_FAST(arg=14, lineno=363)
         230	BINARY_OP(arg=5, lineno=363)
         234	LOAD_FAST(arg=3, lineno=363)
         236	BINARY_OP(arg=5, lineno=363)
         240	BINARY_OP(arg=10, lineno=363)
         244	LOAD_FAST(arg=16, lineno=363)
         246	LOAD_CONST(arg=2, lineno=363)
         248	STORE_SUBSCR(arg=None, lineno=363)
         252	LOAD_FAST(arg=5, lineno=364)
         254	UNARY_NEGATIVE(arg=None, lineno=364)
         256	LOAD_FAST(arg=9, lineno=364)
         258	BINARY_OP(arg=5, lineno=364)
         262	LOAD_FAST(arg=14, lineno=364)
         264	BINARY_OP(arg=5, lineno=364)
         268	LOAD_FAST(arg=3, lineno=364)
         270	BINARY_OP(arg=5, lineno=364)
         274	LOAD_FAST(arg=16, lineno=364)
         276	LOAD_CONST(arg=3, lineno=364)
         278	STORE_SUBSCR(arg=None, lineno=364)
         282	LOAD_FAST(arg=5, lineno=366)
         284	UNARY_NEGATIVE(arg=None, lineno=366)
         286	LOAD_FAST(arg=6, lineno=366)
         288	BINARY_OP(arg=5, lineno=366)
         292	LOAD_FAST(arg=9, lineno=366)
         294	BINARY_OP(arg=5, lineno=366)
         298	LOAD_FAST(arg=15, lineno=366)
         300	BINARY_OP(arg=5, lineno=366)
         304	LOAD_FAST(arg=3, lineno=366)
         306	BINARY_OP(arg=5, lineno=366)
         310	LOAD_FAST(arg=16, lineno=366)
         312	LOAD_CONST(arg=4, lineno=366)
         314	STORE_SUBSCR(arg=None, lineno=366)
         318	LOAD_FAST(arg=5, lineno=367)
         320	UNARY_NEGATIVE(arg=None, lineno=367)
         322	LOAD_FAST(arg=6, lineno=367)
         324	BINARY_OP(arg=5, lineno=367)
         328	LOAD_FAST(arg=9, lineno=367)
         330	BINARY_OP(arg=5, lineno=367)
         334	LOAD_FAST(arg=15, lineno=367)
         336	BINARY_OP(arg=5, lineno=367)
         340	LOAD_FAST(arg=3, lineno=367)
         342	BINARY_OP(arg=5, lineno=367)
         346	LOAD_FAST(arg=16, lineno=367)
         348	LOAD_CONST(arg=5, lineno=367)
         350	STORE_SUBSCR(arg=None, lineno=367)
         354	LOAD_FAST(arg=5, lineno=369)
         356	LOAD_FAST(arg=6, lineno=369)
         358	BINARY_OP(arg=5, lineno=369)
         362	LOAD_FAST(arg=9, lineno=369)
         364	BINARY_OP(arg=5, lineno=369)
         368	LOAD_FAST(arg=15, lineno=369)
         370	BINARY_OP(arg=5, lineno=369)
         374	LOAD_FAST(arg=2, lineno=369)
         376	BINARY_OP(arg=5, lineno=369)
         380	LOAD_FAST(arg=16, lineno=369)
         382	LOAD_CONST(arg=6, lineno=369)
         384	STORE_SUBSCR(arg=None, lineno=369)
         388	LOAD_CONST(arg=7, lineno=370)
         390	LOAD_FAST(arg=16, lineno=370)
         392	LOAD_CONST(arg=8, lineno=370)
         394	STORE_SUBSCR(arg=None, lineno=370)
>        398	LOAD_FAST(arg=12, lineno=373)
         400	POP_JUMP_IF_FALSE(arg=40, lineno=373)
         402	LOAD_CONST(arg=9, lineno=375)
         404	STORE_FAST(arg=17, lineno=375)
         406	LOAD_FAST(arg=16, lineno=376)
         408	LOAD_CONST(arg=2, lineno=376)
         410	COPY(arg=2, lineno=376)
         412	COPY(arg=2, lineno=376)
         414	BINARY_SUBSCR(arg=None, lineno=376)
         418	LOAD_FAST(arg=17, lineno=376)
         420	LOAD_FAST(arg=2, lineno=376)
         422	LOAD_FAST(arg=3, lineno=376)
         424	BINARY_OP(arg=0, lineno=376)
         428	BINARY_OP(arg=5, lineno=376)
         432	BINARY_OP(arg=13, lineno=376)
         436	SWAP(arg=3, lineno=376)
         438	SWAP(arg=2, lineno=376)
         440	STORE_SUBSCR(arg=None, lineno=376)
         444	LOAD_FAST(arg=16, lineno=377)
         446	LOAD_CONST(arg=10, lineno=377)
         448	COPY(arg=2, lineno=377)
         450	COPY(arg=2, lineno=377)
         452	BINARY_SUBSCR(arg=None, lineno=377)
         456	LOAD_FAST(arg=17, lineno=377)
         458	LOAD_FAST(arg=2, lineno=377)
         460	LOAD_FAST(arg=3, lineno=377)
         462	BINARY_OP(arg=0, lineno=377)
         466	BINARY_OP(arg=5, lineno=377)
         470	BINARY_OP(arg=23, lineno=377)
         474	SWAP(arg=3, lineno=377)
         476	SWAP(arg=2, lineno=377)
         478	STORE_SUBSCR(arg=None, lineno=377)
>        482	LOAD_FAST(arg=16, lineno=379)
         484	RETURN_VALUE(arg=None, lineno=379)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:53:01 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=344)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=344)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=354)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=354)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=354)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=36, inst=CALL(arg=1, lineno=354)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2', '$theta134.3']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=44, inst=STORE_FAST(arg=13, lineno=354)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$36call.4']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=46, inst=LOAD_GLOBAL(arg=1, lineno=355)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=56, inst=LOAD_ATTR(arg=2, lineno=355)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$46load_global.5']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=76, inst=LOAD_FAST(arg=1, lineno=355)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$56load_attr.7']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=78, inst=CALL(arg=1, lineno=355)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$46.6', '$56load_attr.7', '$theta276.8']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=86, inst=STORE_FAST(arg=14, lineno=355)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$78call.9']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=356)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=98, inst=LOAD_ATTR(arg=2, lineno=356)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$88load_global.10']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=356)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=120, inst=LOAD_FAST(arg=1, lineno=356)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12', '$theta1118.13']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=122, inst=BINARY_OP(arg=10, lineno=356)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12', '$theta1118.13', '$theta2120.14']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=126, inst=CALL(arg=1, lineno=356)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$88.11', '$98load_attr.12', '$binop_sub122.15']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=134, inst=STORE_FAST(arg=15, lineno=356)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$126call.16']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=136, inst=LOAD_GLOBAL(arg=1, lineno=359)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=146, inst=LOAD_ATTR(arg=4, lineno=359)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$136.18', '$136load_global.17']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=166, inst=LOAD_CONST(arg=1, lineno=359)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$136.18', '$146load_attr.19']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=168, inst=CALL(arg=1, lineno=359)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$136.18', '$146load_attr.19', '$const166.20']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=176, inst=STORE_FAST(arg=16, lineno=359)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$168call.21']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=178, inst=LOAD_FAST(arg=10, lineno=362)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=180, inst=POP_JUMP_IF_FALSE(arg=108, lineno=362)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$include_coriolis178.22']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=182, stack=(), blockstack=(), npush=0), Edge(pc=398, stack=(), blockstack=(), npush=0)]
2025-10-06 11:53:01 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=398 nstack_initial=0)])
2025-10-06 11:53:01 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=182 nstack_initial=0)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=182, inst=LOAD_FAST(arg=11, lineno=362)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=184, inst=POP_JUMP_IF_FALSE(arg=106, lineno=362)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$include_centrifugal182.0']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=186, stack=(), blockstack=(), npush=0), Edge(pc=398, stack=(), blockstack=(), npush=0)]
2025-10-06 11:53:01 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=398 nstack_initial=0), State(pc_initial=186 nstack_initial=0), State(pc_initial=398 nstack_initial=0)])
2025-10-06 11:53:01 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=398 nstack_initial=0)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=398, inst=LOAD_FAST(arg=12, lineno=373)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=400, inst=POP_JUMP_IF_FALSE(arg=40, lineno=373)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$include_gyroscopic398.0']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=402, stack=(), blockstack=(), npush=0), Edge(pc=482, stack=(), blockstack=(), npush=0)]
2025-10-06 11:53:01 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=186 nstack_initial=0), State(pc_initial=398 nstack_initial=0), State(pc_initial=402 nstack_initial=0), State(pc_initial=482 nstack_initial=0)])
2025-10-06 11:53:01 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=186 nstack_initial=0)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=186, inst=LOAD_FAST(arg=4, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=188, inst=LOAD_FAST(arg=8, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$m1186.0']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=190, inst=BINARY_OP(arg=5, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$m1186.0', '$Lc1188.1']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=194, inst=LOAD_FAST(arg=5, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul190.2']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=196, inst=LOAD_FAST(arg=6, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul190.2', '$m2194.3']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=198, inst=BINARY_OP(arg=5, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul190.2', '$m2194.3', '$L1196.4']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=202, inst=BINARY_OP(arg=0, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul190.2', '$binop_mul198.5']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=206, inst=UNARY_NEGATIVE(arg=None, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_add202.6']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=208, inst=LOAD_FAST(arg=13, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$206unary_negative.7']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=210, inst=BINARY_OP(arg=5, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$206unary_negative.7', '$s1208.8']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=214, inst=LOAD_FAST(arg=2, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul210.9']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=216, inst=BINARY_OP(arg=5, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul210.9', '$theta1_dot214.10']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=220, inst=LOAD_FAST(arg=5, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul216.11']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=222, inst=LOAD_FAST(arg=9, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul216.11', '$m2220.12']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=224, inst=BINARY_OP(arg=5, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul216.11', '$m2220.12', '$Lc2222.13']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=228, inst=LOAD_FAST(arg=14, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul216.11', '$binop_mul224.14']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=230, inst=BINARY_OP(arg=5, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul216.11', '$binop_mul224.14', '$s2228.15']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=234, inst=LOAD_FAST(arg=3, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul216.11', '$binop_mul230.16']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=236, inst=BINARY_OP(arg=5, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul216.11', '$binop_mul230.16', '$theta2_dot234.17']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=240, inst=BINARY_OP(arg=10, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul216.11', '$binop_mul236.18']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=244, inst=LOAD_FAST(arg=16, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_sub240.19']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=246, inst=LOAD_CONST(arg=2, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_sub240.19', '$C244.20']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=248, inst=STORE_SUBSCR(arg=None, lineno=363)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_sub240.19', '$C244.20', '$const246.21']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=252, inst=LOAD_FAST(arg=5, lineno=364)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=254, inst=UNARY_NEGATIVE(arg=None, lineno=364)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$m2252.22']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=256, inst=LOAD_FAST(arg=9, lineno=364)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$254unary_negative.23']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=258, inst=BINARY_OP(arg=5, lineno=364)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$254unary_negative.23', '$Lc2256.24']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=262, inst=LOAD_FAST(arg=14, lineno=364)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul258.25']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=264, inst=BINARY_OP(arg=5, lineno=364)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul258.25', '$s2262.26']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=268, inst=LOAD_FAST(arg=3, lineno=364)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul264.27']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=270, inst=BINARY_OP(arg=5, lineno=364)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul264.27', '$theta2_dot268.28']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=274, inst=LOAD_FAST(arg=16, lineno=364)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul270.29']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=276, inst=LOAD_CONST(arg=3, lineno=364)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul270.29', '$C274.30']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=278, inst=STORE_SUBSCR(arg=None, lineno=364)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul270.29', '$C274.30', '$const276.31']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=282, inst=LOAD_FAST(arg=5, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=284, inst=UNARY_NEGATIVE(arg=None, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$m2282.32']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=286, inst=LOAD_FAST(arg=6, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$284unary_negative.33']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=288, inst=BINARY_OP(arg=5, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$284unary_negative.33', '$L1286.34']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=292, inst=LOAD_FAST(arg=9, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul288.35']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=294, inst=BINARY_OP(arg=5, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul288.35', '$Lc2292.36']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=298, inst=LOAD_FAST(arg=15, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul294.37']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=300, inst=BINARY_OP(arg=5, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul294.37', '$s12298.38']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=304, inst=LOAD_FAST(arg=3, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul300.39']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=306, inst=BINARY_OP(arg=5, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul300.39', '$theta2_dot304.40']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=310, inst=LOAD_FAST(arg=16, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul306.41']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=312, inst=LOAD_CONST(arg=4, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul306.41', '$C310.42']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=314, inst=STORE_SUBSCR(arg=None, lineno=366)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul306.41', '$C310.42', '$const312.43']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=318, inst=LOAD_FAST(arg=5, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=320, inst=UNARY_NEGATIVE(arg=None, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$m2318.44']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=322, inst=LOAD_FAST(arg=6, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$320unary_negative.45']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=324, inst=BINARY_OP(arg=5, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$320unary_negative.45', '$L1322.46']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=328, inst=LOAD_FAST(arg=9, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul324.47']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=330, inst=BINARY_OP(arg=5, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul324.47', '$Lc2328.48']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=334, inst=LOAD_FAST(arg=15, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul330.49']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=336, inst=BINARY_OP(arg=5, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul330.49', '$s12334.50']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=340, inst=LOAD_FAST(arg=3, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul336.51']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=342, inst=BINARY_OP(arg=5, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul336.51', '$theta2_dot340.52']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=346, inst=LOAD_FAST(arg=16, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul342.53']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=348, inst=LOAD_CONST(arg=5, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul342.53', '$C346.54']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=350, inst=STORE_SUBSCR(arg=None, lineno=367)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul342.53', '$C346.54', '$const348.55']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=354, inst=LOAD_FAST(arg=5, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=356, inst=LOAD_FAST(arg=6, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$m2354.56']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=358, inst=BINARY_OP(arg=5, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$m2354.56', '$L1356.57']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=362, inst=LOAD_FAST(arg=9, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul358.58']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=364, inst=BINARY_OP(arg=5, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul358.58', '$Lc2362.59']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=368, inst=LOAD_FAST(arg=15, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul364.60']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=370, inst=BINARY_OP(arg=5, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul364.60', '$s12368.61']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=374, inst=LOAD_FAST(arg=2, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul370.62']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=376, inst=BINARY_OP(arg=5, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul370.62', '$theta1_dot374.63']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=380, inst=LOAD_FAST(arg=16, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul376.64']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=382, inst=LOAD_CONST(arg=6, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul376.64', '$C380.65']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=384, inst=STORE_SUBSCR(arg=None, lineno=369)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_mul376.64', '$C380.65', '$const382.66']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=388, inst=LOAD_CONST(arg=7, lineno=370)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=390, inst=LOAD_FAST(arg=16, lineno=370)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$const388.67']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=392, inst=LOAD_CONST(arg=8, lineno=370)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$const388.67', '$C390.68']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=394, inst=STORE_SUBSCR(arg=None, lineno=370)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$const388.67', '$C390.68', '$const392.69']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=398, stack=(), blockstack=(), npush=0)]
2025-10-06 11:53:01 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=398 nstack_initial=0), State(pc_initial=402 nstack_initial=0), State(pc_initial=482 nstack_initial=0), State(pc_initial=398 nstack_initial=0)])
2025-10-06 11:53:01 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=402 nstack_initial=0), State(pc_initial=482 nstack_initial=0), State(pc_initial=398 nstack_initial=0)])
2025-10-06 11:53:01 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=402 nstack_initial=0)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=402, inst=LOAD_CONST(arg=9, lineno=375)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=404, inst=STORE_FAST(arg=17, lineno=375)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$const402.0']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=406, inst=LOAD_FAST(arg=16, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=408, inst=LOAD_CONST(arg=2, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C406.1']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=410, inst=COPY(arg=2, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C406.1', '$const408.2']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=412, inst=COPY(arg=2, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C406.1', '$const408.2', '$C406.1']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=414, inst=BINARY_SUBSCR(arg=None, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C406.1', '$const408.2', '$C406.1', '$const408.2']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=418, inst=LOAD_FAST(arg=17, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C406.1', '$const408.2', '$414binary_subscr.3']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=420, inst=LOAD_FAST(arg=2, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C406.1', '$const408.2', '$414binary_subscr.3', '$gyro_coupling418.4']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=422, inst=LOAD_FAST(arg=3, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C406.1', '$const408.2', '$414binary_subscr.3', '$gyro_coupling418.4', '$theta1_dot420.5']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=424, inst=BINARY_OP(arg=0, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C406.1', '$const408.2', '$414binary_subscr.3', '$gyro_coupling418.4', '$theta1_dot420.5', '$theta2_dot422.6']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=428, inst=BINARY_OP(arg=5, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C406.1', '$const408.2', '$414binary_subscr.3', '$gyro_coupling418.4', '$binop_add424.7']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=432, inst=BINARY_OP(arg=13, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C406.1', '$const408.2', '$414binary_subscr.3', '$binop_mul428.8']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=436, inst=SWAP(arg=3, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C406.1', '$const408.2', '$binop_iadd432.9']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=438, inst=SWAP(arg=2, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_iadd432.9', '$const408.2', '$C406.1']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=440, inst=STORE_SUBSCR(arg=None, lineno=376)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_iadd432.9', '$C406.1', '$const408.2']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=444, inst=LOAD_FAST(arg=16, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=446, inst=LOAD_CONST(arg=10, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C444.10']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=448, inst=COPY(arg=2, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C444.10', '$const446.11']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=450, inst=COPY(arg=2, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C444.10', '$const446.11', '$C444.10']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=452, inst=BINARY_SUBSCR(arg=None, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C444.10', '$const446.11', '$C444.10', '$const446.11']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=456, inst=LOAD_FAST(arg=17, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C444.10', '$const446.11', '$452binary_subscr.12']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=458, inst=LOAD_FAST(arg=2, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C444.10', '$const446.11', '$452binary_subscr.12', '$gyro_coupling456.13']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=460, inst=LOAD_FAST(arg=3, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C444.10', '$const446.11', '$452binary_subscr.12', '$gyro_coupling456.13', '$theta1_dot458.14']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=462, inst=BINARY_OP(arg=0, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C444.10', '$const446.11', '$452binary_subscr.12', '$gyro_coupling456.13', '$theta1_dot458.14', '$theta2_dot460.15']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=466, inst=BINARY_OP(arg=5, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C444.10', '$const446.11', '$452binary_subscr.12', '$gyro_coupling456.13', '$binop_add462.16']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=470, inst=BINARY_OP(arg=23, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C444.10', '$const446.11', '$452binary_subscr.12', '$binop_mul466.17']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=474, inst=SWAP(arg=3, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C444.10', '$const446.11', '$binop_isub470.18']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=476, inst=SWAP(arg=2, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_isub470.18', '$const446.11', '$C444.10']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=478, inst=STORE_SUBSCR(arg=None, lineno=377)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$binop_isub470.18', '$C444.10', '$const446.11']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:138 - end state. edges=[Edge(pc=482, stack=(), blockstack=(), npush=0)]
2025-10-06 11:53:01 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=482 nstack_initial=0), State(pc_initial=398 nstack_initial=0), State(pc_initial=482 nstack_initial=0)])
2025-10-06 11:53:01 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=482 nstack_initial=0)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=482, inst=LOAD_FAST(arg=16, lineno=379)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=484, inst=RETURN_VALUE(arg=None, lineno=379)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$C482.0']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:53:01 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=398 nstack_initial=0), State(pc_initial=482 nstack_initial=0)])
2025-10-06 11:53:01 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=482 nstack_initial=0)])
2025-10-06 11:53:01 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:53:01 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=186 nstack_initial=0): set(),
             State(pc_initial=398 nstack_initial=0): set(),
             State(pc_initial=402 nstack_initial=0): set(),
             State(pc_initial=482 nstack_initial=0): set()})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:53:01 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:53:01 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:53:01 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'item': '$4load_global.0', 'res': '$14load_attr.2'}), (34, {'res': '$theta134.3'}), (36, {'func': '$14load_attr.2', 'args': ['$theta134.3'], 'kw_names': None, 'res': '$36call.4'}), (44, {'value': '$36call.4'}), (46, {'idx': 0, 'res': '$46load_global.5'}), (56, {'item': '$46load_global.5', 'res': '$56load_attr.7'}), (76, {'res': '$theta276.8'}), (78, {'func': '$56load_attr.7', 'args': ['$theta276.8'], 'kw_names': None, 'res': '$78call.9'}), (86, {'value': '$78call.9'}), (88, {'idx': 0, 'res': '$88load_global.10'}), (98, {'item': '$88load_global.10', 'res': '$98load_attr.12'}), (118, {'res': '$theta1118.13'}), (120, {'res': '$theta2120.14'}), (122, {'op': '-', 'lhs': '$theta1118.13', 'rhs': '$theta2120.14', 'res': '$binop_sub122.15'}), (126, {'func': '$98load_attr.12', 'args': ['$binop_sub122.15'], 'kw_names': None, 'res': '$126call.16'}), (134, {'value': '$126call.16'}), (136, {'idx': 0, 'res': '$136load_global.17'}), (146, {'item': '$136load_global.17', 'res': '$146load_attr.19'}), (166, {'res': '$const166.20'}), (168, {'func': '$146load_attr.19', 'args': ['$const166.20'], 'kw_names': None, 'res': '$168call.21'}), (176, {'value': '$168call.21'}), (178, {'res': '$include_coriolis178.22'}), (180, {'pred': '$include_coriolis178.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={182: (), 398: ()})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$include_centrifugal182.0'}), (184, {'pred': '$include_centrifugal182.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={186: (), 398: ()})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=186 nstack_initial=0):
AdaptBlockInfo(insts=((186, {'res': '$m1186.0'}), (188, {'res': '$Lc1188.1'}), (190, {'op': '*', 'lhs': '$m1186.0', 'rhs': '$Lc1188.1', 'res': '$binop_mul190.2'}), (194, {'res': '$m2194.3'}), (196, {'res': '$L1196.4'}), (198, {'op': '*', 'lhs': '$m2194.3', 'rhs': '$L1196.4', 'res': '$binop_mul198.5'}), (202, {'op': '+', 'lhs': '$binop_mul190.2', 'rhs': '$binop_mul198.5', 'res': '$binop_add202.6'}), (206, {'value': '$binop_add202.6', 'res': '$206unary_negative.7'}), (208, {'res': '$s1208.8'}), (210, {'op': '*', 'lhs': '$206unary_negative.7', 'rhs': '$s1208.8', 'res': '$binop_mul210.9'}), (214, {'res': '$theta1_dot214.10'}), (216, {'op': '*', 'lhs': '$binop_mul210.9', 'rhs': '$theta1_dot214.10', 'res': '$binop_mul216.11'}), (220, {'res': '$m2220.12'}), (222, {'res': '$Lc2222.13'}), (224, {'op': '*', 'lhs': '$m2220.12', 'rhs': '$Lc2222.13', 'res': '$binop_mul224.14'}), (228, {'res': '$s2228.15'}), (230, {'op': '*', 'lhs': '$binop_mul224.14', 'rhs': '$s2228.15', 'res': '$binop_mul230.16'}), (234, {'res': '$theta2_dot234.17'}), (236, {'op': '*', 'lhs': '$binop_mul230.16', 'rhs': '$theta2_dot234.17', 'res': '$binop_mul236.18'}), (240, {'op': '-', 'lhs': '$binop_mul216.11', 'rhs': '$binop_mul236.18', 'res': '$binop_sub240.19'}), (244, {'res': '$C244.20'}), (246, {'res': '$const246.21'}), (248, {'target': '$C244.20', 'index': '$const246.21', 'value': '$binop_sub240.19'}), (252, {'res': '$m2252.22'}), (254, {'value': '$m2252.22', 'res': '$254unary_negative.23'}), (256, {'res': '$Lc2256.24'}), (258, {'op': '*', 'lhs': '$254unary_negative.23', 'rhs': '$Lc2256.24', 'res': '$binop_mul258.25'}), (262, {'res': '$s2262.26'}), (264, {'op': '*', 'lhs': '$binop_mul258.25', 'rhs': '$s2262.26', 'res': '$binop_mul264.27'}), (268, {'res': '$theta2_dot268.28'}), (270, {'op': '*', 'lhs': '$binop_mul264.27', 'rhs': '$theta2_dot268.28', 'res': '$binop_mul270.29'}), (274, {'res': '$C274.30'}), (276, {'res': '$const276.31'}), (278, {'target': '$C274.30', 'index': '$const276.31', 'value': '$binop_mul270.29'}), (282, {'res': '$m2282.32'}), (284, {'value': '$m2282.32', 'res': '$284unary_negative.33'}), (286, {'res': '$L1286.34'}), (288, {'op': '*', 'lhs': '$284unary_negative.33', 'rhs': '$L1286.34', 'res': '$binop_mul288.35'}), (292, {'res': '$Lc2292.36'}), (294, {'op': '*', 'lhs': '$binop_mul288.35', 'rhs': '$Lc2292.36', 'res': '$binop_mul294.37'}), (298, {'res': '$s12298.38'}), (300, {'op': '*', 'lhs': '$binop_mul294.37', 'rhs': '$s12298.38', 'res': '$binop_mul300.39'}), (304, {'res': '$theta2_dot304.40'}), (306, {'op': '*', 'lhs': '$binop_mul300.39', 'rhs': '$theta2_dot304.40', 'res': '$binop_mul306.41'}), (310, {'res': '$C310.42'}), (312, {'res': '$const312.43'}), (314, {'target': '$C310.42', 'index': '$const312.43', 'value': '$binop_mul306.41'}), (318, {'res': '$m2318.44'}), (320, {'value': '$m2318.44', 'res': '$320unary_negative.45'}), (322, {'res': '$L1322.46'}), (324, {'op': '*', 'lhs': '$320unary_negative.45', 'rhs': '$L1322.46', 'res': '$binop_mul324.47'}), (328, {'res': '$Lc2328.48'}), (330, {'op': '*', 'lhs': '$binop_mul324.47', 'rhs': '$Lc2328.48', 'res': '$binop_mul330.49'}), (334, {'res': '$s12334.50'}), (336, {'op': '*', 'lhs': '$binop_mul330.49', 'rhs': '$s12334.50', 'res': '$binop_mul336.51'}), (340, {'res': '$theta2_dot340.52'}), (342, {'op': '*', 'lhs': '$binop_mul336.51', 'rhs': '$theta2_dot340.52', 'res': '$binop_mul342.53'}), (346, {'res': '$C346.54'}), (348, {'res': '$const348.55'}), (350, {'target': '$C346.54', 'index': '$const348.55', 'value': '$binop_mul342.53'}), (354, {'res': '$m2354.56'}), (356, {'res': '$L1356.57'}), (358, {'op': '*', 'lhs': '$m2354.56', 'rhs': '$L1356.57', 'res': '$binop_mul358.58'}), (362, {'res': '$Lc2362.59'}), (364, {'op': '*', 'lhs': '$binop_mul358.58', 'rhs': '$Lc2362.59', 'res': '$binop_mul364.60'}), (368, {'res': '$s12368.61'}), (370, {'op': '*', 'lhs': '$binop_mul364.60', 'rhs': '$s12368.61', 'res': '$binop_mul370.62'}), (374, {'res': '$theta1_dot374.63'}), (376, {'op': '*', 'lhs': '$binop_mul370.62', 'rhs': '$theta1_dot374.63', 'res': '$binop_mul376.64'}), (380, {'res': '$C380.65'}), (382, {'res': '$const382.66'}), (384, {'target': '$C380.65', 'index': '$const382.66', 'value': '$binop_mul376.64'}), (388, {'res': '$const388.67'}), (390, {'res': '$C390.68'}), (392, {'res': '$const392.69'}), (394, {'target': '$C390.68', 'index': '$const392.69', 'value': '$const388.67'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={398: ()})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=398 nstack_initial=0):
AdaptBlockInfo(insts=((398, {'res': '$include_gyroscopic398.0'}), (400, {'pred': '$include_gyroscopic398.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={402: (), 482: ()})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=402 nstack_initial=0):
AdaptBlockInfo(insts=((402, {'res': '$const402.0'}), (404, {'value': '$const402.0'}), (406, {'res': '$C406.1'}), (408, {'res': '$const408.2'}), (414, {'index': '$const408.2', 'target': '$C406.1', 'res': '$414binary_subscr.3'}), (418, {'res': '$gyro_coupling418.4'}), (420, {'res': '$theta1_dot420.5'}), (422, {'res': '$theta2_dot422.6'}), (424, {'op': '+', 'lhs': '$theta1_dot420.5', 'rhs': '$theta2_dot422.6', 'res': '$binop_add424.7'}), (428, {'op': '*', 'lhs': '$gyro_coupling418.4', 'rhs': '$binop_add424.7', 'res': '$binop_mul428.8'}), (432, {'op': '+=', 'lhs': '$414binary_subscr.3', 'rhs': '$binop_mul428.8', 'res': '$binop_iadd432.9'}), (440, {'target': '$C406.1', 'index': '$const408.2', 'value': '$binop_iadd432.9'}), (444, {'res': '$C444.10'}), (446, {'res': '$const446.11'}), (452, {'index': '$const446.11', 'target': '$C444.10', 'res': '$452binary_subscr.12'}), (456, {'res': '$gyro_coupling456.13'}), (458, {'res': '$theta1_dot458.14'}), (460, {'res': '$theta2_dot460.15'}), (462, {'op': '+', 'lhs': '$theta1_dot458.14', 'rhs': '$theta2_dot460.15', 'res': '$binop_add462.16'}), (466, {'op': '*', 'lhs': '$gyro_coupling456.13', 'rhs': '$binop_add462.16', 'res': '$binop_mul466.17'}), (470, {'op': '-=', 'lhs': '$452binary_subscr.12', 'rhs': '$binop_mul466.17', 'res': '$binop_isub470.18'}), (478, {'target': '$C444.10', 'index': '$const446.11', 'value': '$binop_isub470.18'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={482: ()})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=482 nstack_initial=0):
AdaptBlockInfo(insts=((482, {'res': '$C482.0'}), (484, {'retval': '$C482.0', 'castval': '$484return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:53:01 [   DEBUG] interpreter.py:1416 - label 0:
    theta1 = arg(0, name=theta1)             ['theta1']
    theta2 = arg(1, name=theta2)             ['theta2']
    theta1_dot = arg(2, name=theta1_dot)     ['theta1_dot']
    theta2_dot = arg(3, name=theta2_dot)     ['theta2_dot']
    m1 = arg(4, name=m1)                     ['m1']
    m2 = arg(5, name=m2)                     ['m2']
    L1 = arg(6, name=L1)                     ['L1']
    L2 = arg(7, name=L2)                     ['L2']
    Lc1 = arg(8, name=Lc1)                   ['Lc1']
    Lc2 = arg(9, name=Lc2)                   ['Lc2']
    include_coriolis = arg(10, name=include_coriolis) ['include_coriolis']
    include_centrifugal = arg(11, name=include_centrifugal) ['include_centrifugal']
    include_gyroscopic = arg(12, name=include_gyroscopic) ['include_gyroscopic']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $14load_attr.2 = getattr(value=$4load_global.0, attr=sin) ['$14load_attr.2', '$4load_global.0']
    s1 = call $14load_attr.2(theta1, func=$14load_attr.2, args=[Var(theta1, physics.py:344)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_attr.2', 's1', 'theta1']
    $46load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$46load_global.5']
    $56load_attr.7 = getattr(value=$46load_global.5, attr=sin) ['$46load_global.5', '$56load_attr.7']
    s2 = call $56load_attr.7(theta2, func=$56load_attr.7, args=[Var(theta2, physics.py:344)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_attr.7', 's2', 'theta2']
    $88load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$88load_global.10']
    $98load_attr.12 = getattr(value=$88load_global.10, attr=sin) ['$88load_global.10', '$98load_attr.12']
    $binop_sub122.15 = theta1 - theta2       ['$binop_sub122.15', 'theta1', 'theta2']
    s12 = call $98load_attr.12($binop_sub122.15, func=$98load_attr.12, args=[Var($binop_sub122.15, physics.py:356)], kws=(), vararg=None, varkwarg=None, target=None) ['$98load_attr.12', '$binop_sub122.15', 's12']
    $136load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$136load_global.17']
    $146load_attr.19 = getattr(value=$136load_global.17, attr=zeros) ['$136load_global.17', '$146load_attr.19']
    $const_3 = const(int, 3)                 ['$const_3']
    $const_3.1 = const(int, 3)               ['$const_3.1']
    $const166.20 = build_tuple(items=[Var($const_3, physics.py:359), Var($const_3.1, physics.py:359)]) ['$const166.20', '$const_3', '$const_3.1']
    C = call $146load_attr.19($const166.20, func=$146load_attr.19, args=[Var($const166.20, physics.py:359)], kws=(), vararg=None, varkwarg=None, target=None) ['$146load_attr.19', '$const166.20', 'C']
    bool180 = global(bool: <class 'bool'>)   ['bool180']
    $180pred = call bool180(include_coriolis, func=bool180, args=(Var(include_coriolis, physics.py:344),), kws=(), vararg=None, varkwarg=None, target=None) ['$180pred', 'bool180', 'include_coriolis']
    branch $180pred, 182, 398                ['$180pred']
label 182:
    bool184 = global(bool: <class 'bool'>)   ['bool184']
    $184pred = call bool184(include_centrifugal, func=bool184, args=(Var(include_centrifugal, physics.py:344),), kws=(), vararg=None, varkwarg=None, target=None) ['$184pred', 'bool184', 'include_centrifugal']
    branch $184pred, 186, 398                ['$184pred']
label 186:
    $binop_mul190.2 = m1 * Lc1               ['$binop_mul190.2', 'Lc1', 'm1']
    $binop_mul198.5 = m2 * L1                ['$binop_mul198.5', 'L1', 'm2']
    $binop_add202.6 = $binop_mul190.2 + $binop_mul198.5 ['$binop_add202.6', '$binop_mul190.2', '$binop_mul198.5']
    $206unary_negative.7 = unary(fn=<built-in function neg>, value=$binop_add202.6) ['$206unary_negative.7', '$binop_add202.6']
    $binop_mul210.9 = $206unary_negative.7 * s1 ['$206unary_negative.7', '$binop_mul210.9', 's1']
    $binop_mul216.11 = $binop_mul210.9 * theta1_dot ['$binop_mul210.9', '$binop_mul216.11', 'theta1_dot']
    $binop_mul224.14 = m2 * Lc2              ['$binop_mul224.14', 'Lc2', 'm2']
    $binop_mul230.16 = $binop_mul224.14 * s2 ['$binop_mul224.14', '$binop_mul230.16', 's2']
    $binop_mul236.18 = $binop_mul230.16 * theta2_dot ['$binop_mul230.16', '$binop_mul236.18', 'theta2_dot']
    $binop_sub240.19 = $binop_mul216.11 - $binop_mul236.18 ['$binop_mul216.11', '$binop_mul236.18', '$binop_sub240.19']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_1 = const(int, 1)                 ['$const_1']
    $const246.21 = build_tuple(items=[Var($const_0, physics.py:363), Var($const_1, physics.py:363)]) ['$const246.21', '$const_0', '$const_1']
    C[$const246.21] = $binop_sub240.19       ['$binop_sub240.19', '$const246.21', 'C']
    $254unary_negative.23 = unary(fn=<built-in function neg>, value=m2) ['$254unary_negative.23', 'm2']
    $binop_mul258.25 = $254unary_negative.23 * Lc2 ['$254unary_negative.23', '$binop_mul258.25', 'Lc2']
    $binop_mul264.27 = $binop_mul258.25 * s2 ['$binop_mul258.25', '$binop_mul264.27', 's2']
    $binop_mul270.29 = $binop_mul264.27 * theta2_dot ['$binop_mul264.27', '$binop_mul270.29', 'theta2_dot']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const_2 = const(int, 2)                 ['$const_2']
    $const276.31 = build_tuple(items=[Var($const_0.1, physics.py:364), Var($const_2, physics.py:364)]) ['$const276.31', '$const_0.1', '$const_2']
    C[$const276.31] = $binop_mul270.29       ['$binop_mul270.29', '$const276.31', 'C']
    $284unary_negative.33 = unary(fn=<built-in function neg>, value=m2) ['$284unary_negative.33', 'm2']
    $binop_mul288.35 = $284unary_negative.33 * L1 ['$284unary_negative.33', '$binop_mul288.35', 'L1']
    $binop_mul294.37 = $binop_mul288.35 * Lc2 ['$binop_mul288.35', '$binop_mul294.37', 'Lc2']
    $binop_mul300.39 = $binop_mul294.37 * s12 ['$binop_mul294.37', '$binop_mul300.39', 's12']
    $binop_mul306.41 = $binop_mul300.39 * theta2_dot ['$binop_mul300.39', '$binop_mul306.41', 'theta2_dot']
    $const_1.1 = const(int, 1)               ['$const_1.1']
    $const_1.2 = const(int, 1)               ['$const_1.2']
    $const312.43 = build_tuple(items=[Var($const_1.1, physics.py:366), Var($const_1.2, physics.py:366)]) ['$const312.43', '$const_1.1', '$const_1.2']
    C[$const312.43] = $binop_mul306.41       ['$binop_mul306.41', '$const312.43', 'C']
    $320unary_negative.45 = unary(fn=<built-in function neg>, value=m2) ['$320unary_negative.45', 'm2']
    $binop_mul324.47 = $320unary_negative.45 * L1 ['$320unary_negative.45', '$binop_mul324.47', 'L1']
    $binop_mul330.49 = $binop_mul324.47 * Lc2 ['$binop_mul324.47', '$binop_mul330.49', 'Lc2']
    $binop_mul336.51 = $binop_mul330.49 * s12 ['$binop_mul330.49', '$binop_mul336.51', 's12']
    $binop_mul342.53 = $binop_mul336.51 * theta2_dot ['$binop_mul336.51', '$binop_mul342.53', 'theta2_dot']
    $const_1.3 = const(int, 1)               ['$const_1.3']
    $const_2.1 = const(int, 2)               ['$const_2.1']
    $const348.55 = build_tuple(items=[Var($const_1.3, physics.py:367), Var($const_2.1, physics.py:367)]) ['$const348.55', '$const_1.3', '$const_2.1']
    C[$const348.55] = $binop_mul342.53       ['$binop_mul342.53', '$const348.55', 'C']
    $binop_mul358.58 = m2 * L1               ['$binop_mul358.58', 'L1', 'm2']
    $binop_mul364.60 = $binop_mul358.58 * Lc2 ['$binop_mul358.58', '$binop_mul364.60', 'Lc2']
    $binop_mul370.62 = $binop_mul364.60 * s12 ['$binop_mul364.60', '$binop_mul370.62', 's12']
    $binop_mul376.64 = $binop_mul370.62 * theta1_dot ['$binop_mul370.62', '$binop_mul376.64', 'theta1_dot']
    $const_2.2 = const(int, 2)               ['$const_2.2']
    $const_1.4 = const(int, 1)               ['$const_1.4']
    $const382.66 = build_tuple(items=[Var($const_2.2, physics.py:369), Var($const_1.4, physics.py:369)]) ['$const382.66', '$const_1.4', '$const_2.2']
    C[$const382.66] = $binop_mul376.64       ['$binop_mul376.64', '$const382.66', 'C']
    $const388.67 = const(float, 0.0)         ['$const388.67']
    $const_2.3 = const(int, 2)               ['$const_2.3']
    $const_2.4 = const(int, 2)               ['$const_2.4']
    $const392.69 = build_tuple(items=[Var($const_2.3, physics.py:370), Var($const_2.4, physics.py:370)]) ['$const392.69', '$const_2.3', '$const_2.4']
    C[$const392.69] = $const388.67           ['$const388.67', '$const392.69', 'C']
    jump 398                                 []
label 398:
    bool400 = global(bool: <class 'bool'>)   ['bool400']
    $400pred = call bool400(include_gyroscopic, func=bool400, args=(Var(include_gyroscopic, physics.py:344),), kws=(), vararg=None, varkwarg=None, target=None) ['$400pred', 'bool400', 'include_gyroscopic']
    branch $400pred, 402, 482                ['$400pred']
label 402:
    gyro_coupling = const(float, 0.01)       ['gyro_coupling']
    $const_0.2 = const(int, 0)               ['$const_0.2']
    $const_1.5 = const(int, 1)               ['$const_1.5']
    $const408.2 = build_tuple(items=[Var($const_0.2, physics.py:376), Var($const_1.5, physics.py:376)]) ['$const408.2', '$const_0.2', '$const_1.5']
    $414binary_subscr.3 = getitem(value=C, index=$const408.2, fn=<built-in function getitem>) ['$414binary_subscr.3', '$const408.2', 'C']
    $binop_add424.7 = theta1_dot + theta2_dot ['$binop_add424.7', 'theta1_dot', 'theta2_dot']
    $binop_mul428.8 = gyro_coupling * $binop_add424.7 ['$binop_add424.7', '$binop_mul428.8', 'gyro_coupling']
    $binop_iadd432.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$414binary_subscr.3, rhs=$binop_mul428.8, static_lhs=Undefined, static_rhs=Undefined) ['$414binary_subscr.3', '$binop_iadd432.9', '$binop_mul428.8']
    C[$const408.2] = $binop_iadd432.9        ['$binop_iadd432.9', '$const408.2', 'C']
    $const_1.6 = const(int, 1)               ['$const_1.6']
    $const_0.3 = const(int, 0)               ['$const_0.3']
    $const446.11 = build_tuple(items=[Var($const_1.6, physics.py:377), Var($const_0.3, physics.py:377)]) ['$const446.11', '$const_0.3', '$const_1.6']
    $452binary_subscr.12 = getitem(value=C, index=$const446.11, fn=<built-in function getitem>) ['$452binary_subscr.12', '$const446.11', 'C']
    $binop_add462.16 = theta1_dot + theta2_dot ['$binop_add462.16', 'theta1_dot', 'theta2_dot']
    $binop_mul466.17 = gyro_coupling * $binop_add462.16 ['$binop_add462.16', '$binop_mul466.17', 'gyro_coupling']
    $binop_isub470.18 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=$452binary_subscr.12, rhs=$binop_mul466.17, static_lhs=Undefined, static_rhs=Undefined) ['$452binary_subscr.12', '$binop_isub470.18', '$binop_mul466.17']
    C[$const446.11] = $binop_isub470.18      ['$binop_isub470.18', '$const446.11', 'C']
    jump 482                                 []
label 482:
    $484return_value.1 = cast(value=C)       ['$484return_value.1', 'C']
    return $484return_value.1                ['$484return_value.1']

2025-10-06 11:53:01 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:53:01 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253DF03560>
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: theta1 = arg(0, name=theta1)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: theta2 = arg(1, name=theta2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: theta1_dot = arg(2, name=theta1_dot)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: theta2_dot = arg(3, name=theta2_dot)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: m1 = arg(4, name=m1)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: m2 = arg(5, name=m2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: L1 = arg(6, name=L1)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: L2 = arg(7, name=L2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: Lc1 = arg(8, name=Lc1)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: Lc2 = arg(9, name=Lc2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: include_coriolis = arg(10, name=include_coriolis)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: include_centrifugal = arg(11, name=include_centrifugal)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: include_gyroscopic = arg(12, name=include_gyroscopic)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $14load_attr.2 = getattr(value=$4load_global.0, attr=sin)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: s1 = call $14load_attr.2(theta1, func=$14load_attr.2, args=[Var(theta1, physics.py:344)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $46load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $56load_attr.7 = getattr(value=$46load_global.5, attr=sin)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: s2 = call $56load_attr.7(theta2, func=$56load_attr.7, args=[Var(theta2, physics.py:344)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $88load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $98load_attr.12 = getattr(value=$88load_global.10, attr=sin)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_sub122.15 = theta1 - theta2
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: s12 = call $98load_attr.12($binop_sub122.15, func=$98load_attr.12, args=[Var($binop_sub122.15, physics.py:356)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $136load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $146load_attr.19 = getattr(value=$136load_global.17, attr=zeros)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_3 = const(int, 3)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_3.1 = const(int, 3)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const166.20 = build_tuple(items=[Var($const_3, physics.py:359), Var($const_3.1, physics.py:359)])
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: C = call $146load_attr.19($const166.20, func=$146load_attr.19, args=[Var($const166.20, physics.py:359)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: bool180 = global(bool: <class 'bool'>)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $180pred = call bool180(include_coriolis, func=bool180, args=(Var(include_coriolis, physics.py:344),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: branch $180pred, 182, 398
2025-10-06 11:53:01 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 182
2025-10-06 11:53:01 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253DF03560>
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: bool184 = global(bool: <class 'bool'>)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $184pred = call bool184(include_centrifugal, func=bool184, args=(Var(include_centrifugal, physics.py:344),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: branch $184pred, 186, 398
2025-10-06 11:53:01 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 186
2025-10-06 11:53:01 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253DF03560>
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul190.2 = m1 * Lc1
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul198.5 = m2 * L1
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_add202.6 = $binop_mul190.2 + $binop_mul198.5
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $206unary_negative.7 = unary(fn=<built-in function neg>, value=$binop_add202.6)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul210.9 = $206unary_negative.7 * s1
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul216.11 = $binop_mul210.9 * theta1_dot
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul224.14 = m2 * Lc2
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul230.16 = $binop_mul224.14 * s2
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul236.18 = $binop_mul230.16 * theta2_dot
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_sub240.19 = $binop_mul216.11 - $binop_mul236.18
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_0 = const(int, 0)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_1 = const(int, 1)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const246.21 = build_tuple(items=[Var($const_0, physics.py:363), Var($const_1, physics.py:363)])
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: C[(0, 1)] = $binop_sub240.19
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $254unary_negative.23 = unary(fn=<built-in function neg>, value=m2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul258.25 = $254unary_negative.23 * Lc2
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul264.27 = $binop_mul258.25 * s2
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul270.29 = $binop_mul264.27 * theta2_dot
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_0.1 = const(int, 0)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_2 = const(int, 2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const276.31 = build_tuple(items=[Var($const_0.1, physics.py:364), Var($const_2, physics.py:364)])
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: C[(0, 2)] = $binop_mul270.29
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $284unary_negative.33 = unary(fn=<built-in function neg>, value=m2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul288.35 = $284unary_negative.33 * L1
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul294.37 = $binop_mul288.35 * Lc2
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul300.39 = $binop_mul294.37 * s12
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul306.41 = $binop_mul300.39 * theta2_dot
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_1.1 = const(int, 1)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_1.2 = const(int, 1)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const312.43 = build_tuple(items=[Var($const_1.1, physics.py:366), Var($const_1.2, physics.py:366)])
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: C[(1, 1)] = $binop_mul306.41
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $320unary_negative.45 = unary(fn=<built-in function neg>, value=m2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul324.47 = $320unary_negative.45 * L1
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul330.49 = $binop_mul324.47 * Lc2
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul336.51 = $binop_mul330.49 * s12
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul342.53 = $binop_mul336.51 * theta2_dot
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_1.3 = const(int, 1)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_2.1 = const(int, 2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const348.55 = build_tuple(items=[Var($const_1.3, physics.py:367), Var($const_2.1, physics.py:367)])
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: C[(1, 2)] = $binop_mul342.53
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul358.58 = m2 * L1
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul364.60 = $binop_mul358.58 * Lc2
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul370.62 = $binop_mul364.60 * s12
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul376.64 = $binop_mul370.62 * theta1_dot
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_2.2 = const(int, 2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_1.4 = const(int, 1)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const382.66 = build_tuple(items=[Var($const_2.2, physics.py:369), Var($const_1.4, physics.py:369)])
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: C[(2, 1)] = $binop_mul376.64
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const388.67 = const(float, 0.0)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_2.3 = const(int, 2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_2.4 = const(int, 2)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const392.69 = build_tuple(items=[Var($const_2.3, physics.py:370), Var($const_2.4, physics.py:370)])
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: C[(2, 2)] = $const388.67
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: jump 398
2025-10-06 11:53:01 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 398
2025-10-06 11:53:01 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253DF03560>
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: bool400 = global(bool: <class 'bool'>)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $400pred = call bool400(include_gyroscopic, func=bool400, args=(Var(include_gyroscopic, physics.py:344),), kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: branch $400pred, 402, 482
2025-10-06 11:53:01 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 402
2025-10-06 11:53:01 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253DF03560>
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: gyro_coupling = const(float, 0.01)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_0.2 = const(int, 0)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_1.5 = const(int, 1)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const408.2 = build_tuple(items=[Var($const_0.2, physics.py:376), Var($const_1.5, physics.py:376)])
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $414binary_subscr.3 = static_getitem(value=C, index=(0, 1), index_var=$const408.2, fn=<built-in function getitem>)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_add424.7 = theta1_dot + theta2_dot
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul428.8 = gyro_coupling * $binop_add424.7
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_iadd432.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$414binary_subscr.3, rhs=$binop_mul428.8, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: C[(0, 1)] = $binop_iadd432.9
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_1.6 = const(int, 1)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const_0.3 = const(int, 0)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $const446.11 = build_tuple(items=[Var($const_1.6, physics.py:377), Var($const_0.3, physics.py:377)])
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $452binary_subscr.12 = static_getitem(value=C, index=(1, 0), index_var=$const446.11, fn=<built-in function getitem>)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_add462.16 = theta1_dot + theta2_dot
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_mul466.17 = gyro_coupling * $binop_add462.16
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $binop_isub470.18 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=$452binary_subscr.12, rhs=$binop_mul466.17, static_lhs=Undefined, static_rhs=Undefined)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: C[(1, 0)] = $binop_isub470.18
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: jump 482
2025-10-06 11:53:01 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 482
2025-10-06 11:53:01 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253DF03560>
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $484return_value.1 = cast(value=C)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: return $484return_value.1
2025-10-06 11:53:01 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$136load_global.17': [(<numba.core.ir.Assign object at 0x000001253DEE8A10>,
                                     0)],
             '$146load_attr.19': [(<numba.core.ir.Assign object at 0x000001253DEE8B60>,
                                   0)],
             '$14load_attr.2': [(<numba.core.ir.Assign object at 0x000001253DECF6E0>,
                                 0)],
             '$180pred': [(<numba.core.ir.Assign object at 0x000001253DEE94C0>,
                           0)],
             '$184pred': [(<numba.core.ir.Assign object at 0x000001253DEE95B0>,
                           182)],
             '$206unary_negative.7': [(<numba.core.ir.Assign object at 0x000001253DEE9F40>,
                                       186)],
             '$254unary_negative.23': [(<numba.core.ir.Assign object at 0x000001253DEEB410>,
                                        186)],
             '$284unary_negative.33': [(<numba.core.ir.Assign object at 0x000001253DEF4230>,
                                        186)],
             '$320unary_negative.45': [(<numba.core.ir.Assign object at 0x000001253DEF5250>,
                                        186)],
             '$400pred': [(<numba.core.ir.Assign object at 0x000001253DEEB2C0>,
                           398)],
             '$414binary_subscr.3': [(<numba.core.ir.Assign object at 0x000001253DF00D40>,
                                      402)],
             '$452binary_subscr.12': [(<numba.core.ir.Assign object at 0x000001253DF00A70>,
                                       402)],
             '$46load_global.5': [(<numba.core.ir.Assign object at 0x000001253DECFB90>,
                                   0)],
             '$484return_value.1': [(<numba.core.ir.Assign object at 0x000001253DF00350>,
                                     482)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001253DECF590>,
                                  0)],
             '$56load_attr.7': [(<numba.core.ir.Assign object at 0x000001253DECFCE0>,
                                 0)],
             '$88load_global.10': [(<numba.core.ir.Assign object at 0x000001253DEE81D0>,
                                    0)],
             '$98load_attr.12': [(<numba.core.ir.Assign object at 0x000001253DEE8320>,
                                  0)],
             '$binop_add202.6': [(<numba.core.ir.Assign object at 0x000001253DEE9E20>,
                                  186)],
             '$binop_add424.7': [(<numba.core.ir.Assign object at 0x000001253DEF7950>,
                                  402)],
             '$binop_add462.16': [(<numba.core.ir.Assign object at 0x000001253DF00680>,
                                   402)],
             '$binop_iadd432.9': [(<numba.core.ir.Assign object at 0x000001253DEF7BF0>,
                                   402)],
             '$binop_isub470.18': [(<numba.core.ir.Assign object at 0x000001253DF00920>,
                                    402)],
             '$binop_mul190.2': [(<numba.core.ir.Assign object at 0x000001253DEE99A0>,
                                  186)],
             '$binop_mul198.5': [(<numba.core.ir.Assign object at 0x000001253DEE9CD0>,
                                  186)],
             '$binop_mul210.9': [(<numba.core.ir.Assign object at 0x000001253DEEA1B0>,
                                  186)],
             '$binop_mul216.11': [(<numba.core.ir.Assign object at 0x000001253DEEA3F0>,
                                   186)],
             '$binop_mul224.14': [(<numba.core.ir.Assign object at 0x000001253DEEA720>,
                                   186)],
             '$binop_mul230.16': [(<numba.core.ir.Assign object at 0x000001253DEEA960>,
                                   186)],
             '$binop_mul236.18': [(<numba.core.ir.Assign object at 0x000001253DEEABA0>,
                                   186)],
             '$binop_mul258.25': [(<numba.core.ir.Assign object at 0x000001253DEEB680>,
                                   186)],
             '$binop_mul264.27': [(<numba.core.ir.Assign object at 0x000001253DEEB8C0>,
                                   186)],
             '$binop_mul270.29': [(<numba.core.ir.Assign object at 0x000001253DEEBB00>,
                                   186)],
             '$binop_mul288.35': [(<numba.core.ir.Assign object at 0x000001253DEF44A0>,
                                   186)],
             '$binop_mul294.37': [(<numba.core.ir.Assign object at 0x000001253DEF46E0>,
                                   186)],
             '$binop_mul300.39': [(<numba.core.ir.Assign object at 0x000001253DEF4920>,
                                   186)],
             '$binop_mul306.41': [(<numba.core.ir.Assign object at 0x000001253DEF4B60>,
                                   186)],
             '$binop_mul324.47': [(<numba.core.ir.Assign object at 0x000001253DEF54C0>,
                                   186)],
             '$binop_mul330.49': [(<numba.core.ir.Assign object at 0x000001253DEF5700>,
                                   186)],
             '$binop_mul336.51': [(<numba.core.ir.Assign object at 0x000001253DEF5940>,
                                   186)],
             '$binop_mul342.53': [(<numba.core.ir.Assign object at 0x000001253DEF5B80>,
                                   186)],
             '$binop_mul358.58': [(<numba.core.ir.Assign object at 0x000001253DEF6390>,
                                   186)],
             '$binop_mul364.60': [(<numba.core.ir.Assign object at 0x000001253DEF65D0>,
                                   186)],
             '$binop_mul370.62': [(<numba.core.ir.Assign object at 0x000001253DEF6810>,
                                   186)],
             '$binop_mul376.64': [(<numba.core.ir.Assign object at 0x000001253DEF6A50>,
                                   186)],
             '$binop_mul428.8': [(<numba.core.ir.Assign object at 0x000001253DEF7AA0>,
                                  402)],
             '$binop_mul466.17': [(<numba.core.ir.Assign object at 0x000001253DF007D0>,
                                   402)],
             '$binop_sub122.15': [(<numba.core.ir.Assign object at 0x000001253DEE8680>,
                                   0)],
             '$binop_sub240.19': [(<numba.core.ir.Assign object at 0x000001253DEEACF0>,
                                   186)],
             '$const166.20': [(<numba.core.ir.Assign object at 0x000001253DEE8EC0>,
                               0)],
             '$const246.21': [(<numba.core.ir.Assign object at 0x000001253DEEB170>,
                               186)],
             '$const276.31': [(<numba.core.ir.Assign object at 0x000001253DEEBF50>,
                               186)],
             '$const312.43': [(<numba.core.ir.Assign object at 0x000001253DEF4FB0>,
                               186)],
             '$const348.55': [(<numba.core.ir.Assign object at 0x000001253DEF5FD0>,
                               186)],
             '$const382.66': [(<numba.core.ir.Assign object at 0x000001253DEF6EA0>,
                               186)],
             '$const388.67': [(<numba.core.ir.Assign object at 0x000001253DEF7050>,
                               186)],
             '$const392.69': [(<numba.core.ir.Assign object at 0x000001253DEF74D0>,
                               186)],
             '$const408.2': [(<numba.core.ir.Assign object at 0x000001253DEF6450>,
                              402)],
             '$const446.11': [(<numba.core.ir.Assign object at 0x000001253DF000E0>,
                               402)],
             '$const_0': [(<numba.core.ir.Assign object at 0x000001253DEEAF60>,
                           186)],
             '$const_0.1': [(<numba.core.ir.Assign object at 0x000001253DEEBD40>,
                             186)],
             '$const_0.2': [(<numba.core.ir.Assign object at 0x000001253DEF55B0>,
                             402)],
             '$const_0.3': [(<numba.core.ir.Assign object at 0x000001253DEF7FB0>,
                             402)],
             '$const_1': [(<numba.core.ir.Assign object at 0x000001253DEEB080>,
                           186)],
             '$const_1.1': [(<numba.core.ir.Assign object at 0x000001253DEF4DA0>,
                             186)],
             '$const_1.2': [(<numba.core.ir.Assign object at 0x000001253DEF4EC0>,
                             186)],
             '$const_1.3': [(<numba.core.ir.Assign object at 0x000001253DEF5DC0>,
                             186)],
             '$const_1.4': [(<numba.core.ir.Assign object at 0x000001253DEF6DB0>,
                             186)],
             '$const_1.5': [(<numba.core.ir.Assign object at 0x000001253DEF5C70>,
                             402)],
             '$const_1.6': [(<numba.core.ir.Assign object at 0x000001253DEF7E90>,
                             402)],
             '$const_2': [(<numba.core.ir.Assign object at 0x000001253DEEBE60>,
                           186)],
             '$const_2.1': [(<numba.core.ir.Assign object at 0x000001253DEF5EE0>,
                             186)],
             '$const_2.2': [(<numba.core.ir.Assign object at 0x000001253DEF6C90>,
                             186)],
             '$const_2.3': [(<numba.core.ir.Assign object at 0x000001253DEF72C0>,
                             186)],
             '$const_2.4': [(<numba.core.ir.Assign object at 0x000001253DEF73E0>,
                             186)],
             '$const_3': [(<numba.core.ir.Assign object at 0x000001253DEE8CE0>,
                           0)],
             '$const_3.1': [(<numba.core.ir.Assign object at 0x000001253DEE8E00>,
                             0)],
             'C': [(<numba.core.ir.Assign object at 0x000001253DEE9070>, 0)],
             'L1': [(<numba.core.ir.Assign object at 0x000001253DECED50>, 0)],
             'L2': [(<numba.core.ir.Assign object at 0x000001253DECEE70>, 0)],
             'Lc1': [(<numba.core.ir.Assign object at 0x000001253DECEF90>, 0)],
             'Lc2': [(<numba.core.ir.Assign object at 0x000001253DECF0B0>, 0)],
             'bool180': [(<numba.core.ir.Assign object at 0x000001253DEE93A0>,
                          0)],
             'bool184': [(<numba.core.ir.Assign object at 0x000001253DEE9130>,
                          182)],
             'bool400': [(<numba.core.ir.Assign object at 0x000001253DEEA7E0>,
                          398)],
             'gyro_coupling': [(<numba.core.ir.Assign object at 0x000001253DECFA70>,
                                402)],
             'include_centrifugal': [(<numba.core.ir.Assign object at 0x000001253DECF2F0>,
                                      0)],
             'include_coriolis': [(<numba.core.ir.Assign object at 0x000001253DECF1D0>,
                                   0)],
             'include_gyroscopic': [(<numba.core.ir.Assign object at 0x000001253DECF410>,
                                     0)],
             'm1': [(<numba.core.ir.Assign object at 0x000001253DECEB10>, 0)],
             'm2': [(<numba.core.ir.Assign object at 0x000001253DECEC30>, 0)],
             's1': [(<numba.core.ir.Assign object at 0x000001253DECF980>, 0)],
             's12': [(<numba.core.ir.Assign object at 0x000001253DEE8800>, 0)],
             's2': [(<numba.core.ir.Assign object at 0x000001253DECFF80>, 0)],
             'theta1': [(<numba.core.ir.Assign object at 0x000001253DECE690>,
                         0)],
             'theta1_dot': [(<numba.core.ir.Assign object at 0x000001253DECE8D0>,
                             0)],
             'theta2': [(<numba.core.ir.Assign object at 0x000001253DECE7B0>,
                         0)],
             'theta2_dot': [(<numba.core.ir.Assign object at 0x000001253DECE9F0>,
                             0)]})
2025-10-06 11:53:01 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253DF1E8D0>
2025-10-06 11:53:01 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=4445)
           2	RESUME(arg=0, lineno=4445)
           4	LOAD_GLOBAL(arg=1, lineno=4446)
          14	LOAD_ATTR(arg=2, lineno=4446)
          34	LOAD_FAST(arg=0, lineno=4446)
          36	LOAD_FAST(arg=1, lineno=4446)
          38	KW_NAMES(arg=1, lineno=4446)
          40	CALL(arg=2, lineno=4446)
          48	STORE_FAST(arg=2, lineno=4446)
          50	LOAD_FAST(arg=2, lineno=4447)
          52	LOAD_ATTR(arg=5, lineno=4447)
          72	CALL(arg=0, lineno=4447)
          80	POP_TOP(arg=None, lineno=4447)
          82	LOAD_FAST(arg=2, lineno=4448)
          84	RETURN_VALUE(arg=None, lineno=4448)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:53:01 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=4445)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=4445)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4446)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=4446)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=4446)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=4446)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2', '$shape34.3']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=38, inst=KW_NAMES(arg=1, lineno=4446)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2', '$shape34.3', '$dtype36.4']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=40, inst=CALL(arg=2, lineno=4446)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$14load_attr.2', '$shape34.3', '$dtype36.4']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=4446)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$40call.5']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=4447)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=52, inst=LOAD_ATTR(arg=5, lineno=4447)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$arr50.6']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=72, inst=CALL(arg=0, lineno=4447)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$null$52.7', '$52load_attr.8']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=80, inst=POP_TOP(arg=None, lineno=4447)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$72call.9']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=82, inst=LOAD_FAST(arg=2, lineno=4448)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:01 [   DEBUG] byteflow.py:350 - dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=4448)
2025-10-06 11:53:01 [   DEBUG] byteflow.py:351 - stack ['$arr82.10']
2025-10-06 11:53:01 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:53:01 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:53:01 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:53:01 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:53:01 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:53:01 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:53:01 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'item': '$4load_global.0', 'res': '$14load_attr.2'}), (34, {'res': '$shape34.3'}), (36, {'res': '$dtype36.4'}), (40, {'func': '$14load_attr.2', 'args': ['$shape34.3', '$dtype36.4'], 'kw_names': 1, 'res': '$40call.5'}), (48, {'value': '$40call.5'}), (50, {'res': '$arr50.6'}), (52, {'item': '$arr50.6', 'res': '$52load_attr.8'}), (72, {'func': '$52load_attr.8', 'args': [], 'kw_names': None, 'res': '$72call.9'}), (82, {'res': '$arr82.10'}), (84, {'retval': '$arr82.10', 'castval': '$84return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:53:01 [   DEBUG] interpreter.py:1416 - label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>) ['$4load_global.0']
    $14load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$14load_attr.2', '$4load_global.0']
    arr = call $14load_attr.2(shape, func=$14load_attr.2, args=[Var(shape, arrayobj.py:4445)], kws=[('dtype', Var(dtype, arrayobj.py:4445))], vararg=None, varkwarg=None, target=None) ['$14load_attr.2', 'arr', 'dtype', 'shape']
    $52load_attr.8 = getattr(value=arr, attr=_zero_fill) ['$52load_attr.8', 'arr']
    $72call.9 = call $52load_attr.8(func=$52load_attr.8, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_attr.8', '$72call.9']
    $84return_value.11 = cast(value=arr)     ['$84return_value.11', 'arr']
    return $84return_value.11                ['$84return_value.11']

2025-10-06 11:53:01 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:53:01 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253DF46E70>
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: shape = arg(0, name=shape)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: dtype = arg(1, name=dtype)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $4load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\numpy\\__init__.py'>)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $14load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: arr = call $14load_attr.2(shape, func=$14load_attr.2, args=[Var(shape, arrayobj.py:4445)], kws=[('dtype', Var(dtype, arrayobj.py:4445))], vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $52load_attr.8 = getattr(value=arr, attr=_zero_fill)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $72call.9 = call $52load_attr.8(func=$52load_attr.8, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: $84return_value.11 = cast(value=arr)
2025-10-06 11:53:01 [   DEBUG] ssa.py:210 - on stmt: return $84return_value.11
2025-10-06 11:53:01 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$14load_attr.2': [(<numba.core.ir.Assign object at 0x000001253DF448F0>,
                                 0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001253DF447A0>,
                                  0)],
             '$52load_attr.8': [(<numba.core.ir.Assign object at 0x000001253DF44F80>,
                                 0)],
             '$72call.9': [(<numba.core.ir.Assign object at 0x000001253DF45130>,
                            0)],
             '$84return_value.11': [(<numba.core.ir.Assign object at 0x000001253DF45340>,
                                     0)],
             'arr': [(<numba.core.ir.Assign object at 0x000001253DF44C80>, 0)],
             'dtype': [(<numba.core.ir.Assign object at 0x000001253DF44620>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x000001253DF44500>,
                        0)]})
2025-10-06 11:53:01 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253DF34740>
2025-10-06 11:53:02 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=4377)
           2	COPY_FREE_VARS(arg=1, lineno=4377)
           4	RESUME(arg=0, lineno=4377)
           6	LOAD_GLOBAL(arg=1, lineno=4378)
          16	LOAD_FAST(arg=0, lineno=4378)
          18	LOAD_FAST(arg=1, lineno=4378)
          20	LOAD_DEREF(arg=2, lineno=4378)
          22	CALL(arg=3, lineno=4378)
          30	RETURN_VALUE(arg=None, lineno=4378)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:53:02 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:53:02 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=4377)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4377)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=RESUME(arg=0, lineno=4377)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4378)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4378)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack ['$null$6.1', '$6load_global.0']
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=4378)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack ['$null$6.1', '$6load_global.0', '$shape16.2']
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=20, inst=LOAD_DEREF(arg=2, lineno=4378)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack ['$null$6.1', '$6load_global.0', '$shape16.2', '$dtype18.3']
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=22, inst=CALL(arg=3, lineno=4378)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack ['$null$6.1', '$6load_global.0', '$shape16.2', '$dtype18.3', '$20load_deref.4']
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=4378)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack ['$22call.5']
2025-10-06 11:53:02 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:53:02 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:53:02 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:53:02 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:53:02 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:02 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:02 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:53:02 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:53:02 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:53:02 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (16, {'res': '$shape16.2'}), (18, {'res': '$dtype18.3'}), (20, {'res': '$20load_deref.4'}), (22, {'func': '$6load_global.0', 'args': ['$shape16.2', '$dtype18.3', '$20load_deref.4'], 'kw_names': None, 'res': '$22call.5'}), (30, {'retval': '$22call.5', 'castval': '$30return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:53:02 [   DEBUG] interpreter.py:1416 - label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $20load_deref.4 = freevar(retty: array(float64, 2d, C)) ['$20load_deref.4']
    $22call.5 = call $6load_global.0(shape, dtype, $20load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4377), Var(dtype, arrayobj.py:4377), Var($20load_deref.4, arrayobj.py:4378)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_deref.4', '$22call.5', '$6load_global.0', 'dtype', 'shape']
    $30return_value.6 = cast(value=$22call.5) ['$22call.5', '$30return_value.6']
    return $30return_value.6                 ['$30return_value.6']

2025-10-06 11:53:02 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:53:02 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253DF458B0>
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: shape = arg(0, name=shape)
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: dtype = arg(1, name=dtype)
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: $20load_deref.4 = freevar(retty: array(float64, 2d, C))
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: $22call.5 = call $6load_global.0(shape, dtype, $20load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4377), Var(dtype, arrayobj.py:4377), Var($20load_deref.4, arrayobj.py:4378)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: $30return_value.6 = cast(value=$22call.5)
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: return $30return_value.6
2025-10-06 11:53:02 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$20load_deref.4': [(<numba.core.ir.Assign object at 0x000001253DF5CA70>,
                                  0)],
             '$22call.5': [(<numba.core.ir.Assign object at 0x000001253DF5CC20>,
                            0)],
             '$30return_value.6': [(<numba.core.ir.Assign object at 0x000001253DF5CD40>,
                                    0)],
             '$6load_global.0': [(<numba.core.ir.Assign object at 0x000001253DF5C770>,
                                  0)],
             'dtype': [(<numba.core.ir.Assign object at 0x000001253DF5C620>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x000001253DF5C500>,
                        0)]})
2025-10-06 11:53:02 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253DF473B0>
2025-10-06 11:53:02 [   DEBUG] byteflow.py:90 - bytecode dump:
>          0	NOP(arg=None, lineno=4436)
           2	RESUME(arg=0, lineno=4436)
           4	LOAD_GLOBAL(arg=1, lineno=4437)
          14	LOAD_FAST(arg=0, lineno=4437)
          16	CALL(arg=1, lineno=4437)
          24	POP_TOP(arg=None, lineno=4437)
          26	RETURN_CONST(arg=0, lineno=4437)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:116 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-10-06 11:53:02 [   DEBUG] byteflow.py:119 - stack: []
2025-10-06 11:53:02 [   DEBUG] byteflow.py:120 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=0, inst=NOP(arg=None, lineno=4436)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=2, inst=RESUME(arg=0, lineno=4436)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4437)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=4437)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0']
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=16, inst=CALL(arg=1, lineno=4437)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack ['$null$4.1', '$4load_global.0', '$self14.2']
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=24, inst=POP_TOP(arg=None, lineno=4437)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack ['$16call.3']
2025-10-06 11:53:02 [   DEBUG] byteflow.py:350 - dispatch pc=26, inst=RETURN_CONST(arg=0, lineno=4437)
2025-10-06 11:53:02 [   DEBUG] byteflow.py:351 - stack []
2025-10-06 11:53:02 [   DEBUG] byteflow.py:138 - end state. edges=[]
2025-10-06 11:53:02 [   DEBUG] byteflow.py:219 - -------------------------Prune PHIs-------------------------
2025-10-06 11:53:02 [   DEBUG] byteflow.py:288 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-10-06 11:53:02 [   DEBUG] byteflow.py:245 - defmap: {}
2025-10-06 11:53:02 [   DEBUG] byteflow.py:246 - phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:02 [   DEBUG] byteflow.py:267 - changing phismap: defaultdict(<class 'set'>, {})
2025-10-06 11:53:02 [   DEBUG] byteflow.py:276 - keep phismap: {}
2025-10-06 11:53:02 [   DEBUG] byteflow.py:282 - new_out: defaultdict(<class 'dict'>, {})
2025-10-06 11:53:02 [   DEBUG] byteflow.py:292 - ----------------------DONE Prune PHIs-----------------------
2025-10-06 11:53:02 [   DEBUG] byteflow.py:150 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$self14.2'}), (16, {'func': '$4load_global.0', 'args': ['$self14.2'], 'kw_names': None, 'res': '$16call.3'}), (26, {'retval': '$const26.4', 'castval': '$26return_const.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-10-06 11:53:02 [   DEBUG] interpreter.py:1416 - label 0:
    self = arg(0, name=self)                 ['self']
    $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$4load_global.0']
    $16call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4436)], kws=(), vararg=None, varkwarg=None, target=None) ['$16call.3', '$4load_global.0', 'self']
    $const26.4 = const(NoneType, None)       ['$const26.4']
    $26return_const.5 = cast(value=$const26.4) ['$26return_const.5', '$const26.4']
    return $26return_const.5                 ['$26return_const.5']

2025-10-06 11:53:02 [   DEBUG] ssa.py:178 - ==== SSA block analysis pass on 0
2025-10-06 11:53:02 [   DEBUG] ssa.py:208 - Running <numba.core.ssa._GatherDefsHandler object at 0x000001253DF8A000>
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: self = arg(0, name=self)
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: $16call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4436)], kws=(), vararg=None, varkwarg=None, target=None)
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: $const26.4 = const(NoneType, None)
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: $26return_const.5 = cast(value=$const26.4)
2025-10-06 11:53:02 [   DEBUG] ssa.py:210 - on stmt: return $26return_const.5
2025-10-06 11:53:02 [   DEBUG] ssa.py:157 - defs defaultdict(<class 'list'>,
            {'$16call.3': [(<numba.core.ir.Assign object at 0x000001253DFA0BF0>,
                            0)],
             '$26return_const.5': [(<numba.core.ir.Assign object at 0x000001253DFA0E00>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001253DFA0950>,
                                  0)],
             '$const26.4': [(<numba.core.ir.Assign object at 0x000001253DFA0CE0>,
                             0)],
             'self': [(<numba.core.ir.Assign object at 0x000001253DFA07D0>,
                       0)]})
2025-10-06 11:53:02 [   DEBUG] ssa.py:172 - SSA violators <numba.core.utils.OrderedSet object at 0x000001253DF8BC80>
2025-10-06 11:53:04 [    INFO] loader.py:168 - Configuration loaded from sources: ENV > .env > config.yaml
2025-10-06 11:53:04 [    INFO] loader.py:168 - Configuration loaded from sources: ENV > .env > config.yaml
2025-10-06 11:53:04 [    INFO] loader.py:168 - Configuration loaded from sources: ENV > .env > config.yaml
2025-10-06 11:53:06 [    INFO] loader.py:168 - Configuration loaded from sources: ENV > .env > config.yaml
2025-10-06 11:53:06 [    INFO] loader.py:168 - Configuration loaded from sources: ENV > .env > config.yaml
