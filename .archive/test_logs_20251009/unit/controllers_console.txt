============================= test session starts =============================
platform win32 -- Python 3.12.6, pytest-8.3.5, pluggy-1.6.0 -- C:\Program Files\Python312\python.exe
cachedir: .pytest_cache
hypothesis profile 'default'
benchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: D:\Projects\main
configfile: .pytest.ini
plugins: anyio-4.10.0, hypothesis-6.139.2, benchmark-4.0.0, cov-7.0.0
collecting ... collected 495 items

tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_valid_positive_float PASSED [  0%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_valid_positive_int PASSED [  0%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_zero_not_allowed_by_default PASSED [  0%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_zero_allowed_when_specified PASSED [  0%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_small_positive_value PASSED [  1%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_negative_value_rejected PASSED [  1%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_negative_value_rejected_with_allow_zero PASSED [  1%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_none_value_rejected PASSED [  1%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_infinity_rejected PASSED [  1%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_nan_rejected PASSED [  2%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_string_rejected PASSED [  2%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_custom_parameter_name_in_error PASSED [  2%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_boundary_value_edge_case PASSED [  2%]
tests/test_controllers/base/test_control_primitives.py::TestRequirePositive::test_large_positive_value PASSED [  2%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_value_within_range PASSED [  3%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_value_at_boundaries_inclusive PASSED [  3%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_value_at_boundaries_exclusive PASSED [  3%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_value_below_minimum PASSED [  3%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_value_above_maximum PASSED [  3%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_integer_input_converted_to_float PASSED [  4%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_none_value_rejected PASSED [  4%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_infinite_values_rejected PASSED [  4%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_nan_values_rejected PASSED [  4%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_negative_range PASSED [  4%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_zero_width_range_exclusive PASSED [  5%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_zero_width_range_inclusive PASSED [  5%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_inverted_bounds_edge_case PASSED [  5%]
tests/test_controllers/base/test_control_primitives.py::TestRequireInRange::test_custom_parameter_name_in_error PASSED [  5%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_tanh_saturation_basic PASSED [  5%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_linear_saturation_basic PASSED [  6%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_linear_saturation_warning PASSED [  6%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_zero_input_tanh PASSED [  6%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_zero_input_linear PASSED [  6%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_array_input_tanh PASSED [  6%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_array_input_linear PASSED [  7%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_different_epsilon_values PASSED [  7%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_saturation_bounds_tanh PASSED [  7%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_saturation_bounds_linear PASSED [  7%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_negative_epsilon_error PASSED [  7%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_zero_epsilon_error PASSED [  8%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_invalid_method_error PASSED [  8%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_small_epsilon_behavior PASSED [  8%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_large_epsilon_behavior PASSED [  8%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_multidimensional_arrays PASSED [  8%]
tests/test_controllers/base/test_control_primitives.py::TestSaturate::test_type_preservation PASSED [  9%]
tests/test_controllers/base/test_controller_interface.py::TestControllerInterface::test_abstract_class_instantiation_fails PASSED [  9%]
tests/test_controllers/base/test_controller_interface.py::TestControllerInterface::test_abstract_methods_defined PASSED [  9%]
tests/test_controllers/base/test_controller_interface.py::TestControllerInterface::test_inheritance_structure PASSED [  9%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_initialization_default_parameters PASSED [  9%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_initialization_custom_parameters PASSED [ 10%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_compute_control_basic_functionality PASSED [ 10%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_compute_control_with_reference PASSED [ 10%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_step_basic_functionality PASSED [ 10%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_step_with_reference PASSED [ 10%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_force_saturation_positive PASSED [ 11%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_force_saturation_negative PASSED [ 11%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_force_saturation_boundary PASSED [ 11%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_reset_functionality PASSED [ 11%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_parameters_property PASSED [ 11%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_string_representation PASSED [ 12%]
tests/test_controllers/base/test_controller_interface.py::TestConcreteControllerBase::test_custom_max_force_saturation PASSED [ 12%]
tests/test_controllers/base/test_controller_interface.py::TestControllerInterfaceEdgeCases::test_invalid_state_dimensions PASSED [ 12%]
tests/test_controllers/base/test_controller_interface.py::TestControllerInterfaceEdgeCases::test_nan_state_handling PASSED [ 12%]
tests/test_controllers/base/test_controller_interface.py::TestControllerInterfaceEdgeCases::test_infinite_state_handling PASSED [ 12%]
tests/test_controllers/base/test_controller_interface.py::TestControllerInterfaceEdgeCases::test_zero_max_force_edge_case PASSED [ 13%]
tests/test_controllers/base/test_controller_interface.py::TestControllerInterfaceEdgeCases::test_negative_max_force_behavior PASSED [ 13%]
tests/test_controllers/base/test_controller_interface.py::TestControllerInterfaceDocumentation::test_class_docstring_exists PASSED [ 13%]
tests/test_controllers/base/test_controller_interface.py::TestControllerInterfaceDocumentation::test_abstract_methods_documented PASSED [ 13%]
tests/test_controllers/base/test_controller_interface.py::TestControllerInterfaceDocumentation::test_concrete_methods_documented PASSED [ 13%]
tests/test_controllers/factory/core/test_validation.py::TestValidationResult::test_initial_state PASSED [ 14%]
tests/test_controllers/factory/core/test_validation.py::TestValidationResult::test_add_error PASSED [ 14%]
tests/test_controllers/factory/core/test_validation.py::TestValidationResult::test_add_warning PASSED [ 14%]
tests/test_controllers/factory/core/test_validation.py::TestValidationResult::test_has_issues PASSED [ 14%]
tests/test_controllers/factory/core/test_validation.py::TestValidationResult::test_get_summary PASSED [ 14%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_valid_classical_smc_gains PASSED [ 15%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_invalid_gain_count PASSED [ 15%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_non_finite_gains PASSED [ 15%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_negative_gains PASSED [ 15%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_zero_gains PASSED [ 15%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_numpy_array_gains PASSED [ 16%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_bounds_checking PASSED [ 16%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_classical_smc_specific_validation PASSED [ 16%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_adaptive_smc_validation PASSED [ 16%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_sta_smc_validation PASSED [ 16%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_hybrid_smc_validation PASSED [ 17%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_invalid_controller_type PASSED [ 17%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControllerGains::test_stability_checking_disabled PASSED [ 17%]
tests/test_controllers/factory/core/test_validation.py::TestValidateConfiguration::test_none_configuration PASSED [ 17%]
tests/test_controllers/factory/core/test_validation.py::TestValidateConfiguration::test_valid_configuration PASSED [ 17%]
tests/test_controllers/factory/core/test_validation.py::TestValidateConfiguration::test_missing_required_parameters PASSED [ 18%]
tests/test_controllers/factory/core/test_validation.py::TestValidateConfiguration::test_invalid_max_force PASSED [ 18%]
tests/test_controllers/factory/core/test_validation.py::TestValidateConfiguration::test_invalid_dt PASSED [ 18%]
tests/test_controllers/factory/core/test_validation.py::TestValidateConfiguration::test_classical_smc_boundary_layer PASSED [ 18%]
tests/test_controllers/factory/core/test_validation.py::TestValidateStateVector::test_valid_state_vector PASSED [ 18%]
tests/test_controllers/factory/core/test_validation.py::TestValidateStateVector::test_invalid_state_type PASSED [ 19%]
tests/test_controllers/factory/core/test_validation.py::TestValidateStateVector::test_invalid_state_shape PASSED [ 19%]
tests/test_controllers/factory/core/test_validation.py::TestValidateStateVector::test_non_finite_state PASSED [ 19%]
tests/test_controllers/factory/core/test_validation.py::TestValidateStateVector::test_large_values_warning PASSED [ 19%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControlOutput::test_valid_scalar_output PASSED [ 20%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControlOutput::test_valid_array_output PASSED [ 20%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControlOutput::test_scalar_array_output PASSED [ 20%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControlOutput::test_invalid_array_shape PASSED [ 20%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControlOutput::test_non_finite_output PASSED [ 20%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControlOutput::test_saturation_warning PASSED [ 21%]
tests/test_controllers/factory/core/test_validation.py::TestValidateControlOutput::test_severe_violation_error PASSED [ 21%]
tests/test_controllers/factory/core/test_validation.py::test_all_controller_types_validation[classical_smc-gains0] PASSED [ 21%]
tests/test_controllers/factory/core/test_validation.py::test_all_controller_types_validation[adaptive_smc-gains1] PASSED [ 21%]
tests/test_controllers/factory/core/test_validation.py::test_all_controller_types_validation[sta_smc-gains2] PASSED [ 21%]
tests/test_controllers/factory/core/test_validation.py::test_all_controller_types_validation[hybrid_adaptive_sta_smc-gains3] PASSED [ 22%]
tests/test_controllers/factory/test_controller_factory.py::TestSMCFactory::test_factory_creation PASSED [ 22%]
tests/test_controllers/factory/test_controller_factory.py::TestSMCFactory::test_smc_types_available PASSED [ 22%]
tests/test_controllers/factory/test_controller_factory.py::TestSMCFactory::test_gain_specifications PASSED [ 22%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerCreation::test_create_classical_smc PASSED [ 22%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerCreation::test_create_adaptive_smc PASSED [ 23%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerCreation::test_invalid_smc_type_raises_error PASSED [ 23%]
tests/test_controllers/factory/test_controller_factory.py::TestPSOIntegration::test_create_smc_for_pso PASSED [ 23%]
tests/test_controllers/factory/test_controller_factory.py::TestPSOIntegration::test_get_gain_bounds_for_pso PASSED [ 23%]
tests/test_controllers/factory/test_controller_factory.py::TestPSOIntegration::test_validate_smc_gains PASSED [ 23%]
tests/test_controllers/factory/test_controller_factory.py::TestFactoryRobustness::test_factory_handles_extreme_gains PASSED [ 24%]
tests/test_controllers/factory/test_controller_factory.py::TestFactoryRobustness::test_factory_thread_safety PASSED [ 24%]
tests/test_controllers/factory/test_controller_factory.py::TestFactoryRobustness::test_memory_efficiency PASSED [ 24%]
tests/test_controllers/factory/test_controller_factory.py::TestFactoryIntegration::test_controller_plant_integration PASSED [ 24%]
tests/test_controllers/factory/test_controller_factory.py::TestFactoryIntegration::test_multiple_controller_types PASSED [ 24%]
tests/test_controllers/factory/test_controller_factory.py::TestAdvancedFactoryIntegration::test_closed_loop_stability_analysis PASSED [ 25%]
tests/test_controllers/factory/test_controller_factory.py::TestAdvancedFactoryIntegration::test_controller_performance_comparison PASSED [ 25%]
tests/test_controllers/factory/test_controller_factory.py::TestAdvancedFactoryIntegration::test_gain_sensitivity_analysis PASSED [ 25%]
tests/test_controllers/factory/test_controller_factory.py::TestAdvancedFactoryIntegration::test_real_time_performance_requirements PASSED [ 25%]
tests/test_controllers/factory/test_controller_factory.py::TestAdvancedFactoryIntegration::test_robustness_to_plant_uncertainties PASSED [ 25%]
tests/test_controllers/factory/test_controller_factory.py::TestAdvancedFactoryIntegration::test_saturation_and_constraint_handling PASSED [ 26%]
tests/test_controllers/factory/test_controller_factory.py::TestAdvancedFactoryIntegration::test_multi_step_control_consistency PASSED [ 26%]
tests/test_controllers/factory/test_controller_factory.py::TestAdvancedFactoryIntegration::test_factory_error_handling_and_recovery PASSED [ 26%]
tests/test_controllers/factory/test_controller_factory.py::TestAdvancedFactoryIntegration::test_memory_and_resource_management PASSED [ 26%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryDeprecation::test_deprecated_config_handling PASSED [ 26%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryDeprecation::test_mixed_old_new_config PASSED [ 27%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryDeprecation::test_deprecation_warning_emission PASSED [ 27%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryDeprecation::test_graceful_fallback PASSED [ 27%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryEdgeCases::test_deprecation_handling PASSED [ 27%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryEdgeCases::test_invalid_gain_count_error_handling PASSED [ 27%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryEdgeCases::test_parameter_validation_edge_cases PASSED [ 28%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryEdgeCases::test_configuration_migration_helpers PASSED [ 28%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryEdgeCases::test_thread_safety_basic PASSED [ 28%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryEdgeCases::test_memory_cleanup PASSED [ 28%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryEdgeCases::test_plant_integration PASSED [ 28%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryEdgeCases::test_invalid_config_handling PASSED [ 29%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryEdgeCases::test_fallback_mechanisms PASSED [ 29%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryEdgeCases::test_factory_resilience PASSED [ 29%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryFallbacks::test_fallback_config_loading PASSED [ 29%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryFallbacks::test_validate_and_merge_configs PASSED [ 29%]
tests/test_controllers/factory/test_controller_factory.py::TestControllerFactoryFallbacks::test_fallback_mechanism_integration PASSED [ 30%]
tests/test_controllers/factory/test_factory_deprecations.py::test_deprecated_param_is_mapped_with_warning PASSED [ 30%]
tests/test_controllers/factory/test_factory_deprecations.py::test_unknown_keys_strict_vs_permissive PASSED [ 30%]
tests/test_controllers/factory/test_factory_dynamics_consolidated.py::test_factory_and_dynamics_core PASSED [ 30%]
tests/test_controllers/factory/test_factory_shared_params.py::test_dt_inherits_from_simulation_with_warning PASSED [ 30%]
tests/test_controllers/factory/test_factory_shared_params.py::test_max_force_defaults_with_warning PASSED [ 31%]
tests/test_controllers/factory/test_factory_shared_params.py::test_invalid_dt_raises[0.0] PASSED [ 31%]
tests/test_controllers/factory/test_factory_shared_params.py::test_invalid_dt_raises[-0.001] PASSED [ 31%]
tests/test_controllers/factory/test_factory_shared_params.py::test_invalid_max_force_raises[0.0] PASSED [ 31%]
tests/test_controllers/factory/test_factory_shared_params.py::test_invalid_max_force_raises[-5.0] PASSED [ 31%]
tests/test_controllers/factory/test_interface_compatibility.py::TestControllerFactoryInterfaceCompatibility::test_controller_factory_interfaces PASSED [ 32%]
tests/test_controllers/factory/test_interface_compatibility.py::TestControllerFactoryInterfaceCompatibility::test_factory_parameter_validation PASSED [ 32%]
tests/test_controllers/factory/test_interface_compatibility.py::TestControllerFactoryInterfaceCompatibility::test_controller_instantiation_robustness PASSED [ 32%]
tests/test_controllers/factory/test_interface_compatibility.py::TestControllerFactoryInterfaceCompatibility::test_factory_registry_consistency PASSED [ 32%]
tests/test_controllers/factory/test_interface_compatibility.py::TestControllerFactoryInterfaceCompatibility::test_controller_interface_consistency PASSED [ 32%]
tests/test_controllers/factory/test_interface_compatibility.py::TestControllerFactoryInterfaceCompatibility::test_configuration_object_attribute_access PASSED [ 33%]
tests/test_controllers/factory/test_interface_compatibility.py::TestControllerFactoryInterfaceCompatibility::test_gains_type_conversion_compatibility PASSED [ 33%]
tests/test_controllers/factory/test_interface_compatibility.py::TestControllerFactoryErrorRecovery::test_missing_import_recovery PASSED [ 33%]
tests/test_controllers/factory/test_interface_compatibility.py::TestControllerFactoryErrorRecovery::test_configuration_validation_recovery PASSED [ 33%]
tests/test_controllers/factory/test_interface_compatibility.py::test_individual_controller_factory_robustness[classical_smc] PASSED [ 33%]
tests/test_controllers/factory/test_interface_compatibility.py::test_individual_controller_factory_robustness[sta_smc] PASSED [ 34%]
tests/test_controllers/factory/test_interface_compatibility.py::test_individual_controller_factory_robustness[adaptive_smc] PASSED [ 34%]
tests/test_controllers/factory/test_interface_compatibility.py::test_individual_controller_factory_robustness[hybrid_adaptive_sta_smc] PASSED [ 34%]
tests/test_controllers/mpc/test_mpc_consolidated.py::test_mpc_optional_dep_and_param_validation FAILED [ 34%]
tests/test_controllers/mpc/test_mpc_controller.py::test_mpc_controller_instantiation_and_control FAILED [ 34%]
tests/test_controllers/mpc/test_mpc_controller.py::test_simulation_helper_shapes PASSED [ 35%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestModularAdaptiveSMC::test_controller_initialization PASSED [ 35%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestModularAdaptiveSMC::test_adaptation_law_initialization PASSED [ 35%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestModularAdaptiveSMC::test_uncertainty_estimator PASSED [ 35%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestModularAdaptiveSMC::test_adaptive_control_computation PASSED [ 35%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestModularAdaptiveSMC::test_parameter_adaptation PASSED [ 36%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestModularAdaptiveSMC::test_adaptation_stability PASSED [ 36%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestModularAdaptiveSMC::test_convergence_properties PASSED [ 36%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestAdaptationComponents::test_modified_adaptation_law PASSED [ 36%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestAdaptationComponents::test_parameter_identifier PASSED [ 36%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestAdaptationComponents::test_combined_estimator PASSED [ 37%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestAdaptationScenarios::test_constant_disturbance_adaptation PASSED [ 37%]
tests/test_controllers/smc/algorithms/adaptive/test_modular_adaptive_smc.py::TestAdaptationScenarios::test_time_varying_disturbance_adaptation PASSED [ 37%]
tests/test_controllers/smc/algorithms/classical/test_boundary_layer.py::TestBoundaryLayerBehavior::test_smooth_control_inside_boundary_layer PASSED [ 37%]
tests/test_controllers/smc/algorithms/classical/test_boundary_layer.py::TestBoundaryLayerBehavior::test_boundary_layer_thickness_effect PASSED [ 37%]
tests/test_controllers/smc/algorithms/classical/test_boundary_layer.py::TestBoundaryLayerBehavior::test_control_continuity_across_boundary PASSED [ 38%]
tests/test_controllers/smc/algorithms/classical/test_boundary_layer.py::TestBoundaryLayerBehavior::test_chattering_reduction_with_noise PASSED [ 38%]
tests/test_controllers/smc/algorithms/classical/test_boundary_layer.py::TestBoundaryLayerBehavior::test_boundary_layer_parameter_validation PASSED [ 38%]
tests/test_controllers/smc/algorithms/classical/test_boundary_layer.py::TestBoundaryLayerBehavior::test_boundary_layer_scaling_with_gains PASSED [ 38%]
tests/test_controllers/smc/algorithms/classical/test_boundary_layer.py::TestBoundaryLayerBehavior::test_boundary_layer_vs_switching_control PASSED [ 38%]
tests/test_controllers/smc/algorithms/classical/test_boundary_layer.py::TestBoundaryLayerBehavior::test_boundary_layer_energy_considerations PASSED [ 39%]
tests/test_controllers/smc/algorithms/classical/test_config_validation.py::TestClassicalSMCConfigValidation::test_valid_config_acceptance PASSED [ 39%]
tests/test_controllers/smc/algorithms/classical/test_config_validation.py::TestClassicalSMCConfigValidation::test_invalid_gains_length_rejection PASSED [ 39%]
tests/test_controllers/smc/algorithms/classical/test_config_validation.py::TestClassicalSMCConfigValidation::test_negative_max_force_rejection PASSED [ 39%]
tests/test_controllers/smc/algorithms/classical/test_config_validation.py::TestClassicalSMCConfigValidation::test_zero_boundary_layer_rejection PASSED [ 40%]
tests/test_controllers/smc/algorithms/classical/test_config_validation.py::TestClassicalSMCConfigValidation::test_negative_boundary_layer_rejection PASSED [ 40%]
tests/test_controllers/smc/algorithms/classical/test_config_validation.py::TestClassicalSMCConfigValidation::test_nan_gains_rejection PASSED [ 40%]
tests/test_controllers/smc/algorithms/classical/test_config_validation.py::TestClassicalSMCConfigValidation::test_infinite_gains_rejection PASSED [ 40%]
tests/test_controllers/smc/algorithms/classical/test_config_validation.py::TestClassicalSMCConfigValidation::test_gain_bounds_validation PASSED [ 40%]
tests/test_controllers/smc/algorithms/classical/test_config_validation.py::TestClassicalSMCConfigValidation::test_gain_signs_validation PASSED [ 41%]
tests/test_controllers/smc/algorithms/classical/test_control_computation.py::TestControlComputation::test_control_computation_returns_valid_format PASSED [ 41%]
tests/test_controllers/smc/algorithms/classical/test_control_computation.py::TestControlComputation::test_control_values_are_finite PASSED [ 41%]
tests/test_controllers/smc/algorithms/classical/test_control_computation.py::TestControlComputation::test_control_bounds_enforcement PASSED [ 41%]
tests/test_controllers/smc/algorithms/classical/test_control_computation.py::TestControlComputation::test_control_responds_to_large_errors PASSED [ 41%]
tests/test_controllers/smc/algorithms/classical/test_control_computation.py::TestControlComputation::test_control_zero_at_equilibrium PASSED [ 42%]
tests/test_controllers/smc/algorithms/classical/test_control_computation.py::TestControlComputation::test_control_consistency_same_input PASSED [ 42%]
tests/test_controllers/smc/algorithms/classical/test_control_computation.py::TestControlComputation::test_control_opposes_velocity PASSED [ 42%]
tests/test_controllers/smc/algorithms/classical/test_control_computation.py::TestControlComputation::test_control_saturation_behavior PASSED [ 42%]
tests/test_controllers/smc/algorithms/classical/test_control_computation.py::TestControlComputation::test_control_output_shape_consistency PASSED [ 42%]
tests/test_controllers/smc/algorithms/classical/test_modular_controller.py::TestModularClassicalSMC::test_initialization PASSED [ 43%]
tests/test_controllers/smc/algorithms/classical/test_modular_controller.py::TestModularClassicalSMC::test_compute_control_basic PASSED [ 43%]
tests/test_controllers/smc/algorithms/classical/test_modular_controller.py::TestModularClassicalSMC::test_compute_control_with_saturation PASSED [ 43%]
tests/test_controllers/smc/algorithms/classical/test_modular_controller.py::TestModularClassicalSMC::test_gains_property PASSED [ 43%]
tests/test_controllers/smc/algorithms/classical/test_modular_controller.py::TestModularClassicalSMC::test_get_parameters PASSED [ 43%]
tests/test_controllers/smc/algorithms/classical/test_modular_controller.py::TestModularClassicalSMC::test_error_handling PASSED [ 44%]
tests/test_controllers/smc/algorithms/classical/test_modular_controller.py::TestClassicalSMCBackwardCompatibility::test_initialization_legacy_interface PASSED [ 44%]
tests/test_controllers/smc/algorithms/classical/test_modular_controller.py::TestClassicalSMCBackwardCompatibility::test_gains_property_delegation PASSED [ 44%]
tests/test_controllers/smc/algorithms/classical/test_modular_controller.py::TestClassicalSMCBackwardCompatibility::test_compute_control_delegation PASSED [ 44%]
tests/test_controllers/smc/algorithms/classical/test_modular_controller.py::TestModularClassicalSMCFallback::test_imports_not_available SKIPPED [ 44%]
tests/test_controllers/smc/algorithms/classical/test_sliding_surface.py::TestSlidingSurfaceComputation::test_surface_computation_returns_finite_values PASSED [ 45%]
tests/test_controllers/smc/algorithms/classical/test_sliding_surface.py::TestSlidingSurfaceComputation::test_surface_linearity_property PASSED [ 45%]
tests/test_controllers/smc/algorithms/classical/test_sliding_surface.py::TestSlidingSurfaceComputation::test_surface_zero_at_equilibrium PASSED [ 45%]
tests/test_controllers/smc/algorithms/classical/test_sliding_surface.py::TestSlidingSurfaceComputation::test_surface_depends_on_position_error PASSED [ 45%]
tests/test_controllers/smc/algorithms/classical/test_sliding_surface.py::TestSlidingSurfaceComputation::test_surface_depends_on_velocity PASSED [ 45%]
tests/test_controllers/smc/algorithms/classical/test_sliding_surface.py::TestSlidingSurfaceComputation::test_surface_continuity PASSED [ 46%]
tests/test_controllers/smc/algorithms/classical/test_sliding_surface.py::TestSlidingSurfaceComputation::test_surface_sign_consistency PASSED [ 46%]
tests/test_controllers/smc/algorithms/classical/test_sliding_surface.py::TestSlidingSurfaceComputation::test_surface_gain_sensitivity PASSED [ 46%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCImplementation::test_initialization_basic SKIPPED [ 46%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCImplementation::test_initialization_custom_parameters SKIPPED [ 46%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCInterface::test_initialization_creates_required_attributes PASSED [ 47%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCInterface::test_control_history_initialized PASSED [ 47%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCInterface::test_component_interface_requirements PASSED [ 47%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCInterface::test_parameters_property_structure PASSED [ 47%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCControlComputation::test_compute_control_basic PASSED [ 47%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCControlComputation::test_sliding_surface_computation PASSED [ 48%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCControlComputation::test_control_with_reference PASSED [ 48%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCControlComputation::test_multiple_control_calls PASSED [ 48%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCControlComputation::test_zero_state_control PASSED [ 48%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCSlidingBehavior::test_sliding_variable_computation PASSED [ 48%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCSlidingBehavior::test_control_sign_consistency PASSED [ 49%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCSlidingBehavior::test_smooth_vs_discontinuous_switching PASSED [ 49%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCSlidingBehavior::test_boundary_layer_effect PASSED [ 49%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCReset::test_reset_clears_history PASSED [ 49%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCReset::test_reset_preserves_configuration PASSED [ 49%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCReset::test_control_after_reset PASSED [ 50%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCErrorHandling::test_invalid_state_dimensions PASSED [ 50%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCErrorHandling::test_nan_state_handling PASSED [ 50%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCErrorHandling::test_infinite_state_handling PASSED [ 50%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCErrorHandling::test_zero_boundary_layer_edge_case PASSED [ 50%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCErrorHandling::test_very_small_boundary_layer PASSED [ 51%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCIntegration::test_realistic_control_sequence PASSED [ 51%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCIntegration::test_reference_tracking_behavior PASSED [ 51%]
tests/test_controllers/smc/classical/test_classical_smc.py::TestClassicalSMCIntegration::test_control_continuity PASSED [ 51%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlInitialization::test_initialization_default_parameters FAILED [ 51%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlInitialization::test_initialization_custom_parameters FAILED [ 52%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlInitialization::test_logger_initialization PASSED [ 52%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlComputation::test_compute_no_dynamics_model PASSED [ 52%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlComputation::test_compute_valid_dynamics PASSED [ 52%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlComputation::test_compute_singular_matrix_returns_zero PASSED [ 52%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlComputation::test_compute_dynamics_extraction_failure PASSED [ 53%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlComputation::test_compute_poor_controllability PASSED [ 53%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlComputation::test_compute_non_finite_result PASSED [ 53%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlMatrixExtraction::test_extract_dynamics_get_dynamics_interface PASSED [ 53%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlMatrixExtraction::test_extract_dynamics_direct_attributes PASSED [ 53%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlMatrixExtraction::test_extract_dynamics_no_interface_returns_none PASSED [ 54%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlControllabilityAnalysis::test_check_controllability_no_model PASSED [ 54%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlControllabilityAnalysis::test_set_controllability_threshold_valid PASSED [ 54%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlControllabilityAnalysis::test_set_controllability_threshold_invalid PASSED [ 54%]
tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlControllabilityAnalysis::test_get_dynamics_info_no_model PASSED [ 54%]
tests/test_controllers/smc/core/test_gain_validation.py::TestGainBounds::test_gain_bounds_creation PASSED [ 55%]
tests/test_controllers/smc/core/test_gain_validation.py::TestGainBounds::test_gain_bounds_validate_within_range PASSED [ 55%]
tests/test_controllers/smc/core/test_gain_validation.py::TestGainBounds::test_gain_bounds_validate_outside_range PASSED [ 55%]
tests/test_controllers/smc/core/test_gain_validation.py::TestGainBounds::test_gain_bounds_edge_cases PASSED [ 55%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCControllerType::test_controller_type_values PASSED [ 55%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCControllerType::test_controller_type_from_string PASSED [ 56%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCControllerType::test_invalid_controller_type PASSED [ 56%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validator_initialization PASSED [ 56%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_initialize_standard_bounds PASSED [ 56%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_classical_smc_bounds PASSED [ 56%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_adaptive_smc_bounds PASSED [ 57%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_super_twisting_bounds PASSED [ 57%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_hybrid_smc_bounds PASSED [ 57%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validate_gains_classical_valid FAILED [ 57%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validate_gains_classical_invalid FAILED [ 57%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validate_gains_string_controller_type FAILED [ 58%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validate_gains_wrong_length FAILED [ 58%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validate_gains_numpy_array PASSED [ 58%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validate_stability_conditions_classical PASSED [ 58%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validate_stability_conditions_zero_gains PASSED [ 58%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_get_recommended_ranges PASSED [ 59%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_get_recommended_ranges_string_type PASSED [ 59%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_get_recommended_ranges_invalid_type FAILED [ 59%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_update_bounds_valid PASSED [ 59%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_update_bounds_string_type PASSED [ 60%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_update_bounds_invalid_controller FAILED [ 60%]
tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_update_bounds_invalid_gain PASSED [ 60%]
tests/test_controllers/smc/core/test_gain_validation.py::TestConvenienceFunctions::test_validate_smc_gains_valid PASSED [ 60%]
tests/test_controllers/smc/core/test_gain_validation.py::TestConvenienceFunctions::test_validate_smc_gains_invalid PASSED [ 60%]
tests/test_controllers/smc/core/test_gain_validation.py::TestConvenienceFunctions::test_validate_smc_gains_default_type PASSED [ 61%]
tests/test_controllers/smc/core/test_gain_validation.py::TestConvenienceFunctions::test_check_stability_conditions_stable PASSED [ 61%]
tests/test_controllers/smc/core/test_gain_validation.py::TestConvenienceFunctions::test_check_stability_conditions_default_type PASSED [ 61%]
tests/test_controllers/smc/core/test_gain_validation.py::TestConvenienceFunctions::test_get_gain_bounds_for_controller PASSED [ 61%]
tests/test_controllers/smc/core/test_gain_validation.py::TestMathematicalProperties::test_positive_definite_requirements PASSED [ 61%]
tests/test_controllers/smc/core/test_gain_validation.py::TestMathematicalProperties::test_boundary_layer_requirements PASSED [ 62%]
tests/test_controllers/smc/core/test_gain_validation.py::TestMathematicalProperties::test_adaptation_gain_bounds PASSED [ 62%]
tests/test_controllers/smc/core/test_gain_validation.py::TestMathematicalProperties::test_super_twisting_gain_conditions PASSED [ 62%]
tests/test_controllers/smc/core/test_gain_validation.py::TestMathematicalProperties::test_gain_scaling_properties PASSED [ 62%]
tests/test_controllers/smc/core/test_gain_validation.py::TestErrorHandling::test_empty_gains_list FAILED [ 62%]
tests/test_controllers/smc/core/test_gain_validation.py::TestErrorHandling::test_none_gains PASSED [ 63%]
tests/test_controllers/smc/core/test_gain_validation.py::TestErrorHandling::test_non_numeric_gains PASSED [ 63%]
tests/test_controllers/smc/core/test_gain_validation.py::TestErrorHandling::test_infinite_gains PASSED [ 63%]
tests/test_controllers/smc/core/test_gain_validation.py::TestErrorHandling::test_nan_gains PASSED [ 63%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestSlidingSurfaceAbstractBase::test_abstract_class_cannot_be_instantiated PASSED [ 63%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestSlidingSurfaceAbstractBase::test_abstract_methods_defined PASSED [ 64%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_initialization_valid_gains PASSED [ 64%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_initialization_array_gains PASSED [ 64%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_initialization_insufficient_gains PASSED [ 64%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_initialization_zero_gains_rejected PASSED [ 64%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_initialization_negative_gains_rejected PASSED [ 65%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_compute_basic_functionality PASSED [ 65%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_compute_zero_state PASSED [ 65%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_compute_insufficient_state_dimensions PASSED [ 65%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_compute_positive_angles PASSED [ 65%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_compute_negative_angles PASSED [ 66%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_compute_derivative_basic PASSED [ 66%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_compute_derivative_zero_state_dot PASSED [ 66%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_compute_derivative_insufficient_dimensions PASSED [ 66%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_get_coefficients PASSED [ 66%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_linearity_property PASSED [ 67%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_scaling_property PASSED [ 67%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestLinearSlidingSurface::test_extra_gains_ignored PASSED [ 67%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestHigherOrderSlidingSurface::test_initialization_order_2 PASSED [ 67%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestHigherOrderSlidingSurface::test_initialization_invalid_order PASSED [ 67%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestHigherOrderSlidingSurface::test_initialization_insufficient_gains_for_order PASSED [ 68%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestHigherOrderSlidingSurface::test_initialization_negative_gains_rejected PASSED [ 68%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestHigherOrderSlidingSurface::test_compute_falls_back_to_linear PASSED [ 68%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestHigherOrderSlidingSurface::test_compute_derivative_falls_back_to_linear PASSED [ 68%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestHigherOrderSlidingSurface::test_insufficient_gains_returns_zero PASSED [ 68%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestCreateSlidingSurfaceFactory::test_create_linear_surface PASSED [ 69%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestCreateSlidingSurfaceFactory::test_create_higher_order_surface PASSED [ 69%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestCreateSlidingSurfaceFactory::test_create_higher_order_surface_alternative_name PASSED [ 69%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestCreateSlidingSurfaceFactory::test_case_insensitive_surface_type PASSED [ 69%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestCreateSlidingSurfaceFactory::test_unknown_surface_type_error PASSED [ 69%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestSlidingSurfaceMathematicalProperties::test_surface_zero_at_equilibrium PASSED [ 70%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestSlidingSurfaceMathematicalProperties::test_surface_symmetry PASSED [ 70%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestSlidingSurfaceMathematicalProperties::test_surface_continuity PASSED [ 70%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestSlidingSurfaceMathematicalProperties::test_derivative_consistency PASSED [ 70%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestSlidingSurfaceMathematicalProperties::test_large_state_values PASSED [ 70%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestSlidingSurfaceMathematicalProperties::test_very_small_state_values PASSED [ 71%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestSlidingSurfaceMathematicalProperties::test_nan_state_handling PASSED [ 71%]
tests/test_controllers/smc/core/test_sliding_surface.py::TestSlidingSurfaceMathematicalProperties::test_infinite_state_handling PASSED [ 71%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingMethod::test_enum_values PASSED [ 71%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingMethod::test_enum_completeness PASSED [ 71%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_initialization_with_string PASSED [ 72%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_initialization_with_enum PASSED [ 72%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_initialization_case_insensitive PASSED [ 72%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_initialization_default_method PASSED [ 72%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_initialization_invalid_method PASSED [ 72%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_tanh_switching_basic FAILED [ 73%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_tanh_switching_zero_surface PASSED [ 73%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_tanh_switching_zero_epsilon PASSED [ 73%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_tanh_switching_large_surface PASSED [ 73%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_linear_switching_basic PASSED [ 73%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_linear_switching_saturation PASSED [ 74%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_linear_switching_zero_epsilon PASSED [ 74%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_sign_switching_basic PASSED [ 74%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_sign_switching_ignores_epsilon PASSED [ 74%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_sigmoid_switching_basic PASSED [ 74%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_sigmoid_switching_bounds PASSED [ 75%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_sigmoid_switching_zero_epsilon PASSED [ 75%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionDerivatives::test_tanh_derivative_basic PASSED [ 75%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionDerivatives::test_tanh_derivative_zero_surface PASSED [ 75%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionDerivatives::test_tanh_derivative_zero_epsilon PASSED [ 75%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionDerivatives::test_linear_derivative_inside_boundary PASSED [ 76%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionDerivatives::test_linear_derivative_outside_boundary PASSED [ 76%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionDerivatives::test_linear_derivative_at_boundary PASSED [ 76%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionDerivatives::test_sigmoid_derivative_basic PASSED [ 76%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionDerivatives::test_sigmoid_derivative_zero_surface PASSED [ 76%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionDerivatives::test_sign_derivative PASSED [ 77%]
tests/test_controllers/smc/core/test_switching_functions.py::TestConvenienceFunctions::test_tanh_switching_function FAILED [ 77%]
tests/test_controllers/smc/core/test_switching_functions.py::TestConvenienceFunctions::test_tanh_switching_zero_epsilon PASSED [ 77%]
tests/test_controllers/smc/core/test_switching_functions.py::TestConvenienceFunctions::test_linear_switching_function PASSED [ 77%]
tests/test_controllers/smc/core/test_switching_functions.py::TestConvenienceFunctions::test_linear_switching_zero_epsilon PASSED [ 77%]
tests/test_controllers/smc/core/test_switching_functions.py::TestConvenienceFunctions::test_sign_switching_function FAILED [ 78%]
tests/test_controllers/smc/core/test_switching_functions.py::TestConvenienceFunctions::test_sign_switching_ignores_epsilon FAILED [ 78%]
tests/test_controllers/smc/core/test_switching_functions.py::TestAdaptiveBoundaryLayer::test_adaptive_boundary_basic PASSED [ 78%]
tests/test_controllers/smc/core/test_switching_functions.py::TestAdaptiveBoundaryLayer::test_adaptive_boundary_zero_derivative PASSED [ 78%]
tests/test_controllers/smc/core/test_switching_functions.py::TestAdaptiveBoundaryLayer::test_adaptive_boundary_negative_derivative PASSED [ 78%]
tests/test_controllers/smc/core/test_switching_functions.py::TestAdaptiveBoundaryLayer::test_adaptive_boundary_large_derivative PASSED [ 79%]
tests/test_controllers/smc/core/test_switching_functions.py::TestPowerRateReachingLaw::test_power_rate_basic PASSED [ 79%]
tests/test_controllers/smc/core/test_switching_functions.py::TestPowerRateReachingLaw::test_power_rate_zero_surface PASSED [ 79%]
tests/test_controllers/smc/core/test_switching_functions.py::TestPowerRateReachingLaw::test_power_rate_negative_surface PASSED [ 79%]
tests/test_controllers/smc/core/test_switching_functions.py::TestPowerRateReachingLaw::test_power_rate_alpha_one PASSED [ 80%]
tests/test_controllers/smc/core/test_switching_functions.py::TestPowerRateReachingLaw::test_power_rate_small_alpha PASSED [ 80%]
tests/test_controllers/smc/core/test_switching_functions.py::TestPowerRateReachingLaw::test_power_rate_invalid_K PASSED [ 80%]
tests/test_controllers/smc/core/test_switching_functions.py::TestPowerRateReachingLaw::test_power_rate_invalid_alpha PASSED [ 80%]
tests/test_controllers/smc/core/test_switching_functions.py::TestPowerRateReachingLaw::test_power_rate_boundary_alpha PASSED [ 80%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionNumericalProperties::test_switching_function_bounds PASSED [ 81%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionNumericalProperties::test_switching_function_continuity PASSED [ 81%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionNumericalProperties::test_switching_function_monotonicity PASSED [ 81%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionNumericalProperties::test_switching_function_antisymmetry PASSED [ 81%]
tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionNumericalProperties::test_epsilon_scaling_effects PASSED [ 81%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestSatTanhFunction::test_sat_tanh_positive PASSED [ 82%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestSatTanhFunction::test_sat_tanh_negative PASSED [ 82%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestSatTanhFunction::test_sat_tanh_zero PASSED [ 82%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestSatTanhFunction::test_sat_tanh_width_effect PASSED [ 82%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestSatTanhFunction::test_sat_tanh_width_protection PASSED [ 82%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestSatTanhFunction::test_sat_tanh_symmetry PASSED [ 83%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_basic_initialization FAILED [ 83%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_initialization_with_surface_gains FAILED [ 83%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_initialization_with_cart_gains FAILED [ 83%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_initialization_with_adaptation_params FAILED [ 83%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_initialization_with_boundary_params FAILED [ 84%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_initialization_with_surface_type FAILED [ 84%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_invalid_surface_gains FAILED [ 84%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_invalid_adaptation_gains FAILED [ 84%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_boundary_layer_validation FAILED [ 84%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_compute_control_equilibrium ERROR [ 85%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_compute_control_perturbed ERROR [ 85%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_compute_control_large_error ERROR [ 85%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_compute_control_history_tracking ERROR [ 85%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_control_continuity ERROR [ 85%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_adaptation_mechanism ERROR [ 86%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_equivalent_control_toggle FAILED [ 86%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_cart_control_toggle FAILED [ 86%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_relative_vs_absolute_surface FAILED [ 86%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCMathematicalProperties::test_sliding_surface_linearity ERROR [ 86%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCMathematicalProperties::test_lyapunov_stability_requirements ERROR [ 87%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCMathematicalProperties::test_finite_time_convergence_property ERROR [ 87%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCMathematicalProperties::test_chattering_reduction ERROR [ 87%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_zero_state FAILED [ 87%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_large_state FAILED [ 87%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_invalid_state_dimension FAILED [ 88%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_nan_state FAILED [ 88%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_inf_state FAILED [ 88%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_extreme_adaptation_rates FAILED [ 88%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_boundary_layer_edge_cases FAILED [ 88%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCOutput::test_output_structure ERROR [ 89%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCOutput::test_output_additional_info ERROR [ 89%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCOutput::test_output_consistency ERROR [ 89%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestDeprecationHandling::test_use_equivalent_deprecation PASSED [ 89%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestDeprecationHandling::test_legacy_parameter_compatibility PASSED [ 89%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCIntegration::test_controller_factory_integration PASSED [ 90%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCIntegration::test_simulation_integration PASSED [ 90%]
tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCIntegration::test_pso_optimization_integration PASSED [ 90%]
tests/test_controllers/smc/test_module_structure.py::TestSMCFixtureImportResolution::test_smc_fixture_import_resolution PASSED [ 90%]
tests/test_controllers/smc/test_module_structure.py::TestSMCFixtureImportResolution::test_smc_controller_class_availability PASSED [ 90%]
tests/test_controllers/smc/test_module_structure.py::TestSMCFixtureImportResolution::test_factory_import_compatibility PASSED [ 91%]
tests/test_controllers/smc/test_module_structure.py::TestSMCAlgorithmBaseClassConsistency::test_smc_algorithm_base_class_consistency PASSED [ 91%]
tests/test_controllers/smc/test_module_structure.py::TestSMCAlgorithmBaseClassConsistency::test_smc_algorithm_initialization_compatibility PASSED [ 91%]
tests/test_controllers/smc/test_module_structure.py::TestSMCControlComputationInterfaces::test_smc_control_computation_interfaces PASSED [ 91%]
tests/test_controllers/smc/test_module_structure.py::TestSMCControlComputationInterfaces::test_smc_control_output_consistency PASSED [ 91%]
tests/test_controllers/smc/test_module_structure.py::TestSMCAdaptiveParameterValidation::test_smc_adaptive_parameter_validation PASSED [ 92%]
tests/test_controllers/smc/test_module_structure.py::test_smc_import_performance PASSED [ 92%]
tests/test_controllers/specialized/test_swing_up_smc.py::test_initial_mode_and_control PASSED [ 92%]
tests/test_controllers/specialized/test_swing_up_smc.py::test_switch_to_stabilize PASSED [ 92%]
tests/test_controllers/specialized/test_swing_up_smc.py::test_hysteresis_transition PASSED [ 92%]
tests/test_controllers/test_controller_basics.py::test_sta_smc_state_vars_signature PASSED [ 93%]
tests/test_controllers/test_controller_basics.py::test_create_controller_types[classical_smc-ClassicalSMC-gains0] PASSED [ 93%]
tests/test_controllers/test_controller_basics.py::test_create_controller_types[sta_smc-SuperTwistingSMC-gains1] PASSED [ 93%]
tests/test_controllers/test_controller_basics.py::test_create_controller_types[adaptive_smc-AdaptiveSMC-gains2] PASSED [ 93%]
tests/test_controllers/test_controller_basics.py::test_create_controller_invalid_name PASSED [ 93%]
tests/test_controllers/test_modular_smc.py::TestModularClassicalSMC::test_controller_initialization PASSED [ 94%]
tests/test_controllers/test_modular_smc.py::TestModularClassicalSMC::test_config_validation PASSED [ 94%]
tests/test_controllers/test_modular_smc.py::TestModularClassicalSMC::test_sliding_surface_computation PASSED [ 94%]
tests/test_controllers/test_modular_smc.py::TestModularClassicalSMC::test_control_computation PASSED [ 94%]
tests/test_controllers/test_modular_smc.py::TestModularAdaptiveSMC::test_adaptation_law_initialization PASSED [ 94%]
tests/test_controllers/test_modular_smc.py::TestModularAdaptiveSMC::test_uncertainty_estimator FAILED [ 95%]
tests/test_controllers/test_modular_smc.py::TestModularAdaptiveSMC::test_adaptive_control_computation PASSED [ 95%]
tests/test_controllers/test_modular_smc.py::TestModularAdaptiveSMC::test_parameter_adaptation PASSED [ 95%]
tests/test_controllers/test_modular_smc.py::TestModularSuperTwistingSMC::test_twisting_algorithm_initialization PASSED [ 95%]
tests/test_controllers/test_modular_smc.py::TestModularSuperTwistingSMC::test_super_twisting_control_computation PASSED [ 95%]
tests/test_controllers/test_modular_smc.py::TestModularSuperTwistingSMC::test_finite_time_convergence_properties PASSED [ 96%]
tests/test_controllers/test_modular_smc.py::TestModularHybridSMC::test_switching_logic_initialization FAILED [ 96%]
tests/test_controllers/test_modular_smc.py::TestModularHybridSMC::test_controller_switching PASSED [ 96%]
tests/test_controllers/test_modular_smc.py::TestModularHybridSMC::test_hybrid_control_computation PASSED [ 96%]
tests/test_controllers/test_modular_smc.py::TestPackageImports::test_classical_smc_imports PASSED [ 96%]
tests/test_controllers/test_modular_smc.py::TestPackageImports::test_adaptive_smc_imports PASSED [ 97%]
tests/test_controllers/test_modular_smc.py::TestPackageImports::test_super_twisting_smc_imports PASSED [ 97%]
tests/test_controllers/test_modular_smc.py::TestPackageImports::test_hybrid_smc_imports PASSED [ 97%]
tests/test_controllers/test_modular_smc.py::TestPackageImports::test_main_package_imports PASSED [ 97%]
tests/test_controllers/test_modular_smc.py::TestComponentIntegration::test_sliding_surface_integration FAILED [ 97%]
tests/test_controllers/test_modular_smc.py::TestComponentIntegration::test_gain_validation_integration PASSED [ 98%]
tests/test_controllers/test_modular_smc.py::TestComponentIntegration::test_control_bounds_integration PASSED [ 98%]
tests/test_controllers/test_modular_smc.py::TestModularSMCProperties::test_controller_scalability[2] FAILED [ 98%]
tests/test_controllers/test_modular_smc.py::TestModularSMCProperties::test_time_step_robustness[0.001] PASSED [ 98%]
tests/test_controllers/test_modular_smc.py::TestModularSMCProperties::test_time_step_robustness[0.01] PASSED [ 98%]
tests/test_controllers/test_modular_smc.py::TestModularSMCProperties::test_time_step_robustness[0.1] PASSED [ 99%]
tests/test_controllers/test_modular_smc.py::TestModularSMCProperties::test_noise_robustness[0.0] PASSED [ 99%]
tests/test_controllers/test_modular_smc.py::TestModularSMCProperties::test_noise_robustness[0.01] PASSED [ 99%]
tests/test_controllers/test_modular_smc.py::TestModularSMCProperties::test_noise_robustness[0.1] PASSED [ 99%]
tests/test_controllers/test_smc_guardrails_consolidated.py::test_smc_guardrails_and_smokes FAILED [100%]

=================================== ERRORS ====================================
_ ERROR at setup of TestHybridAdaptiveSTASMCComputeControl.test_compute_control_equilibrium _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:152: in controller
    return HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCComputeControl object at 0x000001EF7C76E330>
_ ERROR at setup of TestHybridAdaptiveSTASMCComputeControl.test_compute_control_perturbed _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:152: in controller
    return HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCComputeControl object at 0x000001EF7C76DEB0>
_ ERROR at setup of TestHybridAdaptiveSTASMCComputeControl.test_compute_control_large_error _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:152: in controller
    return HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCComputeControl object at 0x000001EF7C76F230>
_ ERROR at setup of TestHybridAdaptiveSTASMCComputeControl.test_compute_control_history_tracking _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:152: in controller
    return HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCComputeControl object at 0x000001EF7C76F3E0>
_ ERROR at setup of TestHybridAdaptiveSTASMCComputeControl.test_control_continuity _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:152: in controller
    return HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCComputeControl object at 0x000001EF7C76F590>
_ ERROR at setup of TestHybridAdaptiveSTASMCComputeControl.test_adaptation_mechanism _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:152: in controller
    return HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCComputeControl object at 0x000001EF7C76F740>
_ ERROR at setup of TestHybridAdaptiveSTASMCMathematicalProperties.test_sliding_surface_linearity _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:296: in controller
    return HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCMathematicalProperties object at 0x000001EF7C76FDD0>
_ ERROR at setup of TestHybridAdaptiveSTASMCMathematicalProperties.test_lyapunov_stability_requirements _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:296: in controller
    return HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCMathematicalProperties object at 0x000001EF7C76FF50>
_ ERROR at setup of TestHybridAdaptiveSTASMCMathematicalProperties.test_finite_time_convergence_property _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:296: in controller
    return HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCMathematicalProperties object at 0x000001EF7C790110>
_ ERROR at setup of TestHybridAdaptiveSTASMCMathematicalProperties.test_chattering_reduction _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:296: in controller
    return HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCMathematicalProperties object at 0x000001EF7C790290>
___ ERROR at setup of TestHybridAdaptiveSTASMCOutput.test_output_structure ____
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:447: in controller
    return HybridAdaptiveSTASMC()
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCOutput object at 0x000001EF7C76FD40>
_ ERROR at setup of TestHybridAdaptiveSTASMCOutput.test_output_additional_info _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:447: in controller
    return HybridAdaptiveSTASMC()
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCOutput object at 0x000001EF7C76F6E0>
__ ERROR at setup of TestHybridAdaptiveSTASMCOutput.test_output_consistency ___
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:447: in controller
    return HybridAdaptiveSTASMC()
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCOutput object at 0x000001EF7C76F320>
================================== FAILURES ===================================
_________________ test_mpc_optional_dep_and_param_validation __________________
src\controllers\factory.py:535: in create_controller
    controller_info = _get_controller_info(controller_type)
        available  = ['classical_smc', 'sta_smc', 'adaptive_smc', 'hybrid_adaptive_sta_smc']
        config     = <tests.test_controllers.mpc.test_mpc_consolidated.test_mpc_optional_dep_and_param_validation.<locals>.CfgBadHType object at 0x000001EF7C96F620>
        controller_type = 'mpc_controller'
        gains      = None
        logger     = <Logger factory_module (DEBUG)>
src\controllers\factory.py:309: in _get_controller_info
    raise ImportError("MPC controller missing optional dependency")
E   ImportError: MPC controller missing optional dependency
        controller_info = {'class': None,
 'config_class': <class 'factory_module.UnavailableMPCConfig'>,
 'default_gains': [],
 'description': 'Model predictive controller (unavailable)',
 'gain_count': 0,
 'required_params': ['horizon', 'q_x', 'q_theta', 'r_u'],
 'supports_dynamics': True}
        controller_type = 'mpc_controller'
        current_module = None
        parent_module = <module 'src.controllers.factory' from 'D:\\Projects\\main\\src\\controllers\\factory\\__init__.py'>
        parent_package = 'src.controllers.factory'
        sys        = <module 'sys' (built-in)>

The above exception was the direct cause of the following exception:
tests\test_controllers\mpc\test_mpc_consolidated.py:39: in test_mpc_optional_dep_and_param_validation
    factory.create_controller("mpc_controller", config=CfgBadHType(), gains=None)
        CfgA       = <class 'tests.test_controllers.mpc.test_mpc_consolidated.test_mpc_optional_dep_and_param_validation.<locals>.CfgA'>
        CfgBadHType = <class 'tests.test_controllers.mpc.test_mpc_consolidated.test_mpc_optional_dep_and_param_validation.<locals>.CfgBadHType'>
        Dyn        = <class 'tests.test_controllers.mpc.test_mpc_consolidated.test_mpc_optional_dep_and_param_validation.<locals>.Dyn'>
        MPCStub    = <class 'tests.test_controllers.mpc.test_mpc_consolidated.test_mpc_optional_dep_and_param_validation.<locals>.MPCStub'>
        e1         = <ExceptionInfo ImportError("MPC controller missing optional dependency. Available controllers: ['classical_smc', 'sta_smc', 'adaptive_smc', 'hybrid_adaptive_sta_smc']") tblen=2>
        e2         = <ExceptionInfo for raises contextmanager>
        monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x000001EF7D991340>
src\controllers\factory.py:539: in create_controller
    raise ImportError(f"{e}. Available controllers: {available}") from e
E   ImportError: MPC controller missing optional dependency. Available controllers: ['classical_smc', 'sta_smc', 'adaptive_smc', 'hybrid_adaptive_sta_smc']
        available  = ['classical_smc', 'sta_smc', 'adaptive_smc', 'hybrid_adaptive_sta_smc']
        config     = <tests.test_controllers.mpc.test_mpc_consolidated.test_mpc_optional_dep_and_param_validation.<locals>.CfgBadHType object at 0x000001EF7C96F620>
        controller_type = 'mpc_controller'
        gains      = None
        logger     = <Logger factory_module (DEBUG)>
________________ test_mpc_controller_instantiation_and_control ________________
src\controllers\mpc\mpc_controller.py:407: in compute_control
    prob.solve(solver=cp.OSQP, warm_start=True, verbose=False)
        Ac         = array([[0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.]])
        Ad         = array([[1., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 1.]])
        Bc         = array([[1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.]])
        Bd         = array([[0.1],
       [0.1],
       [0.1],
       [0.1],
       [0.1],
       [0.1]])
        N          = 5
        Q          = array([[ 1. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. , 10. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. , 10. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0.1,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0.5,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0.5]])
        R          = array([[0.01]])
        U          = Variable((1, 5), var2)
        X          = Variable((6, 6), var1)
        Xref       = array([[0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        ],
       [3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265,
        3.14159265],
       [3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265,
        3.14159265],
       [0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        ]])
        cons       = [Equality(Expression(AFFINE, UNKNOWN, (6,)), Constant(CONSTANT, ZERO, (6,))),
 Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ()))]
        e          = Expression(AFFINE, UNKNOWN, (6,))
        eN         = Expression(AFFINE, UNKNOWN, (6,))
        k          = 4
        nu         = 1
        nx         = 6
        obj        = Expression(CONVEX, NONNEGATIVE, ())
        prob       = Problem(Minimize(Expression(CONVEX, NONNEGATIVE, ())), [Equality(Expression(AFFINE, UNKNOWN, (6,)), Constant(CONSTANT, ZERO, (6,))), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ()))])
        self       = <src.controllers.mpc.mpc_controller.MPCController object at 0x000001EF7D990CE0>
        t          = 0.0
        w          = MPCWeights(q_x=1.0, q_theta=10.0, q_xdot=0.1, q_thetadot=0.5, r_u=0.01)
        x0         = array([0., 0., 0., 0., 0., 0.])
C:\Users\sadeg\AppData\Roaming\Python\Python312\site-packages\cvxpy\problems\problem.py:609: in solve
    return solve_func(self, *args, **kwargs)
        args       = ()
        func_name  = None
        kwargs     = {'solver': 'OSQP', 'verbose': False, 'warm_start': True}
        self       = Problem(Minimize(Expression(CONVEX, NONNEGATIVE, ())), [Equality(Expression(AFFINE, UNKNOWN, (6,)), Constant(CONSTANT, ZERO, (6,))), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ()))])
        solve_func = <function Problem._solve at 0x000001EF7C449F80>
        solver_path = None
C:\Users\sadeg\AppData\Roaming\Python\Python312\site-packages\cvxpy\problems\problem.py:1218: in _solve
    solution = solving_chain.solve_via_data(
        bibtex     = False
        canon_backend = None
        data       = {'A': <77x102 sparse array of type '<class 'numpy.float64'>'
	with 178 stored elements in Compressed Sparse Column format>,
 'Ax': <137x102 sparse array of type '<class 'numpy.float64'>'
	with 278 stored elements in Compressed Sparse Column format>,
 'F': <60x102 sparse array of type '<class 'numpy.float64'>'
	with 100 stored elements in Compressed Sparse Column format>,
 'G': array([ 0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ]),
 'P': <102x102 sparse array of type '<class 'numpy.float64'>'
	with 41 stored elements in Compressed Sparse Column format>,
 'b': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ]),
 'bool_vars_idx': [],
 'dims': (zero: 77, nonpos: 60, exp: 0, soc: [], psd: []),
 'int_vars_idx': [],
 'l': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf]),
 'lower_bounds': None,
 'n_eq': 77,
 'n_ineq': 60,
 'n_var': 102,
 'param_prob': <cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg object at 0x000001EF7DB585F0>,
 'q': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),
 'u': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ,
        0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ]),
 'upper_bounds': None}
        enforce_dpp = False
        gp         = False
        ignore_dpp = False
        inverse_data = [(),
 <cvxpy.reductions.inverse_data.InverseData object at 0x000001EF7D8B9280>,
 <cvxpy.reductions.inverse_data.InverseData object at 0x000001EF7D9E6AB0>,
 {'IS_MIP': [],
  'dims': (zero: 77, nonpos: 60, exp: 0, soc: [], psd: []),
  'offset': array(0.),
  'var_id': 897}]
        kwargs     = {'eps_abs': 1e-05, 'eps_rel': 1e-05, 'max_iter': 10000, 'polishing': True}
        qcp        = False
        requires_grad = False
        self       = Problem(Minimize(Expression(CONVEX, NONNEGATIVE, ())), [Equality(Expression(AFFINE, UNKNOWN, (6,)), Constant(CONSTANT, ZERO, (6,))), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ()))])
        solver     = 'OSQP'
        solver_verbose = False
        solving_chain = Chain(reductions=[<cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr object at 0x000001EF7D990620>, <cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp object at 0x000001EF7D8B8AA0>, <cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing object at 0x000001EF7D8B8C20>, <cvxpy.reductions.solvers.qp_solvers.osqp_qpif.OSQP object at 0x000001EF432C2840>])
        start      = 1759334292.3484914
        verbose    = False
        warm_start = True
C:\Users\sadeg\AppData\Roaming\Python\Python312\site-packages\cvxpy\reductions\solvers\solving_chain.py:476: in solve_via_data
    return self.solver.solve_via_data(data, warm_start, verbose,
        data       = {'A': <77x102 sparse array of type '<class 'numpy.float64'>'
	with 178 stored elements in Compressed Sparse Column format>,
 'Ax': <137x102 sparse array of type '<class 'numpy.float64'>'
	with 278 stored elements in Compressed Sparse Column format>,
 'F': <60x102 sparse array of type '<class 'numpy.float64'>'
	with 100 stored elements in Compressed Sparse Column format>,
 'G': array([ 0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ]),
 'P': <102x102 sparse array of type '<class 'numpy.float64'>'
	with 41 stored elements in Compressed Sparse Column format>,
 'b': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ]),
 'bool_vars_idx': [],
 'dims': (zero: 77, nonpos: 60, exp: 0, soc: [], psd: []),
 'int_vars_idx': [],
 'l': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf]),
 'lower_bounds': None,
 'n_eq': 77,
 'n_ineq': 60,
 'n_var': 102,
 'param_prob': <cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg object at 0x000001EF7DB585F0>,
 'q': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),
 'u': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ,
        0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ]),
 'upper_bounds': None}
        problem    = Problem(Minimize(Expression(CONVEX, NONNEGATIVE, ())), [Equality(Expression(AFFINE, UNKNOWN, (6,)), Constant(CONSTANT, ZERO, (6,))), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ()))])
        self       = Chain(reductions=[<cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr object at 0x000001EF7D990620>, <cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp object at 0x000001EF7D8B8AA0>, <cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing object at 0x000001EF7D8B8C20>, <cvxpy.reductions.solvers.qp_solvers.osqp_qpif.OSQP object at 0x000001EF432C2840>])
        solver_opts = {'eps_abs': 1e-05, 'eps_rel': 1e-05, 'max_iter': 10000, 'polishing': True}
        verbose    = False
        warm_start = True
C:\Users\sadeg\AppData\Roaming\Python\Python312\site-packages\cvxpy\reductions\solvers\qp_solvers\osqp_qpif.py:132: in solve_via_data
    results = solver.solve()
        A          = <137x102 sparse matrix of type '<class 'numpy.float64'>'
	with 278 stored elements in Compressed Sparse Column format>
        P          = <102x102 sparse matrix of type '<class 'numpy.float64'>'
	with 41 stored elements in Compressed Sparse Column format>
        data       = {'A': <77x102 sparse array of type '<class 'numpy.float64'>'
	with 178 stored elements in Compressed Sparse Column format>,
 'Ax': <137x102 sparse array of type '<class 'numpy.float64'>'
	with 278 stored elements in Compressed Sparse Column format>,
 'F': <60x102 sparse array of type '<class 'numpy.float64'>'
	with 100 stored elements in Compressed Sparse Column format>,
 'G': array([ 0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ]),
 'P': <102x102 sparse array of type '<class 'numpy.float64'>'
	with 41 stored elements in Compressed Sparse Column format>,
 'b': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ]),
 'bool_vars_idx': [],
 'dims': (zero: 77, nonpos: 60, exp: 0, soc: [], psd: []),
 'int_vars_idx': [],
 'l': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf]),
 'lower_bounds': None,
 'n_eq': 77,
 'n_ineq': 60,
 'n_var': 102,
 'param_prob': <cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg object at 0x000001EF7DB585F0>,
 'q': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),
 'u': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ,
        0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ]),
 'upper_bounds': None}
        is_pre_v1  = False
        lA         = array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf])
        osqp       = <module 'osqp' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\osqp\\__init__.py'>
        polish_param = 'polishing'
        q          = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
        self       = <cvxpy.reductions.solvers.qp_solvers.osqp_qpif.OSQP object at 0x000001EF432C2840>
        solver     = <osqp.interface.OSQP object at 0x000001EF7D6B58E0>
        solver_cache = {}
        solver_opts = {'eps_abs': 1e-05, 'eps_rel': 1e-05, 'max_iter': 10000, 'polishing': True}
        uA         = array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ,
        0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ])
        verbose    = False
        warm_start = True
C:\Users\sadeg\AppData\Roaming\Python\Python312\site-packages\osqp\interface.py:405: in solve
    warnings.warn(
E   PendingDeprecationWarning: The default value of raise_error will change to True in the future.
        raise_error = None
        self       = <osqp.interface.OSQP object at 0x000001EF7D6B58E0>

During handling of the above exception, another exception occurred:
tests\test_controllers\mpc\test_mpc_controller.py:46: in test_mpc_controller_instantiation_and_control
    u = ctrl.compute_control(0.0, x0)
        ctrl       = <src.controllers.mpc.mpc_controller.MPCController object at 0x000001EF7D990CE0>
        model      = <tests.test_controllers.mpc.test_mpc_controller.LinearModel object at 0x000001EF7D992ED0>
        x0         = array([0., 0., 0., 0., 0., 0.])
src\controllers\mpc\mpc_controller.py:409: in compute_control
    prob.solve(warm_start=True, verbose=False)
        Ac         = array([[0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.]])
        Ad         = array([[1., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 1.]])
        Bc         = array([[1.],
       [1.],
       [1.],
       [1.],
       [1.],
       [1.]])
        Bd         = array([[0.1],
       [0.1],
       [0.1],
       [0.1],
       [0.1],
       [0.1]])
        N          = 5
        Q          = array([[ 1. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. , 10. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. , 10. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0.1,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0.5,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0.5]])
        R          = array([[0.01]])
        U          = Variable((1, 5), var2)
        X          = Variable((6, 6), var1)
        Xref       = array([[0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        ],
       [3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265,
        3.14159265],
       [3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265,
        3.14159265],
       [0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        ]])
        cons       = [Equality(Expression(AFFINE, UNKNOWN, (6,)), Constant(CONSTANT, ZERO, (6,))),
 Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ())),
 Inequality(Expression(CONVEX, NONNEGATIVE, ()))]
        e          = Expression(AFFINE, UNKNOWN, (6,))
        eN         = Expression(AFFINE, UNKNOWN, (6,))
        k          = 4
        nu         = 1
        nx         = 6
        obj        = Expression(CONVEX, NONNEGATIVE, ())
        prob       = Problem(Minimize(Expression(CONVEX, NONNEGATIVE, ())), [Equality(Expression(AFFINE, UNKNOWN, (6,)), Constant(CONSTANT, ZERO, (6,))), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ()))])
        self       = <src.controllers.mpc.mpc_controller.MPCController object at 0x000001EF7D990CE0>
        t          = 0.0
        w          = MPCWeights(q_x=1.0, q_theta=10.0, q_xdot=0.1, q_thetadot=0.5, r_u=0.01)
        x0         = array([0., 0., 0., 0., 0., 0.])
C:\Users\sadeg\AppData\Roaming\Python\Python312\site-packages\cvxpy\problems\problem.py:609: in solve
    return solve_func(self, *args, **kwargs)
        args       = ()
        func_name  = None
        kwargs     = {'verbose': False, 'warm_start': True}
        self       = Problem(Minimize(Expression(CONVEX, NONNEGATIVE, ())), [Equality(Expression(AFFINE, UNKNOWN, (6,)), Constant(CONSTANT, ZERO, (6,))), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ()))])
        solve_func = <function Problem._solve at 0x000001EF7C449F80>
        solver_path = None
C:\Users\sadeg\AppData\Roaming\Python\Python312\site-packages\cvxpy\problems\problem.py:1218: in _solve
    solution = solving_chain.solve_via_data(
        bibtex     = False
        canon_backend = None
        data       = {'A': <77x102 sparse array of type '<class 'numpy.float64'>'
	with 178 stored elements in Compressed Sparse Column format>,
 'Ax': <137x102 sparse array of type '<class 'numpy.float64'>'
	with 278 stored elements in Compressed Sparse Column format>,
 'F': <60x102 sparse array of type '<class 'numpy.float64'>'
	with 100 stored elements in Compressed Sparse Column format>,
 'G': array([ 0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ]),
 'P': <102x102 sparse array of type '<class 'numpy.float64'>'
	with 41 stored elements in Compressed Sparse Column format>,
 'b': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ]),
 'bool_vars_idx': [],
 'dims': (zero: 77, nonpos: 60, exp: 0, soc: [], psd: []),
 'int_vars_idx': [],
 'l': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf]),
 'lower_bounds': None,
 'n_eq': 77,
 'n_ineq': 60,
 'n_var': 102,
 'param_prob': <cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg object at 0x000001EF7D91A360>,
 'q': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),
 'u': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ,
        0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ]),
 'upper_bounds': None}
        enforce_dpp = False
        gp         = False
        ignore_dpp = False
        inverse_data = [(),
 <cvxpy.reductions.inverse_data.InverseData object at 0x000001EF7D6B5B80>,
 <cvxpy.reductions.inverse_data.InverseData object at 0x000001EF7DBA5490>,
 {'IS_MIP': [],
  'dims': (zero: 77, nonpos: 60, exp: 0, soc: [], psd: []),
  'offset': array(0.),
  'var_id': 1553}]
        kwargs     = {'eps_abs': 1e-05, 'eps_rel': 1e-05, 'max_iter': 10000, 'polishing': True}
        qcp        = False
        requires_grad = False
        self       = Problem(Minimize(Expression(CONVEX, NONNEGATIVE, ())), [Equality(Expression(AFFINE, UNKNOWN, (6,)), Constant(CONSTANT, ZERO, (6,))), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ()))])
        solver     = None
        solver_verbose = False
        solving_chain = Chain(reductions=[<cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr object at 0x000001EF7D5339B0>, <cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp object at 0x000001EF7DB5A330>, <cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing object at 0x000001EF7DB5A540>, <cvxpy.reductions.solvers.qp_solvers.osqp_qpif.OSQP object at 0x000001EF432C2840>])
        start      = 1759334292.4974976
        verbose    = False
        warm_start = True
C:\Users\sadeg\AppData\Roaming\Python\Python312\site-packages\cvxpy\reductions\solvers\solving_chain.py:476: in solve_via_data
    return self.solver.solve_via_data(data, warm_start, verbose,
        data       = {'A': <77x102 sparse array of type '<class 'numpy.float64'>'
	with 178 stored elements in Compressed Sparse Column format>,
 'Ax': <137x102 sparse array of type '<class 'numpy.float64'>'
	with 278 stored elements in Compressed Sparse Column format>,
 'F': <60x102 sparse array of type '<class 'numpy.float64'>'
	with 100 stored elements in Compressed Sparse Column format>,
 'G': array([ 0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ]),
 'P': <102x102 sparse array of type '<class 'numpy.float64'>'
	with 41 stored elements in Compressed Sparse Column format>,
 'b': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ]),
 'bool_vars_idx': [],
 'dims': (zero: 77, nonpos: 60, exp: 0, soc: [], psd: []),
 'int_vars_idx': [],
 'l': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf]),
 'lower_bounds': None,
 'n_eq': 77,
 'n_ineq': 60,
 'n_var': 102,
 'param_prob': <cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg object at 0x000001EF7D91A360>,
 'q': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),
 'u': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ,
        0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ]),
 'upper_bounds': None}
        problem    = Problem(Minimize(Expression(CONVEX, NONNEGATIVE, ())), [Equality(Expression(AFFINE, UNKNOWN, (6,)), Constant(CONSTANT, ZERO, (6,))), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Equality(Expression(AFFINE, UNKNOWN, (6,)), Expression(AFFINE, UNKNOWN, (6,))), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ())), Inequality(Expression(CONVEX, NONNEGATIVE, ()))])
        self       = Chain(reductions=[<cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr object at 0x000001EF7D5339B0>, <cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp object at 0x000001EF7DB5A330>, <cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing object at 0x000001EF7DB5A540>, <cvxpy.reductions.solvers.qp_solvers.osqp_qpif.OSQP object at 0x000001EF432C2840>])
        solver_opts = {'eps_abs': 1e-05, 'eps_rel': 1e-05, 'max_iter': 10000, 'polishing': True}
        verbose    = False
        warm_start = True
C:\Users\sadeg\AppData\Roaming\Python\Python312\site-packages\cvxpy\reductions\solvers\qp_solvers\osqp_qpif.py:132: in solve_via_data
    results = solver.solve()
        A          = <137x102 sparse matrix of type '<class 'numpy.float64'>'
	with 278 stored elements in Compressed Sparse Column format>
        P          = <102x102 sparse matrix of type '<class 'numpy.float64'>'
	with 41 stored elements in Compressed Sparse Column format>
        data       = {'A': <77x102 sparse array of type '<class 'numpy.float64'>'
	with 178 stored elements in Compressed Sparse Column format>,
 'Ax': <137x102 sparse array of type '<class 'numpy.float64'>'
	with 278 stored elements in Compressed Sparse Column format>,
 'F': <60x102 sparse array of type '<class 'numpy.float64'>'
	with 100 stored elements in Compressed Sparse Column format>,
 'G': array([ 0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ]),
 'P': <102x102 sparse array of type '<class 'numpy.float64'>'
	with 41 stored elements in Compressed Sparse Column format>,
 'b': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ]),
 'bool_vars_idx': [],
 'dims': (zero: 77, nonpos: 60, exp: 0, soc: [], psd: []),
 'int_vars_idx': [],
 'l': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf]),
 'lower_bounds': None,
 'n_eq': 77,
 'n_ineq': 60,
 'n_var': 102,
 'param_prob': <cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg object at 0x000001EF7D91A360>,
 'q': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]),
 'u': array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ,
        0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ]),
 'upper_bounds': None}
        is_pre_v1  = False
        lA         = array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf,        -inf,        -inf,        -inf,
              -inf,        -inf])
        osqp       = <module 'osqp' from 'C:\\Users\\sadeg\\AppData\\Roaming\\Python\\Python312\\site-packages\\osqp\\__init__.py'>
        polish_param = 'polishing'
        q          = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
        self       = <cvxpy.reductions.solvers.qp_solvers.osqp_qpif.OSQP object at 0x000001EF432C2840>
        solver     = <osqp.interface.OSQP object at 0x000001EF7DB58080>
        solver_cache = {}
        solver_opts = {'eps_abs': 1e-05, 'eps_rel': 1e-05, 'max_iter': 10000, 'polishing': True}
        uA         = array([-0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        ,  3.14159265,  3.14159265,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
        3.14159265,  3.14159265, -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  3.14159265,  3.14159265, -0.        ,
       -0.        , -0.        , -0.        , -0.        ,  3.14159265,
        3.14159265, -0.        , -0.        , -0.        , -0.        ,
       -0.        ,  3.14159265,  3.14159265, -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        , -0.        , -0.        , -0.        ,
       -0.        , -0.        ,  0.        ,  0.        , 10.        ,
        0.        ,  0.        ,  2.4       ,  3.14159265, -3.14159265,
        0.5       ,  3.14159265, -3.14159265,  0.5       ,  0.        ,
        0.        , 10.        ,  0.        ,  0.        ,  2.4       ,
        3.14159265, -3.14159265,  0.5       ,  3.14159265, -3.14159265,
        0.5       ,  0.        ,  0.        , 10.        ,  0.        ,
        0.        ,  2.4       ,  3.14159265, -3.14159265,  0.5       ,
        3.14159265, -3.14159265,  0.5       ,  0.        ,  0.        ,
       10.        ,  0.        ,  0.        ,  2.4       ,  3.14159265,
       -3.14159265,  0.5       ,  3.14159265, -3.14159265,  0.5       ,
        0.        ,  0.        , 10.        ,  0.        ,  0.        ,
        2.4       ,  3.14159265, -3.14159265,  0.5       ,  3.14159265,
       -3.14159265,  0.5       ])
        verbose    = False
        warm_start = True
C:\Users\sadeg\AppData\Roaming\Python\Python312\site-packages\osqp\interface.py:405: in solve
    warnings.warn(
E   PendingDeprecationWarning: The default value of raise_error will change to True in the future.
        raise_error = None
        self       = <osqp.interface.OSQP object at 0x000001EF7DB58080>
_ TestEquivalentControlInitialization.test_initialization_default_parameters __
tests\test_controllers\smc\core\test_equivalent_control.py:26: in test_initialization_default_parameters
    assert eq_control.regularization == 1e-10
E   AttributeError: 'EquivalentControl' object has no attribute 'regularization'
        eq_control = <src.controllers.smc.core.equivalent_control.EquivalentControl object at 0x000001EF7DA4C2F0>
        self       = <test_equivalent_control.TestEquivalentControlInitialization object at 0x000001EF7C6C8FB0>
__ TestEquivalentControlInitialization.test_initialization_custom_parameters __
tests\test_controllers\smc\core\test_equivalent_control.py:33: in test_initialization_custom_parameters
    eq_control = EquivalentControl(
E   TypeError: EquivalentControl.__init__() got an unexpected keyword argument 'regularization'
        mock_dynamics = <Mock id='2128116771312'>
        self       = <test_equivalent_control.TestEquivalentControlInitialization object at 0x000001EF7C6C8950>
__________ TestSMCGainValidator.test_validate_gains_classical_valid ___________
tests\test_controllers\smc\core\test_gain_validation.py:166: in test_validate_gains_classical_valid
    assert 'errors' in result
E   AssertionError: assert 'errors' in {'valid': True, 'violations': [], 'controller_type': 'classical', 'gains_checked': 6, 'gains_provided': 6}
        result     = {'controller_type': 'classical',
 'gains_checked': 6,
 'gains_provided': 6,
 'valid': True,
 'violations': []}
        self       = <test_gain_validation.TestSMCGainValidator object at 0x000001EF7C6EE4E0>
        valid_gains = [10.0, 8.0, 5.0, 3.0, 15.0, 2.0]
        validator  = <src.controllers.smc.core.gain_validation.SMCGainValidator object at 0x000001EF7D9B57F0>
_________ TestSMCGainValidator.test_validate_gains_classical_invalid __________
tests\test_controllers\smc\core\test_gain_validation.py:176: in test_validate_gains_classical_invalid
    assert len(result['errors']) > 0
E   KeyError: 'errors'
        invalid_gains = [-1.0, 8.0, 5.0, 3.0, 15.0, 2.0]
        result     = {'controller_type': 'classical',
 'gains_checked': 6,
 'gains_provided': 6,
 'valid': False,
 'violations': [{'bounds': (0.1, 1000.0),
                 'description': 'Joint 1 position gain',
                 'index': 0,
                 'name': 'k1',
                 'value': -1.0}]}
        self       = <test_gain_validation.TestSMCGainValidator object at 0x000001EF7C6EE6C0>
        validator  = <src.controllers.smc.core.gain_validation.SMCGainValidator object at 0x000001EF7DA4E300>
_______ TestSMCGainValidator.test_validate_gains_string_controller_type _______
tests\test_controllers\smc\core\test_gain_validation.py:183: in test_validate_gains_string_controller_type
    assert result['valid'] is True
E   assert False is True
        result     = {'controller_type': 'adaptive',
 'gains_checked': 5,
 'gains_provided': 5,
 'valid': False,
 'violations': [{'bounds': (0.01, 10.0),
                 'description': 'Adaptation rate',
                 'index': 4,
                 'name': 'gamma',
                 'value': 15.0}]}
        self       = <test_gain_validation.TestSMCGainValidator object at 0x000001EF7C6EE8A0>
        valid_gains = [10.0, 8.0, 5.0, 3.0, 15.0]
        validator  = <src.controllers.smc.core.gain_validation.SMCGainValidator object at 0x000001EF7DA4F020>
____________ TestSMCGainValidator.test_validate_gains_wrong_length ____________
tests\test_controllers\smc\core\test_gain_validation.py:192: in test_validate_gains_wrong_length
    assert len(result['errors']) > 0
E   KeyError: 'errors'
        result     = {'error': 'classical requires at least 6 gains, got 4', 'valid': False}
        self       = <test_gain_validation.TestSMCGainValidator object at 0x000001EF7C6EEA80>
        validator  = <src.controllers.smc.core.gain_validation.SMCGainValidator object at 0x000001EF7D6395B0>
        wrong_length_gains = [10.0, 8.0, 5.0, 3.0]
________ TestSMCGainValidator.test_get_recommended_ranges_invalid_type ________
tests\test_controllers\smc\core\test_gain_validation.py:242: in test_get_recommended_ranges_invalid_type
    ranges = validator.get_recommended_ranges("invalid")
        self       = <test_gain_validation.TestSMCGainValidator object at 0x000001EF7C6EEC30>
        validator  = <src.controllers.smc.core.gain_validation.SMCGainValidator object at 0x000001EF7D9B5D30>
src\controllers\smc\core\gain_validation.py:236: in get_recommended_ranges
    controller_type = SMCControllerType(controller_type.lower())
        controller_type = 'invalid'
        self       = <src.controllers.smc.core.gain_validation.SMCGainValidator object at 0x000001EF7D9B5D30>
C:\Program Files\Python312\Lib\enum.py:757: in __call__
    return cls.__new__(cls, value)
        boundary   = None
        cls        = <enum 'SMCControllerType'>
        module     = None
        names      = <not given>
        qualname   = None
        start      = 1
        type       = None
        value      = 'invalid'
        values     = ()
C:\Program Files\Python312\Lib\enum.py:1171: in __new__
    raise ve_exc
E   ValueError: 'invalid' is not a valid SMCControllerType
        cls        = <enum 'SMCControllerType'>
        exc        = None
        result     = None
        value      = 'invalid'
        ve_exc     = None
_________ TestSMCGainValidator.test_update_bounds_invalid_controller __________
tests\test_controllers\smc\core\test_gain_validation.py:268: in test_update_bounds_invalid_controller
    validator.update_bounds("invalid", 'k1', 1.0, 10.0)
        self       = <test_gain_validation.TestSMCGainValidator object at 0x000001EF7C6EF1D0>
        validator  = <src.controllers.smc.core.gain_validation.SMCGainValidator object at 0x000001EF7D9B7BC0>
src\controllers\smc\core\gain_validation.py:259: in update_bounds
    controller_type = SMCControllerType(controller_type.lower())
        controller_type = 'invalid'
        gain_name  = 'k1'
        max_val    = 10.0
        min_val    = 1.0
        self       = <src.controllers.smc.core.gain_validation.SMCGainValidator object at 0x000001EF7D9B7BC0>
C:\Program Files\Python312\Lib\enum.py:757: in __call__
    return cls.__new__(cls, value)
        boundary   = None
        cls        = <enum 'SMCControllerType'>
        module     = None
        names      = <not given>
        qualname   = None
        start      = 1
        type       = None
        value      = 'invalid'
        values     = ()
C:\Program Files\Python312\Lib\enum.py:1171: in __new__
    raise ve_exc
E   ValueError: 'invalid' is not a valid SMCControllerType
        cls        = <enum 'SMCControllerType'>
        exc        = None
        result     = None
        value      = 'invalid'
        ve_exc     = None

During handling of the above exception, another exception occurred:
tests\test_controllers\smc\core\test_gain_validation.py:267: in test_update_bounds_invalid_controller
    with pytest.raises(ValueError, match="Unknown controller type"):
E   AssertionError: Regex pattern did not match.
E    Regex: 'Unknown controller type'
E    Input: "'invalid' is not a valid SMCControllerType"
        self       = <test_gain_validation.TestSMCGainValidator object at 0x000001EF7C6EF1D0>
        validator  = <src.controllers.smc.core.gain_validation.SMCGainValidator object at 0x000001EF7D9B7BC0>
___________________ TestErrorHandling.test_empty_gains_list ___________________
tests\test_controllers\smc\core\test_gain_validation.py:382: in test_empty_gains_list
    assert len(result['errors']) > 0
E   KeyError: 'errors'
        result     = {'error': 'classical requires at least 6 gains, got 0', 'valid': False}
        self       = <test_gain_validation.TestErrorHandling object at 0x000001EF7C710920>
        validator  = <src.controllers.smc.core.gain_validation.SMCGainValidator object at 0x000001EF7D83E270>
____________ TestSwitchingFunctionClass.test_tanh_switching_basic _____________
tests\test_controllers\smc\core\test_switching_functions.py:79: in test_tanh_switching_basic
    assert abs(result - expected) < 1e-10
E   assert 0.2334605977309656 < 1e-10
E    +  where 0.2334605977309656 = abs((0.9950547536867305 - 0.7615941559557649))
        expected   = 0.7615941559557649
        result     = 0.9950547536867305
        self       = <test_switching_functions.TestSwitchingFunctionClass object at 0x000001EF7C741D00>
        switch_func = <src.controllers.smc.core.switching_functions.SwitchingFunction object at 0x000001EF7D83C230>
____________ TestConvenienceFunctions.test_tanh_switching_function ____________
tests\test_controllers\smc\core\test_switching_functions.py:277: in test_tanh_switching_function
    assert abs(result - expected) < 1e-10
E   assert 0.2334605977309656 < 1e-10
E    +  where 0.2334605977309656 = abs((0.9950547536867305 - 0.7615941559557649))
        expected   = 0.7615941559557649
        result     = 0.9950547536867305
        self       = <test_switching_functions.TestConvenienceFunctions object at 0x000001EF7C76C260>
____________ TestConvenienceFunctions.test_sign_switching_function ____________
tests\test_controllers\smc\core\test_switching_functions.py:302: in test_sign_switching_function
    result_pos = sign_switching(1.0)
        self       = <test_switching_functions.TestConvenienceFunctions object at 0x000001EF7C7430E0>
src\controllers\smc\core\switching_functions.py:288: in sign_switching
    warnings.warn(
E   DeprecationWarning: sign_switching() is deprecated and causes severe chattering. Use tanh_switching(s, epsilon, slope=3.0) for smooth control.
        epsilon    = 0.0
        s          = 1.0
        warnings   = <module 'warnings' from 'C:\\Program Files\\Python312\\Lib\\warnings.py'>
________ TestConvenienceFunctions.test_sign_switching_ignores_epsilon _________
tests\test_controllers\smc\core\test_switching_functions.py:312: in test_sign_switching_ignores_epsilon
    result1 = sign_switching(1.0, 0.1)
        self       = <test_switching_functions.TestConvenienceFunctions object at 0x000001EF7C742D80>
src\controllers\smc\core\switching_functions.py:288: in sign_switching
    warnings.warn(
E   DeprecationWarning: sign_switching() is deprecated and causes severe chattering. Use tanh_switching(s, epsilon, slope=3.0) for smooth control.
        epsilon    = 0.1
        s          = 1.0
        warnings   = <module 'warnings' from 'C:\\Program Files\\Python312\\Lib\\warnings.py'>
______ TestHybridAdaptiveSTASMCInitialization.test_basic_initialization _______
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:74: in test_basic_initialization
    controller = HybridAdaptiveSTASMC()
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCInitialization object at 0x000001EF7C76E750>
_ TestHybridAdaptiveSTASMCInitialization.test_initialization_with_surface_gains _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:80: in test_initialization_with_surface_gains
    controller = HybridAdaptiveSTASMC(surface_gains=surface_gains)
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCInitialization object at 0x000001EF7C76E8D0>
        surface_gains = [2.0, 3.0, 1.5, 2.5]
_ TestHybridAdaptiveSTASMCInitialization.test_initialization_with_cart_gains __
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:88: in test_initialization_with_cart_gains
    controller = HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'enable_cart_control'
        cart_gains = [1.0, 0.5]
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCInitialization object at 0x000001EF7C76EA50>
_ TestHybridAdaptiveSTASMCInitialization.test_initialization_with_adaptation_params _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:96: in test_initialization_with_adaptation_params
    controller = HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'adaptation_rate'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCInitialization object at 0x000001EF7C76EBD0>
_ TestHybridAdaptiveSTASMCInitialization.test_initialization_with_boundary_params _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:108: in test_initialization_with_boundary_params
    controller = HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCInitialization object at 0x000001EF7C76ED50>
_ TestHybridAdaptiveSTASMCInitialization.test_initialization_with_surface_type _
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:117: in test_initialization_with_surface_type
    controller_abs = HybridAdaptiveSTASMC(use_relative_surface=False)
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCInitialization object at 0x000001EF7C76EED0>
______ TestHybridAdaptiveSTASMCInitialization.test_invalid_surface_gains ______
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:127: in test_invalid_surface_gains
    HybridAdaptiveSTASMC(surface_gains=[0.0, 1.0, 1.0, 1.0])  # c1 = 0
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCInitialization object at 0x000001EF7C76F050>
____ TestHybridAdaptiveSTASMCInitialization.test_invalid_adaptation_gains _____
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:135: in test_invalid_adaptation_gains
    HybridAdaptiveSTASMC(k1_init=0.0)  # k1_init <= 0
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 7 required positional arguments: 'gains', 'dt', 'max_force', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCInitialization object at 0x000001EF7C76EEA0>
____ TestHybridAdaptiveSTASMCInitialization.test_boundary_layer_validation ____
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:143: in test_boundary_layer_validation
    HybridAdaptiveSTASMC(dead_zone=0.1, sat_soft_width=0.05)  # soft_width < dead_zone
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 7 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', and 'gamma2'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCInitialization object at 0x000001EF7C76EB40>
____ TestHybridAdaptiveSTASMCComputeControl.test_equivalent_control_toggle ____
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:247: in test_equivalent_control_toggle
    controller_eq = HybridAdaptiveSTASMC(enable_equivalent=True)
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCComputeControl object at 0x000001EF7C76F8C0>
        state      = array([0.1 , 0.  , 0.2 , 0.  , 0.05, 0.  ])
_______ TestHybridAdaptiveSTASMCComputeControl.test_cart_control_toggle _______
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:262: in test_cart_control_toggle
    controller_cart = HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'enable_cart_control'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCComputeControl object at 0x000001EF7C76FA40>
        state      = array([0.1 , 0.  , 0.2 , 0.  , 0.05, 0.  ])
__ TestHybridAdaptiveSTASMCComputeControl.test_relative_vs_absolute_surface ___
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:280: in test_relative_vs_absolute_surface
    controller_abs = HybridAdaptiveSTASMC(use_relative_surface=False)
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCComputeControl object at 0x000001EF7C76FBC0>
        state      = array([0.1, 0. , 0.3, 0. , 0. , 0. ])
______________ TestHybridAdaptiveSTASMCEdgeCases.test_zero_state ______________
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:365: in test_zero_state
    controller = HybridAdaptiveSTASMC()
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCEdgeCases object at 0x000001EF7C790470>
_____________ TestHybridAdaptiveSTASMCEdgeCases.test_large_state ______________
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:373: in test_large_state
    controller = HybridAdaptiveSTASMC()
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCEdgeCases object at 0x000001EF7C7905F0>
_______ TestHybridAdaptiveSTASMCEdgeCases.test_invalid_state_dimension ________
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:382: in test_invalid_state_dimension
    controller = HybridAdaptiveSTASMC()
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCEdgeCases object at 0x000001EF7C790770>
______________ TestHybridAdaptiveSTASMCEdgeCases.test_nan_state _______________
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:389: in test_nan_state
    controller = HybridAdaptiveSTASMC()
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCEdgeCases object at 0x000001EF7C7908F0>
______________ TestHybridAdaptiveSTASMCEdgeCases.test_inf_state _______________
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:397: in test_inf_state
    controller = HybridAdaptiveSTASMC()
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCEdgeCases object at 0x000001EF7C790A70>
_______ TestHybridAdaptiveSTASMCEdgeCases.test_extreme_adaptation_rates _______
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:406: in test_extreme_adaptation_rates
    controller_slow = HybridAdaptiveSTASMC(adaptation_rate=1e-6)
E   TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'adaptation_rate'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCEdgeCases object at 0x000001EF7C790BF0>
______ TestHybridAdaptiveSTASMCEdgeCases.test_boundary_layer_edge_cases _______
tests\test_controllers\smc\test_hybrid_adaptive_sta_smc.py:421: in test_boundary_layer_edge_cases
    controller_min = HybridAdaptiveSTASMC(
E   TypeError: HybridAdaptiveSTASMC.__init__() missing 7 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', and 'gamma2'
        self       = <tests.test_controllers.smc.test_hybrid_adaptive_sta_smc.TestHybridAdaptiveSTASMCEdgeCases object at 0x000001EF7C790D70>
______________ TestModularAdaptiveSMC.test_uncertainty_estimator ______________
tests\test_controllers\test_modular_smc.py:197: in test_uncertainty_estimator
    updated = estimator.update_estimates(sliding_surface, adaptation_rate, dt=0.01)
        adaptation_rate = 5.0
        config     = AdaptiveSMCConfig(gains=[1.0, 1.0, 1.0, 1.0, 5.0],
                  max_force=50.0,
                  dt=0.01,
                  leak_rate=0.1,
                  adapt_rate_limit=100.0,
                  K_min=0.1,
                  K_max=100.0,
                  K_init=10.0,
                  alpha=0.5,
                  boundary_layer=0.01,
                  smooth_switch=True,
                  dead_zone=0.01)
        estimator  = <src.controllers.smc.algorithms.adaptive.parameter_estimation.UncertaintyEstimator object at 0x000001EF7D63AA80>
        self       = <tests.test_controllers.test_modular_smc.TestModularAdaptiveSMC object at 0x000001EF7C7C25A0>
        sliding_surface = array([0.1, 0.2, 0.3])
src\controllers\smc\algorithms\adaptive\parameter_estimation.py:196: in update_estimates
    return self.update_estimate(surface_value, surface_derivative, control_input, dt)
        adaptation_rate = 5.0
        control_input = 0.0
        dt         = 0.01
        self       = <src.controllers.smc.algorithms.adaptive.parameter_estimation.UncertaintyEstimator object at 0x000001EF7D63AA80>
        surface_derivative = array([0.5, 1. , 1.5])
        surface_value = array([0.1, 0.2, 0.3])
src\controllers\smc\algorithms\adaptive\parameter_estimation.py:84: in update_estimate
    uncertainty_indicator = self._compute_uncertainty_indicator(
        control_input = 0.0
        dt         = 0.01
        self       = <src.controllers.smc.algorithms.adaptive.parameter_estimation.UncertaintyEstimator object at 0x000001EF7D63AA80>
        surface_derivative = array([0.5, 1. , 1.5])
        surface_value = array([0.1, 0.2, 0.3])
src\controllers\smc\algorithms\adaptive\parameter_estimation.py:121: in _compute_uncertainty_indicator
    0.2 * max(0, sliding_condition))
E   ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
        control_effectiveness = array([0.1, 0.2, 0.3])
        reaching_violation = array([0.6, 1.2, 1.8])
        s          = array([0.1, 0.2, 0.3])
        s_dot      = array([0.5, 1. , 1.5])
        self       = <src.controllers.smc.algorithms.adaptive.parameter_estimation.UncertaintyEstimator object at 0x000001EF7D63AA80>
        sliding_condition = array([0.05, 0.2 , 0.45])
        u          = 0.0
__________ TestModularHybridSMC.test_switching_logic_initialization ___________
tests\test_controllers\test_modular_smc.py:324: in test_switching_logic_initialization
    assert switching_logic.thresholds is not None
E   AttributeError: 'HybridSwitchingLogic' object has no attribute 'thresholds'
        config     = HybridSMCConfig(hybrid_mode=<HybridMode.CLASSICAL_ADAPTIVE: 'classical_adaptive'>,
                dt=0.01,
                max_force=50.0,
                gains=[18.0, 12.0, 10.0, 8.0],
                classical_config=ClassicalSMCConfig(gains=[1.0,
                                                           1.0,
                                                           1.0,
                                                           1.0,
                                                           10.0,
                                                           0.5],
                                                    max_force=50.0,
                                                    boundary_layer=0.1,
                                                    dt=0.01,
                                                    boundary_layer_slope=0.0,
                                                    switch_method='tanh',
                                                    regularization_alpha=0.0001,
                                                    min_regularization=1e-10,
                                                    max_condition_number=100000000000000.0,
                                                    use_adaptive_regularization=True,
                                                    controllability_threshold=None,
                                                    dynamics_model=None),
                adaptive_config=AdaptiveSMCConfig(gains=[1.0,
                                                         1.0,
                                                         1.0,
                                                         1.0,
                                                         5.0],
                                                  max_force=50.0,
                                                  dt=0.01,
                                                  leak_rate=0.1,
                                                  adapt_rate_limit=100.0,
                                                  K_min=0.1,
                                                  K_max=100.0,
                                                  K_init=10.0,
                                                  alpha=0.5,
                                                  boundary_layer=0.01,
                                                  smooth_switch=True,
                                                  dead_zone=0.01),
                supertwisting_config=None,
                switching_criterion=<SwitchingCriterion.SURFACE_MAGNITUDE: 'surface_magnitude'>,
                switching_thresholds=[0.1, 1.0],
                hysteresis_margin=0.02,
                min_switching_time=0.1,
                performance_window=50,
                performance_weights={'control_effort': 0.3,
                                     'surface_magnitude': 0.3,
                                     'tracking_error': 0.4},
                enable_predictive_switching=False,
                prediction_horizon=10,
                enable_learning=False,
                learning_rate=0.01,
                transition_smoothing=True,
                smoothing_time_constant=0.05,
                dynamics_model=None)
        self       = <tests.test_controllers.test_modular_smc.TestModularHybridSMC object at 0x000001EF7C7C32F0>
        switching_logic = <src.controllers.smc.algorithms.hybrid.switching_logic.HybridSwitchingLogic object at 0x000001EF7C7909B0>
__________ TestComponentIntegration.test_sliding_surface_integration __________
tests\test_controllers\test_modular_smc.py:452: in test_sliding_surface_integration
    assert computed_surface.shape == (3,)
E   AttributeError: 'float' object has no attribute 'shape'
        LinearSlidingSurface = <class 'src.controllers.smc.core.sliding_surface.LinearSlidingSurface'>
        computed_surface = 0.6
        lambda_gain = array([1., 1., 1., 1.])
        self       = <tests.test_controllers.test_modular_smc.TestComponentIntegration object at 0x000001EF7C7C39E0>
        state      = array([0.1, 0.2, 0.3, 0.1, 0.1, 0.1])
        surface    = <src.controllers.smc.core.sliding_surface.LinearSlidingSurface object at 0x000001EF7D5FC920>
___________ TestModularSMCProperties.test_controller_scalability[2] ___________
tests\test_controllers\test_modular_smc.py:517: in test_controller_scalability
    control = controller.compute_control(state)
E   TypeError: ModularClassicalSMC.compute_control() missing 2 required positional arguments: 'state_vars' and 'history'
        config     = ClassicalSMCConfig(gains=[1.0, 1.0, 1.0, 1.0, 10.0, 0.5],
                   max_force=50.0,
                   boundary_layer=0.1,
                   dt=0.01,
                   boundary_layer_slope=0.0,
                   switch_method='tanh',
                   regularization_alpha=0.0001,
                   min_regularization=1e-10,
                   max_condition_number=100000000000000.0,
                   use_adaptive_regularization=True,
                   controllability_threshold=None,
                   dynamics_model=None)
        controller = <src.controllers.smc.algorithms.classical.controller.ModularClassicalSMC object at 0x000001EF7D5FFC80>
        dynamics   = <tests.test_controllers.test_modular_smc.MockDynamics object at 0x000001EF7D5FF650>
        n_dof      = 2
        self       = <tests.test_controllers.test_modular_smc.TestModularSMCProperties object at 0x000001EF7C7C3F20>
        state      = array([0.1, 0.1, 0.1, 0.1])
_______________________ test_smc_guardrails_and_smokes ________________________
tests\test_controllers\test_smc_guardrails_consolidated.py:23: in test_smc_guardrails_and_smokes
    with pytest.raises(factory.ConfigValueError):
E   Failed: DID NOT RAISE <class 'src.controllers.factory.legacy_factory.ConfigValueError'>
        CfgBadBL   = <class 'tests.test_controllers.test_smc_guardrails_consolidated.test_smc_guardrails_and_smokes.<locals>.CfgBadBL'>
        Dyn        = <class 'tests.test_controllers.test_smc_guardrails_consolidated.test_smc_guardrails_and_smokes.<locals>.Dyn'>
        FakeClassical = <class 'tests.test_controllers.test_smc_guardrails_consolidated.test_smc_guardrails_and_smokes.<locals>.FakeClassical'>
        monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x000001EF7D976DE0>
------------------------------ Captured log call ------------------------------
DEBUG    factory_module:factory.py:715 Could not create full config, using minimal config: Classical SMC requires exactly 6 gains: [k1, k2, lam1, lam2, K, kd]
INFO     factory_module:factory.py:838 Created classical_smc controller with gains: [20.0, 15.0, 12.0, 8.0, 35.0, 5.0]
============================== warnings summary ===============================
tests/test_controllers/factory/test_controller_factory.py::TestAdvancedFactoryIntegration::test_controller_performance_comparison
  D:\Projects\main\src\plant\core\state_validation.py:171: UserWarning: State vector was modified during sanitization
    warnings.warn("State vector was modified during sanitization", UserWarning)

tests/test_controllers/factory/test_interface_compatibility.py: 10 warnings
tests/test_controllers/smc/test_module_structure.py: 2 warnings
tests/test_controllers/test_modular_smc.py: 12 warnings
  D:\Projects\main\src\controllers\smc\algorithms\adaptive\config.py:83: UserWarning: Large adaptation rate may cause instability
    warnings.warn("Large adaptation rate may cause instability", UserWarning)

tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlComputation::test_compute_singular_matrix_returns_zero
  D:\Projects\main\src\plant\core\numerical_stability.py:208: RuntimeWarning: invalid value encountered in multiply
    regularized = matrix + reg_scale * np.eye(matrix.shape[0])

tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlComputation::test_compute_singular_matrix_returns_zero
  D:\Projects\main\src\plant\core\numerical_stability.py:212: UserWarning: Matrix conditioning remains poor after regularization (condition number: inf, sv_ratio: 0.00e+00, reg_scale: inf)
    warnings.warn(

tests/test_controllers/test_controller_basics.py::test_sta_smc_state_vars_signature
  D:\\Projects\\main\\src\\utils\\control\\saturation.py:69: RuntimeWarning: The 'linear' switching method implements a piecewise\u2011linear saturation, which approximates the sign function poorly near zero and can degrade chattering performance. Consider using 'tanh' for smoother control.\n    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=============================== tests coverage ================================
_______________ coverage: platform win32, python 3.12.6-final-0 _______________

Name                                                                  Stmts   Miss  Cover
-----------------------------------------------------------------------------------------
src\controllers\__init__.py                                              39     18    54%
src\controllers\adaptive_smc.py                                           2      0   100%
src\controllers\base\__init__.py                                          3      0   100%
src\controllers\base\control_primitives.py                               35      0   100%
src\controllers\base\controller_interface.py                             26      8    69%
src\controllers\classic_smc.py                                            2      0   100%
src\controllers\factory.py                                              515    268    48%
src\controllers\factory\__init__.py                                      60     15    75%
src\controllers\factory\core\__init__.py                                  5      0   100%
src\controllers\factory\core\protocols.py                                36      0   100%
src\controllers\factory\core\registry.py                                 76     42    45%
src\controllers\factory\core\threading.py                               138    100    28%
src\controllers\factory\core\validation.py                              214     32    85%
src\controllers\factory\deprecation.py                                   83     45    46%
src\controllers\factory\fallback_configs.py                              63      7    89%
src\controllers\factory\legacy_factory.py                               521    334    36%
src\controllers\factory\optimization.py                                 106    106     0%
src\controllers\factory\pso_integration.py                              181    181     0%
src\controllers\factory\smc_factory.py                                  203     51    75%
src\controllers\factory\thread_safety.py                                141    141     0%
src\controllers\mpc\__init__.py                                           2      0   100%
src\controllers\mpc\mpc_controller.py                                   241    112    54%
src\controllers\mpc_controller.py                                         2      0   100%
src\controllers\smc\__init__.py                                           7      0   100%
src\controllers\smc\adaptive_smc.py                                     126     46    63%
src\controllers\smc\algorithms\__init__.py                                5      0   100%
src\controllers\smc\algorithms\adaptive\__init__.py                       5      0   100%
src\controllers\smc\algorithms\adaptive\adaptation_law.py               108     51    53%
src\controllers\smc\algorithms\adaptive\config.py                       102     28    73%
src\controllers\smc\algorithms\adaptive\controller.py                   102     30    71%
src\controllers\smc\algorithms\adaptive\parameter_estimation.py         125     65    48%
src\controllers\smc\algorithms\classical\__init__.py                      5      0   100%
src\controllers\smc\algorithms\classical\boundary_layer.py              108     72    33%
src\controllers\smc\algorithms\classical\config.py                      106     23    78%
src\controllers\smc\algorithms\classical\controller.py                   63      8    87%
src\controllers\smc\algorithms\hybrid\__init__.py                         4      0   100%
src\controllers\smc\algorithms\hybrid\config.py                         178     64    64%
src\controllers\smc\algorithms\hybrid\controller.py                     227    114    50%
src\controllers\smc\algorithms\hybrid\switching_logic.py                221    178    19%
src\controllers\smc\algorithms\super_twisting\__init__.py                 4      0   100%
src\controllers\smc\algorithms\super_twisting\config.py                 110     41    63%
src\controllers\smc\algorithms\super_twisting\controller.py             136     65    52%
src\controllers\smc\algorithms\super_twisting\twisting_algorithm.py      86     35    59%
src\controllers\smc\classic_smc.py                                      152     48    68%
src\controllers\smc\core\__init__.py                                      5      0   100%
src\controllers\smc\core\equivalent_control.py                           99     34    66%
src\controllers\smc\core\gain_validation.py                             106     26    75%
src\controllers\smc\core\sliding_surface.py                              88      8    91%
src\controllers\smc\core\switching_functions.py                         104     10    90%
src\controllers\smc\hybrid_adaptive_sta_smc.py                          260    227    13%
src\controllers\smc\sta_smc.py                                          173     84    51%
src\controllers\specialized\__init__.py                                   2      0   100%
src\controllers\specialized\swing_up_smc.py                             105     11    90%
src\controllers\sta_smc.py                                                2      0   100%
src\controllers\swing_up_smc.py                                           2      0   100%
-----------------------------------------------------------------------------------------
TOTAL                                                                  5620   2728    51%
Coverage JSON written to file logs/pytest_run_20251001_192629/coverage/controllers_coverage.json
=========================== short test summary info ===========================
SKIPPED [1] tests\test_controllers\smc\algorithms\classical\test_modular_controller.py:199: Test only when imports fail
SKIPPED [1] tests\test_controllers\smc\classical\test_classical_smc.py:121: Source modules not yet implemented
SKIPPED [1] tests\test_controllers\smc\classical\test_classical_smc.py:130: Source modules not yet implemented
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_compute_control_equilibrium - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_compute_control_perturbed - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_compute_control_large_error - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_compute_control_history_tracking - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_control_continuity - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_adaptation_mechanism - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCMathematicalProperties::test_sliding_surface_linearity - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCMathematicalProperties::test_lyapunov_stability_requirements - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCMathematicalProperties::test_finite_time_convergence_property - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCMathematicalProperties::test_chattering_reduction - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCOutput::test_output_structure - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCOutput::test_output_additional_info - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
ERROR tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCOutput::test_output_consistency - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/mpc/test_mpc_consolidated.py::test_mpc_optional_dep_and_param_validation - ImportError: MPC controller missing optional dependency. Available controllers: ['classical_smc', 'sta_smc', 'adaptive_smc', 'hybrid_adaptive_sta_smc']
FAILED tests/test_controllers/mpc/test_mpc_controller.py::test_mpc_controller_instantiation_and_control - PendingDeprecationWarning: The default value of raise_error will change to True in the future.
FAILED tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlInitialization::test_initialization_default_parameters - AttributeError: 'EquivalentControl' object has no attribute 'regularization'
FAILED tests/test_controllers/smc/core/test_equivalent_control.py::TestEquivalentControlInitialization::test_initialization_custom_parameters - TypeError: EquivalentControl.__init__() got an unexpected keyword argument 'regularization'
FAILED tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validate_gains_classical_valid - AssertionError: assert 'errors' in {'valid': True, 'violations': [], 'controller_type': 'classical', 'gains_checked': 6, 'gains_provided': 6}
FAILED tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validate_gains_classical_invalid - KeyError: 'errors'
FAILED tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validate_gains_string_controller_type - assert False is True
FAILED tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_validate_gains_wrong_length - KeyError: 'errors'
FAILED tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_get_recommended_ranges_invalid_type - ValueError: 'invalid' is not a valid SMCControllerType
FAILED tests/test_controllers/smc/core/test_gain_validation.py::TestSMCGainValidator::test_update_bounds_invalid_controller - AssertionError: Regex pattern did not match.
 Regex: 'Unknown controller type'
 Input: "'invalid' is not a valid SMCControllerType"
FAILED tests/test_controllers/smc/core/test_gain_validation.py::TestErrorHandling::test_empty_gains_list - KeyError: 'errors'
FAILED tests/test_controllers/smc/core/test_switching_functions.py::TestSwitchingFunctionClass::test_tanh_switching_basic - assert 0.2334605977309656 < 1e-10
 +  where 0.2334605977309656 = abs((0.9950547536867305 - 0.7615941559557649))
FAILED tests/test_controllers/smc/core/test_switching_functions.py::TestConvenienceFunctions::test_tanh_switching_function - assert 0.2334605977309656 < 1e-10
 +  where 0.2334605977309656 = abs((0.9950547536867305 - 0.7615941559557649))
FAILED tests/test_controllers/smc/core/test_switching_functions.py::TestConvenienceFunctions::test_sign_switching_function - DeprecationWarning: sign_switching() is deprecated and causes severe chattering. Use tanh_switching(s, epsilon, slope=3.0) for smooth control.
FAILED tests/test_controllers/smc/core/test_switching_functions.py::TestConvenienceFunctions::test_sign_switching_ignores_epsilon - DeprecationWarning: sign_switching() is deprecated and causes severe chattering. Use tanh_switching(s, epsilon, slope=3.0) for smooth control.
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_basic_initialization - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_initialization_with_surface_gains - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_initialization_with_cart_gains - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'enable_cart_control'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_initialization_with_adaptation_params - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'adaptation_rate'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_initialization_with_boundary_params - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_initialization_with_surface_type - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_invalid_surface_gains - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'surface_gains'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_invalid_adaptation_gains - TypeError: HybridAdaptiveSTASMC.__init__() missing 7 required positional arguments: 'gains', 'dt', 'max_force', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCInitialization::test_boundary_layer_validation - TypeError: HybridAdaptiveSTASMC.__init__() missing 7 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', and 'gamma2'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_equivalent_control_toggle - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_cart_control_toggle - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'enable_cart_control'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCComputeControl::test_relative_vs_absolute_surface - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_zero_state - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_large_state - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_invalid_state_dimension - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_nan_state - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_inf_state - TypeError: HybridAdaptiveSTASMC.__init__() missing 8 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', 'gamma2', and 'dead_zone'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_extreme_adaptation_rates - TypeError: HybridAdaptiveSTASMC.__init__() got an unexpected keyword argument 'adaptation_rate'
FAILED tests/test_controllers/smc/test_hybrid_adaptive_sta_smc.py::TestHybridAdaptiveSTASMCEdgeCases::test_boundary_layer_edge_cases - TypeError: HybridAdaptiveSTASMC.__init__() missing 7 required positional arguments: 'gains', 'dt', 'max_force', 'k1_init', 'k2_init', 'gamma1', and 'gamma2'
FAILED tests/test_controllers/test_modular_smc.py::TestModularAdaptiveSMC::test_uncertainty_estimator - ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
FAILED tests/test_controllers/test_modular_smc.py::TestModularHybridSMC::test_switching_logic_initialization - AttributeError: 'HybridSwitchingLogic' object has no attribute 'thresholds'
FAILED tests/test_controllers/test_modular_smc.py::TestComponentIntegration::test_sliding_surface_integration - AttributeError: 'float' object has no attribute 'shape'
FAILED tests/test_controllers/test_modular_smc.py::TestModularSMCProperties::test_controller_scalability[2] - TypeError: ModularClassicalSMC.compute_control() missing 2 required positional arguments: 'state_vars' and 'history'
FAILED tests/test_controllers/test_smc_guardrails_consolidated.py::test_smc_guardrails_and_smokes - Failed: DID NOT RAISE <class 'src.controllers.factory.legacy_factory.ConfigValueError'>
===== 39 failed, 440 passed, 3 skipped, 28 warnings, 13 errors in 29.53s ======
