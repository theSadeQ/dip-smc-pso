{
  "metadata": {
    "total_claims": 20,
    "by_priority": {
      "HIGH": 20
    }
  },
  "research_queue": {
    "HIGH": [
      "CODE-IMPL-084",
      "CODE-IMPL-085",
      "CODE-IMPL-086",
      "CODE-IMPL-087",
      "CODE-IMPL-088",
      "CODE-IMPL-089",
      "CODE-IMPL-090",
      "CODE-IMPL-091",
      "CODE-IMPL-096",
      "CODE-IMPL-097",
      "CODE-IMPL-100",
      "CODE-IMPL-210",
      "CODE-IMPL-211",
      "CODE-IMPL-213",
      "CODE-IMPL-214",
      "CODE-IMPL-215",
      "CODE-IMPL-216",
      "CODE-IMPL-217",
      "CODE-IMPL-218",
      "CODE-IMPL-219"
    ],
    "CRITICAL": [],
    "MEDIUM": []
  },
  "claims": [
    {
      "id": "CODE-IMPL-084",
      "type": "implementation",
      "scope": "module",
      "claim_text": "implements the trial execution logic for running multiple\nindependent simulations of control systems",
      "algorithm_name": "the trial execution logic for running multiple\nindependent simulations",
      "source_attribution": "control systems",
      "file_path": "src\\benchmarks\\core\\trial_runner.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-085",
      "type": "implementation",
      "scope": "module:function:execute_single_trial",
      "claim_text": "use default from simulator",
      "algorithm_name": "default",
      "source_attribution": "simulator",
      "file_path": "src\\benchmarks\\core\\trial_runner.py",
      "line_number": 29,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-086",
      "type": "implementation",
      "scope": "module:function:run_multiple_trials",
      "claim_text": "Execute multiple independent simulation trials",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\benchmarks\\core\\trial_runner.py",
      "line_number": 105,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-087",
      "type": "implementation",
      "scope": "module:function:compute_basic_metrics",
      "claim_text": "Compute the basic metrics from original statistical_benchmarks",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\benchmarks\\metrics\\__init__.py",
      "line_number": 69,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-088",
      "type": "implementation",
      "scope": "module",
      "claim_text": "implements metrics that quantify constraint violations in\ncontrol systems",
      "algorithm_name": "metrics that quantify constraint violations",
      "source_attribution": "control systems",
      "file_path": "src\\benchmarks\\metrics\\constraint_metrics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-089",
      "type": "implementation",
      "scope": "module",
      "claim_text": "derived from classical control theory and provide quantitative measures\nof system performance",
      "algorithm_name": "classical control theory and provide quantitative measures",
      "source_attribution": "system performance",
      "file_path": "src\\benchmarks\\metrics\\control_metrics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-090",
      "type": "implementation",
      "scope": "module",
      "claim_text": "implements metrics that characterize the stability and\ntransient behavior of controlled systems",
      "algorithm_name": "metrics that characterize the stability and\ntransient behavior",
      "source_attribution": "controlled systems",
      "file_path": "src\\benchmarks\\metrics\\stability_metrics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-091",
      "type": "implementation",
      "scope": "module:function:compute_overshoot",
      "claim_text": "Compute maximum overshoot across specified state variables",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\benchmarks\\metrics\\stability_metrics.py",
      "line_number": 22,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-096",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Statistical analysis package for control system benchmarking",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\benchmarks\\statistics\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-097",
      "type": "implementation",
      "scope": "module",
      "claim_text": "implements statistical methods for analyzing performance metrics\ncollected from multiple simulation trials",
      "algorithm_name": "statistical methods for analyzing performance metrics\ncollected",
      "source_attribution": "multiple simulation trials",
      "file_path": "src\\benchmarks\\statistics\\confidence_intervals.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-100",
      "type": "implementation",
      "scope": "module:class:STASMCConfig",
      "claim_text": "Configuration for Super-Twisting Algorithm Sliding Mode Controller",
      "algorithm_name": "Sliding Mode Controller",
      "source_attribution": null,
      "file_path": "src\\config\\schemas.py",
      "line_number": 179,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-210",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Compatibility import module for vector simulation functionality",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\core\\vector_sim.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-211",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Compatibility import for fault detection system",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\fault_detection\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-213",
      "type": "implementation",
      "scope": "module:class:CompatibilityMatrix:function:_estimate_domain_test_coverage",
      "claim_text": "Estimate test coverage for a domain (simplified implementation)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\compatibility_matrix.py",
      "line_number": 315,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-214",
      "type": "implementation",
      "scope": "module:class:CompatibilityMatrix:function:_assess_production_readiness",
      "claim_text": "Assess overall production readiness based on compatibility analysis",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\compatibility_matrix.py",
      "line_number": 637,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-215",
      "type": "implementation",
      "scope": "module:class:CompatibilityMatrix:function:_get_production_recommendation",
      "claim_text": "Get production recommendation based on status",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\compatibility_matrix.py",
      "line_number": 662,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-216",
      "type": "implementation",
      "scope": "module:function:asdict",
      "claim_text": "Convert dataclass to dictionary (simplified implementation)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\compatibility_matrix.py",
      "line_number": 672,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-217",
      "type": "implementation",
      "scope": "module:class:ProductionReadinessScorer:function:_calculate_testing_score",
      "claim_text": "Calculate testing component score based on pytest results",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\production_readiness.py",
      "line_number": 328,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-218",
      "type": "implementation",
      "scope": "module:class:ProductionReadinessScorer:function:_determine_readiness_level",
      "claim_text": "Determine production readiness level based on score and gate status",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\production_readiness.py",
      "line_number": 542,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-219",
      "type": "implementation",
      "scope": "module:class:ProductionReadinessScorer:function:_analyze_improvement_trend",
      "claim_text": "Analyze improvement trend based on historical data",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\production_readiness.py",
      "line_number": 617,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    }
  ]
}