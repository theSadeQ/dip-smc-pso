{
  "metadata": {
    "total_claims": 68,
    "by_priority": {
      "HIGH": 68
    }
  },
  "research_queue": {
    "HIGH": [
      "CODE-IMPL-405",
      "CODE-IMPL-406",
      "CODE-IMPL-407",
      "CODE-IMPL-408",
      "CODE-IMPL-409",
      "CODE-IMPL-410",
      "CODE-IMPL-411",
      "CODE-IMPL-412",
      "CODE-IMPL-414",
      "CODE-IMPL-415",
      "CODE-IMPL-416",
      "CODE-IMPL-417",
      "CODE-IMPL-420",
      "CODE-IMPL-421",
      "CODE-IMPL-422",
      "CODE-IMPL-423",
      "CODE-IMPL-424",
      "CODE-IMPL-426",
      "CODE-IMPL-427",
      "CODE-IMPL-428",
      "CODE-IMPL-429",
      "CODE-IMPL-430",
      "CODE-IMPL-431",
      "CODE-IMPL-432",
      "CODE-IMPL-433",
      "CODE-IMPL-434",
      "CODE-IMPL-435",
      "CODE-IMPL-437",
      "CODE-IMPL-438",
      "CODE-IMPL-439",
      "CODE-IMPL-440",
      "CODE-IMPL-442",
      "CODE-IMPL-443",
      "CODE-IMPL-444",
      "CODE-IMPL-446",
      "CODE-IMPL-447",
      "CODE-IMPL-448",
      "CODE-IMPL-449",
      "CODE-IMPL-450",
      "CODE-IMPL-451",
      "CODE-IMPL-452",
      "CODE-IMPL-454",
      "CODE-IMPL-455",
      "CODE-IMPL-457",
      "CODE-IMPL-458",
      "CODE-IMPL-460",
      "CODE-IMPL-461",
      "CODE-IMPL-462",
      "CODE-IMPL-464",
      "CODE-IMPL-465",
      "CODE-IMPL-467",
      "CODE-IMPL-468",
      "CODE-IMPL-470",
      "CODE-IMPL-471",
      "CODE-IMPL-472",
      "CODE-IMPL-473",
      "CODE-IMPL-474",
      "CODE-IMPL-475",
      "CODE-IMPL-476",
      "CODE-IMPL-477",
      "CODE-IMPL-478",
      "CODE-IMPL-479",
      "CODE-IMPL-480",
      "CODE-IMPL-481",
      "CODE-IMPL-482",
      "CODE-IMPL-483",
      "CODE-IMPL-484",
      "CODE-IMPL-486"
    ],
    "CRITICAL": [],
    "MEDIUM": []
  },
  "claims": [
    {
      "id": "CODE-IMPL-405",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Professional simulation framework for control engineering applications",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-406",
      "type": "implementation",
      "scope": "module:class:SimulationContext",
      "claim_text": "Initializes and holds the context for a simulation run",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\context\\simulation_context.py",
      "line_number": 30,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-407",
      "type": "implementation",
      "scope": "module:class:SimulationContext:function:_initialize_dynamics_model",
      "claim_text": "Initialize the correct dynamics model based on the configuration",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\context\\simulation_context.py",
      "line_number": 44,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-408",
      "type": "implementation",
      "scope": "module:class:SimulationContext:function:create_controller",
      "claim_text": "use defaults from config",
      "algorithm_name": "defaults",
      "source_attribution": "config",
      "file_path": "src\\simulation\\context\\simulation_context.py",
      "line_number": 81,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-409",
      "type": "implementation",
      "scope": "module:class:Integrator",
      "claim_text": "Base interface for numerical integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\interfaces.py",
      "line_number": 40,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-410",
      "type": "implementation",
      "scope": "module:class:Integrator:function:order",
      "claim_text": "Integration method order",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\interfaces.py",
      "line_number": 74,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-411",
      "type": "implementation",
      "scope": "module:class:Orchestrator:function:execute",
      "claim_text": "Execute simulation with specified strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\interfaces.py",
      "line_number": 89,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-412",
      "type": "implementation",
      "scope": "module:class:SimulationStrategy:function:analyze",
      "claim_text": "Perform strategy-specific analysis",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\interfaces.py",
      "line_number": 122,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-414",
      "type": "implementation",
      "scope": "module:class:SimulationContext:function:create_controller",
      "claim_text": "Create a controller using the configuration",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\simulation_context.py",
      "line_number": 86,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-415",
      "type": "implementation",
      "scope": "module:class:TimeManager:function:advance_step",
      "claim_text": "Advance simulation by one time step",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\time_domain.py",
      "line_number": 72,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-416",
      "type": "implementation",
      "scope": "module:class:AdaptiveTimeStep:function:update_step_size",
      "claim_text": "Update time step based on error estimate",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\time_domain.py",
      "line_number": 242,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-417",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Simulation engines and numerical integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-420",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Simulation step router",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\simulation_runner.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-421",
      "type": "implementation",
      "scope": "module:function:get_step_fn",
      "claim_text": "Return the appropriate step function based on the configuration flag",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\simulation_runner.py",
      "line_number": 75,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-422",
      "type": "implementation",
      "scope": "module:function:step",
      "claim_text": "Unified simulation step entry point",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\simulation_runner.py",
      "line_number": 87,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-423",
      "type": "implementation",
      "scope": "module:function:run_simulation",
      "claim_text": "Simulate a single controller trajectory using an explicit Euler method",
      "algorithm_name": "that advances the",
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\simulation_runner.py",
      "line_number": 109,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-424",
      "type": "implementation",
      "scope": "module:class:SimulationRunner:function:__init__",
      "claim_text": "Initialize simulation runner",
      "algorithm_name": "dt",
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\simulation_runner.py",
      "line_number": 341,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-426",
      "type": "implementation",
      "scope": "module:function:simulate_system_batch",
      "claim_text": "Vectorised batch simulation of multiple controllers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\vector_sim.py",
      "line_number": 252,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-427",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Numerical integration methods for simulation framework",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-428",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive step-size integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-429",
      "type": "implementation",
      "scope": "module:class:ErrorController",
      "claim_text": "Basic error controller for adaptive step size methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\error_control.py",
      "line_number": 13,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-430",
      "type": "implementation",
      "scope": "module:class:ErrorController:function:update_step_size",
      "claim_text": "Update step size based on error estimate",
      "algorithm_name": "order for exponent",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\error_control.py",
      "line_number": 26,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-431",
      "type": "implementation",
      "scope": "module:class:PIController:function:update_step_size",
      "claim_text": "Update step size using PI control",
      "algorithm_name": "order\n\nReturns",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\error_control.py",
      "line_number": 97,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-432",
      "type": "implementation",
      "scope": "module:class:DeadBeatController:function:update_step_size",
      "claim_text": "Update step size using dead-beat control",
      "algorithm_name": "order\n\nReturns",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\error_control.py",
      "line_number": 175,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-433",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive Runge-Kutta integration methods with error control",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\runge_kutta.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-434",
      "type": "implementation",
      "scope": "module:class:AdaptiveRungeKutta",
      "claim_text": "Base class for adaptive Runge-Kutta methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\runge_kutta.py",
      "line_number": 16,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-435",
      "type": "implementation",
      "scope": "module:class:DormandPrince45",
      "claim_text": "Dormand-Prince 4(5) embedded Runge-Kutta method with adaptive step size",
      "algorithm_name": "with adaptive step",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\runge_kutta.py",
      "line_number": 99,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-437",
      "type": "implementation",
      "scope": "module:function:rk45_step",
      "claim_text": "Legacy Dormand-Prince 4(5) step function for backward compatibility",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\runge_kutta.py",
      "line_number": 177,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-438",
      "type": "implementation",
      "scope": "module:function:_original_rk45_step",
      "claim_text": "Original RK45 implementation for fallback",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\runge_kutta.py",
      "line_number": 228,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-439",
      "type": "implementation",
      "scope": "module:class:BaseIntegrator",
      "claim_text": "Base class for numerical integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\base.py",
      "line_number": 16,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-440",
      "type": "implementation",
      "scope": "module:class:BaseIntegrator:function:__init__",
      "claim_text": "Initialize base integrator",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\base.py",
      "line_number": 19,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-442",
      "type": "implementation",
      "scope": "module:class:BaseIntegrator:function:integrate_step",
      "claim_text": "Integrate dynamics forward by one time step (interface compatibility method)",
      "algorithm_name": "provides compatibility with",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\base.py",
      "line_number": 73,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-443",
      "type": "implementation",
      "scope": "module:class:IntegrationResult:function:__init__",
      "claim_text": "Initialize integration result",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\base.py",
      "line_number": 159,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-444",
      "type": "implementation",
      "scope": "module:class:LegacyDynamicsWrapper:function:__init__",
      "claim_text": "Initialize legacy wrapper",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\compatibility.py",
      "line_number": 102,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-446",
      "type": "implementation",
      "scope": "module:class:IntegratorSafetyWrapper:function:_safe_fallback_integrate",
      "claim_text": "Safely integrate using fallback method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\compatibility.py",
      "line_number": 267,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-447",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Discrete-time integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\discrete\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-448",
      "type": "implementation",
      "scope": "module:class:ZeroOrderHold:function:order",
      "claim_text": "Integration method order (exact for linear systems)",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\discrete\\zero_order_hold.py",
      "line_number": 41,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-449",
      "type": "implementation",
      "scope": "module:class:ZeroOrderHold:function:_integrate_nonlinear",
      "claim_text": "Integrate nonlinear system with ZOH control approximation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\discrete\\zero_order_hold.py",
      "line_number": 132,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-450",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Fixed step-size integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-451",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Euler integration methods (explicit and implicit)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-452",
      "type": "implementation",
      "scope": "module:class:ForwardEuler",
      "claim_text": "Forward (explicit) Euler integration method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 16,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-454",
      "type": "implementation",
      "scope": "module:class:ForwardEuler:function:integrate",
      "claim_text": "Integrate using forward Euler method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 29,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-455",
      "type": "implementation",
      "scope": "module:class:BackwardEuler",
      "claim_text": "Backward (implicit) Euler integration method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 66,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-457",
      "type": "implementation",
      "scope": "module:class:BackwardEuler:function:integrate",
      "claim_text": "Integrate using backward Euler method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 97,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-458",
      "type": "implementation",
      "scope": "module:class:ModifiedEuler",
      "claim_text": "Modified Euler method (Heun's method)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 154,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-460",
      "type": "implementation",
      "scope": "module:class:ModifiedEuler:function:integrate",
      "claim_text": "Integrate using modified Euler (Heun's) method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 167,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-461",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Fixed step-size Runge-Kutta integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-462",
      "type": "implementation",
      "scope": "module:class:RungeKutta2",
      "claim_text": "Second-order Runge-Kutta method (midpoint rule)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 15,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-464",
      "type": "implementation",
      "scope": "module:class:RungeKutta2:function:integrate",
      "claim_text": "Integrate using second-order Runge-Kutta (midpoint) method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 28,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-465",
      "type": "implementation",
      "scope": "module:class:RungeKutta4",
      "claim_text": "Fourth-order Runge-Kutta method (classic RK4)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 66,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-467",
      "type": "implementation",
      "scope": "module:class:RungeKutta4:function:integrate",
      "claim_text": "Integrate using fourth-order Runge-Kutta method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 79,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-468",
      "type": "implementation",
      "scope": "module:class:RungeKutta38",
      "claim_text": "Runge-Kutta 3/8 rule (alternative 4th-order method)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 119,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-470",
      "type": "implementation",
      "scope": "module:class:RungeKutta38:function:integrate",
      "claim_text": "Integrate using Runge-Kutta 3/8 rule",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 132,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-471",
      "type": "implementation",
      "scope": "module:class:ClassicalRungeKutta",
      "claim_text": "Alias for standard RK4 method for backward compatibility",
      "algorithm_name": "for backward compatibility",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 172,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-472",
      "type": "implementation",
      "scope": "module:class:BaseOrchestrator:function:_create_integrator",
      "claim_text": "Create appropriate integrator based on configuration",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\orchestrators\\base.py",
      "line_number": 49,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-473",
      "type": "implementation",
      "scope": "module:class:BaseOrchestrator:function:execute",
      "claim_text": "Execute simulation with orchestrator-specific strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\orchestrators\\base.py",
      "line_number": 102,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-474",
      "type": "implementation",
      "scope": "module:class:ParallelOrchestrator:function:_run_single_simulation",
      "claim_text": "Run a single simulation using sequential orchestrator",
      "algorithm_name": "creates a new",
      "source_attribution": null,
      "file_path": "src\\simulation\\orchestrators\\parallel.py",
      "line_number": 159,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-475",
      "type": "implementation",
      "scope": "module:class:HardwareInLoopOrchestrator:function:__init__",
      "claim_text": "Initialize HIL orchestrator",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\orchestrators\\real_time.py",
      "line_number": 240,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-476",
      "type": "implementation",
      "scope": "module:function:run_simulation",
      "claim_text": "Legacy simulation runner for backward compatibility",
      "algorithm_name": "dynamics_model",
      "source_attribution": null,
      "file_path": "src\\simulation\\orchestrators\\sequential.py",
      "line_number": 187,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-477",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Result container implementations for simulation data",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\results\\containers.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-478",
      "type": "implementation",
      "scope": "module:class:RecoveryStrategy:function:recover",
      "claim_text": "Implement recovery strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\safety\\recovery.py",
      "line_number": 18,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-479",
      "type": "implementation",
      "scope": "module:class:EmergencyStop",
      "claim_text": "Emergency stop recovery strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\safety\\recovery.py",
      "line_number": 38,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-480",
      "type": "implementation",
      "scope": "module:class:StateLimiter",
      "claim_text": "State limiting recovery strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\safety\\recovery.py",
      "line_number": 46,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-481",
      "type": "implementation",
      "scope": "module:class:SafetyRecovery:function:register_strategy",
      "claim_text": "Register recovery strategy for specific violation type",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\safety\\recovery.py",
      "line_number": 77,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-482",
      "type": "implementation",
      "scope": "module:class:SafetyRecovery:function:apply_recovery",
      "claim_text": "Apply appropriate recovery strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\safety\\recovery.py",
      "line_number": 81,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-483",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Simulation analysis strategies and paradigms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\strategies\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-484",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Monte Carlo simulation strategy for statistical analysis",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\strategies\\monte_carlo.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-486",
      "type": "implementation",
      "scope": "module:class:MonteCarloStrategy:function:__init__",
      "claim_text": "Initialize Monte Carlo strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\strategies\\monte_carlo.py",
      "line_number": 19,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    }
  ]
}