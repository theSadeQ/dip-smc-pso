name: Commit Message Lint

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  commit-lint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for commit analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install commitlint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Validate commit messages
        id: commitlint
        run: |
          # Get commits to check
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, check commits between base and HEAD
            COMMITS=$(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          else
            # For pushes, check the last commit
            COMMITS="${{ github.sha }}"
          fi

          # Validate each commit
          FAILED=0
          FAILED_COMMITS=""

          for commit in $COMMITS; do
            MSG=$(git log --format=%B -n 1 $commit)
            echo "Checking commit: $commit"
            echo "$MSG" | commitlint || {
              FAILED=$((FAILED + 1))
              FAILED_COMMITS="$FAILED_COMMITS\n- $commit: $(git log --format=%s -n 1 $commit)"
            }
          done

          # Save results
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "failed_commits<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FAILED_COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ $FAILED -gt 0 ]; then
            exit 1
          fi

      - name: Generate commit lint summary
        if: always()
        run: |
          echo "## üìù Commit Message Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.commitlint.outputs.failed }}" == "0" ]; then
            echo "‚úÖ All commit messages follow conventional commits format" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå ${{ steps.commitlint.outputs.failed }} commit(s) failed validation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Failed Commits" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.commitlint.outputs.failed_commits }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Conventional Commits Format" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "type(scope): subject" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "body (optional)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "footer (optional)" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Valid types:** feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Examples:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`feat(controllers): add terminal sliding mode controller\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`fix(pso): resolve convergence issue in high-dimensional spaces\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`docs(api): update optimization module reference\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.commitlint.outputs.failed != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const failedCount = ${{ steps.commitlint.outputs.failed }};
            const failedCommits = `${{ steps.commitlint.outputs.failed_commits }}`;

            const body = `## ‚ùå Commit Message Validation Failed

${failedCount} commit(s) do not follow conventional commits format:

${failedCommits}

### How to Fix

Rewrite commit messages to follow conventional commits format:

\`\`\`
type(scope): subject

body (optional)

footer (optional)
\`\`\`

**Valid types:** feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert

**Examples:**
- \`feat(controllers): add terminal sliding mode controller\`
- \`fix(pso): resolve convergence issue in high-dimensional spaces\`
- \`docs(api): update optimization module reference\`

### Rewrite Commits (if needed)

\`\`\`bash
# Interactive rebase to edit commit messages
git rebase -i HEAD~${failedCount}

# Or amend the last commit
git commit --amend
\`\`\`

See [Conventional Commits](https://www.conventionalcommits.org/) for full specification.
`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  commit-lint-report:
    name: Generate Commit Lint Report
    runs-on: ubuntu-latest
    needs: commit-lint
    if: always()
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Generate commit statistics
        run: |
          mkdir -p .test_artifacts/commit_lint

          # Analyze commit types
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            COMMITS=$(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          else
            # Last 20 commits
            COMMITS=$(git rev-list HEAD~20..HEAD)
          fi

          # Count commit types
          python -c "
import subprocess
import json
from collections import Counter

commits = '''$COMMITS'''.strip().split('\n')
types = []

for commit in commits:
    if not commit:
        continue
    msg = subprocess.check_output(['git', 'log', '--format=%s', '-n', '1', commit], text=True).strip()
    # Extract type from conventional commit
    if ':' in msg:
        type_part = msg.split(':')[0]
        if '(' in type_part:
            commit_type = type_part.split('(')[0]
        else:
            commit_type = type_part
        types.append(commit_type)

counter = Counter(types)
stats = {
    'total_commits': len(commits),
    'typed_commits': len(types),
    'type_distribution': dict(counter),
    'coverage': len(types) / len(commits) * 100 if commits else 0
}

with open('.test_artifacts/commit_lint/statistics.json', 'w') as f:
    json.dump(stats, f, indent=2)

print(f'Commit type coverage: {stats[\"coverage\"]:.1f}%')
"

      - name: Upload commit lint report
        uses: actions/upload-artifact@v4
        with:
          name: commit-lint-report
          path: .test_artifacts/commit_lint/
          retention-days: 30
