name: Release & Changelog

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install git-cliff
        run: |
          curl -L https://github.com/orhun/git-cliff/releases/latest/download/git-cliff-linux-amd64.tar.gz | tar -xz
          sudo mv git-cliff /usr/local/bin/
          git-cliff --version

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        run: |
          # Generate full changelog
          git-cliff --output CHANGELOG.md

          # Generate changelog for this release only
          git-cliff --latest --strip header --output RELEASE_NOTES.md

      - name: Display changelog excerpt
        run: |
          echo "## 📝 Changelog Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Notes Preview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -20 RELEASE_NOTES.md >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Commit updated changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add CHANGELOG.md
          git commit -m "chore: update changelog for ${{ steps.version.outputs.version }}" || echo "No changes to commit"

          # Push to main
          git push origin HEAD:main || echo "Nothing to push"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            CHANGELOG.md
            RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload changelog artifacts
        uses: actions/upload-artifact@v4
        with:
          name: changelog-${{ steps.version.outputs.version }}
          path: |
            CHANGELOG.md
            RELEASE_NOTES.md
          retention-days: 90

  update-documentation:
    name: Update Documentation Version
    runs-on: ubuntu-latest
    needs: generate-changelog
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          # Remove 'v' prefix
          VERSION_NUM="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_num=$VERSION_NUM" >> $GITHUB_OUTPUT

      - name: Update version in conf.py
        run: |
          sed -i "s/release = .*/release = '${{ steps.version.outputs.version_num }}'/" docs/conf.py
          sed -i "s/version = .*/version = '${{ steps.version.outputs.version_num }}'/" docs/conf.py

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add docs/conf.py
          git commit -m "chore: bump documentation version to ${{ steps.version.outputs.version }}" || echo "No changes"

          git push origin HEAD:main || echo "Nothing to push"

      - name: Trigger ReadTheDocs build
        run: |
          echo "## 📚 Documentation Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ReadTheDocs will automatically build version ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Documentation will be available at:" >> $GITHUB_STEP_SUMMARY
          echo "- https://dip-smc-pso.readthedocs.io/en/${{ steps.version.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
