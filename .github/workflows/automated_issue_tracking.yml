name: Automated Issue Tracking & Problem Detection

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily health checks at 06:00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      issue_mode:
        description: 'Issue creation mode'
        required: false
        default: 'auto'
        type: choice
        options:
          - 'auto'
          - 'disabled'
          - 'force'
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'controllers'
          - 'optimization'
          - 'integration'
          - 'benchmarks'

env:
  PYTHONPATH: ./DIP_SMC_PSO
  ISSUE_TRACKING_ENABLED: ${{ github.event.inputs.issue_mode != 'disabled' }}

jobs:
  simulation-health-check:
    name: Simulation Health Check & Issue Detection
    runs-on: ubuntu-latest
    if: always()

    strategy:
      fail-fast: false
      matrix:
        controller: [classical_smc, sta_smc, adaptive_smc, hybrid_adaptive_sta_smc]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd DIP_SMC_PSO
        pip install -r requirements.txt

    - name: Configure Git for issue creation
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Run simulation with issue tracking
      id: simulation
      run: |
        cd DIP_SMC_PSO
        echo "Running simulation for controller: ${{ matrix.controller }}"

        # Run simulation with monitoring
        python ../.github/scripts/integration/simulate_with_issue_tracking.py \
          --ctrl ${{ matrix.controller }} \
          --config config.yaml \
          ${{ github.event.inputs.issue_mode == 'disabled' && '--no-issue-tracking' || '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Upload simulation artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: simulation-results-${{ matrix.controller }}
        path: |
          DIP_SMC_PSO/.reports/
          DIP_SMC_PSO/.logs/
        retention-days: 7

  test-health-check:
    name: Test Health Check & Issue Detection
    runs-on: ubuntu-latest
    if: always()

    strategy:
      fail-fast: false
      matrix:
        test-suite:
          - { name: 'controllers', path: 'tests/test_controllers/', critical: true }
          - { name: 'optimization', path: 'tests/test_optimization/', critical: true }
          - { name: 'core', path: 'tests/test_core/', critical: true }
          - { name: 'integration', path: 'tests/test_integration/', critical: false }
          - { name: 'benchmarks', path: 'tests/test_benchmarks/', critical: false }

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd DIP_SMC_PSO
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-json-report pytest-benchmark

    - name: Run tests with issue tracking
      id: testing
      run: |
        cd DIP_SMC_PSO
        echo "Running test suite: ${{ matrix.test-suite.name }}"

        # Skip if test scope doesn't match
        if [[ "${{ github.event.inputs.test_scope }}" != "all" && "${{ github.event.inputs.test_scope }}" != "${{ matrix.test-suite.name }}" ]]; then
          echo "Skipping ${{ matrix.test-suite.name }} (scope: ${{ github.event.inputs.test_scope }})"
          exit 0
        fi

        # Run tests with monitoring
        python ../.github/scripts/integration/test_with_issue_tracking.py \
          ${{ matrix.test-suite.path }} \
          -v \
          --tb=short \
          --cov=src \
          --cov-report=term \
          --cov-report=xml \
          --json-report \
          --json-report-file=.reports/test_results_${{ matrix.test-suite.name }}.json \
          ${{ github.event.inputs.issue_mode == 'disabled' && '--no-issue-tracking' || '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-suite.name }}
        path: |
          DIP_SMC_PSO/.reports/
          DIP_SMC_PSO/coverage.xml
        retention-days: 7

    - name: Create critical failure issue
      if: failure() && matrix.test-suite.critical == true && github.event.inputs.issue_mode != 'disabled'
      uses: actions/github-script@v6
      with:
        script: |
          const title = `Critical test suite failure: ${{ matrix.test-suite.name }}`;
          const body = `
          🚨 **Critical Test Suite Failure Detected**

          **Test Suite**: \`${{ matrix.test-suite.name }}\`
          **Path**: \`${{ matrix.test-suite.path }}\`
          **Workflow**: [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})
          **Commit**: ${context.sha}

          This is an automated issue created because a critical test suite failed during CI execution.

          **Immediate Actions Required:**
          1. Review the workflow logs for specific test failures
          2. Determine if this is a regression or environmental issue
          3. Fix critical issues within 4 hours (SLA requirement)

          **Reproduction Steps:**
          \`\`\`bash
          cd DIP_SMC_PSO
          pytest ${{ matrix.test-suite.path }} -v
          \`\`\`

          🤖 This issue was automatically created by [GitHub Actions](${context.payload.repository.html_url}/actions/runs/${context.runId})
          `;

          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['critical', 'testing', 'ci-failure', 'automated']
          });

  benchmark-regression-check:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need history for regression comparison
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd DIP_SMC_PSO
        pip install -r requirements.txt
        pip install pytest pytest-benchmark

    - name: Run benchmark tests
      id: benchmark
      run: |
        cd DIP_SMC_PSO
        echo "Running performance benchmarks..."

        python ../.github/scripts/integration/test_with_issue_tracking.py \
          tests/test_benchmarks/ \
          --benchmark-only \
          --benchmark-json=.reports/benchmark_results.json \
          ${{ github.event.inputs.issue_mode == 'disabled' && '--no-issue-tracking' || '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: |
          DIP_SMC_PSO/.reports/benchmark_results.json
        retention-days: 30

  pso-optimization-check:
    name: PSO Optimization Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_scope == 'optimization'

    strategy:
      fail-fast: false
      matrix:
        controller: [classical_smc, adaptive_smc]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd DIP_SMC_PSO
        pip install -r requirements.txt

    - name: Run PSO optimization with monitoring
      id: pso
      run: |
        cd DIP_SMC_PSO
        echo "Running PSO optimization for controller: ${{ matrix.controller }}"

        python ../.github/scripts/integration/simulate_with_issue_tracking.py \
          --ctrl ${{ matrix.controller }} \
          --run-pso \
          --seed 42 \
          --config config.yaml \
          ${{ github.event.inputs.issue_mode == 'disabled' && '--no-issue-tracking' || '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      timeout-minutes: 30
      continue-on-error: true

    - name: Upload PSO results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pso-results-${{ matrix.controller }}
        path: |
          DIP_SMC_PSO/.reports/
          DIP_SMC_PSO/pso_*.json
        retention-days: 7

  issue-summary:
    name: Issue Creation Summary
    runs-on: ubuntu-latest
    needs: [simulation-health-check, test-health-check, benchmark-regression-check, pso-optimization-check]
    if: always() && github.event.inputs.issue_mode != 'disabled'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate issue summary
      uses: actions/github-script@v6
      with:
        script: |
          const jobs = [
            { name: 'simulation-health-check', result: '${{ needs.simulation-health-check.result }}' },
            { name: 'test-health-check', result: '${{ needs.test-health-check.result }}' },
            { name: 'benchmark-regression-check', result: '${{ needs.benchmark-regression-check.result }}' },
            { name: 'pso-optimization-check', result: '${{ needs.pso-optimization-check.result }}' }
          ];

          const failed_jobs = jobs.filter(job => job.result === 'failure');
          const successful_jobs = jobs.filter(job => job.result === 'success');

          if (failed_jobs.length > 0) {
            const title = `Automated Health Check Summary - ${failed_jobs.length} jobs failed`;
            const body = `
            ## 🔍 Automated Health Check Summary

            **Workflow**: [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            **Trigger**: ${context.eventName}
            **Commit**: ${context.sha}

            ### ❌ Failed Jobs (${failed_jobs.length})
            ${failed_jobs.map(job => `- ${job.name}`).join('\n')}

            ### ✅ Successful Jobs (${successful_jobs.length})
            ${successful_jobs.map(job => `- ${job.name}`).join('\n')}

            **Next Steps:**
            1. Review individual job logs for specific failures
            2. Check if automated issues were created for specific problems
            3. Investigate patterns in failures across multiple jobs

            🤖 This summary was automatically generated by [GitHub Actions](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;

            // Only create summary issue if multiple jobs failed
            if (failed_jobs.length >= 2) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['health-check', 'automated', 'summary']
              });
            }
          }

  cleanup:
    name: Cleanup and Maintenance
    runs-on: ubuntu-latest
    needs: [simulation-health-check, test-health-check, benchmark-regression-check, pso-optimization-check]
    if: always() && github.event_name == 'schedule'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Close resolved automated issues
      uses: actions/github-script@v6
      with:
        script: |
          // Get all open automated issues
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'automated'
          });

          // Close issues that haven't been updated in 7 days and have no recent activity
          const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

          for (const issue of issues.data) {
            const updatedAt = new Date(issue.updated_at);
            if (updatedAt < weekAgo && issue.comments === 0) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '🤖 Auto-closing this automated issue due to inactivity. If the problem persists, a new issue will be created.'
              });
            }
          }