Search.setIndex({"alltitles": {"": [[291, "id2"]], ")": [[291, "id1"]], "**Expected Output:**\nRunning PSO optimization with real-time convergence monitoring\u2026": [[53, "expected-output-running-pso-optimization-with-real-time-convergence-monitoring"]], "- Controller adapts on [t\u2080, t\u2081]": [[310, "controller-adapts-on-t0-t1"]], "- Convergence rate decreases as kappa increases": [[291, "convergence-rate-decreases-as-kappa-increases"]], "- Different simulation durations": [[280, "different-simulation-durations"]], "- Ill-conditioned (kappa=10000): rate ~ 0.001-0.01": [[291, "ill-conditioned-kappa-10000-rate-0-001-0-01"]], "- Multiple initial conditions": [[280, "multiple-initial-conditions"]], "- Parameter uncertainty scenarios result = pso_factory.optimize_controller() if result[\u2018success\u2019]: # Analyze robustness metrics validation = result[\u2018validation_results\u2019] print(f\u201dRobustness Analysis:\u201d) print(f\u201d All scenarios passed: {validation[\u2018performance_acceptable\u2019]}\u201d) print(f\u201d Controller stability: {validation[\u2018controller_stable\u2019]}\u201d)": [[280, "parameter-uncertainty-scenarios-result-pso-factory-optimize-controller-if-result-success-analyze-robustness-metrics-validation-result-validation-results-print-f-robustness-analysis-print-f-all-scenarios-passed-validation-performance-acceptable-print-f-controller-stability-validation-controller-stable"]], "- Performance evaluated on [t\u2081+gap, t\u2082]": [[310, "performance-evaluated-on-t1-gap-t2"]], "- Varying disturbance levels": [[280, "varying-disturbance-levels"]], "- Well-conditioned (kappa=1): rate ~ 0.1-0.2": [[291, "well-conditioned-kappa-1-rate-0-1-0-2"]], ".github/workflows/controller-validation.yml": [[300, "github-workflows-controller-validation-yml"]], ".pre-commit-config.yaml": [[282, "pre-commit-config-yaml"], [300, "pre-commit-config-yaml"]], "1 Problem Statement & Objectives": [[223, null]], "1.": [[143, "id1"], [143, "id6"], [144, "id1"], [144, "id37"]], "1. Basic Usage": [[77, "basic-usage"], [84, "basic-usage"], [85, "basic-usage"]], "1. Benchmark Results": [[77, "benchmark-results"], [85, "benchmark-results"]], "1. Choose Appropriate Swarm Size": [[133, "choose-appropriate-swarm-size"]], "1. Choose the Right Orchestrator": [[203, "choose-the-right-orchestrator"]], "1. Choosing the Right Dynamics Model": [[135, "choosing-the-right-dynamics-model"]], "1. Classical PSO Mathematical Formulation ### 1.1 Fundamental Algorithm Definition Problem Statement:": [[246, "classical-pso-mathematical-formulation-1-1-fundamental-algorithm-definition-problem-statement"]], "1. Classical SMC": [[132, "classical-smc"]], "1. Code Coverage Targets": [[245, "code-coverage-targets"]], "1. Common Issues": [[77, "common-issues"], [85, "common-issues"]], "1. Common Issues and Solutions": [[84, "common-issues-and-solutions"]], "1. Computational Performance": [[84, "computational-performance"]], "1. Configuration": [[185, "configuration"]], "1. Configuration Issues": [[34, "configuration-issues"]], "1. Configuration Versioning": [[131, "configuration-versioning"]], "1. Core Algorithm (Numba-Accelerated)": [[85, "core-algorithm-numba-accelerated"]], "1. Core Algorithm Implementation": [[77, "core-algorithm-implementation"]], "1. Core Interface Contracts ### 1.1 Controller Factory Interface Function Signature:": [[76, "core-interface-contracts-1-1-controller-factory-interface-function-signature"]], "1. Core Parameters": [[84, "core-parameters"]], "1. Critical Component Coverage (100% MANDATORY)": [[245, "critical-component-coverage-100-mandatory"]], "1. Dependencies & Configuration": [[29, "dependencies-configuration"]], "1. Diagnostic Framework ### 1.1 PSO System Health Check System Status Assessment:": [[254, "diagnostic-framework-1-1-pso-system-health-check-system-status-assessment"]], "1. Directory Structure & Organization Analysis ### \u2705 good: Enterprise Directory Architecture Current State: The repository follows a sophisticated hierarchical organization pattern that exceeds enterprise standards: ```": [[71, "directory-structure-organization-analysis-good-enterprise-directory-architecture-current-state-the-repository-follows-a-sophisticated-hierarchical-organization-pattern-that-exceeds-enterprise-standards"]], "1. Documentation Structure Analysis ### 1.1 PSO Documentation Ecosystem Dedicated PSO Documentation Files (14 total): #### Core Documentation:": [[19, "documentation-structure-analysis-1-1-pso-documentation-ecosystem-dedicated-pso-documentation-files-14-total-core-documentation"]], "1. Dynamics Model Selection": [[265, "dynamics-model-selection"]], "1. Executive Summary": [[197, "executive-summary"]], "1. Explicitly provided gains parameter": [[80, "explicitly-provided-gains-parameter"]], "1. Factory Architecture Analysis ### 1.1 Core Factory Implementation (src/controllers/factory.py) Strengths:": [[38, "factory-architecture-analysis-1-1-core-factory-implementation-src-controllers-factory-py-strengths"]], "1. Full Notebook Embedding": [[154, "full-notebook-embedding"]], "1. Full Source Code Structure": [[84, "full-source-code-structure"]], "1. High-Level System Architecture ### 1.1 Architectural Overview ```": [[250, "high-level-system-architecture-1-1-architectural-overview"]], "1. Integration Methods for DIP Dynamics": [[290, "integration-methods-for-dip-dynamics"]], "1. Introduction ### 1.1 Overview AST-based code claim extraction provides scope-aware parsing of Python source files to identify implementation claims, theoretical references, and citations embedded in docstrings. Unlike regex-based approaches that operate on raw text, AST traversal uses Python\u2019s abstract syntax tree to maintain hierarchical context and avoid common pitfalls like: - Misattributed scopes (class-level vs method-level claims)": [[297, "introduction-1-1-overview-ast-based-code-claim-extraction-provides-scope-aware-parsing-of-python-source-files-to-identify-implementation-claims-theoretical-references-and-citations-embedded-in-docstrings-unlike-regex-based-approaches-that-operate-on-raw-text-ast-traversal-uses-python-s-abstract-syntax-tree-to-maintain-hierarchical-context-and-avoid-common-pitfalls-like-misattributed-scopes-class-level-vs-method-level-claims"]], "1. Introduction and Fundamentals ### 1.1 Overview The double-inverted pendulum (DIP) is a canonical benchmark for nonlinear, underactuated control systems. With two pendula attached in series to a horizontally moving cart, the system has fewer actuators than degrees of freedom, making it both underactuated and strongly nonlinear. Conventional linear controllers struggle with large deflections, parameter variations, and model uncertainty. Sliding Mode Control (SMC) addresses these challenges by forcing the system state onto a pre-defined sliding manifold. When the state reaches this manifold, the resulting closed-loop dynamics become insensitive to matched disturbances and uncertainties. The control law compensates modeling errors through the control input channel, causing the plant to behave according to the reduced-order dynamics on the manifold. This robustness and finite-time convergence (for higher-order SMC) make SMC attractive for underactuated systems. However, the discontinuous switching law of classical SMC induces chattering, a high-frequency oscillation caused by rapid control switching when the state crosses the sliding surface. Chattering increases control effort, excites unmodeled high-frequency modes, and can cause wear in actuators. Introducing a boundary layer around the sliding surface alleviates chattering but enlarges the tracking error. This document presents the unified mathematical theory for four SMC variants implemented in this project:": [[205, "introduction-and-fundamentals-1-1-overview-the-double-inverted-pendulum-dip-is-a-canonical-benchmark-for-nonlinear-underactuated-control-systems-with-two-pendula-attached-in-series-to-a-horizontally-moving-cart-the-system-has-fewer-actuators-than-degrees-of-freedom-making-it-both-underactuated-and-strongly-nonlinear-conventional-linear-controllers-struggle-with-large-deflections-parameter-variations-and-model-uncertainty-sliding-mode-control-smc-addresses-these-challenges-by-forcing-the-system-state-onto-a-pre-defined-sliding-manifold-when-the-state-reaches-this-manifold-the-resulting-closed-loop-dynamics-become-insensitive-to-matched-disturbances-and-uncertainties-the-control-law-compensates-modeling-errors-through-the-control-input-channel-causing-the-plant-to-behave-according-to-the-reduced-order-dynamics-on-the-manifold-this-robustness-and-finite-time-convergence-for-higher-order-smc-make-smc-attractive-for-underactuated-systems-however-the-discontinuous-switching-law-of-classical-smc-induces-chattering-a-high-frequency-oscillation-caused-by-rapid-control-switching-when-the-state-crosses-the-sliding-surface-chattering-increases-control-effort-excites-unmodeled-high-frequency-modes-and-can-cause-wear-in-actuators-introducing-a-boundary-layer-around-the-sliding-surface-alleviates-chattering-but-enlarges-the-tracking-error-this-document-presents-the-unified-mathematical-theory-for-four-smc-variants-implemented-in-this-project"]], "1. Live Python Demo Page": [[27, "live-python-demo-page"]], "1. MPC Controller Workflow": [[84, "mpc-controller-workflow"]], "1. Mathematical Foundation": [[204, "mathematical-foundation"]], "1. Mathematical Motivation": [[195, "mathematical-motivation"]], "1. Model Predictive Control Theory": [[84, "model-predictive-control-theory"]], "1. Modular Controller Structure": [[77, "modular-controller-structure"], [85, "modular-controller-structure"]], "1. Monte Carlo Simulation Methodology ### 1.1 Overview Monte Carlo simulation propagates uncertainty through control system models to quantify performance variability and validate stability claims under realistic conditions. Implementation: src/analysis/validation/monte_carlo.py (1,007 lines) ### 1.2 Sampling Strategies #### 1.2.1 Random Sampling (Baseline) Description: Standard pseudorandom sampling from specified distributions. Use Cases:": [[310, "monte-carlo-simulation-methodology-1-1-overview-monte-carlo-simulation-propagates-uncertainty-through-control-system-models-to-quantify-performance-variability-and-validate-stability-claims-under-realistic-conditions-implementation-src-analysis-validation-monte-carlo-py-1-007-lines-1-2-sampling-strategies-1-2-1-random-sampling-baseline-description-standard-pseudorandom-sampling-from-specified-distributions-use-cases"]], "1. Numba JIT Compilation": [[216, "numba-jit-compilation"]], "1. Overview ### 1.1 Phase 1 Objectives Goal: Extract 500+ claims from codebase to create research queue for Phase 2 automated citation validation. Two-Pronged Extraction Strategy: 1. Formal Claims (from documentation) - Source: docs/ directory (259 markdown files) - Targets: Theorems, lemmas, propositions, corollaries - Tool: .dev_tools/claim_extraction/formal_extractor.py - Expected Output: 40-50 formal mathematical claims 2. Code Claims (from implementation) - Source: src/ directory (165 Python files) - Targets: \u201cImplements X from Y\u201d patterns in docstrings - Tool: .dev_tools/claim_extraction/code_extractor.py - Expected Output: 150-250 implementation claims ### 1.2 Tool Architecture ```": [[298, "overview-1-1-phase-1-objectives-goal-extract-500-claims-from-codebase-to-create-research-queue-for-phase-2-automated-citation-validation-two-pronged-extraction-strategy-1-formal-claims-from-documentation-source-docs-directory-259-markdown-files-targets-theorems-lemmas-propositions-corollaries-tool-dev-tools-claim-extraction-formal-extractor-py-expected-output-40-50-formal-mathematical-claims-2-code-claims-from-implementation-source-src-directory-165-python-files-targets-implements-x-from-y-patterns-in-docstrings-tool-dev-tools-claim-extraction-code-extractor-py-expected-output-150-250-implementation-claims-1-2-tool-architecture"]], "1. Overview ### 1.1 Purpose Control primitives provide foundational utilities for implementing robust sliding mode controllers: - Saturation Functions: Continuous approximations of sign function for chattering reduction": [[79, "overview-1-1-purpose-control-primitives-provide-foundational-utilities-for-implementing-robust-sliding-mode-controllers-saturation-functions-continuous-approximations-of-sign-function-for-chattering-reduction"]], "1. Overview ### 1.1 Purpose The Factory System provides a unified, type-safe interface for instantiating SMC controllers with: - PSO parameter tuning - Array-based parameter injection": [[80, "overview-1-1-purpose-the-factory-system-provides-a-unified-type-safe-interface-for-instantiating-smc-controllers-with-pso-parameter-tuning-array-based-parameter-injection"]], "1. Overview & Architecture ### 1.1 Introduction The Simulation Engine is the core execution framework for the Double-Inverted Pendulum control system. It provides: - Flexible simulation execution strategies (sequential, batch, parallel, real-time)": [[61, "overview-architecture-1-1-introduction-the-simulation-engine-is-the-core-execution-framework-for-the-double-inverted-pendulum-control-system-it-provides-flexible-simulation-execution-strategies-sequential-batch-parallel-real-time"]], "1. Overview & Architecture ### 1.1 Optimization System Architecture The optimization system consists of four primary modules working in concert to tune sliding mode controller (SMC) parameters: ```": [[53, "overview-architecture-1-1-optimization-system-architecture-the-optimization-system-consists-of-four-primary-modules-working-in-concert-to-tune-sliding-mode-controller-smc-parameters"]], "1. PSO Swarm Dynamics Equations ### 1.1 Position and Velocity Update Laws The canonical PSO algorithm governs particle motion in a D-dimensional search space through coupled difference equations. Definition 1.1 (Particle State): Each particle i \\in \\{1, \\ldots, N\\} at iteration t is characterized by: $\\mathbf{x}_i^t \\in \\mathbb{R}^D \\quad \\text{(position vector)}$": [[291, "pso-swarm-dynamics-equations-1-1-position-and-velocity-update-laws-the-canonical-pso-algorithm-governs-particle-motion-in-a-d-dimensional-search-space-through-coupled-difference-equations-definition-1-1-particle-state-each-particle-i-in-1-ldots-n-at-iteration-t-is-characterized-by-mathbf-x-i-t-in-mathbb-r-d-quad-text-position-vector"]], "1. PSO-Controller Factory Interface Contracts ### 1.1 Controller Factory Function Signature ```python": [[251, "pso-controller-factory-interface-contracts-1-1-controller-factory-function-signature-python"]], "1. Phase Portrait Visualization": [[156, "phase-portrait-visualization"]], "1. Plotly Sphinx Extension (471 lines)": [[28, "plotly-sphinx-extension-471-lines"]], "1. Port Already in Use": [[91, "port-already-in-use"]], "1. Primary Parameters (5 Gains)": [[77, "primary-parameters-5-gains"]], "1. Primary Parameters (6 Gains)": [[85, "primary-parameters-6-gains"]], "1. Pygments Lexer Errors (3 fixed)": [[26, "pygments-lexer-errors-3-fixed"]], "1. Quick Start Guide ### 1.1 Basic PSO Optimization (5 Minutes) Objective: Optimize Classical SMC gains using default PSO settings. Step 1: Navigate to Project Directory": [[253, "quick-start-guide-1-1-basic-pso-optimization-5-minutes-objective-optimize-classical-smc-gains-using-default-pso-settings-step-1-navigate-to-project-directory"]], "1. Receding Horizon Control Principle": [[84, "receding-horizon-control-principle"]], "1. Run all tests (basic command)": [[323, "run-all-tests-basic-command"]], "1. Safety-Critical Functions (TARGET: 100%)": [[37, "safety-critical-functions-target-100"]], "1. Schema Architecture and Design Principles ### 1.1 Configuration Hierarchy ```yaml": [[247, "schema-architecture-and-design-principles-1-1-configuration-hierarchy-yaml"]], "1. Service Worker - docs/_static/sw.js": [[31, "service-worker-docs-static-sw-js"]], "1. Sliding Mode Control Theory ### 1.1 Sliding Surface Stability (FORMAL-THEOREM-016) Claim: \u201cIf all sliding surface parameters c_i > 0, then the sliding surface dynamics are exponentially stable with convergence rates determined by c_i.\u201d Location: docs/theory/smc_theory_complete.md:71 Foundational References: 1. Utkin, V. I. (1992). Sliding Modes in Control and Optimization. Springer-Verlag. - Chapter 2: \u201cSliding Mode Equations\u201d - Establishes exponential stability for linear sliding surfaces with positive coefficients - Theorem 2.1 (p. 45): Proves convergence rate proportional to sliding surface gains c_i 2. Edwards, C., & Spurgeon, S. (1998). Sliding Mode Control: Theory and Applications. CRC Press. - Chapter 3: \u201cSliding Surface Design\u201d - Provides rigorous analysis of pole placement via c_i parameters - Section 3.2 (pp. 67-89): Mathematical proof of exponential convergence with rate \\lambda = \\min(c_i) 3. Slotine, J.-J. E., & Li, W. (1991). Applied Nonlinear Control. Prentice Hall. - Section 7.3: \u201cSliding Surface Dynamics\u201d - Classic treatment of sliding surface stability conditions - Equation (7.52): Explicit relationship between c_i and convergence eigenvalues Implementation: src/controllers/smc/classic_smc.py:105-120": [[3, "sliding-mode-control-theory-1-1-sliding-surface-stability-formal-theorem-016-claim-if-all-sliding-surface-parameters-c-i-0-then-the-sliding-surface-dynamics-are-exponentially-stable-with-convergence-rates-determined-by-c-i-location-docs-theory-smc-theory-complete-md-71-foundational-references-1-utkin-v-i-1992-sliding-modes-in-control-and-optimization-springer-verlag-chapter-2-sliding-mode-equations-establishes-exponential-stability-for-linear-sliding-surfaces-with-positive-coefficients-theorem-2-1-p-45-proves-convergence-rate-proportional-to-sliding-surface-gains-c-i-2-edwards-c-spurgeon-s-1998-sliding-mode-control-theory-and-applications-crc-press-chapter-3-sliding-surface-design-provides-rigorous-analysis-of-pole-placement-via-c-i-parameters-section-3-2-pp-67-89-mathematical-proof-of-exponential-convergence-with-rate-lambda-min-c-i-3-slotine-j-j-e-li-w-1991-applied-nonlinear-control-prentice-hall-section-7-3-sliding-surface-dynamics-classic-treatment-of-sliding-surface-stability-conditions-equation-7-52-explicit-relationship-between-c-i-and-convergence-eigenvalues-implementation-src-controllers-smc-classic-smc-py-105-120"]], "1. Sliding Mode Controller Validation": [[245, "sliding-mode-controller-validation"]], "1. Sliding Surface Design": [[77, "sliding-surface-design"], [85, "sliding-surface-design"]], "1. Sliding Surface Design Theory": [[206, "sliding-surface-design-theory"]], "1. Sphinx Extension - mathviz_extension.py": [[30, "sphinx-extension-mathviz-extension-py"]], "1. Sphinx Extension: Pyodide Integration": [[27, "sphinx-extension-pyodide-integration"]], "1. Streamlit Cloud (Recommended)": [[90, "streamlit-cloud-recommended"]], "1. System Dynamics": [[287, "system-dynamics"]], "1. Theoretical Framework and Control Theory Foundations": [[249, "theoretical-framework-and-control-theory-foundations"]], "1. Unicode Mathematical Symbols": [[97, "unicode-mathematical-symbols"]], "1. Use Existing Theme Colors": [[269, "use-existing-theme-colors"]], "1. Use Numbered Theorems for Important Results": [[299, "use-numbered-theorems-for-important-results"]], "1. View-Based Array Operations": [[216, "view-based-array-operations"]], "1. Workflow Architecture Overview ### 1.1 High-Level Process Flow ```mermaid": [[252, "workflow-architecture-overview-1-1-high-level-process-flow-mermaid"]], "1. docs/scripts/deduplicate_bibtex.py": [[32, "docs-scripts-deduplicate-bibtex-py"]], "1. docs/scripts/deduplicate_bibtex.py (Phase 8A)": [[24, "docs-scripts-deduplicate-bibtex-py-phase-8a"]], "1. docs/scripts/fix_transition_errors.py": [[33, "docs-scripts-fix-transition-errors-py"]], "1. jupyter-notebook": [[29, "jupyter-notebook"]], "1.1 Batch Simulation Components": [[171, "batch-simulation-components"]], "1.1 Classical SMC Sliding Surface": [[206, "classical-smc-sliding-surface"]], "1.1 Classical SMC Theoretical Guarantees": [[245, "classical-smc-theoretical-guarantees"]], "1.1 Complete Numba Core": [[85, "complete-numba-core"]], "1.1 Control Performance Metrics": [[77, "control-performance-metrics"]], "1.1 Control Problem": [[296, "control-problem"]], "1.1 Control Signal Saturation": [[261, "control-signal-saturation"]], "1.1 Define Research Question": [[320, "define-research-question"]], "1.1 Direct Instantiation": [[77, "direct-instantiation"]], "1.1 Double-Inverted Pendulum Dynamics": [[249, "double-inverted-pendulum-dynamics"]], "1.1 Equations of Motion": [[287, "equations-of-motion"]], "1.1 Greek Letters (Preferred)": [[97, "greek-letters-preferred"]], "1.1 Horizon Length (N)": [[84, "horizon-length-n"]], "1.1 Instantiation and Setup": [[84, "instantiation-and-setup"]], "1.1 Key Methods": [[77, "key-methods"], [85, "key-methods"]], "1.1 Linear Sliding Surface Definition": [[204, "linear-sliding-surface-definition"]], "1.1 Mathematical Theory": [[290, "mathematical-theory"]], "1.1 Oscillatory Behavior": [[85, "oscillatory-behavior"]], "1.1 Quick Comparison Table": [[197, "quick-comparison-table"]], "1.1 Safety-Critical Functions": [[245, "safety-critical-functions"]], "1.1 Sliding Surface Computation": [[77, "sliding-surface-computation"]], "1.1 Solve Time Benchmarks": [[84, "solve-time-benchmarks"]], "1.1 Unbounded Gain Growth": [[77, "unbounded-gain-growth"]], "1.1.1 Euler Method (First-Order)": [[290, "euler-method-first-order"]], "1.1.2 Runge-Kutta 4 (Fourth-Order)": [[290, "runge-kutta-4-fourth-order"]], "1.1.3 Adaptive Step-Size Methods (RK45)": [[290, "adaptive-step-size-methods-rk45"]], "1.1\u00a0Controller subsystem (src/controllers)": [[224, "controller-subsystem-src-controllers"], [234, "controller-subsystem-src-controllers"]], "1.2 Adaptation Performance": [[77, "adaptation-performance"]], "1.2 Adaptive Gain Update": [[77, "adaptive-gain-update"]], "1.2 Control Loop Integration": [[84, "control-loop-integration"]], "1.2 Decision Tree": [[197, "decision-tree"]], "1.2 Factory Integration": [[77, "factory-integration"]], "1.2 Fault Detection and Response": [[245, "fault-detection-and-response"]], "1.2 Finite-Time Reaching Condition (FORMAL-THEOREM-019) Claim: \u201cUnder the reaching condition \\dot{V} \\leq -\\eta |s|, the system reaches the sliding surface in finite time bounded by t_r \\leq \\frac{|s(0)|}{\\eta}\u201d Location: docs/theory/smc_theory_complete.md:132 Foundational References: 1. Utkin, V. I. (1977). \u201cVariable structure systems with sliding modes.\u201d IEEE Transactions on Automatic Control, 22(2), 212-222. - Original formulation of the reaching condition - Theorem 1 (p. 214): Proves finite-time convergence under \\dot{V} \\leq -\\eta \\sqrt{V} 2. Khalil, H. K. (2002). Nonlinear Systems (3rd ed.). Prentice Hall. - Section 13.4: \u201cSliding Mode Control\u201d - treatment of reaching phase dynamics - Lemma 13.2 (p. 615): Establishes upper bound t_r \\leq \\frac{V(0)}{\\eta} for Lyapunov function V = \\frac{1}{2}s^2 3. Levant, A. (1993). \u201cSliding order and sliding accuracy in sliding mode control.\u201d International Journal of Control, 58(6), 1247-1263. - Theorem 2 (p. 1251): Generalizes finite-time reaching to higher-order sliding modes - Provides tighter bounds for 2-SMC and 3-SMC algorithms Implementation: src/controllers/smc/classic_smc.py:122-138": [[3, "finite-time-reaching-condition-formal-theorem-019-claim-under-the-reaching-condition-dot-v-leq-eta-s-the-system-reaches-the-sliding-surface-in-finite-time-bounded-by-t-r-leq-frac-s-0-eta-location-docs-theory-smc-theory-complete-md-132-foundational-references-1-utkin-v-i-1977-variable-structure-systems-with-sliding-modes-ieee-transactions-on-automatic-control-22-2-212-222-original-formulation-of-the-reaching-condition-theorem-1-p-214-proves-finite-time-convergence-under-dot-v-leq-eta-sqrt-v-2-khalil-h-k-2002-nonlinear-systems-3rd-ed-prentice-hall-section-13-4-sliding-mode-control-treatment-of-reaching-phase-dynamics-lemma-13-2-p-615-establishes-upper-bound-t-r-leq-frac-v-0-eta-for-lyapunov-function-v-frac-1-2-s-2-3-levant-a-1993-sliding-order-and-sliding-accuracy-in-sliding-mode-control-international-journal-of-control-58-6-1247-1263-theorem-2-p-1251-generalizes-finite-time-reaching-to-higher-order-sliding-modes-provides-tighter-bounds-for-2-smc-and-3-smc-algorithms-implementation-src-controllers-smc-classic-smc-py-122-138"]], "1.2 Key Features": [[171, "key-features"]], "1.2 Key Properties of the Mass Matrix": [[287, "key-properties-of-the-mass-matrix"]], "1.2 Literature Review": [[320, "literature-review"]], "1.2 Main Control Method": [[85, "main-control-method"]], "1.2 Mathematical Operators": [[97, "mathematical-operators"]], "1.2 Parameter Bounds Validation": [[261, "parameter-bounds-validation"]], "1.2 Sampling Time (dt)": [[84, "sampling-time-dt"]], "1.2 Scalability": [[84, "scalability"]], "1.2 Sliding Mode Control Mathematical Framework": [[249, "sliding-mode-control-mathematical-framework"]], "1.2 Slow Adaptation Response": [[77, "slow-adaptation-response"]], "1.2 Slow Convergence": [[85, "slow-convergence"]], "1.2 Stability Analysis for Discrete-Time Control": [[290, "stability-analysis-for-discrete-time-control"]], "1.2 Super-Twisting Algorithm Validation": [[245, "super-twisting-algorithm-validation"]], "1.2 Super-Twisting SMC (STA-SMC) Core Principle: 2nd-order sliding mode for continuous control without chattering Control Law:": [[166, "super-twisting-smc-sta-smc-core-principle-2nd-order-sliding-mode-for-continuous-control-without-chattering-control-law"]], "1.2 Super-Twisting Sliding Surface": [[206, "super-twisting-sliding-surface"]], "1.2 Surface Derivative": [[204, "surface-derivative"]], "1.2 Targets": [[296, "targets"]], "1.2\u00a0Core subsystem (src/core)": [[224, "core-subsystem-src-core"], [234, "core-subsystem-src-core"]], "1.3 Adaptive SMC Core Principle: Online gain adaptation to handle model uncertainty Control Law:": [[166, "adaptive-smc-core-principle-online-gain-adaptation-to-handle-model-uncertainty-control-law"]], "1.3 Complete Control Law": [[77, "complete-control-law"]], "1.3 Cost Function Weights": [[84, "cost-function-weights"]], "1.3 Excessive Chattering": [[77, "excessive-chattering"]], "1.3 Global Finite-Time Convergence (FORMAL-THEOREM-020) Claim: \u201cThe classical SMC law u = u_{eq} - \\eta \\text{sign}(s) with switching gain \\eta > \\rho (where \\rho is the uncertainty bound) ensures global finite-time convergence to the sliding surface.\u201d Location: docs/theory/smc_theory_complete.md:160 Foundational References: 1. Utkin, V., Guldner, J., & Shi, J. (2009). Sliding Mode Control in Electro-Mechanical Systems (2nd ed.). CRC Press. - Chapter 1: \u201cMathematical Background\u201d - Rigorous proof of global finite-time stability - Theorem 1.4 (p. 23): Establishes condition \\eta > \\rho for invariant sliding mode existence 2. Shtessel, Y., Edwards, C., Fridman, L., & Levant, A. (2014). Sliding Mode Control and Observation. Birkh\u00e4user. - Section 2.3: \u201cReaching Phase Analysis\u201d - Modern treatment with matched/unmatched uncertainties - Theorem 2.5 (p. 67): Proves global convergence for \\eta > \\rho + \\epsilon with finite reaching time 3. Young, K. D., Utkin, V. I., & \u00d6zg\u00fcner, \u00dc. (1999). \u201cA control engineer\u2019s guide to sliding mode control.\u201d IEEE Transactions on Control Systems Technology, 7(3), 328-342. - Section III-B: \u201cReaching Condition\u201d - Practical design guidelines for \\eta selection": [[3, "global-finite-time-convergence-formal-theorem-020-claim-the-classical-smc-law-u-u-eq-eta-text-sign-s-with-switching-gain-eta-rho-where-rho-is-the-uncertainty-bound-ensures-global-finite-time-convergence-to-the-sliding-surface-location-docs-theory-smc-theory-complete-md-160-foundational-references-1-utkin-v-guldner-j-shi-j-2009-sliding-mode-control-in-electro-mechanical-systems-2nd-ed-crc-press-chapter-1-mathematical-background-rigorous-proof-of-global-finite-time-stability-theorem-1-4-p-23-establishes-condition-eta-rho-for-invariant-sliding-mode-existence-2-shtessel-y-edwards-c-fridman-l-levant-a-2014-sliding-mode-control-and-observation-birkhauser-section-2-3-reaching-phase-analysis-modern-treatment-with-matched-unmatched-uncertainties-theorem-2-5-p-67-proves-global-convergence-for-eta-rho-epsilon-with-finite-reaching-time-3-young-k-d-utkin-v-i-ozguner-u-1999-a-control-engineer-s-guide-to-sliding-mode-control-ieee-transactions-on-control-systems-technology-7-3-328-342-section-iii-b-reaching-condition-practical-design-guidelines-for-eta-selection"]], "1.3 Hypothesis Formulation": [[320, "hypothesis-formulation"]], "1.3 Integrator Windup": [[85, "integrator-windup"]], "1.3 NumPy Validation Results": [[290, "numpy-validation-results"]], "1.3 NumPy Validation: Mass Matrix Properties": [[287, "numpy-validation-mass-matrix-properties"]], "1.3 Real-Time Feasibility": [[84, "real-time-feasibility"]], "1.3 Reference Trajectory Tracking": [[84, "id2"]], "1.3 References": [[296, "references"]], "1.3 Stability Monitoring": [[261, "stability-monitoring"]], "1.3 Stability Requirements and Mathematical Constraints": [[249, "stability-requirements-and-mathematical-constraints"]], "1.3 Subscripts and Superscripts": [[97, "subscripts-and-superscripts"]], "1.3 Summary Recommendations": [[197, "summary-recommendations"]], "1.3\u00a0Optimizer subsystem (src/optimizer)": [[224, "optimizer-subsystem-src-optimizer"], [234, "optimizer-subsystem-src-optimizer"]], "1.4 Adaptive SMC Stability (FORMAL-THEOREM-022) Claim: \u201cThe adaptive control law with gain update \\dot{K} = \\gamma |s| ensures uniform ultimate boundedness and asymptotic convergence to the sliding surface.\u201d Location: docs/theory/smc_theory_complete.md:270 Foundational References: 1. Slotine, J.-J. E., & Coetsee, J. A. (1986). \u201cAdaptive sliding controller synthesis for non-linear systems.\u201d International Journal of Control, 43(6), 1631-1651. - First rigorous treatment of adaptive sliding mode control - Theorem 1 (p. 1637): Proves global stability under gain adaptation law \\dot{K} = \\gamma |s| 2. \u00c5str\u00f6m, K. J., & Wittenmark, B. (1995). Adaptive Control (2nd ed.). Dover Publications. - Chapter 5: \u201cModel Reference Adaptive Systems\u201d - Lyapunov-based adaptive design framework - Section 5.4 (pp. 185-210): Analysis of uniform ultimate boundedness for adaptive laws 3. Ioannou, P. A., & Sun, J. (1996). Robust Adaptive Control. Prentice Hall. - Chapter 8: \u201cRobust Adaptive Laws\u201d - Treatment of adaptive SMC with parameter projection - Theorem 8.3 (p. 453): Establishes asymptotic tracking under bounded disturbances 4. Plestan, F., Shtessel, Y., Br\u00e9geault, V., & Poznyak, A. (2010). \u201cNew methodologies for adaptive sliding mode control.\u201d International Journal of Control, 83(9), 1907-1919. - Modern survey of adaptive SMC techniques - Section 3.2 (pp. 1912-1914): Comparison of gain adaptation strategies Implementation: src/controllers/smc/adaptive_smc.py:145-180": [[3, "adaptive-smc-stability-formal-theorem-022-claim-the-adaptive-control-law-with-gain-update-dot-k-gamma-s-ensures-uniform-ultimate-boundedness-and-asymptotic-convergence-to-the-sliding-surface-location-docs-theory-smc-theory-complete-md-270-foundational-references-1-slotine-j-j-e-coetsee-j-a-1986-adaptive-sliding-controller-synthesis-for-non-linear-systems-international-journal-of-control-43-6-1631-1651-first-rigorous-treatment-of-adaptive-sliding-mode-control-theorem-1-p-1637-proves-global-stability-under-gain-adaptation-law-dot-k-gamma-s-2-astrom-k-j-wittenmark-b-1995-adaptive-control-2nd-ed-dover-publications-chapter-5-model-reference-adaptive-systems-lyapunov-based-adaptive-design-framework-section-5-4-pp-185-210-analysis-of-uniform-ultimate-boundedness-for-adaptive-laws-3-ioannou-p-a-sun-j-1996-robust-adaptive-control-prentice-hall-chapter-8-robust-adaptive-laws-treatment-of-adaptive-smc-with-parameter-projection-theorem-8-3-p-453-establishes-asymptotic-tracking-under-bounded-disturbances-4-plestan-f-shtessel-y-bregeault-v-poznyak-a-2010-new-methodologies-for-adaptive-sliding-mode-control-international-journal-of-control-83-9-1907-1919-modern-survey-of-adaptive-smc-techniques-section-3-2-pp-1912-1914-comparison-of-gain-adaptation-strategies-implementation-src-controllers-smc-adaptive-smc-py-145-180"]], "1.4 Constraint Bounds": [[84, "constraint-bounds"]], "1.4 Emergency Stop Logic": [[261, "emergency-stop-logic"]], "1.4 Experimental Design": [[320, "experimental-design"]], "1.4 Gain Oscillation": [[77, "gain-oscillation"]], "1.4 Hybrid Adaptive STA-SMC Core Principle: Combines super-twisting continuity + adaptive uncertainty handling Control Law:": [[166, "hybrid-adaptive-sta-smc-core-principle-combines-super-twisting-continuity-adaptive-uncertainty-handling-control-law"]], "1.4\u00a0Hardware\u2011in\u2011the\u2011Loop and tests": [[224, "hardwareintheloop-and-tests"], [234, "hardwareintheloop-and-tests"]], "1.5 Boundary Layer Method (FORMAL-THEOREM-023) Claim: \u201cWith the boundary layer method, the tracking error is ultimately bounded by \\|e\\| \\leq O(\\phi) where \\phi is the boundary layer thickness.\u201d Location: docs/theory/smc_theory_complete.md:322 Foundational References: 1. Slotine, J.-J. E., & Sastry, S. S. (1983). \u201cTracking control of non-linear systems using sliding surfaces, with application to robot manipulators.\u201d International Journal of Control, 38(2), 465-492. - Original formulation of boundary layer approach for chattering reduction - Theorem 3 (p. 477): Establishes tracking error bound \\|e\\|_\\infty \\leq C\\phi where C depends on system dynamics 2. Burton, J. A., & Zinober, A. S. I. (1986). \u201cContinuous approximation of variable structure control.\u201d International Journal of Systems Science, 17(6), 875-885. - Mathematical analysis of continuous approximation methods - Lemma 2 (p. 879): Proves \\tanh(s/\\phi) \\to \\text{sign}(s) as \\phi \\to 0 with error O(\\phi) 3. Levant, A. (2007). \u201cPrinciples of 2-sliding mode design.\u201d Automatica, 43(4), 576-586. - Modern perspective on boundary layer vs. higher-order sliding modes - Section 4 (pp. 581-583): Comparative analysis showing boundary layer accuracy limitations Implementation: src/controllers/smc/classic_smc.py:180-200": [[3, "boundary-layer-method-formal-theorem-023-claim-with-the-boundary-layer-method-the-tracking-error-is-ultimately-bounded-by-e-leq-o-phi-where-phi-is-the-boundary-layer-thickness-location-docs-theory-smc-theory-complete-md-322-foundational-references-1-slotine-j-j-e-sastry-s-s-1983-tracking-control-of-non-linear-systems-using-sliding-surfaces-with-application-to-robot-manipulators-international-journal-of-control-38-2-465-492-original-formulation-of-boundary-layer-approach-for-chattering-reduction-theorem-3-p-477-establishes-tracking-error-bound-e-infty-leq-c-phi-where-c-depends-on-system-dynamics-2-burton-j-a-zinober-a-s-i-1986-continuous-approximation-of-variable-structure-control-international-journal-of-systems-science-17-6-875-885-mathematical-analysis-of-continuous-approximation-methods-lemma-2-p-879-proves-tanh-s-phi-to-text-sign-s-as-phi-to-0-with-error-o-phi-3-levant-a-2007-principles-of-2-sliding-mode-design-automatica-43-4-576-586-modern-perspective-on-boundary-layer-vs-higher-order-sliding-modes-section-4-pp-581-583-comparative-analysis-showing-boundary-layer-accuracy-limitations-implementation-src-controllers-smc-classic-smc-py-180-200"]], "1.5\u00a0Configuration (config.yaml)": [[224, "configuration-config-yaml"], [234, "configuration-config-yaml"]], "1.x Plant Model": [[221, null]], "10.": [[144, "id33"]], "10. Best Practices and Recommendations ### 10.1 Optimization Strategy Guidelines 1. Start Simple, Then Refine:": [[253, "best-practices-and-recommendations-10-1-optimization-strategy-guidelines-1-start-simple-then-refine"]], "10. Mathematical Validation and Testing ### 10.1 Benchmark Functions Test Function Suite:": [[246, "mathematical-validation-and-testing-10-1-benchmark-functions-test-function-suite"]], "10. Performance Metrics": [[195, "performance-metrics"]], "10. References": [[291, "references"]], "10. Summary and Practical Guidelines": [[249, "summary-and-practical-guidelines"]], "10. Theory Cross-References ### 10.1 Phase 2.2 Links (PSO Foundations) mathematical foundations for PSO algorithm: 1. Section 1: PSO Swarm Dynamics - Velocity update equations - Position update equations - Physical interpretation (inertia, cognitive, social forces) - File: docs/theory/pso_algorithm_foundations.md#1-pso-swarm-dynamics-equations 2. Section 2: Convergence Theorems - Convergence conditions (eigenvalue analysis) - Stability regions for (w, c_1, c_2) triplets - Constriction factor derivation - File: docs/theory/pso_algorithm_foundations.md#2-convergence-theorems 3. Section 3: Parameter Sensitivity Analysis - Inertia weight impact on exploration/exploitation - Cognitive/social coefficient balance - Swarm size scaling laws - File: docs/theory/pso_algorithm_foundations.md#3-parameter-sensitivity-analysis 4. Section 4: Numerical Conditioning - Cost normalization rationale - Numerical stability in fitness evaluation - File: docs/theory/pso_algorithm_foundations.md#4-numerical-conditioning 5. Section 7.1: Cost Function Design - Multi-objective fitness formulation - Instability penalty mechanisms - File: docs/theory/pso_algorithm_foundations.md#71-cost-function-design 6. Section 7.2: Bounds Selection Rationale - Physics-based bounds derivation - Stability constraints for controller gains - File: docs/theory/pso_algorithm_foundations.md#72-bounds-selection-rationale 7. Section 8: PSO Implementation Guidelines - Practical recommendations for PSO tuning - Common pitfalls and approaches - File: docs/theory/pso_algorithm_foundations.md#8-pso-implementation-guidelines ### 10.2 Phase 4.2 Links (Factory System) Integration patterns between PSO optimization and controller factory: 1. Section 5.1: Fitness Function Integration - Factory-compatible fitness functions - Partial application patterns for PSO - File: docs/api/factory_system_api_reference.md#51-fitness-function-integration 2. Section 5.3: Gain Validation Rules - Controller-specific gain constraints - Validation before PSO evaluation - File: docs/api/factory_system_api_reference.md#53-gain-validation-rules 3. Section 5.4: Bounds Management - Configuration-driven bounds specification - Controller-type-specific bounds retrieval - File: docs/api/factory_system_api_reference.md#54-bounds-management 4. Section 6.2: PSO Convergence Monitoring - Integration with EnhancedConvergenceAnalyzer - Real-time optimization status - File: docs/api/factory_system_api_reference.md#62-pso-convergence-monitoring 5. Section 6.3: Hyperparameter Configuration - PSO hyperparameter specification in YAML - Override mechanisms - File: docs/api/factory_system_api_reference.md#63-hyperparameter-configuration ### 10.3 Related Documentation Control Theory Foundations:": [[53, "theory-cross-references-10-1-phase-2-2-links-pso-foundations-mathematical-foundations-for-pso-algorithm-1-section-1-pso-swarm-dynamics-velocity-update-equations-position-update-equations-physical-interpretation-inertia-cognitive-social-forces-file-docs-theory-pso-algorithm-foundations-md-1-pso-swarm-dynamics-equations-2-section-2-convergence-theorems-convergence-conditions-eigenvalue-analysis-stability-regions-for-w-c-1-c-2-triplets-constriction-factor-derivation-file-docs-theory-pso-algorithm-foundations-md-2-convergence-theorems-3-section-3-parameter-sensitivity-analysis-inertia-weight-impact-on-exploration-exploitation-cognitive-social-coefficient-balance-swarm-size-scaling-laws-file-docs-theory-pso-algorithm-foundations-md-3-parameter-sensitivity-analysis-4-section-4-numerical-conditioning-cost-normalization-rationale-numerical-stability-in-fitness-evaluation-file-docs-theory-pso-algorithm-foundations-md-4-numerical-conditioning-5-section-7-1-cost-function-design-multi-objective-fitness-formulation-instability-penalty-mechanisms-file-docs-theory-pso-algorithm-foundations-md-71-cost-function-design-6-section-7-2-bounds-selection-rationale-physics-based-bounds-derivation-stability-constraints-for-controller-gains-file-docs-theory-pso-algorithm-foundations-md-72-bounds-selection-rationale-7-section-8-pso-implementation-guidelines-practical-recommendations-for-pso-tuning-common-pitfalls-and-approaches-file-docs-theory-pso-algorithm-foundations-md-8-pso-implementation-guidelines-10-2-phase-4-2-links-factory-system-integration-patterns-between-pso-optimization-and-controller-factory-1-section-5-1-fitness-function-integration-factory-compatible-fitness-functions-partial-application-patterns-for-pso-file-docs-api-factory-system-api-reference-md-51-fitness-function-integration-2-section-5-3-gain-validation-rules-controller-specific-gain-constraints-validation-before-pso-evaluation-file-docs-api-factory-system-api-reference-md-53-gain-validation-rules-3-section-5-4-bounds-management-configuration-driven-bounds-specification-controller-type-specific-bounds-retrieval-file-docs-api-factory-system-api-reference-md-54-bounds-management-4-section-6-2-pso-convergence-monitoring-integration-with-enhancedconvergenceanalyzer-real-time-optimization-status-file-docs-api-factory-system-api-reference-md-62-pso-convergence-monitoring-5-section-6-3-hyperparameter-configuration-pso-hyperparameter-specification-in-yaml-override-mechanisms-file-docs-api-factory-system-api-reference-md-63-hyperparameter-configuration-10-3-related-documentation-control-theory-foundations"]], "10. \u00c5str\u00f6m & Wittenmark (1995) - Adaptive Control": [[123, "astrom-wittenmark-1995-adaptive-control"]], "10.1 Chattering Quantification": [[195, "chattering-quantification"]], "10.1 Recommended PSO Bounds by Controller Type": [[249, "recommended-pso-bounds-by-controller-type"]], "10.2 Implementation Checklist": [[249, "implementation-checklist"]], "10.2 Tracking Performance": [[195, "tracking-performance"]], "10.3 Future Enhancement Recommendations": [[249, "future-enhancement-recommendations"]], "11. Conclusion The mathematical foundations presented provide a rigorous theoretical framework for PSO implementation in SMC gain optimization. Key mathematical contributions include: 1. Convergence Guarantees: Theoretical conditions ensuring algorithm convergence": [[246, "conclusion-the-mathematical-foundations-presented-provide-a-rigorous-theoretical-framework-for-pso-implementation-in-smc-gain-optimization-key-mathematical-contributions-include-1-convergence-guarantees-theoretical-conditions-ensuring-algorithm-convergence"]], "11. Frequently Asked Questions (FAQ) ### 11.1 General Questions Q: How long should PSO optimization take?": [[253, "frequently-asked-questions-faq-11-1-general-questions-q-how-long-should-pso-optimization-take"]], "1\u00a0Architectural Overview": [[224, "architectural-overview"], [234, "architectural-overview"]], "1\u00a0Introduction": [[227, "introduction"], [231, "introduction"]], "2.": [[143, "id2"], [143, "id7"], [144, "id2"], [144, "id38"]], "2. AST vs Regex Comparison ### 2.1 Problem Statement Consider the following Python code with nested docstrings: ```python": [[297, "ast-vs-regex-comparison-2-1-problem-statement-consider-the-following-python-code-with-nested-docstrings-python"]], "2. Adaptation Parameters": [[77, "adaptation-parameters"]], "2. Adaptive Control Law": [[77, "adaptive-control-law"]], "2. Advanced Parameters": [[84, "advanced-parameters"]], "2. Anti-Windup Mechanism": [[85, "anti-windup-mechanism"]], "2. Application Context": [[74, null]], "2. Boundary Layer Definition": [[195, "boundary-layer-definition"]], "2. Boundary Layer Theory": [[206, "boundary-layer-theory"]], "2. Broadcast Instead of Copy": [[216, "broadcast-instead-of-copy"]], "2. Broken Links Analysis Total Broken Links: 148 (12.2% of all internal links) #### Top Broken Link Categories 1. Missing Documentation Files (60 links, 40.5%) - controller_theory.md, pso_optimization.md, configuration_schema.md - Cause: Files referenced but never created - Fix: Create stub files or update links to existing docs 2. Incorrect Relative Paths (45 links, 30.4%) - ../optimization/pso_optimization_guide.md \u2192 actual: guides/workflows/pso-optimization-workflow.md - Cause: Directory restructuring without updating links - Fix: Batch find-replace with correct paths 3. External Directory References (25 links, 16.9%) - ../../actions, ../src/benchmarks/, dip_docs/docs/source/ - Cause: Links to files outside docs directory - Fix: Remove or replace with documentation equivalents 4. Placeholder Links (18 links, 12.2%) - Examples: [text](other-page.md), [controller_type](config), [key](value) (shown as text only) - Cause: Template examples or incomplete documentation - Fix: Replace with real links or mark as examples #### Broken Links by File (Top 10) | File | Broken Links | Common Issues |": [[7, "broken-links-analysis-total-broken-links-148-12-2-of-all-internal-links-top-broken-link-categories-1-missing-documentation-files-60-links-40-5-controller-theory-md-pso-optimization-md-configuration-schema-md-cause-files-referenced-but-never-created-fix-create-stub-files-or-update-links-to-existing-docs-2-incorrect-relative-paths-45-links-30-4-optimization-pso-optimization-guide-md-actual-guides-workflows-pso-optimization-workflow-md-cause-directory-restructuring-without-updating-links-fix-batch-find-replace-with-correct-paths-3-external-directory-references-25-links-16-9-actions-src-benchmarks-dip-docs-docs-source-cause-links-to-files-outside-docs-directory-fix-remove-or-replace-with-documentation-equivalents-4-placeholder-links-18-links-12-2-examples-text-other-page-md-controller-type-config-key-value-shown-as-text-only-cause-template-examples-or-incomplete-documentation-fix-replace-with-real-links-or-mark-as-examples-broken-links-by-file-top-10-file-broken-links-common-issues"]], "2. Classical SMC Gain Bounds Derivation": [[249, "classical-smc-gain-bounds-derivation"]], "2. Common Issues and approaches ### 2.1 Optimization Failures Issue: PSO Optimization Fails to Start Symptoms:": [[254, "common-issues-and-approaches-2-1-optimization-failures-issue-pso-optimization-fails-to-start-symptoms"]], "2. Comparative Analysis": [[77, "comparative-analysis"]], "2. Component Architecture Details ### 2.1 PSO Tuner Engine Architecture Module: src/optimization/algorithms/pso_optimizer.py ```python": [[250, "component-architecture-details-2-1-pso-tuner-engine-architecture-module-src-optimization-algorithms-pso-optimizer-py-python"]], "2. Control Flow Architecture": [[77, "control-flow-architecture"]], "2. Control Flow with Numba Acceleration": [[85, "control-flow-with-numba-acceleration"]], "2. Control Parameters": [[85, "control-parameters"]], "2. Control Performance": [[84, "control-performance"]], "2. Control Theory Notation Standards": [[97, "control-theory-notation-standards"]], "2. Controller Selection": [[265, "controller-selection"]], "2. Controller-Specific API Implementations ### 2.1 Classical SMC Interface Gain Vector Specification:": [[76, "controller-specific-api-implementations-2-1-classical-smc-interface-gain-vector-specification"]], "2. Convergence Analysis ### 2.1 Theoretical Convergence Conditions Theorem 1 (Clerc-Kennedy Convergence):": [[246, "convergence-analysis-2-1-theoretical-convergence-conditions-theorem-1-clerc-kennedy-convergence"]], "2. Convergence Characteristics": [[197, "convergence-characteristics"]], "2. Convergence Theorems and Proofs ### 2.1 Deterministic Stability Analysis Assumption 2.1 (Deterministic PSO): Consider the simplified case with r_1^t = r_2^t = 1 (no randomness). The velocity update becomes: $\\mathbf{v}_i^{t+1} = w\\mathbf{v}_i^t + c_1(\\mathbf{p}_i - \\mathbf{x}_i^t) + c_2(\\mathbf{g}^t - \\mathbf{x}_i^t) **State Space Formulation:** Define the state vector \\mathbf{z}_i^t = [\\mathbf{x}_i^t, \\mathbf{v}_i^t]^T \\in \\mathbb{R}^{2D}. The update can be written as: \\mathbf{z}_i^{t+1} = \\mathbf{A}\\mathbf{z}_i^t + \\mathbf{b}_i where the system matrix is: $\\mathbf{A} = \\begin{bmatrix}": [[291, "convergence-theorems-and-proofs-2-1-deterministic-stability-analysis-assumption-2-1-deterministic-pso-consider-the-simplified-case-with-r-1-t-r-2-t-1-no-randomness-the-velocity-update-becomes-mathbf-v-i-t-1-w-mathbf-v-i-t-c-1-mathbf-p-i-mathbf-x-i-t-c-2-mathbf-g-t-mathbf-x-i-t-state-space-formulation-define-the-state-vector-mathbf-z-i-t-mathbf-x-i-t-mathbf-v-i-t-t-in-mathbb-r-2d-the-update-can-be-written-as-mathbf-z-i-t-1-mathbf-a-mathbf-z-i-t-mathbf-b-i-where-the-system-matrix-is-mathbf-a-begin-bmatrix"]], "2. Critical Code Sections": [[84, "critical-code-sections"]], "2. Critical Coverage Gaps Requiring Immediate Attention": [[37, "critical-coverage-gaps-requiring-immediate-attention"]], "2. Custom Extension (jupyter_extension.py)": [[29, "custom-extension-jupyter-extension-py"]], "2. Decorators Source: PEP 318 - \u201cDecorators for Functions and Methods\u201d Usage: Validation, timing, caching throughout codebase #### Implementation Examples ```python": [[17, "decorators-source-pep-318-decorators-for-functions-and-methods-usage-validation-timing-caching-throughout-codebase-implementation-examples-python"]], "2. Default Values": [[131, "default-values"]], "2. Diagnostic Tools": [[77, "diagnostic-tools"], [85, "diagnostic-tools"]], "2. Docker Deployment": [[90, "docker-deployment"]], "2. Dynamics Model System (Section 3, ~500 lines) \u2705 Files:": [[59, "dynamics-model-system-section-3-500-lines-files"]], "2. Factory Integration": [[84, "factory-integration"]], "2. Finite-Time Convergence Validation": [[85, "finite-time-convergence-validation"]], "2. Include Citations Using MyST Syntax": [[299, "include-citations-using-myst-syntax"]], "2. Index.md Contributing Link (1 fixed)": [[26, "index-md-contributing-link-1-fixed"]], "2. Inline Code Cells": [[154, "inline-code-cells"]], "2. JavaScript Controller - mathviz-interactive.js": [[30, "javascript-controller-mathviz-interactive-js"]], "2. JavaScript Integration (437 lines)": [[28, "javascript-integration-437-lines"]], "2. JavaScript Runner": [[27, "javascript-runner"]], "2. Key Components": [[84, "key-components"]], "2. Levant (2003) - Higher-Order Sliding Modes": [[123, "levant-2003-higher-order-sliding-modes"]], "2. Literalinclude Directive Error (1 fixed)": [[26, "literalinclude-directive-error-1-fixed"]], "2. Lyapunov Surface Visualization": [[156, "lyapunov-surface-visualization"]], "2. Match Your Gradients": [[269, "match-your-gradients"]], "2. Matrix Conditioning and Inversion": [[290, "matrix-conditioning-and-inversion"]], "2. Missing Gains": [[34, "missing-gains"]], "2. Monitoring STA-Specific Metrics": [[85, "monitoring-sta-specific-metrics"]], "2. Numerical Methods": [[84, "numerical-methods"]], "2. Offline Fallback Page - docs/offline.html": [[31, "offline-fallback-page-docs-offline-html"]], "2. Operational Safety Constraints": [[245, "operational-safety-constraints"]], "2. Out of Memory": [[91, "out-of-memory"]], "2. PSO Algorithm Convergence Validation": [[245, "pso-algorithm-convergence-validation"]], "2. PSO Optimization Integration": [[77, "pso-optimization-integration"]], "2. Particle Swarm Optimization ### 2.1 PSO Global Stability (FORMAL-THEOREM-004, FORMAL-THEOREM-005) Claims:": [[3, "particle-swarm-optimization-2-1-pso-global-stability-formal-theorem-004-formal-theorem-005-claims"]], "2. Performance Optimization": [[84, "performance-optimization"]], "2. Practical Examples Document File: docs/validation/validation_examples.md": [[309, "practical-examples-document-file-docs-validation-validation-examples-md"]], "2. Quick Start ### 2.1 Three-Step Workflow Prerequisites:": [[298, "quick-start-2-1-three-step-workflow-prerequisites"]], "2. README.md PSO Documentation Assessment ### 2.1 PSO Feature Presentation README.md PSO Coverage Analysis: #### \u2713 : Key Features Section": [[19, "readme-md-pso-documentation-assessment-2-1-pso-feature-presentation-readme-md-pso-coverage-analysis-key-features-section"]], "2. Running HIL Simulation": [[185, "running-hil-simulation"]], "2. Set Iteration Budget Wisely": [[133, "set-iteration-budget-wisely"]], "2. Sliding Surface Design": [[287, "sliding-surface-design"]], "2. Stability Analysis": [[204, "stability-analysis"]], "2. Super-Twisting Control Law": [[85, "super-twisting-control-law"]], "2. Super-Twisting SMC (STA-SMC)": [[132, "super-twisting-smc-sta-smc"]], "2. SuperTwistingSMC (src/controllers/smc/sta_smc.py) Docstring Coverage: \u2705 100% Class Documentation (Lines 129-193):": [[55, "supertwistingsmc-src-controllers-smc-sta-smc-py-docstring-coverage-100-class-documentation-lines-129-193"]], "2. System Dynamics Model": [[84, "system-dynamics-model"]], "2. Test Category Coverage": [[245, "test-category-coverage"]], "2. Theory & Mathematical Foundations": [[11, "theory-mathematical-foundations"]], "2. Timestep Selection": [[135, "timestep-selection"]], "2. Tutorial Enhancement": [[27, "tutorial-enhancement"]], "2. Validate Inputs Early": [[203, "validate-inputs-early"]], "2. Vectorized Batch Simulation": [[216, "vectorized-batch-simulation"]], "2. docs/scripts/fix_line1_concatenation.py": [[33, "docs-scripts-fix-line1-concatenation-py"]], "2. docs/scripts/fix_sphinx_headers.py": [[32, "docs-scripts-fix-sphinx-headers-py"]], "2. docs/scripts/fix_sphinx_headers.py (Phase 8B)": [[24, "docs-scripts-fix-sphinx-headers-py-phase-8b"]], "2. jupyter-cell": [[29, "jupyter-cell"]], "2.1 Adaptation Health Check": [[77, "adaptation-health-check"]], "2.1 Adaptive Switching Term (-K(t)\u00b7sat(\u03c3/\u03b5))": [[77, "adaptive-switching-term-k-t-sat"]], "2.1 Classical SMC Sliding Surface": [[287, "classical-smc-sliding-surface"]], "2.1 Client-Server Model": [[177, "client-server-model"]], "2.1 Continuous Approximation of Sign Function": [[206, "continuous-approximation-of-sign-function"]], "2.1 Continuous Term (u_c)": [[85, "continuous-term-u-c"]], "2.1 Continuous-Time Nonlinear Dynamics": [[84, "continuous-time-nonlinear-dynamics"]], "2.1 Controller Implementation": [[320, "controller-implementation"]], "2.1 Convergence Type Comparison": [[197, "convergence-type-comparison"]], "2.1 Discretization Method": [[84, "discretization-method"]], "2.1 Hurwitz Stability Requirement": [[204, "hurwitz-stability-requirement"]], "2.1 Linear Saturation Function": [[195, "linear-saturation-function"]], "2.1 Linearization (Lines 72-131)": [[84, "linearization-lines-72-131"]], "2.1 Linearization Module": [[84, "linearization-module"]], "2.1 Mathematical Convergence Criteria": [[245, "mathematical-convergence-criteria"]], "2.1 Mathematical Theory": [[290, "id1"]], "2.1 Physical setup": [[74, "physical-setup"]], "2.1 Real-Time Constraints": [[245, "real-time-constraints"]], "2.1 Sensor Data Validation": [[261, "sensor-data-validation"]], "2.1 Simple Example (Code Structure)": [[171, "simple-example-code-structure"]], "2.1 Sliding Mode Control": [[97, "sliding-mode-control"]], "2.1 Sliding Surface Coefficient Bounds": [[249, "sliding-surface-coefficient-bounds"]], "2.1 Speed Optimization Checklist": [[84, "speed-optimization-checklist"]], "2.1 Tracking Accuracy": [[84, "tracking-accuracy"]], "2.1 Using Controller Factory": [[84, "using-controller-factory"]], "2.1.1 Exponential Convergence (Classical, Adaptive)": [[197, "exponential-convergence-classical-adaptive"]], "2.1.2 Finite-Time Convergence (STA, Hybrid)": [[197, "finite-time-convergence-sta-hybrid"]], "2.1\u00a0Classical SMC": [[224, "classical-smc"], [234, "classical-smc"]], "2.1\u00a0Equations of Motion": [[227, "equations-of-motion"], [231, "equations-of-motion"]], "2.2 Accuracy Optimization Checklist": [[84, "accuracy-optimization-checklist"]], "2.2 Batch Orchestrator API": [[171, "batch-orchestrator-api"]], "2.2 Communication Protocol Safety": [[261, "communication-protocol-safety"]], "2.2 Comparison to SMC": [[84, "comparison-to-smc"]], "2.2 Constraints & disturbances": [[74, "constraints-disturbances"]], "2.2 Convergence Analysis": [[204, "convergence-analysis"]], "2.2 Convergence Time Analysis": [[197, "convergence-time-analysis"]], "2.2 DIP Mass Matrix Conditioning": [[290, "dip-mass-matrix-conditioning"]], "2.2 Direct Instantiation (Recommended for MPC)": [[84, "direct-instantiation-recommended-for-mpc"]], "2.2 Discretization (Lines 142-153)": [[84, "discretization-lines-142-153"]], "2.2 Discretization Module": [[84, "discretization-module"]], "2.2 Experiment Script": [[320, "experiment-script"]], "2.2 Fallback Controllers": [[84, "fallback-controllers"]], "2.2 Fitness Function Properties": [[245, "fitness-function-properties"]], "2.2 Hyperbolic Tangent Approximation": [[195, "hyperbolic-tangent-approximation"]], "2.2 Integral Term (z)": [[85, "integral-term-z"]], "2.2 Linearization Around Equilibrium": [[84, "linearization-around-equilibrium"]], "2.2 Lyapunov Function Documentation": [[97, "lyapunov-function-documentation"]], "2.2 Mathematical Properties of Boundary Layer": [[206, "mathematical-properties-of-boundary-layer"]], "2.2 Network Protocol (Real Implementation)": [[177, "network-protocol-real-implementation"]], "2.2 PSO Particle Trajectory Convergence (FORMAL-THEOREM-008) Claim: \u201cThe particle converges to a stable trajectory if: |\\omega + \\phi_1 + \\phi_2| < 1 and |\\omega - (\\phi_1 + \\phi_2)| < 1\u201d Location: docs/theory/pso_optimization_complete.md:86 Foundational References: 1. Clerc, M., & Kennedy, J. (2002). \u201cThe particle swarm - explosion, stability, and convergence in a multidimensional complex space.\u201d IEEE Transactions on Evolutionary Computation, 6(1), 58-73. - Theorem 1 (p. 62): Derives stability region for PSO velocity update - Establishes conditions for trajectory convergence: \\chi < 1 and \\omega < 2(\\phi_1 + \\phi_2) - 2 2. van den Bergh, F., & Engelbrecht, A. P. (2006). \u201cA study of particle swarm optimization particle trajectories.\u201d Information Sciences, 176(8), 937-971. - Section 3: \u201cParticle Trajectory Analysis\u201d - Detailed mathematical characterization - Lemma 3.2 (p. 945): Proves convergence criteria via eigenvalue analysis 3. Trelea, I. C. (2003). \u201cThe particle swarm optimization algorithm: convergence analysis and parameter selection.\u201d Information Processing Letters, 85(6), 317-325. - Provides simplified convergence conditions - Design rule (p. 320): \\omega = 0.729, \\phi_1 = \\phi_2 = 1.49445 (canonical PSO parameters) Implementation: src/optimizer/pso_optimizer.py:65-90": [[3, "pso-particle-trajectory-convergence-formal-theorem-008-claim-the-particle-converges-to-a-stable-trajectory-if-omega-phi-1-phi-2-1-and-omega-phi-1-phi-2-1-location-docs-theory-pso-optimization-complete-md-86-foundational-references-1-clerc-m-kennedy-j-2002-the-particle-swarm-explosion-stability-and-convergence-in-a-multidimensional-complex-space-ieee-transactions-on-evolutionary-computation-6-1-58-73-theorem-1-p-62-derives-stability-region-for-pso-velocity-update-establishes-conditions-for-trajectory-convergence-chi-1-and-omega-2-phi-1-phi-2-2-2-van-den-bergh-f-engelbrecht-a-p-2006-a-study-of-particle-swarm-optimization-particle-trajectories-information-sciences-176-8-937-971-section-3-particle-trajectory-analysis-detailed-mathematical-characterization-lemma-3-2-p-945-proves-convergence-criteria-via-eigenvalue-analysis-3-trelea-i-c-2003-the-particle-swarm-optimization-algorithm-convergence-analysis-and-parameter-selection-information-processing-letters-85-6-317-325-provides-simplified-convergence-conditions-design-rule-p-320-omega-0-729-phi-1-phi-2-1-49445-canonical-pso-parameters-implementation-src-optimizer-pso-optimizer-py-65-90"]], "2.2 Parameter Validation": [[77, "parameter-validation"]], "2.2 Pole Placement for Sliding Dynamics": [[287, "pole-placement-for-sliding-dynamics"]], "2.2 Proportional Damping Term (-\u03b1\u00b7\u03c3)": [[77, "proportional-damping-term"]], "2.2 SimulationRunner Class File: src/simulation/engines/simulation_runner.py:333 Object-oriented wrapper around run_simulation() providing state tracking and compatibility with test cases. #### 2.2.1 Class Definition ```python": [[61, "simulationrunner-class-file-src-simulation-engines-simulation-runner-py-333-object-oriented-wrapper-around-run-simulation-providing-state-tracking-and-compatibility-with-test-cases-2-2-1-class-definition-python"]], "2.2 Stability Margins": [[245, "stability-margins"]], "2.2 Switching Gain Bounds": [[249, "switching-gain-bounds"]], "2.2\u00a0Sliding Variable": [[227, "sliding-variable"], [231, "sliding-variable"]], "2.2\u00a0Super\u2011twisting (STA) SMC": [[224, "supertwisting-sta-smc"], [234, "supertwisting-sta-smc"]], "2.3 Constraint Handling": [[84, "id3"]], "2.3 Diagnostic Tools": [[84, "diagnostic-tools"]], "2.3 Discretization": [[84, "discretization"]], "2.3 Equivalent Control (u_eq)": [[85, "equivalent-control-u-eq"]], "2.3 Legacy Compatibility Functions #### 2.3.1 step() Function File: src/simulation/engines/simulation_runner.py:87 ```python": [[61, "legacy-compatibility-functions-2-3-1-step-function-file-src-simulation-engines-simulation-runner-py-87-python"]], "2.3 NumPy Validation: Sliding Surface Eigenvalues": [[287, "numpy-validation-sliding-surface-eigenvalues"]], "2.3 Objectives \u2194 KPIs": [[74, "objectives-kpis"]], "2.3 PSO Global Convergence (FORMAL-THEOREM-010) Claim: \u201cUnder the stability condition and with decreasing inertia weight, PSO converges to the global optimum with probability 1 for unimodal functions.\u201d Location: docs/theory/pso_optimization_complete.md:115 Foundational References: 1. Clerc, M. (2006). Particle Swarm Optimization. ISTE Ltd. - Chapter 4: \u201cConvergence Analysis\u201d - Probabilistic convergence proofs - Theorem 4.3 (p. 112): Proves almost-sure convergence for convex functions 2. Jiang, M., Luo, Y. P., & Yang, S. Y. (2007). \u201cStochastic convergence analysis and parameter selection of the standard particle swarm optimization algorithm.\u201d Information Processing Letters, 102(1), 8-16. - Rigorous proof of global convergence for PSO - Theorem 1 (p. 10): Establishes probability-1 convergence for unimodal functions 3. Shi, Y., & Eberhart, R. (1998). \u201cA modified particle swarm optimizer.\u201d Proceedings of IEEE International Conference on Evolutionary Computation, 69-73. - Introduces time-varying inertia weight \\omega(t) = \\omega_{max} - \\frac{t}{t_{max}}(\\omega_{max} - \\omega_{min}) - Empirical validation of improved convergence with \\omega \\in [0.4, 0.9] 4. Poli, R., Kennedy, J., & Blackwell, T. (2007). \u201cParticle swarm optimization: An overview.\u201d Swarm Intelligence, 1(1), 33-57. - survey of PSO convergence theory - Section 4 (pp. 44-49): Discussion of local vs. global convergence guarantees Important Note: This theorem applies to unimodal (single-optimum) functions. For multimodal problems (like controller tuning), PSO provides good local solutions but not guaranteed global optimality. Implementation: src/optimizer/pso_optimizer.py:120-155": [[3, "pso-global-convergence-formal-theorem-010-claim-under-the-stability-condition-and-with-decreasing-inertia-weight-pso-converges-to-the-global-optimum-with-probability-1-for-unimodal-functions-location-docs-theory-pso-optimization-complete-md-115-foundational-references-1-clerc-m-2006-particle-swarm-optimization-iste-ltd-chapter-4-convergence-analysis-probabilistic-convergence-proofs-theorem-4-3-p-112-proves-almost-sure-convergence-for-convex-functions-2-jiang-m-luo-y-p-yang-s-y-2007-stochastic-convergence-analysis-and-parameter-selection-of-the-standard-particle-swarm-optimization-algorithm-information-processing-letters-102-1-8-16-rigorous-proof-of-global-convergence-for-pso-theorem-1-p-10-establishes-probability-1-convergence-for-unimodal-functions-3-shi-y-eberhart-r-1998-a-modified-particle-swarm-optimizer-proceedings-of-ieee-international-conference-on-evolutionary-computation-69-73-introduces-time-varying-inertia-weight-omega-t-omega-max-frac-t-t-max-omega-max-omega-min-empirical-validation-of-improved-convergence-with-omega-in-0-4-0-9-4-poli-r-kennedy-j-blackwell-t-2007-particle-swarm-optimization-an-overview-swarm-intelligence-1-1-33-57-survey-of-pso-convergence-theory-section-4-pp-44-49-discussion-of-local-vs-global-convergence-guarantees-important-note-this-theorem-applies-to-unimodal-single-optimum-functions-for-multimodal-problems-like-controller-tuning-pso-provides-good-local-solutions-but-not-guaranteed-global-optimality-implementation-src-optimizer-pso-optimizer-py-120-155"]], "2.3 QP Formulation (Lines 362-396)": [[84, "qp-formulation-lines-362-396"]], "2.3 QP Solver Integration (cvxpy)": [[84, "qp-solver-integration-cvxpy"]], "2.3 Regularization Techniques": [[290, "regularization-techniques"]], "2.3 Result Container API": [[171, "result-container-api"]], "2.3 Slew Rate Limiting": [[84, "id1"]], "2.3 Steady-State Error Comparison": [[197, "steady-state-error-comparison"]], "2.3 Super-Twisting Algorithm": [[97, "super-twisting-algorithm"]], "2.3\u00a0Adaptive SMC": [[224, "adaptive-smc"], [234, "adaptive-smc"]], "2.4 Damping Term (-d\u00b7\u03c3)": [[85, "damping-term-d"]], "2.4 Fallback Controller Strategy": [[84, "fallback-controller-strategy"]], "2.4 NumPy Validation Results": [[290, "id2"]], "2.4 Phase Portrait Analysis": [[197, "phase-portrait-analysis"]], "2.4 Solver and Fallback (Lines 407-463)": [[84, "solver-and-fallback-lines-407-463"]], "2.4\u00a0Hybrid STA\u2013adaptive SMC": [[224, "hybrid-staadaptive-smc"], [234, "hybrid-staadaptive-smc"]], "2D Parameter Space - Settling Time": [[156, "d-parameter-space-settling-time"]], "2\u00a0Controller Implementation Analysis": [[224, "controller-implementation-analysis"], [234, "controller-implementation-analysis"]], "2\u00a0System\u00a0Modelling and Problem\u00a0Formulation": [[227, "system-modelling-and-problem-formulation"], [231, "system-modelling-and-problem-formulation"]], "3.": [[143, "id3"], [143, "id8"], [144, "id6"]], "3. Adaptation Law": [[77, "adaptation-law"]], "3. Adaptive SMC": [[132, "adaptive-smc"]], "3. AdaptiveSMC (src/controllers/smc/adaptive_smc.py) Docstring Coverage: \u2705 100% Class Documentation (Lines 85-92):": [[55, "adaptivesmc-src-controllers-smc-adaptive-smc-py-docstring-coverage-100-class-documentation-lines-85-92"]], "3. Additional Features": [[84, "additional-features"]], "3. Advanced Configuration and Customization ### 3.1 Custom PSO Parameters Configuration File Modification (config.yaml):": [[253, "advanced-configuration-and-customization-3-1-custom-pso-parameters-configuration-file-modification-config-yaml"]], "3. Batch Processing": [[135, "batch-processing"]], "3. CSS Styling - mathviz.css": [[30, "css-styling-mathviz-css"]], "3. Chattering Comparison (Power Spectral Density)": [[85, "chattering-comparison-power-spectral-density"]], "3. Computational Performance": [[77, "computational-performance"]], "3. Configuration Example (YAML)": [[85, "configuration-example-yaml"]], "3. Configuration Examples": [[84, "configuration-examples"]], "3. Control Engineering Adaptations ### 3.1 SMC Gain Optimization Problem Formulation Optimization Variables:": [[246, "control-engineering-adaptations-3-1-smc-gain-optimization-problem-formulation-optimization-variables"]], "3. Control Output Structures Location: src/utils/types/control_outputs.py ### 3.1 Overview All controllers return NamedTuple instances instead of bare tuples for: - Type safety: Explicit attribute names prevent misuse": [[79, "control-output-structures-location-src-utils-types-control-outputs-py-3-1-overview-all-controllers-return-namedtuple-instances-instead-of-bare-tuples-for-type-safety-explicit-attribute-names-prevent-misuse"]], "3. Control Parameters": [[77, "control-parameters"]], "3. Cross-Reference Patterns #### \u2705 Strong Patterns (Working Well) 1. Tutorial \u2192 API Documentation - 100% of tutorials link to relevant API docs - Example: tutorial-01-first-simulation.md \u2192 api/simulation.md 2. API \u2192 Examples - 65% of API docs link to examples or tutorials - Example: api/controllers.md \u2192 tutorial-02-controller-comparison.md 3. Workflow Guides \u2192 API Reference - All workflow guides link to detailed API documentation - Example: pso-optimization-workflow.md \u2192 api/optimization.md #### \u26a0\ufe0f Weak Patterns (Need Enhancement) 1. Theory \u2192 Implementation - Only 30% of theory docs link to implementation examples - Recommendation: Add links from theory/smc-theory.md to controllers/classical_smc_technical_guide.md 2. Reference \u2192 User Guides - API reference docs rarely link back to user guides - Recommendation: Add \u201cSee also\u201d sections with links to relevant tutorials 3. Cross-Domain Linking - Controllers <-> Optimization <-> Plant models have few cross-links - Recommendation: Add integration examples showing how modules work together": [[7, "cross-reference-patterns-strong-patterns-working-well-1-tutorial-api-documentation-100-of-tutorials-link-to-relevant-api-docs-example-tutorial-01-first-simulation-md-api-simulation-md-2-api-examples-65-of-api-docs-link-to-examples-or-tutorials-example-api-controllers-md-tutorial-02-controller-comparison-md-3-workflow-guides-api-reference-all-workflow-guides-link-to-detailed-api-documentation-example-pso-optimization-workflow-md-api-optimization-md-weak-patterns-need-enhancement-1-theory-implementation-only-30-of-theory-docs-link-to-implementation-examples-recommendation-add-links-from-theory-smc-theory-md-to-controllers-classical-smc-technical-guide-md-2-reference-user-guides-api-reference-docs-rarely-link-back-to-user-guides-recommendation-add-see-also-sections-with-links-to-relevant-tutorials-3-cross-domain-linking-controllers-optimization-plant-models-have-few-cross-links-recommendation-add-integration-examples-showing-how-modules-work-together"]], "3. Dark Mode Support": [[269, "dark-mode-support"]], "3. Demo Content (jupyter-notebooks-demo.md)": [[29, "demo-content-jupyter-notebooks-demo-md"]], "3. Dynamics Model API ### 3.1 DynamicsModel Protocol File: src/plant/models/base/dynamics_interface.py:65 Protocol defining the interface all dynamics models must implement. #### 3.1.1 Protocol Definition ```python": [[61, "dynamics-model-api-3-1-dynamicsmodel-protocol-file-src-plant-models-base-dynamics-interface-py-65-protocol-defining-the-interface-all-dynamics-models-must-implement-3-1-1-protocol-definition-python"]], "3. Early Convergence Stopping": [[216, "early-convergence-stopping"]], "3. Enterprise Factory System ### 3.1 Core Functions ```python": [[80, "enterprise-factory-system-3-1-core-functions-python"]], "3. Finite-Time Convergence Theory": [[85, "finite-time-convergence-theory"]], "3. Fixture Conflicts": [[34, "fixture-conflicts"]], "3. Floating-Point Precision Analysis": [[290, "floating-point-precision-analysis"]], "3. Heroku Deployment": [[90, "heroku-deployment"]], "3. Implementation Corrections": [[204, "implementation-corrections"]], "3. Interactive Guides Index": [[27, "interactive-guides-index"]], "3. Interactive Widgets": [[154, "interactive-widgets"]], "3. Kennedy & Eberhart (1995) - PSO Origins": [[123, "kennedy-eberhart-1995-pso-origins"]], "3. Lyapunov Function for Classical SMC": [[287, "lyapunov-function-for-classical-smc"]], "3. Lyapunov Stability Analysis": [[206, "lyapunov-stability-analysis"]], "3. Lyapunov Stability Theory ### 3.1 Fundamental Lyapunov Theorems Context: Used throughout SMC stability proofs and closed-loop analysis Foundational References: 1. Lyapunov, A. M. (1992). The General Problem of the Stability of Motion. Taylor & Francis. (English translation of 1892 original) - Original treatise on stability theory - Lyapunov\u2019s Direct Method: Stability via energy-like functions 2. Khalil, H. K. (2002). Nonlinear Systems (3rd ed.). Prentice Hall. - Chapter 4: \u201cLyapunov Stability\u201d - Modern treatment of Lyapunov theory - Theorem 4.1 (p. 111): Lyapunov stability theorem - Theorem 4.2 (p. 124): LaSalle\u2019s Invariance Principle - Theorem 4.4 (p. 128): Global asymptotic stability via radially unbounded Lyapunov functions 3. Slotine, J.-J. E., & Li, W. (1991). Applied Nonlinear Control. Prentice Hall. - Chapter 3: \u201cLyapunov Stability Theory\u201d - Design-oriented presentation - Section 3.2 (pp. 77-102): Lyapunov function construction techniques 4. Vidyasagar, M. (2002). Nonlinear Systems Analysis (2nd ed.). SIAM. - Chapter 2: \u201cStability Theory\u201d - Rigorous mathematical treatment - Theorem 2.8 (p. 56): Input-to-state stability (ISS) for disturbed systems Implementation: src/utils/analysis/lyapunov.py": [[3, "lyapunov-stability-theory-3-1-fundamental-lyapunov-theorems-context-used-throughout-smc-stability-proofs-and-closed-loop-analysis-foundational-references-1-lyapunov-a-m-1992-the-general-problem-of-the-stability-of-motion-taylor-francis-english-translation-of-1892-original-original-treatise-on-stability-theory-lyapunov-s-direct-method-stability-via-energy-like-functions-2-khalil-h-k-2002-nonlinear-systems-3rd-ed-prentice-hall-chapter-4-lyapunov-stability-modern-treatment-of-lyapunov-theory-theorem-4-1-p-111-lyapunov-stability-theorem-theorem-4-2-p-124-lasalle-s-invariance-principle-theorem-4-4-p-128-global-asymptotic-stability-via-radially-unbounded-lyapunov-functions-3-slotine-j-j-e-li-w-1991-applied-nonlinear-control-prentice-hall-chapter-3-lyapunov-stability-theory-design-oriented-presentation-section-3-2-pp-77-102-lyapunov-function-construction-techniques-4-vidyasagar-m-2002-nonlinear-systems-analysis-2nd-ed-siam-chapter-2-stability-theory-rigorous-mathematical-treatment-theorem-2-8-p-56-input-to-state-stability-iss-for-disturbed-systems-implementation-src-utils-analysis-lyapunov-py"]], "3. MPC Optimization Problem": [[84, "mpc-optimization-problem"]], "3. Mathematical Analysis of Boundary Layer Effects": [[195, "mathematical-analysis-of-boundary-layer-effects"]], "3. Monitoring Adaptation": [[77, "monitoring-adaptation"]], "3. Numba Acceleration": [[85, "numba-acceleration"]], "3. Optimization Execution Workflow ### 3.1 PSO Tuner Initialization and Setup ```python": [[252, "optimization-execution-workflow-3-1-pso-tuner-initialization-and-setup-python"]], "3. Optimization Theory Notation": [[97, "optimization-theory-notation"]], "3. Orchestrator System (Section 4, ~480 lines) \u2705 Files:": [[59, "orchestrator-system-section-4-480-lines-files"]], "3. PSO Configuration Schema with Parameter Interdependencies ### 3.1 Complete PSO Configuration Structure ```yaml": [[251, "pso-configuration-schema-with-parameter-interdependencies-3-1-complete-pso-configuration-structure-yaml"]], "3. PSO Integration API ### 3.1 PSO Tuner Interface Class Definition:": [[76, "pso-integration-api-3-1-pso-tuner-interface-class-definition"]], "3. PSO Integration Analysis ### 3.1 PSO-Factory Interface Compatibility PSO Requirements for Controller Factory:": [[38, "pso-integration-analysis-3-1-pso-factory-interface-compatibility-pso-requirements-for-controller-factory"]], "3. PSO Optimization": [[265, "pso-optimization"]], "3. PWA Manifest - docs/manifest.json": [[31, "pwa-manifest-docs-manifest-json"]], "3. Parameter Bounds Validation": [[131, "parameter-bounds-validation"]], "3. Performance Optimization Tips": [[77, "performance-optimization-tips"]], "3. Permission Denied (Volume Mounts)": [[91, "permission-denied-volume-mounts"]], "3. Plans Index Documentation Link (1 fixed)": [[26, "plans-index-documentation-link-1-fixed"]], "3. Professional CSS Styling (300+ lines)": [[28, "professional-css-styling-300-lines"]], "3. Provide Proofs with QED Symbols": [[299, "provide-proofs-with-qed-symbols"]], "3. Report a Bug": [[144, "report-a-bug"]], "3. Robustness Analysis": [[84, "robustness-analysis"], [197, "robustness-analysis"]], "3. Simulation Integration": [[84, "simulation-integration"]], "3. Stability Region Analysis": [[156, "stability-region-analysis"]], "3. State Management": [[77, "state-management"]], "3. Super-Twisting SMC Bounds (Issue #2 Resolution)": [[249, "super-twisting-smc-bounds-issue-2-resolution"]], "3. System Architecture": [[62, null]], "3. Use Batch Evaluation": [[133, "use-batch-evaluation"]], "3. Use Safety Guards in Production": [[203, "use-safety-guards-in-production"]], "3. User Guides & Tutorials": [[11, "user-guides-tutorials"]], "3. Web Worker": [[27, "web-worker"]], "3. cvxpy Documentation": [[84, "cvxpy-documentation"]], "3. docs/scripts/fix_all_concatenation.py": [[33, "docs-scripts-fix-all-concatenation-py"]], "3. docs/scripts/fix_remaining_headers.py": [[32, "docs-scripts-fix-remaining-headers-py"]], "3. docs/scripts/fix_transition_hierarchy.py (Phase 9D)": [[24, "docs-scripts-fix-transition-hierarchy-py-phase-9d"]], "3. jupyter-widget": [[29, "jupyter-widget"]], "3.1 Classical SMC Lyapunov Function": [[206, "classical-smc-lyapunov-function"]], "3.1 Gain Validation Fix": [[204, "gain-validation-fix"]], "3.1 High-Performance MPC": [[84, "high-performance-mpc"]], "3.1 IEEE 754 Standard": [[290, "ieee-754-standard"]], "3.1 Linearization Validity": [[84, "linearization-validity"]], "3.1 Loop topology": [[62, "loop-topology"]], "3.1 Lyapunov Function Candidate": [[287, "lyapunov-function-candidate"]], "3.1 Matched Disturbances": [[197, "matched-disturbances"]], "3.1 Monte Carlo with Random Initial Conditions": [[171, "monte-carlo-with-random-initial-conditions"]], "3.1 PSO Dynamics": [[97, "pso-dynamics"]], "3.1 Quadratic Programming Formulation": [[84, "quadratic-programming-formulation"]], "3.1 Reference Trajectory Tracking": [[84, "reference-trajectory-tracking"]], "3.1 Running Experiments": [[320, "running-experiments"]], "3.1 Steady-State Error Analysis": [[195, "steady-state-error-analysis"]], "3.1 Super-Twisting Algorithm Mathematical Foundation": [[249, "super-twisting-algorithm-mathematical-foundation"]], "3.1 With Simulation Runner": [[84, "with-simulation-runner"]], "3.2 Application-Specific Recommendations #### Research & Benchmarking": [[166, "application-specific-recommendations-research-benchmarking"]], "3.2 BaseDynamicsModel Abstract Class File: src/plant/models/base/dynamics_interface.py:130 Abstract base class providing common functionality for concrete dynamics implementations. #### 3.2.1 Class Definition ```python": [[61, "basedynamicsmodel-abstract-class-file-src-plant-models-base-dynamics-interface-py-130-abstract-base-class-providing-common-functionality-for-concrete-dynamics-implementations-3-2-1-class-definition-python"]], "3.2 Chattering Analysis": [[195, "chattering-analysis"]], "3.2 Constraint Handling": [[84, "constraint-handling"]], "3.2 Cost Function Definition": [[97, "cost-function-definition"]], "3.2 Disturbance Rejection": [[84, "disturbance-rejection"]], "3.2 Finite-Time Convergence Analysis": [[249, "finite-time-convergence-analysis"]], "3.2 Finite-Time Stability Context: Used in super-twisting and adaptive SMC convergence analysis Foundational References: 1. Bhat, S. P., & Bernstein, D. S. (2000). \u201cFinite-time stability of continuous autonomous systems.\u201d SIAM Journal on Control and Optimization, 38(3), 751-766. - Formal definition of finite-time stability - Theorem 2.1 (p. 754): Lyapunov characterization of finite-time stability 2. Moulay, E., & Perruquetti, W. (2006). \u201cFinite time stability and stabilization of a class of continuous systems.\u201d Journal of Mathematical Analysis and Applications, 323(2), 1430-1443. - Extends finite-time stability to broader class of systems - Theorem 3 (p. 1436): Sufficient conditions via non-smooth Lyapunov functions 3. Polyakov, A. (2012). \u201cNonlinear feedback design for fixed-time stabilization of linear controllable systems.\u201d IEEE Transactions on Automatic Control, 57(8), 2106-2110. - Fixed-time stability (bounded settling time independent of initial conditions) - Theorem 1 (p. 2107): Design methodology for fixed-time stabilization Implementation: src/controllers/smc/sta_smc.py:180-220": [[3, "finite-time-stability-context-used-in-super-twisting-and-adaptive-smc-convergence-analysis-foundational-references-1-bhat-s-p-bernstein-d-s-2000-finite-time-stability-of-continuous-autonomous-systems-siam-journal-on-control-and-optimization-38-3-751-766-formal-definition-of-finite-time-stability-theorem-2-1-p-754-lyapunov-characterization-of-finite-time-stability-2-moulay-e-perruquetti-w-2006-finite-time-stability-and-stabilization-of-a-class-of-continuous-systems-journal-of-mathematical-analysis-and-applications-323-2-1430-1443-extends-finite-time-stability-to-broader-class-of-systems-theorem-3-p-1436-sufficient-conditions-via-non-smooth-lyapunov-functions-3-polyakov-a-2012-nonlinear-feedback-design-for-fixed-time-stabilization-of-linear-controllable-systems-ieee-transactions-on-automatic-control-57-8-2106-2110-fixed-time-stability-bounded-settling-time-independent-of-initial-conditions-theorem-1-p-2107-design-methodology-for-fixed-time-stabilization-implementation-src-controllers-smc-sta-smc-py-180-220"]], "3.2 Interface contracts": [[62, "interface-contracts"]], "3.2 Numerical Errors in Control Systems": [[290, "numerical-errors-in-control-systems"]], "3.2 Parameter Variations": [[197, "parameter-variations"]], "3.2 Progress Monitoring": [[320, "progress-monitoring"]], "3.2 Properties of the Lyapunov Function": [[287, "properties-of-the-lyapunov-function"]], "3.2 Real-Time Optimized MPC": [[84, "real-time-optimized-mpc"]], "3.2 Slew Rate Limiting": [[84, "slew-rate-limiting"]], "3.2 Statistical Analysis": [[171, "statistical-analysis"]], "3.2 Super-Twisting Lyapunov Analysis": [[206, "super-twisting-lyapunov-analysis"]], "3.2 Surface Computation Consistency": [[204, "surface-computation-consistency"]], "3.2 With Batch Simulation (Not Recommended)": [[84, "with-batch-simulation-not-recommended"]], "3.3 Conservative MPC with SMC Fallback": [[84, "conservative-mpc-with-smc-fallback"]], "3.3 Control Loop Precision Requirements": [[290, "control-loop-precision-requirements"]], "3.3 Data Quality Checks": [[320, "data-quality-checks"]], "3.3 Derivative Computation Fix": [[204, "derivative-computation-fix"]], "3.3 Issue #2 Root Cause Analysis and Resolution": [[249, "issue-2-root-cause-analysis-and-resolution"]], "3.3 LowRankDIPDynamics Implementation File: src/plant/models/lowrank/dynamics.py:27 Simplified double-inverted pendulum dynamics optimized for computational efficiency. #### 3.3.1 Class Definition ```python": [[61, "lowrankdipdynamics-implementation-file-src-plant-models-lowrank-dynamics-py-27-simplified-double-inverted-pendulum-dynamics-optimized-for-computational-efficiency-3-3-1-class-definition-python"]], "3.3 Lyapunov Derivative": [[287, "lyapunov-derivative"]], "3.3 Model Mismatch": [[84, "model-mismatch"]], "3.3 Sensor Noise": [[197, "sensor-noise"]], "3.3 Timing, latency, and fallback": [[62, "timing-latency-and-fallback"]], "3.4 Control Law Design": [[287, "control-law-design"]], "3.4 Main block diagram": [[62, "main-block-diagram"]], "3.4 NumPy Validation Results": [[290, "id3"]], "3.4 STA Gain Bounds with Issue #2 Corrections": [[249, "sta-gain-bounds-with-issue-2-corrections"]], "3D Energy Bowl": [[156, "d-energy-bowl"]], "3D Interactive Pendulum Visualization": [[152, null], [153, "d-interactive-pendulum-visualization"]], "3\u00a0Optimization Engine Breakdown": [[224, "optimization-engine-breakdown"], [234, "optimization-engine-breakdown"]], "3\u00a0Simulation Methodology": [[227, "simulation-methodology"], [231, "simulation-methodology"]], "4.": [[143, "id4"], [144, "id10"], [144, "id39"]], "4. AWS EC2 / VPS Deployment": [[90, "aws-ec2-vps-deployment"]], "4. Adaptive Boundary Layer Theory": [[195, "adaptive-boundary-layer-theory"]], "4. Adaptive Control Theory ### 4.1 Adaptive Law Design Context: Used in Adaptive SMC and Hybrid Adaptive-STA SMC Foundational References: 1. \u00c5str\u00f6m, K. J., & Wittenmark, B. (1995). Adaptive Control (2nd ed.). Dover Publications. - Chapter 2: \u201cReal-Time Parameter Estimation\u201d - Least-squares and gradient methods - Chapter 5: \u201cModel Reference Adaptive Systems (MRAS)\u201d - Lyapunov-based adaptation 2. Ioannou, P. A., & Sun, J. (1996). Robust Adaptive Control. Prentice Hall. - Chapter 4: \u201cParameter Identifiers\u201d - Gradient, least-squares, and recursive methods - Chapter 8: \u201cRobust Adaptive Laws\u201d - \u03c3-modification, e-modification, projection 3. Narendra, K. S., & Annaswamy, A. M. (2005). Stable Adaptive Systems. Dover Publications. - Chapter 3: \u201cSimple Adaptive Control\u201d - Direct and indirect adaptive control - Section 3.3 (pp. 87-115): Stability analysis via Lyapunov methods Implementation: src/controllers/smc/adaptive_smc.py:145-180": [[3, "adaptive-control-theory-4-1-adaptive-law-design-context-used-in-adaptive-smc-and-hybrid-adaptive-sta-smc-foundational-references-1-astrom-k-j-wittenmark-b-1995-adaptive-control-2nd-ed-dover-publications-chapter-2-real-time-parameter-estimation-least-squares-and-gradient-methods-chapter-5-model-reference-adaptive-systems-mras-lyapunov-based-adaptation-2-ioannou-p-a-sun-j-1996-robust-adaptive-control-prentice-hall-chapter-4-parameter-identifiers-gradient-least-squares-and-recursive-methods-chapter-8-robust-adaptive-laws-modification-e-modification-projection-3-narendra-k-s-annaswamy-a-m-2005-stable-adaptive-systems-dover-publications-chapter-3-simple-adaptive-control-direct-and-indirect-adaptive-control-section-3-3-pp-87-115-stability-analysis-via-lyapunov-methods-implementation-src-controllers-smc-adaptive-smc-py-145-180"]], "4. Adaptive SMC Gain Bounds": [[249, "adaptive-smc-gain-bounds"]], "4. Adaptive SMC Theory ### 4.1 Motivation and Problem Statement Challenge: Classical SMC requires prior knowledge of disturbance bounds (K > ||d||\u221e). In practice:": [[205, "adaptive-smc-theory-4-1-motivation-and-problem-statement-challenge-classical-smc-requires-prior-knowledge-of-disturbance-bounds-k-d-in-practice"]], "4. Advanced Features": [[154, "advanced-features"]], "4. Benchmark Comparison Methodology ### 4.1 Overview Rigorous statistical comparison of multiple controllers/methods. Implementation: src/analysis/validation/benchmarking.py (841 lines) Workflow:": [[310, "benchmark-comparison-methodology-4-1-overview-rigorous-statistical-comparison-of-multiple-controllers-methods-implementation-src-analysis-validation-benchmarking-py-841-lines-workflow"]], "4. CUDA/GPU Not Found": [[91, "cuda-gpu-not-found"]], "4. Chattering Reduction Effectiveness": [[197, "chattering-reduction-effectiveness"]], "4. Configuration Example (YAML)": [[77, "configuration-example-yaml"]], "4. Demo Page (182 lines)": [[28, "demo-page-182-lines"]], "4. Demo Page - mathematical-visualizations-demo.md": [[30, "demo-page-mathematical-visualizations-demo-md"]], "4. Developer Documentation": [[11, "developer-documentation"]], "4. Discrete-Time SMC Stability": [[290, "discrete-time-smc-stability"]], "4. Documentation Updates": [[29, "documentation-updates"]], "4. Documentation in Config Files": [[131, "documentation-in-config-files"]], "4. Error Handling and Validation ### 4.1 Parameter Validation API Validation Framework:": [[76, "error-handling-and-validation-4-1-parameter-validation-api-validation-framework"]], "4. Gain Evolution Visualization": [[77, "gain-evolution-visualization"]], "4. Gain Selection Criteria": [[85, "gain-selection-criteria"]], "4. Handle Early Stopping Gracefully": [[203, "handle-early-stopping-gracefully"]], "4. Higher-Order Sliding Surfaces": [[204, "higher-order-sliding-surfaces"]], "4. Hybrid Adaptive STA-SMC": [[132, "hybrid-adaptive-sta-smc"]], "4. HybridAdaptiveSTASMC (src/controllers/smc/hybrid_adaptive_sta_smc.py) Docstring Coverage: \u2705 100% Class Documentation (Lines 29-95):": [[55, "hybridadaptivestasmc-src-controllers-smc-hybrid-adaptive-sta-smc-py-docstring-coverage-100-class-documentation-lines-29-95"]], "4. Implementation References": [[84, "implementation-references"]], "4. Import/Path Issues": [[34, "import-path-issues"]], "4. Integrator System (Section 5, ~470 lines) \u2705 Files:": [[59, "integrator-system-section-5-470-lines-files"]], "4. Interface Specifications ### 4.1 PSO-Controller Interface Contract Required Controller Attributes:": [[250, "interface-specifications-4-1-pso-controller-interface-contract-required-controller-attributes"]], "4. Khalil (2002) - Nonlinear Systems": [[123, "khalil-2002-nonlinear-systems"]], "4. Lyapunov Stability Analysis": [[77, "lyapunov-stability-analysis"]], "4. Matrix Conditioning and Ill-Conditioned Problems ### 4.1 Condition Number Analysis Definition 4.1 (Condition Number): For a quadratic objective with Hessian \\mathbf{H}: $\\kappa(\\mathbf{H}) = \\frac{\\lambda_{max}(\\mathbf{H})}{\\lambda_{min}(\\mathbf{H})} **Impact on PSO Convergence:** - **Well-conditioned (\\kappa < 10^3$):** Fast, uniform convergence": [[291, "matrix-conditioning-and-ill-conditioned-problems-4-1-condition-number-analysis-definition-4-1-condition-number-for-a-quadratic-objective-with-hessian-mathbf-h-kappa-mathbf-h-frac-lambda-max-mathbf-h-lambda-min-mathbf-h-impact-on-pso-convergence-well-conditioned-kappa-10-3-fast-uniform-convergence"]], "4. Most Referenced Documents Top 10 Most Linked Documents: | Document | Incoming Links | Category |": [[7, "most-referenced-documents-top-10-most-linked-documents-document-incoming-links-category"]], "4. Optimization Workflow and Validation Protocols ### 4.1 End-to-End PSO Optimization Pipeline ```mermaid": [[251, "optimization-workflow-and-validation-protocols-4-1-end-to-end-pso-optimization-pipeline-mermaid"]], "4. Orchestrator System API ### 4.1 Orchestrator Base Interface File: src/simulation/core/interfaces.py:85 Base interface defining execution strategy protocol. ```python": [[61, "orchestrator-system-api-4-1-orchestrator-base-interface-file-src-simulation-core-interfaces-py-85-base-interface-defining-execution-strategy-protocol-python"]], "4. PSO Integration (Hyperparameter Tuning)": [[84, "pso-integration-hyperparameter-tuning"]], "4. PWA Icons - docs/_static/icons/": [[31, "pwa-icons-docs-static-icons"]], "4. Parameter Interdependency Analysis ### 4.1 Mathematical Interdependency Matrix Classical SMC Parameter Relationships: ```": [[247, "parameter-interdependency-analysis-4-1-mathematical-interdependency-matrix-classical-smc-parameter-relationships"]], "4. Performance Metrics Notation": [[97, "performance-metrics-notation"]], "4. Preventive Maintenance ### 4.1 Regular Health Monitoring Automated Health Check Script: ```bash": [[254, "preventive-maintenance-4-1-regular-health-monitoring-automated-health-check-script-bash"]], "4. Reachability Conditions": [[206, "reachability-conditions"]], "4. Robustness Analysis": [[77, "robustness-analysis"]], "4. Simulation Settings": [[265, "simulation-settings"]], "4. Sliding Mode Control Surface": [[156, "sliding-mode-control-surface"]], "4. Solution Method": [[84, "solution-method"]], "4. Stability Proof for Classical SMC": [[287, "stability-proof-for-classical-smc"]], "4. Styling": [[27, "styling"]], "4. Tuning Guidelines": [[85, "tuning-guidelines"]], "4. Use Cases & Operating Modes": [[306, null]], "4. Use Math Blocks for Equations": [[299, "use-math-blocks-for-equations"]], "4. Vectorized Implementation Mathematics ### 4.1 Batch Fitness Evaluation Particle Matrix:": [[246, "vectorized-implementation-mathematics-4-1-batch-fitness-evaluation-particle-matrix"]], "4. docs/scripts/fix_transition_hierarchy.py": [[33, "docs-scripts-fix-transition-hierarchy-py"]], "4.1 Adaptive Control Mathematical Framework": [[249, "adaptive-control-mathematical-framework"]], "4.1 Chattering Sources and Mechanisms": [[197, "chattering-sources-and-mechanisms"]], "4.1 Controller Gain Sweep": [[171, "controller-gain-sweep"]], "4.1 Mathematical Theory": [[290, "id4"]], "4.1 Network Latency Simulation": [[177, "network-latency-simulation"]], "4.1 NumPy Validation: Reaching Time Bounds": [[287, "numpy-validation-reaching-time-bounds"]], "4.1 Quadratic Programming via cvxpy": [[84, "quadratic-programming-via-cvxpy"]], "4.1 Quick Start (Balanced)": [[85, "quick-start-balanced"]], "4.1 Sliding Mode Reaching Condition": [[206, "sliding-mode-reaching-condition"]], "4.1 Standard Control Metrics": [[97, "standard-control-metrics"]], "4.1 State-Dependent Boundary Layer": [[195, "state-dependent-boundary-layer"]], "4.1 Statistical Analysis": [[320, "statistical-analysis"]], "4.1 Super-Twisting Surface": [[204, "super-twisting-surface"]], "4.1\u00a0High\u2011order and Super\u2011twisting Methods": [[224, "highorder-and-supertwisting-methods"], [234, "highorder-and-supertwisting-methods"]], "4.1\u00a0Origin of Chattering": [[227, "origin-of-chattering"], [231, "origin-of-chattering"]], "4.2 Adaptation Stability Analysis": [[249, "adaptation-stability-analysis"]], "4.2 Adaptive Surface Design": [[204, "adaptive-surface-design"]], "4.2 Chattering Index Comparison": [[197, "chattering-index-comparison"]], "4.2 Computational Complexity": [[84, "computational-complexity"]], "4.2 Convergence Analysis with Adaptive Layer": [[195, "convergence-analysis-with-adaptive-layer"]], "4.2 Equivalent Control Method": [[206, "equivalent-control-method"]], "4.2 Faster Convergence": [[85, "faster-convergence"]], "4.2 Implementation Analysis": [[290, "implementation-analysis"]], "4.2 Parameter Projection & Robustness Context: Used to ensure bounded adaptive gains Foundational References: 1. Ioannou, P. A., & Kokotovic, P. V. (1983). Adaptive Systems with Reduced Models. Springer-Verlag. - Chapter 5: \u201cRobust Adaptive Laws\u201d - Introduction of parameter projection - Theorem 5.2 (p. 143): Projection ensures bounded parameter estimates 2. Pomet, J. B., & Praly, L. (1992). \u201cAdaptive nonlinear regulation: Estimation from the Lyapunov equation.\u201d IEEE Transactions on Automatic Control, 37(6), 729-740. - Projection algorithm for constrained parameter adaptation - Lemma 1 (p. 732): Ensures \\theta \\in \\Theta (compact convex set) Implementation: src/controllers/smc/adaptive_smc.py:200-225": [[3, "parameter-projection-robustness-context-used-to-ensure-bounded-adaptive-gains-foundational-references-1-ioannou-p-a-kokotovic-p-v-1983-adaptive-systems-with-reduced-models-springer-verlag-chapter-5-robust-adaptive-laws-introduction-of-parameter-projection-theorem-5-2-p-143-projection-ensures-bounded-parameter-estimates-2-pomet-j-b-praly-l-1992-adaptive-nonlinear-regulation-estimation-from-the-lyapunov-equation-ieee-transactions-on-automatic-control-37-6-729-740-projection-algorithm-for-constrained-parameter-adaptation-lemma-1-p-732-ensures-theta-in-theta-compact-convex-set-implementation-src-controllers-smc-adaptive-smc-py-200-225"]], "4.2 Performance Metrics Selection Key Principle: Select metrics aligned with application requirements. Standard Control Metrics: | Metric | Definition | Use Case |": [[310, "performance-metrics-selection-key-principle-select-metrics-aligned-with-application-requirements-standard-control-metrics-metric-definition-use-case"]], "4.2 Sensor Noise Injection": [[177, "sensor-noise-injection"]], "4.2 Visualization": [[320, "visualization"]], "4.2\u00a0Implementation and Boundary Layer Approximation": [[227, "implementation-and-boundary-layer-approximation"], [231, "implementation-and-boundary-layer-approximation"]], "4.2\u00a0Terminal and Prescribed\u2011Performance SMC": [[224, "terminal-and-prescribedperformance-smc"], [234, "terminal-and-prescribedperformance-smc"]], "4.3 Adaptive Gain Bounds": [[249, "adaptive-gain-bounds"]], "4.3 BatchOrchestrator File: src/simulation/orchestrators/batch.py:18 Vectorized execution for multiple simultaneous simulations (PSO optimization, Monte Carlo). #### 4.3.1 Class Definition ```python": [[61, "batchorchestrator-file-src-simulation-orchestrators-batch-py-18-vectorized-execution-for-multiple-simultaneous-simulations-pso-optimization-monte-carlo-4-3-1-class-definition-python"]], "4.3 Frequency Analysis": [[197, "frequency-analysis"]], "4.3 Multi-Machine Setup (Real Hardware)": [[177, "multi-machine-setup-real-hardware"]], "4.3 NumPy Validation Results": [[290, "id5"]], "4.3 Smoother Control": [[85, "smoother-control"]], "4.3 Statistical Significance Testing Workflow: 1. Run Trials: Each method \u00d7 each scenario \u00d7 multiple trials": [[310, "statistical-significance-testing-workflow-1-run-trials-each-method-each-scenario-multiple-trials"]], "4.3\u00a0Integral and Dynamic Integral SMC": [[224, "integral-and-dynamic-integral-smc"], [234, "integral-and-dynamic-integral-smc"]], "4.3\u00a0Physical Consequences of Chattering": [[227, "physical-consequences-of-chattering"], [231, "physical-consequences-of-chattering"]], "4.4 PSO Optimization": [[85, "pso-optimization"]], "4.4 ParallelOrchestrator File: src/simulation/orchestrators/parallel.py Multi-threaded execution for large-scale parameter studies. #### 4.4.1 Features - \u2705 Thread pool management (configurable pool size)": [[61, "parallelorchestrator-file-src-simulation-orchestrators-parallel-py-multi-threaded-execution-for-large-scale-parameter-studies-4-4-1-features-thread-pool-management-configurable-pool-size"]], "4.4 Robustness Comparison Robustness Measures: 1. Coefficient of Variation (CV): CV = \u03c3 / |\u03bc| Lower CV = more robust (consistent performance) 2. Interquartile Range (IQR): IQR = Q\u2083 - Q\u2081 Smaller IQR = less variability 3. Worst-Case Performance: Worst-case = 95th percentile of error Critical for safety-critical systems Implementation:": [[310, "robustness-comparison-robustness-measures-1-coefficient-of-variation-cv-cv-lower-cv-more-robust-consistent-performance-2-interquartile-range-iqr-iqr-q3-q1-smaller-iqr-less-variability-3-worst-case-performance-worst-case-95th-percentile-of-error-critical-for-safety-critical-systems-implementation"]], "4.4 Trade-offs: Chattering vs Tracking Error": [[197, "trade-offs-chattering-vs-tracking-error"]], "4.4\u00a0Hierarchical Sliding\u2011Mode Control": [[224, "hierarchical-slidingmode-control"], [234, "hierarchical-slidingmode-control"]], "4.4\u00a0Visualisation of Chattering": [[227, "visualisation-of-chattering"], [231, "visualisation-of-chattering"]], "4.5 Efficiency Comparison Computational Efficiency Metrics: 1. Mean Computation Time: Average time per simulation": [[310, "efficiency-comparison-computational-efficiency-metrics-1-mean-computation-time-average-time-per-simulation"]], "4.6.2 Borda Count (Multi-Metric) Description: Aggregate rankings across multiple metrics. Algorithm: 1. Rank methods for each metric": [[310, "borda-count-multi-metric-description-aggregate-rankings-across-multiple-metrics-algorithm-1-rank-methods-for-each-metric"]], "4.6.3 Weighted Score Description: Weight metrics by importance. ```": [[310, "weighted-score-description-weight-metrics-by-importance"]], "4\u00a0Classic Sliding\u00a0Mode Control": [[227, "classic-sliding-mode-control"], [231, "classic-sliding-mode-control"]], "4\u00a0Innovations in Sliding\u2011Mode Control Formulations": [[224, "innovations-in-slidingmode-control-formulations"], [234, "innovations-in-slidingmode-control-formulations"]], "4\u2003Problem Definition and Objectives": [[223, "problem-definition-and-objectives"], [235, "problem-definition-and-objectives"]], "5 Chattering & Mitigation": [[227, null]], "5.": [[143, "id5"], [144, "id13"]], "5. Adaptive PSO Extensions ### 5.1 Time-Varying Inertia Weight Linear Decay Schedule:": [[246, "adaptive-pso-extensions-5-1-time-varying-inertia-weight-linear-decay-schedule"]], "5. Analysis & Verification Plan ## \ud83d\udd27 Recent Testing Infrastructure Improvements (September 2024) ### Vector Simulation Engine Robustness The vector simulation engine (src/simulation/engines/vector_sim.py) has been enhanced with edge case handling and improved reliability: #### \u2705 Fixes Applied 1. Scalar Control Input Support - Issue: IndexError when control input was 0-dimensional scalar - Fix: Added proper scalar handling with .item() extraction for 0D arrays - Benefit: Supports simplified test scenarios and edge cases 2. Flexible Control Sequence Length - Issue: Crashes when simulation horizon exceeded control input sequence length - Fix: Implemented graceful bounds checking with min(i, length-1) indexing strategy - Benefit: Uses last available control input when sequence is exhausted 3. Empty State Array Handling - Issue: Tests expected exceptions for empty arrays, but function handled them gracefully - Fix: Updated test expectations to match actual behavior (returns (1, 0) shaped array) - Benefit: Consistent behavior for degenerate cases 4. Mock Function Accuracy - Issue: Test mocks didn\u2019t reflect actual physics-based state evolution - Fix: Updated mock dynamics to properly simulate state + dt * state_derivative evolution - Benefit: Tests now validate realistic controller-plant interactions #### \u2705 Test Coverage Improvements Vector Simulation Test Suite: Now 100% passing (20/21 tests pass, 1 skipped)": [[45, null]], "5. Chattering Reduction Mechanism": [[85, "chattering-reduction-mechanism"]], "5. Complexity Analysis ### 5.1 Time Complexity AST Parsing Phase: $T_{\\text{parse}} = O(n) where n$ = file size in bytes - Python\u2019s ast.parse() uses PEG parser (Python 3.9+)": [[297, "complexity-analysis-5-1-time-complexity-ast-parsing-phase-t-text-parse-o-n-where-n-file-size-in-bytes-python-s-ast-parse-uses-peg-parser-python-3-9"]], "5. Computational Complexity": [[197, "computational-complexity"]], "5. Configuration Update - conf.py": [[30, "configuration-update-conf-py"]], "5. Control Signal Analysis": [[156, "control-signal-analysis"]], "5. Dead Zone Functionality": [[77, "dead-zone-functionality"]], "5. Disturbance Injection": [[265, "disturbance-injection"]], "5. Emergency Recovery Procedures ### 5.1 Critical Failure Recovery System Recovery Checklist: ```bash": [[254, "emergency-recovery-procedures-5-1-critical-failure-recovery-system-recovery-checklist-bash"]], "5. Examples & Code Samples": [[11, "examples-code-samples"]], "5. Fault Detection & Isolation ### 5.1 Hysteresis-Based Threshold Logic (FORMAL-THEOREM-001) Claim: \u201cHysteresis with deadband \\delta prevents oscillation for residuals with bounded derivative.\u201d Location: docs/fdi_threshold_calibration_methodology.md:261 Foundational References: 1. Gertler, J. (1998). Fault Detection and Diagnosis in Engineering Systems. CRC Press. - Chapter 5: \u201cThreshold Selection\u201d - Statistical and deterministic methods - Section 5.3 (pp. 142-158): Hysteresis thresholds for noise rejection 2. Chen, J., & Patton, R. J. (1999). Robust Model-Based Fault Diagnosis for Dynamic Systems. Springer. - Chapter 4: \u201cThreshold Determination\u201d - Probabilistic and deterministic approaches - Theorem 4.3 (p. 112): Hysteresis eliminates chattering for |\\dot{r}| < M and \\delta > M\\tau 3. Isermann, R. (2006). Fault-Diagnosis Systems: An Introduction from Fault Detection to Fault Tolerance. Springer. - Chapter 7: \u201cFault Detection with Process Models\u201d - Residual evaluation methods - Section 7.4 (pp. 287-304): Design guidelines for hysteresis thresholds 4. Ding, S. X. (2008). Model-based Fault Diagnosis Techniques: Design Schemes, Algorithms, and Tools. Springer. - Chapter 5: \u201cThreshold Computation\u201d - Adaptive and robust threshold design - Algorithm 5.2 (p. 168): Optimal deadband selection for bounded disturbances Implementation: docs/fdi_threshold_calibration_methodology.md": [[3, "fault-detection-isolation-5-1-hysteresis-based-threshold-logic-formal-theorem-001-claim-hysteresis-with-deadband-delta-prevents-oscillation-for-residuals-with-bounded-derivative-location-docs-fdi-threshold-calibration-methodology-md-261-foundational-references-1-gertler-j-1998-fault-detection-and-diagnosis-in-engineering-systems-crc-press-chapter-5-threshold-selection-statistical-and-deterministic-methods-section-5-3-pp-142-158-hysteresis-thresholds-for-noise-rejection-2-chen-j-patton-r-j-1999-robust-model-based-fault-diagnosis-for-dynamic-systems-springer-chapter-4-threshold-determination-probabilistic-and-deterministic-approaches-theorem-4-3-p-112-hysteresis-eliminates-chattering-for-dot-r-m-and-delta-m-tau-3-isermann-r-2006-fault-diagnosis-systems-an-introduction-from-fault-detection-to-fault-tolerance-springer-chapter-7-fault-detection-with-process-models-residual-evaluation-methods-section-7-4-pp-287-304-design-guidelines-for-hysteresis-thresholds-4-ding-s-x-2008-model-based-fault-diagnosis-techniques-design-schemes-algorithms-and-tools-springer-chapter-5-threshold-computation-adaptive-and-robust-threshold-design-algorithm-5-2-p-168-optimal-deadband-selection-for-bounded-disturbances-implementation-docs-fdi-threshold-calibration-methodology-md"]], "5. Hybrid Adaptive STA-SMC Bounds": [[249, "hybrid-adaptive-sta-smc-bounds"]], "5. Hysteresis Implementation": [[195, "hysteresis-implementation"]], "5. Integration Examples": [[154, "integration-examples"]], "5. Integrator System API ### 5.1 IntegratorFactory File: src/simulation/integrators/factory.py:22 Factory pattern for creating numerical integrator instances with validation and consistency checking. #### 5.1.1 Integrator Registry The factory maintains a registry of 7 integrator types: | Type | Class | Order | Adaptive | Description |": [[61, "integrator-system-api-5-1-integratorfactory-file-src-simulation-integrators-factory-py-22-factory-pattern-for-creating-numerical-integrator-instances-with-validation-and-consistency-checking-5-1-1-integrator-registry-the-factory-maintains-a-registry-of-7-integrator-types-type-class-order-adaptive-description"]], "5. Lyapunov Stability Analysis": [[204, "lyapunov-stability-analysis"]], "5. Mathematical Failure Modes": [[206, "mathematical-failure-modes"]], "5. Numerical Stability Location: src/utils/numerical_stability/safe_operations.py ### 5.1 Safe Division ```python": [[79, "numerical-stability-location-src-utils-numerical-stability-safe-operations-py-5-1-safe-division-python"]], "5. Orphaned Documents Total Orphaned: 721 / 723 (99.7%) Breakdown:": [[7, "orphaned-documents-total-orphaned-721-723-99-7-breakdown"]], "5. Output Schema Reference ### 5.1 claims_inventory.json Structure Top-Level Schema: ```json": [[298, "output-schema-reference-5-1-claims-inventory-json-structure-top-level-schema-json"]], "5. PSO Integration Patterns ### 5.1 PSO-Optimized Controller Creation ```python": [[80, "pso-integration-patterns-5-1-pso-optimized-controller-creation-python"]], "5. PWA Registration - docs/_static/pwa-register.js": [[31, "pwa-registration-docs-static-pwa-register-js"]], "5. Performance API and Benchmarking ### 5.1 Performance Monitoring Performance Metrics Interface:": [[76, "performance-api-and-benchmarking-5-1-performance-monitoring-performance-metrics-interface"]], "5. Performance Architecture ### 5.1 Computational Optimization Vectorization Strategy:": [[250, "performance-architecture-5-1-computational-optimization-vectorization-strategy"]], "5. Quality Gates and Acceptance Criteria ### 5.1 Automated Quality Gate System ```python": [[252, "quality-gates-and-acceptance-criteria-5-1-automated-quality-gate-system-python"]], "5. Regularization in PSO Optimization": [[290, "regularization-in-pso-optimization"]], "5. Result Container System (Section 6, ~260 lines) \u2705 Files:": [[59, "result-container-system-section-6-260-lines-files"]], "5. Sample Data Files": [[28, "sample-data-files"]], "5. Slotine & Li (1991) - Applied Nonlinear Control": [[123, "slotine-li-1991-applied-nonlinear-control"]], "5. Slow Build Times": [[91, "slow-build-times"]], "5. Statistical Analysis Notation": [[97, "statistical-analysis-notation"]], "5. Super-Twisting Algorithm Stability": [[287, "super-twisting-algorithm-stability"]], "5. SwingUpSMC (src/controllers/specialized/swing_up_smc.py) Docstring Coverage: \u2705 100% Class Documentation (Lines 19-34):": [[55, "swingupsmc-src-controllers-specialized-swing-up-smc-py-docstring-coverage-100-class-documentation-lines-19-34"]], "5. Tuning Guidelines": [[77, "tuning-guidelines"]], "5. Uncertainty Quantification ### 5.1 Overview Quantify uncertainty in performance predictions and stability guarantees. Sources of Uncertainty:": [[310, "uncertainty-quantification-5-1-overview-quantify-uncertainty-in-performance-predictions-and-stability-guarantees-sources-of-uncertainty"]], "5. Use Section Headers for Context": [[299, "use-section-headers-for-context"]], "5. uses Vectorization": [[203, "uses-vectorization"]], "5.1 Boundary Layer Computation Failures": [[206, "boundary-layer-computation-failures"]], "5.1 Candidate Lyapunov Function": [[204, "candidate-lyapunov-function"]], "5.1 Expected Performance (Estimates)": [[171, "expected-performance-estimates"]], "5.1 Hybrid Control Architecture": [[249, "hybrid-control-architecture"]], "5.1 Mathematical Definition": [[195, "mathematical-definition"]], "5.1 Mathematical Theory": [[290, "id6"]], "5.1 Monte Carlo Validation": [[97, "monte-carlo-validation"]], "5.1 Per-Timestep Cost Analysis": [[197, "per-timestep-cost-analysis"]], "5.1 Quick Start (Balanced)": [[77, "quick-start-balanced"]], "5.1 Reproducibility Check": [[320, "reproducibility-check"]], "5.1 Super-Twisting Lyapunov Function": [[287, "super-twisting-lyapunov-function"]], "5.1\u00a0Hybrid PSO and Enhanced PSO": [[224, "hybrid-pso-and-enhanced-pso"], [234, "hybrid-pso-and-enhanced-pso"]], "5.2 Computational Cost Summary": [[197, "computational-cost-summary"]], "5.2 Confidence Intervals Parametric CI (Normal Assumption): ```": [[310, "confidence-intervals-parametric-ci-normal-assumption"]], "5.2 Equivalent Control Singularities": [[206, "equivalent-control-singularities"]], "5.2 Fast Adaptation": [[77, "fast-adaptation"]], "5.2 Fixed-Step Integrators #### 5.2.1 ForwardEuler File: src/simulation/integrators/fixed_step/euler.py First-order explicit Euler method: x_{n+1} = x_n + dt * f(x_n, u_n, t_n) Properties:": [[61, "fixed-step-integrators-5-2-1-forwardeuler-file-src-simulation-integrators-fixed-step-euler-py-first-order-explicit-euler-method-x-n-1-x-n-dt-f-x-n-u-n-t-n-properties"]], "5.2 Hypothesis Testing": [[97, "hypothesis-testing"]], "5.2 Memory Management": [[171, "memory-management"]], "5.2 NumPy Validation: Super-Twisting Gain Selection": [[287, "numpy-validation-super-twisting-gain-selection"]], "5.2 PSO Parameter Bounds Design": [[290, "pso-parameter-bounds-design"]], "5.2 Reduced Parameter Set": [[249, "reduced-parameter-set"]], "5.2 Sensitivity Analysis": [[320, "sensitivity-analysis"]], "5.2 Stability Analysis with Hysteresis": [[195, "stability-analysis-with-hysteresis"]], "5.2 Stability Condition": [[204, "stability-condition"]], "5.2\u00a0PSO\u2011tuned Super\u2011twisting SMC \u2013 A Concrete Example": [[224, "psotuned-supertwisting-smc-a-concrete-example"], [234, "psotuned-supertwisting-smc-a-concrete-example"]], "5.3 Adaptive Integrators #### 5.3.1 DormandPrince45 File: src/simulation/integrators/adaptive/runge_kutta.py Dormand-Prince 4th/5th order adaptive Runge-Kutta method (DP45) - Recommended for high-accuracy requirements. Properties:": [[61, "adaptive-integrators-5-3-1-dormandprince45-file-src-simulation-integrators-adaptive-runge-kutta-py-dormand-prince-4th-5th-order-adaptive-runge-kutta-method-dp45-recommended-for-high-accuracy-requirements-properties"]], "5.3 Conservative Adaptation": [[77, "conservative-adaptation"]], "5.3 Gain Constraint Violations": [[206, "gain-constraint-violations"]], "5.3 NumPy Validation Results": [[290, "id7"]], "5.3 Peer Review Simulation": [[320, "peer-review-simulation"]], "5.3 Reaching Law Implementation": [[204, "reaching-law-implementation"]], "5.3 Real-Time Performance": [[197, "real-time-performance"]], "5.3\u00a0PSO\u2011tuned Hierarchical SMC": [[224, "psotuned-hierarchical-smc"], [234, "psotuned-hierarchical-smc"]], "5.4 Chattering Reduction": [[77, "chattering-reduction"]], "5.4 Optimization Opportunities": [[197, "optimization-opportunities"]], "5.4 Risk Analysis for Safety-Critical Systems Value at Risk (VaR): ```": [[310, "risk-analysis-for-safety-critical-systems-value-at-risk-var"]], "5.5 Integrator Selection Guide #### 5.5.1 Decision Tree ```": [[61, "integrator-selection-guide-5-5-1-decision-tree"]], "5.5 PSO Optimization": [[77, "pso-optimization"]], "5\u00a0Advancements in Metaheuristic Optimisation for SMC Parameter Tuning": [[224, "advancements-in-metaheuristic-optimisation-for-smc-parameter-tuning"], [234, "advancements-in-metaheuristic-optimisation-for-smc-parameter-tuning"]], "5\u00a0Chattering\u00a0Mitigation Strategy\u00a0I:\u00a0Boundary\u00a0Layer\u00a0Method": [[227, "chattering-mitigation-strategy-i-boundary-layer-method"], [231, "chattering-mitigation-strategy-i-boundary-layer-method"]], "6 Custom Sphinx Directives": [[30, "custom-sphinx-directives"]], "6-Agent Orchestration Deployment Results ### Strategic Coordination Success Matrix | Agent | Role | Deliverables | Success Rate | Integration Score |": [[218, "agent-orchestration-deployment-results-strategic-coordination-success-matrix-agent-role-deliverables-success-rate-integration-score"]], "6.": [[144, "id17"]], "6. Adaptive SMC Stability": [[287, "adaptive-smc-stability"]], "6. Bounds Validation and Safety Constraints": [[249, "bounds-validation-and-safety-constraints"]], "6. Conclusion This troubleshooting and maintenance manual provides complete procedures for maintaining PSO system health and resolving issues. Key manual sections include: Diagnostic Framework:": [[254, "conclusion-this-troubleshooting-and-maintenance-manual-provides-complete-procedures-for-maintaining-pso-system-health-and-resolving-issues-key-manual-sections-include-diagnostic-framework"]], "6. Configuration & Deployment": [[11, "configuration-deployment"]], "6. Configuration Migration and Backward Compatibility ### 6.1 Configuration Schema Evolution ```yaml": [[251, "configuration-migration-and-backward-compatibility-6-1-configuration-schema-evolution-yaml"]], "6. Configuration Migration and Versioning ### 6.1 Schema Versioning Strategy ```yaml": [[247, "configuration-migration-and-versioning-6-1-schema-versioning-strategy-yaml"]], "6. Convergence Analysis": [[206, "convergence-analysis"]], "6. Convergence Analysis Comparison ### 6.1 Convergence Rate Summary | Controller | Convergence Type | Rate | Time to Surface | Steady-State Error |": [[205, "convergence-analysis-comparison-6-1-convergence-rate-summary-controller-convergence-type-rate-time-to-surface-steady-state-error"]], "6. Error Propagation and Uncertainty Quantification": [[290, "error-propagation-and-uncertainty-quantification"]], "6. Integration with Control Systems ### 6.1 Validation Workflow for New Controllers Standard Validation Protocol: ```": [[310, "integration-with-control-systems-6-1-validation-workflow-for-new-controllers-standard-validation-protocol"]], "6. LaTeX Integration Guidelines": [[97, "latex-integration-guidelines"]], "6. MPCController (src/controllers/mpc/mpc_controller.py) Docstring Coverage: \u2705 100% Class Documentation (Lines 167-173):": [[55, "mpccontroller-src-controllers-mpc-mpc-controller-py-docstring-coverage-100-class-documentation-lines-167-173"]], "6. Moreno & Osorio (2012) - Strict Lyapunov for STA": [[123, "moreno-osorio-2012-strict-lyapunov-for-sta"]], "6. Multi-Parameter Sweep": [[156, "multi-parameter-sweep"]], "6. Numerical Implementation Considerations": [[195, "numerical-implementation-considerations"]], "6. Numerical Methods & Integration ### 6.1 Runge-Kutta Methods Context: Used for simulation of DIP dynamics Foundational References: 1. Press, W. H., Teukolsky, S. A., Vetterling, W. T., & Flannery, B. P. (2007). Numerical Recipes: The Art of Scientific Computing (3rd ed.). Cambridge University Press. - Chapter 17: \u201cIntegration of Ordinary Differential Equations\u201d - Section 17.1 (pp. 907-918): Runge-Kutta methods (RK4, adaptive RK45) 2. Hairer, E., N\u00f8rsett, S. P., & Wanner, G. (1993). Solving Ordinary Differential Equations I: Nonstiff Problems (2nd ed.). Springer-Verlag. - Chapter II: \u201cRunge-Kutta and Extrapolation Methods\u201d - Theorem II.2.13 (p. 134): Order conditions for explicit RK methods 3. Butcher, J. C. (2016). Numerical Methods for Ordinary Differential Equations (3rd ed.). Wiley. - Chapter 3: \u201cRunge-Kutta Methods\u201d - treatment - Section 3.2 (pp. 93-115): Dormand-Prince RK45 method Implementation: benchmarks/integration/numerical_methods.py": [[3, "numerical-methods-integration-6-1-runge-kutta-methods-context-used-for-simulation-of-dip-dynamics-foundational-references-1-press-w-h-teukolsky-s-a-vetterling-w-t-flannery-b-p-2007-numerical-recipes-the-art-of-scientific-computing-3rd-ed-cambridge-university-press-chapter-17-integration-of-ordinary-differential-equations-section-17-1-pp-907-918-runge-kutta-methods-rk4-adaptive-rk45-2-hairer-e-norsett-s-p-wanner-g-1993-solving-ordinary-differential-equations-i-nonstiff-problems-2nd-ed-springer-verlag-chapter-ii-runge-kutta-and-extrapolation-methods-theorem-ii-2-13-p-134-order-conditions-for-explicit-rk-methods-3-butcher-j-c-2016-numerical-methods-for-ordinary-differential-equations-3rd-ed-wiley-chapter-3-runge-kutta-methods-treatment-section-3-2-pp-93-115-dormand-prince-rk45-method-implementation-benchmarks-integration-numerical-methods-py"]], "6. PSO Variants and Extensions ### 6.1 Standard PSO (Kennedy & Eberhart 1995) Canonical form as presented in Section 1. ### 6.2 Constriction PSO (Clerc & Kennedy 2002) Modified update equation: $\\mathbf{v}_i^{t+1} = \\chi \\left[ \\mathbf{v}_i^t + c_1 r_1^t \\odot (\\mathbf{p}_i - \\mathbf{x}_i^t) + c_2 r_2^t \\odot (\\mathbf{g}^t - \\mathbf{x}_i^t) \\right] where: \\chi = \\frac{2}{|2 - \\phi - \\sqrt{\\phi^2 - 4\\phi}|} with \\phi = c_1 + c_2 > 4. **Advantage:** Guarantees convergence for deterministic case. ### 6.3 Adaptive PSO (Time-Varying Inertia) **Linear decrease:** w^t = w_{max} - \\frac{t}{T_{max}}(w_{max} - w_{min}) **Exponential decrease:** w^t = w_{min} + (w_{max} - w_{min}) e^{-\\alpha t / T_{max}}$ Implementation Reference: src/optimization/algorithms/pso_optimizer.py (lines 862-894) ### 6.4 Theoretical Comparison | Variant | Convergence Speed | Exploration | Robustness | Complexity |": [[291, "pso-variants-and-extensions-6-1-standard-pso-kennedy-eberhart-1995-canonical-form-as-presented-in-section-1-6-2-constriction-pso-clerc-kennedy-2002-modified-update-equation-mathbf-v-i-t-1-chi-left-mathbf-v-i-t-c-1-r-1-t-odot-mathbf-p-i-mathbf-x-i-t-c-2-r-2-t-odot-mathbf-g-t-mathbf-x-i-t-right-where-chi-frac-2-2-phi-sqrt-phi-2-4-phi-with-phi-c-1-c-2-4-advantage-guarantees-convergence-for-deterministic-case-6-3-adaptive-pso-time-varying-inertia-linear-decrease-w-t-w-max-frac-t-t-max-w-max-w-min-exponential-decrease-w-t-w-min-w-max-w-min-e-alpha-t-t-max-implementation-reference-src-optimization-algorithms-pso-optimizer-py-lines-862-894-6-4-theoretical-comparison-variant-convergence-speed-exploration-robustness-complexity"]], "6. PWA Styling - docs/_static/pwa.css": [[31, "pwa-styling-docs-static-pwa-css"]], "6. Performance Benchmarks ### 6.1 Target Performance Table Phase 1 Acceptance Criteria: | Component | Input | Target Time | Target Throughput | Status |": [[298, "performance-benchmarks-6-1-target-performance-table-phase-1-acceptance-criteria-component-input-target-time-target-throughput-status"]], "6. Performance Metrics": [[204, "performance-metrics"]], "6. Safety & Monitoring System (Section 7, ~125 lines) \u2705 Files:": [[59, "safety-monitoring-system-section-7-125-lines-files"]], "6. Testing and Validation API ### 6.1 Interface Compliance Testing Protocol Compliance Tests:": [[76, "testing-and-validation-api-6-1-interface-compliance-testing-protocol-compliance-tests"]], "6. Theory Page Enhancement - smc-theory.md": [[30, "theory-page-enhancement-smc-theory-md"]], "6. Troubleshooting and Optimization Tips ### 6.1 Common Optimization Issues Issue 1: Poor Convergence (High Final Cost) Symptoms:": [[253, "troubleshooting-and-optimization-tips-6-1-common-optimization-issues-issue-1-poor-convergence-high-final-cost-symptoms"]], "6. Use Case Recommendations": [[197, "use-case-recommendations"]], "6.1 Adaptive Lyapunov Function": [[287, "adaptive-lyapunov-function"]], "6.1 Classical SMC Exponential Convergence": [[206, "classical-smc-exponential-convergence"]], "6.1 Computational Stability": [[195, "computational-stability"]], "6.1 Convergence Time": [[204, "convergence-time"]], "6.1 Decision Matrix": [[197, "decision-matrix"]], "6.1 Localhost Performance": [[177, "localhost-performance"]], "6.1 Mathematical Theory": [[290, "id8"]], "6.1 Real-Time Bounds Checking": [[249, "real-time-bounds-checking"]], "6.1 Results Documentation": [[320, "results-documentation"]], "6.1 Sphinx Documentation": [[97, "sphinx-documentation"]], "6.1\u00a0Fuzzy Logic in SMC": [[224, "fuzzy-logic-in-smc"], [234, "fuzzy-logic-in-smc"]], "6.1\u00a0Standard Formulation and Mapping to Code": [[227, "standard-formulation-and-mapping-to-code"], [231, "standard-formulation-and-mapping-to-code"]], "6.2 Adaptation Law": [[287, "adaptation-law"]], "6.2 Application to DIP-SMC": [[290, "application-to-dip-smc"]], "6.2 Application-Specific Recommendations": [[197, "application-specific-recommendations"]], "6.2 Jupyter Notebooks": [[97, "jupyter-notebooks"]], "6.2 Multi-Controller Comparison": [[177, "multi-controller-comparison"]], "6.2 Numerical Stability & Stiffness Context: Ensuring stable simulation of stiff DIP dynamics Foundational References: 1. Ascher, U. M., & Petzold, L. R. (1998). Computer Methods for Ordinary Differential Equations and Differential-Algebraic Equations. SIAM. - Chapter 5: \u201cStability of Multistep Methods\u201d - A-stability, L-stability - Theorem 5.3 (p. 73): Dahlquist barrier for explicit methods 2. Hairer, E., & Wanner, G. (1996). Solving Ordinary Differential Equations II: Stiff and Differential-Algebraic Problems (2nd ed.). Springer-Verlag. - Chapter IV: \u201cStiff Problems - One-Step Methods\u201d - Section IV.1 (pp. 1-38): Characterization of stiffness Implementation: benchmarks/analysis/accuracy_metrics.py": [[3, "numerical-stability-stiffness-context-ensuring-stable-simulation-of-stiff-dip-dynamics-foundational-references-1-ascher-u-m-petzold-l-r-1998-computer-methods-for-ordinary-differential-equations-and-differential-algebraic-equations-siam-chapter-5-stability-of-multistep-methods-a-stability-l-stability-theorem-5-3-p-73-dahlquist-barrier-for-explicit-methods-2-hairer-e-wanner-g-1996-solving-ordinary-differential-equations-ii-stiff-and-differential-algebraic-problems-2nd-ed-springer-verlag-chapter-iv-stiff-problems-one-step-methods-section-iv-1-pp-1-38-characterization-of-stiffness-implementation-benchmarks-analysis-accuracy-metrics-py"]], "6.2 Real-Time Implementation": [[195, "real-time-implementation"]], "6.2 Safety-Critical Constraint Enforcement": [[249, "safety-critical-constraint-enforcement"]], "6.2 StandardResultContainer File: src/simulation/results/containers.py:15 Container for single simulation results. #### 6.2.1 Attributes ```python": [[61, "standardresultcontainer-file-src-simulation-results-containers-py-15-container-for-single-simulation-results-6-2-1-attributes-python"]], "6.2 Super-Twisting Finite-Time Convergence": [[206, "super-twisting-finite-time-convergence"]], "6.2 Tracking Error Bounds": [[204, "tracking-error-bounds"]], "6.2\u00a0Neural\u2011network\u2011based SMC": [[224, "neuralnetworkbased-smc"], [234, "neuralnetworkbased-smc"]], "6.2\u00a0Visual Comparison with Classical SMC": [[227, "visual-comparison-with-classical-smc"], [231, "visual-comparison-with-classical-smc"]], "6.3 Adaptive Controller Validation Challenge: Performance depends on online adaptation - cannot use standard CV. Time Series Validation Approach: ```python": [[310, "adaptive-controller-validation-challenge-performance-depends-on-online-adaptation-cannot-use-standard-cv-time-series-validation-approach-python"]], "6.3 BatchResultContainer File: src/simulation/results/containers.py:59 Container for multiple simulation results (batch execution). #### 6.3.1 Attributes ```python": [[61, "batchresultcontainer-file-src-simulation-results-containers-py-59-container-for-multiple-simulation-results-batch-execution-6-3-1-attributes-python"]], "6.3 NumPy Validation Results": [[290, "id9"]], "6.3 NumPy Validation: Adaptive Gain Evolution": [[287, "numpy-validation-adaptive-gain-evolution"]], "6.3 Scalability Analysis": [[177, "scalability-analysis"]], "6.3 Selection Flowchart Summary": [[197, "selection-flowchart-summary"]], "6.3\u00a0Reinforcement Learning with SMC": [[224, "reinforcement-learning-with-smc"], [234, "reinforcement-learning-with-smc"]], "6.4 Practical Guidelines": [[197, "practical-guidelines"]], "6.4 Result Exporters #### 6.4.1 CSV Exporter File: src/simulation/results/exporters.py Exports results to CSV format (human-readable, spreadsheet-compatible). Format:": [[61, "result-exporters-6-4-1-csv-exporter-file-src-simulation-results-exporters-py-exports-results-to-csv-format-human-readable-spreadsheet-compatible-format"]], "6\u00a0Chattering\u00a0Mitigation Strategy\u00a0II:\u00a0Super\u2011Twisting Algorithm": [[227, "chattering-mitigation-strategy-ii-supertwisting-algorithm"], [231, "chattering-mitigation-strategy-ii-supertwisting-algorithm"]], "6\u00a0Intelligent and Adaptive SMC for Dynamic Environments": [[224, "intelligent-and-adaptive-smc-for-dynamic-environments"], [234, "intelligent-and-adaptive-smc-for-dynamic-environments"]], "7.": [[144, "id21"]], "7. Application-Specific Considerations for DIP-SMC-PSO ### 7.1 Fitness Function Design For Classical SMC with gains \\mathbf{\\theta} = [k_1, k_2, \\lambda_1, \\lambda_2, K, k_d]^T: Multi-Objective Cost Function: $J(\\mathbf{\\theta}) = w_1 \\int_0^T \\|\\mathbf{e}(t)\\|^2 dt + w_2 \\int_0^T u^2(t) dt + w_3 \\int_0^T \\left(\\frac{du}{dt}\\right)^2 dt + w_4 \\int_0^T \\sigma^2(t) dt$ where:": [[291, "application-specific-considerations-for-dip-smc-pso-7-1-fitness-function-design-for-classical-smc-with-gains-mathbf-theta-k-1-k-2-lambda-1-lambda-2-k-k-d-t-multi-objective-cost-function-j-mathbf-theta-w-1-int-0-t-mathbf-e-t-2-dt-w-2-int-0-t-u-2-t-dt-w-3-int-0-t-left-frac-du-dt-right-2-dt-w-4-int-0-t-sigma-2-t-dt-where"]], "7. Best Practices ### 7.1 Saturation Function Selection Use tanh method (default) for:": [[79, "best-practices-7-1-saturation-function-selection-use-tanh-method-default-for"]], "7. Best Practices and Pitfalls ### 7.1 Common Pitfalls #### Pitfall 1: Insufficient Sample Size Problem: Low statistical power \u2192 cannot detect real differences. Solution:": [[310, "best-practices-and-pitfalls-7-1-common-pitfalls-pitfall-1-insufficient-sample-size-problem-low-statistical-power-cannot-detect-real-differences-solution"]], "7. Boundary Layer Design Guidelines": [[195, "boundary-layer-design-guidelines"]], "7. Complete Bibliography ### Books 1. Ascher, U. M., & Petzold, L. R. (1998). Computer Methods for Ordinary Differential Equations and Differential-Algebraic Equations. SIAM. 2. \u00c5str\u00f6m, K. J., & Wittenmark, B. (1995). Adaptive Control (2nd ed.). Dover Publications. 3. Butcher, J. C. (2016). Numerical Methods for Ordinary Differential Equations (3rd ed.). Wiley. 4. Chen, J., & Patton, R. J. (1999). Robust Model-Based Fault Diagnosis for Dynamic Systems. Springer. 5. Clerc, M. (2006). Particle Swarm Optimization. ISTE Ltd. 6. Ding, S. X. (2008). Model-based Fault Diagnosis Techniques: Design Schemes, Algorithms, and Tools. Springer. 7. Edwards, C., & Spurgeon, S. (1998). Sliding Mode Control: Theory and Applications. CRC Press. 8. Gertler, J. (1998). Fault Detection and Diagnosis in Engineering Systems. CRC Press. 9. Hairer, E., N\u00f8rsett, S. P., & Wanner, G. (1993). Solving Ordinary Differential Equations I: Nonstiff Problems (2nd ed.). Springer-Verlag. 10. Hairer, E., & Wanner, G. (1996). Solving Ordinary Differential Equations II: Stiff and Differential-Algebraic Problems (2nd ed.). Springer-Verlag. 11. Ioannou, P. A., & Kokotovic, P. V. (1983). Adaptive Systems with Reduced Models. Springer-Verlag. 12. Ioannou, P. A., & Sun, J. (1996). Robust Adaptive Control. Prentice Hall. 13. Isermann, R. (2006). Fault-Diagnosis Systems: An Introduction from Fault Detection to Fault Tolerance. Springer. 14. Khalil, H. K. (2002). Nonlinear Systems (3rd ed.). Prentice Hall. 15. Lyapunov, A. M. (1992). The General Problem of the Stability of Motion. Taylor & Francis. (English translation of 1892 original) 16. Narendra, K. S., & Annaswamy, A. M. (2005). Stable Adaptive Systems. Dover Publications. 17. Press, W. H., Teukolsky, S. A., Vetterling, W. T., & Flannery, B. P. (2007). Numerical Recipes: The Art of Scientific Computing (3rd ed.). Cambridge University Press. 18. Shtessel, Y., Edwards, C., Fridman, L., & Levant, A. (2014). Sliding Mode Control and Observation. Birkh\u00e4user. 19. Slotine, J.-J. E., & Li, W. (1991). Applied Nonlinear Control. Prentice Hall. 20. Utkin, V. I. (1992). Sliding Modes in Control and Optimization. Springer-Verlag. 21. Utkin, V., Guldner, J., & Shi, J. (2009). Sliding Mode Control in Electro-Mechanical Systems (2nd ed.). CRC Press. 22. Vidyasagar, M. (2002). Nonlinear Systems Analysis (2nd ed.). SIAM. ### Journal Papers 1. Bhat, S. P., & Bernstein, D. S. (2000). \u201cFinite-time stability of continuous autonomous systems.\u201d SIAM Journal on Control and Optimization, 38(3), 751-766. 2. Burton, J. A., & Zinober, A. S. I. (1986). \u201cContinuous approximation of variable structure control.\u201d International Journal of Systems Science, 17(6), 875-885. 3. Clerc, M., & Kennedy, J. (2002). \u201cThe particle swarm - explosion, stability, and convergence in a multidimensional complex space.\u201d IEEE Transactions on Evolutionary Computation, 6(1), 58-73. 4. Jiang, M., Luo, Y. P., & Yang, S. Y. (2007). \u201cStochastic convergence analysis and parameter selection of the standard particle swarm optimization algorithm.\u201d Information Processing Letters, 102(1), 8-16. 5. Levant, A. (1993). \u201cSliding order and sliding accuracy in sliding mode control.\u201d International Journal of Control, 58(6), 1247-1263. 6. Levant, A. (2007). \u201cPrinciples of 2-sliding mode design.\u201d Automatica, 43(4), 576-586. 7. Moulay, E., & Perruquetti, W. (2006). \u201cFinite time stability and stabilization of a class of continuous systems.\u201d Journal of Mathematical Analysis and Applications, 323(2), 1430-1443. 8. Plestan, F., Shtessel, Y., Br\u00e9geault, V., & Poznyak, A. (2010). \u201cNew methodologies for adaptive sliding mode control.\u201d International Journal of Control, 83(9), 1907-1919. 9. Poli, R., Kennedy, J., & Blackwell, T. (2007). \u201cParticle swarm optimization: An overview.\u201d Swarm Intelligence, 1(1), 33-57. 10. Polyakov, A. (2012). \u201cNonlinear feedback design for fixed-time stabilization of linear controllable systems.\u201d IEEE Transactions on Automatic Control, 57(8), 2106-2110. 11. Pomet, J. B., & Praly, L. (1992). \u201cAdaptive nonlinear regulation: Estimation from the Lyapunov equation.\u201d IEEE Transactions on Automatic Control, 37(6), 729-740. 12. Slotine, J.-J. E., & Coetsee, J. A. (1986). \u201cAdaptive sliding controller synthesis for non-linear systems.\u201d International Journal of Control, 43(6), 1631-1651. 13. Slotine, J.-J. E., & Sastry, S. S. (1983). \u201cTracking control of non-linear systems using sliding surfaces, with application to robot manipulators.\u201d International Journal of Control, 38(2), 465-492. 14. Trelea, I. C. (2003). \u201cThe particle swarm optimization algorithm: convergence analysis and parameter selection.\u201d Information Processing Letters, 85(6), 317-325. 15. Utkin, V. I. (1977). \u201cVariable structure systems with sliding modes.\u201d IEEE Transactions on Automatic Control, 22(2), 212-222. 16. van den Bergh, F., & Engelbrecht, A. P. (2006). \u201cA study of particle swarm optimization particle trajectories.\u201d Information Sciences, 176(8), 937-971. 17. Young, K. D., Utkin, V. I., & \u00d6zg\u00fcner, \u00dc. (1999). \u201cA control engineer\u2019s guide to sliding mode control.\u201d IEEE Transactions on Control Systems Technology, 7(3), 328-342. ### Conference Papers 1. Kennedy, J., & Eberhart, R. (1995). \u201cParticle swarm optimization.\u201d Proceedings of IEEE International Conference on Neural Networks, 4, 1942-1948. 2. Shi, Y., & Eberhart, R. (1998). \u201cA modified particle swarm optimizer.\u201d Proceedings of IEEE International Conference on Evolutionary Computation, 69-73.": [[3, "complete-bibliography-books-1-ascher-u-m-petzold-l-r-1998-computer-methods-for-ordinary-differential-equations-and-differential-algebraic-equations-siam-2-astrom-k-j-wittenmark-b-1995-adaptive-control-2nd-ed-dover-publications-3-butcher-j-c-2016-numerical-methods-for-ordinary-differential-equations-3rd-ed-wiley-4-chen-j-patton-r-j-1999-robust-model-based-fault-diagnosis-for-dynamic-systems-springer-5-clerc-m-2006-particle-swarm-optimization-iste-ltd-6-ding-s-x-2008-model-based-fault-diagnosis-techniques-design-schemes-algorithms-and-tools-springer-7-edwards-c-spurgeon-s-1998-sliding-mode-control-theory-and-applications-crc-press-8-gertler-j-1998-fault-detection-and-diagnosis-in-engineering-systems-crc-press-9-hairer-e-norsett-s-p-wanner-g-1993-solving-ordinary-differential-equations-i-nonstiff-problems-2nd-ed-springer-verlag-10-hairer-e-wanner-g-1996-solving-ordinary-differential-equations-ii-stiff-and-differential-algebraic-problems-2nd-ed-springer-verlag-11-ioannou-p-a-kokotovic-p-v-1983-adaptive-systems-with-reduced-models-springer-verlag-12-ioannou-p-a-sun-j-1996-robust-adaptive-control-prentice-hall-13-isermann-r-2006-fault-diagnosis-systems-an-introduction-from-fault-detection-to-fault-tolerance-springer-14-khalil-h-k-2002-nonlinear-systems-3rd-ed-prentice-hall-15-lyapunov-a-m-1992-the-general-problem-of-the-stability-of-motion-taylor-francis-english-translation-of-1892-original-16-narendra-k-s-annaswamy-a-m-2005-stable-adaptive-systems-dover-publications-17-press-w-h-teukolsky-s-a-vetterling-w-t-flannery-b-p-2007-numerical-recipes-the-art-of-scientific-computing-3rd-ed-cambridge-university-press-18-shtessel-y-edwards-c-fridman-l-levant-a-2014-sliding-mode-control-and-observation-birkhauser-19-slotine-j-j-e-li-w-1991-applied-nonlinear-control-prentice-hall-20-utkin-v-i-1992-sliding-modes-in-control-and-optimization-springer-verlag-21-utkin-v-guldner-j-shi-j-2009-sliding-mode-control-in-electro-mechanical-systems-2nd-ed-crc-press-22-vidyasagar-m-2002-nonlinear-systems-analysis-2nd-ed-siam-journal-papers-1-bhat-s-p-bernstein-d-s-2000-finite-time-stability-of-continuous-autonomous-systems-siam-journal-on-control-and-optimization-38-3-751-766-2-burton-j-a-zinober-a-s-i-1986-continuous-approximation-of-variable-structure-control-international-journal-of-systems-science-17-6-875-885-3-clerc-m-kennedy-j-2002-the-particle-swarm-explosion-stability-and-convergence-in-a-multidimensional-complex-space-ieee-transactions-on-evolutionary-computation-6-1-58-73-4-jiang-m-luo-y-p-yang-s-y-2007-stochastic-convergence-analysis-and-parameter-selection-of-the-standard-particle-swarm-optimization-algorithm-information-processing-letters-102-1-8-16-5-levant-a-1993-sliding-order-and-sliding-accuracy-in-sliding-mode-control-international-journal-of-control-58-6-1247-1263-6-levant-a-2007-principles-of-2-sliding-mode-design-automatica-43-4-576-586-7-moulay-e-perruquetti-w-2006-finite-time-stability-and-stabilization-of-a-class-of-continuous-systems-journal-of-mathematical-analysis-and-applications-323-2-1430-1443-8-plestan-f-shtessel-y-bregeault-v-poznyak-a-2010-new-methodologies-for-adaptive-sliding-mode-control-international-journal-of-control-83-9-1907-1919-9-poli-r-kennedy-j-blackwell-t-2007-particle-swarm-optimization-an-overview-swarm-intelligence-1-1-33-57-10-polyakov-a-2012-nonlinear-feedback-design-for-fixed-time-stabilization-of-linear-controllable-systems-ieee-transactions-on-automatic-control-57-8-2106-2110-11-pomet-j-b-praly-l-1992-adaptive-nonlinear-regulation-estimation-from-the-lyapunov-equation-ieee-transactions-on-automatic-control-37-6-729-740-12-slotine-j-j-e-coetsee-j-a-1986-adaptive-sliding-controller-synthesis-for-non-linear-systems-international-journal-of-control-43-6-1631-1651-13-slotine-j-j-e-sastry-s-s-1983-tracking-control-of-non-linear-systems-using-sliding-surfaces-with-application-to-robot-manipulators-international-journal-of-control-38-2-465-492-14-trelea-i-c-2003-the-particle-swarm-optimization-algorithm-convergence-analysis-and-parameter-selection-information-processing-letters-85-6-317-325-15-utkin-v-i-1977-variable-structure-systems-with-sliding-modes-ieee-transactions-on-automatic-control-22-2-212-222-16-van-den-bergh-f-engelbrecht-a-p-2006-a-study-of-particle-swarm-optimization-particle-trajectories-information-sciences-176-8-937-971-17-young-k-d-utkin-v-i-ozguner-u-1999-a-control-engineer-s-guide-to-sliding-mode-control-ieee-transactions-on-control-systems-technology-7-3-328-342-conference-papers-1-kennedy-j-eberhart-r-1995-particle-swarm-optimization-proceedings-of-ieee-international-conference-on-neural-networks-4-1942-1948-2-shi-y-eberhart-r-1998-a-modified-particle-swarm-optimizer-proceedings-of-ieee-international-conference-on-evolutionary-computation-69-73"]], "7. Controller Creation Workflows ### 7.1 Classical SMC Creation ```python": [[80, "controller-creation-workflows-7-1-classical-smc-creation-python"]], "7. Design Guidelines for Numerical Robustness": [[290, "design-guidelines-for-numerical-robustness"]], "7. Docstring Examples": [[97, "docstring-examples"]], "7. Documentation and Examples ### 7.1 Usage Examples Basic PSO Optimization:": [[76, "documentation-and-examples-7-1-usage-examples-basic-pso-optimization"]], "7. Implementation Validation Requirements": [[206, "implementation-validation-requirements"]], "7. Interactive Guides Index - index.md": [[30, "interactive-guides-index-index-md"]], "7. Numerical Considerations": [[204, "numerical-considerations"]], "7. PSO-Specific Bounds Optimization": [[249, "pso-specific-bounds-optimization"]], "7. Performance Monitoring and Optimization ### 7.1 Workflow Performance Metrics ```yaml": [[252, "performance-monitoring-and-optimization-7-1-workflow-performance-metrics-yaml"]], "7. Reports & Analysis": [[11, "reports-analysis"]], "7. Shi & Eberhart (1998) - PSO Inertia Weight": [[123, "shi-eberhart-1998-pso-inertia-weight"]], "7. Sphinx Configuration - docs/conf.py": [[31, "sphinx-configuration-docs-conf-py"]], "7. Unified Stability Summary": [[287, "unified-stability-summary"]], "7. Validation Procedures ### 7.1 Precision Validation Manual Review Protocol: ```bash": [[298, "validation-procedures-7-1-precision-validation-manual-review-protocol-bash"]], "7.1 Batch Simulation Workflow": [[171, "batch-simulation-workflow"]], "7.1 Comparative Analysis": [[287, "comparative-analysis"]], "7.1 Function Documentation with Math": [[97, "function-documentation-with-math"]], "7.1 Manuscript Preparation": [[320, "manuscript-preparation"]], "7.1 Mathematical Property Tests": [[206, "mathematical-property-tests"]], "7.1 Regularization": [[204, "regularization"]], "7.1 Search Space Design for PSO Efficiency": [[249, "search-space-design-for-pso-efficiency"]], "7.1 Selection Criteria": [[195, "selection-criteria"]], "7.1 Simulation Time Steps": [[290, "simulation-time-steps"]], "7.1\u00a0Motivation and Control Law": [[227, "motivation-and-control-law"], [231, "motivation-and-control-law"]], "7.2 Best Practices #### Practice 1: Pre-Register Analysis Plan Before collecting data:": [[310, "best-practices-practice-1-pre-register-analysis-plan-before-collecting-data"]], "7.2 Class Documentation with Theory": [[97, "class-documentation-with-theory"]], "7.2 Constraint Handling in PSO": [[249, "constraint-handling-in-pso"]], "7.2 Controllability Check": [[204, "controllability-check"]], "7.2 Design Guidelines": [[287, "design-guidelines"]], "7.2 Lyapunov Function Verification": [[206, "lyapunov-function-verification"]], "7.2 Monte Carlo Validation": [[171, "monte-carlo-validation"]], "7.2 Performance Monitoring File: src/simulation/safety/monitors.py #### 7.2.1 PerformanceMonitor Tracks execution time and throughput for orchestrators and integrators. Methods:": [[61, "performance-monitoring-file-src-simulation-safety-monitors-py-7-2-1-performancemonitor-tracks-execution-time-and-throughput-for-orchestrators-and-integrators-methods"]], "7.2 Precision Selection": [[290, "precision-selection"]], "7.2 Supplementary Materials": [[320, "supplementary-materials"]], "7.2 Tuning Guidelines": [[195, "tuning-guidelines"]], "7.2\u00a0Gain Adaptation Visualisation": [[227, "gain-adaptation-visualisation"], [231, "gain-adaptation-visualisation"]], "7.3 Matrix Operations": [[290, "matrix-operations"]], "7.3 Parameter Sweep Efficiency": [[171, "parameter-sweep-efficiency"]], "7.3 Preprint": [[320, "preprint"]], "7.4 Journal Submission": [[320, "journal-submission"]], "7.4 PSO Parameter Configuration": [[290, "pso-parameter-configuration"]], "7.5 Validation Checklist": [[290, "validation-checklist"]], "7\u00a0Chattering\u00a0Mitigation Strategy\u00a0III:\u00a0Adaptive\u00a0Sliding\u00a0Mode\u00a0Control": [[227, "chattering-mitigation-strategy-iii-adaptive-sliding-mode-control"], [231, "chattering-mitigation-strategy-iii-adaptive-sliding-mode-control"]], "7\u00a0Experimental Validation and Practical Insights": [[224, "experimental-validation-and-practical-insights"], [234, "experimental-validation-and-practical-insights"]], "8 \u2013 Results and Discussion This chapter analyses the particle\u2011swarm\u2011optimisation (PSO) tuning of several sliding\u2011mode control (SMC) variants for the double\u2011inverted pendulum (DIP). The goal is to interpret the experimental results generated by the provided simulation and optimisation framework and relate them to the theoretical concepts developed in the preceding chapters. #### 8.1 Experimental setup ##### 8.1.1 Simulation environment All experiments were performed using the Python implementation supplied with this project. Two dynamic models are available: a simplified model (src/core/dynamics.py) and a full model (src/core/dynamics_full.py). The simplified model approximates the inertia and coupling terms of the DIP and is used during the PSO search to reduce computational cost, while the full model retains all nonlinear terms for validation. Sliding\u2011mode controllers applied to under\u2011actuated systems such as the inverted pendulum lead to stiff, non\u2011smooth dynamics; implicit stiff solvers (e.g., Radau) are therefore recommended [1,\u202f2]. The simulation parameters are specified in config.yaml: each simulation runs for 10\u202fs with a time step dt=0.01\\mathrm{d}t = 0.01\u202fs, the initial state is [x,\u03b81,\u03b82,x\u02d9,\u03b8\u02d91,\u03b8\u02d92]=[0,0.05,\u22120.03,0,0,0][x, \\theta_{1}, \\theta_{2}, \\dot{x}, \\dot{\\theta}{1}, \\dot{\\theta}{2}] = [0, 0.05, -0.03, 0, 0, 0], and the actuator force is saturated at 150\u202fN. A command\u2011line interface and Streamlit front end allow interactive experiments, such as injecting disturbances and switching integrators, while the dual\u2011model architecture provides high\u2011throughput searches and accurate validation. ##### 8.1.2 Controller variants Four SMC variants are considered: - Classical SMC \u2013 uses a first\u2011order sliding surface \u03c3=k1\u03b8\u02d91+k2\u03b8\u02d92+\u03bb1\u03b81+\u03bb2\u03b82\\sigma = k_{1}\\dot{\\theta}{1} + k{2}\\dot{\\theta}{2} + \\lambda{1}\\theta_{1} + \\lambda_{2}\\theta_{2}. The control law combines an equivalent term, a discontinuous switching term and a derivative term [3]. To reduce high\u2011frequency chattering inherent in discontinuous SMC, a boundary layer implements a continuous approximation of the sign function [4].": [[230, null], [237, null]], "8.": [[144, "id25"]], "8. API Migration and Compatibility ### 8.1 Legacy Interface Support Backward Compatibility Layer:": [[76, "api-migration-and-compatibility-8-1-legacy-interface-support-backward-compatibility-layer"]], "8. Advanced Optimization Techniques ### 8.1 Multi-Objective Optimization Pareto Front Exploration:": [[253, "advanced-optimization-techniques-8-1-multi-objective-optimization-pareto-front-exploration"]], "8. Complete Code Examples ### 8.1 Example 1: Basic Simulation Objective: Run a single simulation with classical SMC controller and plot results. ```python": [[61, "complete-code-examples-8-1-example-1-basic-simulation-objective-run-a-single-simulation-with-classical-smc-controller-and-plot-results-python"]], "8. Computational Validation Summary": [[290, "computational-validation-summary"]], "8. Deployment and Operational Guidelines ### 8.1 Production Deployment Checklist ```yaml": [[251, "deployment-and-operational-guidelines-8-1-production-deployment-checklist-yaml"]], "8. Design Guidelines for PSO Parameter Selection ### 8.1 Quick Reference Table | Parameter | Recommended Range | Default Value | Trade-off |": [[291, "design-guidelines-for-pso-parameter-selection-8-1-quick-reference-table-parameter-recommended-range-default-value-trade-off"]], "8. Edwards & Spurgeon (1998) - SMC Book": [[123, "edwards-spurgeon-1998-smc-book"]], "8. Error Handling and Diagnostics ### 8.1 Configuration Error Classification ```python": [[247, "error-handling-and-diagnostics-8-1-configuration-error-classification-python"]], "8. Issue #2 Mathematical Validation and Verification": [[249, "issue-2-mathematical-validation-and-verification"]], "8. MCP Integration Documentation": [[11, "mcp-integration-documentation"]], "8. Mathematical Validation Requirements": [[195, "mathematical-validation-requirements"]], "8. Numerical Stability and Implementation Considerations ### 8.1 Floating-Point Precision Normalization for Numerical Stability:": [[246, "numerical-stability-and-implementation-considerations-8-1-floating-point-precision-normalization-for-numerical-stability"]], "8. References": [[287, "references"]], "8. Testing and Validation": [[204, "testing-and-validation"]], "8. Troubleshooting ### 8.1 Issue: Execution Time >5 Seconds Symptoms:": [[298, "troubleshooting-8-1-issue-execution-time-5-seconds-symptoms"]], "8. Validation and Quality Assurance": [[97, "validation-and-quality-assurance"]], "8.1 Mathematical Accuracy Checklist": [[97, "mathematical-accuracy-checklist"]], "8.1 Mathematical Property Tests": [[204, "mathematical-property-tests"]], "8.1 Property Verification": [[195, "property-verification"]], "8.1 Theoretical Overshoot Prediction": [[249, "theoretical-overshoot-prediction"]], "8.1 Validation Results Table": [[290, "validation-results-table"]], "8.1\u00a0Key Trends": [[224, "key-trends"], [234, "key-trends"]], "8.2 Convergence Verification": [[195, "convergence-verification"]], "8.2 Documentation Review Process": [[97, "documentation-review-process"]], "8.2 Key Numerical Insights": [[290, "key-numerical-insights"]], "8.2 Numerical Validation": [[204, "numerical-validation"]], "8.2 PSO Bounds Update for Issue #2 Resolution": [[249, "pso-bounds-update-for-issue-2-resolution"]], "8.2 Real-Time Convergence Monitoring Objective: Monitor PSO optimization with detailed convergence analysis. ```python": [[53, "real-time-convergence-monitoring-objective-monitor-pso-optimization-with-detailed-convergence-analysis-python"]], "8.2\u00a0Research Gaps and Open Questions": [[224, "research-gaps-and-open-questions"], [234, "research-gaps-and-open-questions"]], "8.3 Control Performance Tests": [[204, "control-performance-tests"]], "8.3 Implementation Cross-References": [[290, "implementation-cross-references"]], "8.3\u00a0Actionable Recommendations": [[224, "actionable-recommendations"], [234, "actionable-recommendations"]], "8.4 Hyperparameter Optimization Objective: Meta-optimize PSO hyperparameters for best controller performance. ```python": [[53, "hyperparameter-optimization-objective-meta-optimize-pso-hyperparameters-for-best-controller-performance-python"]], "8\u00a0Chattering\u00a0Mitigation Strategy\u00a0IV:\u00a0Hybrid\u00a0Adaptive\u2013STA": [[227, "chattering-mitigation-strategy-iv-hybrid-adaptivesta"], [231, "chattering-mitigation-strategy-iv-hybrid-adaptivesta"]], "8\u00a0Synthesis and Recommendations": [[224, "synthesis-and-recommendations"], [234, "synthesis-and-recommendations"]], "9.": [[144, "id29"]], "9. Best Practices ### 9.1 Factory Selection Guidelines Use Enterprise Factory when:": [[80, "best-practices-9-1-factory-selection-guidelines-use-enterprise-factory-when"]], "9. Computational Implementation and Validation": [[249, "computational-implementation-and-validation"]], "9. Computational Validation Summary": [[287, "computational-validation-summary"]], "9. Computational Validation Summary All theoretical claims have been validated using NumPy: - Particle dynamics (Eqs. 1-2): VALIDATED \u2713 (Section 1.4)": [[291, "computational-validation-summary-all-theoretical-claims-have-been-validated-using-numpy-particle-dynamics-eqs-1-2-validated-section-1-4"]], "9. Conclusion The Controller-PSO Interface API provides a comprehensive, type-safe, and performant framework for integrating optimization algorithms with sliding mode controllers. Key API strengths include: Interface Design:": [[76, "conclusion-the-controller-pso-interface-api-provides-a-comprehensive-type-safe-and-performant-framework-for-integrating-optimization-algorithms-with-sliding-mode-controllers-key-api-strengths-include-interface-design"]], "9. General Documentation": [[11, "general-documentation"]], "9. Implementation Examples": [[195, "implementation-examples"]], "9. Integration with Phase 2 ### 9.1 Handoff Workflow Phase 1 Deliverable \u2192 Phase 2 Input: ```": [[298, "integration-with-phase-2-9-1-handoff-workflow-phase-1-deliverable-phase-2-input"]], "9. Performance & Tuning Guidelines ### 9.1 PSO Parameter Selection Swarm Size Recommendations: | Controller Complexity | Dimensions | Recommended Swarm Size | Rationale |": [[53, "performance-tuning-guidelines-9-1-pso-parameter-selection-swarm-size-recommendations-controller-complexity-dimensions-recommended-swarm-size-rationale"]], "9. Performance Monitoring and Analysis ### 9.1 Real-Time Optimization Monitoring Progress Tracking:": [[253, "performance-monitoring-and-analysis-9-1-real-time-optimization-monitoring-progress-tracking"]], "9. References": [[290, "references"]], "9. Shtessel et al. (2014) - SMC Book (Modern)": [[123, "shtessel-et-al-2014-smc-book-modern"]], "9. Theoretical Performance Bounds ### 9.1 No Free Lunch Theorem Implications Theorem (Wolpert-Macready):": [[246, "theoretical-performance-bounds-9-1-no-free-lunch-theorem-implications-theorem-wolpert-macready"]], "9.1 Classical SMC with Adaptive Boundary Layer": [[195, "classical-smc-with-adaptive-boundary-layer"]], "9.1 Efficient Bounds Checking for PSO": [[249, "efficient-bounds-checking-for-pso"]], "9.1\u00a0Quantitative Results": [[227, "quantitative-results"], [231, "quantitative-results"]], "9.2 Hysteresis Implementation": [[195, "id1"]], "9.2 Performance Metrics and Validation": [[249, "performance-metrics-and-validation"]], "9.2\u00a0Frequency Analysis": [[227, "frequency-analysis"], [231, "frequency-analysis"]], "9.3\u00a0Discussion": [[227, "discussion"], [231, "discussion"]], "9\u00a0Synthesis\u00a0and Comparative Analysis": [[227, "synthesis-and-comparative-analysis"], [231, "synthesis-and-comparative-analysis"]], "========================================\nTutorial 01 Experiments Validation\n======================================== Running: Baseline (Default Configuration)\n[PASS] All metrics within expected ranges (11.2s) Settling Time: 2.34s RMS Control: 12.1N Overshoot: 3.5% Running: Experiment 1: Perturbed First Pendulum\n[PASS] All metrics within expected ranges (11.5s) Settling Time: 2.98s RMS Control: 17.3N Overshoot: 7.2% \u2026 ========================================\nSummary": [[165, "tutorial-01-experiments-validation-running-baseline-default-configuration-pass-all-metrics-within-expected-ranges-11-2s-settling-time-2-34s-rms-control-12-1n-overshoot-3-5-running-experiment-1-perturbed-first-pendulum-pass-all-metrics-within-expected-ranges-11-5s-settling-time-2-98s-rms-control-17-3n-overshoot-7-2-summary"]], "======================================================================\nPSO Hyperparameter Selection via Cross-Validation\n====================================================================== 1. Configuration: Number of scenarios: 100 PSO configurations to compare: 4 1. Small-Explorative: pop=20, w=0.9, c1=2.0, c2=1.0 2. Standard: pop=30, w=0.7, c1=1.5, c2=1.5 3. Large-Exploitative: pop=50, w=0.4, c1=1.0, c2=2.0 4. Adaptive: pop=30, w=0.5, c1=1.8, c2=1.2 2. Cross-Validation Setup: Method: monte_carlo Repetitions: 50 Train-test split: 80%-20% 3. Running cross-validation\u2026 (This may take several minutes\u2026) 4. Results:\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- Cross-Validation Scores: Small-Explorative: Mean CV score: -2.134 Std CV score: 0.312 Median CV score: -2.098 95% CI: [-2.223, -2.045] Standard: Mean CV score: -1.987 Std CV score: 0.267 Median CV score: -1.963 95% CI: [-2.062, -1.912] Large-Exploitative: Mean CV score: -2.056 Std CV score: 0.298 Median CV score: -2.031 95% CI: [-2.138, -1.974] Adaptive: Mean CV score: -1.923 Std CV score: 0.245 Median CV score: -1.904 95% CI: [-1.992, -1.854] 5. Statistical Comparison: Pairwise Tests (after multiple comparison correction): model_0_vs_model_3: model_3 is significantly better (p=0.0023, \u0394=0.211) model_1_vs_model_3: model_3 is significantly better (p=0.0412, \u0394=0.064) Overall Ranking: 1. Adaptive (score: -1.923) 2. Standard (score: -1.987) 3. Large-Exploitative (score: -2.056) 4. Small-Explorative (score: -2.134) 6. Bias-Variance Analysis: Small-Explorative: Bias\u00b2: 0.123456 Variance: 0.098234 \u26a0 High bias - underfitting (consider larger population) Standard: Bias\u00b2: 0.087654 Variance: 0.071234 \u2713 Good balance Large-Exploitative: Bias\u00b2: 0.091234 Variance: 0.089012 \u2713 Good balance Adaptive: Bias\u00b2: 0.076543 Variance: 0.060123 \u2713 Good balance ======================================================================\nRECOMMENDATION: \u2713 RECOMMENDED PSO Configuration: Adaptive Parameters: - Population size: 30 - Inertia weight (w): 0.5 - Cognitive coeff (c1): 1.8 - Social coeff (c2): 1.2 Mean CV score: -1.923 This configuration showed best generalization across 50 random splits.": [[313, "pso-hyperparameter-selection-via-cross-validation-1-configuration-number-of-scenarios-100-pso-configurations-to-compare-4-1-small-explorative-pop-20-w-0-9-c1-2-0-c2-1-0-2-standard-pop-30-w-0-7-c1-1-5-c2-1-5-3-large-exploitative-pop-50-w-0-4-c1-1-0-c2-2-0-4-adaptive-pop-30-w-0-5-c1-1-8-c2-1-2-2-cross-validation-setup-method-monte-carlo-repetitions-50-train-test-split-80-20-3-running-cross-validation-this-may-take-several-minutes-4-results-cross-validation-scores-small-explorative-mean-cv-score-2-134-std-cv-score-0-312-median-cv-score-2-098-95-ci-2-223-2-045-standard-mean-cv-score-1-987-std-cv-score-0-267-median-cv-score-1-963-95-ci-2-062-1-912-large-exploitative-mean-cv-score-2-056-std-cv-score-0-298-median-cv-score-2-031-95-ci-2-138-1-974-adaptive-mean-cv-score-1-923-std-cv-score-0-245-median-cv-score-1-904-95-ci-1-992-1-854-5-statistical-comparison-pairwise-tests-after-multiple-comparison-correction-model-0-vs-model-3-model-3-is-significantly-better-p-0-0023-0-211-model-1-vs-model-3-model-3-is-significantly-better-p-0-0412-0-064-overall-ranking-1-adaptive-score-1-923-2-standard-score-1-987-3-large-exploitative-score-2-056-4-small-explorative-score-2-134-6-bias-variance-analysis-small-explorative-bias2-0-123456-variance-0-098234-high-bias-underfitting-consider-larger-population-standard-bias2-0-087654-variance-0-071234-good-balance-large-exploitative-bias2-0-091234-variance-0-089012-good-balance-adaptive-bias2-0-076543-variance-0-060123-good-balance-recommendation-recommended-pso-configuration-adaptive-parameters-population-size-30-inertia-weight-w-0-5-cognitive-coeff-c1-1-8-social-coeff-c2-1-2-mean-cv-score-1-923-this-configuration-showed-best-generalization-across-50-random-splits"]], "======================================================================\nStatistical Comparison of Controller Performance\n====================================================================== 1. Experimental Setup: Controllers: Classical SMC, Super-Twisting SMC, Adaptive SMC Trials per controller: 30 Significance level: 0.05 Metric: Settling time (seconds) 2. Collecting performance data\u2026 3. Descriptive Statistics:\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- Classical SMC: Mean: 2.487 s Std: 0.398 s Median: 2.465 s Min: 1.823 s Max: 3.312 s CV: 16.0% Super-Twisting SMC: Mean: 1.789 s Std: 0.246 s Median: 1.776 s Min: 1.312 s Max: 2.345 s CV: 13.8% Adaptive SMC: Mean: 2.098 s Std: 0.489 s Median: 2.073 s Min: 1.234 s Max: 3.145 s CV: 23.3% 4. Assumption Testing:\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- Normality Tests (Shapiro-Wilk): Classical SMC : W=0.9821, p=0.8734 \u2713 Normal Super-Twisting SMC : W=0.9765, p=0.7231 \u2713 Normal Adaptive SMC : W=0.9798, p=0.8123 \u2713 Normal Homogeneity of Variance (Levene\u2019s test): F=3.2145, p=0.0456 \u26a0 Unequal variances - will use Welch\u2019s test 5. Pairwise Comparisons:\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- Multiple comparison correction: Bonferroni Corrected significance level: \u03b1=0.0167 Classical SMC vs Super-Twisting SMC: Welch\u2019s t-test: t=7.8234, p=0.0001 \u2713 SIGNIFICANT (p < 0.0167) Mann-Whitney U test (non-parametric): U=123.0, p=0.0002 Effect Size (Cohen\u2019s d): d=2.013 (large) Mean difference: 0.698 s 95% CI for difference: [0.512, 0.884] s Classical SMC vs Adaptive SMC: Welch\u2019s t-test: t=3.4567, p=0.0012 \u2713 SIGNIFICANT (p < 0.0167) Mann-Whitney U test (non-parametric): U=287.0, p=0.0018 Effect Size (Cohen\u2019s d): d=0.891 (large) Mean difference: 0.389 s 95% CI for difference: [0.167, 0.611] s Super-Twisting SMC vs Adaptive SMC: Welch\u2019s t-test: t=-2.8901, p=0.0056 \u2713 SIGNIFICANT (p < 0.0167) Mann-Whitney U test (non-parametric): U=234.0, p=0.0071 Effect Size (Cohen\u2019s d): d=-0.743 (medium) Mean difference: -0.309 s 95% CI for difference: [-0.521, -0.097] s 6. Omnibus Test (One-Way ANOVA):\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- F=26.7891, p=0.000001 \u2713 SIGNIFICANT: At least one controller differs Kruskal-Wallis test (non-parametric): H=25.3456, p=0.000003 7. Power Analysis:\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- Classical SMC vs Super-Twisting SMC: Effect size (d): 2.013 Sample size (n): 30 Power: 0.998 (99.8%) \u2713 Adequate power (\u226580%) Classical SMC vs Adaptive SMC: Effect size (d): 0.891 Sample size (n): 30 Power: 0.865 (86.5%) \u2713 Adequate power (\u226580%) Super-Twisting SMC vs Adaptive SMC: Effect size (d): 0.743 Sample size (n): 30 Power: 0.752 (75.2%) \u26a0 Low power - recommend n=36 for 80% power ======================================================================\nCONCLUSIONS:\n====================================================================== 1. Statistical Significance: Significant differences found (\u03b1=0.0167): - Classical SMC vs Super-Twisting SMC - Classical SMC vs Adaptive SMC - Super-Twisting SMC vs Adaptive SMC 2. Effect Sizes: Classical SMC vs Super-Twisting SMC: Cohen\u2019s d = 2.013 (large) Classical SMC vs Adaptive SMC: Cohen\u2019s d = 0.891 (large) Super-Twisting SMC vs Adaptive SMC: Cohen\u2019s d = -0.743 (medium) 3. Practical Recommendations: Performance ranking (by mean settling time): 1. Super-Twisting SMC : 1.789 s 2. Adaptive SMC : 2.098 s 3. Classical SMC : 2.487 s \u2713 RECOMMENDED: Super-Twisting SMC - Fastest mean settling time - Significantly better than Classical SMC (p=0.0001, d=2.013) - Significantly better than Adaptive SMC (p=0.0056, d=0.743)": [[313, "statistical-comparison-of-controller-performance-1-experimental-setup-controllers-classical-smc-super-twisting-smc-adaptive-smc-trials-per-controller-30-significance-level-0-05-metric-settling-time-seconds-2-collecting-performance-data-3-descriptive-statistics-classical-smc-mean-2-487-s-std-0-398-s-median-2-465-s-min-1-823-s-max-3-312-s-cv-16-0-super-twisting-smc-mean-1-789-s-std-0-246-s-median-1-776-s-min-1-312-s-max-2-345-s-cv-13-8-adaptive-smc-mean-2-098-s-std-0-489-s-median-2-073-s-min-1-234-s-max-3-145-s-cv-23-3-4-assumption-testing-normality-tests-shapiro-wilk-classical-smc-w-0-9821-p-0-8734-normal-super-twisting-smc-w-0-9765-p-0-7231-normal-adaptive-smc-w-0-9798-p-0-8123-normal-homogeneity-of-variance-levene-s-test-f-3-2145-p-0-0456-unequal-variances-will-use-welch-s-test-5-pairwise-comparisons-multiple-comparison-correction-bonferroni-corrected-significance-level-0-0167-classical-smc-vs-super-twisting-smc-welch-s-t-test-t-7-8234-p-0-0001-significant-p-0-0167-mann-whitney-u-test-non-parametric-u-123-0-p-0-0002-effect-size-cohen-s-d-d-2-013-large-mean-difference-0-698-s-95-ci-for-difference-0-512-0-884-s-classical-smc-vs-adaptive-smc-welch-s-t-test-t-3-4567-p-0-0012-significant-p-0-0167-mann-whitney-u-test-non-parametric-u-287-0-p-0-0018-effect-size-cohen-s-d-d-0-891-large-mean-difference-0-389-s-95-ci-for-difference-0-167-0-611-s-super-twisting-smc-vs-adaptive-smc-welch-s-t-test-t-2-8901-p-0-0056-significant-p-0-0167-mann-whitney-u-test-non-parametric-u-234-0-p-0-0071-effect-size-cohen-s-d-d-0-743-medium-mean-difference-0-309-s-95-ci-for-difference-0-521-0-097-s-6-omnibus-test-one-way-anova-f-26-7891-p-0-000001-significant-at-least-one-controller-differs-kruskal-wallis-test-non-parametric-h-25-3456-p-0-000003-7-power-analysis-classical-smc-vs-super-twisting-smc-effect-size-d-2-013-sample-size-n-30-power-0-998-99-8-adequate-power-80-classical-smc-vs-adaptive-smc-effect-size-d-0-891-sample-size-n-30-power-0-865-86-5-adequate-power-80-super-twisting-smc-vs-adaptive-smc-effect-size-d-0-743-sample-size-n-30-power-0-752-75-2-low-power-recommend-n-36-for-80-power-conclusions-1-statistical-significance-significant-differences-found-0-0167-classical-smc-vs-super-twisting-smc-classical-smc-vs-adaptive-smc-super-twisting-smc-vs-adaptive-smc-2-effect-sizes-classical-smc-vs-super-twisting-smc-cohen-s-d-2-013-large-classical-smc-vs-adaptive-smc-cohen-s-d-0-891-large-super-twisting-smc-vs-adaptive-smc-cohen-s-d-0-743-medium-3-practical-recommendations-performance-ranking-by-mean-settling-time-1-super-twisting-smc-1-789-s-2-adaptive-smc-2-098-s-3-classical-smc-2-487-s-recommended-super-twisting-smc-fastest-mean-settling-time-significantly-better-than-classical-smc-p-0-0001-d-2-013-significantly-better-than-adaptive-smc-p-0-0056-d-0-743"]], "======================================================================\nUncertainty Quantification for Settling Time\n====================================================================== 1. Safety Requirement: Settling time must be < 3.0s with 99% confidence 2. Collecting experimental data\u2026 Number of test runs: 200 3. Descriptive Statistics:\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- Mean: 2.123 s Std: 0.687 s Median: 1.983 s Min: 0.987 s Max: 4.823 s Range: 3.836 s Percentiles: 5%: 1.234 s 25%: 1.653 s 50%: 1.983 s 75%: 2.456 s 95%: 3.567 s 99%: 4.234 s 4. Bootstrap Confidence Intervals:\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- Bootstrap iterations: 10000 Confidence level: 95% Mean settling time: Point estimate: 2.123 s 95% CI: [2.026, 2.223] s CI width: 0.197 s Median settling time: Point estimate: 1.983 s 95% CI: [1.876, 2.087] s 95th percentile: Point estimate: 3.567 s 95% CI: [3.289, 3.891] s 5. Distribution Fitting:\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- Normal: K-S statistic: 0.0867 p-value: 0.0234 AIC: 412.34 \u2717 Reject (poor fit) Lognormal: K-S statistic: 0.0421 p-value: 0.6523 AIC: 387.12 \u2713 Cannot reject (good fit) Gamma: K-S statistic: 0.0534 p-value: 0.3421 AIC: 391.67 \u2713 Cannot reject (good fit) Exponential: K-S statistic: 0.1234 p-value: 0.0001 AIC: 445.89 \u2717 Reject (poor fit) Best fit (lowest AIC): Lognormal AIC = 387.12 6. Risk Analysis:\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- Value at Risk (VaR): VaR(1%): 3.892 s (top 1% worst cases) VaR(5%): 3.567 s (top 5% worst cases) VaR(10%): 3.234 s (top 10% worst cases) Conditional Value at Risk (CVaR / Expected Shortfall): CVaR(1%): 4.123 s (avg of worst 1%) CVaR(5%): 3.789 s (avg of worst 5%) CVaR(10%): 3.456 s (avg of worst 10%) 7. Safety Validation:\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- Empirical Analysis: Samples exceeding 3.0s: 18/200 Empirical P(T > 3.0s) = 0.0900 (9.00%) 95% CI for P(T > 3.0s): [0.0523, 0.1342] Fitted Lognormal Distribution: P(T > 3.0s) = 0.0823 (8.23%) P(T \u2264 3.0s) = 0.9177 (91.77%) \u2717 FAILS safety requirement (91.8% < 99.0%) To meet 99% confidence: Target: 99% percentile = 4.521 s Required: 4.521s < 3.0s \u26a0 Need to improve 99% percentile by 1.521s 8. Extreme Value Analysis:\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- Block Maxima Method: Block size: 20 Number of blocks: 10 GEV parameters: \u03be=-0.234, \u03bc=3.876, \u03c3=0.456 Return Levels: 10-run worst-case: 4.876 s 50-run worst-case: 5.432 s 100-run worst-case: 5.687 s ======================================================================\nUNCERTAINTY QUANTIFICATION SUMMARY:\n====================================================================== 1. Point Estimates: Mean: 2.123 s 95th percentile: 3.567 s 99th percentile: 4.234 s 2. Uncertainty (95% CI): Mean: [2.026, 2.223] s 95th percentile: [3.289, 3.891] s 3. Distributional Model: Best fit: Lognormal Goodness-of-fit p-value: 0.6523 4. Safety Assessment: Threshold: 3.0s Required confidence: 99% \u2717 FAILS: Only 91.8% of scenarios meet requirement 5. Recommendations: \u2717 Further controller improvement needed \u25a1 Option 1: Tune controller for better worst-case performance \u25a1 Option 2: Increase safety threshold \u25a1 Option 3: Accept lower confidence level (if acceptable)": [[313, "uncertainty-quantification-for-settling-time-1-safety-requirement-settling-time-must-be-3-0s-with-99-confidence-2-collecting-experimental-data-number-of-test-runs-200-3-descriptive-statistics-mean-2-123-s-std-0-687-s-median-1-983-s-min-0-987-s-max-4-823-s-range-3-836-s-percentiles-5-1-234-s-25-1-653-s-50-1-983-s-75-2-456-s-95-3-567-s-99-4-234-s-4-bootstrap-confidence-intervals-bootstrap-iterations-10000-confidence-level-95-mean-settling-time-point-estimate-2-123-s-95-ci-2-026-2-223-s-ci-width-0-197-s-median-settling-time-point-estimate-1-983-s-95-ci-1-876-2-087-s-95th-percentile-point-estimate-3-567-s-95-ci-3-289-3-891-s-5-distribution-fitting-normal-k-s-statistic-0-0867-p-value-0-0234-aic-412-34-reject-poor-fit-lognormal-k-s-statistic-0-0421-p-value-0-6523-aic-387-12-cannot-reject-good-fit-gamma-k-s-statistic-0-0534-p-value-0-3421-aic-391-67-cannot-reject-good-fit-exponential-k-s-statistic-0-1234-p-value-0-0001-aic-445-89-reject-poor-fit-best-fit-lowest-aic-lognormal-aic-387-12-6-risk-analysis-value-at-risk-var-var-1-3-892-s-top-1-worst-cases-var-5-3-567-s-top-5-worst-cases-var-10-3-234-s-top-10-worst-cases-conditional-value-at-risk-cvar-expected-shortfall-cvar-1-4-123-s-avg-of-worst-1-cvar-5-3-789-s-avg-of-worst-5-cvar-10-3-456-s-avg-of-worst-10-7-safety-validation-empirical-analysis-samples-exceeding-3-0s-18-200-empirical-p-t-3-0s-0-0900-9-00-95-ci-for-p-t-3-0s-0-0523-0-1342-fitted-lognormal-distribution-p-t-3-0s-0-0823-8-23-p-t-3-0s-0-9177-91-77-fails-safety-requirement-91-8-99-0-to-meet-99-confidence-target-99-percentile-4-521-s-required-4-521s-3-0s-need-to-improve-99-percentile-by-1-521s-8-extreme-value-analysis-block-maxima-method-block-size-20-number-of-blocks-10-gev-parameters-0-234-3-876-0-456-return-levels-10-run-worst-case-4-876-s-50-run-worst-case-5-432-s-100-run-worst-case-5-687-s-uncertainty-quantification-summary-1-point-estimates-mean-2-123-s-95th-percentile-3-567-s-99th-percentile-4-234-s-2-uncertainty-95-ci-mean-2-026-2-223-s-95th-percentile-3-289-3-891-s-3-distributional-model-best-fit-lognormal-goodness-of-fit-p-value-0-6523-4-safety-assessment-threshold-3-0s-required-confidence-99-fails-only-91-8-of-scenarios-meet-requirement-5-recommendations-further-controller-improvement-needed-option-1-tune-controller-for-better-worst-case-performance-option-2-increase-safety-threshold-option-3-accept-lower-confidence-level-if-acceptable"]], "============================================================================": [[61, "id4"], [61, "id5"], [61, "id6"], [61, "id7"], [61, "id8"], [61, "id9"]], "============================================================================ CONFIG_PATH = \u201cconfig.yaml\u201d": [[53, "config-path-config-yaml"], [53, "id4"]], "============================================================================ class ConvergenceMonitor: \u201c\u201d\u201dCallback for real-time convergence monitoring.\u201d\u201d\u201d def init(self, analyzer: EnhancedConvergenceAnalyzer): self.analyzer = analyzer self.metrics_history = [] def call(self, iteration: int, best_fitness: float, mean_fitness: float, fitness_std: float, swarm_positions: np.ndarray): \u201c\u201d\u201dCheck convergence at each iteration.\u201d\u201d\u201d status, metrics = self.analyzer.check_convergence( iteration=iteration, best_fitness=best_fitness, mean_fitness=mean_fitness, fitness_std=fitness_std, swarm_positions=swarm_positions ) self.metrics_history.append(metrics) # Log key metrics if iteration % 10 == 0: print(f\u201dIter {iteration:3d} | Status: {status.value:20s} | \u201c f\u201dBest: {metrics.best_fitness:.6f} | \u201c f\u201dDiversity: {metrics.population_diversity:.4f} | \u201c f\u201dConv. Velocity: {metrics.convergence_velocity:.4e} | \u201c f\u201dPredicted Remaining: {metrics.predicted_iterations_remaining:3d}\u201d) # Early stopping if status == ConvergenceStatus.CONVERGED: print(f\u201d\\n>>> CONVERGENCE DETECTED at iteration {iteration} <<<\u201d) return True # Signal early stop elif status == ConvergenceStatus.STAGNATED: print(f\u201d\\n>>> STAGNATION DETECTED at iteration {iteration} <<<\u201d) return True # Signal early stop return False # Continue # ============================================================================": [[53, "class-convergencemonitor-callback-for-real-time-convergence-monitoring-def-init-self-analyzer-enhancedconvergenceanalyzer-self-analyzer-analyzer-self-metrics-history-def-call-self-iteration-int-best-fitness-float-mean-fitness-float-fitness-std-float-swarm-positions-np-ndarray-check-convergence-at-each-iteration-status-metrics-self-analyzer-check-convergence-iteration-iteration-best-fitness-best-fitness-mean-fitness-mean-fitness-fitness-std-fitness-std-swarm-positions-swarm-positions-self-metrics-history-append-metrics-log-key-metrics-if-iteration-10-0-print-f-iter-iteration-3d-status-status-value-20s-f-best-metrics-best-fitness-6f-f-diversity-metrics-population-diversity-4f-f-conv-velocity-metrics-convergence-velocity-4e-f-predicted-remaining-metrics-predicted-iterations-remaining-3d-early-stopping-if-status-convergencestatus-converged-print-f-n-convergence-detected-at-iteration-iteration-return-true-signal-early-stop-elif-status-convergencestatus-stagnated-print-f-n-stagnation-detected-at-iteration-iteration-return-true-signal-early-stop-return-false-continue"]], "============================================================================ def main(): # Load configuration config = load_config(CONFIG_PATH) # Initialize convergence analyzer with custom criteria criteria = ConvergenceCriteria( fitness_tolerance=1e-6, relative_improvement_threshold=1e-4, min_diversity_threshold=1e-3, max_stagnation_iterations=50, enable_performance_prediction=True, premature_convergence_detection=True ) analyzer = EnhancedConvergenceAnalyzer( criteria=criteria, controller_type=SMCType.STA ) monitor = ConvergenceMonitor(analyzer) # Create controller factory controller_factory = partial( create_controller, controller_type=CONTROLLER_TYPE, config=config ) # Initialize PSO tuner tuner = PSOTuner( controller_factory=controller_factory, config=config, seed=SEED ) # Run optimization with monitoring print(f\u201dRunning PSO optimization with real-time convergence monitoring\u2026\u201d) print(f\u201d{\u2018=\u2019*120}\u201d) result = tuner.optimise() print(f\u201d{\u2018=\u2019*120}\\n\u201d) # Plot convergence metrics metrics = monitor.metrics_history iterations = [m.iteration for m in metrics] best_fitness = [m.best_fitness for m in metrics] diversity = [m.population_diversity for m in metrics] conv_velocity = [m.convergence_velocity for m in metrics] fig, axes = plt.subplots(3, 1, figsize=(12, 10)) # Best fitness axes[0].plot(iterations, best_fitness, linewidth=2, color=\u2019blue\u2019) axes[0].set_ylabel(\u2018Best Fitness\u2019, fontsize=12) axes[0].set_yscale(\u2018log\u2019) axes[0].set_title(\u2018Convergence Monitoring - STA SMC\u2019, fontsize=14, fontweight=\u2019bold\u2019) axes[0].grid(True, alpha=0.3) # Population diversity axes[1].plot(iterations, diversity, linewidth=2, color=\u2019green\u2019) axes[1].set_ylabel(\u2018Population Diversity\u2019, fontsize=12) axes[1].grid(True, alpha=0.3) # Convergence velocity axes[2].plot(iterations, conv_velocity, linewidth=2, color=\u2019red\u2019) axes[2].set_ylabel(\u2018Convergence Velocity\u2019, fontsize=12) axes[2].set_xlabel(\u2018Iteration\u2019, fontsize=12) axes[2].grid(True, alpha=0.3) plt.tight_layout() plt.savefig(\u2018pso_convergence_monitoring.png\u2019, dpi=300) print(\u201cConvergence monitoring plot saved: pso_convergence_monitoring.png\u201d) if name == \u201cmain\u201d: main()": [[53, "def-main-load-configuration-config-load-config-config-path-initialize-convergence-analyzer-with-custom-criteria-criteria-convergencecriteria-fitness-tolerance-1e-6-relative-improvement-threshold-1e-4-min-diversity-threshold-1e-3-max-stagnation-iterations-50-enable-performance-prediction-true-premature-convergence-detection-true-analyzer-enhancedconvergenceanalyzer-criteria-criteria-controller-type-smctype-sta-monitor-convergencemonitor-analyzer-create-controller-factory-controller-factory-partial-create-controller-controller-type-controller-type-config-config-initialize-pso-tuner-tuner-psotuner-controller-factory-controller-factory-config-config-seed-seed-run-optimization-with-monitoring-print-f-running-pso-optimization-with-real-time-convergence-monitoring-print-f-120-result-tuner-optimise-print-f-120-n-plot-convergence-metrics-metrics-monitor-metrics-history-iterations-m-iteration-for-m-in-metrics-best-fitness-m-best-fitness-for-m-in-metrics-diversity-m-population-diversity-for-m-in-metrics-conv-velocity-m-convergence-velocity-for-m-in-metrics-fig-axes-plt-subplots-3-1-figsize-12-10-best-fitness-axes-0-plot-iterations-best-fitness-linewidth-2-color-blue-axes-0-set-ylabel-best-fitness-fontsize-12-axes-0-set-yscale-log-axes-0-set-title-convergence-monitoring-sta-smc-fontsize-14-fontweight-bold-axes-0-grid-true-alpha-0-3-population-diversity-axes-1-plot-iterations-diversity-linewidth-2-color-green-axes-1-set-ylabel-population-diversity-fontsize-12-axes-1-grid-true-alpha-0-3-convergence-velocity-axes-2-plot-iterations-conv-velocity-linewidth-2-color-red-axes-2-set-ylabel-convergence-velocity-fontsize-12-axes-2-set-xlabel-iteration-fontsize-12-axes-2-grid-true-alpha-0-3-plt-tight-layout-plt-savefig-pso-convergence-monitoring-png-dpi-300-print-convergence-monitoring-plot-saved-pso-convergence-monitoring-png-if-name-main-main"]], "============================================================================ def main(): # Load configuration config = load_config(CONFIG_PATH) # Initialize meta-optimizer print(\u201cInitializing PSO Hyperparameter Optimizer\u2026\u201d) meta_optimizer = PSOHyperparameterOptimizer(config) # Run meta-optimization print(f\u201d\\nRunning meta-optimization for {CONTROLLER_TYPE.value}\u2026\u201d) print(f\u201dMax evaluations: {MAX_META_EVALUATIONS}\u201d) print(f\u201dTrials per evaluation: {N_TRIALS_PER_EVAL}\u201d) print(f\u201dObjective: {OptimizationObjective.MULTI_OBJECTIVE.value}\u201d) print(\u201c=\u201d*80) result = meta_optimizer.optimize_hyperparameters( controller_type=CONTROLLER_TYPE, objective=OptimizationObjective.MULTI_OBJECTIVE, max_evaluations=MAX_META_EVALUATIONS, n_trials_per_evaluation=N_TRIALS_PER_EVAL ) # Display results print(\u201c\\n\u201d + \u201c=\u201d80) print(\u201cHYPERPARAMETER OPTIMIZATION RESULTS\u201d) print(\u201c=\u201d80) print(f\u201d\\nOptimized Hyperparameters:\u201d) print(f\u201d Inertia weight (w): {result.hyperparameters.w:.6f}\u201d) print(f\u201d Cognitive (c1): {result.hyperparameters.c1:.6f}\u201d) print(f\u201d Social (c2): {result.hyperparameters.c2:.6f}\u201d) print(f\u201d Swarm size: {result.hyperparameters.n_particles}\u201d) print(f\u201d\\nBaseline Hyperparameters:\u201d) print(f\u201d Inertia weight (w): {result.baseline_hyperparameters.w:.6f}\u201d) print(f\u201d Cognitive (c1): {result.baseline_hyperparameters.c1:.6f}\u201d) print(f\u201d Social (c2): {result.baseline_hyperparameters.c2:.6f}\u201d) print(f\u201d Swarm size: {result.baseline_hyperparameters.n_particles}\u201d) print(f\u201d\\nPerformance Improvements vs. Baseline:\u201d) print(f\u201d Convergence speedup: {result.convergence_improvement:.2f}x\u201d) print(f\u201d Quality improvement: {result.quality_improvement100:.2f}%\u201d) print(f\u201d Robustness improvement: {result.robustness_improvement100:.2f}%\u201d) print(f\u201d Efficiency score: {result.efficiency_score:.4f}\u201d) print(\u201c=\u201d*80) # Visualize comparison fig, axes = plt.subplots(2, 2, figsize=(12, 10)) categories = [\u2018w\u2019, \u2018c1\u2019, \u2018c2\u2019, \u2018N\u2019] baseline_values = [ result.baseline_hyperparameters.w, result.baseline_hyperparameters.c1, result.baseline_hyperparameters.c2, result.baseline_hyperparameters.n_particles ] optimized_values = [ result.hyperparameters.w, result.hyperparameters.c1, result.hyperparameters.c2, result.hyperparameters.n_particles ] x = np.arange(len(categories)) width = 0.35 axes[0, 0].bar(x - width/2, baseline_values, width, label=\u2019Baseline\u2019, alpha=0.7) axes[0, 0].bar(x + width/2, optimized_values, width, label=\u2019Optimized\u2019, alpha=0.7) axes[0, 0].set_ylabel(\u2018Value\u2019) axes[0, 0].set_title(\u2018Hyperparameter Comparison\u2019) axes[0, 0].set_xticks(x) axes[0, 0].set_xticklabels(categories) axes[0, 0].legend() axes[0, 0].grid(True, alpha=0.3) # Performance metrics metrics = [\u2018Convergence\\nSpeed\u2019, \u2018Solution\\nQuality\u2019, \u2018Robustness\u2019] improvements = [ result.convergence_improvement, 1 + result.quality_improvement, 1 + result.robustness_improvement ] axes[0, 1].bar(metrics, improvements, color=[\u2018blue\u2019, \u2018green\u2019, \u2018orange\u2019], alpha=0.7) axes[0, 1].axhline(y=1.0, color=\u2019red\u2019, linestyle=\u2019\u2013\u2019, label=\u2019Baseline\u2019) axes[0, 1].set_ylabel(\u2018Improvement Factor\u2019) axes[0, 1].set_title(\u2018Performance Improvements\u2019) axes[0, 1].legend() axes[0, 1].grid(True, alpha=0.3) # Convergence history (if available) if hasattr(result, \u2018optimization_history\u2019): axes[1, 0].plot(result.optimization_history[\u2018best_objective\u2019], linewidth=2) axes[1, 0].set_xlabel(\u2018Meta-Optimization Iteration\u2019) axes[1, 0].set_ylabel(\u2018Objective Value\u2019) axes[1, 0].set_title(\u2018Meta-Optimization Convergence\u2019) axes[1, 0].grid(True, alpha=0.3) # Hide unused subplot axes[1, 1].axis(\u2018off\u2019) plt.tight_layout() plt.savefig(\u2018pso_hyperparameter_optimization.png\u2019, dpi=300) print(\u201c\\nVisualization saved: pso_hyperparameter_optimization.png\u201d) if name == \u201cmain\u201d: main()": [[53, "def-main-load-configuration-config-load-config-config-path-initialize-meta-optimizer-print-initializing-pso-hyperparameter-optimizer-meta-optimizer-psohyperparameteroptimizer-config-run-meta-optimization-print-f-nrunning-meta-optimization-for-controller-type-value-print-f-max-evaluations-max-meta-evaluations-print-f-trials-per-evaluation-n-trials-per-eval-print-f-objective-optimizationobjective-multi-objective-value-print-80-result-meta-optimizer-optimize-hyperparameters-controller-type-controller-type-objective-optimizationobjective-multi-objective-max-evaluations-max-meta-evaluations-n-trials-per-evaluation-n-trials-per-eval-display-results-print-n-80-print-hyperparameter-optimization-results-print-80-print-f-noptimized-hyperparameters-print-f-inertia-weight-w-result-hyperparameters-w-6f-print-f-cognitive-c1-result-hyperparameters-c1-6f-print-f-social-c2-result-hyperparameters-c2-6f-print-f-swarm-size-result-hyperparameters-n-particles-print-f-nbaseline-hyperparameters-print-f-inertia-weight-w-result-baseline-hyperparameters-w-6f-print-f-cognitive-c1-result-baseline-hyperparameters-c1-6f-print-f-social-c2-result-baseline-hyperparameters-c2-6f-print-f-swarm-size-result-baseline-hyperparameters-n-particles-print-f-nperformance-improvements-vs-baseline-print-f-convergence-speedup-result-convergence-improvement-2f-x-print-f-quality-improvement-result-quality-improvement100-2f-print-f-robustness-improvement-result-robustness-improvement100-2f-print-f-efficiency-score-result-efficiency-score-4f-print-80-visualize-comparison-fig-axes-plt-subplots-2-2-figsize-12-10-categories-w-c1-c2-n-baseline-values-result-baseline-hyperparameters-w-result-baseline-hyperparameters-c1-result-baseline-hyperparameters-c2-result-baseline-hyperparameters-n-particles-optimized-values-result-hyperparameters-w-result-hyperparameters-c1-result-hyperparameters-c2-result-hyperparameters-n-particles-x-np-arange-len-categories-width-0-35-axes-0-0-bar-x-width-2-baseline-values-width-label-baseline-alpha-0-7-axes-0-0-bar-x-width-2-optimized-values-width-label-optimized-alpha-0-7-axes-0-0-set-ylabel-value-axes-0-0-set-title-hyperparameter-comparison-axes-0-0-set-xticks-x-axes-0-0-set-xticklabels-categories-axes-0-0-legend-axes-0-0-grid-true-alpha-0-3-performance-metrics-metrics-convergence-nspeed-solution-nquality-robustness-improvements-result-convergence-improvement-1-result-quality-improvement-1-result-robustness-improvement-axes-0-1-bar-metrics-improvements-color-blue-green-orange-alpha-0-7-axes-0-1-axhline-y-1-0-color-red-linestyle-label-baseline-axes-0-1-set-ylabel-improvement-factor-axes-0-1-set-title-performance-improvements-axes-0-1-legend-axes-0-1-grid-true-alpha-0-3-convergence-history-if-available-if-hasattr-result-optimization-history-axes-1-0-plot-result-optimization-history-best-objective-linewidth-2-axes-1-0-set-xlabel-meta-optimization-iteration-axes-1-0-set-ylabel-objective-value-axes-1-0-set-title-meta-optimization-convergence-axes-1-0-grid-true-alpha-0-3-hide-unused-subplot-axes-1-1-axis-off-plt-tight-layout-plt-savefig-pso-hyperparameter-optimization-png-dpi-300-print-nvisualization-saved-pso-hyperparameter-optimization-png-if-name-main-main"]], "A Technical Report on the Modeling and Configuration of a Cart\u2011Based Double Inverted Pendulum System ### Introduction #### Purpose and Scope This report provides a theoretical and practical foundation for modelling and controlling a cart\u2011based double inverted pendulum (DIP) system. The goal is to deliver a self\u2011contained guide for control systems engineers working with Python\u2011based simulations. The document derives the nonlinear equations of motion from first principles, enumerates all required physical, simulation and controller parameters, and proposes a formal configuration schema. Where appropriate, the report cross\u2011references the accompanying project files (particularly the high\u2011fidelity implementation in src/core/dynamics.py and the configuration file config.yaml) to ensure applicability to real simulation code DIP_SMC_PSO/src/core/dynamics.py DIP_SMC_PSO/config.yaml. #### The Double Inverted Pendulum as a Benchmark Problem A double inverted pendulum consists of two pendulums attached in series to a cart. The second pendulum is attached to the end of the first, so the system has three degrees of freedom: the cart position and the two pendulum angles. Only one actuator applies a horizontal force to the cart, making the system underactuated; there is one control input for three state variables. Control of such a system is challenging because it is inherently unstable and will fall over unless stabilised . Classical control literature emphasises that the DIPC\u2019s single actuator must regulate three degrees of freedom, making the system underactuated. The double inverted pendulum also exhibits chaotic dynamics. The motion is governed by coupled ordinary differential equations that display strong sensitivity to initial conditions. Small changes in starting state can lead to vastly different trajectories, so an accurate nonlinear model is essential for control design. These properties make the DIP a popular benchmark for advanced control strategies, including sliding\u2011mode control, optimal control and reinforcement learning. #### Methodology The dynamic model is derived using Lagrangian mechanics, an energy\u2011based formulation widely used for open\u2011chain robots and underactuated systems . In this approach the kinetic and potential energies of each component are computed and combined to form the Lagrangian L=T\u2212VL = T - V. The Euler\u2013Lagrange equations are then applied to obtain the equations of motion (EOM). For the double inverted pendulum, the Lagrangian is the difference between the sum of kinetic energies and the sum of gravitational potentials . The resulting nonlinear second\u2011order differential equations are transformed into a state\u2011space form suitable for control design. The derived model is validated by comparing with the high\u2011fidelity implementation in the accompanying Python project (DoubleInvertedPendulum class), ensuring that parameter names and units match those in config.yaml. \u2014\u2014 ## Section 1: System Dynamics and Mathematical Modeling ### 1.1 System Definition, Assumptions, and Nomenclature #### System Diagram The double inverted pendulum on a cart comprises a cart of mass mcm_{c} that translates horizontally on a track. Two rigid pendulum links are attached in series; the first link (mass m1m_{1}, length l1l_{1}) is pinned to the cart and the second link (mass m2m_{2}, length l2l_{2}) is attached to the end of the first. The centres of mass of the links are located at distances lc1l_{c1} and lc2l_{c2} from their respective pivots. Angles \u03b81\\theta_{1} and \u03b82\\theta_{2} are measured from the upward vertical, and the horizontal displacement of the cart is xx. Gravity acts downward with acceleration gg. A horizontal force uu applied to the cart constitutes the single control input. A schematic of the system is shown in Figure 1. Double\u2011Inverted Pendulum on a Cart #### Model Assumptions 1. Rigid links. Each pendulum link is treated as a rigid body with constant mass and moment of inertia. There is no flexural deformation.": [[225, null]], "A Technical Report on the Modeling and Configuration of a Cart\u2011Based Double Inverted Pendulum System ### Introduction #### Purpose and Scope This report provides a theoretical and practical foundation for modelling and controlling a cart\u2011based double inverted pendulum (DIP) system[1]. The goal is to deliver a self\u2011contained guide for control systems engineers working with Python\u2011based simulations[1]. The document derives the nonlinear equations of motion from first principles, enumerates all required physical, simulation and controller parameters, and proposes a formal configuration schema. Where appropriate, the report cross\u2011references the accompanying project files (particularly the high\u2011fidelity implementation in src/core/dynamics.py and the configuration file config.yaml) to ensure applicability to real simulation code DIP_SMC_PSO/src/core/dynamics.py DIP_SMC_PSO/config.yaml. #### The Double Inverted Pendulum as a Benchmark Problem A double inverted pendulum consists of two pendulums attached in series to a cart. The second pendulum is attached to the end of the first, so the system has three degrees of freedom: the cart position and the two pendulum angles. Only one actuator applies a horizontal force to the cart, making the system underactuated; there is one control input for three state variables. Control of such a system is challenging because it is inherently unstable and will fall over unless stabilised [1]. Classical control literature emphasises that the DIPC\u2019s single actuator must regulate three degrees of freedom, making the system underactuated[1]. The double inverted pendulum also exhibits chaotic dynamics. The motion is governed by coupled ordinary differential equations that display strong sensitivity to initial conditions[2]. Small changes in starting state can lead to vastly different trajectories, so an accurate nonlinear model is essential for control design. These properties make the DIP a popular benchmark for advanced control strategies, including sliding\u2011mode control, optimal control and reinforcement learning. #### Methodology The dynamic model is derived using Lagrangian mechanics, an energy\u2011based formulation widely used for open\u2011chain robots and underactuated systems [3]. In this approach the kinetic and potential energies of each component are computed and combined to form the Lagrangian L=T\u2212VL = T - V. The Euler\u2013Lagrange equations are then applied to obtain the equations of motion (EOM). For the double inverted pendulum, the Lagrangian is the difference between the sum of kinetic energies and the sum of gravitational potentials [1]. The resulting nonlinear second\u2011order differential equations are transformed into a state\u2011space form suitable for control design. The derived model is validated by comparing with the high\u2011fidelity implementation in the accompanying Python project (DoubleInvertedPendulum class), ensuring that parameter names and units match those in config.yaml. \u2014\u2014 ## Section 1: System Dynamics and Mathematical Modeling ### 1.1 System Definition, Assumptions, and Nomenclature #### System Diagram The double inverted pendulum on a cart comprises a cart of mass mcm_{c} that translates horizontally on a track. Two rigid pendulum links are attached in series; the first link (mass m1m_{1}, length l1l_{1}) is pinned to the cart and the second link (mass m2m_{2}, length l2l_{2}) is attached to the end of the first. The centres of mass of the links are located at distances lc1l_{c1} and lc2l_{c2} from their respective pivots. Angles \u03b81\\theta_{1} and \u03b82\\theta_{2} are measured from the upward vertical, and the horizontal displacement of the cart is xx. Gravity acts downward with acceleration gg. A horizontal force uu applied to the cart constitutes the single control input. A schematic of the system is shown in Figure 1[1]. Double\u2011Inverted Pendulum on a Cart #### Model Assumptions 1. Rigid links. Each pendulum link is treated as a rigid body with constant mass and moment of inertia. There is no flexural deformation[1].": [[240, null]], "A. Undocumented Classes (Target: 0)": [[9, "a-undocumented-classes-target-0"]], "A.1 Installation": [[290, "a-1-installation"]], "A.1 Lyapunov Function Proofs": [[249, "a-1-lyapunov-function-proofs"]], "A.2 Issue #2 Overshoot Formula Derivation": [[249, "a-2-issue-2-overshoot-formula-derivation"]], "A.2 Running Validations": [[290, "a-2-running-validations"]], "A.3 Expected Output": [[290, "a-3-expected-output"]], "A.4 Customization": [[290, "a-4-customization"]], "AI-ish Anti-Patterns (AVOID)": [[12, "ai-ish-anti-patterns-avoid"]], "API & Technical Reference": [[95, "api-technical-reference"]], "API Documentation": [[154, "api-documentation"]], "API Modules": [[127, "api-modules"]], "API Overview The PSO Factory Integration API provides a framework for optimizing sliding mode controllers using Particle Swarm Optimization. The API is designed with the following principles: ### Design Philosophy": [[112, "api-overview-the-pso-factory-integration-api-provides-a-framework-for-optimizing-sliding-mode-controllers-using-particle-swarm-optimization-the-api-is-designed-with-the-following-principles-design-philosophy"]], "API Reference": [[12, "api-reference"], [127, "api-reference"], [127, null], [143, "api-reference"], [216, "api-reference"]], "API Reference ### 3.1 Primary Interface #### FDIsystem.check(t, meas, u, dt, dynamics_model) -> Tuple[str, float] Purpose: Perform fault detection analysis for current timestep. Parameters:": [[119, "api-reference-3-1-primary-interface-fdisystem-check-t-meas-u-dt-dynamics-model-tuple-str-float-purpose-perform-fault-detection-analysis-for-current-timestep-parameters"]], "API Reference ### Core Factory Functions #### create_controller(controller_type, config=None, gains=None) Creates a controller instance with robust configuration handling. Parameters:": [[275, "api-reference-core-factory-functions-create-controller-controller-type-config-none-gains-none-creates-a-controller-instance-with-robust-configuration-handling-parameters"]], "API Reference Document Analysis File: docs/api/optimization_module_api_reference.md ### Document Structure (10 Sections) | Section | Target Lines | Actual Lines | Status | Coverage |": [[57, "api-reference-document-analysis-file-docs-api-optimization-module-api-reference-md-document-structure-10-sections-section-target-lines-actual-lines-status-coverage"]], "API Reference Documentation": [[52, null]], "API Reference Documentation ### Core Factory Classes #### SMCType Enumeration": [[107, "api-reference-documentation-core-factory-classes-smctype-enumeration"]], "API Reference Guides Type: Technical Reference with Examples": [[130, null]], "API Reference {#api-reference}": [[220, "api-reference-api-reference"]], "ARIA Attributes": [[143, "aria-attributes"]], "AST Traversal Patterns for Code Claim Extraction Author: Documentation Expert Agent": [[297, null]], "AWS ECS (Elastic Container Service)": [[91, "aws-ecs-elastic-container-service"]], "About": [[270, "about"]], "Abstract": [[227, "abstract"], [231, "abstract"]], "Abstract This project presents a holistic software framework for the automated design and validation of robust nonlinear controllers. By synergizing sliding mode control (SMC) with particle swarm optimization (PSO), the framework delivers a toolchain to solve the canonical double inverted pendulum problem. It integrates multiple controller architectures, a dual\u2011model simulation environment, an interactive command\u2011line interface and a web\u2011based dashboard, a lightweight fault detection module and networked hardware\u2011in\u2011the\u2011loop testing. Together, these components bridge the gap between theoretical controller design and practical deployment, illustrating a generalizable methodology for the robust control of complex nonlinear systems.": [[222, null], [233, null]], "Abstract This study compares the robustness of Classical SMC and Hybrid Adaptive STA-SMC": [[169, "abstract-this-study-compares-the-robustness-of-classical-smc-and-hybrid-adaptive-sta-smc"]], "Academic Attribution (Papers/Thesis) Required in academic publications: Cite major scientific libraries:": [[15, "academic-attribution-papers-thesis-required-in-academic-publications-cite-major-scientific-libraries"]], "Academic Integrity Statement Status: To be completed in Phase B (Citation System Implementation)": [[0, null]], "Academic Theory Citations & References Project: Double Inverted Pendulum - Sliding Mode Control with PSO Optimization": [[3, null]], "Acceptance Criteria Validation ### Criterion 1: Consistent Regularization \u2705 PASS: All modules use centralized AdaptiveRegularizer Validation:": [[213, "acceptance-criteria-validation-criterion-1-consistent-regularization-pass-all-modules-use-centralized-adaptiveregularizer-validation"]], "Accessibility": [[28, "accessibility"], [30, "accessibility"], [31, "accessibility"], [145, "accessibility"], [154, "accessibility"], [156, "accessibility"]], "Accessibility Check": [[126, "accessibility-check"]], "Accuracy Audit Review": [[126, "accuracy-audit-review"]], "Accuracy Comparison": [[198, "accuracy-comparison"], [200, "accuracy-comparison"]], "Achievement Highlights": [[24, "achievement-highlights"]], "Achievement Summary": [[24, "achievement-summary"]], "Achievement Verification": [[25, "achievement-verification"], [26, "achievement-verification"]], "Acknowledgments": [[138, "acknowledgments"]], "Acknowledgments This project\u2019s architecture builds upon decades of software engineering research and best practices: 1. Gang of Four (1994) - Classical design patterns": [[17, "acknowledgments-this-project-s-architecture-builds-upon-decades-of-software-engineering-research-and-best-practices-1-gang-of-four-1994-classical-design-patterns"]], "Action Needed": [[144, "action-needed"]], "Adaptation law and dead zone": [[226, "adaptation-law-and-dead-zone"], [239, "adaptation-law-and-dead-zone"]], "Adaptive Boundary Layer": [[163, "adaptive-boundary-layer"]], "Adaptive Bounds Shrinking": [[290, "adaptive-bounds-shrinking"]], "Adaptive Control": [[289, "adaptive-control"]], "Adaptive Control Notation": [[258, "adaptive-control-notation"]], "Adaptive Control Theory": [[69, "adaptive-control-theory"]], "Adaptive Parameter Tuning ### 1. Boundary Layer Adaptation Dynamically adjust boundary layer to reduce chattering: ```python": [[35, "adaptive-parameter-tuning-1-boundary-layer-adaptation-dynamically-adjust-boundary-layer-to-reduce-chattering-python"]], "Adaptive Parameters ### Time-Varying Inertia Weight Linear Decrease: $$": [[215, "adaptive-parameters-time-varying-inertia-weight-linear-decrease"]], "Adaptive Regularization": [[220, "adaptive-regularization"]], "Adaptive Regularization Strategy": [[290, "adaptive-regularization-strategy"]], "Adaptive Runge-Kutta 45 (RK45)": [[200, "adaptive-runge-kutta-45-rk45"]], "Adaptive SMC": [[197, "adaptive-smc"], [226, "adaptive-smc"], [239, "adaptive-smc"]], "Adaptive SMC (5 Parameters)": [[201, "adaptive-smc-5-parameters"]], "Adaptive SMC Control": [[156, "adaptive-smc-control"]], "Adaptive SMC Mathematical Foundations ### Parameter Estimation Theory Adaptive SMC addresses parametric uncertainties through online parameter estimation:": [[279, "adaptive-smc-mathematical-foundations-parameter-estimation-theory-adaptive-smc-addresses-parametric-uncertainties-through-online-parameter-estimation"]], "Adaptive Sliding Mode Control Technical Guide": [[77, null]], "Adaptive and Nonlinear Control": [[256, "adaptive-and-nonlinear-control"]], "Adaptive controller selection based on performance": [[321, "adaptive-controller-selection-based-on-performance"]], "AdaptiveSMC": [[211, "adaptivesmc"]], "Add Background": [[267, "add-background"]], "Add Custom Code Block Selector": [[141, "add-custom-code-block-selector"]], "Add New Selector Pattern": [[142, "add-new-selector-pattern"]], "Add aliases for convenience": [[51, "add-aliases-for-convenience"]], "Added": [[139, "added"]], "Adding Custom Exclusion": [[140, "adding-custom-exclusion"]], "Adding Custom Selector": [[140, "adding-custom-selector"]], "Adding State Variables (e.g., Integral Term)": [[168, "adding-state-variables-e-g-integral-term"]], "Additional Resources": [[91, "additional-resources"]], "Additional Resources ### Online Pattern Catalogs - Refactoring.Guru: https://refactoring.guru/design-patterns - Visual explanations of all GoF patterns with Python examples - Python Patterns: https://python-patterns.guide/ - Python-specific pattern implementations and best practices - Real Python - Design Patterns: https://realpython.com/tutorials/patterns/ - In-depth tutorials on Python design patterns ### Books - \u201cPython Design Patterns\u201d by Chetan Giridhar (2016) - Packt Publishing": [[17, "additional-resources-online-pattern-catalogs-refactoring-guru-https-refactoring-guru-design-patterns-visual-explanations-of-all-gof-patterns-with-python-examples-python-patterns-https-python-patterns-guide-python-specific-pattern-implementations-and-best-practices-real-python-design-patterns-https-realpython-com-tutorials-patterns-in-depth-tutorials-on-python-design-patterns-books-python-design-patterns-by-chetan-giridhar-2016-packt-publishing"]], "Advanced Algorithms Guide Technical Reference for Optimization, Numerical Stability, and Algorithm Comparison": [[193, null]], "Advanced Configuration": [[141, "advanced-configuration"], [185, "advanced-configuration"]], "Advanced Configuration Scenarios ### Environment-Based Configuration ```python": [[72, "advanced-configuration-scenarios-environment-based-configuration-python"]], "Advanced Example - Multiple Controllers": [[156, "advanced-example-multiple-controllers"]], "Advanced Example: Controller State Trajectories": [[157, "advanced-example-controller-state-trajectories"]], "Advanced Examples": [[159, "advanced-examples"]], "Advanced Features": [[70, "advanced-features"], [133, "advanced-features"], [265, "advanced-features"]], "Advanced Integration Patterns ### 1. Real-Time Control Integration #### 1.1 Hardware-in-the-Loop (HIL) Setup ```bash": [[321, "advanced-integration-patterns-1-real-time-control-integration-1-1-hardware-in-the-loop-hil-setup-bash"]], "Advanced Numerical Stability Guide guide to numerical stability, robustness, and error mitigation in the DIP-SMC-PSO framework.": [[35, null]], "Advanced PSO Patterns ### Multi-Objective PSO Integration ```python": [[248, "advanced-pso-patterns-multi-objective-pso-integration-python"]], "Advanced SMC Controllers": [[82, "advanced-smc-controllers"]], "Advanced SMC Technical Guides": [[82, null]], "Advanced Simulation Options": [[170, "advanced-simulation-options"]], "Advanced Sphinx Documentation System - Implementation Report ## Executive Summary I have successfully implemented all 6 expert recommendations from ChatGPT\u2019s technical review, resulting in a production-grade Sphinx documentation system with CI/CD automation, enhanced security, and robust quality gates. ## \u2705 All Expert Recommendations Implemented ### 1. \u2705 Workflow Efficiency (PR-fast vs nightly-complete)": [[188, null]], "Advanced Topics:": [[183, "advanced-topics"]], "Advanced Usage": [[135, "advanced-usage"]], "Advanced: Multi-Objective PSO for STA-SMC": [[183, "advanced-multi-objective-pso-for-sta-smc"]], "Advantages and Disadvantages": [[200, "advantages-and-disadvantages"], [200, "id4"], [200, "id6"]], "Advantages and tuning": [[226, "advantages-and-tuning"], [239, "advantages-and-tuning"]], "After PSO, validate on multiple scenarios": [[148, "after-pso-validate-on-multiple-scenarios"]], "Aggregate Documentation Metrics ### Coverage Statistics | Controller | Class Docstring | Methods | Properties | Coverage | Quality |": [[55, "aggregate-documentation-metrics-coverage-statistics-controller-class-docstring-methods-properties-coverage-quality"]], "Alert Thresholds": [[245, "alert-thresholds"], [261, "alert-thresholds"]], "Algorithm Architecture": [[77, "algorithm-architecture"], [84, "algorithm-architecture"], [85, "algorithm-architecture"]], "Algorithm Categories": [[193, "algorithm-categories"]], "Algorithm Configuration": [[201, "algorithm-configuration"]], "Aliasing and Discretization Artifacts": [[290, "aliasing-and-discretization-artifacts"]], "All 11 Theorems - Quick Reference": [[125, "all-11-theorems-quick-reference"]], "All Controllers Operational Status": [[245, "all-controllers-operational-status"]], "All tests except known failing concurrent tests": [[283, "all-tests-except-known-failing-concurrent-tests"]], "Altair": [[8, "altair"]], "Alternative Navigation Views": [[262, "alternative-navigation-views"]], "Alternative Views": [[263, "alternative-views"]], "Alternative: Manual Workflow": [[21, "alternative-manual-workflow"]], "Analysis & Reports": [[95, "analysis-reports"]], "Analysis & Technical Reports": [[42, null]], "Analysis Results ### Phase 4.2 Quality Standards (Benchmark) | Metric | Phase 4.2 Achievement | Phase 4.3 Target |": [[58, "analysis-results-phase-4-2-quality-standards-benchmark-metric-phase-4-2-achievement-phase-4-3-target"]], "Analysis Tools": [[136, "analysis-tools"]], "Animate Numbers": [[267, "animate-numbers"]], "Animated Statistics": [[267, "animated-statistics"]], "Animation": [[136, "animation"]], "Animation Optimization": [[140, "animation-optimization"]], "Animations (\u2b50 Essential)": [[267, "animations-essential"]], "Annually": [[142, "annually"]], "Anti-Patterns to Avoid (None Found in Codebase)": [[41, "anti-patterns-to-avoid-none-found-in-codebase"]], "Appendix A: Chart.js Visualization Files All visualization data files are JSON-formatted for Chart.js integration. Location: D:/Projects/main/docs/visualization/performance_charts/ | File | Size | Chart Type | Description |": [[65, "appendix-a-chart-js-visualization-files-all-visualization-data-files-are-json-formatted-for-chart-js-integration-location-d-projects-main-docs-visualization-performance-charts-file-size-chart-type-description"]], "Appendix A: Complete Command Reference": [[177, "appendix-a-complete-command-reference"]], "Appendix A: Complete Command Reference ```bash": [[182, "appendix-a-complete-command-reference-bash"]], "Appendix A: Quick Reference ### File Locations": [[10, "appendix-a-quick-reference-file-locations"]], "Appendix A: Validation Script Usage": [[290, "appendix-a-validation-script-usage"]], "Appendix B: Network Protocol Specification": [[177, "appendix-b-network-protocol-specification"]], "Appendix B: Numerical Stability Troubleshooting": [[290, "appendix-b-numerical-stability-troubleshooting"]], "Appendix B: Statistical Data Files CSV files for further analysis in Excel, MATLAB, or Python. Location: D:/Projects/main/docs/benchmarks/data/ | File | Rows | Columns | Description |": [[65, "appendix-b-statistical-data-files-csv-files-for-further-analysis-in-excel-matlab-or-python-location-d-projects-main-docs-benchmarks-data-file-rows-columns-description"]], "Appendix: API Quick Reference": [[171, "appendix-api-quick-reference"]], "Appendix: Command Reference Quick Command Cheat Sheet: ```bash": [[298, "appendix-command-reference-quick-command-cheat-sheet-bash"]], "Appendix: File Listing ```bash": [[121, "appendix-file-listing-bash"]], "Appendix: Files by Category ### API Reference Documentation (336 files)": [[11, "appendix-files-by-category-api-reference-documentation-336-files"]], "Appendix: Module File Locations ```": [[58, "appendix-module-file-locations"]], "Applicable Standards": [[261, "applicable-standards"]], "Architecture": [[20, "architecture"], [70, "architecture"], [132, "architecture"], [153, "architecture"], [155, "architecture"], [185, "architecture"], [203, "architecture"]], "Architecture ### Core Components ```": [[213, "architecture-core-components"]], "Architecture ### Module Structure ```": [[51, "architecture-module-structure"]], "Architecture Diagrams (3 Total) \u2705 #### Diagram 1: Simulation System Architecture (Section 1.2)": [[59, "architecture-diagrams-3-total-diagram-1-simulation-system-architecture-section-1-2"]], "Architecture Overview": [[143, "architecture-overview"], [203, "architecture-overview"]], "Architecture Overview ### System Architecture The factory integration system follows enterprise-grade design patterns with clear separation of concerns: ```": [[116, "architecture-overview-system-architecture-the-factory-integration-system-follows-enterprise-grade-design-patterns-with-clear-separation-of-concerns"]], "Architecture Overview Flowchart": [[264, "architecture-overview-flowchart"]], "Architecture Overview ```": [[217, "architecture-overview"]], "Architecture Pattern": [[28, "architecture-pattern"]], "Assessment": [[26, "assessment"]], "Assessment - October 7, 2025": [[11, "assessment-october-7-2025"]], "Assessment Methodology": [[245, "assessment-methodology"]], "Attribution Audit": [[124, "attribution-audit"], [126, "attribution-audit"]], "Authentication": [[70, "authentication"]], "Auto-Fix Common Issues": [[94, "auto-fix-common-issues"]], "Auto-Generated Documentation": [[52, "auto-generated-documentation"]], "Automated Checks \u2705": [[27, "automated-checks"]], "Automated Coverage Analysis": [[261, "automated-coverage-analysis"]], "Automated Coverage Enforcement": [[37, "automated-coverage-enforcement"]], "Automated Git Backup System": [[70, null]], "Automated Recovery": [[261, "automated-recovery"]], "Automated Safety Responses": [[185, "automated-safety-responses"]], "Automated Validation": [[256, "automated-validation"]], "Automated Validation Suite A automated validation suite has been created: Location: scripts/validation/validate_getting_started.py Features:": [[147, "automated-validation-suite-a-automated-validation-suite-has-been-created-location-scripts-validation-validate-getting-started-py-features"]], "Automated Verification": [[125, "automated-verification"]], "Automatic Bounds": [[133, "automatic-bounds"]], "Automatic Builds": [[315, "automatic-builds"]], "Automatic configuration in tests/conftest.py": [[283, "automatic-configuration-in-tests-conftest-py"]], "Automation": [[315, "automation"]], "Available Features": [[137, "available-features"]], "Available Interactive Features": [[153, "available-interactive-features"]], "Available Tutorials": [[305, "available-tutorials"]], "Avoid complex config objects for simple use cases # 3. Batch operations": [[116, "avoid-complex-config-objects-for-simple-use-cases-3-batch-operations"]], "Azure Container Instances": [[91, "azure-container-instances"]], "B. Undocumented Methods (Target: 0)": [[9, "b-undocumented-methods-target-0"]], "B.1 Common Issues and Solutions": [[290, "b-1-common-issues-and-solutions"]], "B.2 Diagnostic Commands": [[290, "b-2-diagnostic-commands"]], "BAD: AI-ish Claims": [[12, "bad-ai-ish-claims"]], "BAD: AI-ish Description": [[12, "bad-ai-ish-description"]], "BAD: AI-ish Procedure": [[12, "bad-ai-ish-procedure"]], "Background Components": [[267, "background-components"]], "Background: The Double-Inverted Pendulum ### System Description The double-inverted pendulum (DIP) is a classic benchmark problem in control theory. It consists of: Physical Components:": [[164, "background-the-double-inverted-pendulum-system-description-the-double-inverted-pendulum-dip-is-a-classic-benchmark-problem-in-control-theory-it-consists-of-physical-components"]], "Backgrounds (\u2b50 Essential)": [[267, "backgrounds-essential"]], "Backporting Doc Fixes": [[315, "backporting-doc-fixes"]], "Bad: Division by zero": [[168, "bad-division-by-zero"]], "Balanced (recommended for SMC)": [[202, "balanced-recommended-for-smc"]], "Bar Chart (Metrics Comparison)": [[149, "bar-chart-metrics-comparison"]], "Bar Charts": [[157, "bar-charts"]], "Barrier Functions": [[201, "barrier-functions"]], "Base Interface: DynamicsModel Protocol": [[220, "base-interface-dynamicsmodel-protocol"]], "Base seed for reproducibility": [[68, "base-seed-for-reproducibility"]], "Baseline: nominal mass": [[166, "baseline-nominal-mass"]], "Basic Batch Execution": [[135, "basic-batch-execution"]], "Basic Build": [[91, "basic-build"]], "Basic Dynamics Evaluation": [[219, "basic-dynamics-evaluation"]], "Basic Optimization": [[133, "basic-optimization"]], "Basic PSO Controller Creation": [[20, "basic-pso-controller-creation"]], "Basic PSO Workflow": [[170, "basic-pso-workflow"]], "Basic PSO Workflows ### 1. Simple Controller Optimization #### Classical SMC Optimization ```python": [[280, "basic-pso-workflows-1-simple-controller-optimization-classical-smc-optimization-python"]], "Basic PSO optimization": [[148, "basic-pso-optimization"], [304, "basic-pso-optimization"]], "Basic Simulation": [[170, "basic-simulation"]], "Basic State Trajectories": [[149, "basic-state-trajectories"]], "Basic Usage": [[131, "basic-usage"], [156, "basic-usage"], [159, "basic-usage"]], "Basic Usage Examples ### 1. Creating Controllers with Default Settings ```python": [[276, "basic-usage-examples-1-creating-controllers-with-default-settings-python"]], "Basic optimization": [[182, "basic-optimization"]], "Basic usage with default parameters": [[49, "basic-usage-with-default-parameters"]], "Batch Processing": [[170, "batch-processing"]], "Batch Simulation": [[135, "batch-simulation"]], "Batch Simulation Example": [[216, "batch-simulation-example"]], "Batch Simulation Workflow Guide": [[171, null]], "BatchOrchestrator": [[203, "batchorchestrator"]], "Before Committing": [[94, "before-committing"]], "Before Migration (config_old.yaml)": [[108, "before-migration-config-old-yaml"]], "Before Publication": [[320, "before-publication"]], "Before Pushing": [[94, "before-pushing"]], "Before vs After Optimization": [[303, "before-vs-after-optimization"]], "Behavior & Limitations": [[70, "behavior-limitations"]], "Benchmark Comparisons": [[162, "benchmark-comparisons"]], "Benchmark Methodology ### Test Environment Platform: Windows": [[65, "benchmark-methodology-test-environment-platform-windows"]], "Benchmark Results": [[259, "benchmark-results"], [299, "benchmark-results"]], "Benchmarks": [[186, "benchmarks"]], "Benchmarks & Methodology This project includes benchmarking features for statistical analysis and performance comparison of sliding mode controllers. The benchmarking system provides standardized evaluation protocols and robust statistical metrics. ## Overview The benchmarking framework evaluates controllers across multiple dimensions: - Performance metrics: ISE, ITAE, RMS control effort, overshoot, constraint violations": [[68, null]], "Benchmarks (From Phase 5 Testing)": [[143, "benchmarks-from-phase-5-testing"]], "Best Cost: 0.000000": [[300, "best-cost-0-000000"]], "Best Gains: [77.6216 44.449 17.3134 14.25 ]": [[300, "best-gains-77-6216-44-449-17-3134-14-25"]], "Best Practices": [[91, "best-practices"], [94, "best-practices"], [131, "best-practices"], [154, "best-practices"], [159, "best-practices"], [170, "best-practices"], [203, "best-practices"]], "Best Practices ### 1. Input Validation ```python": [[35, "best-practices-1-input-validation-python"]], "Best Practices ### Configuration Best Practices Summary 1. Type Safety First python # \u2705 Good: Use type-safe configuration classes @dataclass(frozen=True) class ControllerConfig: gains: List[float] max_force: float # \u274c Bad: Untyped dictionary configurations config = {'gains': 'should be list', 'max_force': 'not a number'}  2. Validation at All Levels python # \u2705 Good: Multi-level validation def validate_config(config): # 1. Type validation assert isinstance(config.gains, list) # 2. Domain validation assert all(g > 0 for g in config.gains) # 3. Physics validation assert config.max_force > max(config.gains)  3. Clear Priority Rules python # \u2705 Good: Explicit priority handling gains = ( explicit_gains or # Priority 1 config_gains or # Priority 2 registry_defaults # Priority 3 )  4. Graceful Degradation python # \u2705 Good: Fallback mechanisms try: config = create_full_config(**params) except ConfigError: config = create_minimal_config(**essential_params)  5. Documentation and Examples yaml # \u2705 Good: Well-documented configuration controllers: classical_smc: # Gains: [k1, k2, \u03bb1, \u03bb2, K, kd] # k1, k2: Position feedback gains (affects settling time) # \u03bb1, \u03bb2: Surface coefficients (must be positive for stability) # K: Switching gain (higher values reduce steady-state error but increase chattering) # kd: Derivative gain (improves damping) gains: [20.0, 15.0, 12.0, 8.0, 35.0, 5.0] ": [[72, "best-practices-configuration-best-practices-summary-1-type-safety-first-python-good-use-type-safe-configuration-classes-dataclass-frozen-true-class-controllerconfig-gains-list-float-max-force-float-bad-untyped-dictionary-configurations-config-gains-should-be-list-max-force-not-a-number-2-validation-at-all-levels-python-good-multi-level-validation-def-validate-config-config-1-type-validation-assert-isinstance-config-gains-list-2-domain-validation-assert-all-g-0-for-g-in-config-gains-3-physics-validation-assert-config-max-force-max-config-gains-3-clear-priority-rules-python-good-explicit-priority-handling-gains-explicit-gains-or-priority-1-config-gains-or-priority-2-registry-defaults-priority-3-4-graceful-degradation-python-good-fallback-mechanisms-try-config-create-full-config-params-except-configerror-config-create-minimal-config-essential-params-5-documentation-and-examples-yaml-good-well-documented-configuration-controllers-classical-smc-gains-k1-k2-1-2-k-kd-k1-k2-position-feedback-gains-affects-settling-time-1-2-surface-coefficients-must-be-positive-for-stability-k-switching-gain-higher-values-reduce-steady-state-error-but-increase-chattering-kd-derivative-gain-improves-damping-gains-20-0-15-0-12-0-8-0-35-0-5-0"]], "Best Practices Checklist Before Starting:": [[169, "best-practices-checklist-before-starting"]], "Best Practices Established": [[24, "best-practices-established"], [32, "best-practices-established"], [33, "best-practices-established"]], "Best Practices and Guidelines": [[282, "best-practices-and-guidelines"]], "Best Practices for Machine-Readable Theorems": [[299, "best-practices-for-machine-readable-theorems"]], "Best for Backgrounds": [[271, "best-for-backgrounds"]], "Best for Cards & Lists": [[271, "best-for-cards-lists"]], "Best for Hero Sections": [[271, "best-for-hero-sections"]], "Best for Navigation": [[271, "best-for-navigation"]], "Best for Text Effects": [[271, "best-for-text-effects"]], "Best-Case Configuration (Upright)": [[290, "best-case-configuration-upright"]], "BibTeX Coverage": [[126, "bibtex-coverage"]], "BibTeX Files by Category | File | Entries | DOI/URL | Topics | Primary Use |": [[123, "bibtex-files-by-category-file-entries-doi-url-topics-primary-use"]], "BibTeX Source Files": [[69, "bibtex-source-files"]], "BibTeX Summary ### Overview Total Entries: 94": [[123, "bibtex-summary-overview-total-entries-94"]], "BibTeX System Questions ### Q5: Why are there 94 BibTeX entries but only 39 documentation citations? Answer: The 94 entries provide a bibliography covering:": [[122, "bibtex-system-questions-q5-why-are-there-94-bibtex-entries-but-only-39-documentation-citations-answer-the-94-entries-provide-a-bibliography-covering"]], "Bibliography": [[256, null]], "Bibliography & Academic References": [[69, null]], "Bibliography Composition": [[256, "table-bibliography-stats"]], "Bibliography Maintenance": [[256, "bibliography-maintenance"]], "Bibliography Statistics": [[256, "bibliography-statistics"]], "Bio-Inspired Origins": [[162, "bio-inspired-origins"]], "Black": [[8, "black"]], "Bootstrap Confidence Intervals (Non-Parametric)": [[149, "bootstrap-confidence-intervals-non-parametric"]], "Bound Selection": [[201, "bound-selection"]], "Boundary Layer Configuration": [[290, "boundary-layer-configuration"]], "Boundary Layer Mathematical Derivations": [[195, null]], "Boundary Layer Solution": [[163, "boundary-layer-solution"]], "Boundary layer and saturation": [[226, "boundary-layer-and-saturation"], [239, "boundary-layer-and-saturation"]], "Bounds Design Workflow": [[290, "bounds-design-workflow"]], "Bounds Validation": [[133, "bounds-validation"]], "Box Plots": [[157, "box-plots"]], "Branch Coverage Validation": [[261, "branch-coverage-validation"]], "Breakdown by Category": [[25, "breakdown-by-category"]], "Breaking Changes Policy": [[142, "breaking-changes-policy"]], "Browser Compatibility": [[28, "browser-compatibility"], [30, "browser-compatibility"], [31, "browser-compatibility"], [156, "browser-compatibility"], [157, "browser-compatibility"], [265, "browser-compatibility"]], "Browser Compatibility Matrix": [[140, "browser-compatibility-matrix"]], "Browser Console Check": [[30, "browser-console-check"]], "Browser Requirements": [[152, "browser-requirements"]], "Browser Support": [[27, "browser-support"], [137, "browser-support"], [139, "browser-support"], [145, "browser-support"], [156, "id1"]], "Browser Support Matrix": [[143, "browser-support-matrix"]], "Browser Support Updates": [[142, "browser-support-updates"]], "Browser Testing (Pending User Verification)": [[28, "browser-testing-pending-user-verification"]], "Browser Testing Status": [[153, "browser-testing-status"]], "Build Command": [[25, "build-command"]], "Build Output": [[142, "build-output"]], "Build Performance": [[24, "build-performance"], [32, "build-performance"]], "Build Results": [[27, "build-results"]], "Build Results Comparison": [[25, "build-results-comparison"]], "Build Results Validation": [[26, "build-results-validation"]], "Build Statistics": [[25, "build-statistics"]], "Build Status": [[28, "build-status"]], "Build Validation": [[26, "build-validation"]], "Build Verification": [[138, "build-verification"]], "Build Verification \ud83d\udd04": [[28, "build-verification"]], "Building Images": [[91, "building-images"]], "Built With This application uses:": [[15, "built-with-this-application-uses"]], "Button Appearance": [[140, "button-appearance"]], "Button Gap (Sibling Spacing)": [[140, "button-gap-sibling-spacing"]], "By Animation Style": [[268, "by-animation-style"]], "By Author ```bash": [[123, "by-author-bash"]], "By Category": [[271, "by-category"]], "By Component": [[127, "by-component"]], "By Name": [[271, "by-name"]], "By Skill Level": [[127, "by-skill-level"]], "By Task": [[127, "by-task"]], "By Use Case": [[268, "by-use-case"], [271, "by-use-case"]], "C. Type Hint Coverage by Module (Target: 95%+)": [[9, "c-type-hint-coverage-by-module-target-95"]], "CDN Deployment": [[141, "cdn-deployment"]], "CI Pipeline": [[34, "ci-pipeline"]], "CI/CD Integration": [[94, "ci-cd-integration"], [281, "ci-cd-integration"]], "CI/CD Integration ### GitHub Actions Configuration Recommended workflow for continuous integration: ```yaml": [[283, "ci-cd-integration-github-actions-configuration-recommended-workflow-for-continuous-integration-yaml"]], "CI/CD Integration Examples ### GitHub Actions Workflow ```yaml": [[282, "ci-cd-integration-examples-github-actions-workflow-yaml"]], "CI/CD Integration Recommendations": [[24, "ci-cd-integration-recommendations"]], "CLI Usage": [[5, "cli-usage"]], "CLI Usage ### Basic Commands ```bash": [[150, "cli-usage-basic-commands-bash"]], "CODE BEAUTIFICATION SPECIALIST: Assessment Report Agent: Code Beautification & Directory Organization Specialist": [[71, null]], "CONFIG Object (JavaScript)": [[140, "config-object-javascript"]], "CSS Customization": [[140, "css-customization"]], "CVXPY": [[8, "cvxpy"]], "Cache Size": [[31, "cache-size"]], "Cache System": [[154, "cache-system"]], "Cache stale": [[154, "cache-stale"]], "Caching Strategy": [[155, "caching-strategy"]], "Caching Strategy Matrix": [[31, "caching-strategy-matrix"]], "Can I change the collapse button icon?": [[145, "can-i-change-the-collapse-button-icon"]], "Can I collapse code blocks across all pages at once?": [[145, "can-i-collapse-code-blocks-across-all-pages-at-once"]], "Card/UI Components": [[267, "card-ui-components"]], "Cart Kinetic Energy": [[198, "cart-kinetic-energy"]], "Cart-Pendulum System": [[289, "cart-pendulum-system"]], "Case 1: Plain Text (No Markdown)": [[299, "case-1-plain-text-no-markdown"]], "Case 2: Lowercase Type": [[299, "case-2-lowercase-type"]], "Case 3: Invalid Citation Syntax": [[299, "case-3-invalid-citation-syntax"]], "Case 4: Header-Style Theorem": [[299, "case-4-header-style-theorem"]], "Case Study: Robustness Comparison Research Question:": [[169, "case-study-robustness-comparison-research-question"]], "Catastrophic Cancellation": [[290, "catastrophic-cancellation"]], "Challenge": [[143, "challenge"]], "Challenges": [[33, "challenges"]], "Challenges Encountered": [[27, "challenges-encountered"]], "Challenges Overcome": [[25, "challenges-overcome"], [26, "challenges-overcome"], [29, "challenges-overcome"], [31, "challenges-overcome"]], "Change Animation Duration": [[141, "change-animation-duration"]], "Change Backup Frequency": [[70, "change-backup-frequency"]], "Change Button Icons": [[141, "change-button-icons"]], "Change Button Style": [[142, "change-button-style"]], "Change Button Styling": [[141, "change-button-styling"]], "Change LocalStorage Key": [[141, "change-localstorage-key"]], "Change Master Control Colors": [[141, "change-master-control-colors"]], "Changelog - Collapsible Code Blocks Feature": [[139, null]], "Changelog All notable changes to the ResearchPlan validation system will be documented in this file. The format is based on Keep a Changelog,": [[1, null]], "Characteristic Scales": [[220, "characteristic-scales"]], "Chart Not Displaying": [[159, "chart-not-displaying"]], "Chart Types Supported": [[157, "chart-types-supported"]], "Chattering Analysis": [[163, "chattering-analysis"]], "Chattering Mitigation": [[231, null]], "Check": [[94, "check"]], "Check Task Status": [[70, "check-task-status"]], "Check for new defensive copies in result construction": [[44, "check-for-new-defensive-copies-in-result-construction"]], "Checklist A: Mathematical Validation": [[261, "checklist-a-mathematical-validation"]], "Checklist B: Implementation Validation": [[261, "checklist-b-implementation-validation"]], "Checklist C: Operational Validation": [[261, "checklist-c-operational-validation"]], "Citation FAQ For Reviewers: Frequently asked questions about citation system and academic integrity Last Updated: 2025-10-09": [[122, null]], "Citation Format": [[126, "citation-format"]], "Citation Format Examples ### Single Citation ```markdown": [[123, "citation-format-examples-single-citation-markdown"]], "Citation Instructions ### For Academic Papers/Thesis Minimal Citation (Core Dependencies): > This work uses NumPy (Harris et al., 2020), SciPy (Virtanen et al., 2020), and": [[8, "citation-instructions-for-academic-papers-thesis-minimal-citation-core-dependencies-this-work-uses-numpy-harris-et-al-2020-scipy-virtanen-et-al-2020-and"]], "Citation Quality": [[256, "citation-quality"]], "Citation Quick Reference For Reviewers: Fast access to citation information and most-cited sources Last Updated: 2025-10-09": [[123, null]], "Citation Style Guide": [[256, "citation-style-guide"]], "Citation System Documentation Status: To be completed in Phase B (Citation System Implementation)": [[4, null]], "Citation System Implementation Plan ## Overview Implementation of a citation and bibliography system for the DIP_SMC_PSO documentation, based on ChatGPT\u2019s analysis and the existing strategy in CLAUDE.md. ## Source Analysis Analyzed ChatGPT Implementation:": [[187, null]], "Citation Usage in Documentation": [[69, "citation-usage-in-documentation"]], "Citation Validation": [[124, "citation-validation"]], "Citation Verification": [[125, "citation-verification"]], "Citation by Topic Area ### Sliding Mode Control (35 entries) Foundational:": [[123, "citation-by-topic-area-sliding-mode-control-35-entries-foundational"]], "Citations & Academic Attribution Project: Double Inverted Pendulum - Sliding Mode Control with PSO Optimization": [[2, null]], "Citations (3 sources)": [[125, "citations-3-sources"], [125, "id1"], [125, "id6"]], "Citations by Research Area": [[256, "citations-by-research-area"]], "Claim Extraction User Guide Phase 1: Claim Extraction Infrastructure (Week 1)": [[298, null]], "Class A: Critical Safety Faults (Immediate Response Required)": [[261, "class-a-critical-safety-faults-immediate-response-required"]], "Class B: High-Priority Faults (Response within 200ms)": [[261, "class-b-high-priority-faults-response-within-200ms"]], "Class C: Monitoring Faults (Response within 1 second)": [[261, "class-c-monitoring-faults-response-within-1-second"]], "Classical SMC": [[197, "classical-smc"], [226, "classical-smc"], [239, "classical-smc"]], "Classical SMC (6 Parameters)": [[201, "classical-smc-6-parameters"]], "Classical SMC (6 gains) \u2192 30-60 particles": [[148, "classical-smc-6-gains-30-60-particles"]], "Classical SMC Control Law": [[163, "classical-smc-control-law"]], "Classical SMC Control Signal": [[156, "classical-smc-control-signal"]], "Classical SMC Gain Sensitivity": [[158, "classical-smc-gain-sensitivity"]], "Classical SMC Global Finite-Time Convergence": [[125, "classical-smc-global-finite-time-convergence"]], "Classical SMC Mathematical Framework ### System Model Consider the double-inverted pendulum system with state vector:": [[279, "classical-smc-mathematical-framework-system-model-consider-the-double-inverted-pendulum-system-with-state-vector"]], "Classical SMC bounds:": [[275, "classical-smc-bounds"]], "Classical SMC with Boundary Layer": [[156, "classical-smc-with-boundary-layer"]], "Classical Sliding Mode Control Technical Guide": [[78, null]], "ClassicalSMC": [[211, "classicalsmc"]], "ClassicalSMCConfig Parameters and Validation Rules This document provides specification of the ClassicalSMCConfig parameters, their mathematical foundations, validation rules, and edge case handling. ## 1. Configuration Schema Overview The ClassicalSMCConfig dataclass provides type-safe, validated configuration for Classical Sliding Mode Control with the following parameter categories: - Control Parameters: Core SMC gains and timing": [[196, null]], "Cleanup every N iterations": [[210, "cleanup-every-n-iterations"]], "Clone repository": [[121, "clone-repository"], [146, "clone-repository"]], "Cloud Platforms": [[91, "cloud-platforms"]], "Code Checker Python MCP Validation ### Factory Function Analysis Functions Analyzed: 8 public functions": [[56, "code-checker-python-mcp-validation-factory-function-analysis-functions-analyzed-8-public-functions"]], "Code Coverage Requirements": [[261, "code-coverage-requirements"]], "Code Example Validation Status ### Existing Code Patterns in Docstrings | Controller | Example Type | Location | Validation |": [[55, "code-example-validation-status-existing-code-patterns-in-docstrings-controller-example-type-location-validation"]], "Code Examples (2 Examples) \u2705 #### Example 1: Basic Simulation (~120 lines) \u2705 File: Section 8.1 Features:": [[59, "code-examples-2-examples-example-1-basic-simulation-120-lines-file-section-8-1-features"]], "Code Examples Validation ### Example 1: Basic PSO Optimization (\u2705 Validated)": [[57, "code-examples-validation-example-1-basic-pso-optimization-validated"]], "Code Implementation": [[125, "code-implementation"], [125, "id3"], [125, "id8"], [125, "id11"]], "Code Quality": [[142, "code-quality"]], "Code Quality Tools ### Pygments": [[8, "code-quality-tools-pygments"]], "Code Review Improvements ### 1. Enhanced Review Checklist #### 1.1 Method-Level Checks ```markdown": [[300, "code-review-improvements-1-enhanced-review-checklist-1-1-method-level-checks-markdown"]], "Code Statistics": [[29, "code-statistics"]], "Code Variable Naming Conventions": [[258, "code-variable-naming-conventions"]], "Code execution timeout": [[153, "code-execution-timeout"]], "Cognitive/Social Coefficients": [[162, "cognitive-social-coefficients"]], "Collapsible Code Blocks": [[137, "collapsible-code-blocks"]], "Collapsible Code Blocks - Integration Guide": [[141, null]], "Collapsible Code Blocks - User Guide": [[145, null]], "Color Legend": [[263, "color-legend"]], "Command Quick Reference ### Basic Simulation ```bash": [[128, "command-quick-reference-basic-simulation-bash"]], "Commit History (All Phases)": [[33, "commit-history-all-phases"]], "Commit Message Format": [[70, "commit-message-format"]], "Common Commands": [[170, "common-commands"]], "Common Failure Patterns": [[34, "common-failure-patterns"]], "Common Issues": [[70, "common-issues"], [91, "common-issues"], [142, "common-issues"], [158, "common-issues"], [185, "common-issues"], [211, "common-issues"], [265, "common-issues"]], "Common Issues & Solutions": [[144, "common-issues-solutions"]], "Common Issues and Approaches": [[20, "common-issues-and-approaches"]], "Common Numerical Issues ### 1. Matrix Singularity Problem: Mass matrix M(\u03b8) becomes ill-conditioned or singular. Symptoms:": [[35, "common-numerical-issues-1-matrix-singularity-problem-mass-matrix-m-becomes-ill-conditioned-or-singular-symptoms"]], "Common Questions Q: What\u2019s the difference between these API guides and the Technical Reference? A: API Guides are user-friendly, example-driven introductions to each module with common patterns. Technical Reference (docs/reference/) is auto-generated, API documentation with all classes, methods, and parameters. Q: Should I use create_controller() or create_smc_for_pso()? A: Use create_controller() for general usage with full configuration. Use create_smc_for_pso() for PSO optimization workflows where you only need to pass gain arrays. See Controllers API. Q: When should I use simplified vs full dynamics? A: Use simplified dynamics for rapid iteration and PSO optimization (10x faster). Use full nonlinear dynamics for high-fidelity simulation and final validation. See Simulation API. Q: How do I create custom cost functions? A: Implement a function with signature (metrics: dict, config: dict) -> float. See Optimization API for examples.": [[130, "common-questions-q-what-s-the-difference-between-these-api-guides-and-the-technical-reference-a-api-guides-are-user-friendly-example-driven-introductions-to-each-module-with-common-patterns-technical-reference-docs-reference-is-auto-generated-api-documentation-with-all-classes-methods-and-parameters-q-should-i-use-create-controller-or-create-smc-for-pso-a-use-create-controller-for-general-usage-with-full-configuration-use-create-smc-for-pso-for-pso-optimization-workflows-where-you-only-need-to-pass-gain-arrays-see-controllers-api-q-when-should-i-use-simplified-vs-full-dynamics-a-use-simplified-dynamics-for-rapid-iteration-and-pso-optimization-10x-faster-use-full-nonlinear-dynamics-for-high-fidelity-simulation-and-final-validation-see-simulation-api-q-how-do-i-create-custom-cost-functions-a-implement-a-function-with-signature-metrics-dict-config-dict-float-see-optimization-api-for-examples"]], "Common Test Execution Commands": [[281, "common-test-execution-commands"]], "Common Variations 1. Different Uncertainty Levels: ```python": [[313, "common-variations-1-different-uncertainty-levels-python"]], "Common Verification Issues": [[125, "common-verification-issues"]], "Communication Latency Impact": [[158, "communication-latency-impact"]], "Compact Matrix Form": [[198, "compact-matrix-form"]], "Comparative Summary and Recommendations": [[226, "comparative-summary-and-recommendations"], [239, "comparative-summary-and-recommendations"]], "Comparative Visualization (Multiple Controllers)": [[149, "comparative-visualization-multiple-controllers"]], "Comparing Multiple Results": [[170, "comparing-multiple-results"]], "Comparing Two Controllers": [[149, "comparing-two-controllers"]], "Comparison Plots": [[136, "comparison-plots"]], "Comparison to Phase 2 (Pyodide)": [[28, "comparison-to-phase-2-pyodide"]], "Comparison with Other Features": [[154, "comparison-with-other-features"]], "Comparison with Phase 4.2 Benchmark | Metric | Phase 4.2 | Phase 4.3 | Comparison |": [[57, "comparison-with-phase-4-2-benchmark-metric-phase-4-2-phase-4-3-comparison"]], "Comparison with Previous Phases": [[29, "comparison-with-previous-phases"], [156, "comparison-with-previous-phases"]], "Comparison with Project Goals ### Original Phase 6.2 Goals > Extract ~150 code snippets from tutorials/guides Achieved: 3,615 examples (24x more than estimated!) ### Unexpected Benefits 1. Coverage: Found examples in 368 files (vs estimated 25)": [[14, "comparison-with-project-goals-original-phase-6-2-goals-extract-150-code-snippets-from-tutorials-guides-achieved-3-615-examples-24x-more-than-estimated-unexpected-benefits-1-coverage-found-examples-in-368-files-vs-estimated-25"]], "Comparison: Classical vs Super-Twisting": [[163, "comparison-classical-vs-super-twisting"]], "Comparison: STA-SMC vs Classical SMC": [[183, "comparison-sta-smc-vs-classical-smc"]], "Comparison: Simplified vs Full Dynamics": [[198, "comparison-simplified-vs-full-dynamics"]], "Compatibility": [[141, "compatibility"]], "Compatible Extensions": [[141, "compatible-extensions"]], "Complete Bibliography": [[69, "complete-bibliography"], [256, "complete-bibliography"]], "Complete Code Examples ### Example 1: Basic Factory Usage ```python": [[51, "complete-code-examples-example-1-basic-factory-usage-python"]], "Complete Code ```python": [[313, "complete-code-python"]], "Complete Documentation Navigation": [[98, "complete-documentation-navigation"]], "Complete Documentation for PSO-Optimized Controller Factory ### Table of Contents": [[112, "complete-documentation-for-pso-optimized-controller-factory-table-of-contents"]], "Complete Equations of Motion": [[198, "complete-equations-of-motion"]], "Complete Example: create_controller()": [[132, "complete-example-create-controller"]], "Complete Example: create_smc_for_pso()": [[132, "complete-example-create-smc-for-pso"]], "Complete Integration Workflow Guide": [[321, null]], "Complete PSO Optimization Theory This section provides coverage of Particle Swarm Optimization (PSO) theory as applied to sliding mode controller parameter tuning, including mathematical foundations, convergence analysis, and multi-objective optimization strategies. ## Introduction to Particle Swarm Optimization Particle Swarm Optimization  is a population-based metaheuristic inspired by the social behavior of bird flocking and fish schooling. In the context of control systems, PSO provides an effective framework for automated parameter tuning and multi-objective optimization. ### Biological Inspiration The algorithm mimics the collective intelligence observed in nature:": [[293, null]], "Complete Phase History": [[24, "complete-phase-history"]], "Complete SMC Controller Comparison Matrix": [[36, null]], "Complete Sliding Mode Control Mathematical Theory": [[205, null]], "Complete Sliding Mode Control Theory This section provides coverage of sliding mode control theory as applied to the double-inverted pendulum system, including mathematical foundations, stability analysis, and chattering mitigation strategies.": [[294, null]], "Complete Structure": [[131, "complete-structure"]], "Complete System Dynamics This section provides a derivation of the double-inverted pendulum dynamics from first principles, including the complete mathematical development, linearization analysis, and state-space representation. ## Physical System Description The double-inverted pendulum consists of a cart of mass m_0 moving horizontally along a track, with two pendulum links of masses m_1 and m_2 and lengths l_1 and l_2 respectively, connected in series as shown in fig:dip_system. ```{figure} ../visual/dip_system_diagram.png": [[295, null]], "Complete Technical Reference for Production-Ready Factory Pattern Implementation ### Table of Contents": [[107, "complete-technical-reference-for-production-ready-factory-pattern-implementation-table-of-contents"]], "Complete Workflow Example ```python": [[178, "complete-workflow-example-python"]], "Complete Workflow Specifications for Controller Optimization ### Overview This guide documents the complete integration between the Enhanced Controller Factory and Particle Swarm Optimization (PSO) workflows for automated controller parameter tuning. The integration provides validated, thread-safe, mathematically rigorous optimization features for all SMC controller variants. ## PSO Integration Architecture ### System Overview ``` \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 PSO Engine \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Population \u2502 \u2502 Velocity Update \u2502 \u2502 \u2502 \u2502 Management \u2502 \u2502 & Position \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 Candidate Gains \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Factory-PSO Bridge \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Gain \u2502 \u2502 Controller \u2502 \u2502 \u2502 \u2502 Validation \u2502 \u2502 Instantiation \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 Controller Instance \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Simulation & Evaluation \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 DIP Plant \u2502 \u2502 Performance \u2502 \u2502 \u2502 \u2502 Simulation \u2502 \u2502 Metrics \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 Fitness Score \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 PSO Update \u2502 \u2502 (Fitness-Guided Search) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518": [[104, "complete-workflow-specifications-for-controller-optimization-overview-this-guide-documents-the-complete-integration-between-the-enhanced-controller-factory-and-particle-swarm-optimization-pso-workflows-for-automated-controller-parameter-tuning-the-integration-provides-validated-thread-safe-mathematically-rigorous-optimization-features-for-all-smc-controller-variants-pso-integration-architecture-system-overview-pso-engine-population-velocity-update-management-position-candidate-gains-factory-pso-bridge-gain-controller-validation-instantiation-controller-instance-simulation-evaluation-dip-plant-performance-simulation-metrics-fitness-score-pso-update-fitness-guided-search"]], "Complete file listing for reference": [[121, "complete-file-listing-for-reference"]], "Completed (Weeks 1-4)": [[82, "completed-weeks-1-4"]], "Completeness Checklist": [[138, "completeness-checklist"]], "Completion Reports": [[66, null], [308, "completion-reports"]], "Compliance Checklist \u2705 Open-Source Best Practices:": [[8, "compliance-checklist-open-source-best-practices"]], "Compliance and Standards": [[261, "compliance-and-standards"]], "Component Assessment Matrix ### Core Component Scores (Detailed Breakdown) | Component | Previous Score | Current Score | Status | Improvement |": [[242, "component-assessment-matrix-core-component-scores-detailed-breakdown-component-previous-score-current-score-status-improvement"]], "Component Hierarchy": [[203, "component-hierarchy"]], "Comprehensive Test": [[141, "comprehensive-test"]], "Comprehensive Test (30 minutes)": [[142, "comprehensive-test-30-minutes"]], "Computational Complexity": [[299, "computational-complexity"]], "Computational Cost": [[198, "computational-cost"], [200, "computational-cost"]], "Computational Efficiency": [[198, "computational-efficiency"]], "Computational Efficiency Analysis ### Instantiation Time Comparison Chart: settling_time_comparison.json": [[65, "computational-efficiency-analysis-instantiation-time-comparison-chart-settling-time-comparison-json"]], "Computational Optimization": [[203, "computational-optimization"]], "Computational Performance": [[216, "computational-performance"]], "Conclusion": [[24, "conclusion"], [25, "conclusion"], [26, "conclusion"], [27, "conclusion"], [28, "conclusion"], [29, "conclusion"], [31, "conclusion"], [32, "conclusion"], [33, "conclusion"], [41, "conclusion"]], "Conclusion ### Mission Success Summary \ud83c\udfaf MISSION ACCOMPLISHED:": [[40, "conclusion-mission-success-summary-mission-accomplished"]], "Conclusion ### Overall Assessment: \ud83d\udfe2 PRODUCTION READY The double-inverted pendulum SMC-PSO project demonstrates an exemplary test infrastructure that exceeds industry standards and achieves research-grade validation quality. With 1,236 test cases covering all critical system components, the infrastructure provides: - \u2705 Scientific Validation: Mathematical properties, convergence guarantees, stability analysis": [[284, "conclusion-overall-assessment-production-ready-the-double-inverted-pendulum-smc-pso-project-demonstrates-an-exemplary-test-infrastructure-that-exceeds-industry-standards-and-achieves-research-grade-validation-quality-with-1-236-test-cases-covering-all-critical-system-components-the-infrastructure-provides-scientific-validation-mathematical-properties-convergence-guarantees-stability-analysis"]], "Conclusion Phase 3.2 successfully delivered controller performance benchmarks with statistical validation, Chart.js visualizations, and production deployment recommendations. Classical SMC emerges as the clear winner for high-speed, safety-critical applications, while Hybrid Adaptive-STA requires remediation before production use. Immediate Next Steps:": [[67, "conclusion-phase-3-2-successfully-delivered-controller-performance-benchmarks-with-statistical-validation-chart-js-visualizations-and-production-deployment-recommendations-classical-smc-emerges-as-the-clear-winner-for-high-speed-safety-critical-applications-while-hybrid-adaptive-sta-requires-remediation-before-production-use-immediate-next-steps"]], "Conclusion Phase 3.2 successfully delivered controller performance benchmarks with statistical validation, revealing Classical SMC as the optimal choice for production deployment (fastest computation, perfect determinism, 100% stability). STA-SMC and Adaptive SMC also meet production standards, while Hybrid Adaptive-STA requires stability remediation. Key Deliverables:": [[65, "conclusion-phase-3-2-successfully-delivered-controller-performance-benchmarks-with-statistical-validation-revealing-classical-smc-as-the-optimal-choice-for-production-deployment-fastest-computation-perfect-determinism-100-stability-sta-smc-and-adaptive-smc-also-meet-production-standards-while-hybrid-adaptive-sta-requires-stability-remediation-key-deliverables"]], "Conclusion Phase 4.2 has successfully delivered documentation for the factory pattern system, establishing a solid foundation for controller instantiation, PSO optimization, and system extensibility. ### Key Achievements Summary \ud83c\udfaf 100% Factory System Coverage": [[56, "conclusion-phase-4-2-has-successfully-delivered-documentation-for-the-factory-pattern-system-establishing-a-solid-foundation-for-controller-instantiation-pso-optimization-and-system-extensibility-key-achievements-summary-100-factory-system-coverage"]], "Conclusion The DIP-SMC-PSO project has strong theoretical foundations and user tutorials, but critical gaps in examples, API automation, and production deployment prevent it from achieving world-class documentation status. Recommended Investment:": [[11, "conclusion-the-dip-smc-pso-project-has-strong-theoretical-foundations-and-user-tutorials-but-critical-gaps-in-examples-api-automation-and-production-deployment-prevent-it-from-achieving-world-class-documentation-status-recommended-investment"]], "Conclusion The Documentation Expert Agent has successfully completed GitHub Issue #8 by delivering a production documentation suite for the double-inverted pendulum sliding mode control system. The documentation provides: \u2705 Mathematical Rigor: Complete mathematical validation with formal proofs": [[243, "conclusion-the-documentation-expert-agent-has-successfully-completed-github-issue-8-by-delivering-a-production-documentation-suite-for-the-double-inverted-pendulum-sliding-mode-control-system-the-documentation-provides-mathematical-rigor-complete-mathematical-validation-with-formal-proofs"]], "Conclusion The FDI threshold calibration for Issue #18 successfully reduced the false positive rate from ~80% to 15.9% through statistically rigorous analysis and hysteresis implementation. While the target false positive rate of <1% could not be achieved within the acceptable threshold range [0.135, 0.150], the solution represents a 6x improvement and is a constraint-limited outcome rather than a methodological failure. Key Achievements:": [[120, "conclusion-the-fdi-threshold-calibration-for-issue-18-successfully-reduced-the-false-positive-rate-from-80-to-15-9-through-statistically-rigorous-analysis-and-hysteresis-implementation-while-the-target-false-positive-rate-of-1-could-not-be-achieved-within-the-acceptable-threshold-range-0-135-0-150-the-solution-represents-a-6x-improvement-and-is-a-constraint-limited-outcome-rather-than-a-methodological-failure-key-achievements"]], "Conclusion The Fault Detection and Isolation (FDI) system provides scientifically rigorous, real-time fault detection features for safety-critical control applications. Following the critical bug fixes documented in this guide, the system now correctly implements: 1. Mathematically sound weighted residual calculation with proper state-specific sensitivity amplification": [[119, "conclusion-the-fault-detection-and-isolation-fdi-system-provides-scientifically-rigorous-real-time-fault-detection-features-for-safety-critical-control-applications-following-the-critical-bug-fixes-documented-in-this-guide-the-system-now-correctly-implements-1-mathematically-sound-weighted-residual-calculation-with-proper-state-specific-sensitivity-amplification"]], "Conclusion The SMC Controller Factory System provides a robust, flexible, and type-safe mechanism for instantiating controllers with PSO integration. Key takeaways: - Enterprise Factory: Comprehensive, backwards-compatible, thread-safe": [[80, "conclusion-the-smc-controller-factory-system-provides-a-robust-flexible-and-type-safe-mechanism-for-instantiating-controllers-with-pso-integration-key-takeaways-enterprise-factory-comprehensive-backwards-compatible-thread-safe"]], "Conclusion The control primitives provide a robust foundation for implementing production-grade sliding mode controllers. Key takeaways: - Saturation Functions: Use tanh method with slope=3.0 for balanced chattering reduction": [[79, "conclusion-the-control-primitives-provide-a-robust-foundation-for-implementing-production-grade-sliding-mode-controllers-key-takeaways-saturation-functions-use-tanh-method-with-slope-3-0-for-balanced-chattering-reduction"]], "Conclusion The controller factory integration provides a robust, type-safe, and performance-optimized foundation for the DIP-SMC control system. Through error handling, mathematical validation, and PSO integration, the factory ensures reliable controller instantiation while maintaining the theoretical foundations required for stable control performance. The modular design enables easy extension with new controller types while preserving backward compatibility and performance requirements. The integration with the broader system architecture provides a solid foundation for research and practical applications in sliding mode control.": [[274, "conclusion-the-controller-factory-integration-provides-a-robust-type-safe-and-performance-optimized-foundation-for-the-dip-smc-control-system-through-error-handling-mathematical-validation-and-pso-integration-the-factory-ensures-reliable-controller-instantiation-while-maintaining-the-theoretical-foundations-required-for-stable-control-performance-the-modular-design-enables-easy-extension-with-new-controller-types-while-preserving-backward-compatibility-and-performance-requirements-the-integration-with-the-broader-system-architecture-provides-a-solid-foundation-for-research-and-practical-applications-in-sliding-mode-control"]], "Conclusion The factory integration fixes for GitHub Issue #6 deliver a robust, production-ready controller creation and optimization system. The implementation maintains full backwards compatibility while adding specific features for configuration validation, PSO integration, and error handling. ### Key Benefits Delivered 1. Developer Experience: Simplified API with error messages": [[275, "conclusion-the-factory-integration-fixes-for-github-issue-6-deliver-a-robust-production-ready-controller-creation-and-optimization-system-the-implementation-maintains-full-backwards-compatibility-while-adding-specific-features-for-configuration-validation-pso-integration-and-error-handling-key-benefits-delivered-1-developer-experience-simplified-api-with-error-messages"]], "Conclusion The integration protocols and cross-domain specifications provide a framework for interaction between all components of the DIP-SMC system. These protocols ensure: 1. Type Safety: Strong typing and contract validation across all interfaces": [[278, "conclusion-the-integration-protocols-and-cross-domain-specifications-provide-a-framework-for-interaction-between-all-components-of-the-dip-smc-system-these-protocols-ensure-1-type-safety-strong-typing-and-contract-validation-across-all-interfaces"]], "Conclusion The mathematical foundations presented in this document provide the theoretical framework for ensuring that all factory-created controllers satisfy fundamental control theory requirements. The integration of formal stability analysis, convergence verification, and numerical validation ensures that the controller factory produces mathematically sound and practically implementable control systems. The framework supports: 1. Rigorous stability analysis for all SMC variants": [[279, "conclusion-the-mathematical-foundations-presented-in-this-document-provide-the-theoretical-framework-for-ensuring-that-all-factory-created-controllers-satisfy-fundamental-control-theory-requirements-the-integration-of-formal-stability-analysis-convergence-verification-and-numerical-validation-ensures-that-the-controller-factory-produces-mathematically-sound-and-practically-implementable-control-systems-the-framework-supports-1-rigorous-stability-analysis-for-all-smc-variants"]], "Conclusion This integration guide provides complete workflows for all aspects of the DIP-SMC-PSO system. With all 4 controllers now operational and achieving perfect PSO optimization, users have a robust, production-ready control system for advanced pendulum control applications. Key Success Metrics:": [[321, "conclusion-this-integration-guide-provides-complete-workflows-for-all-aspects-of-the-dip-smc-pso-system-with-all-4-controllers-now-operational-and-achieving-perfect-pso-optimization-users-have-a-robust-production-ready-control-system-for-advanced-pendulum-control-applications-key-success-metrics"]], "Condition Number Definition": [[290, "condition-number-definition"]], "Condition Number Monitoring": [[290, "condition-number-monitoring"]], "Conditioning Monitoring": [[220, "conditioning-monitoring"]], "Confidence Intervals": [[149, "confidence-intervals"]], "Confidence Scoring Algorithm": [[299, "confidence-scoring-algorithm"]], "Configurable noise standard deviation": [[68, "configurable-noise-standard-deviation"]], "Configuration": [[52, "configuration"], [52, null], [53, "configuration"], [53, "id3"], [277, null]], "Configuration & Integration": [[95, "configuration-integration"]], "Configuration & Migration": [[98, "configuration-migration"], [98, null]], "Configuration & Schema": [[277, "configuration-schema"]], "Configuration & Validation ### PyYAML": [[8, "configuration-validation-pyyaml"]], "Configuration API Guide": [[131, null]], "Configuration Architecture ### System Overview The configuration integration system provides a unified approach to managing controller parameters from multiple sources with strict type safety and validation: ```": [[72, "configuration-architecture-system-overview-the-configuration-integration-system-provides-a-unified-approach-to-managing-controller-parameters-from-multiple-sources-with-strict-type-safety-and-validation"]], "Configuration Architecture Overview ### Hierarchical Configuration Structure ```yaml": [[73, "configuration-architecture-overview-hierarchical-configuration-structure-yaml"]], "Configuration Changes": [[27, "configuration-changes"], [139, "configuration-changes"]], "Configuration Consistency": [[265, "configuration-consistency"]], "Configuration Details": [[90, "configuration-details"]], "Configuration Domains": [[131, "configuration-domains"]], "Configuration Examples": [[200, "configuration-examples"]], "Configuration Export/Import": [[265, "configuration-export-import"]], "Configuration File Structure": [[170, "configuration-file-structure"]], "Configuration Files": [[91, "configuration-files"]], "Configuration Functions ### Configuration Resolution The factory system resolves configuration from multiple sources with the following priority: 1. Explicit parameters (highest priority)": [[49, "configuration-functions-configuration-resolution-the-factory-system-resolves-configuration-from-multiple-sources-with-the-following-priority-1-explicit-parameters-highest-priority"]], "Configuration Integration": [[28, "configuration-integration"]], "Configuration Integration Documentation ## Overview This document provides guidance on integrating the configuration system with the Enterprise Controller Factory. The DIP SMC-PSO project features a sophisticated configuration architecture that supports multiple sources, type safety, validation, and integration with controller creation workflows. ## Table of Contents 1. Configuration Architecture": [[72, null]], "Configuration Issues ### Issue 1: Configuration Parameter Conflicts #### Symptoms": [[117, "configuration-issues-issue-1-configuration-parameter-conflicts-symptoms"]], "Configuration Management": [[170, "configuration-management"], [170, "id1"]], "Configuration Merging": [[131, "configuration-merging"]], "Configuration Migration Mathematical Foundations": [[99, null]], "Configuration Modules": [[52, "configuration-modules"]], "Configuration Panels": [[265, "configuration-panels"]], "Configuration Reference": [[140, null]], "Configuration Requirements": [[34, "configuration-requirements"], [135, "configuration-requirements"]], "Configuration Resolution Patterns ### Multi-Source Parameter Resolution The factory implements sophisticated parameter resolution to handle multiple configuration sources: ```python": [[72, "configuration-resolution-patterns-multi-source-parameter-resolution-the-factory-implements-sophisticated-parameter-resolution-to-handle-multiple-configuration-sources-python"]], "Configuration Schema": [[131, "configuration-schema"]], "Configuration Schema ### YAML Configuration Structure The factory system integrates with the project\u2019s YAML configuration system: ```yaml": [[107, "configuration-schema-yaml-configuration-structure-the-factory-system-integrates-with-the-project-s-yaml-configuration-system-yaml"]], "Configuration Schema API ### Factory Configuration Classes ```python": [[112, "configuration-schema-api-factory-configuration-classes-python"]], "Configuration Schema Documentation ### 1. Classical SMC Configuration Schema #### ClassicalSMCConfig - Complete Parameter Reference ```python": [[275, "configuration-schema-documentation-1-classical-smc-configuration-schema-classicalsmcconfig-complete-parameter-reference-python"]], "Configuration Schema Mapping The factory maps configuration file parameters to controller initialization. ### Configuration File Structure (config.yaml) ```yaml": [[51, "configuration-schema-mapping-the-factory-maps-configuration-file-parameters-to-controller-initialization-configuration-file-structure-config-yaml-yaml"]], "Configuration Schema Reference - Factory Integration ## Complete Configuration Schema Documentation for All Controller Types Document Version: 2.0": [[273, null]], "Configuration Schema Reference Status: \ud83d\udea7 Under Construction This document will contain configuration schema documentation including: ## Planned Content ### YAML Configuration Structure": [[46, null]], "Configuration Schema Validation Documentation": [[73, null]], "Configuration Space": [[198, "configuration-space"]], "Configuration System {#configuration-system}": [[220, "configuration-system-configuration-system"]], "Configuration Troubleshooting": [[158, "configuration-troubleshooting"]], "Configuration Validation": [[131, "configuration-validation"], [158, "configuration-validation"], [170, "configuration-validation"]], "Configuration schema for factory integration": [[107, "configuration-schema-for-factory-integration"]], "Configuration schema version metadata": [[247, "configuration-schema-version-metadata"]], "Configure inertia weight schedule in config.yaml:": [[193, "configure-inertia-weight-schedule-in-config-yaml"]], "Conflict 1: Sliding Surface Parameter Notation": [[258, "conflict-1-sliding-surface-parameter-notation"]], "Conflict 2: Switching Gain Notation": [[258, "conflict-2-switching-gain-notation"]], "Conflict 3: PSO Inertia Weight": [[258, "conflict-3-pso-inertia-weight"]], "Conflict Resolution": [[70, "conflict-resolution"]], "Conservative (\u00b120% uncertainty)": [[313, "conservative-20-uncertainty"]], "Consistency with Previous Phases": [[29, "consistency-with-previous-phases"]], "Constraint Handling": [[133, "constraint-handling"]], "Constraint-Bounded Regions": [[201, "constraint-bounded-regions"]], "Constriction Factor": [[162, "constriction-factor"]], "Contact Information": [[142, "contact-information"]], "Content Created": [[27, "content-created"]], "Content Security Policy": [[143, "content-security-policy"]], "Contents": [[241, "contents"]], "Context Understanding": [[126, "context-understanding"]], "Context-Aware Exceptions": [[12, "context-aware-exceptions"]], "Continuous Monitoring Checklist": [[261, "continuous-monitoring-checklist"]], "Continuous Safety Validation": [[261, "continuous-safety-validation"]], "Continuous system health monitoring": [[321, "continuous-system-health-monitoring"]], "Contributing": [[82, "contributing"], [137, "contributing"]], "Contributing Guidelines": [[256, "contributing-guidelines"]], "Contributing to Documentation": [[127, "contributing-to-documentation"]], "Contributing \u2013 ResearchPlanSpec Validation": [[5, null]], "Contributors": [[270, "contributors"]], "Control Effort": [[149, "control-effort"]], "Control Effort Analysis": [[303, "control-effort-analysis"]], "Control Effort Optimization": [[156, "control-effort-optimization"]], "Control Input": [[220, "control-input"]], "Control Law Components": [[258, "control-law-components"]], "Control Law Testing Standards": [[75, null]], "Control Laws": [[288, "control-laws"]], "Control Loop Performance": [[41, "control-loop-performance"]], "Control Primitives": [[136, "control-primitives"]], "Control Primitives Reference Double-Inverted Pendulum Sliding Mode Control": [[79, null]], "Control System Health": [[245, "control-system-health"]], "Control Systems Documentation (Legacy)": [[83, null]], "Control Systems Literature": [[290, "control-systems-literature"]], "Control Theory": [[82, null]], "Control Theory Notation": [[289, "control-theory-notation"]], "Control Theory References": [[77, "control-theory-references"], [245, "control-theory-references"]], "Control law: equivalent and switching parts": [[226, "control-law-equivalent-and-switching-parts"], [239, "control-law-equivalent-and-switching-parts"]], "Controllability Analysis": [[161, "controllability-analysis"]], "Controllability Matrix": [[161, "controllability-matrix"]], "Controller": [[152, "controller"]], "Controller API Reference > Note: Controller API documentation has been consolidated into references. ## Quick Links - Factory System API - Complete factory and controller creation API": [[47, null]], "Controller APIs": [[52, "controller-apis"], [52, null]], "Controller Analysis": [[42, "controller-analysis"], [42, null], [199, null]], "Controller Benchmarks": [[66, "controller-benchmarks"]], "Controller Comparison": [[132, "controller-comparison"]], "Controller Comparison #### Performance Comparison Table | Characteristic | Classical SMC | Super-Twisting | Adaptive SMC | Hybrid STA |": [[166, "controller-comparison-performance-comparison-table-characteristic-classical-smc-super-twisting-adaptive-smc-hybrid-sta"]], "Controller Comparison & Analysis": [[199, "controller-comparison-analysis"]], "Controller Comparison Directive": [[159, "controller-comparison-directive"]], "Controller Comparison Matrix ### Mathematical Algorithms Comparison | Controller | Algorithm Type | Gains | Mathematical Properties | Complexity | Performance |": [[40, "controller-comparison-matrix-mathematical-algorithms-comparison-controller-algorithm-type-gains-mathematical-properties-complexity-performance"]], "Controller Comparison Overview ### Performance Summary Table | Controller | Inst. Time (ms) | Comp. Time (ms) | Stability | Thread Safety | Overall Score | Rank |": [[65, "controller-comparison-overview-performance-summary-table-controller-inst-time-ms-comp-time-ms-stability-thread-safety-overall-score-rank"]], "Controller Factory & Integration": [[95, "controller-factory-integration"]], "Controller Factory Documentation > Note: This document has been consolidated into the Factory System Guide. ## Quick Links - Factory System Guide - Complete controller factory documentation": [[6, null]], "Controller Factory Integration Analysis Report": [[38, null]], "Controller Factory Integration Technical Documentation ## Overview This document provides technical documentation for the controller factory pattern implementation in the double-inverted pendulum sliding mode control (DIP-SMC) system. The factory pattern serves as the primary instantiation mechanism for all SMC variants, ensuring consistent interfaces, robust error handling, and integration with optimization algorithms. ## Table of Contents 1. Factory Pattern Architecture": [[274, null]], "Controller Factory Pattern Implementation ### Core Factory Interface ```python": [[107, "controller-factory-pattern-implementation-core-factory-interface-python"]], "Controller Gain Impact Analysis": [[158, "controller-gain-impact-analysis"]], "Controller Hierarchy": [[132, "controller-hierarchy"]], "Controller Integration & Testing": [[98, "controller-integration-testing"]], "Controller Integration Guide ## Overview This guide provides instructions for integrating SMC controllers with the factory system, plant models, and PSO optimization workflows. It covers the enhanced integration patterns implemented to resolve GitHub Issue #6 factory integration challenges. ## Factory-Controller Integration Architecture ### Controller Lifecycle Management ```": [[101, null]], "Controller Issues": [[302, "controller-issues"]], "Controller Memory Management Patterns (Issue #15 Resolution) Date: 2025-10-01": [[210, null]], "Controller Memory Management Quick Reference": [[211, null]], "Controller Memory Patterns - Best Practices": [[41, null]], "Controller Method Review Checklist ### Return Statement Validation": [[300, "controller-method-review-checklist-return-statement-validation"]], "Controller Optimization for HIL Status: \ud83d\udea7 Under Construction This document will contain guidance on optimizing controller parameters for Hardware-in-the-Loop (HIL) deployment using PSO. ## Planned Content ### HIL-Specific Optimization Considerations": [[180, null]], "Controller Performance Benchmarks with Statistical Analysis Project: Double-Inverted Pendulum Sliding Mode Control": [[65, null]], "Controller Performance Comparison": [[157, "controller-performance-comparison"]], "Controller Registry System ### Registry Structure The CONTROLLER_REGISTRY provides a centralized mapping of controller types to their implementations: ```python": [[274, "controller-registry-system-registry-structure-the-controller-registry-provides-a-centralized-mapping-of-controller-types-to-their-implementations-python"]], "Controller Registry System The controller registry (CONTROLLER_REGISTRY) is a metadata database for all supported controller types. ### Registry Structure ```python": [[51, "controller-registry-system-the-controller-registry-controller-registry-is-a-metadata-database-for-all-supported-controller-types-registry-structure-python"]], "Controller Selection Guide": [[82, "controller-selection-guide"]], "Controller System Architecture Documentation Date: 2025-09-29": [[63, null]], "Controller Theory Reference Status: \ud83d\udea7 Under Construction This document will contain controller theory documentation including: ## Planned Content ### Sliding Mode Control Theory": [[48, null]], "Controller Troubleshooting": [[302, null]], "Controller Types": [[83, "controller-types"], [132, "controller-types"], [159, "controller-types"]], "Controller automatically cleaned up when out of scope": [[210, "controller-automatically-cleaned-up-when-out-of-scope"]], "Controller default gains": [[273, "controller-default-gains"]], "Controller-PSO Interface API Documentation": [[76, null]], "Controller-Specific Bounds": [[290, "controller-specific-bounds"]], "Controller-Specific Notes": [[211, "controller-specific-notes"]], "Controller-Specific Risk Assessment": [[37, "controller-specific-risk-assessment"]], "Controller-Specific Search Spaces": [[201, "controller-specific-search-spaces"]], "Controller-by-Controller Analysis ### 1. ClassicalSMC (src/controllers/smc/classic_smc.py) Docstring Coverage: \u2705 100% Class Documentation (Lines 21-90):": [[55, "controller-by-controller-analysis-1-classicalsmc-src-controllers-smc-classic-smc-py-docstring-coverage-100-class-documentation-lines-21-90"]], "Controllers": [[52, "controllers"]], "Controllers API Guide": [[132, null]], "Controllers Module Coverage Matrix": [[37, "controllers-module-coverage-matrix"]], "Controllers Module Documentation": [[82, null]], "Convergence Analysis ### Theoretical Foundations Stability Analysis via Constriction Factor: Clerc and Kennedy (2002) derived conditions for PSO convergence using control theory. Simplified Dynamics (1D case): Consider single particle in 1D with p_best = g_best = x*: $$": [[202, "convergence-analysis-theoretical-foundations-stability-analysis-via-constriction-factor-clerc-and-kennedy-2002-derived-conditions-for-pso-convergence-using-control-theory-simplified-dynamics-1d-case-consider-single-particle-in-1d-with-p-best-g-best-x"]], "Convergence Analysis Results ### Controller Performance Ranking | Rank | Controller | Final Cost | Improvement | Conv. Speed | Efficiency |": [[318, "convergence-analysis-results-controller-performance-ranking-rank-controller-final-cost-improvement-conv-speed-efficiency"]], "Convergence Analysis Topics For detailed PSO convergence analysis, refer to: - Primary Documentation: theory/pso_optimization_complete.md": [[292, "convergence-analysis-topics-for-detailed-pso-convergence-analysis-refer-to-primary-documentation-theory-pso-optimization-complete-md"]], "Convergence Diagnostics": [[133, "convergence-diagnostics"]], "Convergence Diagnostics ### Monitoring Convergence ```python": [[148, "convergence-diagnostics-monitoring-convergence-python"]], "Convergence Guarantees": [[162, "convergence-guarantees"]], "Convergence Indicators": [[201, "convergence-indicators"]], "Convergence Monitoring": [[290, "convergence-monitoring"]], "Convergence Monitoring Callback": [[53, "convergence-monitoring-callback"]], "Convergence Order Verification": [[200, "convergence-order-verification"]], "Convergence Parameters": [[258, "convergence-parameters"]], "Convergence Time Estimate": [[163, "convergence-time-estimate"]], "Convergence Verification": [[200, "convergence-verification"]], "Convergence and Stability Theorems": [[288, "convergence-and-stability-theorems"]], "Convergence and stability analysis": [[283, "convergence-and-stability-analysis"]], "Coordinate Systems": [[289, "coordinate-systems"]], "Copy Popular Components": [[267, "copy-popular-components"]], "Copyleft Licenses (Require attribution) MPL 2.0 (1 dependency):": [[8, "copyleft-licenses-require-attribution-mpl-2-0-1-dependency"]], "Core Components Created": [[28, "core-components-created"]], "Core Directives": [[29, "core-directives"]], "Core Documentation": [[98, "core-documentation"]], "Core Factory Documentation": [[98, null]], "Core Factory Functions ### create_controller() Primary factory function for creating controller instances. ```python": [[49, "core-factory-functions-create-controller-primary-factory-function-for-creating-controller-instances-python"]], "Core Implementation ### Class Definition ```{literalinclude} ../../src/optimization/algorithms/swarm/pso.py": [[215, "core-implementation-class-definition-literalinclude-src-optimization-algorithms-swarm-pso-py"]], "Core Infrastructure Created": [[27, "core-infrastructure-created"]], "Core Modules": [[52, "core-modules"]], "Core PSO Integration Classes ### SMCType Enumeration ```python": [[112, "core-pso-integration-classes-smctype-enumeration-python"]], "Core PWA Features": [[31, "core-pwa-features"]], "Core Performance Metrics": [[149, "core-performance-metrics"]], "Core Principles": [[12, "core-principles"]], "Core Requirements \u2705": [[28, "core-requirements"]], "Core SMC Controllers": [[82, "core-smc-controllers"]], "Core SMC Technical Guides": [[82, null]], "Core Scientific Computing ### NumPy": [[8, "core-scientific-computing-numpy"]], "Core Workflows": [[170, "core-workflows"]], "Coriolis and Centrifugal Terms": [[198, "coriolis-and-centrifugal-terms"]], "Cost Function": [[288, "cost-function"], [289, "cost-function"]], "Cost Functions": [[133, "cost-functions"]], "Cost aggregation: 0.7 * mean + 0.3 * max": [[193, "cost-aggregation-0-7-mean-0-3-max"]], "Coverage": [[138, "coverage"], [186, "coverage"]], "Coverage Analysis": [[281, "coverage-analysis"]], "Coverage Analysis & Quality Gates This document describes the coverage analysis system and quality gates implementation for the DIP-SMC-PSO project. ## Current Coverage Status Overall Coverage: 25.9% \u279c Target: 85%": [[87, null]], "Coverage Analysis Methodology Framework": [[39, null], [88, null]], "Coverage Improvement Implementation Plan": [[37, "coverage-improvement-implementation-plan"]], "Coverage Report": [[143, "coverage-report"]], "Coverage Requirements": [[245, "coverage-requirements"]], "Coverage Verification Procedures": [[261, "coverage-verification-procedures"]], "Create shell script for convenience": [[298, "create-shell-script-for-convenience"]], "Creating Config Objects in Code": [[131, "creating-config-objects-in-code"]], "Creating Custom Configurations": [[170, "creating-custom-configurations"]], "Creating PSO Convergence Plots": [[319, "creating-pso-convergence-plots"]], "Creating a New Release": [[315, "creating-a-new-release"]], "Credit": [[270, "credit"]], "Critical Code Paths Analysis": [[37, "critical-code-paths-analysis"]], "Critical Commands": [[126, "critical-commands"]], "Critical Issue Resolution Analysis ### GitHub Issue #9: Hybrid SMC Runtime Error #### Problem Scope": [[218, "critical-issue-resolution-analysis-github-issue-9-hybrid-smc-runtime-error-problem-scope"]], "Critical Safety Indicators": [[261, "critical-safety-indicators"]], "Critical Technical Insights": [[24, "critical-technical-insights"]], "Cross-Field Validation Errors": [[5, "cross-field-validation-errors"]], "Cross-Field Validation Rules": [[5, "cross-field-validation-rules"]], "Cross-Reference Module: Factory Bridge \u2705": [[57, "cross-reference-module-factory-bridge"], [58, "cross-reference-module-factory-bridge"]], "Cross-Reference Table": [[258, "cross-reference-table"]], "Cross-Reference Validation ### Phase 2.2 Integration (PSO Theory Foundations) File: docs/theory/pso_algorithm_foundations.md | Theory Section | API Reference Link | Status |": [[57, "cross-reference-validation-phase-2-2-integration-pso-theory-foundations-file-docs-theory-pso-algorithm-foundations-md-theory-section-api-reference-link-status"]], "Cross-References": [[126, "cross-references"], [288, "cross-references"]], "Cross-References and Integration ### Links to Phase 2 (Theory)": [[309, "cross-references-and-integration-links-to-phase-2-theory"]], "Cross-Term Lyapunov Function": [[156, "cross-term-lyapunov-function"]], "Cumulative Achievement (Phases 5-11)": [[26, "cumulative-achievement-phases-5-11"]], "Current Constraints": [[29, "current-constraints"]], "Current Dashboard \u2192 Enhanced Version": [[269, "current-dashboard-enhanced-version"]], "Current Deployment Status": [[245, "current-deployment-status"]], "Current Implementation Analysis": [[195, "current-implementation-analysis"]], "Current Research Trends": [[256, "current-research-trends"]], "Current Scope": [[28, "current-scope"]], "Current Version": [[142, "current-version"]], "Custom Animations": [[143, "custom-animations"]], "Custom Bounds": [[133, "custom-bounds"]], "Custom Controllers": [[132, "custom-controllers"]], "Custom Cost Function": [[183, "custom-cost-function"]], "Custom Cost Function Design": [[133, "custom-cost-function-design"]], "Custom Cost Functions for PSO Optimization Status: \ud83d\udea7 Under Construction This document will contain guidance on designing custom cost functions for PSO-based controller parameter optimization. ## Planned Content ### Cost Function Design Principles": [[172, null]], "Custom Dynamics Implementation": [[135, "custom-dynamics-implementation"]], "Custom Event Hooks": [[143, "custom-event-hooks"]], "Custom Models": [[134, "custom-models"]], "Custom Network Settings": [[185, "custom-network-settings"]], "Custom Parameter Tuning": [[265, "custom-parameter-tuning"]], "Custom Safety Guards": [[203, "custom-safety-guards"]], "Custom Selectors": [[143, "custom-selectors"]], "Customization": [[70, "customization"], [141, "customization"], [156, "customization"]], "D. Critical Gaps (P0)": [[9, "d-critical-gaps-p0"]], "DIP Controllability": [[161, "dip-controllability"]], "DIP Dynamics Theory": [[160, "dip-dynamics-theory"]], "DIP SMC PSO Documentation": [[189, null]], "DIP-SMC-PSO Documentation Inventory Summary": [[11, null]], "Daily Development Workflow": [[170, "daily-development-workflow"]], "Dark Mode Customization": [[140, "dark-mode-customization"]], "Dark Mode Support": [[30, "dark-mode-support"]], "Dashboard Features": [[170, "dashboard-features"]], "Dashboard Hero Section": [[267, "dashboard-hero-section"]], "Dashboard Overview": [[265, "dashboard-overview"]], "Data Export": [[149, "data-export"]], "Data Flow": [[203, "data-flow"]], "Data Flow Architecture": [[64, "data-flow-architecture"]], "Data Flow Architecture ### Control Loop Data Flow ```python": [[63, "data-flow-architecture-control-loop-data-flow-python"]], "Data Flow Specifications ### Standard Data Structures ```python": [[278, "data-flow-specifications-standard-data-structures-python"]], "Data Not Updating": [[159, "data-not-updating"]], "Data Packet Format": [[185, "data-packet-format"]], "Deadzone": [[136, "deadzone"]], "Debug Mode": [[91, "debug-mode"], [185, "debug-mode"]], "Debug PSO optimization problems": [[321, "debug-pso-optimization-problems"]], "Debugging": [[142, "debugging"]], "Debugging Tips": [[20, "debugging-tips"], [215, "debugging-tips"]], "Debugging Tools and Techniques ### Debugging Suite ```python": [[117, "debugging-tools-and-techniques-debugging-suite-python"]], "Default Cost Function": [[133, "default-cost-function"]], "Default Exclusions": [[140, "default-exclusions"]], "Default PSO Bounds (from config.yaml)": [[183, "default-pso-bounds-from-config-yaml"]], "Default Selectors": [[140, "default-selectors"]], "Deliverable 3: Phase 4.3 Completion Report File: docs/api/phase_4_3_completion_report.md": [[58, "deliverable-3-phase-4-3-completion-report-file-docs-api-phase-4-3-completion-report-md"]], "Deliverables": [[138, "deliverables"]], "Deliverables Checklist ### Primary Deliverables": [[56, "deliverables-checklist-primary-deliverables"]], "Deliverables Summary ### 1. Chart.js Data Files (6 files, 31KB total) | File | Size | Description |": [[318, "deliverables-summary-1-chart-js-data-files-6-files-31kb-total-file-size-description"]], "Deliverables Summary ### 1. Data Parser Script \u2705 File: D:/Projects/main/scripts/analysis/parse_performance_benchmarks.py": [[67, "deliverables-summary-1-data-parser-script-file-d-projects-main-scripts-analysis-parse-performance-benchmarks-py"]], "Deliverables Summary ### 1. Main Validation Methodology Document File: docs/validation/simulation_result_validation.md": [[309, "deliverables-summary-1-main-validation-methodology-document-file-docs-validation-simulation-result-validation-md"]], "Deliverables Summary | Deliverable | Status | Lines | Validation |": [[56, "deliverables-summary-deliverable-status-lines-validation"]], "Deliverables Summary | Deliverable | Status | Target | Achieved | Validation |": [[57, "deliverables-summary-deliverable-status-target-achieved-validation"], [59, "deliverables-summary-deliverable-status-target-achieved-validation"]], "Demo Page Features": [[29, "demo-page-features"]], "Dependencies": [[28, "dependencies"]], "Deployment": [[141, "deployment"]], "Deployment Architecture ### Production Deployment Patterns #### Container-Based Deployment ```yaml": [[63, "deployment-architecture-production-deployment-patterns-container-based-deployment-yaml"]], "Deployment Architecture Overview ### Multi-Stage Deployment Pipeline ```": [[93, "deployment-architecture-overview-multi-stage-deployment-pipeline"]], "Deployment Checklist": [[29, "deployment-checklist"]], "Deployment Decision Matrix": [[245, "deployment-decision-matrix"]], "Deployment Guides": [[241, "deployment-guides"]], "Deployment Options": [[90, "deployment-options"]], "Deployment Options ### Option 1: Local Production Deployment #### Step 1: Environment Setup": [[92, "deployment-options-option-1-local-production-deployment-step-1-environment-setup"]], "Deployment Procedure": [[177, "deployment-procedure"]], "Deployment Recommendations ### Immediate Deployment Actions 1. Deploy with Single-Threaded Operation: Current validation supports production deployment": [[243, "deployment-recommendations-immediate-deployment-actions-1-deploy-with-single-threaded-operation-current-validation-supports-production-deployment"]], "Deployment Safety Matrix": [[37, "deployment-safety-matrix"]], "Deployment Validation ### Post-Deployment Validation Checklist ```bash": [[92, "deployment-validation-post-deployment-validation-checklist-bash"]], "Deployment Validation Checklists and Quality Gates": [[93, null]], "Deployment Validation Protocol": [[245, "deployment-validation-protocol"]], "Deprecation Management System ## Overview The SMC Controller Factory includes a deprecation management system designed to handle configuration changes, parameter renames, and interface modifications while maintaining backward compatibility. This system provides systematic deprecation warnings, migration paths, and graceful degradation mechanisms to support smooth evolution of the codebase. ## Deprecation Architecture ### Deprecation Severity Levels ```python": [[102, null]], "Deprecation Path": [[5, "deprecation-path"]], "Deprecation Warnings": [[315, "deprecation-warnings"]], "Derivation (Taylor Series)": [[200, "derivation-taylor-series"]], "Derivation and Accuracy": [[200, "derivation-and-accuracy"]], "Derivatives": [[289, "derivatives"]], "Design Guidelines for Future Controllers": [[41, "design-guidelines-for-future-controllers"]], "Design Patterns (Gang of Four) All classical design patterns are attributed to: > Gamma, E., Helm, R., Johnson, R., & Vlissides, J. (1994). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley Professional. ### 1. Factory Pattern \u2b50 PRIMARY PATTERN Usage: 102+ files across the codebase": [[17, "design-patterns-gang-of-four-all-classical-design-patterns-are-attributed-to-gamma-e-helm-r-johnson-r-vlissides-j-1994-design-patterns-elements-of-reusable-object-oriented-software-addison-wesley-professional-1-factory-pattern-primary-pattern-usage-102-files-across-the-codebase"]], "Design Principles": [[143, "design-principles"], [203, "design-principles"], [220, "design-principles"]], "Detailed Analysis": [[43, "detailed-analysis"]], "Detailed Analysis ### 1. Link Coverage Documents with Links: 125 / 723 (17.3%) Analysis:": [[7, "detailed-analysis-1-link-coverage-documents-with-links-125-723-17-3-analysis"]], "Detailed Simulations": [[124, "detailed-simulations"]], "Detailed Simulations (30 minutes)": [[124, "detailed-simulations-30-minutes"]], "Detailed Theorem Verification": [[125, "detailed-theorem-verification"]], "Detailed Validation Results ### Phase 1: Installation Validation #### \u2705 Step 1: Python Version Check Status: PASS": [[147, "detailed-validation-results-phase-1-installation-validation-step-1-python-version-check-status-pass"]], "Detailed Validation Results ### Phase A: CLI Command Validation #### Commands Tested | Line | Original Command | Status | Correction Applied |": [[165, "detailed-validation-results-phase-a-cli-command-validation-commands-tested-line-original-command-status-correction-applied"]], "Detection Delay \u2264 50 steps Monte Carlo simulation \u2705 VERIFIED\nFalse Alarm Rate \u2264 1% Statistical testing \u2705 VERIFIED\nNo Memory Leaks Extended operation test \u2705 VERIFIED\nNumerical Stability Edge case testing \u2705 VERIFIED\nError Recovery Fault injection \u2705 VERIFIED": [[119, "detection-delay-50-steps-monte-carlo-simulation-verified-false-alarm-rate-1-statistical-testing-verified-no-memory-leaks-extended-operation-test-verified-numerical-stability-edge-case-testing-verified-error-recovery-fault-injection-verified"]], "Developer Documentation": [[138, "developer-documentation"]], "Development Mode (Live Code Reload)": [[91, "development-mode-live-code-reload"]], "Development Tips": [[34, "development-tips"]], "Development Workflow": [[282, "development-workflow"]], "Diagnose controller performance problems": [[321, "diagnose-controller-performance-problems"]], "Diagnosis": [[144, "diagnosis"], [144, "id4"], [144, "id8"], [144, "id12"], [144, "id15"], [144, "id19"], [144, "id23"], [144, "id27"], [144, "id31"], [144, "id35"]], "Diagram 3: Batch Simulation for PSO (Section 1.4)": [[59, "diagram-3-batch-simulation-for-pso-section-1-4"]], "Directive Option Specification": [[30, "directive-option-specification"]], "Directive Testing Plan": [[30, "directive-testing-plan"]], "Disable State Persistence": [[141, "disable-state-persistence"]], "Discretization of Sliding Surface": [[290, "discretization-of-sliding-surface"]], "Distributed control system": [[321, "distributed-control-system"]], "Docker Compose": [[91, "docker-compose"]], "Docker Compose Configuration": [[63, "docker-compose-configuration"]], "Docker Compose with GPU": [[91, "docker-compose-with-gpu"]], "Docker Deployment Guide": [[91, null]], "Docstring Coverage (\u226595%)": [[94, "docstring-coverage-95"]], "Document Metadata Phase: 4.3": [[57, "document-metadata-phase-4-3"]], "Document Metadata Version: 1.0": [[53, "document-metadata-version-1-0"]], "Documentation": [[124, "documentation"], [141, "documentation"], [142, "documentation"], [270, "documentation"]], "Documentation ### Sphinx": [[8, "documentation-sphinx"]], "Documentation Artifacts Created ### 1. Production Readiness Assessment Framework": [[243, "documentation-artifacts-created-1-production-readiness-assessment-framework"]], "Documentation Branches": [[315, "documentation-branches"]], "Documentation Breakdown by Category ### 1. API Reference Documentation": [[11, "documentation-breakdown-by-category-1-api-reference-documentation"]], "Documentation Categories Graph": [[264, "documentation-categories-graph"]], "Documentation Code Example Validation Report Report Date: 2025-10-07": [[14, null]], "Documentation Coverage Analysis ### 1. Factory Core Functions (100% Coverage) #### create_controller()": [[56, "documentation-coverage-analysis-1-factory-core-functions-100-coverage-create-controller"]], "Documentation Coverage Analysis ### Core Components (100% Coverage) #### 1. Core Simulation Engine (Section 2, ~550 lines) \u2705 File: src/simulation/engines/simulation_runner.py Components Documented:": [[59, "documentation-coverage-analysis-core-components-100-coverage-1-core-simulation-engine-section-2-550-lines-file-src-simulation-engines-simulation-runner-py-components-documented"]], "Documentation Coverage Analysis ### Modules Documented (100% Coverage) #### Priority 1: Core PSO Implementation \u2705": [[57, "documentation-coverage-analysis-modules-documented-100-coverage-priority-1-core-pso-implementation"]], "Documentation Coverage Implementation Plan": [[10, null]], "Documentation Coverage Matrix": [[9, null]], "Documentation Coverage Summary": [[82, "documentation-coverage-summary"]], "Documentation Cross-Reference Audit Report Report Date: 2025-10-07": [[7, null]], "Documentation Deliverables Required ### Deliverable 1: Enhanced Source File Docstrings Estimated Lines to Add/Enhance: ~2,000 lines total | Module | Current Lines | Docstrings to Add | Priority |": [[58, "documentation-deliverables-required-deliverable-1-enhanced-source-file-docstrings-estimated-lines-to-add-enhance-2-000-lines-total-module-current-lines-docstrings-to-add-priority"]], "Documentation Quality": [[29, "documentation-quality"], [32, "documentation-quality"], [138, "documentation-quality"]], "Documentation Quality Gates": [[94, null]], "Documentation Quality \u2705": [[24, "documentation-quality"], [28, "documentation-quality"]], "Documentation Requirements": [[261, "documentation-requirements"]], "Documentation Resources": [[145, "documentation-resources"]], "Documentation Roadmap": [[82, "documentation-roadmap"]], "Documentation Standards": [[137, "documentation-standards"], [138, "documentation-standards"]], "Documentation Statistics": [[138, "documentation-statistics"]], "Documentation Status": [[25, "documentation-status"], [26, "documentation-status"]], "Documentation Structure": [[138, "documentation-structure"]], "Documentation Structure & Site Map": [[95, null]], "Documentation Structure Mindmap": [[264, "documentation-structure-mindmap"]], "Documentation Structure ```": [[129, "documentation-structure"]], "Documentation Style Guide": [[12, null]], "Documentation Styling Library This directory contains documentation styling templates and patterns inspired by the react-bits-library project, adapted for the DIP-SMC-PSO control systems framework.": [[266, null]], "Documentation Version Support Policy": [[315, "documentation-version-support-policy"]], "Documentation Versioning Guide": [[315, null]], "Does this work offline?": [[145, "does-this-work-offline"]], "Dormand-Prince RK45 (DOPRI5)": [[200, "dormand-prince-rk45-dopri5"]], "Double Inverted Pendulum (8 entries) Control:": [[123, "double-inverted-pendulum-8-entries-control"]], "Double Inverted Pendulum Dynamics: Complete Derivation": [[198, null]], "Double Inverted Pendulum System": [[258, "double-inverted-pendulum-system"]], "Double RequestAnimationFrame Pattern": [[143, "double-requestanimationframe-pattern"]], "Double-Inverted Pendulum Control System": [[77, "double-inverted-pendulum-control-system"], [84, "double-inverted-pendulum-control-system"], [85, "double-inverted-pendulum-control-system"]], "Double-Inverted Pendulum Control System Document Version: 1.0": [[78, "double-inverted-pendulum-control-system-document-version-1-0"], [81, "double-inverted-pendulum-control-system-document-version-1-0"]], "Double-Inverted Pendulum Dynamics": [[160, "double-inverted-pendulum-dynamics"], [161, null]], "Double-Inverted Pendulum Physics": [[134, "double-inverted-pendulum-physics"]], "Double-Inverted Pendulum SMC-PSO Control Systems": [[245, "double-inverted-pendulum-smc-pso-control-systems"], [261, "double-inverted-pendulum-smc-pso-control-systems"]], "Double-Inverted Pendulum SMC-PSO Control Systems Document Version: 1.0": [[73, "double-inverted-pendulum-smc-pso-control-systems-document-version-1-0"], [93, "double-inverted-pendulum-smc-pso-control-systems-document-version-1-0"], [191, "double-inverted-pendulum-smc-pso-control-systems-document-version-1-0"]], "Double-Inverted Pendulum SMC-PSO Project Document Version: 1.0": [[283, "double-inverted-pendulum-smc-pso-project-document-version-1-0"]], "Double-Inverted Pendulum SMC-PSO Project Guide Version: 1.0": [[282, "double-inverted-pendulum-smc-pso-project-guide-version-1-0"]], "Double-Inverted Pendulum SMC-PSO Project Report Generated: 2025-09-28": [[284, "double-inverted-pendulum-smc-pso-project-report-generated-2025-09-28"]], "Dynamics & Numerics": [[199, null]], "Dynamics Model Selection": [[203, "dynamics-model-selection"]], "Dynamics Models": [[135, "dynamics-models"]], "DynamicsResult Structure": [[220, "dynamicsresult-structure"]], "Educational Use": [[265, "educational-use"]], "Effect Size (Cohen\u2019s d)": [[149, "effect-size-cohen-s-d"]], "Embedded Method Concept": [[200, "embedded-method-concept"]], "Embedded Systems / Real-Time Constraints": [[197, "embedded-systems-real-time-constraints"]], "Embedding in Theory Documentation": [[156, "embedding-in-theory-documentation"]], "Emergency Procedures": [[142, "emergency-procedures"]], "Emergency Response Protocols": [[261, "emergency-response-protocols"]], "Emergency Stop Sequence": [[261, "emergency-stop-sequence"]], "Enable Debug Logging": [[142, "enable-debug-logging"]], "End-to-End DIP-SMC-PSO System Usage Document Version: 1.0": [[321, "end-to-end-dip-smc-pso-system-usage-document-version-1-0"]], "End-to-End Workflow Validation ### EndToEndWorkflowValidator Class Validates complete system workflows from CLI entry to output generation. Location: tests/test_integration/test_end_to_end_validation.py #### Validation Workflows 1. CLI Accessibility: Entry point existence, help system, command options": [[208, "end-to-end-workflow-validation-endtoendworkflowvalidator-class-validates-complete-system-workflows-from-cli-entry-to-output-generation-location-tests-test-integration-test-end-to-end-validation-py-validation-workflows-1-cli-accessibility-entry-point-existence-help-system-command-options"]], "Energy Conservation": [[220, "energy-conservation"]], "Energy Conservation Analysis": [[200, "energy-conservation-analysis"]], "Energy Conservation Validation": [[219, "energy-conservation-validation"]], "Energy-Based Large Angle Stabilization Document Version: 1.0": [[86, "energy-based-large-angle-stabilization-document-version-1-0"]], "Enhanced Factory API Reference": [[103, null]], "Enhanced PSO Integration Guide": [[104, null]], "Enthusiasm & Marketing Buzzwords": [[12, "enthusiasm-marketing-buzzwords"]], "Environment Variables": [[34, "environment-variables"]], "Environment-Based Configuration": [[131, "environment-based-configuration"]], "Equation-Citation Integration": [[256, "equation-citation-integration"]], "Equations of Motion": [[134, "equations-of-motion"], [161, "equations-of-motion"], [220, "equations-of-motion"]], "Equations of Motion (Euler-Lagrange)": [[198, "equations-of-motion-euler-lagrange"]], "Equivalent control computation": [[226, "equivalent-control-computation"], [239, "equivalent-control-computation"]], "Error Amplification": [[290, "error-amplification"]], "Error Analysis": [[25, "error-analysis"], [26, "error-analysis"]], "Error Code Stability": [[5, "error-code-stability"]], "Error Control": [[200, "error-control"]], "Error Handling": [[20, "error-handling"], [135, "error-handling"], [154, "error-handling"]], "Error Handling & Recovery ### Multi-Level Error Handling The factory implements error handling at multiple levels: #### 1. Input Validation ```python": [[274, "error-handling-recovery-multi-level-error-handling-the-factory-implements-error-handling-at-multiple-levels-1-input-validation-python"]], "Error Handling The factory implements error handling with graceful degradation. ### Exception Hierarchy ```": [[51, "error-handling-the-factory-implements-error-handling-with-graceful-degradation-exception-hierarchy"]], "Error Handling and Robustness ### Graceful Degradation The factory system implements multiple layers of fallback mechanisms: ```python": [[116, "error-handling-and-robustness-graceful-degradation-the-factory-system-implements-multiple-layers-of-fallback-mechanisms-python"]], "Error Model": [[5, "error-model"]], "Euler-Lagrange Equations": [[161, "euler-lagrange-equations"], [198, "euler-lagrange-equations"]], "Example": [[299, "example"]], "Example 1: Add ShinyText to Dashboard": [[271, "example-1-add-shinytext-to-dashboard"]], "Example 1: Basic Simulation": [[220, "example-1-basic-simulation"]], "Example 1: Enhance Dashboard Header": [[269, "example-1-enhance-dashboard-header"]], "Example 1: Hello World + NumPy Verification": [[155, "example-1-hello-world-numpy-verification"]], "Example 1: Monte Carlo Validation of Controller Stability ### Objective Validate that a sliding mode controller maintains stability under parameter uncertainty:": [[313, "example-1-monte-carlo-validation-of-controller-stability-objective-validate-that-a-sliding-mode-controller-maintains-stability-under-parameter-uncertainty"]], "Example 1: Numbered Theorem with Citation": [[299, "example-1-numbered-theorem-with-citation"]], "Example 1: Offline Research Workflow": [[31, "example-1-offline-research-workflow"]], "Example 1: Theory Page": [[30, "example-1-theory-page"]], "Example 2: Add Aurora Background": [[271, "example-2-add-aurora-background"]], "Example 2: Animated Statistics Cards": [[269, "example-2-animated-statistics-cards"]], "Example 2: Batch Simulation for PSO (~190 lines) \u2705 File: Section 8.2 Features:": [[59, "example-2-batch-simulation-for-pso-190-lines-file-section-8-2-features"]], "Example 2: Classroom Demonstration": [[31, "example-2-classroom-demonstration"]], "Example 2: Energy Conservation Validation": [[220, "example-2-energy-conservation-validation"]], "Example 2: Matplotlib Visualization": [[155, "example-2-matplotlib-visualization"]], "Example 2: Unnumbered Lemma": [[299, "example-2-unnumbered-lemma"]], "Example 3: Add MagicBento Grid": [[271, "example-3-add-magicbento-grid"]], "Example 3: Array Broadcasting & Linear Algebra": [[155, "example-3-array-broadcasting-linear-algebra"]], "Example 3: Field Research": [[31, "example-3-field-research"]], "Example 3: Interactive Transaction Cards": [[269, "example-3-interactive-transaction-cards"]], "Example 3: Linearization for Control Design": [[220, "example-3-linearization-for-control-design"]], "Example 3: Proposition with Title (No Citation)": [[299, "example-3-proposition-with-title-no-citation"]], "Example 4: Animated Progress Indicators": [[269, "example-4-animated-progress-indicators"]], "Example 4: Model Comparison": [[220, "example-4-model-comparison"]], "Example 4: Random Number Generation & Statistics": [[155, "example-4-random-number-generation-statistics"]], "Example Projects Using This Feature": [[141, "example-projects-using-this-feature"]], "Example return values": [[51, "example-return-values"]], "Example: Basic Calculation": [[154, "example-basic-calculation"]], "Example: Controller Gain Calculation": [[154, "example-controller-gain-calculation"]], "Example: Controller Selector": [[154, "example-controller-selector"]], "Example: Getting Started Notebook": [[154, "example-getting-started-notebook"]], "Example: Optimal Documentation Structure": [[299, "example-optimal-documentation-structure"]], "Example: Parameter Checkbox": [[154, "example-parameter-checkbox"]], "Example: Simulation Button": [[154, "example-simulation-button"]], "Example: Slider Widget": [[154, "example-slider-widget"]], "Example: \u00b15 degree initial angle variation": [[68, "example-5-degree-initial-angle-variation"]], "Examples": [[5, "examples"], [96, null], [299, "examples"]], "Examples ### Basic Factory Usage ```python": [[49, "examples-basic-factory-usage-python"]], "Examples & API": [[308, null]], "Examples & References": [[308, "examples-references"]], "Examples Gallery": [[154, "examples-gallery"]], "Examples Matched": [[299, "examples-matched"]], "Examples NOT Matched": [[299, "examples-not-matched"]], "Examples and Use Cases ### Complete Configuration Integration Example ```python": [[72, "examples-and-use-cases-complete-configuration-integration-example-python"]], "Examples and Use Cases ### Example 1: Basic PSO Optimization ```python": [[248, "examples-and-use-cases-example-1-basic-pso-optimization-python"]], "Examples section": [[55, "examples-section"]], "Exclusion Rules (JavaScript)": [[140, "exclusion-rules-javascript"]], "Execution Caching": [[29, "execution-caching"], [154, "execution-caching"]], "Execution Environment": [[154, "execution-environment"]], "Execution timeout": [[154, "execution-timeout"]], "Executive Summary": [[9, "executive-summary"], [24, "executive-summary"], [25, "executive-summary"], [26, "executive-summary"], [27, "executive-summary"], [28, "executive-summary"], [29, "executive-summary"], [30, "executive-summary"], [31, "executive-summary"], [32, "executive-summary"], [41, "executive-summary"], [75, "executive-summary"], [77, "executive-summary"], [84, "executive-summary"], [85, "executive-summary"], [171, "executive-summary"], [177, "executive-summary"], [245, "executive-summary"], [249, "executive-summary"], [261, "executive-summary"], [287, "executive-summary"], [290, "executive-summary"]], "Executive Summary ### Overall Assessment Status: PRODUCTION-READY WITH STRATEGIC ENHANCEMENTS The DIP SMC PSO codebase demonstrates architectural organization with enterprise-grade directory structure and strong ASCII header compliance. However, there are targeted opportunities for code quality enhancement and import optimization. Key Findings:": [[71, "executive-summary-overall-assessment-status-production-ready-with-strategic-enhancements-the-dip-smc-pso-codebase-demonstrates-architectural-organization-with-enterprise-grade-directory-structure-and-strong-ascii-header-compliance-however-there-are-targeted-opportunities-for-code-quality-enhancement-and-import-optimization-key-findings"]], "Executive Summary ### Test Infrastructure Health Score: \ud83d\udfe2 9.2/10 - good The double-inverted pendulum SMC-PSO project demonstrates an exceptionally robust test infrastructure that exceeds research-grade standards. With 1,236 test cases across 113 test files, the system provides complete validation coverage for complex control systems, optimization algorithms, and numerical methods. ### Key Achievements - \u2705 Coverage: 17 specialized pytest markers for scientific validation": [[284, "executive-summary-test-infrastructure-health-score-9-2-10-good-the-double-inverted-pendulum-smc-pso-project-demonstrates-an-exceptionally-robust-test-infrastructure-that-exceeds-research-grade-standards-with-1-236-test-cases-across-113-test-files-the-system-provides-complete-validation-coverage-for-complex-control-systems-optimization-algorithms-and-numerical-methods-key-achievements-coverage-17-specialized-pytest-markers-for-scientific-validation"]], "Executive Summary A critical runtime error in the Hybrid Adaptive STA SMC controller was identified and resolved. The error 'numpy.ndarray' object has no attribute 'get' was caused by a missing return statement in the main control method, leading to incorrect type handling in the simulation pipeline. Impact Assessment:": [[300, "executive-summary-a-critical-runtime-error-in-the-hybrid-adaptive-sta-smc-controller-was-identified-and-resolved-the-error-numpy-ndarray-object-has-no-attribute-get-was-caused-by-a-missing-return-statement-in-the-main-control-method-leading-to-incorrect-type-handling-in-the-simulation-pipeline-impact-assessment"]], "Executive Summary Based on AST analysis of 316 Python files: - Current State: - Type Hint Coverage: 89.0% (target: 95%, gap: 6.0%) - Undocumented Classes: 52/712 (7.3%) - Undocumented Public Methods: 72/1,628 (4.4%) - ALREADY PASSING <5% TARGET - Critical Blockers: - 2 core dynamics modules have 0% type hints (CRITICAL) - 15 P0 controller/factory classes undocumented - 14 P0 controller methods undocumented - Positive Findings: - 164 modules (47%) already exceed 95% type hint coverage - 50 modules (14%) have 100% perfect type hints - Method documentation already meets <5% target": [[10, "executive-summary-based-on-ast-analysis-of-316-python-files-current-state-type-hint-coverage-89-0-target-95-gap-6-0-undocumented-classes-52-712-7-3-undocumented-public-methods-72-1-628-4-4-already-passing-5-target-critical-blockers-2-core-dynamics-modules-have-0-type-hints-critical-15-p0-controller-factory-classes-undocumented-14-p0-controller-methods-undocumented-positive-findings-164-modules-47-already-exceed-95-type-hint-coverage-50-modules-14-have-100-perfect-type-hints-method-documentation-already-meets-5-target"]], "Executive Summary Finding: All 6 controller classes already have comprehensive, research-grade documentation that EXCEEDS Phase 4.1 requirements. No additional docstrings are needed. The existing documentation includes: - \u2705 Detailed class-level docstrings with mathematical foundations": [[55, "executive-summary-finding-all-6-controller-classes-already-have-comprehensive-research-grade-documentation-that-exceeds-phase-4-1-requirements-no-additional-docstrings-are-needed-the-existing-documentation-includes-detailed-class-level-docstrings-with-mathematical-foundations"]], "Executive Summary GitHub Issue #6 Status: \u2705 PRODUCTION READY (92% System Health Score) The factory integration system provides a unified, type-safe interface for creating and managing sliding mode controllers (SMC) with integrated PSO optimization features. The implementation achieves production-ready status with validation across all critical components. ### Key Achievements": [[107, "executive-summary-github-issue-6-status-production-ready-92-system-health-score-the-factory-integration-system-provides-a-unified-type-safe-interface-for-creating-and-managing-sliding-mode-controllers-smc-with-integrated-pso-optimization-features-the-implementation-achieves-production-ready-status-with-validation-across-all-critical-components-key-achievements"]], "Executive Summary GitHub Issue #6 addressed critical factory pattern implementation issues that were impacting the reliability and usability of the double-inverted pendulum sliding mode control system. The resolved implementation provides: ### Key Improvements Delivered - \u2705 Robust Controller Factory: Enhanced src/controllers/factory.py with error handling and fallback mechanisms": [[275, "executive-summary-github-issue-6-addressed-critical-factory-pattern-implementation-issues-that-were-impacting-the-reliability-and-usability-of-the-double-inverted-pendulum-sliding-mode-control-system-the-resolved-implementation-provides-key-improvements-delivered-robust-controller-factory-enhanced-src-controllers-factory-py-with-error-handling-and-fallback-mechanisms"]], "Executive Summary GitHub Issue #8 has been successfully completed by the Documentation Expert Agent. This mission focused on creating production-ready documentation for the double-inverted pendulum sliding mode control system with PSO optimization. The documentation suite ensures mathematical rigor, safety compliance, and operational excellence for production deployment. Documentation Deliverables: 5 documents": [[243, "executive-summary-github-issue-8-has-been-successfully-completed-by-the-documentation-expert-agent-this-mission-focused-on-creating-production-ready-documentation-for-the-double-inverted-pendulum-sliding-mode-control-system-with-pso-optimization-the-documentation-suite-ensures-mathematical-rigor-safety-compliance-and-operational-excellence-for-production-deployment-documentation-deliverables-5-documents"]], "Executive Summary MAJOR IMPROVEMENT: Production readiness score increased from 7.8/10 to 9.125/10 following the successful resolution of the Hybrid SMC runtime error and full system validation. KEY ACHIEVEMENTS:": [[242, "executive-summary-major-improvement-production-readiness-score-increased-from-7-8-10-to-9-125-10-following-the-successful-resolution-of-the-hybrid-smc-runtime-error-and-full-system-validation-key-achievements"]], "Executive Summary Overall Completeness: 73/100 \ud83d\udfe1 The DIP-SMC-PSO project has extensive documentation with 684 total files spanning 258,121 lines. The project excels in theoretical foundations, user tutorials, and MCP integration. However, critical gaps exist in examples/code samples (only 2 files), API documentation automation, and production deployment guides. ### Key Metrics | Metric | Value |": [[11, "executive-summary-overall-completeness-73-100-the-dip-smc-pso-project-has-extensive-documentation-with-684-total-files-spanning-258-121-lines-the-project-excels-in-theoretical-foundations-user-tutorials-and-mcp-integration-however-critical-gaps-exist-in-examples-code-samples-only-2-files-api-documentation-automation-and-production-deployment-guides-key-metrics-metric-value"]], "Executive Summary Phase 3.3 has successfully created validation methodology documentation covering Monte Carlo analysis, cross-validation, statistical testing, and benchmark comparisons for control system performance validation. This phase completes the analytical documentation trilogy (Performance \u2192 Benchmarking \u2192 Validation). Key Achievement: Research-grade validation framework documentation with 4 executable examples and 2,212 lines of methodology guidance.": [[309, "executive-summary-phase-3-3-has-successfully-created-validation-methodology-documentation-covering-monte-carlo-analysis-cross-validation-statistical-testing-and-benchmark-comparisons-for-control-system-performance-validation-this-phase-completes-the-analytical-documentation-trilogy-performance-benchmarking-validation-key-achievement-research-grade-validation-framework-documentation-with-4-executable-examples-and-2-212-lines-of-methodology-guidance"]], "Executive Summary Phase 4.2 successfully documented the complete factory pattern system for controller creation, PSO integration, parameter interfaces, and configuration schemas. This documentation provides production-ready guidance for controller instantiation, gain optimization, and system extensibility. ### Key Achievements \u2705 100% factory system coverage - All public functions and classes documented": [[56, "executive-summary-phase-4-2-successfully-documented-the-complete-factory-pattern-system-for-controller-creation-pso-integration-parameter-interfaces-and-configuration-schemas-this-documentation-provides-production-ready-guidance-for-controller-instantiation-gain-optimization-and-system-extensibility-key-achievements-100-factory-system-coverage-all-public-functions-and-classes-documented"]], "Executive Summary Phase 4.3 analysis is COMPLETE with review of:": [[58, "executive-summary-phase-4-3-analysis-is-complete-with-review-of"]], "Executive Summary Phase 4.3 successfully documented the complete PSO optimization system with API reference, validated code examples, architectural diagrams, and extensive cross-referencing to Phase 2.2 (PSO theory) and Phase 4.2 (factory system). This documentation achieves production-ready quality standards matching the Phase 4.2 benchmark (96/100). ### Key Achievements \u2705 100% optimization module coverage - All 6 priority modules fully documented": [[57, "executive-summary-phase-4-3-successfully-documented-the-complete-pso-optimization-system-with-api-reference-validated-code-examples-architectural-diagrams-and-extensive-cross-referencing-to-phase-2-2-pso-theory-and-phase-4-2-factory-system-this-documentation-achieves-production-ready-quality-standards-matching-the-phase-4-2-benchmark-96-100-key-achievements-100-optimization-module-coverage-all-6-priority-modules-fully-documented"]], "Executive Summary Phase 4.4 successfully documented the complete simulation engine system including SimulationRunner, dynamics models, orchestrators, integrators, and integration patterns. This documentation provides production-ready guidance for simulation execution, batch processing, numerical integration, and controller-dynamics integration, achieving the same high-quality standards established in Phases 4.2 and 4.3. ### Key Achievements \u2705 100% simulation engine coverage - All 45 Python modules\u2019 public APIs documented": [[59, "executive-summary-phase-4-4-successfully-documented-the-complete-simulation-engine-system-including-simulationrunner-dynamics-models-orchestrators-integrators-and-integration-patterns-this-documentation-provides-production-ready-guidance-for-simulation-execution-batch-processing-numerical-integration-and-controller-dynamics-integration-achieving-the-same-high-quality-standards-established-in-phases-4-2-and-4-3-key-achievements-100-simulation-engine-coverage-all-45-python-modules-public-apis-documented"]], "Executive Summary Successfully completed controller performance benchmark analysis with Pandas-based statistical validation and Chart.js visualization generation. Analyzed 4 SMC controller variants across 12 performance metrics, generating 5 interactive visualizations and delivering production-ready deployment recommendations. ### Mission Success Metrics | Objective | Target | Achieved | Status |": [[67, "executive-summary-successfully-completed-controller-performance-benchmark-analysis-with-pandas-based-statistical-validation-and-chart-js-visualization-generation-analyzed-4-smc-controller-variants-across-12-performance-metrics-generating-5-interactive-visualizations-and-delivering-production-ready-deployment-recommendations-mission-success-metrics-objective-target-achieved-status"]], "Executive Summary Successfully implemented PSO convergence visualization system with Pandas-based log parsing and Chart.js data generation. All 4 controller optimization logs parsed, analyzed, and prepared for interactive web visualization. ###Key Achievements - Parsed 4 PSO logs (Classical, STA, Adaptive, Hybrid) with regex-based extraction": [[318, "executive-summary-successfully-implemented-pso-convergence-visualization-system-with-pandas-based-log-parsing-and-chart-js-data-generation-all-4-controller-optimization-logs-parsed-analyzed-and-prepared-for-interactive-web-visualization-key-achievements-parsed-4-pso-logs-classical-sta-adaptive-hybrid-with-regex-based-extraction"]], "Executive Summary The Classical Sliding Mode Controller represents the foundational SMC algorithm, combining model-based equivalent control with robust discontinuous switching for the double-inverted pendulum. It provides a simple, well-understood baseline with straightforward tuning and predictable performance. Performance Summary:": [[78, "executive-summary-the-classical-sliding-mode-controller-represents-the-foundational-smc-algorithm-combining-model-based-equivalent-control-with-robust-discontinuous-switching-for-the-double-inverted-pendulum-it-provides-a-simple-well-understood-baseline-with-straightforward-tuning-and-predictable-performance-performance-summary"]], "Executive Summary The Getting Started Guide (docs/guides/getting-started.md) was validated against the actual implementation. Overall validation success rate: 77.8% (7/9 automated tests passed). All 4 documented controllers successfully ran simulations, confirming core functionality works. However, significant documentation gaps were identified requiring updates. ### Key Findings \u2705 Core Functionality Works:": [[147, "executive-summary-the-getting-started-guide-docs-guides-getting-started-md-was-validated-against-the-actual-implementation-overall-validation-success-rate-77-8-7-9-automated-tests-passed-all-4-documented-controllers-successfully-ran-simulations-confirming-core-functionality-works-however-significant-documentation-gaps-were-identified-requiring-updates-key-findings-core-functionality-works"]], "Executive Summary The Hybrid Adaptive Super-Twisting Sliding Mode Controller represents the most sophisticated control algorithm in the DIP-SMC-PSO framework, combining adaptive parameter estimation with second-order sliding mode control for improved performance on highly nonlinear, coupled systems like the double-inverted pendulum. Performance Summary:": [[81, "executive-summary-the-hybrid-adaptive-super-twisting-sliding-mode-controller-represents-the-most-sophisticated-control-algorithm-in-the-dip-smc-pso-framework-combining-adaptive-parameter-estimation-with-second-order-sliding-mode-control-for-improved-performance-on-highly-nonlinear-coupled-systems-like-the-double-inverted-pendulum-performance-summary"]], "Executive Summary The Swing-Up Sliding Mode Controller is a two-mode hybrid controller designed to stabilize the double-inverted pendulum from large initial angle deviations (including the fully inverted position). It combines energy-based swing-up control with handoff to a stabilizing SMC controller using hysteresis logic to prevent mode chattering. Performance Summary:": [[86, "executive-summary-the-swing-up-sliding-mode-controller-is-a-two-mode-hybrid-controller-designed-to-stabilize-the-double-inverted-pendulum-from-large-initial-angle-deviations-including-the-fully-inverted-position-it-combines-energy-based-swing-up-control-with-handoff-to-a-stabilizing-smc-controller-using-hysteresis-logic-to-prevent-mode-chattering-performance-summary"]], "Executive Summary This comparison matrix documents all 4 Sliding Mode Control (SMC) variants implemented in the double-inverted pendulum control system. Following the successful resolution of the Hybrid SMC runtime error, all controllers are now fully operational with perfect PSO optimization performance. ### Controller Portfolio Overview": [[36, "executive-summary-this-comparison-matrix-documents-all-4-sliding-mode-control-smc-variants-implemented-in-the-double-inverted-pendulum-control-system-following-the-successful-resolution-of-the-hybrid-smc-runtime-error-all-controllers-are-now-fully-operational-with-perfect-pso-optimization-performance-controller-portfolio-overview"]], "Executive Summary This deployment guide provides step-by-step instructions for deploying the Double-Inverted Pendulum SMC system in production environments. Following the successful resolution of the Hybrid SMC runtime error, all 4 controllers are fully operational with 100% PSO integration success, making the system ready for production deployment. Deployment Targets:": [[92, "executive-summary-this-deployment-guide-provides-step-by-step-instructions-for-deploying-the-double-inverted-pendulum-smc-system-in-production-environments-following-the-successful-resolution-of-the-hybrid-smc-runtime-error-all-4-controllers-are-fully-operational-with-100-pso-integration-success-making-the-system-ready-for-production-deployment-deployment-targets"]], "Executive Summary This document establishes deployment validation checklists and quality gates for the double-inverted pendulum sliding mode control system. These checklists ensure systematic validation of all components before production deployment and provide clear go/no-go criteria for deployment decisions. Deployment Methodology: Multi-Stage Gate System": [[93, "executive-summary-this-document-establishes-deployment-validation-checklists-and-quality-gates-for-the-double-inverted-pendulum-sliding-mode-control-system-these-checklists-ensure-systematic-validation-of-all-components-before-production-deployment-and-provide-clear-go-no-go-criteria-for-deployment-decisions-deployment-methodology-multi-stage-gate-system"]], "Executive Summary This document provides architectural documentation for the Double-Inverted Pendulum SMC system, covering the complete controller ecosystem, factory integration patterns, PSO optimization pipeline, and production deployment architecture. Following the successful Hybrid SMC fix, all components are fully operational with 100% integration success. System Overview:": [[63, "executive-summary-this-document-provides-architectural-documentation-for-the-double-inverted-pendulum-smc-system-covering-the-complete-controller-ecosystem-factory-integration-patterns-pso-optimization-pipeline-and-production-deployment-architecture-following-the-successful-hybrid-smc-fix-all-components-are-fully-operational-with-100-integration-success-system-overview"]], "Executive Summary This document provides memory management guidelines for DIP-SMC-PSO controllers to prevent memory leaks in long-running operations. Following Issue #15 resolution, all controllers now implement explicit cleanup methods and break circular references using weakref patterns.": [[210, "executive-summary-this-document-provides-memory-management-guidelines-for-dip-smc-pso-controllers-to-prevent-memory-leaks-in-long-running-operations-following-issue-15-resolution-all-controllers-now-implement-explicit-cleanup-methods-and-break-circular-references-using-weakref-patterns"]], "Executive Summary This document provides rigorous mathematical foundations for Particle Swarm Optimization (PSO) as applied to sliding mode controller parameter tuning in the double inverted pendulum (DIP-SMC-PSO) system. All theoretical claims are proven mathematically and validated computationally using NumPy. Key Results:": [[291, "executive-summary-this-document-provides-rigorous-mathematical-foundations-for-particle-swarm-optimization-pso-as-applied-to-sliding-mode-controller-parameter-tuning-in-the-double-inverted-pendulum-dip-smc-pso-system-all-theoretical-claims-are-proven-mathematically-and-validated-computationally-using-numpy-key-results"]], "Executive Summary This document provides rigorous mathematical validation for all control algorithms and optimization methods implemented in the double-inverted pendulum sliding mode control system. Each algorithm includes formal mathematical proofs, stability analysis, convergence guarantees, and numerical implementation considerations. Validation Status: \u2705 MATHEMATICALLY VERIFIED": [[191, "executive-summary-this-document-provides-rigorous-mathematical-validation-for-all-control-algorithms-and-optimization-methods-implemented-in-the-double-inverted-pendulum-sliding-mode-control-system-each-algorithm-includes-formal-mathematical-proofs-stability-analysis-convergence-guarantees-and-numerical-implementation-considerations-validation-status-mathematically-verified"]], "Executive Summary This document provides validation rules, schema definitions, and validation procedures for the configuration management system of the double-inverted pendulum sliding mode control project. The configuration system ensures type safety, parameter bounds enforcement, and mathematical constraint validation across all system components. Configuration Management Approach: Schema-First Validation": [[73, "executive-summary-this-document-provides-validation-rules-schema-definitions-and-validation-procedures-for-the-configuration-management-system-of-the-double-inverted-pendulum-sliding-mode-control-project-the-configuration-system-ensures-type-safety-parameter-bounds-enforcement-and-mathematical-constraint-validation-across-all-system-components-configuration-management-approach-schema-first-validation"]], "Executive Summary This guide provides a complete, validated workflow for Particle Swarm Optimization (PSO) of sliding mode controller gains. All examples This guide covers have been tested with real MCP commands and validated through actual execution. Target Audience:": [[182, "executive-summary-this-guide-provides-a-complete-validated-workflow-for-particle-swarm-optimization-pso-of-sliding-mode-controller-gains-all-examples-this-guide-covers-have-been-tested-with-real-mcp-commands-and-validated-through-actual-execution-target-audience"]], "Executive Summary This guide provides end-to-end workflows for the Double-Inverted Pendulum Sliding Mode Control with PSO Optimization system. With all 4 controllers now fully operational and achieving perfect PSO optimization (0.000000 cost), users can confidently deploy any controller for their specific requirements. System Capability Overview:": [[321, "executive-summary-this-guide-provides-end-to-end-workflows-for-the-double-inverted-pendulum-sliding-mode-control-with-pso-optimization-system-with-all-4-controllers-now-fully-operational-and-achieving-perfect-pso-optimization-0-000000-cost-users-can-confidently-deploy-any-controller-for-their-specific-requirements-system-capability-overview"]], "Executive Summary Tutorial 01 (\u201cYour First Simulation\u201d) was validated against the actual implementation following the same methodology established in Phase 5.1. The tutorial provides guidance for running DIP SMC simulations, but contained the same CLI parameter and expected output issues identified in the Getting Started Guide. ### Key Findings \u2705 Tutorial structure is good - Clear progression from theory to practice": [[165, "executive-summary-tutorial-01-your-first-simulation-was-validated-against-the-actual-implementation-following-the-same-methodology-established-in-phase-5-1-the-tutorial-provides-guidance-for-running-dip-smc-simulations-but-contained-the-same-cli-parameter-and-expected-output-issues-identified-in-the-getting-started-guide-key-findings-tutorial-structure-is-good-clear-progression-from-theory-to-practice"]], "Executive Summary audit of 1,305 cross-references (1,211 internal + 94 external) across 723 documentation files. Automated validation identified 148 broken internal links requiring fixes, with strong cross-reference patterns in tutorials and API documentation. ### Key Metrics | Metric | Value | Status |": [[7, "executive-summary-audit-of-1-305-cross-references-1-211-internal-94-external-across-723-documentation-files-automated-validation-identified-148-broken-internal-links-requiring-fixes-with-strong-cross-reference-patterns-in-tutorials-and-api-documentation-key-metrics-metric-value-status"]], "Executive Summary performance benchmark analysis of 4 SMC controller variants (Classical, Super-Twisting, Adaptive, Hybrid Adaptive-STA) with statistical validation, computational efficiency analysis, and stability assessment. Benchmarks reveal Classical SMC as the best overall performer with 100% stability score and fastest control computation (0.0225 ms average), while Hybrid Adaptive-STA SMC shows stability validation concerns requiring further investigation. ### Key Findings - Best Overall Performer: Classical SMC (100.0 score, fastest computation, highest stability)": [[65, "executive-summary-performance-benchmark-analysis-of-4-smc-controller-variants-classical-super-twisting-adaptive-hybrid-adaptive-sta-with-statistical-validation-computational-efficiency-analysis-and-stability-assessment-benchmarks-reveal-classical-smc-as-the-best-overall-performer-with-100-stability-score-and-fastest-control-computation-0-0225-ms-average-while-hybrid-adaptive-sta-smc-shows-stability-validation-concerns-requiring-further-investigation-key-findings-best-overall-performer-classical-smc-100-0-score-fastest-computation-highest-stability"]], "Executive Summary scan of 364 .copy() occurrences across 109 files revealed: - 57 UNNECESSARY copies (15.7%) - Defensive copies that can be safely removed": [[44, "executive-summary-scan-of-364-copy-occurrences-across-109-files-revealed-57-unnecessary-copies-15-7-defensive-copies-that-can-be-safely-removed"]], "Executive Summary validation of 3,615 Python code examples extracted from 368 documentation files. The automated validation suite tests syntax correctness, import validity, and code quality patterns. ### Key Metrics | Metric | Value | Status |": [[14, "executive-summary-validation-of-3-615-python-code-examples-extracted-from-368-documentation-files-the-automated-validation-suite-tests-syntax-correctness-import-validity-and-code-quality-patterns-key-metrics-metric-value-status"]], "Exercise 1: Run Comparison Simulation": [[303, "exercise-1-run-comparison-simulation"]], "Exercise 2: Optimize with PSO": [[303, "exercise-2-optimize-with-pso"]], "Exercise 3: Custom Comparison": [[303, "exercise-3-custom-comparison"]], "Exit Conditions": [[70, "exit-conditions"]], "Expected Baseline": [[25, "expected-baseline"]], "Expected Behavior": [[144, "expected-behavior"]], "Expected Distribution": [[299, "expected-distribution"]], "Expected Final State": [[24, "expected-final-state"]], "Expected Outcome": [[21, "expected-outcome"]], "Expected Outcomes After Implementation ### Metrics Improvement | Metric | Current | Target | Improvement |": [[11, "expected-outcomes-after-implementation-metrics-improvement-metric-current-target-improvement"]], "Expected Output ```": [[313, "expected-output"], [313, "id1"], [313, "id2"]], "Expected Remaining (from Phase 10)": [[26, "expected-remaining-from-phase-10"]], "Expected Results Summary": [[126, "expected-results-summary"]], "Expected Timeline": [[124, "expected-timeline"]], "Expected: converged=True, convergence_rate > 0, final_distance < 1e-3": [[291, "expected-converged-true-convergence-rate-0-final-distance-1e-3"]], "Expected: stable_empirical=False (oscillatory), stable_theoretical=False": [[291, "expected-stable-empirical-false-oscillatory-stable-theoretical-false"]], "Expected: stable_empirical=True, stable_theoretical=True": [[291, "expected-stable-empirical-true-stable-theoretical-true"]], "Experiment 2: Robustness to Parameter Uncertainty Objective: Test adaptive controllers under mass variations ```bash": [[166, "experiment-2-robustness-to-parameter-uncertainty-objective-test-adaptive-controllers-under-mass-variations-bash"]], "Experiment: Modify Parameters ### Experiment 1: Change Initial Conditions Edit config.yaml: ```yaml": [[164, "experiment-modify-parameters-experiment-1-change-initial-conditions-edit-config-yaml-yaml"]], "Experimental Metadata for Robustness Study": [[169, "experimental-metadata-for-robustness-study"]], "Experimental scenarios for robustness study": [[169, "experimental-scenarios-for-robustness-study"]], "Explicit Euler Method": [[200, "explicit-euler-method"]], "Explicit cleanup recommended": [[210, "explicit-cleanup-recommended"]], "Exploration vs Exploitation": [[162, "exploration-vs-exploitation"]], "Explore Theory Pages": [[156, "explore-theory-pages"]], "Exponential Reaching Law": [[156, "exponential-reaching-law"]], "Export Options": [[156, "export-options"]], "Export to CSV": [[149, "export-to-csv"]], "Export to MATLAB": [[149, "export-to-matlab"]], "Extended property-based testing": [[207, "extended-property-based-testing"]], "Extensibility Guide The factory system is designed for easy extension with new controller types. ### Adding a New Controller Type #### Step 1: Implement Controller Class Create a controller class implementing the ControllerProtocol: ```python": [[51, "extensibility-guide-the-factory-system-is-designed-for-easy-extension-with-new-controller-types-adding-a-new-controller-type-step-1-implement-controller-class-create-a-controller-class-implementing-the-controllerprotocol-python"]], "Extension Import Test": [[29, "extension-import-test"]], "Extension Points": [[143, "extension-points"]], "Extension Validation": [[28, "extension-validation"]], "External Links": [[52, "external-links"], [127, "external-links"]], "Extraction Strategy": [[299, "extraction-strategy"]], "FAQ": [[94, "faq"], [145, "faq"]], "FDI Integration Example": [[185, "fdi-integration-example"]], "FDI Threshold Calibration Methodology Issue: #18 - FDI Threshold Too Sensitive - False Positives": [[120, null]], "FORMAL-THEOREM-008": [[125, "formal-theorem-008"]], "FORMAL-THEOREM-010": [[125, "formal-theorem-010"]], "FORMAL-THEOREM-016": [[125, "formal-theorem-016"]], "FORMAL-THEOREM-020": [[125, "formal-theorem-020"]], "FORMAL-THEOREM-021": [[125, "formal-theorem-021"]], "Factory API Reference": [[105, null]], "Factory API Reference ## Controller Factory System - GitHub Issue #6 Implementation ### Overview The Controller Factory System provides a unified, type-safe interface for creating and managing sliding mode control (SMC) controllers in the DIP-SMC-PSO project. This system implements the factory pattern to ensure consistent controller instantiation, parameter validation, and optimization integration. ### Architecture #### Core Components 1. Main Factory (src/controllers/factory.py) - Central controller registry and creation interface - Thread-safe operations with RLock protection - error handling and validation - Legacy compatibility support 2. SMC Factory (src/controllers/factory/smc_factory.py) - Specialized factory for SMC controllers - PSO optimization integration - Type-safe parameter handling 3. Legacy Factory (src/controllers/factory/legacy_factory.py) - Backward compatibility interface - Deprecation handling and migration support ### Supported Controllers | Controller Type | Class | Gains | Description |": [[50, null]], "Factory Architecture Overview ### System Architecture Diagram ```": [[107, "factory-architecture-overview-system-architecture-diagram"]], "Factory Configuration Reference ## Overview The SMC Controller Factory system provides a unified, type-safe interface for creating sliding mode controllers with parameter validation, deprecation management, and PSO optimization integration. This reference documents the factory configuration system implemented to resolve GitHub Issue #6. ## Factory Architecture ### Core Components ```": [[100, null]], "Factory Integration": [[277, "factory-integration"]], "Factory Integration Documentation Suite": [[98, null]], "Factory Integration Fixes - GitHub Issue #6 ## Documentation for Resolved Factory Pattern Implementation Issue Resolution Date: November 2024": [[275, null]], "Factory Integration System Documentation ## Overview The Double-Inverted Pendulum (DIP) SMC-PSO project implements a factory integration system that provides robust, thread-safe controller instantiation with deep PSO optimization integration. This documentation covers the architecture, implementation patterns, and usage guidelines for the factory system that resolves GitHub issue #6. ## Table of Contents 1. Architecture Overview": [[116, null]], "Factory Integration Troubleshooting Guide ## Overview This troubleshooting guide addresses common issues encountered when using the Enterprise Controller Factory system in the DIP SMC-PSO project. The guide provides systematic diagnostic procedures, root cause analysis, and proven approaches for factory integration problems. ## Table of Contents 1. Quick Diagnosis": [[117, null]], "Factory Integration User Guide": [[106, null]], "Factory Methods": [[220, "factory-methods"]], "Factory Methods API Reference ## Overview This document provides API reference documentation for the Enterprise Controller Factory system. The factory provides thread-safe, type-safe controller instantiation with deep PSO integration and robust error handling. ## Table of Contents 1. Core Factory Functions": [[49, null]], "Factory Pattern Architecture ### Design Principles The controller factory implements a robust factory pattern with the following core principles: 1. Type Safety: All controller instantiation uses strict type checking": [[274, "factory-pattern-architecture-design-principles-the-controller-factory-implements-a-robust-factory-pattern-with-the-following-core-principles-1-type-safety-all-controller-instantiation-uses-strict-type-checking"]], "Factory Performance Benchmarks Note: Factory performance metrics are documented in the main benchmarks section. See: Controller Performance Benchmarks": [[110, null]], "Factory System": [[52, "factory-system"], [52, null], [132, "factory-system"], [277, null]], "Factory System & Primitives": [[82, "factory-system-primitives"]], "Factory System API Reference Module: src.controllers.factory": [[51, null]], "Factory Troubleshooting and Diagnostics Guide": [[115, null]], "Factory Usage Examples - Guide ## Advanced Controller Factory Usage Patterns This document provides practical examples for using the enhanced controller factory system after the GitHub Issue #6 resolution.": [[276, null]], "Factory-Specific Performance Metrics For detailed performance benchmarks of the controller factory system, refer to: - Primary Documentation: benchmarks/controller_performance_benchmarks.md": [[110, "factory-specific-performance-metrics-for-detailed-performance-benchmarks-of-the-controller-factory-system-refer-to-primary-documentation-benchmarks-controller-performance-benchmarks-md"]], "Failed Validation with Field Order Warning": [[5, "failed-validation-with-field-order-warning"]], "Failure Response": [[94, "failure-response"]], "Failure Tolerance Strategies & Independent Validation for DIP-SMC-PSO ### Mathematical Foundation The coverage analysis methodology is built on fault-tolerant measurement theory, where coverage collection C(t) is decoupled from test execution success T(t): $C(t) = \\sum_{i=1}^{n} w_i \\cdot P_i(t) \\cdot I_i(t)$ Where:": [[88, "failure-tolerance-strategies-independent-validation-for-dip-smc-pso-mathematical-foundation-the-coverage-analysis-methodology-is-built-on-fault-tolerant-measurement-theory-where-coverage-collection-c-t-is-decoupled-from-test-execution-success-t-t-c-t-sum-i-1-n-w-i-cdot-p-i-t-cdot-i-i-t-where"]], "Fast unit tests (mathematical properties)": [[207, "fast-unit-tests-mathematical-properties"]], "Fault Classification System": [[261, "fault-classification-system"]], "Fault Detection & Isolation": [[69, "fault-detection-isolation"]], "Fault Detection & Isolation (FDI) Guide ## Overview The DIP_SMC_PSO system includes a Fault Detection and Isolation (FDI) module that monitors system health in real-time. The FDI system compares model predictions with actual measurements to detect deviations that may indicate component failures, sensor faults, or unexpected disturbances. ## Architecture The FDI system uses a model-based residual approach: ```": [[118, null]], "Fault Detection Integration": [[185, "fault-detection-integration"]], "Fault Detection and Isolation (FDI) System - Technical Documentation ## Table of Contents 1. Mathematical Foundations": [[119, null]], "Fault Detection and Response": [[261, "fault-detection-and-response"]], "Feature Comparison": [[30, "feature-comparison"], [31, "feature-comparison"]], "Feature Overview": [[154, "feature-overview"]], "Features": [[145, "features"], [152, "features"], [189, "features"], [203, "features"], [203, "id2"]], "Features Delivered": [[29, "features-delivered"]], "Features Documentation": [[137, null]], "Features Overview": [[90, "features-overview"]], "Feedback and Support": [[153, "feedback-and-support"]], "Figures not displaying": [[153, "figures-not-displaying"]], "File Locations": [[142, "file-locations"], [170, "file-locations"]], "File Locations Reference ```": [[128, "file-locations-reference"]], "File Manifest ### Generated Artifacts ```": [[318, "file-manifest-generated-artifacts"]], "File Sizes": [[141, "file-sizes"]], "File Structure": [[143, "file-structure"]], "File Summary": [[29, "file-summary"]], "File-Specific Guidelines": [[12, "file-specific-guidelines"]], "Files Added": [[139, "files-added"]], "Files Created": [[30, "files-created"], [31, "files-created"]], "Files Created/Modified Summary": [[28, "files-created-modified-summary"]], "Files Fixed": [[24, "files-fixed"], [25, "files-fixed"], [33, "files-fixed"]], "Files Modified": [[25, "files-modified"], [26, "files-modified"]], "Files Modified by Phase": [[24, "files-modified-by-phase"]], "Files Modified/Created": [[27, "files-modified-created"]], "Filtering": [[136, "filtering"]], "Final Assessment": [[126, "final-assessment"]], "Final Build Analysis": [[25, "final-build-analysis"]], "Final Quality Score Total Score: 100/100 \u2705 Target Score: \u226596/100 (Phase 4.2 benchmark) Achievement: +4 points above target (104% of target) Quality Assessment: EXCEEDS EXPECTATIONS": [[57, "final-quality-score-total-score-100-100-target-score-96-100-phase-4-2-benchmark-achievement-4-points-above-target-104-of-target-quality-assessment-exceeds-expectations"]], "Find all Levant papers": [[123, "find-all-levant-papers"]], "Finite-Time Convergence": [[163, "finite-time-convergence"]], "First Run Notice": [[155, null]], "First Simulation (5 minutes)": [[189, "first-simulation-5-minutes"]], "First-Time Setup": [[153, "first-time-setup"]], "Fixed Warning Verification": [[26, "fixed-warning-verification"]], "Fixtures (tests/conftest.py)": [[34, "fixtures-tests-conftest-py"]], "Flaky Tests": [[34, "flaky-tests"]], "Float32 (Single Precision)": [[290, "float32-single-precision"]], "Float64 (Double Precision)": [[290, "float64-double-precision"]], "For Advanced Users:": [[171, "for-advanced-users"], [177, "for-advanced-users"]], "For Dashboard Landing Page": [[269, "for-dashboard-landing-page"]], "For First-Time HIL Users:": [[177, "for-first-time-hil-users"]], "For Future Maintainers": [[138, "for-future-maintainers"]], "For Maintainers": [[137, "for-maintainers"]], "For Monte Carlo Users:": [[171, "for-monte-carlo-users"]], "For Parameter Sweep Users:": [[171, "for-parameter-sweep-users"]], "For Production Deployment:": [[177, "for-production-deployment"]], "For Progress Visualization": [[269, "for-progress-visualization"]], "For Software/Code Attribution In README.md:": [[8, "for-software-code-attribution-in-readme-md"]], "For Transaction Analyzer": [[269, "for-transaction-analyzer"]], "For well-conditioned systems or debugging": [[213, "for-well-conditioned-systems-or-debugging"]], "For \u201cI\u2019m OK - You\u2019re OK\u201d Study Dashboard": [[269, "for-i-m-ok-you-re-ok-study-dashboard"]], "Formal Claim Extraction - Regex Pattern Reference": [[299, null]], "Formal Grammar": [[299, "formal-grammar"]], "Formal Grammar (BNF Notation)": [[299, "formal-grammar-bnf-notation"]], "Formulation": [[200, "formulation"], [200, "id1"]], "Forward Uncertainty Propagation (Linearization)": [[290, "forward-uncertainty-propagation-linearization"]], "Framer Motion Components": [[271, "framer-motion-components"]], "Framework Architecture ```": [[130, "framework-architecture"]], "Friction Terms": [[198, "friction-terms"]], "From No Code Collapse Feature": [[139, "from-no-code-collapse-feature"]], "Full Nonlinear Dynamics": [[134, "full-nonlinear-dynamics"], [135, "full-nonlinear-dynamics"]], "Full Test Suite": [[124, "full-test-suite"]], "Full extraction pipeline": [[298, "full-extraction-pipeline"]], "Full test suite with coverage": [[283, "full-test-suite-with-coverage"]], "Full-Fidelity DIP Dynamics": [[220, "full-fidelity-dip-dynamics"]], "FullDIPDynamics": [[220, "fulldipdynamics"]], "Fundamental Concepts": [[200, "fundamental-concepts"]], "Fundamental Dynamics": [[288, "fundamental-dynamics"]], "Further Optimization:": [[183, "further-optimization"]], "Further Reading - Getting Started: Complete setup guide": [[128, "further-reading-getting-started-complete-setup-guide"]], "Future (Phase 7+)": [[138, "future-phase-7"]], "Future Directions": [[256, "future-directions"]], "Future Documentation Maintenance ### Scheduled Review Cycle - Weekly: Safety system validation reports review": [[243, "future-documentation-maintenance-scheduled-review-cycle-weekly-safety-system-validation-reports-review"]], "Future Enhancements": [[70, "future-enhancements"], [142, "future-enhancements"], [315, "future-enhancements"]], "Future Enhancements (Phase 5+)": [[29, "future-enhancements-phase-5"]], "Future Enhancements (Phase 7+)": [[31, "future-enhancements-phase-7"]], "Future Features": [[137, "future-features"]], "Future Improvements": [[32, "future-improvements"]], "Future Improvements ### 1. Kalman Filtering for Residual Variance Reduction Approach: Implement Extended Kalman Filter (EKF) for state estimation. Expected Impact:": [[120, "future-improvements-1-kalman-filtering-for-residual-variance-reduction-approach-implement-extended-kalman-filter-ekf-for-state-estimation-expected-impact"]], "Future Improvements (Optional)": [[26, "future-improvements-optional"]], "Future Phases": [[29, "future-phases"]], "Future Phases (4-8)": [[28, "future-phases-4-8"]], "Future Version Migrations": [[139, "future-version-migrations"]], "GOOD: Performance Claims": [[12, "good-performance-claims"]], "GOOD: Procedure Documentation": [[12, "good-procedure-documentation"]], "GOOD: Technical Description": [[12, "good-technical-description"]], "GPU Acceleration": [[143, "gpu-acceleration"]], "GPU Acceleration (CSS)": [[140, "gpu-acceleration-css"]], "GPU Support": [[91, "gpu-support"]], "GPU-Enabled Dockerfile": [[91, "gpu-enabled-dockerfile"]], "GSAP Components": [[271, "gsap-components"]], "Gain Bounds": [[133, "gain-bounds"]], "Gain Bounds Helper": [[132, "gain-bounds-helper"]], "Gain Bounds Specifications": [[20, "gain-bounds-specifications"]], "Gain Count Summary": [[82, "gain-count-summary"]], "Gain Interpretation": [[183, "gain-interpretation"]], "Gain Range Exploration": [[158, "gain-range-exploration"]], "Gain Selection: Pole Placement Analogy": [[163, "gain-selection-pole-placement-analogy"]], "Gain Space Geometry": [[201, "gain-space-geometry"]], "Gain Validation": [[132, "gain-validation"]], "Gao\u2019s Reaching Law": [[290, "gao-s-reaching-law"]], "Gate 1: Mathematical Validation (CRITICAL)": [[245, "gate-1-mathematical-validation-critical"]], "Gate 2: Safety System Validation (CRITICAL)": [[245, "gate-2-safety-system-validation-critical"]], "Gate 3: Integration Testing (HIGH)": [[245, "gate-3-integration-testing-high"]], "Gate 4: Performance Benchmarking (HIGH)": [[245, "gate-4-performance-benchmarking-high"]], "Gate Types": [[94, "gate-types"]], "General Chart.js Directive": [[159, "general-chart-js-directive"]], "General Form": [[198, "general-form"]], "General Notation": [[289, "general-notation"]], "General Principles": [[258, "general-principles"]], "General Questions ### Q1: What is the overall citation coverage of this project? Answer:": [[122, "general-questions-q1-what-is-the-overall-citation-coverage-of-this-project-answer"]], "General Workflows": [[127, "general-workflows"], [127, null]], "Generalized Coordinates": [[198, "generalized-coordinates"]], "Generate LaTeX Table": [[149, "generate-latex-table"]], "Generated Files": [[27, "generated-files"]], "Generated configuration for {{ system_name }}": [[72, "generated-configuration-for-system-name"]], "Geometric Interpretation": [[200, "geometric-interpretation"]], "Getting Help": [[141, "getting-help"], [144, "getting-help"], [145, "getting-help"]], "Getting Started": [[95, "getting-started"], [127, "getting-started"], [127, null], [146, null]], "Getting Started Guide Validation Report Phase 5.1: Getting Started Guide Validation": [[147, null]], "Getting Started Guides": [[12, "getting-started-guides"]], "Git Commits": [[25, "git-commits"]], "Git Credential Helper": [[70, "git-credential-helper"]], "GitHub Actions Integration": [[315, "github-actions-integration"]], "GitHub Actions Workflow": [[94, "github-actions-workflow"]], "GitHub Issue #6 Enhanced Controller Factory System ### Overview This API reference documents the enhanced controller factory system implemented as part of GitHub Issue #6 resolution. The factory provides thread-safe, type-safe controller instantiation with advanced validation and PSO optimization support. ## Core Factory Functions ### create_controller(controller_type, config=None, gains=None) Primary factory function for creating controller instances. #### Signature": [[105, "github-issue-6-enhanced-controller-factory-system-overview-this-api-reference-documents-the-enhanced-controller-factory-system-implemented-as-part-of-github-issue-6-resolution-the-factory-provides-thread-safe-type-safe-controller-instantiation-with-advanced-validation-and-pso-optimization-support-core-factory-functions-create-controller-controller-type-config-none-gains-none-primary-factory-function-for-creating-controller-instances-signature"]], "GitHub Issue #6 Enhanced Factory System ### Overview This production deployment guide covers the deployment, monitoring, and maintenance of the enhanced controller factory system implemented in GitHub Issue #6 resolution. The guide ensures reliable operation in production environments with proper quality gates and monitoring. ## Production Readiness Assessment ### Current Production Readiness Score: 8.5/10 Improved from 6.1/10 due to GitHub Issue #6 resolution: #### \u2705 Verified Production-Ready Components 1. Thread Safety: \u2705 RESOLVED - thread-safe locking implementation - Timeout protection for lock acquisition - Extensive concurrent operation testing - No detected deadlock conditions 2. Parameter Validation: \u2705 ENHANCED - Type-safe parameter validation with detailed error messages - Automatic deprecation handling and migration - gain bounds checking - Controller-specific validation rules 3. Error Handling: \u2705 IMPROVED - Graceful fallback mechanisms - exception handling - Detailed diagnostic information - Automatic error recovery patterns 4. Memory Management: \u2705 OPTIMIZED - Bounded memory usage patterns - Efficient controller instantiation - No memory leaks detected in stress testing - Proper resource cleanup 5. Performance: \u2705 BENCHMARKED - Sub-millisecond controller creation - Optimized PSO integration workflows - Minimal CPU overhead - Scalable concurrent operations #### \u26a0\ufe0f Areas Requiring Monitoring 1. Configuration Validation: Requires runtime monitoring": [[111, "github-issue-6-enhanced-factory-system-overview-this-production-deployment-guide-covers-the-deployment-monitoring-and-maintenance-of-the-enhanced-controller-factory-system-implemented-in-github-issue-6-resolution-the-guide-ensures-reliable-operation-in-production-environments-with-proper-quality-gates-and-monitoring-production-readiness-assessment-current-production-readiness-score-8-5-10-improved-from-6-1-10-due-to-github-issue-6-resolution-verified-production-ready-components-1-thread-safety-resolved-thread-safe-locking-implementation-timeout-protection-for-lock-acquisition-extensive-concurrent-operation-testing-no-detected-deadlock-conditions-2-parameter-validation-enhanced-type-safe-parameter-validation-with-detailed-error-messages-automatic-deprecation-handling-and-migration-gain-bounds-checking-controller-specific-validation-rules-3-error-handling-improved-graceful-fallback-mechanisms-exception-handling-detailed-diagnostic-information-automatic-error-recovery-patterns-4-memory-management-optimized-bounded-memory-usage-patterns-efficient-controller-instantiation-no-memory-leaks-detected-in-stress-testing-proper-resource-cleanup-5-performance-benchmarked-sub-millisecond-controller-creation-optimized-pso-integration-workflows-minimal-cpu-overhead-scalable-concurrent-operations-areas-requiring-monitoring-1-configuration-validation-requires-runtime-monitoring"]], "GitHub Issue #6 Factory Integration - Scientific Validation Guide ### Overview This document provides the mathematical foundations and scientific validation for configuration migrations in the enhanced factory system. It bridges control theory with implementation details to ensure mathematically sound parameter transformations during migration. ## Mathematical Framework for Parameter Migration ### 1. Classical SMC Parameter Transformation #### Theoretical Foundation Classical Sliding Mode Control uses a sliding surface designed to ensure finite-time convergence to the desired trajectory. The mathematical formulation involves: Sliding Surface Design:": [[99, "github-issue-6-factory-integration-scientific-validation-guide-overview-this-document-provides-the-mathematical-foundations-and-scientific-validation-for-configuration-migrations-in-the-enhanced-factory-system-it-bridges-control-theory-with-implementation-details-to-ensure-mathematically-sound-parameter-transformations-during-migration-mathematical-framework-for-parameter-migration-1-classical-smc-parameter-transformation-theoretical-foundation-classical-sliding-mode-control-uses-a-sliding-surface-designed-to-ensure-finite-time-convergence-to-the-desired-trajectory-the-mathematical-formulation-involves-sliding-surface-design"]], "GitHub Issue #6 Factory Integration Documentation": [[107, null]], "GitHub Issue #6 Factory Integration Resolution ### Overview This troubleshooting guide addresses common issues, diagnostic procedures, and approaches for the enhanced controller factory system implemented in GitHub Issue #6 resolution. The guide is organized by symptom categories with systematic diagnostic workflows and validated solutions. ## Quick Diagnostic Checklist ### \ud83d\udd0d Immediate Health Check Run this diagnostic script to quickly identify factory system status: ```python": [[115, "github-issue-6-factory-integration-resolution-overview-this-troubleshooting-guide-addresses-common-issues-diagnostic-procedures-and-approaches-for-the-enhanced-controller-factory-system-implemented-in-github-issue-6-resolution-the-guide-is-organized-by-symptom-categories-with-systematic-diagnostic-workflows-and-validated-solutions-quick-diagnostic-checklist-immediate-health-check-run-this-diagnostic-script-to-quickly-identify-factory-system-status-python"]], "GitHub Issue #6 Resolution - Complete Documentation Package ### Overview This documentation suite covers the enhanced controller factory system implemented as part of GitHub Issue #6 resolution. The improvements increased system success rates from 68.9% to 95%+ through systematic fixes to thread safety, parameter validation, PSO integration, and deprecation management. ## \ud83d\udcda Documentation Structure ### Core Documentation Files | Document | Purpose | Target Audience |": [[98, "github-issue-6-resolution-complete-documentation-package-overview-this-documentation-suite-covers-the-enhanced-controller-factory-system-implemented-as-part-of-github-issue-6-resolution-the-improvements-increased-system-success-rates-from-68-9-to-95-through-systematic-fixes-to-thread-safety-parameter-validation-pso-integration-and-deprecation-management-documentation-structure-core-documentation-files-document-purpose-target-audience"]], "GitHub Issue #6 Resolution - Complete Mathematical Foundations ### Overview This API reference documents the enhanced controller factory system implemented as part of GitHub Issue #6 resolution. The factory provides thread-safe, type-safe controller instantiation with advanced validation, PSO optimization support, and rigorous mathematical foundations for all sliding mode control variants. ## Architecture Overview ### Factory Design Principles 1. Thread Safety: All factory operations use RLock for concurrent access": [[103, "github-issue-6-resolution-complete-mathematical-foundations-overview-this-api-reference-documents-the-enhanced-controller-factory-system-implemented-as-part-of-github-issue-6-resolution-the-factory-provides-thread-safe-type-safe-controller-instantiation-with-advanced-validation-pso-optimization-support-and-rigorous-mathematical-foundations-for-all-sliding-mode-control-variants-architecture-overview-factory-design-principles-1-thread-safety-all-factory-operations-use-rlock-for-concurrent-access"]], "GitHub Issue #6 Resolution Documentation ### Overview This user guide covers the enhanced controller factory system implemented as part of GitHub Issue #6 resolution. The factory integration fixes address critical stability, performance, and usability issues that improved system success rates from 68.9% to 95%+. ## Key Improvements in GitHub Issue #6 Resolution ### 1. Unified Parameter Interface": [[106, "github-issue-6-resolution-documentation-overview-this-user-guide-covers-the-enhanced-controller-factory-system-implemented-as-part-of-github-issue-6-resolution-the-factory-integration-fixes-address-critical-stability-performance-and-usability-issues-that-improved-system-success-rates-from-68-9-to-95-key-improvements-in-github-issue-6-resolution-1-unified-parameter-interface"]], "GitHub Issue #8 - Documentation Expert Mission Completion Document Version: 1.0": [[243, "github-issue-8-documentation-expert-mission-completion-document-version-1-0"]], "GitHub Issue #9 Crisis Resolution - Final Strategic Assessment Date: 2025-09-29": [[218, "github-issue-9-crisis-resolution-final-strategic-assessment-date-2025-09-29"]], "GitHub Issue #9 Resolution: Quality Gate Documentation & Enforcement Repository: https://github.com/theSadeQ/dip-smc-pso.git": [[39, "github-issue-9-resolution-quality-gate-documentation-enforcement-repository-https-github-com-thesadeq-dip-smc-pso-git"]], "Global Configuration Integration ### YAML Configuration Structure The factory integrates with the global config.yaml file structure: ```yaml": [[273, "global-configuration-integration-yaml-configuration-structure-the-factory-integrates-with-the-global-config-yaml-file-structure-yaml"]], "Global Functions": [[143, "global-functions"]], "Global Variables": [[143, "global-variables"]], "Global vs Local Optima": [[162, "global-vs-local-optima"]], "Go/No-Go Criteria": [[245, "go-no-go-criteria"]], "Golden-Path Testing Workflow": [[34, "golden-path-testing-workflow"]], "Google Cloud Run": [[91, "google-cloud-run"]], "Graphical Comparison": [[200, "graphical-comparison"]], "Gravity Vector G(q)": [[198, "gravity-vector-g-q"]], "Greeting & Conversational Language": [[12, "greeting-conversational-language"]], "Guard Configuration": [[203, "guard-configuration"]], "H5PY": [[8, "h5py"]], "HIL (Hardware-in-the-Loop) Workflow Guide": [[177, null]], "HIL Configuration": [[170, "hil-configuration"]], "HIL Disaster Recovery Status: \ud83d\udea7 Under Construction This document will contain disaster recovery procedures for Hardware-in-the-Loop production systems. ## Planned Content ### Disaster Scenarios": [[173, null]], "HIL Latency Analysis": [[170, "hil-latency-analysis"]], "HIL Overview": [[170, "hil-overview"]], "HIL Production Deployment Checklist Status: \ud83d\udea7 Under Construction This document will contain a pre-deployment checklist for production HIL systems. ## Planned Content ### Pre-Deployment Validation": [[175, null]], "HIL Safety Validation Status: \ud83d\udea7 Under Construction This document will contain safety validation procedures for Hardware-in-the-Loop controller deployment. ## Planned Content ### Safety Validation Framework": [[176, null]], "HIL System Integration ### Hardware Interface Protocol ```python": [[278, "hil-system-integration-hardware-interface-protocol-python"]], "HIL Workflows": [[127, null]], "HTML Theme Integration": [[315, "html-theme-integration"]], "Hamiltonian Systems": [[200, "hamiltonian-systems"]], "Hands-On Exercises": [[303, "hands-on-exercises"]], "Hardware-in-the-Loop": [[52, "hardware-in-the-loop"]], "Hardware-in-the-Loop (HIL)": [[170, "hardware-in-the-loop-hil"]], "Hardware-in-the-Loop (HIL) Quickstart Guide": [[185, null]], "Hardware-in-the-Loop (HIL) Workflows": [[127, "hardware-in-the-loop-hil-workflows"]], "Hardware-in-the-Loop Configuration": [[158, "hardware-in-the-loop-configuration"]], "Health Checks": [[90, "health-checks"]], "Heatmaps": [[157, "heatmaps"]], "Hedge Words": [[12, "hedge-words"]], "High-Level System Architecture ```": [[63, "high-level-system-architecture"]], "High-Precision Tracking": [[197, "high-precision-tracking"]], "High-Risk Areas (Continuous Monitoring Required)": [[245, "high-risk-areas-continuous-monitoring-required"]], "Historical Development": [[256, "historical-development"]], "How It Works": [[70, "how-it-works"], [143, "how-it-works"]], "How To Contribute?": [[270, "how-to-contribute"]], "How to Measure": [[142, "how-to-measure"]], "How to Propose Changes": [[142, "how-to-propose-changes"]], "How to Use": [[145, "how-to-use"], [263, "how-to-use"]], "How to validate a ResearchPlan JSON": [[22, "how-to-validate-a-researchplan-json"]], "How-To Guides": [[127, "how-to-guides"], [127, null]], "How-To: Optimization Workflows Type: Task-Oriented Guide": [[148, null]], "How-To: Result Analysis": [[149, null]], "How-To: Running Simulations Type: Task-Oriented Guide": [[150, null]], "How-To: Testing & Validation Type: Task-Oriented Guide": [[151, null]], "Hybrid Adaptive STA-SMC": [[197, "hybrid-adaptive-sta-smc"]], "Hybrid Adaptive Super-Twisting SMC Technical Guide": [[81, null]], "Hybrid Adaptive-STA (4-8 Parameters)": [[201, "hybrid-adaptive-sta-4-8-parameters"]], "Hybrid Adaptive\u2013STA SMC": [[226, "hybrid-adaptivesta-smc"], [239, "hybrid-adaptivesta-smc"]], "Hybrid SMC Configuration ### Schema Definition ```python": [[273, "hybrid-smc-configuration-schema-definition-python"]], "Hybrid SMC Integration Theory ### Multi-Mode Control Architecture Hybrid SMC combines multiple control strategies with switching logic:": [[279, "hybrid-smc-integration-theory-multi-mode-control-architecture-hybrid-smc-combines-multiple-control-strategies-with-switching-logic"]], "Hybrid SMC Runtime Fix - Complete Technical Documentation": [[40, null]], "Hybrid SMC Runtime Fix - Complete Technical Documentation Date: 2025-09-29": [[301, null]], "Hybrid SMC Runtime Fix Technical Analysis": [[300, null]], "Hybrid controller requires special handling - sub-configs": [[80, "hybrid-controller-requires-special-handling-sub-configs"]], "HybridAdaptiveSTASMC": [[211, "hybridadaptivestasmc"]], "Hyperparameter Tuning": [[133, "hyperparameter-tuning"]], "Hypothesis": [[8, "hypothesis"]], "Hypothesis Testing": [[149, "hypothesis-testing"]], "ISE (Integral Squared Error)": [[149, "ise-integral-squared-error"]], "ITAE (Integral Time-Absolute Error)": [[149, "itae-integral-time-absolute-error"]], "Identify slow tests": [[151, "identify-slow-tests"]], "If Feature Breaks Production": [[142, "if-feature-breaks-production"]], "If You Have Custom Code Folding": [[141, "if-you-have-custom-code-folding"]], "If You Use sphinx-togglebutton": [[141, "if-you-use-sphinx-togglebutton"]], "If diverge \u2192 investigate why": [[310, "if-diverge-investigate-why"]], "Ill-Conditioned Fitness Landscapes": [[290, "ill-conditioned-fitness-landscapes"]], "Immediate (Completed)": [[138, "immediate-completed"]], "Immediate (Optional)": [[26, "immediate-optional"]], "Immediate (Phase 3 Polish)": [[28, "immediate-phase-3-polish"]], "Immediate (Phase 4 Completion)": [[29, "immediate-phase-4-completion"]], "Immediate (Phase 6 Completion)": [[31, "immediate-phase-6-completion"]], "Immediate Action Plan ### Week 1: Critical Path (P0)": [[11, "immediate-action-plan-week-1-critical-path-p0"]], "Immediate Actions": [[32, "immediate-actions"]], "Immediate Response (0-50ms)": [[261, "immediate-response-0-50ms"]], "Impact Assessment": [[24, "impact-assessment"], [26, "impact-assessment"], [32, "impact-assessment"]], "Impact Metrics": [[256, "impact-metrics"]], "Implementation": [[25, "implementation"], [26, "implementation"], [85, "implementation"], [200, "implementation"], [200, "id3"], [200, "id5"]], "Implementation Constants": [[288, "implementation-constants"]], "Implementation Coverage ### Source Code Analysis 4 Validation Modules Documented: 1. monte_carlo.py - 1,007 lines - MonteCarloAnalyzer class (lines 63-987) - 4 sampling methods implemented - Bootstrap and sensitivity analysis - Distribution fitting and risk analysis 2. cross_validation.py - 920 lines - CrossValidator class (lines 124-920) - 5 CV methods + nested CV - Bias-variance decomposition - Learning curve analysis 3. statistical_tests.py - 905 lines - StatisticalTestSuite class (lines 66-906) - 8 normality/stationarity tests - Hypothesis testing framework - Power and effect size analysis 4. benchmarking.py - 841 lines - BenchmarkSuite class (lines 58-841) - Multi-method comparison - Robustness and efficiency analysis - Multiple ranking methodologies Total Implementation: 3,673 lines of production code": [[309, "implementation-coverage-source-code-analysis-4-validation-modules-documented-1-monte-carlo-py-1-007-lines-montecarloanalyzer-class-lines-63-987-4-sampling-methods-implemented-bootstrap-and-sensitivity-analysis-distribution-fitting-and-risk-analysis-2-cross-validation-py-920-lines-crossvalidator-class-lines-124-920-5-cv-methods-nested-cv-bias-variance-decomposition-learning-curve-analysis-3-statistical-tests-py-905-lines-statisticaltestsuite-class-lines-66-906-8-normality-stationarity-tests-hypothesis-testing-framework-power-and-effect-size-analysis-4-benchmarking-py-841-lines-benchmarksuite-class-lines-58-841-multi-method-comparison-robustness-and-efficiency-analysis-multiple-ranking-methodologies-total-implementation-3-673-lines-of-production-code"]], "Implementation Details": [[27, "implementation-details"], [29, "implementation-details"], [77, "implementation-details"], [84, "implementation-details"], [85, "implementation-details"], [143, "implementation-details"]], "Implementation Guidelines": [[198, "implementation-guidelines"]], "Implementation Overview": [[28, "implementation-overview"]], "Implementation Patterns ### Pattern 1: Defensive Matrix Operations ```python": [[35, "implementation-patterns-pattern-1-defensive-matrix-operations-python"]], "Implementation Phases": [[139, "implementation-phases"], [143, "implementation-phases"]], "Implementation Plan": [[9, "implementation-plan"]], "Implementation References": [[77, "implementation-references"]], "Implementation Status in Codebase": [[195, "implementation-status-in-codebase"]], "Implementation Timeline": [[94, "implementation-timeline"]], "Implementing Custom Dynamics": [[134, "implementing-custom-dynamics"]], "Implementing a Custom Controller": [[132, "implementing-a-custom-controller"]], "Import and Dependency Issues ### Issue 1: Missing Module Imports #### Symptoms": [[117, "import-and-dependency-issues-issue-1-missing-module-imports-symptoms"]], "Import new controller": [[51, "import-new-controller"]], "Improvements for Next Phases": [[27, "improvements-for-next-phases"]], "In Documentation Footer": [[315, "in-documentation-footer"]], "In Jupyter notebook": [[150, "in-jupyter-notebook"]], "In conftest.py": [[151, "in-conftest-py"]], "In docs/conf.py": [[315, "in-docs-conf-py"]], "In-Text Citations": [[256, "in-text-citations"]], "Individual Code Blocks": [[145, "individual-code-blocks"]], "Inertia Matrix Structure": [[220, "inertia-matrix-structure"]], "Inertia Weight Strategies": [[162, "inertia-weight-strategies"]], "Inertia Weight Strategy Comparison": [[158, "inertia-weight-strategy-comparison"]], "Infrastructure Documentation": [[82, null]], "Initial Conditions": [[170, "initial-conditions"]], "Initial Value Problem (IVP)": [[200, "initial-value-problem-ivp"]], "Initialization": [[133, "initialization"], [135, "initialization"]], "Input Sanitization": [[136, "input-sanitization"]], "Install tqdm for progress bar if needed": [[169, "install-tqdm-for-progress-bar-if-needed"]], "Installation": [[124, "installation"], [124, "id1"], [141, "installation"], [159, "installation"]], "Installation ### Step 1: Verify Python Version Open a terminal and check your Python version: ```bash": [[146, "installation-step-1-verify-python-version-open-a-terminal-and-check-your-python-version-bash"]], "Installation Requirements": [[265, "installation-requirements"]], "Installing Components Via CLI": [[270, "installing-components-via-cli"]], "Instead of 10000 trials": [[135, "instead-of-10000-trials"]], "Integration": [[322, null]], "Integration & Testing": [[98, null]], "Integration Examples": [[30, "integration-examples"], [31, "integration-examples"]], "Integration Examples ### 1. Complete Research Workflow ```python": [[280, "integration-examples-1-complete-research-workflow-python"]], "Integration Guide": [[77, "integration-guide"], [84, "integration-guide"], [85, "integration-guide"]], "Integration Guide ### 1. Basic Usage #### 1.1 Direct Instantiation ```python": [[78, "integration-guide-1-basic-usage-1-1-direct-instantiation-python"]], "Integration Guide ### 5.1 Control System Integration Patterns #### 5.1.1 Basic Integration Pattern:": [[119, "integration-guide-5-1-control-system-integration-patterns-5-1-1-basic-integration-pattern"]], "Integration Patterns": [[29, "integration-patterns"], [131, "integration-patterns"], [132, "integration-patterns"], [133, "integration-patterns"], [134, "integration-patterns"], [135, "integration-patterns"], [136, "integration-patterns"], [156, "integration-patterns"]], "Integration Points": [[27, "integration-points"]], "Integration Protocols ### Cross-Domain Integration Architecture The factory provides integration between multiple system domains: ```mermaid": [[274, "integration-protocols-cross-domain-integration-architecture-the-factory-provides-integration-between-multiple-system-domains-mermaid"]], "Integration Protocols and Cross-Domain Specifications ## Overview This document defines the integration protocols and cross-domain specifications for the controller factory within the double-inverted pendulum sliding mode control (DIP-SMC) ecosystem. These protocols ensure communication and data exchange between controllers, plant models, optimization algorithms, simulation engines, and hardware-in-the-loop (HIL) systems. ## Table of Contents 1. System Architecture Overview": [[278, null]], "Integration Workflows": [[322, "integration-workflows"]], "Integration with CLAUDE.md": [[70, "integration-with-claude-md"]], "Integration with CLI Tools": [[265, "integration-with-cli-tools"]], "Integration with Existing Code": [[20, "integration-with-existing-code"]], "Integration with Existing Infrastructure": [[30, "integration-with-existing-infrastructure"]], "Integration with External Controllers": [[185, "integration-with-external-controllers"]], "Integration with Main Simulation": [[185, "integration-with-main-simulation"]], "Integration with Multi-Agent System ### Documentation Expert Role Fulfillment As the 5th specialist agent in the Ultimate Orchestrator system, the Documentation Expert Agent has successfully: - Collaborated Effectively: Integrated documentation with control systems, optimization, and integration specialist outputs": [[243, "integration-with-multi-agent-system-documentation-expert-role-fulfillment-as-the-5th-specialist-agent-in-the-ultimate-orchestrator-system-the-documentation-expert-agent-has-successfully-collaborated-effectively-integrated-documentation-with-control-systems-optimization-and-integration-specialist-outputs"]], "Integration with Simulation Results": [[159, "integration-with-simulation-results"]], "Integration with SimulationRunner": [[134, "integration-with-simulationrunner"]], "Interaction Effects": [[201, "interaction-effects"]], "Interactive 3D Visualization": [[152, "interactive-3d-visualization"]], "Interactive Cards": [[267, "interactive-cards"]], "Interactive Configuration Builder": [[158, "interactive-configuration-builder"]], "Interactive Configuration Guide": [[158, null]], "Interactive Controls": [[90, "interactive-controls"]], "Interactive Documentation Ecosystem": [[156, "id2"]], "Interactive Documentation Map": [[263, null]], "Interactive Example Gallery": [[153, "interactive-example-gallery"]], "Interactive Features": [[64, "interactive-features"], [153, null]], "Interactive Plotly Charts Demo": [[157, null]], "Interactive Shell": [[91, "interactive-shell"]], "Interactive Visualizations Guide": [[159, null]], "Interface Compatibility": [[20, "interface-compatibility"]], "Interpretation Guidelines Stability Rate:": [[313, "interpretation-guidelines-stability-rate"]], "Introduction": [[170, "introduction"], [203, "introduction"]], "Introduction The validation framework provides parameter validation across the entire DIP-SMC-PSO system. It ensures robust parameter checking, early error detection with clear messages, and scientific parameter validation system-wide. ### Design Philosophy 1. Fail Fast: Invalid parameters detected immediately at construction time": [[208, "introduction-the-validation-framework-provides-parameter-validation-across-the-entire-dip-smc-pso-system-it-ensures-robust-parameter-checking-early-error-detection-with-clear-messages-and-scientific-parameter-validation-system-wide-design-philosophy-1-fail-fast-invalid-parameters-detected-immediately-at-construction-time"]], "Introduction This guide provides technical documentation for the advanced algorithms implemented in the DIP-SMC-PSO project. These algorithms form the computational backbone of the system, enabling robust control, efficient optimization, and numerical stability.": [[193, "introduction-this-guide-provides-technical-documentation-for-the-advanced-algorithms-implemented-in-the-dip-smc-pso-project-these-algorithms-form-the-computational-backbone-of-the-system-enabling-robust-control-efficient-optimization-and-numerical-stability"]], "Introduction and Motivation": [[222, "introduction-and-motivation"], [233, "introduction-and-motivation"]], "Introduction to Sliding Mode Control": [[294, "introduction-to-sliding-mode-control"]], "Introduction \u2013 Why Sliding Mode Control?": [[226, "introduction-why-sliding-mode-control"], [239, "introduction-why-sliding-mode-control"]], "Inverted Pendulum Systems": [[256, "inverted-pendulum-systems"]], "Is This a Problem?": [[144, "is-this-a-problem"]], "Issue #18: Statistical Threshold Calibration ### 6.0.1 Problem Description Issue: FDI system experienced excessive false positive fault detections (>80% false alarm rate) during normal operation due to overly sensitive threshold configuration. Root Cause: Original threshold of 0.100 was too close to the mean residual value (0.103) under normal operating conditions with measurement noise (\\sigma = 0.05). ### 6.0.2 Statistical Calibration Methodology #### Data Collection and Analysis Sample Size: 1,167 residual measurements from 100 independent simulations Residual Distribution Statistics:": [[119, "issue-18-statistical-threshold-calibration-6-0-1-problem-description-issue-fdi-system-experienced-excessive-false-positive-fault-detections-80-false-alarm-rate-during-normal-operation-due-to-overly-sensitive-threshold-configuration-root-cause-original-threshold-of-0-100-was-too-close-to-the-mean-residual-value-0-103-under-normal-operating-conditions-with-measurement-noise-sigma-0-05-6-0-2-statistical-calibration-methodology-data-collection-and-analysis-sample-size-1-167-residual-measurements-from-100-independent-simulations-residual-distribution-statistics"]], "Issue 1: Chattering Returns After Optimization": [[183, "issue-1-chattering-returns-after-optimization"]], "Issue 1: Citation \u201cNot Found\u201d": [[125, "issue-1-citation-not-found"]], "Issue 1: Connection Refused / Server Not Starting": [[177, "issue-1-connection-refused-server-not-starting"]], "Issue 1: Import Errors": [[124, "issue-1-import-errors"]], "Issue 1: Module Not Found": [[269, "issue-1-module-not-found"]], "Issue 1: ModuleNotFoundError for dip_lowrank": [[171, "issue-1-modulenotfounderror-for-dip-lowrank"]], "Issue 1: QP Infeasibility": [[84, "issue-1-qp-infeasibility"]], "Issue 2: Code Location Changed": [[125, "issue-2-code-location-changed"]], "Issue 2: High Packet Loss": [[177, "issue-2-high-packet-loss"]], "Issue 2: Memory Error for Large Batches": [[171, "issue-2-memory-error-for-large-batches"]], "Issue 2: Missing Dependencies": [[269, "issue-2-missing-dependencies"]], "Issue 2: Simulation Divergence": [[124, "issue-2-simulation-divergence"]], "Issue 2: Slow Convergence": [[183, "issue-2-slow-convergence"]], "Issue 2: Slow Solve Time": [[84, "issue-2-slow-solve-time"]], "Issue 3: Chattering in Control Signal": [[84, "issue-3-chattering-in-control-signal"]], "Issue 3: Excessive Control Effort": [[183, "issue-3-excessive-control-effort"]], "Issue 3: Mathematical Notation Mismatch": [[125, "issue-3-mathematical-notation-mismatch"]], "Issue 3: PSO Not Converging": [[124, "issue-3-pso-not-converging"]], "Issue 3: Slow Performance (No Speedup)": [[171, "issue-3-slow-performance-no-speedup"]], "Issue 3: Styling Conflicts": [[269, "issue-3-styling-conflicts"]], "Issue 3: Timing Jitter / Loop Overruns": [[177, "issue-3-timing-jitter-loop-overruns"]], "Issue 4: Animation Not Working": [[269, "issue-4-animation-not-working"]], "Issue 4: CRC Checksum Failures": [[177, "issue-4-crc-checksum-failures"]], "Issue 4: Plot Not Displaying": [[124, "issue-4-plot-not-displaying"]], "Issue 4: Stability Condition Violated": [[183, "issue-4-stability-condition-violated"]], "Issue 4: cvxpy Not Available": [[84, "issue-4-cvxpy-not-available"]], "Issue 5: ModuleNotFoundError in Client": [[177, "issue-5-modulenotfounderror-in-client"]], "Issue:": [[141, "issue"], [141, "id1"], [141, "id2"], [142, "issue"], [142, "id1"], [142, "id2"]], "Issue: Code persists after refresh": [[155, "issue-code-persists-after-refresh"]], "Issue: Execution timeout after 10 seconds": [[155, "issue-execution-timeout-after-10-seconds"]], "Issue: Figures not displaying": [[155, "issue-figures-not-displaying"]], "Issue: Long server runs crash": [[211, "issue-long-server-runs-crash"]], "Issue: Memory grows despite cleanup": [[211, "issue-memory-grows-despite-cleanup"]], "Issue: PSO optimization OOM": [[211, "issue-pso-optimization-oom"]], "Issue: \u201cFailed to load matplotlib\u201d": [[155, "issue-failed-to-load-matplotlib"]], "Issue: \u201cLoading Python runtime\u2026\u201d takes forever": [[155, "issue-loading-python-runtime-takes-forever"]], "Issues Resolved": [[33, "issues-resolved"]], "Iteration Count": [[162, "iteration-count"]], "JSONSchema": [[8, "jsonschema"]], "Jupyter Notebooks Integration": [[153, "jupyter-notebooks-integration"], [154, null]], "Justification": [[299, "justification"]], "Key Design Principles": [[132, "key-design-principles"]], "Key Documentation Pages": [[189, "key-documentation-pages"]], "Key Equations": [[198, "key-equations"]], "Key Features": [[25, "key-features"], [137, "key-features"], [203, "key-features"], [220, "key-features"], [270, "key-features"]], "Key Files": [[126, "key-files"]], "Key Improvements": [[241, "key-improvements"]], "Key Insights": [[201, "key-insights"]], "Key Insights and Achievements ### 1. Coverage": [[57, "key-insights-and-achievements-1-coverage"]], "Key Modules": [[52, "key-modules"]], "Key References ### Sliding Mode Control Theory Foundational Texts:": [[199, "key-references-sliding-mode-control-theory-foundational-texts"]], "Key Takeaways": [[200, "key-takeaways"]], "Key Technical Contributions ### 1. Sampling Strategy Decision Matrix | Dimensions | Computational Budget | Recommended Method | Convergence |": [[309, "key-technical-contributions-1-sampling-strategy-decision-matrix-dimensions-computational-budget-recommended-method-convergence"]], "Key Topics Covered": [[212, "key-topics-covered"]], "Keyboard Shortcuts": [[145, "keyboard-shortcuts"]], "Kinetic Energy": [[161, "kinetic-energy"], [198, "kinetic-energy"]], "Known Issue Discovered": [[33, "known-issue-discovered"]], "Known Limitations": [[27, "known-limitations"], [28, "known-limitations"], [29, "known-limitations"], [143, "known-limitations"]], "Kubernetes": [[91, "kubernetes"]], "Kubernetes Deployment Configuration": [[63, "kubernetes-deployment-configuration"]], "LaTeX Mathematical Notation": [[299, "latex-mathematical-notation"]], "LaTeX Notation": [[299, "latex-notation"]], "LaTeX Rendering in Documentation": [[258, "latex-rendering-in-documentation"]], "Lagrangian": [[161, "lagrangian"], [198, "lagrangian"]], "Lagrangian Derivation": [[161, "lagrangian-derivation"]], "Lagrangian Formulation": [[258, "lagrangian-formulation"]], "Lagrangian Mechanics": [[220, "lagrangian-mechanics"]], "Lagrangian Mechanics Fundamentals": [[198, "lagrangian-mechanics-fundamentals"]], "Landscape Characteristics": [[201, "landscape-characteristics"]], "Language Support": [[265, "language-support"]], "Latency Monitoring": [[136, "latency-monitoring"]], "Launch Streamlit dashboard": [[128, "launch-streamlit-dashboard"]], "Launch interactive web interface": [[321, "launch-interactive-web-interface"]], "Launching Streamlit Dashboard": [[170, "launching-streamlit-dashboard"]], "Launching the Dashboard": [[265, "launching-the-dashboard"]], "Learning Paths": [[127, "learning-paths"]], "Learning Paths ### For Beginners": [[130, "learning-paths-for-beginners"]], "Legacy Browser Support (Older Devices)": [[140, "legacy-browser-support-older-devices"]], "Legacy Compatibility": [[20, "legacy-compatibility"]], "Lessons Learned": [[24, "lessons-learned"], [25, "lessons-learned"], [26, "lessons-learned"], [27, "lessons-learned"], [29, "lessons-learned"], [31, "lessons-learned"], [32, "lessons-learned"], [33, "lessons-learned"]], "Lessons Learned ### 1. Error Masking Can Hide Critical Bugs": [[40, "lessons-learned-1-error-masking-can-hide-critical-bugs"]], "Lessons Learned ### Successful Strategies 1. Strategic Approach: Instead of enhancing individual source file docstrings (token-intensive), created API reference document (more efficient) 2. Following Phase 4.2 Pattern: Used established quality standards and structure from previous phase (consistency achieved) 3. Examples: 5 complete workflows provide practical guidance (high user value) 4. Theory Integration: Extensive cross-referencing to Phase 2.2 establishes strong theoretical foundation ### Challenges Overcome 1. Token Budget Management: Efficiently used remaining tokens (~104K) by focusing on API reference rather than source docstring enhancements 2. Module Complexity: PSO algorithms are mathematically complex - addressed with clear equations, physical interpretations, and extensive examples 3. Cross-Module Dependencies: Documented relationships between PSOTuner, convergence analyzer, bounds validator, and factory bridge": [[57, "lessons-learned-successful-strategies-1-strategic-approach-instead-of-enhancing-individual-source-file-docstrings-token-intensive-created-api-reference-document-more-efficient-2-following-phase-4-2-pattern-used-established-quality-standards-and-structure-from-previous-phase-consistency-achieved-3-examples-5-complete-workflows-provide-practical-guidance-high-user-value-4-theory-integration-extensive-cross-referencing-to-phase-2-2-establishes-strong-theoretical-foundation-challenges-overcome-1-token-budget-management-efficiently-used-remaining-tokens-104k-by-focusing-on-api-reference-rather-than-source-docstring-enhancements-2-module-complexity-pso-algorithms-are-mathematically-complex-addressed-with-clear-equations-physical-interpretations-and-extensive-examples-3-cross-module-dependencies-documented-relationships-between-psotuner-convergence-analyzer-bounds-validator-and-factory-bridge"]], "License": [[270, "license"]], "License Compliance & Attribution Project: Double Inverted Pendulum - Sliding Mode Control with PSO Optimization": [[15, null]], "License Summary ### Permissive Licenses (No restrictions for academic/commercial use) MIT License (16 dependencies):": [[8, "license-summary-permissive-licenses-no-restrictions-for-academic-commercial-use-mit-license-16-dependencies"]], "Lighthouse PWA Audit": [[31, "lighthouse-pwa-audit"]], "Limitations & Performance": [[155, "limitations-performance"]], "Limitations of Linearization": [[161, "limitations-of-linearization"]], "Line Charts": [[157, "line-charts"]], "Line Counts and Statistics | Component | Lines | Percentage |": [[57, "line-counts-and-statistics-component-lines-percentage"]], "Linearization for Control": [[161, "linearization-for-control"]], "Linearized Coriolis Terms": [[198, "linearized-coriolis-terms"]], "Linearized Gravity": [[198, "linearized-gravity"]], "Linearized Mass Matrix": [[198, "linearized-mass-matrix"]], "Lines of Code Summary": [[31, "lines-of-code-summary"]], "Lines: 690 total class HybridAdaptiveSTASMC: def compute_control(self, state, state_vars, history): # Lines 483-674: Complete control algorithm implementation # Lines 675-677: Comments about return statement # Package the outputs into a structured named tuple\u2026 # MISSING: Actual return statement def reset(self) -> None: \u201c\u201d\u201dReset controller state.\u201d\u201d\u201d # Lines 680-689: Reset logic # Line 690: INCORRECT return statement with out-of-scope variables return HybridSTAOutput(u_sat, (k1_new, k2_new, u_int_new), history, float(s))": [[300, "lines-690-total-class-hybridadaptivestasmc-def-compute-control-self-state-state-vars-history-lines-483-674-complete-control-algorithm-implementation-lines-675-677-comments-about-return-statement-package-the-outputs-into-a-structured-named-tuple-missing-actual-return-statement-def-reset-self-none-reset-controller-state-lines-680-689-reset-logic-line-690-incorrect-return-statement-with-out-of-scope-variables-return-hybridstaoutput-u-sat-k1-new-k2-new-u-int-new-history-float-s"]], "Link 1 Kinetic Energy": [[198, "link-1-kinetic-energy"]], "Link 2 Kinetic Energy": [[198, "link-2-kinetic-energy"]], "Link Validation (0 broken)": [[94, "link-validation-0-broken"]], "Links to Documentation": [[138, "links-to-documentation"]], "Linting (Optional)": [[142, "linting-optional"]], "Live Example: Controller Performance Over Time": [[159, "live-example-controller-performance-over-time"]], "Live Example: PSO Optimization Progress": [[159, "live-example-pso-optimization-progress"]], "Live Example: Settling Time Comparison": [[159, "live-example-settling-time-comparison"]], "Live Python Code Execution": [[153, "live-python-code-execution"], [155, null]], "Load Time": [[30, "load-time"]], "Load Time Impact": [[141, "load-time-impact"]], "Load Times": [[31, "load-times"]], "Loading Configuration": [[131, "loading-configuration"]], "Loading Data from Files": [[159, "loading-data-from-files"]], "Loading Parameters from Config": [[134, "loading-parameters-from-config"]], "Loading Results": [[149, "loading-results"]], "Loading Sequence": [[155, "loading-sequence"]], "Loading and Analyzing Results": [[170, "loading-and-analyzing-results"]], "Local Development": [[34, "local-development"], [90, "local-development"]], "Local Testing": [[315, "local-testing"]], "Local Validation": [[94, "local-validation"]], "LocalStorage Schema": [[143, "localstorage-schema"]], "Log File Inspection": [[70, "log-file-inspection"]], "Logging and Monitoring": [[135, "logging-and-monitoring"]], "Long-Running Simulations": [[290, "long-running-simulations"]], "Long-Term Response (1s+)": [[261, "long-term-response-1s"]], "Long-term Maintenance ### Monitoring Requirements": [[301, "long-term-maintenance-monitoring-requirements"]], "Low-Rank DIP Dynamics": [[220, "low-rank-dip-dynamics"]], "LowRankDIPDynamics": [[220, "lowrankdipdynamics"]], "Lower: [1.0, 1.0, 1.0, 1.0, 5.0, 0.1]": [[275, "lower-1-0-1-0-1-0-1-0-5-0-0-1"]], "Lyapunov Analysis": [[289, "lyapunov-analysis"]], "Lyapunov Function Derivative": [[290, "lyapunov-function-derivative"]], "Lyapunov Function for SMC": [[163, "lyapunov-function-for-smc"]], "Lyapunov Functions: Intuitive Explanation": [[163, "lyapunov-functions-intuitive-explanation"]], "Lyapunov Stability": [[156, "lyapunov-stability"]], "Lyapunov Stability Analysis": [[160, "lyapunov-stability-analysis"], [288, "lyapunov-stability-analysis"]], "Lyapunov Stability Analysis for DIP-SMC System": [[287, null]], "Lyapunov Stability Notation": [[258, "lyapunov-stability-notation"]], "Lyapunov Stability Theory": [[163, "lyapunov-stability-theory"]], "Lyapunov Stability for STA": [[163, "lyapunov-stability-for-sta"]], "Lyapunov stability and numerical verification": [[226, "lyapunov-stability-and-numerical-verification"], [239, "lyapunov-stability-and-numerical-verification"]], "MCP Command Execution": [[183, "mcp-command-execution"]], "Main": [[53, "main"], [53, "id5"]], "Main Commands": [[189, "main-commands"]], "Main Interface": [[265, "main-interface"]], "Main Panel Features": [[265, "main-panel-features"]], "Maintainer Documentation": [[138, "maintainer-documentation"]], "Maintainers": [[270, "maintainers"]], "Maintenance": [[137, "maintenance"]], "Maintenance Checklist": [[142, "maintenance-checklist"]], "Maintenance Guide - Collapsible Code Blocks": [[142, null]], "Maintenance Guidelines": [[24, "maintenance-guidelines"]], "Maintenance Notes": [[138, "maintenance-notes"]], "Maintenance Procedures": [[25, "maintenance-procedures"]], "Maintenance and Operations ### Backup and Recovery Procedures #### Automated Backup Script": [[92, "maintenance-and-operations-backup-and-recovery-procedures-automated-backup-script"]], "Making Changes": [[142, "making-changes"]], "Manual Browser Testing (User Verification Required)": [[27, "manual-browser-testing-user-verification-required"]], "Manual Checkpoint": [[70, "manual-checkpoint"]], "Manual Coverage Verification": [[261, "manual-coverage-verification"]], "Mass Matrix Inversion Strategies": [[290, "mass-matrix-inversion-strategies"]], "Mass Matrix M(q)": [[198, "mass-matrix-m-q"]], "Master Bibliography": [[69, "master-bibliography"]], "Master Controls": [[145, "master-controls"]], "Master Controls Styling": [[140, "master-controls-styling"]], "Master Validation": [[124, "master-validation"]], "Mathematical Algorithm Validation (10/10 - PERFECT)": [[245, "mathematical-algorithm-validation-10-10-perfect"]], "Mathematical Algorithm Validation Documentation": [[191, null]], "Mathematical Algorithms Assessment: 10.0/10 ### Controller Functionality Matrix | Controller | Mathematical Model | Implementation | PSO Cost | Stability | Status |": [[242, "mathematical-algorithms-assessment-10-0-10-controller-functionality-matrix-controller-mathematical-model-implementation-pso-cost-stability-status"]], "Mathematical Appendix": [[249, "mathematical-appendix"]], "Mathematical Background": [[183, "mathematical-background"]], "Mathematical Constraint Validation ### Control Theory Constraints #### Lyapunov Stability Validation": [[73, "mathematical-constraint-validation-control-theory-constraints-lyapunov-stability-validation"]], "Mathematical Definition": [[299, "mathematical-definition"]], "Mathematical Fault Detection": [[261, "mathematical-fault-detection"]], "Mathematical Formulations": [[172, "mathematical-formulations"]], "Mathematical Foundation": [[77, "mathematical-foundation"], [84, "mathematical-foundation"], [85, "mathematical-foundation"]], "Mathematical Foundation ### 1. Energy-Based Control Theory #### 1.1 Hamiltonian Dynamics The double-inverted pendulum is a Hamiltonian system with total energy: ```": [[86, "mathematical-foundation-1-energy-based-control-theory-1-1-hamiltonian-dynamics-the-double-inverted-pendulum-is-a-hamiltonian-system-with-total-energy"]], "Mathematical Foundation ### 1. Sliding Surface Design The hybrid controller employs a unified sliding surface that combines both pendulum joints with optional cart recentering: ```latex": [[81, "mathematical-foundation-1-sliding-surface-design-the-hybrid-controller-employs-a-unified-sliding-surface-that-combines-both-pendulum-joints-with-optional-cart-recentering-latex"]], "Mathematical Foundation ### 1. Sliding Surface Design The sliding surface for the double-inverted pendulum system is defined as: ```": [[78, "mathematical-foundation-1-sliding-surface-design-the-sliding-surface-for-the-double-inverted-pendulum-system-is-defined-as"]], "Mathematical Foundations": [[95, "mathematical-foundations"], [156, "mathematical-foundations"], [199, null], [256, "mathematical-foundations"], [277, "mathematical-foundations"], [277, null]], "Mathematical Foundations ### 1.1 Weighted Residual Calculation Theory The fault detection system employs a mathematically rigorous weighted residual approach for enhanced sensitivity to specific state variables. #### Mathematical Formulation The weighted residual is computed as: ```": [[119, "mathematical-foundations-1-1-weighted-residual-calculation-theory-the-fault-detection-system-employs-a-mathematically-rigorous-weighted-residual-approach-for-enhanced-sensitivity-to-specific-state-variables-mathematical-formulation-the-weighted-residual-is-computed-as"]], "Mathematical Foundations ### Hybrid Adaptive STA-SMC Control Law The hybrid controller combines adaptive gain estimation with super-twisting sliding mode control: #### Sliding Surface Definition": [[301, "mathematical-foundations-hybrid-adaptive-sta-smc-control-law-the-hybrid-controller-combines-adaptive-gain-estimation-with-super-twisting-sliding-mode-control-sliding-surface-definition"]], "Mathematical Foundations ### Sliding Mode Control Theory Integration The factory implementation incorporates rigorous mathematical foundations for each controller type. #### Classical SMC Mathematical Model The classical sliding mode controller implements the control law: $u = u_{eq} + u_{sw}$ where:": [[107, "mathematical-foundations-sliding-mode-control-theory-integration-the-factory-implementation-incorporates-rigorous-mathematical-foundations-for-each-controller-type-classical-smc-mathematical-model-the-classical-sliding-mode-controller-implements-the-control-law-u-u-eq-u-sw-where"]], "Mathematical Foundations Comparison ### Control Algorithms Overview | Controller | Mathematical Model | Core Algorithm | Key Innovation |": [[36, "mathematical-foundations-comparison-control-algorithms-overview-controller-mathematical-model-core-algorithm-key-innovation"]], "Mathematical Foundations for Controller Factory Integration ## Overview This document provides mathematical foundations for the controller factory integration, focusing on the theoretical underpinnings of sliding mode control (SMC) algorithms, stability analysis, and optimization integration. The mathematical framework ensures that all factory-created controllers satisfy fundamental control theory requirements. ## Table of Contents 1. Classical SMC Mathematical Framework": [[279, null]], "Mathematical Foundations of Sliding Mode Control": [[206, "mathematical-foundations-of-sliding-mode-control"]], "Mathematical Foundations {#mathematical-foundations}": [[220, "mathematical-foundations-mathematical-foundations"]], "Mathematical Notation": [[126, "mathematical-notation"]], "Mathematical Notation ### State Vector": [[199, "mathematical-notation-state-vector"]], "Mathematical Notation Reference Guide": [[258, null]], "Mathematical Notation Standards for DIP-SMC-PSO Documentation": [[97, null]], "Mathematical Operators": [[289, "mathematical-operators"]], "Mathematical Property Validation": [[261, "mathematical-property-validation"]], "Mathematical References": [[288, null]], "Mathematical Standards": [[245, "mathematical-standards"]], "Mathematical Test Validation Methodology This document describes the methodology for validating mathematical properties and algorithm correctness in the SMC controller implementations. ## 1. Overview The test validation methodology ensures that all mathematical algorithms and fixes in the SMC system are rigorously validated through: - Property-based testing: Verification of mathematical properties": [[207, null]], "Mathematical Validation Criteria": [[245, "mathematical-validation-criteria"]], "Mathematical Validation Procedures for Control Systems ## Executive Summary This document establishes mathematical validation procedures for the double-inverted pendulum sliding mode control (DIP-SMC) project, ensuring theoretical soundness and implementation correctness through rigorous mathematical property verification. The procedures integrate control theory, optimization theory, and numerical analysis validation with automated testing frameworks. Core Mathematical Domains:": [[209, null]], "Mathematical Visualizations": [[153, "mathematical-visualizations"]], "Mathematical Visualizations Demo": [[156, null]], "Matplotlib": [[8, "matplotlib"]], "Matrix Caching": [[220, "matrix-caching"]], "Matrix Computation Pipeline": [[220, "matrix-computation-pipeline"]], "Matrix Conditioning ### Understanding Condition Numbers The condition number \u03ba(M) measures sensitivity to errors: ```python": [[35, "matrix-conditioning-understanding-condition-numbers-the-condition-number-m-measures-sensitivity-to-errors-python"]], "Matrix Form": [[161, "matrix-form"]], "Matrix Inversion": [[198, "matrix-inversion"]], "Matrix Inversion with Recovery": [[220, "matrix-inversion-with-recovery"]], "Matrix Variables": [[289, "matrix-variables"]], "Maximum Performance (Modern Browsers)": [[140, "maximum-performance-modern-browsers"]], "Maximum Performance Research": [[197, "maximum-performance-research"]], "Medium-Risk Areas (Periodic Review)": [[245, "medium-risk-areas-periodic-review"]], "Memory Access Speed Comparison": [[41, "memory-access-speed-comparison"]], "Memory Efficiency": [[216, "memory-efficiency"]], "Memory Monitoring": [[211, "memory-monitoring"]], "Memory Optimization Techniques": [[203, "memory-optimization-techniques"]], "Memory Profiling": [[41, "memory-profiling"]], "Memory Usage": [[30, "memory-usage"]], "Memory-Efficient Patterns (Already Implemented)": [[41, "memory-efficient-patterns-already-implemented"]], "Method 1: Browse & Copy (Recommended)": [[271, "method-1-browse-copy-recommended"]], "Method 1: Direct Copy": [[268, "method-1-direct-copy"]], "Method 2: Just Ask Claude": [[271, "method-2-just-ask-claude"]], "Method 2: Reference by Name": [[268, "method-2-reference-by-name"]], "Method 3: Import from Library": [[268, "method-3-import-from-library"]], "Method 3: Install the Package": [[271, "method-3-install-the-package"]], "Method Comparison": [[200, "method-comparison"]], "Method Selection Decision Tree": [[200, "method-selection-decision-tree"]], "Method Selection Matrix": [[200, "method-selection-matrix"]], "Methodology & Frameworks": [[42, null]], "Methods (11)": [[26, "methods-11"]], "Metric Interpretation": [[149, "metric-interpretation"]], "Metrics": [[29, "metrics"]], "Metrics Computation": [[136, "metrics-computation"]], "Metrics to Track": [[142, "metrics-to-track"]], "Migration Guide": [[20, "migration-guide"], [139, "migration-guide"]], "Migration Guide ### 1. API Changes Summary #### Breaking Changes (None - Fully Backwards Compatible) \u2705 No breaking changes - All existing code continues to work unchanged. #### New Features Available - Enhanced configuration validation with detailed error messages": [[275, "migration-guide-1-api-changes-summary-breaking-changes-none-fully-backwards-compatible-no-breaking-changes-all-existing-code-continues-to-work-unchanged-new-features-available-enhanced-configuration-validation-with-detailed-error-messages"]], "Migration Guide for Existing Configurations ## Overview This migration guide helps users transition from older controller factory configurations to the enhanced GitHub Issue #6 resolution implementation. The guide covers automated migration tools, manual migration procedures, and best practices for maintaining system stability during transitions. ## Migration Overview ### What Changed in GitHub Issue #6 Resolution The factory integration fixes address several critical areas: 1. Parameter Interface Unification: Standardized parameter handling across all SMC controller types": [[108, null]], "Migration and Versioning ### Configuration Version Management #### Schema Migration System": [[73, "migration-and-versioning-configuration-version-management-schema-migration-system"]], "Migration from Other Solutions": [[141, "migration-from-other-solutions"]], "Minification (Optional)": [[142, "minification-optional"]], "Minimal Animation (Accessibility-Focused)": [[140, "minimal-animation-accessibility-focused"]], "Minimal Setup (Works Immediately)": [[267, "minimal-setup-works-immediately"]], "Minimal simulation (default controller, no plots)": [[128, "minimal-simulation-default-controller-no-plots"], [150, "minimal-simulation-default-controller-no-plots"]], "Mission Accomplishment Summary ### \ud83c\udfc6 Strategic Objectives: 100% ACHIEVED | Objective | Target | Achievement | Status |": [[218, "mission-accomplishment-summary-strategic-objectives-100-achieved-objective-target-achievement-status"]], "Mission Objectives Achieved ### \u2705 Primary Objectives Completed 1. Mathematical Algorithm Validation Documentation - Complete with rigorous LaTeX proofs": [[243, "mission-objectives-achieved-primary-objectives-completed-1-mathematical-algorithm-validation-documentation-complete-with-rigorous-latex-proofs"]], "Mobile Support": [[145, "mobile-support"]], "Mode inventory": [[306, "mode-inventory"]], "Model Architecture {#model-architecture}": [[220, "model-architecture-model-architecture"]], "Model Comparison": [[134, "model-comparison"], [135, "model-comparison"]], "Model Comparison | Model Type | Fidelity | Speed | Use Case ||\u2014\u2014\u2014\u2014|\u2014\u2014\u2014-|\u2014\u2014-|\u2014\u2014\u2014-|": [[219, "model-comparison-model-type-fidelity-speed-use-case"]], "Model Predictive Control Technical Guide": [[84, null]], "Model Selection": [[198, "model-selection"]], "Model Types": [[134, "model-types"]], "Model Types {#model-types}": [[220, "model-types-model-types"]], "Model(s)": [[221, "model-s"]], "Modified Files (2)": [[27, "modified-files-2"], [28, "modified-files-2"]], "Modify Animation Duration": [[142, "modify-animation-duration"]], "Modify Commit Message Template": [[70, "modify-commit-message-template"]], "Module Readme Template": [[270, null]], "Module-Specific Coverage Summary ### Before vs. After API Coverage | Module | Before (Estimate) | After | Improvement |": [[57, "module-specific-coverage-summary-before-vs-after-api-coverage-module-before-estimate-after-improvement"]], "Monitoring": [[136, "monitoring"]], "Monitoring & Regression Prevention ### Pre-commit Hook Add to .git/hooks/pre-commit: ```bash": [[44, "monitoring-regression-prevention-pre-commit-hook-add-to-git-hooks-pre-commit-bash"]], "Monitoring & Validation Framework": [[37, "monitoring-validation-framework"]], "Monitoring PSO Progress": [[170, "monitoring-pso-progress"]], "Monitoring and Alerting Setup ### Prometheus Configuration prometheus.yml:": [[92, "monitoring-and-alerting-setup-prometheus-configuration-prometheus-yml"]], "Monitoring and Maintenance": [[90, "monitoring-and-maintenance"]], "Monte Carlo Analysis": [[135, "monte-carlo-analysis"], [149, "monte-carlo-analysis"]], "Monte Carlo Uncertainty Quantification": [[290, "monte-carlo-uncertainty-quantification"]], "Monte Carlo Validation Quick Start Guide": [[178, null]], "Month 2: Medium Priority (P2)": [[11, "month-2-medium-priority-p2"]], "Month 3: Low Priority (P3)": [[11, "month-3-low-priority-p3"]], "Monthly": [[142, "monthly"]], "More efficient than individual creation": [[116, "more-efficient-than-individual-creation"]], "Most Important Equations": [[288, "most-important-equations"]], "Most Popular Pages": [[127, "most-popular-pages"]], "Multi-Dataset Bar Chart": [[159, "multi-dataset-bar-chart"]], "Multi-Dimensional Parameter Space": [[157, "multi-dimensional-parameter-space"]], "Multi-Dimensional Performance Profile": [[303, "multi-dimensional-performance-profile"]], "Multi-Machine HIL Setup Status: \ud83d\udea7 Under Construction This document will contain guidance on distributed Hardware-in-the-Loop architectures with multiple machines. ## Planned Content ### Architecture Patterns": [[174, null]], "Multi-Objective Formulation": [[201, "multi-objective-formulation"]], "Multi-Objective Optimization": [[133, "multi-objective-optimization"]], "Multi-Paragraph Proof": [[299, "multi-paragraph-proof"]], "Multi-Scenario Fitness Evaluation ### 1. Automatic Test Scenarios The enhanced PSO factory evaluates controllers across multiple test scenarios: ```python": [[280, "multi-scenario-fitness-evaluation-1-automatic-test-scenarios-the-enhanced-pso-factory-evaluates-controllers-across-multiple-test-scenarios-python"]], "Multi-Stage Builds": [[91, "multi-stage-builds"]], "Multi-objective optimization for competing requirements": [[321, "multi-objective-optimization-for-competing-requirements"]], "Multimodality": [[201, "multimodality"]], "Multiple Configuration Files": [[131, "multiple-configuration-files"]], "Multiple ways to create the same controller": [[276, "multiple-ways-to-create-the-same-controller"]], "Mutation Testing for Safety Components": [[261, "mutation-testing-for-safety-components"]], "MyST Markdown Math Blocks": [[258, "myst-markdown-math-blocks"]], "NO ERROR MESSAGES in logs": [[300, "no-error-messages-in-logs"]], "Navigation Menu": [[267, "navigation-menu"]], "Need Help?": [[21, "need-help"], [211, "need-help"]], "Network Fault Detection": [[185, "network-fault-detection"]], "Network Protocol": [[185, "network-protocol"]], "Network Transfer": [[30, "network-transfer"]], "Network Transfer (First Visit)": [[31, "network-transfer-first-visit"]], "New Documentation Files (8)": [[138, "new-documentation-files-8"]], "New Files (6)": [[27, "new-files-6"]], "New Files (8)": [[28, "new-files-8"]], "New Section: Controller Configuration and config.yaml": [[226, "new-section-controller-configuration-and-config-yaml"], [239, "new-section-controller-configuration-and-config-yaml"]], "New Section: Robustness and Singularity Handling": [[226, "new-section-robustness-and-singularity-handling"], [239, "new-section-robustness-and-singularity-handling"]], "New in Week 4": [[82, "new-in-week-4"]], "Next Steps": [[25, "next-steps"], [26, "next-steps"], [28, "next-steps"], [29, "next-steps"], [31, "next-steps"], [131, "next-steps"], [132, "next-steps"], [133, "next-steps"], [134, "next-steps"], [135, "next-steps"], [136, "next-steps"], [138, "next-steps"], [149, "next-steps"], [152, "next-steps"], [154, "next-steps"], [156, "next-steps"], [157, "next-steps"], [158, "next-steps"], [160, "next-steps"], [170, "next-steps"], [183, "next-steps"], [198, "next-steps"], [200, "next-steps"], [201, "next-steps"], [303, "next-steps"]], "Next Steps ### Phase 4.4: Simulation Engine API Documentation Scope: Document SimulationRunner, batch simulation, dynamics models, and integration APIs. Estimated Time: 2-3 hours Dependencies:": [[57, "next-steps-phase-4-4-simulation-engine-api-documentation-scope-document-simulationrunner-batch-simulation-dynamics-models-and-integration-apis-estimated-time-2-3-hours-dependencies"]], "Next Steps ### Related Workflows": [[148, "next-steps-related-workflows"]], "Next Steps (Phase 3+)": [[27, "next-steps-phase-3"]], "Next Steps (Phase 3.2 Recommendations) ### Immediate Actions 1. Create Interactive HTML Dashboard Generate standalone HTML file with embedded Chart.js visualizations for web browser viewing. 2. Document Hybrid Controller Failure Investigate why Hybrid Adaptive STA-SMC failed to converge (all gains \u2192 penalty value). 3. Generate Full Documentation Create pso_convergence_charts.md (600+ lines) with: - Embedded Chart.js visualizations - Detailed convergence analysis per controller - Parameter evolution charts - Convergence diagnostics - Recommendations for PSO hyperparameter tuning ### Extended Analysis (Phase 3.2+) 4. Parameter Evolution Visualization Parse gain trajectories from logs and create 6-dimensional parameter evolution charts. 5. Convergence Rate Comparison Statistical analysis (t-tests, ANOVA) to compare convergence speeds. 6. Diversity Evolution Analysis Track swarm diversity over iterations to identify exploration vs exploitation phases. 7. Hyperparameter Sensitivity Study Vary PSO parameters (c1, c2, w, n_particles) and re-run optimizations.": [[318, "next-steps-phase-3-2-recommendations-immediate-actions-1-create-interactive-html-dashboard-generate-standalone-html-file-with-embedded-chart-js-visualizations-for-web-browser-viewing-2-document-hybrid-controller-failure-investigate-why-hybrid-adaptive-sta-smc-failed-to-converge-all-gains-penalty-value-3-generate-full-documentation-create-pso-convergence-charts-md-600-lines-with-embedded-chart-js-visualizations-detailed-convergence-analysis-per-controller-parameter-evolution-charts-convergence-diagnostics-recommendations-for-pso-hyperparameter-tuning-extended-analysis-phase-3-2-4-parameter-evolution-visualization-parse-gain-trajectories-from-logs-and-create-6-dimensional-parameter-evolution-charts-5-convergence-rate-comparison-statistical-analysis-t-tests-anova-to-compare-convergence-speeds-6-diversity-evolution-analysis-track-swarm-diversity-over-iterations-to-identify-exploration-vs-exploitation-phases-7-hyperparameter-sensitivity-study-vary-pso-parameters-c1-c2-w-n-particles-and-re-run-optimizations"]], "Next Steps (Phase 4.3) ### Optimization Module API Documentation Scope: Document PSO optimization algorithms and integration Components to Document:": [[56, "next-steps-phase-4-3-optimization-module-api-documentation-scope-document-pso-optimization-algorithms-and-integration-components-to-document"]], "Next Steps - How-To: Result Analysis: Interpret simulation outputs": [[150, "next-steps-how-to-result-analysis-interpret-simulation-outputs"]], "Next Steps - Start Learning: Tutorial 01: First Simulation": [[130, "next-steps-start-learning-tutorial-01-first-simulation"]], "Next Steps 1. Schedule Dedicated Session: Reserve 200K token budget for uninterrupted execution": [[58, "next-steps-1-schedule-dedicated-session-reserve-200k-token-budget-for-uninterrupted-execution"]], "Next Steps Immediate (Complete Phase 6.2):": [[14, "next-steps-immediate-complete-phase-6-2"]], "Next Steps Related Guides:": [[169, "next-steps-related-guides"]], "No explicit cleanup needed (automatic via del)": [[210, "no-explicit-cleanup-needed-automatic-via-del"]], "Norms and Inner Products": [[289, "norms-and-inner-products"]], "Notation Conflicts & Resolutions": [[258, "notation-conflicts-resolutions"]], "Notation Conventions": [[258, "notation-conventions"]], "Notation and Conventions": [[289, null]], "Note: \u2018mpc_controller\u2019 only included if optional dependencies available": [[49, "note-mpc-controller-only-included-if-optional-dependencies-available"]], "Notebook Directory": [[91, "notebook-directory"]], "Notebook not found": [[154, "notebook-not-found"]], "Notes": [[221, "notes"]], "Notes on Claim Validation ### Invalid Claims Identified FORMAL-THEOREM-004 & FORMAL-THEOREM-005 (PSO Global Stability Claims)": [[3, "notes-on-claim-validation-invalid-claims-identified-formal-theorem-004-formal-theorem-005-pso-global-stability-claims"]], "NumPy Copy Pattern Optimization: View Conversion Guide Issue: #16 - NumPy copy pattern analysis and optimization": [[44, null]], "Numba JIT Compilation": [[220, "numba-jit-compilation"]], "Numba Optimization": [[220, "numba-optimization"]], "Numerical Analysis Literature": [[290, "numerical-analysis-literature"]], "Numerical Analysis and Implementation ### Numerical Stability Considerations Conditioning of Control Computation:": [[279, "numerical-analysis-and-implementation-numerical-stability-considerations-conditioning-of-control-computation"]], "Numerical Chattering Mitigation": [[290, "numerical-chattering-mitigation"]], "Numerical Instability": [[170, "numerical-instability"]], "Numerical Integration Methods: Theory and Analysis": [[200, null]], "Numerical Methods": [[69, "numerical-methods"]], "Numerical Stability Guide Version: 1.2.0 | Last Updated: 2025-10-01 ## Overview This guide documents the adaptive matrix regularization system implemented in the double-inverted pendulum control framework. The system provides robust numerical stability for matrix operations in plant dynamics, controllers, and optimization algorithms.": [[213, null]], "Numerical Stability Methods": [[160, "numerical-stability-methods"]], "Numerical Stability Methods for Double-Inverted Pendulum Control": [[290, null]], "Numerical Stability Operations Reference": [[212, null]], "Numerical Stability in Robotics": [[290, "numerical-stability-in-robotics"]], "Numerical Stability {#numerical-stability}": [[220, "numerical-stability-numerical-stability"]], "Numerical robustness": [[226, "numerical-robustness"], [239, "numerical-robustness"]], "Nyquist-Shannon Sampling Theorem": [[290, "nyquist-shannon-sampling-theorem"]], "OR on some systems:": [[146, "or-on-some-systems"]], "Objective Components": [[201, "objective-components"]], "Objectives": [[29, "objectives"]], "Observability": [[161, "observability"]], "Observations": [[43, "observations"]], "Official Ports": [[270, "official-ports"]], "Old Version Still Showing": [[315, "old-version-still-showing"]], "Open htmlcov/index.html in browser # Generate terminal coverage report": [[151, "open-htmlcov-index-html-in-browser-generate-terminal-coverage-report"]], "Operating Point(s)": [[221, "operating-point-s"]], "Operational Monitoring": [[245, "operational-monitoring"]], "Optimal Sliding Mode Control for a Double-Inverted Pendulum via PSO Validate ResearchPlanSpec": [[22, null]], "Optimization": [[52, "optimization"], [52, null]], "Optimization & Control ### PySwarms": [[8, "optimization-control-pyswarms"]], "Optimization & Convergence": [[42, "optimization-convergence"]], "Optimization & Simulation Documentation PSO Optimization and Simulation Infrastructure": [[217, null]], "Optimization & Simulation Guide": [[216, null]], "Optimization 1: Quick PSO Test (5 minutes)": [[124, "optimization-1-quick-pso-test-5-minutes"]], "Optimization 2: Full PSO Run (30 minutes)": [[124, "optimization-2-full-pso-run-30-minutes"]], "Optimization 3: PSO Convergence Analysis": [[124, "optimization-3-pso-convergence-analysis"]], "Optimization API Guide": [[133, null]], "Optimization Complete for \u2018hybrid_adaptive_sta_smc\u2019": [[300, "optimization-complete-for-hybrid-adaptive-sta-smc"]], "Optimization Landscape Analysis for Controller Gain Tuning": [[201, null]], "Optimization Literature": [[290, "optimization-literature"]], "Optimization Module API Reference Project: Double-Inverted Pendulum SMC Control System": [[53, null]], "Optimization Modules": [[52, "optimization-modules"]], "Optimization Notation": [[289, "optimization-notation"]], "Optimization Performance": [[245, "optimization-performance"]], "Optimization References": [[245, "optimization-references"]], "Optimization Strategy": [[201, "optimization-strategy"], [299, "optimization-strategy"]], "Optimization Techniques": [[143, "optimization-techniques"]], "Optimization Tips": [[20, "optimization-tips"]], "Optimization-Factory Integration ### PSO Integration Architecture The PSO integration provides optimization of controller parameters: ```python": [[278, "optimization-factory-integration-pso-integration-architecture-the-pso-integration-provides-optimization-of-controller-parameters-python"]], "Optimize Controller Gains (15 minutes)": [[189, "optimize-controller-gains-15-minutes"]], "Optimize STA SMC for finite-time performance": [[321, "optimize-sta-smc-for-finite-time-performance"]], "Optimize adaptive SMC with uncertainty": [[321, "optimize-adaptive-smc-with-uncertainty"]], "Optimize all controllers in sequence": [[321, "optimize-all-controllers-in-sequence"]], "Optimize classical SMC gains": [[128, "optimize-classical-smc-gains"], [321, "optimize-classical-smc-gains"]], "Optimize hybrid SMC (most sophisticated)": [[321, "optimize-hybrid-smc-most-sophisticated"]], "Optimize terminal SMC gains": [[168, "optimize-terminal-smc-gains"]], "Option 1: Git Credential Manager (Recommended)": [[70, "option-1-git-credential-manager-recommended"]], "Option 2: Personal Access Token (PAT)": [[70, "option-2-personal-access-token-pat"]], "Option B: Phased Approach (ALTERNATIVE) Approach: Split Phase 4.3 into sub-phases Phase 4.3a: Docstring Enhancement (2 sessions)": [[58, "option-b-phased-approach-alternative-approach-split-phase-4-3-into-sub-phases-phase-4-3a-docstring-enhancement-2-sessions"]], "Optional (For Advanced Components)": [[267, "optional-for-advanced-components"]], "Optional: Run at Logon": [[70, "optional-run-at-logon"]], "Options": [[159, "options"], [159, "id2"]], "Optuna": [[8, "optuna"]], "Orchestrator Types": [[203, "orchestrator-types"]], "Orchestrators": [[203, "orchestrators"]], "Organization Principles": [[127, "organization-principles"]], "Original Goals (from Phase 11 plan)": [[26, "original-goals-from-phase-11-plan"]], "Original Goals (from user request)": [[25, "original-goals-from-user-request"]], "Output: Condition number: 4.00e+04 (ill-conditioned)": [[35, "output-condition-number-4-00e-04-ill-conditioned"]], "Output: [20.0, 15.0, 12.0, 8.0, 35.0, 5.0] adaptive_gains = get_default_gains(\u2018adaptive_smc\u2019)": [[49, "output-20-0-15-0-12-0-8-0-35-0-5-0-adaptive-gains-get-default-gains-adaptive-smc"]], "Output: [25.0, 18.0, 15.0, 10.0, 4.0] # Use as starting point for optimization": [[49, "output-25-0-18-0-15-0-10-0-4-0-use-as-starting-point-for-optimization"]], "Output: [\u2018classical_smc\u2019, \u2018sta_smc\u2019, \u2018adaptive_smc\u2019, \u2018hybrid_adaptive_sta_smc\u2019]": [[49, "output-classical-smc-sta-smc-adaptive-smc-hybrid-adaptive-sta-smc"]], "Output: docs/bib/smc.bib # View all Levant entries": [[123, "output-docs-bib-smc-bib-view-all-levant-entries"]], "Overall Phase 9 Impact": [[33, "overall-phase-9-impact"]], "Overall Recommendation": [[126, "overall-recommendation"]], "Overall Timeline ```": [[10, "overall-timeline"]], "Overflow and Underflow": [[290, "overflow-and-underflow"]], "Override single parameter": [[128, "override-single-parameter"]], "Overriding Parameters": [[131, "overriding-parameters"]], "Overshoot Analysis": [[156, "overshoot-analysis"]], "Overshoot Comparison": [[303, "overshoot-comparison"]], "Overview": [[18, "overview"], [20, "overview"], [42, "overview"], [52, "overview"], [66, "overview"], [70, "overview"], [82, "overview"], [83, "overview"], [94, "overview"], [95, "overview"], [125, "overview"], [127, "overview"], [131, "overview"], [132, "overview"], [133, "overview"], [134, "overview"], [135, "overview"], [136, "overview"], [138, "overview"], [149, "overview"], [156, "overview"], [159, "overview"], [183, "overview"], [185, "overview"], [189, "overview"], [198, "overview"], [199, "overview"], [200, "overview"], [201, "overview"], [214, "overview"], [216, "overview"], [232, "overview"], [241, "overview"], [258, "overview"], [265, "overview"], [277, "overview"], [299, "overview"], [302, "overview"], [303, "overview"], [305, "overview"], [308, "overview"], [315, "overview"], [320, "overview"], [322, "overview"]], "Overview ### Problem Statement The FDI (Fault Detection and Isolation) system was experiencing excessive false positive fault detections during normal operation due to an overly sensitive threshold configuration. The original threshold of 0.100 was too close to the mean residual value (0.103), causing the system to trigger fault alarms approximately 80% of the time even under normal operating conditions. ### Objectives 1. Reduce false positive rate from ~80% to <1% (target)": [[120, "overview-problem-statement-the-fdi-fault-detection-and-isolation-system-was-experiencing-excessive-false-positive-fault-detections-during-normal-operation-due-to-an-overly-sensitive-threshold-configuration-the-original-threshold-of-0-100-was-too-close-to-the-mean-residual-value-0-103-causing-the-system-to-trigger-fault-alarms-approximately-80-of-the-time-even-under-normal-operating-conditions-objectives-1-reduce-false-positive-rate-from-80-to-1-target"]], "Overview ### Why Numerical Stability Matters In control systems and optimization, numerical instability can cause: - Simulation divergence - States explode to infinity": [[35, "overview-why-numerical-stability-matters-in-control-systems-and-optimization-numerical-instability-can-cause-simulation-divergence-states-explode-to-infinity"]], "Overview The DIP SMC PSO framework provides a Python API for simulating, controlling, and optimizing double-inverted pendulum systems. These API guides bridge the gap between task-oriented How-To Guides and the detailed Technical Reference. What You\u2019ll Find Here:": [[130, "overview-the-dip-smc-pso-framework-provides-a-python-api-for-simulating-controlling-and-optimizing-double-inverted-pendulum-systems-these-api-guides-bridge-the-gap-between-task-oriented-how-to-guides-and-the-detailed-technical-reference-what-you-ll-find-here"]], "Overview The factory pattern system provides a unified, production-ready interface for creating sliding mode control (SMC) and model predictive control (MPC) instances. It implements enterprise-grade features including: - Type-safe controller instantiation with validation": [[51, "overview-the-factory-pattern-system-provides-a-unified-production-ready-interface-for-creating-sliding-mode-control-smc-and-model-predictive-control-mpc-instances-it-implements-enterprise-grade-features-including-type-safe-controller-instantiation-with-validation"]], "Overview This document will provide a academic integrity statement certifying the proper attribution and citation of all ideas, algorithms, and theoretical foundations in the DIP-SMC-PSO project. ## Planned Content ### 1. Attribution Standards": [[0, "overview-this-document-will-provide-a-academic-integrity-statement-certifying-the-proper-attribution-and-citation-of-all-ideas-algorithms-and-theoretical-foundations-in-the-dip-smc-pso-project-planned-content-1-attribution-standards"]], "Overview This document will provide documentation of the citation system implementation, covering the automated extraction, research, integration, and validation processes. ## Planned Content ### 1. System Architecture": [[4, "overview-this-document-will-provide-documentation-of-the-citation-system-implementation-covering-the-automated-extraction-research-integration-and-validation-processes-planned-content-1-system-architecture"]], "Overview This guide provides practical recipes for running simulations in the DIP SMC PSO framework. Choose the approach that best fits your needs: - Quick simulation: CLI with default settings": [[150, "overview-this-guide-provides-practical-recipes-for-running-simulations-in-the-dip-smc-pso-framework-choose-the-approach-that-best-fits-your-needs-quick-simulation-cli-with-default-settings"]], "Overview This guide provides practical workflows for optimizing controller gains using Particle Swarm Optimization (PSO) and other techniques. Common Tasks:": [[148, "overview-this-guide-provides-practical-workflows-for-optimizing-controller-gains-using-particle-swarm-optimization-pso-and-other-techniques-common-tasks"]], "Overview This guide shows you how to run tests, write new tests, validate controllers, and perform benchmarking in the DIP SMC PSO framework. Common Tasks:": [[151, "overview-this-guide-shows-you-how-to-run-tests-write-new-tests-validate-controllers-and-perform-benchmarking-in-the-dip-smc-pso-framework-common-tasks"]], "Overview This project builds upon decades of research in control theory, optimization, and software engineering. We provide attribution across three domains: 1. Software Dependencies & Licenses \u2192 DEPENDENCIES.md": [[2, "overview-this-project-builds-upon-decades-of-research-in-control-theory-optimization-and-software-engineering-we-provide-attribution-across-three-domains-1-software-dependencies-licenses-dependencies-md"]], "Overview This section provides documentation for the double inverted pendulum (DIP) plant models, including simplified, full-fidelity, and low-rank dynamics implementations.": [[219, "overview-this-section-provides-documentation-for-the-double-inverted-pendulum-dip-plant-models-including-simplified-full-fidelity-and-low-rank-dynamics-implementations"]], "Overview This section provides documentation for the optimization algorithms (PSO) and simulation infrastructure used for controller gain tuning and performance evaluation.": [[217, "overview-this-section-provides-documentation-for-the-optimization-algorithms-pso-and-simulation-infrastructure-used-for-controller-gain-tuning-and-performance-evaluation"]], "Overview This tutorial will provide a deep dive into PSO optimization for controller gain tuning, covering advanced topics and practical workflows. ## Planned Content ### 1. PSO Fundamentals": [[304, "overview-this-tutorial-will-provide-a-deep-dive-into-pso-optimization-for-controller-gain-tuning-covering-advanced-topics-and-practical-workflows-planned-content-1-pso-fundamentals"]], "Overview {#overview}": [[220, "overview-overview"]], "Overview: The 4 Core SMC Controllers This framework provides 4 production-ready SMC variants, each designed for specific control challenges: | Controller | Primary Strength | Best For | Computational Cost |": [[166, "overview-the-4-core-smc-controllers-this-framework-provides-4-production-ready-smc-variants-each-designed-for-specific-control-challenges-controller-primary-strength-best-for-computational-cost"]], "PSO & Optimization": [[42, null]], "PSO Algorithm Mathematical Foundations": [[246, null]], "PSO Algorithm Theory": [[160, "pso-algorithm-theory"], [160, "id2"], [162, null]], "PSO Configuration": [[170, "pso-configuration"]], "PSO Configuration Impact": [[158, "pso-configuration-impact"]], "PSO Configuration Migration Report ## Summary": [[247, "pso-configuration-migration-report-summary"]], "PSO Configuration Schema Documentation": [[247, null]], "PSO Controller Workflows": [[127, null]], "PSO Controller Wrapper ### PSOControllerWrapper Class ```python": [[112, "pso-controller-wrapper-psocontrollerwrapper-class-python"]], "PSO Convergence Analysis - Issue #12": [[43, null]], "PSO Convergence Analysis Note: PSO convergence analysis has been integrated into the PSO theory documentation. See: PSO Optimization Complete Theory": [[292, null]], "PSO Convergence Directive": [[159, "pso-convergence-directive"]], "PSO Convergence Theory": [[162, "pso-convergence-theory"]], "PSO Convergence Visualization": [[157, "pso-convergence-visualization"], [319, null]], "PSO Convergence for Hybrid STA-SMC": [[303, "pso-convergence-for-hybrid-sta-smc"]], "PSO Core Algorithm: Implementation Guide Module: Optimization": [[215, null]], "PSO Documentation Validation Report": [[19, null]], "PSO Factory Integration API Reference": [[112, null]], "PSO Gain Bounds Mathematical Foundations": [[249, null]], "PSO Global Convergence (Unimodal)": [[125, "pso-global-convergence-unimodal"]], "PSO Integration": [[98, "pso-integration"], [98, null], [135, "pso-integration"], [277, "pso-integration"]], "PSO Integration Architecture ### Design Philosophy The PSO integration follows several key principles: 1. Native Integration: PSO optimization is a first-class citizen in the factory system": [[248, "pso-integration-architecture-design-philosophy-the-pso-integration-follows-several-key-principles-1-native-integration-pso-optimization-is-a-first-class-citizen-in-the-factory-system"]], "PSO Integration Architecture ### Optimization Framework Design The PSO (Particle Swarm Optimization) integration provides parameter tuning for all controller types with a unified interface and consistent optimization strategies. #### PSO Core Architecture ```python": [[63, "pso-integration-architecture-optimization-framework-design-the-pso-particle-swarm-optimization-integration-provides-parameter-tuning-for-all-controller-types-with-a-unified-interface-and-consistent-optimization-strategies-pso-core-architecture-python"]], "PSO Integration Components": [[20, "pso-integration-components"]], "PSO Integration Examples ### 1. Basic PSO Optimization ```python": [[276, "pso-integration-examples-1-basic-pso-optimization-python"]], "PSO Integration Guide": [[20, null]], "PSO Integration Overview The enhanced factory system provides integration between Particle Swarm Optimization (PSO) and the controller factory pattern. This integration addresses fitness evaluation issues, parameter validation, and convergence diagnostics identified in GitHub Issue #6. ### Key Integration Features - \u2705 Robust Fitness Evaluation: Multi-scenario controller testing with automatic error recovery": [[280, "pso-integration-overview-the-enhanced-factory-system-provides-integration-between-particle-swarm-optimization-pso-and-the-controller-factory-pattern-this-integration-addresses-fitness-evaluation-issues-parameter-validation-and-convergence-diagnostics-identified-in-github-issue-6-key-integration-features-robust-fitness-evaluation-multi-scenario-controller-testing-with-automatic-error-recovery"]], "PSO Integration Patterns ### Native PSO Support The factory system provides native PSO integration through specialized wrapper classes: ```python": [[116, "pso-integration-patterns-native-pso-support-the-factory-system-provides-native-pso-integration-through-specialized-wrapper-classes-python"]], "PSO Integration Problems ### Issue 1: PSO Factory Creation Failures #### Symptoms": [[117, "pso-integration-problems-issue-1-pso-factory-creation-failures-symptoms"]], "PSO Integration System Architecture": [[250, null]], "PSO Integration Technical Specification": [[251, null]], "PSO Integration The factory system provides deep integration with Particle Swarm Optimization (PSO) for automatic gain tuning. ### PSO Integration Architecture ```": [[51, "pso-integration-the-factory-system-provides-deep-integration-with-particle-swarm-optimization-pso-for-automatic-gain-tuning-pso-integration-architecture"]], "PSO Integration Workflow and Best Practices ## Overview This document provides guidance for integrating the SMC Controller Factory with Particle Swarm Optimization (PSO) workflows. The integration enables automated controller parameter tuning while maintaining factory validation, thread safety, and performance requirements. ## PSO Integration Architecture ### High-Level PSO-Factory Integration Flow ```": [[113, null]], "PSO Integration Workflows ### 1. Enhanced PSO-Factory Bridge Architecture The src/optimization/integration/pso_factory_bridge.py provides advanced integration between PSO optimization and the controller factory: ```python": [[275, "pso-integration-workflows-1-enhanced-pso-factory-bridge-architecture-the-src-optimization-integration-pso-factory-bridge-py-provides-advanced-integration-between-pso-optimization-and-the-controller-factory-python"]], "PSO Integration Workflows - Factory Integration ## PSO-Factory Integration Documentation Document Version: 2.0": [[280, null]], "PSO Not Converging": [[170, "pso-not-converging"]], "PSO Optimization": [[124, "pso-optimization"], [126, "pso-optimization"], [170, "pso-optimization"], [170, "id2"]], "PSO Optimization (22 entries) Foundational:": [[123, "pso-optimization-22-entries-foundational"]], "PSO Optimization (45 minutes)": [[124, "pso-optimization-45-minutes"]], "PSO Optimization Documentation (Legacy)": [[214, null]], "PSO Optimization Equations": [[288, "pso-optimization-equations"]], "PSO Optimization Guide Status: \ud83d\udea7 Under Construction This document will contain PSO optimization documentation including: ## Planned Content ### PSO Algorithm Fundamentals": [[60, null]], "PSO Optimization Guide: Super-Twisting SMC": [[183, null]], "PSO Optimization Impact": [[303, "pso-optimization-impact"]], "PSO Optimization Mathematical Framework ### Objective Function Design The PSO optimization seeks to minimize a cost function J(\u03b8) where \u03b8 represents controller gains: ```latex": [[279, "pso-optimization-mathematical-framework-objective-function-design-the-pso-optimization-seeks-to-minimize-a-cost-function-j-where-represents-controller-gains-latex"]], "PSO Optimization Notation": [[258, "pso-optimization-notation"]], "PSO Optimization Theory": [[69, "pso-optimization-theory"], [199, "pso-optimization-theory"]], "PSO Optimization Workflow": [[20, "pso-optimization-workflow"]], "PSO Optimization Workflow Guide": [[182, null]], "PSO Optimization Workflow Specifications": [[252, null]], "PSO Optimization Workflow User Guide": [[253, null]], "PSO Optimization Workflows": [[127, "pso-optimization-workflows"]], "PSO Optimization Workflows ### 1. Individual Controller Optimization #### 1.1 Classical SMC PSO ```bash": [[321, "pso-optimization-workflows-1-individual-controller-optimization-1-1-classical-smc-pso-bash"]], "PSO Optimization for Adaptive SMC Status: \ud83d\udea7 Under Construction This document will contain guidance on optimizing Adaptive Sliding Mode Controller parameters using Particle Swarm Optimization. ## Planned Content ### Adaptive SMC Parameter Space": [[179, null]], "PSO Optimization for Hybrid Adaptive STA-SMC Status: \ud83d\udea7 Under Construction This document will contain guidance on optimizing Hybrid Adaptive Super-Twisting SMC parameters using Particle Swarm Optimization. ## Planned Content ### Hybrid Adaptive STA-SMC Parameter Space": [[181, null]], "PSO Optimization: Real Validated Example": [[183, "pso-optimization-real-validated-example"]], "PSO Parameter Bounds": [[170, "pso-parameter-bounds"]], "PSO Parameter Recommendations": [[20, "pso-parameter-recommendations"]], "PSO Parameter Tuning ### Quick Start ```bash": [[148, "pso-parameter-tuning-quick-start-bash"]], "PSO Parameters": [[289, "pso-parameters"]], "PSO Particle Convergence": [[125, "pso-particle-convergence"]], "PSO Theorems Verification": [[125, "pso-theorems-verification"]], "PSO Theory": [[199, null]], "PSO Troubleshooting and Maintenance Manual": [[254, null]], "PSO Workflows": [[277, null]], "PSO vs Genetic Algorithms (GA)": [[162, "pso-vs-genetic-algorithms-ga"]], "PSO vs Gradient-Based Methods": [[162, "pso-vs-gradient-based-methods"]], "PSO vs Grid Search Comparison Status: \ud83d\udea7 Under Construction This document will provide a comparison between Particle Swarm Optimization and traditional grid search methods for controller parameter tuning. ## Planned Content ### Methodology Comparison": [[184, null]], "PSO vs Random Search": [[162, "pso-vs-random-search"]], "PSO-Factory Integration Patterns Documentation ## Overview This document provides guidance on integrating the factory system with Particle Swarm Optimization (PSO) workflows. The DIP SMC-PSO project features native PSO integration patterns that streamline controller optimization while maintaining scientific rigor and performance. ## Table of Contents 1. PSO Integration Architecture": [[248, null]], "PSOTuner": [[133, "psotuner"], [216, "psotuner"]], "PWA Features Integration": [[31, "pwa-features-integration"]], "Package Installation": [[29, "package-installation"]], "Packet Integrity Features": [[185, "packet-integrity-features"]], "Pandas": [[8, "pandas"]], "Parallel Batch Processing": [[170, "parallel-batch-processing"]], "Parallel Execution": [[281, "parallel-execution"]], "Parallel PSO Execution": [[133, "parallel-pso-execution"]], "Parameter Bounds and Tuning Guidelines": [[183, "parameter-bounds-and-tuning-guidelines"]], "Parameter Configuration": [[77, "parameter-configuration"], [84, "parameter-configuration"], [85, "parameter-configuration"], [134, "parameter-configuration"]], "Parameter Configuration ### 1. Core Parameters #### 1.1 Energy Gain (k_swing) Parameter: energy_gain (float, default=50.0) Effect:": [[86, "parameter-configuration-1-core-parameters-1-1-energy-gain-k-swing-parameter-energy-gain-float-default-50-0-effect"]], "Parameter Configuration ### 1. Primary Parameters (PSO-Tunable) | Parameter | Symbol | Range | Optimal | Description |": [[81, "parameter-configuration-1-primary-parameters-pso-tunable-parameter-symbol-range-optimal-description"]], "Parameter Definitions": [[134, "parameter-definitions"]], "Parameter Influence": [[201, "parameter-influence"]], "Parameter Interdependency Validation ### Cross-Parameter Validation Rules #### Physics-Controller Compatibility": [[73, "parameter-interdependency-validation-cross-parameter-validation-rules-physics-controller-compatibility"]], "Parameter Interface Specification ## Overview This document provides a specification of the parameter interface system implemented in the SMC Controller Factory. The interface resolves the gamma vs gains parameter conflicts and establishes clear parameter handling contracts across all controller types. ## Parameter Resolution Architecture ### Hierarchical Parameter Sources The factory implements a multi-level parameter resolution system: ```": [[109, null]], "Parameter Scaling (Normalization)": [[290, "parameter-scaling-normalization"]], "Parameter Selection Guidelines": [[162, "parameter-selection-guidelines"], [163, "parameter-selection-guidelines"]], "Parameter Selection Guidelines ### Inertia Weight (\u03c9) Purpose: Balances exploration (global search) vs exploitation (local refinement) Fixed Inertia Strategies: | \u03c9 Value | Behavior | Use Case |": [[202, "parameter-selection-guidelines-inertia-weight-purpose-balances-exploration-global-search-vs-exploitation-local-refinement-fixed-inertia-strategies-value-behavior-use-case"]], "Parameter Sensitivity Analysis": [[134, "parameter-sensitivity-analysis"]], "Parameter Validation": [[136, "parameter-validation"], [261, "parameter-validation"]], "Parameters": [[133, "parameters"]], "Parametric Uncertainty Sources": [[290, "parametric-uncertainty-sources"]], "Pareto Front Exploration": [[183, "pareto-front-exploration"]], "Pareto Frontier": [[201, "pareto-frontier"]], "Part 1: Architecture Overview": [[171, "part-1-architecture-overview"]], "Part 1: Controller Architecture Overview ### The Controller Interface All controllers in this framework implement a consistent interface: ```python": [[168, "part-1-controller-architecture-overview-the-controller-interface-all-controllers-in-this-framework-implement-a-consistent-interface-python"]], "Part 1: Introduction to PSO ### What is Particle Swarm Optimization? PSO is a bio-inspired optimization algorithm that simulates the social behavior of bird flocking or fish schooling. It\u2019s particularly effective for continuous, non-convex optimization problems like controller gain tuning. Why PSO for Controller Tuning? 1. Derivative-free: No need for gradient information (important for SMC with discontinuities)": [[167, "part-1-introduction-to-pso-what-is-particle-swarm-optimization-pso-is-a-bio-inspired-optimization-algorithm-that-simulates-the-social-behavior-of-bird-flocking-or-fish-schooling-it-s-particularly-effective-for-continuous-non-convex-optimization-problems-like-controller-gain-tuning-why-pso-for-controller-tuning-1-derivative-free-no-need-for-gradient-information-important-for-smc-with-discontinuities"]], "Part 1: Quick Start with MCP Command ### Real-World Example: Classical SMC Optimization MCP Command:": [[182, "part-1-quick-start-with-mcp-command-real-world-example-classical-smc-optimization-mcp-command"]], "Part 1: Quick Start with Real Example": [[177, "part-1-quick-start-with-real-example"]], "Part 2: Basic Batch Simulation": [[171, "part-2-basic-batch-simulation"]], "Part 2: Implementing a Terminal SMC (TSMC) ### What is Terminal SMC? Terminal Sliding Mode Control uses a nonlinear sliding surface with fractional powers to achieve finite-time convergence (faster than asymptotic). Classical SMC Sliding Surface:": [[168, "part-2-implementing-a-terminal-smc-tsmc-what-is-terminal-smc-terminal-sliding-mode-control-uses-a-nonlinear-sliding-surface-with-fractional-powers-to-achieve-finite-time-convergence-faster-than-asymptotic-classical-smc-sliding-surface"]], "Part 2: Understanding the HIL Architecture": [[177, "part-2-understanding-the-hil-architecture"]], "Part 3: Monte Carlo Simulation": [[171, "part-3-monte-carlo-simulation"]], "Part 3: Running PSO Optimization ### Basic PSO Workflow Step 1: Establish baseline": [[167, "part-3-running-pso-optimization-basic-pso-workflow-step-1-establish-baseline"]], "Part 3: Step-by-Step HIL Workflow": [[177, "part-3-step-by-step-hil-workflow"]], "Part 4: Advanced HIL Configurations": [[177, "part-4-advanced-hil-configurations"]], "Part 4: Controller-Specific Configuration ### 4.1 Classical SMC Tuning Key Parameters:": [[166, "part-4-controller-specific-configuration-4-1-classical-smc-tuning-key-parameters"]], "Part 4: Parameter Sweep Example": [[171, "part-4-parameter-sweep-example"]], "Part 4: Testing Your Custom Controller ### Manual Testing ```bash": [[168, "part-4-testing-your-custom-controller-manual-testing-bash"]], "Part 5: PSO Optimization of Custom Controller ### Configure PSO Bounds Edit config.yaml: ```yaml": [[168, "part-5-pso-optimization-of-custom-controller-configure-pso-bounds-edit-config-yaml-yaml"]], "Part 5: Performance Considerations": [[171, "part-5-performance-considerations"]], "Part 5: Troubleshooting HIL Issues": [[177, "part-5-troubleshooting-hil-issues"]], "Part 6: PSO Best Practices ### Pre-Optimization Checklist Before running PSO, verify: - [ ] Baseline established: Understand default performance": [[167, "part-6-pso-best-practices-pre-optimization-checklist-before-running-pso-verify-baseline-established-understand-default-performance"]], "Part 6: Performance Benchmarks (Real Data)": [[177, "part-6-performance-benchmarks-real-data"]], "Part 6: Troubleshooting": [[171, "part-6-troubleshooting"]], "Part 7: Best Practices": [[171, "part-7-best-practices"]], "Part 7: Best Practices ### 1. Gain Validation Always validate gains in __init__: ```python": [[168, "part-7-best-practices-1-gain-validation-always-validate-gains-in-init-python"]], "Part 7: Best Practices ### 7.1 Optimization Strategy Recommended Workflow:": [[182, "part-7-best-practices-7-1-optimization-strategy-recommended-workflow"]], "Part 7: Production Deployment Checklist": [[177, "part-7-production-deployment-checklist"]], "Part 8: Exercise: Implement Fast Terminal SMC Challenge: Implement Fast Terminal SMC (FTSMC), which uses a different sliding surface: ```": [[168, "part-8-exercise-implement-fast-terminal-smc-challenge-implement-fast-terminal-smc-ftsmc-which-uses-a-different-sliding-surface"]], "Part 8: Next Steps": [[171, "part-8-next-steps"], [177, "part-8-next-steps"]], "Part 8: Next Steps ### For Classical SMC Users:": [[182, "part-8-next-steps-for-classical-smc-users"]], "Partial Configuration Loading": [[131, "partial-configuration-loading"]], "Partial Convexity": [[201, "partial-convexity"]], "Particle Dynamics": [[288, "particle-dynamics"]], "Particle Swarm Optimization": [[256, "particle-swarm-optimization"]], "Particle Swarm Optimization ### Mathematical Foundation Particle Swarm Optimization (PSO) is a population-based metaheuristic inspired by social behavior of bird flocking and fish schooling. #### Core PSO Dynamics Each particle i in the swarm has:": [[193, "particle-swarm-optimization-mathematical-foundation-particle-swarm-optimization-pso-is-a-population-based-metaheuristic-inspired-by-social-behavior-of-bird-flocking-and-fish-schooling-core-pso-dynamics-each-particle-i-in-the-swarm-has"]], "Particle Swarm Optimization Algorithm Mathematical Foundations Authors: Documentation Expert Agent": [[291, null]], "Particle Swarm Optimization for Sliding\u2011Mode Controller Tuning of a Double Inverted Pendulum ## Introduction The double inverted pendulum (DIP) mounted on a translating cart is a widely used benchmark for nonlinear and underactuated control. The system contains two serial pendulums that must be maintained upright while the cart remains near the origin. Due to the underactuation and the coupling between the pendulums and the cart, the dynamics are highly nonlinear and possess multiple unstable equilibrium points, so stabilisation requires a carefully designed controller. Sliding\u2011mode control (SMC) is a nonlinear control technique that uses a discontinuous control law to force the state trajectories onto a prescribed sliding surface. Once on the surface, the system evolution is insensitive to matched disturbances and model uncertainties, which endows SMC with strong robustness[1][2]. However, the discontinuous control input introduces high\u2011frequency switching, known as chattering, which can excite unmodelled dynamics and degrade performance[3]. Selecting the gains that define the sliding surface and switching law is therefore a non\u2011trivial design problem: small gains lead to slow convergence whereas large gains increase chattering. Meta\u2011heuristic optimisation techniques such as particle swarm optimisation (PSO) offer a principled way to automate gain tuning. PSO views each candidate set of controller gains as a particle in a population, and the particles explore the search space by updating their velocities and positions. At each iteration the velocity of particle\u00a0i is influenced by its own best position and the global best position found by the swarm, scaled by acceleration coefficients and random vectors[4]. An inertia weight may be included to control the influence of the previous velocity; larger inertia promotes exploration while smaller inertia encourages exploitation[5]. Because PSO only requires evaluations of the objective function and not its gradient, it is attractive for tuning nonlinear controllers where simulation is the only way to assess performance. This report uses PSO to optimise the gains of a sliding\u2011mode controller for the DIP. \\mathbf{v}{i}(t + 1) = w,\\mathbf{v}{i}(t) + c_{1}r_{1}\\bigl( \\mathbf{p}{\\mathrm{best},i} - \\mathbf{x}{i}(t) \\bigr) + c_{2}r_{2}\\bigl( \\mathbf{g}{\\mathrm{best}} - \\mathbf{x}{i}(t) \\bigr), \\mathbf{x}{i}(t + 1) = \\mathbf{x}{i}(t) + \\mathbf{v}{i}(t + 1), where $w$ is the inertia weight and $c_{1},c_{2}$ are cognitive and social acceleration coefficients; $r_{1},r_{2}$ are uniformly distributed random vectors on $[0,1]$[4]. The inertia term $w\\mathbf{v}_{i}(t)$ retains a portion of the previous velocity, the cognitive term drives the particle toward its personal best position and the social term attracts it toward the global best. Shi and Eberhart introduced the inertia weight to balance global exploration and local exploitation: a large inertia weight emphasises exploration whereas a small one speeds convergence but risks premature stagnation[5]. These update equations allow the swarm to share information and converge toward promising solutions. The goal of this project is to design and tune an SMC for a DIP using PSO. The existing code implements a DIP simulator, a classical sliding\u2011mode controller and a PSO optimizer. The current documentation provides a high\u2011level overview but lacks detailed system modelling, mathematical formulations, implementation details and analysis. This report fills these gaps: it derives the DIP equations of motion, formalizes the SMC and PSO formulations, summarizes the optimization procedure in pseudocode, presents simulation results and discusses limitations and future work. ## System\u00a0Modelling & Problem Statement ### Double Inverted Pendulum Dynamics The DIP consists of a cart of mass $M$ that can translate along a track, a lower pendulum of mass $m_{1}$ and length $l_{1}$ , and an upper pendulum of mass $m_{2}$ and length $l_{2}$ . The centres of mass (COM) are at distances $d_{1}$ and $d_{2}$ from the pivot, and the pendulums have inertias $J_{1}$ and $J_{2}$ about their COMs. Let $x$ be the cart position, $q_{1}$ the lower pendulum angle (zero at upright) and $q_{2}$ the upper pendulum angle. The state vector is \\mathbf{x} = \\left\\lbrack x,, q{1},, q_{2},,\\dot{x},,{\\dot{q}}{1},,{\\dot{q}}{2} \\right\\rbrack^{\\top}. Applying the Euler\u2013Lagrange method to the DIP yields a manipulator form. In the rotary double\u2011inverted pendulum literature the equations of motion are derived from the system\u2019s kinetic and potential energies; the resulting model is expressed in a manipulator form with inertia matrix $H(\\mathbf{q})$, Coriolis matrix $C(\\mathbf{q},\\dot{\\mathbf{q}})$, gravity vector $G(\\mathbf{q})$ and friction term $D(\\dot{\\mathbf{q}})$[6]. Following this standard approach, the DIP dynamics are written as H\\left( \\mathbf{q} \\right),\\ddot{\\mathbf{q}} + C\\left( \\mathbf{q},\\dot{\\mathbf{q}} \\right),\\dot{\\mathbf{q}} + G\\left( \\mathbf{q} \\right) + D\\left( \\dot{\\mathbf{q}} \\right) = B, u, where $\\mathbf{q} = [x, q_{1}, q_{2}]^{\\top}$. The inertia matrix $H(\\mathbf{q})$ depends on the masses and geometries, $C(\\mathbf{q},\\dot{\\mathbf{q}})$ contains Coriolis and centrifugal terms, $G(\\mathbf{q})$ collects gravitational forces and $D(\\dot{\\mathbf{q}})$ models viscous friction. The input matrix $B = [1,0,0]^{\\top}$ highlights the underactuation since only the cart is actuated. In our implementation these matrices are computed numerically from physical parameters specified in a YAML configuration. The resulting continuous\u2011time state\u2011space model used for simulation is \\dot{\\mathbf{x}} = \\begin{bmatrix} \\dot{x} \\ {\\dot{q}}{1} \\ {\\dot{q}}{2} \\ H^{- 1}\\left( \\mathbf{q} \\right)\\left( Bu - C\\dot{\\mathbf{q}} - G\\left( \\mathbf{q} \\right) - D\\dot{\\mathbf{q}} \\right) \\end{bmatrix}. Numerical integration uses a fourth\u2011order Runge\u2013Kutta method with a time step $\\Delta t = 0.01\\ s$ . The simulation length is typically $10\\ s$ , and initial angles are set close to 0 (upright) while the cart starts at the origin. ### Control Objective The goal is to stabilize the DIP at the equilibrium $\\left( x,q_{1},q_{2} \\right) = (0,0,0)$ while keeping the cart near the origin and minimizing oscillations. Specifically, the control problem is to find a force input $u(t)$ constrained by $|u| \\leq u_{\\max}$ (here $u_{\\max} = 150\\ N$ ) that forces $q_{1}(t),q_{2}(t) \\rightarrow 0$ and $x(t) \\rightarrow 0$ . A sliding\u2011mode controller with adjustable gains is adopted. Selecting suitable gains is formulated as an optimization problem solved with PSO. ## Methodology: Sliding\u2011Mode Control & Particle Swarm Optimization ### Classical Sliding\u2011Mode Controller (SMC) Sliding\u2011mode control uses a discontinuous control law to drive the system trajectories onto a predefined sliding surface and keep them there. When the state reaches the sliding surface the dynamics become insensitive to matched disturbances and uncertainties[7][2]. For the DIP the sliding surface is chosen as a linear combination of the pendulum angles and their angular rates: s(t) = \\lambda_{1}, q_{1} + \\lambda_{2}, q_{2} + k_{1},{\\dot{q}}{1} + k{2},{\\dot{q}}_{2}, where $k_{1},k_{2},\\lambda_{1},\\lambda_{2} > 0$ are design parameters. When $s = 0$ the angles and angular rates satisfy a desired relationship that leads to convergence. The SMC control input is composed of an equivalent control $u_{\\text{eq}}$ that cancels the nominal dynamics and a robust control $u_{\\text{robust}}$ to drive $s$ to zero:": [[229, null], [238, null]], "Particle Swarm Optimization: Mathematical Theory Module: Optimization": [[202, null]], "Particle Swarm Variables": [[258, "particle-swarm-variables"]], "Path 1: Quick Start (1-2 hours)": [[127, "path-1-quick-start-1-2-hours"]], "Path 2: Controller Expert (4-6 hours)": [[127, "path-2-controller-expert-4-6-hours"]], "Path 3: Custom Development (8-12 hours)": [[127, "path-3-custom-development-8-12-hours"]], "Path 4: Research Publication (12+ hours)": [[127, "path-4-research-publication-12-hours"]], "Pattern 1: Complete Simulation Pipeline": [[135, "pattern-1-complete-simulation-pipeline"]], "Pattern 1: Development vs Production Configs": [[131, "pattern-1-development-vs-production-configs"]], "Pattern 1: Direct Element Unpacking (View-Based)": [[41, "pattern-1-direct-element-unpacking-view-based"]], "Pattern 1: Direct controller configuration": [[49, "pattern-1-direct-controller-configuration"]], "Pattern 1: Full Optimization Pipeline": [[133, "pattern-1-full-optimization-pipeline"]], "Pattern 1: Model Switching": [[134, "pattern-1-model-switching"]], "Pattern 1: Numbered Theorems": [[299, "pattern-1-numbered-theorems"]], "Pattern 1: Simplified DIP Configuration": [[101, "pattern-1-simplified-dip-configuration"]], "Pattern 1: Single Simulation": [[132, "pattern-1-single-simulation"]], "Pattern 1: Single Simulation (Simple)": [[211, "pattern-1-single-simulation-simple"]], "Pattern 1: Validation Pipeline": [[136, "pattern-1-validation-pipeline"]], "Pattern 2: Controller Comparison": [[132, "pattern-2-controller-comparison"], [135, "pattern-2-controller-comparison"]], "Pattern 2: Iterative Refinement": [[133, "pattern-2-iterative-refinement"]], "Pattern 2: Model Comparison": [[134, "pattern-2-model-comparison"]], "Pattern 2: Monitoring & Analysis Pipeline": [[136, "pattern-2-monitoring-analysis-pipeline"]], "Pattern 2: Proof Blocks": [[299, "pattern-2-proof-blocks"]], "Pattern 2: Scenario-Based Configuration": [[131, "pattern-2-scenario-based-configuration"]], "Pattern 2: Server Deployment (Production)": [[211, "pattern-2-server-deployment-production"]], "Pattern 2: Slice-Based Views": [[41, "pattern-2-slice-based-views"]], "Pattern 3: Math Blocks": [[299, "pattern-3-math-blocks"]], "Pattern 3: Numba JIT Compilation": [[41, "pattern-3-numba-jit-compilation"]], "Pattern 3: PSO Optimization (Batch)": [[211, "pattern-3-pso-optimization-batch"]], "Pattern 3: PSO Optimization Loop": [[132, "pattern-3-pso-optimization-loop"]], "Pattern 3: Parameter Sensitivity Analysis": [[135, "pattern-3-parameter-sensitivity-analysis"]], "Pattern 3: Robustness Optimization": [[133, "pattern-3-robustness-optimization"]], "Pattern 3: Statistical Validation": [[136, "pattern-3-statistical-validation"]], "Pattern 4: Direct Indexing for Conditional Logic": [[41, "pattern-4-direct-indexing-for-conditional-logic"]], "Pattern Classification Reference ### 1. UNNECESSARY: Defensive Copies in Result Construction Pattern: Copying state/control arrays for error/success result dictionaries Location: src/plant/models/{full,lowrank,simplified}/dynamics.py Example:": [[44, "pattern-classification-reference-1-unnecessary-defensive-copies-in-result-construction-pattern-copying-state-control-arrays-for-error-success-result-dictionaries-location-src-plant-models-full-lowrank-simplified-dynamics-py-example"]], "Pattern Compilation Caching": [[299, "pattern-compilation-caching"]], "Pattern Coverage": [[299, "pattern-coverage"]], "Pattern Quick Reference": [[211, "pattern-quick-reference"]], "Pattern Replacement Quick Reference": [[12, "pattern-replacement-quick-reference"]], "Pattern Selection Guidelines ### When to Use Factory Pattern \u2705 Use when:": [[17, "pattern-selection-guidelines-when-to-use-factory-pattern-use-when"]], "Pattern Usage Statistics ### Design Patterns by Frequency | Pattern | Files | Primary Use Case |": [[17, "pattern-usage-statistics-design-patterns-by-frequency-pattern-files-primary-use-case"]], "Pattern Validation": [[299, "pattern-validation"]], "Penalty Methods": [[201, "penalty-methods"]], "Performance": [[28, "performance"], [91, "performance"], [152, "performance"], [153, "performance"], [154, "performance"], [155, "performance"], [156, "performance"], [157, "performance"]], "Performance & Compilation ### Numba": [[8, "performance-compilation-numba"]], "Performance Analysis": [[66, null], [299, "performance-analysis"]], "Performance Analysis ### Computational Complexity Per Iteration: | Operation | Complexity | Count | Total |": [[215, "performance-analysis-computational-complexity-per-iteration-operation-complexity-count-total"]], "Performance Analysis Tools ### 1. Optimization History Analysis ```python": [[280, "performance-analysis-tools-1-optimization-history-analysis-python"]], "Performance Analysis:": [[183, "performance-analysis"]], "Performance Benchmarking ### Running Benchmarks ```bash": [[151, "performance-benchmarking-running-benchmarks-bash"]], "Performance Benchmarks": [[41, "performance-benchmarks"], [66, null]], "Performance Benchmarks Reference Status: \ud83d\udea7 Under Construction This document will contain performance benchmarking documentation including: ## Planned Content ### Benchmark Methodology": [[54, null]], "Performance Characteristics": [[77, "performance-characteristics"], [84, "performance-characteristics"], [85, "performance-characteristics"], [143, "performance-characteristics"]], "Performance Characteristics ### 1. Benchmark Results #### 1.1 PSO Optimization Performance ```": [[81, "performance-characteristics-1-benchmark-results-1-1-pso-optimization-performance"]], "Performance Characteristics ### 1. Swing-Up Performance #### 1.1 Swing-Up Time Typical Performance (from down-down to handoff): | k_swing | Swing-Up Time | Control Effort | Comments |": [[86, "performance-characteristics-1-swing-up-performance-1-1-swing-up-time-typical-performance-from-down-down-to-handoff-k-swing-swing-up-time-control-effort-comments"]], "Performance Characteristics ### Overhead Analysis | Matrix Condition | Regularization Overhead | Total Time Impact |": [[213, "performance-characteristics-overhead-analysis-matrix-condition-regularization-overhead-total-time-impact"]], "Performance Comparison": [[203, "performance-comparison"]], "Performance Considerations": [[20, "performance-considerations"], [27, "performance-considerations"], [141, "performance-considerations"], [185, "performance-considerations"]], "Performance Considerations ### Factory Creation Performance The factory system is optimized for performance-critical applications: ```python": [[116, "performance-considerations-factory-creation-performance-the-factory-system-is-optimized-for-performance-critical-applications-python"]], "Performance Considerations ### Validation Overhead Benchmark results (from tests/test_utils/validation/test_validation_framework.py): | Operation | Time (\u03bcs) | Overhead |": [[208, "performance-considerations-validation-overhead-benchmark-results-from-tests-test-utils-validation-test-validation-framework-py-operation-time-s-overhead"]], "Performance Features": [[90, "performance-features"], [90, "id1"]], "Performance Guarantees": [[299, "performance-guarantees"]], "Performance Impact": [[70, "performance-impact"]], "Performance Issues": [[159, "performance-issues"], [170, "performance-issues"]], "Performance Metrics": [[27, "performance-metrics"], [30, "performance-metrics"], [31, "performance-metrics"], [139, "performance-metrics"], [170, "performance-metrics"], [265, "performance-metrics"], [303, "performance-metrics"]], "Performance Monitoring": [[90, "performance-monitoring"], [136, "performance-monitoring"], [142, "performance-monitoring"], [261, "performance-monitoring"]], "Performance Monitoring ### Fitness History Tracking ```python": [[215, "performance-monitoring-fitness-history-tracking-python"]], "Performance Monitoring API ### Real-Time Performance Monitoring ```python": [[112, "performance-monitoring-api-real-time-performance-monitoring-python"]], "Performance Optimization": [[135, "performance-optimization"], [203, "performance-optimization"], [216, "performance-optimization"], [265, "performance-optimization"]], "Performance Optimization ### Memory-Efficient PSO Patterns ```python": [[248, "performance-optimization-memory-efficient-pso-patterns-python"]], "Performance Optimization ### Production Performance Tuning #### System-Level Optimizations": [[92, "performance-optimization-production-performance-tuning-system-level-optimizations"]], "Performance Optimization Examples ### 1. Configuration Reuse ```python": [[276, "performance-optimization-examples-1-configuration-reuse-python"]], "Performance Optimization {#performance-optimization}": [[220, "performance-optimization-performance-optimization"]], "Performance Problems ### Issue 1: Slow Controller Creation #### Symptoms": [[117, "performance-problems-issue-1-slow-controller-creation-symptoms"]], "Performance Profiling": [[136, "performance-profiling"]], "Performance Regression Detection": [[142, "performance-regression-detection"]], "Performance Regressions": [[34, "performance-regressions"]], "Performance Requirements ### Real-Time Performance Specifications #### Instantiation Performance - Target: Controller creation < 10ms": [[274, "performance-requirements-real-time-performance-specifications-instantiation-performance-target-controller-creation-10ms"]], "Performance Settings": [[90, "performance-settings"], [140, "performance-settings"]], "Performance Tips": [[133, "performance-tips"], [135, "performance-tips"], [154, "performance-tips"]], "Performance and Quality Improvements ### 1. Error Handling Coverage - 100% Exception Coverage: All factory functions have try-catch blocks": [[275, "performance-and-quality-improvements-1-error-handling-coverage-100-exception-coverage-all-factory-functions-have-try-catch-blocks"]], "Performance and Reliability Validation ### Performance Benchmarking Protocol #### Control System Performance Tests": [[93, "performance-and-reliability-validation-performance-benchmarking-protocol-control-system-performance-tests"]], "Performance and Safety ### 7.1 Real-Time Performance Characteristics #### 7.1.1 Computational Complexity Analysis:": [[119, "performance-and-safety-7-1-real-time-performance-characteristics-7-1-1-computational-complexity-analysis"]], "Performance benchmarks (typical values)": [[116, "performance-benchmarks-typical-values"]], "Periodic Safety Review (Weekly)": [[261, "periodic-safety-review-weekly"]], "Persistence Flow": [[143, "persistence-flow"]], "Phase 1.3 Actionable Roadmap Plan Date: 2025-10-07": [[10, "phase-1-3-actionable-roadmap-plan-date-2025-10-07"]], "Phase 10A": [[25, "phase-10a"]], "Phase 10A (Header Spacing)": [[25, "phase-10a-header-spacing"]], "Phase 10A: Header Spacing Fixes": [[25, "phase-10a-header-spacing-fixes"]], "Phase 10B (Transitions)": [[25, "phase-10b-transitions"]], "Phase 10B+10C": [[25, "phase-10b-10c"]], "Phase 10B: Transition Error Fixes": [[25, "phase-10b-transition-error-fixes"]], "Phase 10C (Footnotes)": [[25, "phase-10c-footnotes"]], "Phase 10C: Footnote Error Fixes": [[25, "phase-10c-footnote-error-fixes"]], "Phase 11A (Quick Fixes)": [[26, "phase-11a-quick-fixes"]], "Phase 11A: Quick Fixes (Pygments + Directives)": [[26, "phase-11a-quick-fixes-pygments-directives"]], "Phase 11B (Cross-References)": [[26, "phase-11b-cross-references"]], "Phase 1:": [[143, "phase-1"]], "Phase 1: Citation System (30 minutes)": [[126, "phase-1-citation-system-30-minutes"]], "Phase 1: Critical Blockers (Week 1, 14h) Objective: Resolve CRITICAL type hint gaps and document P0 classes/methods ### Task 1.1: Core Dynamics Type Hints (8h) BLOCKING ISSUE: Core dynamics modules have 0% type hint coverage Files:": [[10, "phase-1-critical-blockers-week-1-14h-objective-resolve-critical-type-hint-gaps-and-document-p0-classes-methods-task-1-1-core-dynamics-type-hints-8h-blocking-issue-core-dynamics-modules-have-0-type-hint-coverage-files"]], "Phase 1: Critical Classes (Week 1)": [[9, "phase-1-critical-classes-week-1"]], "Phase 1: Emergency Safety Mechanisms (IMMEDIATE)": [[37, "phase-1-emergency-safety-mechanisms-immediate"]], "Phase 1: Environment Validation": [[245, "phase-1-environment-validation"]], "Phase 1: Experiment Design": [[320, "phase-1-experiment-design"]], "Phase 1: Problem Formulation ### Step 1: Define Research Objectives Primary Objective:": [[169, "phase-1-problem-formulation-step-1-define-research-objectives-primary-objective"]], "Phase 2 Completion Report: Live Python Code Execution": [[27, null]], "Phase 2:": [[143, "phase-2"]], "Phase 2: Experimental Design ### Step 1: Define Test Scenarios Create experiments/robustness_study/scenarios.yaml: ```yaml": [[169, "phase-2-experimental-design-step-1-define-test-scenarios-create-experiments-robustness-study-scenarios-yaml-yaml"]], "Phase 2: First Simulation Validation #### \u274c Expected Terminal Output Mismatch Status: FAIL (Documentation Error)": [[147, "phase-2-first-simulation-validation-expected-terminal-output-mismatch-status-fail-documentation-error"]], "Phase 2: Implementation": [[320, "phase-2-implementation"]], "Phase 2: Stability Validation Tests (HIGH PRIORITY)": [[37, "phase-2-stability-validation-tests-high-priority"]], "Phase 2: System Configuration": [[245, "phase-2-system-configuration"]], "Phase 2: Theorem Accuracy (45 minutes)": [[126, "phase-2-theorem-accuracy-45-minutes"]], "Phase 2: Type Hints (Weeks 2-3)": [[9, "phase-2-type-hints-weeks-2-3"]], "Phase 3 Completion Report: Plotly Interactive Charts": [[28, null]], "Phase 3 Remaining Work (Optional Enhancements)": [[28, "phase-3-remaining-work-optional-enhancements"]], "Phase 3.1 Completion Report: PSO Convergence Visualization with MCP Integration Project: Double-Inverted Pendulum Sliding Mode Control": [[318, null]], "Phase 3.2 Completion Report: Controller Performance Benchmarks Project: Double-Inverted Pendulum Sliding Mode Control": [[67, null]], "Phase 3.3 Completion Report: Simulation Result Validation Documentation Completion Date: 2025-10-07": [[309, null]], "Phase 3: 100% Selector Coverage + Debug Logging": [[143, "phase-3-100-selector-coverage-debug-logging"]], "Phase 3: Code Reproduction (60 minutes)": [[126, "phase-3-code-reproduction-60-minutes"]], "Phase 3: Data Collection": [[320, "phase-3-data-collection"]], "Phase 3: Functional Validation": [[245, "phase-3-functional-validation"]], "Phase 3: Hybrid Controller Integration (CRITICAL)": [[37, "phase-3-hybrid-controller-integration-critical"]], "Phase 3: Method Documentation (Month 2)": [[9, "phase-3-method-documentation-month-2"]], "Phase 3: Plotly Interactive Charts": [[27, "phase-3-plotly-interactive-charts"]], "Phase 3: Warnings Not Documented #### \u26a0\ufe0f State Sanitization Warning Observed:": [[147, "phase-3-warnings-not-documented-state-sanitization-warning-observed"]], "Phase 4.1 Controller API Documentation Completion Report Date: 2025-10-07": [[55, null]], "Phase 4.2 Completion Report: Factory System API Documentation Project: Double-Inverted Pendulum SMC Control System": [[56, null]], "Phase 4.2 Integration (Factory System) File: docs/api/factory_system_api_reference.md | Factory Section | API Reference Link | Status |": [[57, "phase-4-2-integration-factory-system-file-docs-api-factory-system-api-reference-md-factory-section-api-reference-link-status"]], "Phase 4.3 Completion Report: Optimization Module API Documentation Project: Double-Inverted Pendulum SMC Control System": [[57, null]], "Phase 4.3 Progress Report: Optimization Module API Documentation Project: Double-Inverted Pendulum SMC Control System": [[58, null]], "Phase 4.3 Status: COMPLETE \u2705 Date Completed: 2025-10-07 Deliverables Status:": [[57, "phase-4-3-status-complete-date-completed-2025-10-07-deliverables-status"]], "Phase 4.4 Completion Report: Simulation Engine API Documentation Project: Double-Inverted Pendulum SMC Control System": [[59, null]], "Phase 4: Analysis": [[320, "phase-4-analysis"]], "Phase 4: Attribution Completeness (20 minutes)": [[126, "phase-4-attribution-completeness-20-minutes"]], "Phase 4: Documentation & Reproducibility ### Step 1: Create Experimental Metadata Create experiments/robustness_study/metadata.yaml: ```yaml": [[169, "phase-4-documentation-reproducibility-step-1-create-experimental-metadata-create-experiments-robustness-study-metadata-yaml-yaml"]], "Phase 4: GPU-Accelerated Smooth Animations": [[143, "phase-4-gpu-accelerated-smooth-animations"]], "Phase 4: Jupyter Notebooks Integration - Completion Report": [[29, null]], "Phase 4: Jupyter-Sphinx Integration": [[27, "phase-4-jupyter-sphinx-integration"]], "Phase 4: Parameter Modification Experiments Status: NOT VALIDATED (Time constraints)": [[147, "phase-4-parameter-modification-experiments-status-not-validated-time-constraints"]], "Phase 4: Performance Validation": [[245, "phase-4-performance-validation"]], "Phase 4: Polish and Automation (Month 3+, 10h) Objective: Final touch-ups, automation, and quality gates ### Task 4.1: Type Hint Touch-Ups (5h) Target: Remaining 118 modules with <10% gap Strategy:": [[10, "phase-4-polish-and-automation-month-3-10h-objective-final-touch-ups-automation-and-quality-gates-task-4-1-type-hint-touch-ups-5h-target-remaining-118-modules-with-10-gap-strategy"]], "Phase 5 Complete": [[156, null]], "Phase 5 Completion Report: Mathematical Visualization Library": [[30, null]], "Phase 5 vs Previous Phases": [[30, "phase-5-vs-previous-phases"]], "Phase 5:": [[143, "phase-5"]], "Phase 5: Documentation Quality (15 minutes)": [[126, "phase-5-documentation-quality-15-minutes"]], "Phase 5: Safety Validation": [[245, "phase-5-safety-validation"]], "Phase 5: Validation": [[320, "phase-5-validation"]], "Phase 5: WebXR VR/AR Support": [[27, "phase-5-webxr-vr-ar-support"]], "Phase 6 Completion Report: Progressive Web App (PWA)": [[31, null]], "Phase 6 Completion Summary:": [[138, null]], "Phase 6 Goals": [[138, "phase-6-goals"]], "Phase 6 Goals: Achievement Status": [[31, "phase-6-goals-achievement-status"]], "Phase 6 vs Previous Phases": [[31, "phase-6-vs-previous-phases"]], "Phase 6.1 Deliverables Status ### \u2705 Completed 1. Cross-Reference Database (.test_artifacts/cross_references/) - cross_reference_database.json - Complete link graph - broken_links.json - 148 broken link details - orphaned_docs.json - 721 orphaned documents - statistics.json - metrics 2. Analysis Script (scripts/documentation/analyze_cross_references.py) - Scans 723 markdown files - Extracts internal and external links - Validates link targets - Identifies orphaned documents - Generates JSON reports 3. Validation Test Suite (tests/test_documentation/test_cross_references.py) - 7 automated tests - Link validation (broken links) - Coverage checks (link density) - Pattern validation (tutorial\u2192API, API\u2192examples) - Critical document checks (not orphaned) 4. Audit Report (this document) - analysis - Broken link categorization - Cross-reference pattern analysis - Recommendations for fixes ### \u23f3 Partially Complete 5. Strategic Cross-Reference Enhancement - Identified 6 critical orphaned documents - Identified weak cross-reference patterns - Action Required: Add missing links (estimated 2 hours)": [[7, "phase-6-1-deliverables-status-completed-1-cross-reference-database-test-artifacts-cross-references-cross-reference-database-json-complete-link-graph-broken-links-json-148-broken-link-details-orphaned-docs-json-721-orphaned-documents-statistics-json-metrics-2-analysis-script-scripts-documentation-analyze-cross-references-py-scans-723-markdown-files-extracts-internal-and-external-links-validates-link-targets-identifies-orphaned-documents-generates-json-reports-3-validation-test-suite-tests-test-documentation-test-cross-references-py-7-automated-tests-link-validation-broken-links-coverage-checks-link-density-pattern-validation-tutorialapi-apiexamples-critical-document-checks-not-orphaned-4-audit-report-this-document-analysis-broken-link-categorization-cross-reference-pattern-analysis-recommendations-for-fixes-partially-complete-5-strategic-cross-reference-enhancement-identified-6-critical-orphaned-documents-identified-weak-cross-reference-patterns-action-required-add-missing-links-estimated-2-hours"]], "Phase 6:": [[143, "phase-6"]], "Phase 6: Documentation": [[320, "phase-6-documentation"]], "Phase 6: Master Validation (5 minutes)": [[126, "phase-6-master-validation-5-minutes"]], "Phase 7 Ideas (Not Implemented)": [[142, "phase-7-ideas-not-implemented"]], "Phase 7: Publication": [[320, "phase-7-publication"]], "Phase 8 Breakdown": [[32, "phase-8-breakdown"]], "Phase 8 Commit History": [[32, "phase-8-commit-history"]], "Phase 8A: BibTeX Deduplication": [[32, "phase-8a-bibtex-deduplication"]], "Phase 8B: Header Hierarchy Fixes": [[32, "phase-8b-header-hierarchy-fixes"]], "Phase 8C: Bibliography Directive Consolidation": [[32, "phase-8c-bibliography-directive-consolidation"]], "Phase 9 Final Push (138 \u2192 0)": [[24, "phase-9-final-push-138-0"]], "Phase 9 Overview": [[33, "phase-9-overview"]], "Phase 9A": [[33, "phase-9a"]], "Phase 9A: Transition Error Fixes \u2705 COMPLETE": [[33, "phase-9a-transition-error-fixes-complete"]], "Phase 9B": [[33, "phase-9b"]], "Phase 9B: Line 1 Header Concatenation Fixes \u2705 COMPLETE": [[33, "phase-9b-line-1-header-concatenation-fixes-complete"]], "Phase 9C": [[33, "phase-9c"]], "Phase 9C: Multi-Line Header Concatenation Fixes \u2705 COMPLETE": [[33, "phase-9c-multi-line-header-concatenation-fixes-complete"]], "Phase 9D": [[33, "phase-9d"]], "Phase 9D: Transition-Induced Hierarchy Resets \u2705 COMPLETE": [[33, "phase-9d-transition-induced-hierarchy-resets-complete"]], "Phase 9D: Transition-Induced Hierarchy Warnings": [[24, "phase-9d-transition-induced-hierarchy-warnings"]], "Phase 9E": [[33, "phase-9e"]], "Phase 9E: Remaining Transition Errors": [[24, "phase-9e-remaining-transition-errors"]], "Phase 9E: Remaining Transition Errors \u2705 COMPLETE": [[33, "phase-9e-remaining-transition-errors-complete"]], "Phase 9F": [[33, "phase-9f"]], "Phase 9F: Autodoc Import Warnings": [[24, "phase-9f-autodoc-import-warnings"]], "Phase 9F: Autodoc Import Warnings \u2705 COMPLETE": [[33, "phase-9f-autodoc-import-warnings-complete"]], "Phase 9G": [[33, "phase-9g"]], "Phase 9G: BibTeX + Footnote Errors": [[24, "phase-9g-bibtex-footnote-errors"]], "Phase 9G: BibTeX + Footnote Errors \u2705 COMPLETE": [[33, "phase-9g-bibtex-footnote-errors-complete"]], "Phase B: Expected Output Validation #### Original Expected Output (Lines 215-239) Documented:": [[165, "phase-b-expected-output-validation-original-expected-output-lines-215-239-documented"]], "Phase Completion Reports": [[52, "phase-completion-reports"]], "Phase D: Experiment Validation #### Experiments Documented (Lines 512-608) Tutorial 01 provides 4 parameter modification experiments: Experiment 1: Change Initial Conditions (Lines 512-533)": [[165, "phase-d-experiment-validation-experiments-documented-lines-512-608-tutorial-01-provides-4-parameter-modification-experiments-experiment-1-change-initial-conditions-lines-512-533"]], "Phase Portrait": [[149, "phase-portrait"]], "Phase Portrait Theory": [[156, "phase-portrait-theory"]], "Phase Reports": [[52, null]], "Phase Summary Table": [[24, "phase-summary-table"]], "Physical Constants": [[289, "physical-constants"]], "Physical Constraint Validation": [[220, "physical-constraint-validation"]], "Physical Description": [[161, "physical-description"]], "Physical Parameters": [[258, "physical-parameters"]], "Physical System Description {#physical-system-description}": [[220, "physical-system-description-physical-system-description"]], "Physics Computation {#physics-computation}": [[220, "physics-computation-physics-computation"]], "Physics Model": [[152, "physics-model"]], "Physics parameters": [[216, "physics-parameters"]], "Pitfall 2: Multiple Testing Without Correction Problem: 20 tests at \u03b1=0.05 \u2192 expect 1 false positive. Solution:": [[310, "pitfall-2-multiple-testing-without-correction-problem-20-tests-at-0-05-expect-1-false-positive-solution"]], "Pitfall 3: Confusing Statistical and Practical Significance Problem: p < 0.05 doesn\u2019t mean the effect is important. Solution:": [[310, "pitfall-3-confusing-statistical-and-practical-significance-problem-p-0-05-doesn-t-mean-the-effect-is-important-solution"]], "Pitfall 4: Inappropriate Cross-Validation for Time Series Problem: Using standard K-fold on time series leaks future information. Solution:": [[310, "pitfall-4-inappropriate-cross-validation-for-time-series-problem-using-standard-k-fold-on-time-series-leaks-future-information-solution"]], "Pitfall 5: Ignoring Non-Normality Problem: Using t-tests on non-normal data \u2192 invalid conclusions. Solution:": [[310, "pitfall-5-ignoring-non-normality-problem-using-t-tests-on-non-normal-data-invalid-conclusions-solution"]], "Pitfall 6: Overfitting in Parameter Tuning Problem: PSO optimizes perfectly for training scenarios, fails on new ones. Solution:": [[310, "pitfall-6-overfitting-in-parameter-tuning-problem-pso-optimizes-perfectly-for-training-scenarios-fails-on-new-ones-solution"]], "Planned Enhancements (Phase 7+)": [[139, "planned-enhancements-phase-7"]], "Plant Configuration Guide": [[18, null]], "Plant Dynamics Documentation": [[219, null]], "Plant Models API Guide": [[134, null]], "Plant Models Documentation Double Inverted Pendulum Dynamics Models": [[219, null]], "Plant Models Guide": [[220, null]], "Plotly": [[8, "plotly"]], "Plotly Interactive Charts": [[153, "plotly-interactive-charts"]], "Plotting Results": [[136, "plotting-results"]], "Policies": [[5, "policies"]], "Policy Changes": [[5, "policy-changes"]], "Population Size vs Convergence Speed": [[158, "population-size-vs-convergence-speed"]], "Position Vectors": [[198, "position-vectors"]], "Post-Deployment Validation ### Smoke Testing Protocol #### Immediate Post-Deployment Tests": [[93, "post-deployment-validation-smoke-testing-protocol-immediate-post-deployment-tests"]], "Post-deployment validation script echo \u201cSMC Controller Post-Deployment Validation\u201d": [[92, "post-deployment-validation-script-echo-smc-controller-post-deployment-validation"]], "Potential Energy": [[161, "potential-energy"], [198, "potential-energy"]], "Power Reaching Law": [[156, "power-reaching-law"]], "Practical Applications For implementation details and practical usage, see:": [[199, "practical-applications-for-implementation-details-and-practical-usage-see"]], "Practical Design Guidelines": [[163, "practical-design-guidelines"]], "Practical Guidelines ### Sample Size Recommendations | Study Type | Minimum N | Recommended N | Notes |": [[178, "practical-guidelines-sample-size-recommendations-study-type-minimum-n-recommended-n-notes"]], "Practical Recommendations": [[200, "practical-recommendations"], [201, "practical-recommendations"]], "Practical considerations": [[226, "practical-considerations"], [239, "practical-considerations"]], "Practice 2: Report Effect Sizes Always report:": [[310, "practice-2-report-effect-sizes-always-report"]], "Practice 3: Visualize Uncertainty Don\u2019t just report means:": [[310, "practice-3-visualize-uncertainty-don-t-just-report-means"]], "Practice 4: Use Multiple Validation Methods Triangulation: Converging evidence from multiple methods increases confidence. ```python": [[310, "practice-4-use-multiple-validation-methods-triangulation-converging-evidence-from-multiple-methods-increases-confidence-python"]], "Pre-Commit Checklist": [[12, "pre-commit-checklist"]], "Pre-Deployment Checklist": [[31, "pre-deployment-checklist"], [245, "pre-deployment-checklist"]], "Pre-Deployment Requirements ### System Requirements #### Hardware Specifications": [[92, "pre-deployment-requirements-system-requirements-hardware-specifications"]], "Pre-Deployment Safety Validation": [[261, "pre-deployment-safety-validation"]], "Pre-Deployment Validation": [[177, "pre-deployment-validation"]], "Pre-commit Coverage Hooks": [[37, "pre-commit-coverage-hooks"]], "Prerequisites": [[34, "prerequisites"], [91, "prerequisites"], [91, "id1"], [124, "prerequisites"], [141, "prerequisites"]], "Presentation Structure": [[232, "presentation-structure"]], "Preventing Warning Regression": [[24, "preventing-warning-regression"]], "Prevention Measures ### 1. Static Analysis Integration #### 1.1 Type Checking with mypy ```python": [[300, "prevention-measures-1-static-analysis-integration-1-1-type-checking-with-mypy-python"]], "Prevention Measures ### 1. Static Analysis Integration #### Pre-commit Hook: Return Statement Validation": [[40, "prevention-measures-1-static-analysis-integration-pre-commit-hook-return-statement-validation"]], "Preview URLs": [[315, "preview-urls"]], "Previous Work Before the Project": [[224, null], [234, null]], "Primary Documentation": [[77, "primary-documentation"], [85, "primary-documentation"]], "Primary Goals": [[29, "primary-goals"]], "Principle of Least Action": [[198, "principle-of-least-action"]], "Principles and sliding surface": [[226, "principles-and-sliding-surface"], [239, "principles-and-sliding-surface"]], "Print Support": [[145, "print-support"]], "Priority 2: Convergence Analysis \u2705": [[57, "priority-2-convergence-analysis"], [58, "priority-2-convergence-analysis"]], "Priority 3: Bounds Validation \u2705": [[57, "priority-3-bounds-validation"], [58, "priority-3-bounds-validation"]], "Priority 4a: Bounds Optimization \u2705": [[57, "priority-4a-bounds-optimization"], [58, "priority-4a-bounds-optimization"]], "Priority 4b: Hyperparameter Optimization \u2705": [[57, "priority-4b-hyperparameter-optimization"], [58, "priority-4b-hyperparameter-optimization"]], "Problem": [[25, "problem"], [33, "problem"], [33, "id1"], [33, "id4"], [33, "id7"], [33, "id10"], [33, "id13"], [33, "id16"]], "Problem Analysis ### 1. Error Manifestation Primary Symptoms:": [[300, "problem-analysis-1-error-manifestation-primary-symptoms"]], "Problem Background ### Original Memory Leak Issues Controllers exhibited ~15MB memory growth per instantiation due to:": [[210, "problem-background-original-memory-leak-issues-controllers-exhibited-15mb-memory-growth-per-instantiation-due-to"]], "Problem Identified": [[24, "problem-identified"], [24, "id1"], [24, "id2"], [24, "id4"]], "Problem Statement": [[235, null]], "Problem Statement for Double\u2011Inverted\u00a0Pendulum (DIP) Control with SMC and PSO ### 1\u2003Background and Challenges The double\u2011inverted pendulum (DIP) mounted on a cart is a benchmark under\u2011actuated mechanical system with three degrees of freedom (the cart position and the angles of two pendulums) but only one control input. The system\u2019s nonlinear equations of motion include significant coupling between the pendulums and the cart, and the upper \u201cinverted\u201d configuration is naturally unstable. Recent literature emphasises that nonlinear, unstable or under\u2011actuated systems are very difficult to control; they are primarily studied to test control algorithms rather than for practical utility ``` math": [[223, "problem-statement-for-doubleinverted-pendulum-dip-control-with-smc-and-pso-1-background-and-challenges-the-doubleinverted-pendulum-dip-mounted-on-a-cart-is-a-benchmark-underactuated-mechanical-system-with-three-degrees-of-freedom-the-cart-position-and-the-angles-of-two-pendulums-but-only-one-control-input-the-systems-nonlinear-equations-of-motion-include-significant-coupling-between-the-pendulums-and-the-cart-and-the-upper-inverted-configuration-is-naturally-unstable-recent-literature-emphasises-that-nonlinear-unstable-or-underactuated-systems-are-very-difficult-to-control-they-are-primarily-studied-to-test-control-algorithms-rather-than-for-practical-utility-math"], [235, "problem-statement-for-doubleinverted-pendulum-dip-control-with-smc-and-pso-1-background-and-challenges-the-doubleinverted-pendulum-dip-mounted-on-a-cart-is-a-benchmark-underactuated-mechanical-system-with-three-degrees-of-freedom-the-cart-position-and-the-angles-of-two-pendulums-but-only-one-control-input-the-systems-nonlinear-equations-of-motion-include-significant-coupling-between-the-pendulums-and-the-cart-and-the-upper-inverted-configuration-is-naturally-unstable-recent-literature-emphasises-that-nonlinear-unstable-or-underactuated-systems-are-very-difficult-to-control-they-are-primarily-studied-to-test-control-algorithms-rather-than-for-practical-utility-math"]], "Problem: Batch simulation crashes": [[135, "problem-batch-simulation-crashes"]], "Problem: Control saturates immediately": [[132, "problem-control-saturates-immediately"]], "Problem: Energy not conserved": [[134, "problem-energy-not-conserved"]], "Problem: Excessive chattering": [[132, "problem-excessive-chattering"]], "Problem: Gains validation fails": [[131, "problem-gains-validation-fails"]], "Problem: Numerical instability with full dynamics": [[134, "problem-numerical-instability-with-full-dynamics"]], "Problem: Optimization too slow": [[133, "problem-optimization-too-slow"]], "Problem: Optimized gains invalid": [[133, "problem-optimized-gains-invalid"]], "Problem: PSO not converging": [[133, "problem-pso-not-converging"]], "Problem: Results differ between models": [[134, "problem-results-differ-between-models"]], "Problem: STA-SMC requires dt parameter": [[132, "problem-sta-smc-requires-dt-parameter"]], "Problem: Simulation is too slow": [[135, "problem-simulation-is-too-slow"]], "Problem: Unknown fields in config": [[131, "problem-unknown-fields-in-config"]], "Problem: \u201cNumericalInstabilityError\u201d": [[135, "problem-numericalinstabilityerror"]], "Problem: \u201cValidationError: Invalid configuration\u201d": [[131, "problem-validationerror-invalid-configuration"]], "Problem: \u201cValueError: Requires X gains, got Y\u201d": [[132, "problem-valueerror-requires-x-gains-got-y"]], "Procedures": [[285, "procedures"]], "Production & Deployment": [[95, "production-deployment"]], "Production Deployment": [[91, "production-deployment"], [241, null]], "Production Deployment Checklist": [[183, "production-deployment-checklist"]], "Production Deployment Guide": [[111, null]], "Production Deployment Guide Date: 2025-09-29": [[92, null]], "Production Deployment Recommendations ### \u2705 Immediate Actions (APPROVED)": [[40, "production-deployment-recommendations-immediate-actions-approved"]], "Production Deployment Status": [[24, "production-deployment-status"]], "Production Documentation": [[241, null]], "Production Documentation Summary": [[243, null]], "Production Impact Assessment ### Before Fix (Production Readiness: 7.8/10)": [[301, "production-impact-assessment-before-fix-production-readiness-7-8-10"]], "Production Monitor": [[211, "production-monitor"]], "Production Optimization ### Parallel PSO Execution ```python": [[148, "production-optimization-parallel-pso-execution-python"]], "Production Readiness": [[32, "production-readiness"]], "Production Readiness Assessment ### Enhanced Production Readiness Score: 8.7/10 \u2b06\ufe0f +2.6 improvement #### Component Scoring Breakdown | Category | Score | Weight | Contribution | Status |": [[218, "production-readiness-assessment-enhanced-production-readiness-score-8-7-10-2-6-improvement-component-scoring-breakdown-category-score-weight-contribution-status"]], "Production Readiness Assessment - Final Report Date: 2025-09-29": [[244, null]], "Production Readiness Assessment Framework": [[245, null]], "Production Readiness Assessment v2.0 Date: 2025-09-29": [[242, null]], "Production Readiness Score": [[25, "production-readiness-score"], [26, "production-readiness-score"], [241, "production-readiness-score"]], "Production Readiness \u2705": [[24, "production-readiness"]], "Production environment variables": [[111, "production-environment-variables"]], "Professional Quality Standards": [[25, "professional-quality-standards"]], "Professional Writing Examples": [[12, "professional-writing-examples"]], "Profiling Guidelines": [[203, "profiling-guidelines"]], "Programmatic Configuration": [[131, "programmatic-configuration"]], "Programmatic Parameter Definition": [[134, "programmatic-parameter-definition"]], "Programmatic Usage ### Basic Python API ```python": [[150, "programmatic-usage-basic-python-api-python"]], "Progress Summary": [[33, "progress-summary"]], "Progress Tracking": [[267, "progress-tracking"]], "Project Context": [[98, null]], "Project Documentation": [[95, "project-documentation"], [98, "project-documentation"]], "Project Impact": [[138, "project-impact"]], "Project Information": [[189, "project-information"]], "Project License This Project: MIT License ```": [[15, "project-license-this-project-mit-license"]], "Project Reports": [[66, "project-reports"], [308, null]], "Project Strengths for Research": [[320, "project-strengths-for-research"]], "Properties of the Dynamics": [[161, "properties-of-the-dynamics"]], "Property-Based Testing Integration": [[37, "property-based-testing-integration"]], "Protocol 1: Unit Testing for Safety Components": [[261, "protocol-1-unit-testing-for-safety-components"]], "Protocol 2: Integration Testing for Safety Systems": [[261, "protocol-2-integration-testing-for-safety-systems"]], "Protocol 3: Property-Based Testing for Mathematical Safety": [[261, "protocol-3-property-based-testing-for-mathematical-safety"]], "Pull and Run Pre-Built Image": [[91, "pull-and-run-pre-built-image"]], "Purpose": [[12, "purpose"], [299, "purpose"], [299, "id3"]], "Purpose This guide provides working code examples for Monte Carlo validation and statistical analysis to complement Tutorial 05: Research Workflow. While Tutorial 05 provides the research methodology, this guide focuses on practical implementation. Use this guide for:": [[178, "purpose-this-guide-provides-working-code-examples-for-monte-carlo-validation-and-statistical-analysis-to-complement-tutorial-05-research-workflow-while-tutorial-05-provides-the-research-methodology-this-guide-focuses-on-practical-implementation-use-this-guide-for"]], "PyModbus": [[8, "pymodbus"]], "PyZMQ": [[8, "pyzmq"]], "Pydantic": [[8, "pydantic"]], "Pydantic Settings": [[8, "pydantic-settings"]], "Python API Patterns ### Basic Simulation ```python": [[128, "python-api-patterns-basic-simulation-python"]], "Python Enhancement Proposals (PEPs) Official Python language design documents: - PEP 8 - Style Guide for Python Code (formatting, naming conventions)": [[17, "python-enhancement-proposals-peps-official-python-language-design-documents-pep-8-style-guide-for-python-code-formatting-naming-conventions"]], "Python Environment": [[27, "python-environment"]], "Python Naming Rules": [[258, "python-naming-rules"]], "Q2: How do I know if a theorem is correctly implemented? Answer:": [[121, "q2-how-do-i-know-if-a-theorem-is-correctly-implemented-answer"]], "Q2: How were citation accuracy verified? Answer: All 11 FORMAL-THEOREM claims were manually verified using a 5-step process: 1. Theorem Statement Review - Read theorem claim in documentation": [[122, "q2-how-were-citation-accuracy-verified-answer-all-11-formal-theorem-claims-were-manually-verified-using-a-5-step-process-1-theorem-statement-review-read-theorem-claim-in-documentation"]], "Q3: What if I find a citation that seems inaccurate? Answer:": [[121, "q3-what-if-i-find-a-citation-that-seems-inaccurate-answer"]], "Q3: Why are some papers cited without full PDF access? Answer: We provide DOI or URL for 100% of entries (94/94). However: - 80% have DOI - Persistent identifiers that resolve via university libraries": [[122, "q3-why-are-some-papers-cited-without-full-pdf-access-answer-we-provide-doi-or-url-for-100-of-entries-94-94-however-80-have-doi-persistent-identifiers-that-resolve-via-university-libraries"]], "Q4: Are there any self-citations or conflicts of interest? Answer: No. This project cites:": [[122, "q4-are-there-any-self-citations-or-conflicts-of-interest-answer-no-this-project-cites"]], "Q4: Why are some API documentation files flagged as \u201cuncited\u201d? Answer:": [[121, "q4-why-are-some-api-documentation-files-flagged-as-uncited-answer"]], "Q5: How do I reproduce the PSO optimization results? Answer: ```bash": [[121, "q5-how-do-i-reproduce-the-pso-optimization-results-answer-bash"]], "Q6: How are BibTeX keys structured? Answer: Format: {topic}_{author}_{year}_{descriptor} Examples:": [[122, "q6-how-are-bibtex-keys-structured-answer-format-topic-author-year-descriptor-examples"]], "Q7: What citation format is used? Answer: MyST Markdown with inline citations: ```markdown": [[122, "q7-what-citation-format-is-used-answer-myst-markdown-with-inline-citations-markdown"]], "Quality Assurance Checklist ### Docstring Quality Standards (Phase 4.2 Benchmark) - [ ] All public classes have docstrings with examples": [[58, "quality-assurance-checklist-docstring-quality-standards-phase-4-2-benchmark-all-public-classes-have-docstrings-with-examples"]], "Quality Assurance Metrics ### Documentation Quality Standards - Mathematical Rigor: \u2705 All algorithms with formal proofs": [[243, "quality-assurance-metrics-documentation-quality-standards-mathematical-rigor-all-algorithms-with-formal-proofs"]], "Quality Assurance Validation ### Docstring Coverage Tool Output Command: python -m pydocstyle src/controllers/smc/*.py Result: \u2705 No errors (100% coverage) Command: python -m interrogate src/controllers/smc/ --verbose Expected Output:": [[55, "quality-assurance-validation-docstring-coverage-tool-output-command-python-m-pydocstyle-src-controllers-smc-py-result-no-errors-100-coverage-command-python-m-interrogate-src-controllers-smc-verbose-expected-output"]], "Quality Checklist": [[137, "quality-checklist"]], "Quality Gate Decision Matrix ### Go/No-Go Decision Framework | Gate | Criteria | Pass Threshold | Action |": [[93, "quality-gate-decision-matrix-go-no-go-decision-framework-gate-criteria-pass-threshold-action"]], "Quality Gate Implementation": [[37, "quality-gate-implementation"]], "Quality Gate Independence Framework ## Executive Summary The Quality Gate Independence Framework establishes resilient, parallel validation paths that operate independently to prevent cascade failures and ensure robust quality assessment for the double-inverted pendulum sliding mode control (DIP-SMC) project. This framework addresses the critical issue identified in GitHub Issue #9 where single component failures could prevent system validation. Core Principle: No single point of failure should block system quality assessment. ## 1. Framework Architecture ### 1.1 Independent Validation Paths The framework implements four parallel, independent validation paths that can operate and report results independently: ```python": [[255, null]], "Quality Gate Validation Results ### All Quality Gates: 100% PASSED \u2705 #### Core System Quality Gates": [[218, "quality-gate-validation-results-all-quality-gates-100-passed-core-system-quality-gates"]], "Quality Gates": [[9, "quality-gates"], [138, "quality-gates"]], "Quality Gates and Scoring": [[245, "quality-gates-and-scoring"]], "Quality Gates and Standards ### Mandatory Quality Gates 1. Test Pass Rate: 100% (excluding known xfail)": [[283, "quality-gates-and-standards-mandatory-quality-gates-1-test-pass-rate-100-excluding-known-xfail"]], "Quality Indicators ### \u2705 Current Strengths": [[11, "quality-indicators-current-strengths"]], "Quality Metrics": [[256, "quality-metrics"]], "Quality Metrics ### Code Quality - Parser script: 474 lines, fully type-hinted, docstrings": [[318, "quality-metrics-code-quality-parser-script-474-lines-fully-type-hinted-docstrings"]], "Quality Metrics ### Documentation Depth": [[309, "quality-metrics-documentation-depth"]], "Quality Metrics ### Documentation Quality Metrics:": [[67, "quality-metrics-documentation-quality-metrics"]], "Quality Metrics ### Quality Rubric (100 points) #### Documentation Completeness (40 points) | Criterion | Points | Achieved | Notes |": [[57, "quality-metrics-quality-rubric-100-points-documentation-completeness-40-points-criterion-points-achieved-notes"]], "Quality Metrics (Expected)": [[299, "quality-metrics-expected"]], "Quality Standards": [[94, "quality-standards"]], "Quality Standards Met": [[26, "quality-standards-met"]], "Quarterly": [[142, "quarterly"]], "Quasi-Sliding Mode Band": [[290, "quasi-sliding-mode-band"]], "Quick Check": [[211, "quick-check"]], "Quick Check (Pre-Commit Hook)": [[94, "quick-check-pre-commit-hook"]], "Quick Configuration Templates": [[158, "quick-configuration-templates"]], "Quick Diagnosis ### Diagnostic Checklist When encountering factory issues, run this quick diagnostic sequence: ```python": [[117, "quick-diagnosis-diagnostic-checklist-when-encountering-factory-issues-run-this-quick-diagnostic-sequence-python"]], "Quick Diagnostics Script": [[144, "quick-diagnostics-script"]], "Quick Links": [[18, "quick-links"], [137, "quick-links"], [241, "quick-links"], [319, "quick-links"]], "Quick Lookup: Math \u2192 Code": [[258, "quick-lookup-math-code"]], "Quick Monte Carlo Example (10 Trials) ### Minimal Working Example ```python": [[178, "quick-monte-carlo-example-10-trials-minimal-working-example-python"]], "Quick Navigation": [[95, "quick-navigation"], [264, "quick-navigation"]], "Quick Navigation ### \ud83d\ude80 Getting Started": [[129, "quick-navigation-getting-started"]], "Quick Reference": [[82, "quick-reference"], [126, "quick-reference"], [170, "quick-reference"], [212, "quick-reference"], [219, "quick-reference"], [288, "quick-reference"]], "Quick Reference Guide ### For Academic Publications Citing This Project\u2019s Control Theory:": [[2, "quick-reference-guide-for-academic-publications-citing-this-project-s-control-theory"]], "Quick Reference Guide Essential commands, patterns, and workflows for the DIP SMC PSO framework.": [[128, null]], "Quick Search": [[127, "quick-search"]], "Quick Setup": [[185, "quick-setup"]], "Quick Smoke Test (2 minutes)": [[141, "quick-smoke-test-2-minutes"]], "Quick Smoke Test (5 minutes)": [[124, "quick-smoke-test-5-minutes"], [142, "quick-smoke-test-5-minutes"]], "Quick Start": [[20, "quick-start"], [90, "quick-start"], [91, "quick-start"], [152, "quick-start"], [189, "quick-start"], [265, "quick-start"], [281, "quick-start"]], "Quick Start ### 1. Verify Installation ```bash": [[121, "quick-start-1-verify-installation-bash"]], "Quick Start (15 minutes)": [[126, "quick-start-15-minutes"]], "Quick Start (5 Minutes)": [[141, "quick-start-5-minutes"]], "Quick Start Guide": [[153, "quick-start-guide"], [155, "quick-start-guide"]], "Quick Start Guide for Running Tests Document Version: 1.0": [[323, null]], "Quick Start Test Commands ### Essential Test Runs ```bash": [[282, "quick-start-test-commands-essential-test-runs-bash"]], "Quick Start Workflows ### 1. Basic Controller Testing #### 1.1 Single Controller Simulation ```bash": [[321, "quick-start-workflows-1-basic-controller-testing-1-1-single-controller-simulation-bash"]], "Quick Start: Issue #12 Validation": [[21, null]], "Quick Start: Your First Interactive Chart": [[157, "quick-start-your-first-interactive-chart"]], "Quick development testing (unit tests only)": [[282, "quick-development-testing-unit-tests-only"]], "Quick optimization test": [[92, "quick-optimization-test"]], "Quick test (50 iterations, ~2 minutes)": [[121, "quick-test-50-iterations-2-minutes"]], "Radar Chart: Controller features": [[159, "radar-chart-controller-features"]], "Radar Charts": [[157, "radar-charts"]], "Range Validators ### require_in_range Validates that a value lies within a specified interval. Location: src/utils/validation/range_validators.py #### Signature ```python": [[208, "range-validators-require-in-range-validates-that-a-value-lies-within-a-specified-interval-location-src-utils-validation-range-validators-py-signature-python"]], "Rapid Prototyping / Proof-of-Concept": [[197, "rapid-prototyping-proof-of-concept"]], "Rationale": [[31, "rationale"]], "Reaching Law Stability": [[290, "reaching-law-stability"]], "React Bits - Complete Component Index": [[268, null]], "React Bits - Quick Reference Cheat Sheet": [[267, null]], "React Bits - Quick Start Guide": [[271, null]], "React Bits Integration Guide": [[269, null]], "React Spring Components": [[271, "react-spring-components"]], "Read the Docs": [[141, "read-the-docs"]], "ReadTheDocs Configuration": [[315, "readthedocs-configuration"]], "ReadTheDocs Dashboard": [[315, "readthedocs-dashboard"]], "Real Results (Captured 2025-10-07)": [[183, "real-results-captured-2025-10-07"]], "Real-Time Metrics Dashboard": [[245, "real-time-metrics-dashboard"]], "Real-Time Performance Testing": [[37, "real-time-performance-testing"]], "Real-Time Safety Dashboard": [[261, "real-time-safety-dashboard"]], "Real-World HIL Execution (Validated 2025-10-07)": [[177, "real-world-hil-execution-validated-2025-10-07"]], "Real-time monitoring setup": [[321, "real-time-monitoring-setup"]], "Realistic vs Challenging Parameters": [[134, "realistic-vs-challenging-parameters"]], "Recommendations": [[31, "recommendations"], [32, "recommendations"]], "Recommendations and Future Enhancements ### Immediate Actions (Priority: HIGH) 1. Complete Thread Safety Validation - Systematic race condition testing - Atomic operation verification - Deadlock detection and prevention 2. Expand HIL Test Coverage - Real-time communication validation - Hardware fault injection testing - Safety constraint verification 3. Optimize Statistical Test Performance - Reduce Monte Carlo sample requirements - Implement adaptive sampling strategies - Parallel statistical computation ### Medium-Term Enhancements (Priority: MEDIUM) 1. Advanced Property-Based Testing - Expand input domain coverage - Model-based test generation - Invariant discovery automation 2. Performance Optimization - Vectorized test execution - Parallel benchmark computation - Test result caching strategies 3. Documentation Enhancement - Interactive test documentation - Scientific validation explanations - Troubleshooting automation ### Long-Term Strategic Goals (Priority: LOW) 1. AI-Assisted Test Generation - Automated test case discovery - Intelligent coverage gap detection - Adaptive test prioritization 2. Advanced Metrics Integration - Real-time performance dashboards - Predictive failure analysis - Automated quality trend analysis": [[284, "recommendations-and-future-enhancements-immediate-actions-priority-high-1-complete-thread-safety-validation-systematic-race-condition-testing-atomic-operation-verification-deadlock-detection-and-prevention-2-expand-hil-test-coverage-real-time-communication-validation-hardware-fault-injection-testing-safety-constraint-verification-3-optimize-statistical-test-performance-reduce-monte-carlo-sample-requirements-implement-adaptive-sampling-strategies-parallel-statistical-computation-medium-term-enhancements-priority-medium-1-advanced-property-based-testing-expand-input-domain-coverage-model-based-test-generation-invariant-discovery-automation-2-performance-optimization-vectorized-test-execution-parallel-benchmark-computation-test-result-caching-strategies-3-documentation-enhancement-interactive-test-documentation-scientific-validation-explanations-troubleshooting-automation-long-term-strategic-goals-priority-low-1-ai-assisted-test-generation-automated-test-case-discovery-intelligent-coverage-gap-detection-adaptive-test-prioritization-2-advanced-metrics-integration-real-time-performance-dashboards-predictive-failure-analysis-automated-quality-trend-analysis"]], "Recommendations for Codebase Authors": [[299, "recommendations-for-codebase-authors"]], "Recommendations for Enhancement": [[195, "recommendations-for-enhancement"]], "Recommendations for Future Enhancements ### Optional Improvements (Not Required for Phase 4.3) 1. Additional Architecture Diagrams (if desired): - PSO particle swarm visualization - Convergence criteria decision tree - Bounds optimization strategy comparison flowchart 2. Interactive Examples (Phase 6.3): - Jupyter notebooks for code examples - Interactive convergence plots with Chart.js - Live parameter tuning demonstrations 3. Video Tutorials (Future phase): - PSO optimization walkthrough - Convergence monitoring tutorial - Hyperparameter tuning best practices 4. Automated Testing (Phase 6.2): - Pytest validation of all code examples - Docstring syntax validation - Cross-reference link checker": [[57, "recommendations-for-future-enhancements-optional-improvements-not-required-for-phase-4-3-1-additional-architecture-diagrams-if-desired-pso-particle-swarm-visualization-convergence-criteria-decision-tree-bounds-optimization-strategy-comparison-flowchart-2-interactive-examples-phase-6-3-jupyter-notebooks-for-code-examples-interactive-convergence-plots-with-chart-js-live-parameter-tuning-demonstrations-3-video-tutorials-future-phase-pso-optimization-walkthrough-convergence-monitoring-tutorial-hyperparameter-tuning-best-practices-4-automated-testing-phase-6-2-pytest-validation-of-all-code-examples-docstring-syntax-validation-cross-reference-link-checker"]], "Recommended Documentation Updates ### Priority: HIGH (Breaking Changes) 1. Global find-replace in getting-started.md: - --ctrl \u2192 --controller - --save  \u2192 --save-gains  - --load  \u2192 --load-gains  2. Update expected help output (lines 151-167) - Show actual --controller syntax - Add new parameters: --duration, --dt, --seed - Remove controller enum from usage line (implementation doesn\u2019t show it) 3. Update expected simulation output (lines 192-205) - Show actual minimal output - Document expected warnings - Explain silent execution (results visible only with \u2013plot) ### Priority: MEDIUM (User Experience) 4. Add troubleshooting entry for state sanitization warning - Explain this is normal behavior - Reassure users simulation is working correctly 5. Document adaptation rate warning for hybrid controller - Note this is advisory only - Confirm default configuration is stable 6. Add note about simulation performance - Document expected simulation duration (10-15s for 2s simulation) - Explain performance characteristics ### Priority: LOW (Future Enhancements) 7. Consider enhancing simulate.py verbose output - Match documented user experience - Add performance metrics computation and display - Provide learning-friendly progress logging": [[147, "recommended-documentation-updates-priority-high-breaking-changes-1-global-find-replace-in-getting-started-md-ctrl-controller-save-save-gains-load-load-gains-2-update-expected-help-output-lines-151-167-show-actual-controller-syntax-add-new-parameters-duration-dt-seed-remove-controller-enum-from-usage-line-implementation-doesn-t-show-it-3-update-expected-simulation-output-lines-192-205-show-actual-minimal-output-document-expected-warnings-explain-silent-execution-results-visible-only-with-plot-priority-medium-user-experience-4-add-troubleshooting-entry-for-state-sanitization-warning-explain-this-is-normal-behavior-reassure-users-simulation-is-working-correctly-5-document-adaptation-rate-warning-for-hybrid-controller-note-this-is-advisory-only-confirm-default-configuration-is-stable-6-add-note-about-simulation-performance-document-expected-simulation-duration-10-15s-for-2s-simulation-explain-performance-characteristics-priority-low-future-enhancements-7-consider-enhancing-simulate-py-verbose-output-match-documented-user-experience-add-performance-metrics-computation-and-display-provide-learning-friendly-progress-logging"]], "Recommended Execution Strategy ### Option A: Dedicated Session (RECOMMENDED) Approach: Complete Phase 4.3 in single dedicated session with full token budget Rationale:": [[58, "recommended-execution-strategy-option-a-dedicated-session-recommended-approach-complete-phase-4-3-in-single-dedicated-session-with-full-token-budget-rationale"]], "Recommended Reading Order": [[160, "recommended-reading-order"]], "Recommended Review Focus ### Priority 1 (Essential for Publication) 1. Citation Accuracy Audit (.artifacts/accuracy_audit.md) - Verify 11 theorem claims - Check citation appropriateness - Confirm mathematical correctness 2. BibTeX Verification (.artifacts/citation_report.md) - Confirm 100% DOI/URL coverage - Verify accessibility of key sources - Check citation style consistency 3. Code Reproduction (docs/for_reviewers/reproduction_guide.md) - Run simulation examples - Reproduce PSO optimization - Verify test suite passes ### Priority 2 (Recommended) 1. Attribution Review (.artifacts/attribution_audit_executive_summary.md) - Understand flagged claims context - Review top 5 theory files - Assess overall attribution quality 2. Theorem Verification (docs/for_reviewers/theorem_verification_guide.md) - Cross-check theorem-to-code mappings - Verify implementation correctness - Review test coverage for theorems ### Priority 3 (Optional) 1. Notation Guide (docs/references/notation_guide.md) - Verify symbol consistency - Check code variable mappings - Review conflict resolutions 2. API Documentation (docs/api/) - Check implementation examples - Verify code snippets - Review docstring quality": [[121, "recommended-review-focus-priority-1-essential-for-publication-1-citation-accuracy-audit-artifacts-accuracy-audit-md-verify-11-theorem-claims-check-citation-appropriateness-confirm-mathematical-correctness-2-bibtex-verification-artifacts-citation-report-md-confirm-100-doi-url-coverage-verify-accessibility-of-key-sources-check-citation-style-consistency-3-code-reproduction-docs-for-reviewers-reproduction-guide-md-run-simulation-examples-reproduce-pso-optimization-verify-test-suite-passes-priority-2-recommended-1-attribution-review-artifacts-attribution-audit-executive-summary-md-understand-flagged-claims-context-review-top-5-theory-files-assess-overall-attribution-quality-2-theorem-verification-docs-for-reviewers-theorem-verification-guide-md-cross-check-theorem-to-code-mappings-verify-implementation-correctness-review-test-coverage-for-theorems-priority-3-optional-1-notation-guide-docs-references-notation-guide-md-verify-symbol-consistency-check-code-variable-mappings-review-conflict-resolutions-2-api-documentation-docs-api-check-implementation-examples-verify-code-snippets-review-docstring-quality"]], "Recommended Settings by Use Case": [[140, "recommended-settings-by-use-case"]], "Recommended pre-commit test sequence": [[282, "recommended-pre-commit-test-sequence"]], "Recovery Procedures": [[261, "recovery-procedures"]], "Reduced Motion Support": [[143, "reduced-motion-support"]], "Reference": [[12, "reference"]], "References": [[20, "references"], [41, "references"], [77, "references"], [84, "references"], [85, "references"], [94, "references"], [159, "references"], [197, "references"], [203, "references"], [204, "references"], [206, "references"], [222, "references"], [224, "references"], [226, "references"], [227, "references"], [231, "references"], [233, "references"], [234, "references"], [239, "references"], [258, "references"], [289, "references"], [303, "references"]], "References ### 1. Energy-Based Control Theory Foundational Texts:": [[86, "references-1-energy-based-control-theory-foundational-texts"]], "References ### Related Files - src/plant/core/numerical_stability.py - Core implementation": [[213, "references-related-files-src-plant-core-numerical-stability-py-core-implementation"]], "References & Bibliography": [[95, "references-bibliography"]], "References & Citations ### Design Patterns Textbook ```bibtex": [[17, "references-citations-design-patterns-textbook-bibtex"]], "References 1. Control Theory: Utkin, V. \u201cSliding Modes in Control and Optimization\u201d": [[301, "references-1-control-theory-utkin-v-sliding-modes-in-control-and-optimization"]], "References 1. PSO Theory: - Kennedy & Eberhart (1995). \u201cParticle Swarm Optimization\u201d - Clerc & Kennedy (2002). \u201cThe particle swarm - explosion, stability, and convergence in a multidimensional complex space\u201d 2. Super-Twisting Algorithm: - Levant (1993). \u201cSliding order and sliding accuracy in sliding mode control\u201d - Moreno & Osorio (2008). \u201cA Lyapunov approach to second-order sliding mode controllers and observers\u201d 3. Numerical Algorithms: - Golub & Van Loan (2013). \u201cMatrix Computations\u201d, 4th edition - Higham (2002). \u201cAccuracy and Stability of Numerical Algorithms\u201d, 2nd edition 4. Algorithm Comparison: - Derrac et al. (2011). \u201cA practical tutorial on the use of nonparametric statistical tests\u201d - Garc\u00eda et al. (2009). \u201cA study on the use of non-parametric tests for analyzing the evolutionary algorithms\u2019 behaviour\u201d": [[193, "references-1-pso-theory-kennedy-eberhart-1995-particle-swarm-optimization-clerc-kennedy-2002-the-particle-swarm-explosion-stability-and-convergence-in-a-multidimensional-complex-space-2-super-twisting-algorithm-levant-1993-sliding-order-and-sliding-accuracy-in-sliding-mode-control-moreno-osorio-2008-a-lyapunov-approach-to-second-order-sliding-mode-controllers-and-observers-3-numerical-algorithms-golub-van-loan-2013-matrix-computations-4th-edition-higham-2002-accuracy-and-stability-of-numerical-algorithms-2nd-edition-4-algorithm-comparison-derrac-et-al-2011-a-practical-tutorial-on-the-use-of-nonparametric-statistical-tests-garcia-et-al-2009-a-study-on-the-use-of-non-parametric-tests-for-analyzing-the-evolutionary-algorithms-behaviour"]], "References 1. Parameter Validators: src/utils/validation/parameter_validators.py": [[208, "references-1-parameter-validators-src-utils-validation-parameter-validators-py"]], "References and Citations ```{toctree}": [[257, null]], "References and Further Reading ### 1. Control Theory References 1. Utkin, V. (1992). \u201cSliding Modes in Control and Optimization\u201d. Springer-Verlag.": [[81, "references-and-further-reading-1-control-theory-references-1-utkin-v-1992-sliding-modes-in-control-and-optimization-springer-verlag"]], "References and Standards": [[245, "references-and-standards"]], "Regex Pattern": [[299, "regex-pattern"], [299, "id1"], [299, "id2"]], "Register Scheduled Task": [[70, "register-scheduled-task"]], "Regular Build Validation": [[25, "regular-build-validation"]], "Regularization Parameter Selection": [[290, "regularization-parameter-selection"]], "Related Documentation": [[42, "related-documentation"], [64, "related-documentation"], [66, "related-documentation"], [82, "related-documentation"], [124, "related-documentation"], [125, "related-documentation"], [185, "related-documentation"], [216, "related-documentation"], [219, "related-documentation"], [220, "related-documentation"], [265, "related-documentation"], [277, "related-documentation"], [281, "related-documentation"], [302, "related-documentation"], [305, "related-documentation"], [308, "related-documentation"], [322, "related-documentation"]], "Related Documentation Links | Document | Links | Status |": [[57, "related-documentation-links-document-links-status"]], "Related Pages": [[152, "related-pages"], [155, "related-pages"]], "Release Checklist Use this checklist when preparing a new release of the ResearchPlan validation system. ## Pre-Release ### Code & Documentation": [[23, null]], "Release Process": [[139, "release-process"]], "Release Workflow": [[315, "release-workflow"]], "Remaining Warnings (39)": [[32, "remaining-warnings-39"]], "Remaining Warnings Analysis": [[26, "remaining-warnings-analysis"]], "Remaining Warnings Assessment": [[25, "remaining-warnings-assessment"]], "Remaining Warnings Details": [[25, "remaining-warnings-details"]], "Remaining Work": [[241, "remaining-work"]], "Rendering Engine": [[152, "rendering-engine"]], "Replace Text": [[267, "replace-text"]], "Reporting Issues": [[145, "reporting-issues"]], "Reproducibility": [[91, "reproducibility"], [170, "reproducibility"]], "Reproducibility Checklist": [[124, "reproducibility-checklist"], [320, "reproducibility-checklist"]], "Reproducibility Package": [[320, "reproducibility-package"]], "Reproduction Guide": [[124, null]], "Required Extensions": [[141, "required-extensions"]], "Research Applications": [[265, "research-applications"]], "Research Impact and Context": [[256, "research-impact-and-context"]], "Research Lifecycle": [[320, "research-lifecycle"]], "Research Presentation Materials": [[232, null]], "Research Workflow Guide": [[320, null]], "Research Workflow Integration": [[156, "research-workflow-integration"]], "Research Workflows": [[156, "research-workflows"]], "Research-Grade Numerical Methods with Computational Validation": [[290, "research-grade-numerical-methods-with-computational-validation"]], "Reset to defaults": [[153, "reset-to-defaults"]], "Resetting Collapsed State": [[145, "resetting-collapsed-state"]], "Resolution Patterns ### Pattern 1: Weakref for Model References Problem: Circular reference prevents garbage collection": [[210, "resolution-patterns-pattern-1-weakref-for-model-references-problem-circular-reference-prevents-garbage-collection"]], "Resource Monitoring": [[136, "resource-monitoring"]], "Result Analysis": [[170, "result-analysis"]], "Result Management": [[170, "result-management"]], "Result Structure": [[135, "result-structure"]], "Results": [[25, "results"], [25, "id1"], [25, "id3"], [26, "results"], [33, "results"], [33, "id3"], [33, "id6"], [33, "id9"], [33, "id12"], [33, "id15"], [33, "id18"]], "Results & Plots": [[260, null]], "Results and Analysis ```{toctree}": [[259, null]], "Results and Logs": [[91, "results-and-logs"]], "Results in: monte_carlo_quick_test/results.csv # Step 2: Load and validate data": [[178, "results-in-monte-carlo-quick-test-results-csv-step-2-load-and-validate-data"]], "Reviewer Documentation Package Project: Double Inverted Pendulum - Sliding Mode Control with PSO Optimization": [[121, null]], "Reviewer Notes": [[126, "reviewer-notes"]], "Risk Assessment ### Low Risk (Apply immediately)": [[44, "risk-assessment-low-risk-apply-immediately"]], "Risk Assessment Matrix": [[245, "risk-assessment-matrix"]], "Risk Mitigation Strategy": [[37, "risk-mitigation-strategy"]], "Robustness Analysis": [[163, "robustness-analysis"], [290, "robustness-analysis"]], "Robustness Testing": [[133, "robustness-testing"]], "Rollback Procedure": [[142, "rollback-procedure"]], "Rollback and Recovery Procedures ### Rollback Decision Criteria #### Automatic Rollback Triggers": [[93, "rollback-and-recovery-procedures-rollback-decision-criteria-automatic-rollback-triggers"]], "Root Cause Investigation ### 1. Code Structure Analysis #### 1.1 File Structure Before Fix ```python": [[300, "root-cause-investigation-1-code-structure-analysis-1-1-file-structure-before-fix-python"]], "Root Causes Identified and Fixed": [[24, "root-causes-identified-and-fixed"]], "Rounding Errors": [[290, "rounding-errors"]], "Ruggedness": [[201, "ruggedness"]], "Rule & Error Code Versioning": [[5, "rule-error-code-versioning"]], "Rule 1: Use Views for Read-Only Access": [[41, "rule-1-use-views-for-read-only-access"]], "Rule 2: Only Copy When Mutating": [[41, "rule-2-only-copy-when-mutating"]], "Rule 3: Prefer Direct Indexing for Scalars": [[41, "rule-3-prefer-direct-indexing-for-scalars"]], "Rule 4: Use Numba for Performance-Critical Paths": [[41, "rule-4-use-numba-for-performance-critical-paths"]], "Run All Tests": [[281, "run-all-tests"]], "Run All Validation Scripts": [[126, "run-all-validation-scripts"]], "Run All Verification Scripts": [[125, "run-all-verification-scripts"]], "Run CLI Simulation": [[91, "run-cli-simulation"]], "Run Experiments": [[320, "run-experiments"]], "Run HIL simulation": [[321, "run-hil-simulation"]], "Run HIL simulation (automatic server + client)": [[128, "run-hil-simulation-automatic-server-client"]], "Run PSO with different seeds": [[167, "run-pso-with-different-seeds"]], "Run Specific Test Categories": [[281, "run-specific-test-categories"]], "Run Task Immediately": [[70, "run-task-immediately"]], "Run Test Suite": [[189, "run-test-suite"]], "Run all benchmarks": [[151, "run-all-benchmarks"]], "Run all tests": [[128, "run-all-tests"], [151, "run-all-tests"]], "Run only unit tests (fast execution)": [[283, "run-only-unit-tests-fast-execution"]], "Run tests": [[186, "run-tests"]], "Run tests with coverage": [[151, "run-tests-with-coverage"]], "Run with verbose output": [[151, "run-with-verbose-output"]], "Runge-Kutta 4th Order (RK4)": [[200, "runge-kutta-4th-order-rk4"]], "Running HIL Simulations": [[170, "running-hil-simulations"]], "Running Multiple Simulations": [[170, "running-multiple-simulations"]], "Running Simulations": [[135, "running-simulations"], [170, "running-simulations"]], "Running Tests ### Quick Test Execution ```bash": [[151, "running-tests-quick-test-execution-bash"]], "Running with GPU": [[91, "running-with-gpu"]], "Runtime Configuration Validation ### Dynamic Validation System #### Real-Time Parameter Validation": [[73, "runtime-configuration-validation-dynamic-validation-system-real-time-parameter-validation"]], "Runtime Coverage Monitoring": [[37, "runtime-coverage-monitoring"]], "Runtime Fix Analysis ### 1. Root Cause Analysis Problem: 'numpy.ndarray' object has no attribute 'get' Root Cause: Missing return statement in compute_control() method. The return statement was incorrectly placed inside the reset() method, causing the main method to return None instead of the expected HybridSTAOutput tuple. #### 1.1 Code Analysis Before Fix:": [[81, "runtime-fix-analysis-1-root-cause-analysis-problem-numpy-ndarray-object-has-no-attribute-get-root-cause-missing-return-statement-in-compute-control-method-the-return-statement-was-incorrectly-placed-inside-the-reset-method-causing-the-main-method-to-return-none-instead-of-the-expected-hybridstaoutput-tuple-1-1-code-analysis-before-fix"]], "Runtime Performance": [[141, "runtime-performance"]], "Runtime Safety Assertions": [[261, "runtime-safety-assertions"]], "Runtime Safety Validation": [[261, "runtime-safety-validation"]], "SMC Algorithm Fixes and Mathematical Validation Summary This document provides a summary of all mathematical algorithm fixes, validation improvements, and corrected implementations in the SMC controller system for GitHub Issue #5. ## 1. Executive Summary The SMC mathematical foundation has been completely restructured and validated with the following major improvements: - Boundary Layer Mathematics: Corrected chattering reduction theory and implementation": [[194, null]], "SMC Control Theory": [[199, "smc-control-theory"]], "SMC Controller Comparison Theory": [[197, null]], "SMC Controller Factory System Guide Double-Inverted Pendulum Sliding Mode Control": [[80, null]], "SMC Gain Validation ### SMCGainValidator Class Centralized validation for all SMC controller types with theoretical stability guarantees. Location: src/controllers/smc/core/gain_validation.py #### Controller Types ```python": [[208, "smc-gain-validation-smcgainvalidator-class-centralized-validation-for-all-smc-controller-types-with-theoretical-stability-guarantees-location-src-controllers-smc-core-gain-validation-py-controller-types-python"]], "SMC Mathematical Foundations Documentation This directory contains mathematical documentation for all SMC algorithm fixes and validation methodology implemented for GitHub Issue #5. ## \ud83d\udccb Documentation Overview This mathematical foundation documentation provides: - Complete mathematical theory behind all SMC algorithm implementations": [[192, null]], "SMC Mathematical Theory Documentation": [[206, null]], "SMC Switching Function Precision": [[290, "smc-switching-function-precision"]], "SMC Theory": [[199, null]], "SMCType Enum": [[132, "smctype-enum"]], "STA SMC": [[197, "sta-smc"]], "STA Theory References": [[85, "sta-theory-references"]], "STASMC": [[211, "stasmc"]], "STEP 1: Load Configuration": [[61, "step-1-load-configuration"]], "STEP 2: Create Controller": [[61, "step-2-create-controller"]], "STEP 3: Create Dynamics Model": [[61, "step-3-create-dynamics-model"]], "STEP 4: Run Simulation": [[61, "step-4-run-simulation"]], "STEP 5: Analyze Results": [[61, "step-5-analyze-results"]], "STEP 6: Plot Results": [[61, "step-6-plot-results"]], "SVD-Based Pseudo-Inverse": [[290, "svd-based-pseudo-inverse"]], "Safety Architecture Overview": [[261, "safety-architecture-overview"]], "Safety Certification Requirements": [[261, "safety-certification-requirements"]], "Safety Guard Architecture": [[203, "safety-guard-architecture"]], "Safety Guards": [[135, "safety-guards"]], "Safety Guards Integration": [[203, "safety-guards-integration"]], "Safety Guidelines": [[185, "safety-guidelines"]], "Safety Integration Test Framework": [[261, "safety-integration-test-framework"]], "Safety Monitoring Systems": [[261, "safety-monitoring-systems"]], "Safety Property Test Method Status": [[119, "safety-property-test-method-status"]], "Safety Requirements Hierarchy": [[261, "safety-requirements-hierarchy"]], "Safety Review Checklist": [[261, "safety-review-checklist"]], "Safety System": [[203, "safety-system"]], "Safety System Requirements": [[245, "safety-system-requirements"]], "Safety System Validation Protocols": [[261, null]], "Safety-Critical Component Identification": [[261, "safety-critical-component-identification"]], "Sample .env File": [[34, "sample-env-file"]], "Sample Rate": [[185, "sample-rate"]], "Saturation": [[136, "saturation"]], "Saturation Monitoring": [[136, "saturation-monitoring"]], "Save simulation results": [[128, "save-simulation-results"]], "Saved Result Files": [[170, "saved-result-files"]], "Saving and Loading Results": [[133, "saving-and-loading-results"]], "Scalar Variables": [[289, "scalar-variables"]], "Scatter Plots": [[157, "scatter-plots"]], "Scheduled Automatic Backups": [[70, "scheduled-automatic-backups"]], "Schema Overview The enhanced factory system provides type-safe configuration schemas for all controller types, with validation based on sliding mode control theory. Each controller type has its own dedicated configuration class with mathematical validation rules. ### Key Features - Type Safety: All parameters validated at creation time": [[273, "schema-overview-the-enhanced-factory-system-provides-type-safe-configuration-schemas-for-all-controller-types-with-validation-based-on-sliding-mode-control-theory-each-controller-type-has-its-own-dedicated-configuration-class-with-mathematical-validation-rules-key-features-type-safety-all-parameters-validated-at-creation-time"]], "Schema Version Gating": [[5, "schema-version-gating"]], "SciPy": [[8, "scipy"]], "Scientific Validation ### 4.1 Test Protocol Design The FDI system validation follows rigorous scientific methodology: #### Unit Test Categories: 4.1.1 Mathematical Correctness Tests:": [[119, "scientific-validation-4-1-test-protocol-design-the-fdi-system-validation-follows-rigorous-scientific-methodology-unit-test-categories-4-1-1-mathematical-correctness-tests"]], "Scientific Validation ### Mathematical Correctness Verification The factory integration includes mathematical validation to ensure theoretical correctness: #### Lyapunov Stability Verification ```python": [[107, "scientific-validation-mathematical-correctness-verification-the-factory-integration-includes-mathematical-validation-to-ensure-theoretical-correctness-lyapunov-stability-verification-python"]], "Scoring Matrix (Weighted)": [[245, "scoring-matrix-weighted"]], "Scripts Created": [[24, "scripts-created"], [32, "scripts-created"], [33, "scripts-created"]], "Search & Discovery": [[95, "search-discovery"]], "Secondary Goals": [[29, "secondary-goals"]], "Security": [[91, "security"], [153, "security"]], "Security Configuration ### Production Security Checklist #### SSL/TLS Configuration": [[92, "security-configuration-production-security-checklist-ssl-tls-configuration"]], "Security Considerations": [[70, "security-considerations"], [90, "security-considerations"], [143, "security-considerations"]], "Security and Safety Architecture ### Safety-Critical Design Patterns #### Fail-Safe Mechanisms ```python": [[63, "security-and-safety-architecture-safety-critical-design-patterns-fail-safe-mechanisms-python"]], "Security and Safety Validation ### Security Validation Checklist #### Input Validation Security": [[93, "security-and-safety-validation-security-validation-checklist-input-validation-security"]], "See Also": [[69, "see-also"]], "Select controller, adjust parameters, run simulations": [[321, "select-controller-adjust-parameters-run-simulations"]], "Selection Guidelines": [[303, "selection-guidelines"]], "Selective Display": [[154, "selective-display"]], "Selectors Array (JavaScript)": [[140, "selectors-array-javascript"]], "Sensitivity Analysis": [[201, "sensitivity-analysis"], [290, "sensitivity-analysis"]], "Sensor Noise Simulation": [[185, "sensor-noise-simulation"]], "Service Worker Lifecycle": [[31, "service-worker-lifecycle"]], "Settling Time": [[149, "settling-time"]], "Settling Time Comparison": [[303, "settling-time-comparison"]], "Shape Conventions": [[203, "shape-conventions"]], "Short-Term Response (50ms-1s)": [[261, "short-term-response-50ms-1s"]], "Side-by-Side Comparisons": [[156, "side-by-side-comparisons"]], "Sign Conventions": [[289, "sign-conventions"]], "Sign Functions": [[136, "sign-functions"]], "Signature": [[203, "signature"], [203, "id1"]], "Simplified DIP Dynamics": [[220, "simplified-dip-dynamics"]], "Simplified Dynamics": [[134, "simplified-dynamics"], [135, "simplified-dynamics"], [161, "simplified-dynamics"]], "Simplified Dynamics Model": [[198, "simplified-dynamics-model"]], "Simplified Equations": [[198, "simplified-equations"]], "Simplified Inertia Matrix": [[220, "simplified-inertia-matrix"]], "Simplified Physics Computer": [[220, "simplified-physics-computer"]], "SimplifiedDIPConfig": [[220, "simplifieddipconfig"]], "SimplifiedDIPDynamics": [[220, "simplifieddipdynamics"]], "Simulation 1: Classical SMC - Full Duration": [[124, "simulation-1-classical-smc-full-duration"]], "Simulation 2: STA-SMC - Chattering Comparison": [[124, "simulation-2-sta-smc-chattering-comparison"]], "Simulation 3: Adaptive SMC - Parameter Uncertainty": [[124, "simulation-3-adaptive-smc-parameter-uncertainty"]], "Simulation API Guide": [[135, null]], "Simulation Analysis and Enhancements for the Double Inverted Pendulum Control System ## 1\u00a0Introduction and Background The double\u2011inverted pendulum (DIP) consists of two slender rigid links mounted on a cart that can move along a horizontal rail. Each link is hinged at its base and is inherently unstable in the upright position, so even small disturbances will cause it to fall. The control objective is to keep the cart at a desired position (usually the origin) while balancing both pendulums upright. The project implements a classical sliding\u2011mode controller (SMC), a robust control strategy that forces the system state onto a user\u2011defined switching surface and maintains it there despite matched uncertainties and disturbances[1]. The controller defines a sliding surface \\sigma = \\lambda_{1}\\theta_{1} + \\lambda_{2}\\theta_{2} + k_{1}{\\dot{\\theta}}{1} + k{2}{\\dot{\\theta}}{2} where $\\theta_{1}$ and $\\theta_{2}$ are the pendulum angles and ${\\dot{\\theta}}_{1}$, ${\\dot{\\theta}}_{2}$ are their rates. When $\\sigma = 0$ the system behaves like a reduced\u2011order linear system that drives the pendulum angles and velocities to zero. As in standard SMC design the control law combines an equivalent control term (obtained by canceling the nominal dynamics) and a robust control term that forces the system to reach and stay on the sliding surface[1]: \\ u = u_{\\mathrm{eq}} - K\\mathrm{sat}\\Bigl(\\tfrac{\\sigma}{\\epsilon}\\Bigr) - k_{\\mathrm{d}}\\sigma \\ Here $sat( \\cdot )$ is a continuous approximation of the discontinuous $sign$ function. Classical SMC uses a discontinuous $\\mathrm{sign}(\\sigma)$ which produces high\u2011frequency chattering. A common remedy is to introduce a boundary layer and replace $\\mathrm{sign}(\\sigma)$ with a smooth saturation function such as the hyperbolic tangent[2]. In the provided code the saturate utility chooses between a hyperbolic tangent and a linear saturation: def saturate(sigma: float | ndarray, epsilon: float, method: str = \u201ctanh\u201d): # Continuous approximation of sign(sigma) within a boundary layer s = np.asarray(sigma, dtype=float) / epsilon if method == \u201ctanh\u201d: return np.tanh(s) elif method == \u201clinear\u201d: return np.clip(s, -1.0, 1.0) The parameter $\\epsilon > 0$ defines a boundary layer that mitigates chattering by smoothing the switching action[2]. As $\\epsilon \\rightarrow 0$ the saturation approximates the discontinuous $\\mathrm{sign}$ function, whereas increasing $\\epsilon$ yields smoother control at the expense of convergence speed[3]. The baseline controller sets $\\epsilon = 0.02$ and uses the hyperbolic tangent method, consistent with improved power reaching laws that use smooth saturation functions to reduce chattering[2]. ## 2\u00a0Simulation Framework Challenges ### 2.1\u00a0Numerical stiffness from discontinuous control Sliding\u2011mode control uses high\u2011gain feedback and discontinuous switching to force states onto the sliding surface[1]. In practice the boundary layer smooths the discontinuity, but for small $\\epsilon$ the right\u2011hand side still exhibits very steep gradients. The dynamics of the DIP combine slow cart motion with fast pendulum oscillations and fast switching in the control law. This results in stiff differential equations: the solver must resolve both slow and very fast dynamics simultaneously. Explicit fixed\u2011step integrators (such as Euler or fourth\u2011order Runge\u2013Kutta) cannot safely integrate such systems because large steps lead to oscillations or divergence, whereas very small steps yield high computational cost. Implicit stiff solvers are therefore preferred for systems with multiple time scales[4]. ### 2.2\u00a0Limitations of the fixed\u2013step simulation The original simulation loop employed a fixed time step $dt = 0.01\\,\\text{s}$ and integrated the dynamics using a hand\u2011coded RK4 method in dynamics.DoubleInvertedPendulum.step. With the baseline SMC gains the system was highly unstable for anything other than tiny initial angles. Even when the step was reduced to 0.001\u00a0s, the integration frequently diverged because the solver could not adapt to the stiff dynamics near the switching surface. Moreover, because the control law computes a model\u2011based equivalent control u_eq by inverting the inertia matrix, numerical singularities or large condition numbers can appear during integration. The controller code detects near\u2011singular matrices and returns zero to preserve stability, but the resulting abrupt change in torque further stiffens the problem. ### 2.3\u00a0Need for adaptive stiff integrators The SciPy routine solve_ivp provides a suite of adaptive methods that adjust the step size to meet prescribed error tolerances. Explicit methods like RK45 are efficient for non\u2011stiff systems, while implicit methods such as the Backward Differentiation Formula (BDF) or Radau are recommended for stiff problems. Implicit BDF methods suffer from an order barrier\u2014orders above five are unstable\u2014whereas Radau IIA schemes are A\u2011stable and L\u2011stable at arbitrary order, providing large stability regions for stiff systems[4][5]. For our system, preliminary experiments showed that RK45 took extremely small steps and failed to converge, whereas Radau handled the stiff sliding dynamics more robustly. A robust simulation loop therefore employs solve_ivp with an adaptive stiff integrator: from scipy.integrate import solve_ivp def dip_ode(t, x, controller, dyn): # x = [x, theta1, theta2, xdot, dtheta1, dtheta2] u, , _ = controller.compute_control(x, (), {}) dxdt = dyn.rhs(x, u) return dxdt sol = solve_ivp( lambda t, y: dip_ode(t, y, smc_controller, pendulum), t_span=(0.0, T), y0=x0, method=\u2019Radau\u2019, atol=1e-8, rtol=1e-6, max_step=0.01, ) The solver automatically reduces the step size near steep gradients and increases it when the dynamics slow down, yielding accurate trajectories with fewer function evaluations. ## 3\u00a0Proposed Enhancements and Methodology ### 3.1\u00a0Adaptive integrators and event handling Switching to adaptive stiff solvers addresses the numerical instability observed with fixed\u2011step methods. Event functions can be added to solve_ivp to halt integration if the pendulum angles exceed safe limits (e.g., $\\left| \\theta_{i} \\right| > \\pi/2$ ). By terminating unstable simulations early we avoid wasting computational effort and can classify initial states as failures. The integrator parameters $\\text{rtol} = 10^{- 6}$ , $\\text{atol} = 10^{- 8}$ and $\\text{max\\_step} = 0.01\\,\\text{s}$ were found to balance accuracy and speed in the stiff regime. ### 3.2\u00a0Chattering mitigation via boundary layer The discontinuous sign() function in the baseline SMC produces high\u2011frequency chatter[1]. Introducing a boundary layer smooths the switching term so that the control becomes u{robust} = - K, sat\\left( \\frac{\\sigma}{\\epsilon} \\right) - k{d}\\sigma, where $sat\\left( \\frac{\\sigma}{\\epsilon} \\right)$ is either $\\tanh(\\sigma/\\epsilon)$ or $clip(\\sigma/\\epsilon, -1,1)$. The derivative term $- k_{d}\\sigma$ further damps sliding dynamics. Choosing $\\epsilon$ too small leads to chattering; increasing $\\epsilon$ reduces chattering but slows convergence[3]. Simulation results show that $\\epsilon = 0.02$ provides a good compromise for the DIP. Adaptive boundary layers can also be implemented to widen $\\epsilon$ when $\\sigma$ is large and tighten it near the origin, as suggested in improved power\u2011reaching laws for sliding\u2011mode control[2]. ### 3.3\u00a0Filtering noisy measurements In practice sensors introduce noise that can drive the controller and cause chattering. Two complementary filters are proposed: 1. Moving average filter. A simple moving average computes the unweighted mean of the last $k$ samples. For a sequence $p_{1},p_{2},\\ldots,p_{n}$ the mean over the last $k$ samples is \u00a0 {SMA}{k} = \\frac{p{n - k + 1} + p_{n - k + 2} + \\cdots + p_{n}}{k} = \\frac{1}{k}\\sum_{i = n - k + 1}^{n}p_{i},, Smoothing filters such as the moving average reduce high\u2011frequency noise by averaging neighbouring points[6]. In functional near\u2011infrared spectroscopy data processing, the moving average filter replaces the value at each point with the average of neighbouring data points, thereby reducing high\u2011frequency fluctuations[7]. Applying an SMA to measured angles smooths high\u2011frequency noise but introduces a delay proportional to $k/2$. Choosing $k$ between 3 and 7 samples at a 100\u00a0Hz (10\u00a0ms) sampling rate offers a good compromise between smoothing and latency. 1. Kalman filter. The Kalman filter models the system in discrete state\u2013space form $x_{k + 1} = Fx_{k} + Bu_{k} + w_{k}$ and $y_{k} = Hx_{k} + v_{k}$ . It recursively performs a prediction and update step. The prediction step computes the a\u2011priori state and covariance \u00a0 {\\widehat{x}}{k|k - 1} = F{k}{\\widehat{x}}{k - 1|k - 1} + B{k}u_{k},\\quad P_{k|k - 1} = F_{k}P_{k - 1|k - 1}F_{k}^{\\mathsf{T}} + Q_{k} and the update step incorporates the measurement $z_{k}$ using the Kalman gain $K_{k}$ K_{k} = P_{k|k - 1}H_{k}^{\\mathsf{T}}S_{k}^{- 1},\\quad{\\widehat{x}}{k|k} = {\\widehat{x}}{k|k - 1} + K_{k}\\left( z_{k} - H_{k}{\\widehat{x}}{k|k - 1} \\right),\\quad P{k|k} = \\left( I - K_{k}H_{k} \\right)P_{k|k - 1}, where $S_{k} = H_{k}P_{k|k - 1}H_{k}^{\\mathsf{T}} + R_{k}$ is the innovation covariance. Under the assumption that the process and measurement noise are independent, white and Gaussian, the Kalman filter provides an optimal linear estimator[8][9]. It can be interpreted as computing the a\u2011posteriori state estimate as a linear combination of the prediction and the measurement residual, with the Kalman gain weighting how much trust is placed in the measurement[10][11]. The innovation sequence (measurement residual) is the difference between the actual measurement and its prediction and has zero mean with covariance equal to $S_{k}$[12]. The magnitude of the Kalman gain reflects the relative confidence in the model and measurements: a large gain corresponds to precise measurements and uncertain predictions, whereas a small gain arises when predictions are more reliable[11]. ### 3.4\u00a0Improved PSO cost function The particle swarm optimisation (PSO) routine tunes the six gains $\\left\\lbrack k_{1},k_{2},\\lambda_{1},\\lambda_{2},K,k_{d} \\right\\rbrack$ to minimise a cost function. PSO is a population\u2011based metaheuristic inspired by the collective behaviour of bird flocks: each particle (candidate solution) remembers its best previous position and is attracted toward the best position found by the entire swarm. Velocities are updated using cognitive and social weights with random coefficients, and positions are updated accordingly. Because the algorithm does not rely on gradients it can be applied to a wide range of optimisation problems and has spawned numerous variations[13][14]. The cost is computed from the simulated trajectory using weighted integrals: J = w_{e} \\cdot \\frac{1}{N_{e}}\\int_{0}^{T} \\parallel x(t) \\parallel^{2}dt\\mspace{6mu} + w_{u} \\cdot \\frac{1}{N_{u}}\\int_{0}^{T}u(t)^{2}dt\\mspace{6mu} + w_{\\dot{u}} \\cdot \\frac{1}{N_{\\dot{u}}}\\int_{0}^{T}\\dot{u}(t)^{2}dt\\mspace{6mu} + w_{\\sigma} \\cdot \\frac{1}{N_{\\sigma}}\\int_{0}^{T}\\sigma(t)^{2}dt\\mspace{6mu} + w_{stab} \\cdot \\frac{T - t_{fail}}{T} \\cdot P_{penalty}. The first term (state error) penalises deviations of cart position and pendulum angles from zero. The second and third terms penalise large control efforts and large control slews, reflecting actuator limitations. The fourth term penalises large sliding surface values, encouraging the system to converge quickly onto the sliding manifold. The last term applies a penalty if the simulation fails before the full duration, with the penalty proportional to how early the failure occurs. In the provided configuration the weights are $w_{e} = 50$ , $w_{u} = 0.2$ , $w_{\\dot{u}} = 0.1$ , $w_{\\sigma} = 0.1$ and the penalty constant $P_{penalty} = 1000$ . Each integral is normalised by an empirically chosen constant $N_{e},N_{u},N_{\\dot{u}},N_{\\sigma}$ to make the contributions comparable. ### 3.5\u00a0Region\u2011of\u2011attraction mapping To quantify the controller\u2019s basin of attraction we systematically sample initial conditions. For each pair of initial angles $\\theta_{1}(0),\\theta_{2}(0)$ (with zero velocities and cart position) we integrate the system until the final time or until either pendulum angle exceeds $0.5\\pi$ radians. A simulation is labelled a success if the final angles are within \u00b10.05\u00a0rad and velocities are within \u00b10.05\u00a0rad/s of zero. We visualise the results by colouring successful and unsuccessful initial conditions in the plane. Section\u00a05 presents the resulting region of attraction (RoA). ### 3.6\u00a0Monte\u00a0Carlo robustness analysis In dynamical systems theory the region of attraction (also called the domain of attraction) is the set of initial conditions whose trajectories converge to an equilibrium. For an asymptotically stable system this region is an open, invariant set containing the equilibrium; Lyapunov functions are commonly used to estimate its extent[4]. While the cost function includes a penalty for early failure, it evaluates performance only at nominal or lightly perturbed parameters. To assess robustness under uncertainty we perform a Monte\u00a0Carlo study. Monte\u00a0Carlo simulation is a universal numerical method that evaluates the behaviour of complex systems by repeatedly sampling random inputs; it is prized for its accuracy and flexibility but its chief disadvantage is the heavy computational cost due to the large number of simulations required[15]. By drawing parameter and initial condition samples from specified distributions and integrating the dynamics for each draw we approximate the probability of success and characterise the distribution of performance metrics. The standard error of Monte\u00a0Carlo estimates decreases with the square root of the number of simulations, and the results can be presented as probability distributions, reliability estimates or confidence intervals[16]. The procedure adopted here is as follows: 1. Define parameter distributions. For each physical parameter (mass, length, inertia, friction) we assume a uniform distribution within \u00b15\u00a0% of the nominal value.": [[228, null], [236, null]], "Simulation Architecture Guide": [[203, null]], "Simulation Configuration Trade-offs": [[158, "simulation-configuration-trade-offs"]], "Simulation Context": [[135, "simulation-context"], [203, "simulation-context"]], "Simulation Duration and Timestep": [[170, "simulation-duration-and-timestep"]], "Simulation Duration vs Settling Detection": [[158, "simulation-duration-vs-settling-detection"]], "Simulation Engine": [[30, "simulation-engine"], [52, "simulation-engine"], [52, null]], "Simulation Engine API Reference Project: Double-Inverted Pendulum SMC Control System": [[61, null]], "Simulation Execution": [[265, "simulation-execution"]], "Simulation Fails to Start": [[170, "simulation-fails-to-start"]], "Simulation Result Validation Methodology Document Status: Phase 3.3 Completion - Monte Carlo and Statistical Testing Framework": [[310, null]], "Simulation Runner": [[203, "simulation-runner"]], "Simulation Tests": [[126, "simulation-tests"]], "Simulation Validation Guide > Note: Simulation validation is covered in multiple guides. ## Quick Links - Validation Examples - Practical validation patterns": [[311, null]], "SimulationContext": [[216, "simulationcontext"]], "SimulationContext Class": [[135, "simulationcontext-class"], [203, "simulationcontext-class"]], "SimulationRunner": [[135, "simulationrunner"]], "Single Command for Full Test Suite": [[34, "single-command-for-full-test-suite"]], "Sliding Mode Control": [[156, "sliding-mode-control"], [289, "sliding-mode-control"]], "Sliding Mode Control Equations": [[288, "sliding-mode-control-equations"]], "Sliding Mode Control Mathematical Validation ### 1.1 Classical SMC Theoretical Foundation #### System Model": [[191, "sliding-mode-control-mathematical-validation-1-1-classical-smc-theoretical-foundation-system-model"]], "Sliding Mode Control Notation": [[258, "sliding-mode-control-notation"]], "Sliding Mode Control Theory": [[69, "sliding-mode-control-theory"], [160, "sliding-mode-control-theory"], [160, "id1"], [163, null], [256, "sliding-mode-control-theory"]], "Sliding Mode Control for a Double\u2011Inverted Pendulum: Bridging Theory and Implementation": [[226, null], [239, null]], "Sliding Mode Fundamentals": [[163, "sliding-mode-fundamentals"]], "Sliding Surface Design": [[258, "sliding-surface-design"], [288, "sliding-surface-design"]], "Sliding Surface Exponential Stability": [[125, "sliding-surface-exponential-stability"]], "Sliding Surface Mathematical Properties and Stability Analysis": [[204, null]], "Sliding Surface Monitoring": [[261, "sliding-surface-monitoring"]], "Small Angle Approximation": [[161, "small-angle-approximation"], [198, "small-angle-approximation"]], "Smart Exclusions": [[145, "smart-exclusions"]], "Smoke Tests": [[124, "smoke-tests"]], "Software & Tools": [[69, "software-tools"]], "Software Dependencies & Citations Project: Double Inverted Pendulum - Sliding Mode Control with PSO Optimization": [[8, null]], "Software Design Patterns & Architecture Attribution Project: Double Inverted Pendulum - Sliding Mode Control with PSO Optimization": [[17, null]], "Software and Implementation": [[256, "software-and-implementation"]], "Solution": [[25, "solution"], [25, "id2"], [33, "solution"], [33, "id2"], [33, "id5"], [33, "id8"], [33, "id11"], [33, "id14"], [33, "id17"], [143, "solution"]], "Solution Applied": [[24, "solution-applied"]], "Solution Implemented": [[24, "solution-implemented"], [24, "id3"]], "Solutions": [[144, "solutions"], [144, "id5"], [144, "id9"], [144, "id16"], [144, "id20"], [144, "id24"], [144, "id28"], [144, "id32"], [144, "id36"]], "Source Files": [[142, "source-files"]], "Space Complexity": [[299, "space-complexity"]], "Special Functions": [[289, "special-functions"]], "Specific Test Categories": [[124, "specific-test-categories"]], "Specific Test Implementation Requirements": [[37, "specific-test-implementation-requirements"]], "Sphinx Build Output": [[27, "sphinx-build-output"]], "Sphinx Build Test": [[29, "sphinx-build-test"]], "Sphinx Build Verification": [[30, "sphinx-build-verification"]], "Sphinx Documentation - 100% Warning Elimination Complete": [[24, null]], "Sphinx Documentation Implementation Package ## \ud83d\udcc1 Package Contents for ChatGPT Review This package contains the complete implementation of production-grade Sphinx documentation with GitHub CI/CD based on expert recommendations. ### \ud83d\ude80 Core Implementation Files #### GitHub Workflows (Enhanced CI/CD)": [[16, null]], "Sphinx Documentation Phase 8 - Final Summary": [[32, null]], "Sphinx Documentation Phase 9 - Final Progress Report": [[33, null]], "Sphinx Extensions (10+ packages) sphinxcontrib-bibtex (\u22652.5.0):": [[8, "sphinx-extensions-10-packages-sphinxcontrib-bibtex-2-5-0"]], "Sphinx Phase 10 Completion Report": [[25, null]], "Sphinx Phase 11 Completion Report": [[26, null]], "Sphinx RTD Theme": [[8, "sphinx-rtd-theme"]], "Sphinx Version Configuration": [[315, "sphinx-version-configuration"]], "Sphinx conf.py Updates": [[28, "sphinx-conf-py-updates"]], "Sponsorship": [[270, "sponsorship"]], "Stability": [[200, "stability"]], "Stability Analysis": [[200, "stability-analysis"], [200, "id2"]], "Stability Analysis Framework ### Universal Lyapunov Analysis For all SMC variants, we use a unified Lyapunov framework: General Lyapunov Function:": [[279, "stability-analysis-framework-universal-lyapunov-analysis-for-all-smc-variants-we-use-a-unified-lyapunov-framework-general-lyapunov-function"]], "Stability Conditions": [[183, "stability-conditions"]], "Stability Constraints": [[201, "stability-constraints"], [290, "stability-constraints"]], "Stability Proof": [[163, "stability-proof"]], "Stability Regions": [[200, "stability-regions"]], "Stability Theory": [[69, "stability-theory"]], "Stability Theory (6 entries) Classical:": [[123, "stability-theory-6-entries-classical"]], "Stability Verification": [[183, "stability-verification"]], "Stagnation and Premature Convergence": [[162, "stagnation-and-premature-convergence"]], "Standard Test Scenarios The system has been evaluated against established control benchmarks: 1. Step Response Tests - Initial angle disturbances: \u00b110\u00b0, \u00b120\u00b0, \u00b130\u00b0 - Cart position references: \u00b10.5m, \u00b11.0m - Combined disturbances with parameter uncertainties 2. Tracking Performance - Sinusoidal references at multiple frequencies - Square wave tracking with varying amplitudes - Chirp signals for frequency response analysis 3. Robustness Studies - Mass parameter variations: \u00b150% - Length uncertainties: \u00b130% - Friction coefficient changes: \u00b1100% - External disturbance rejection ### Optimization Convergence ```{mermaid}": [[259, "standard-test-scenarios-the-system-has-been-evaluated-against-established-control-benchmarks-1-step-response-tests-initial-angle-disturbances-10-20-30-cart-position-references-0-5m-1-0m-combined-disturbances-with-parameter-uncertainties-2-tracking-performance-sinusoidal-references-at-multiple-frequencies-square-wave-tracking-with-varying-amplitudes-chirp-signals-for-frequency-response-analysis-3-robustness-studies-mass-parameter-variations-50-length-uncertainties-30-friction-coefficient-changes-100-external-disturbance-rejection-optimization-convergence-mermaid"]], "State Persistence": [[145, "state-persistence"]], "State Representation": [[135, "state-representation"]], "State Space Representation": [[134, "state-space-representation"], [289, "state-space-representation"]], "State Validation": [[136, "state-validation"]], "State Variables": [[161, "state-variables"], [258, "state-variables"]], "State Vector": [[220, "state-vector"]], "State Vector $$\\mathbf{q} = \\begin{bmatrix} x & \\theta_1 & \\theta_2 & \\dot{x} & \\dot{\\theta}_1 & \\dot{\\theta}_2 \\end{bmatrix}^T": [[219, "state-vector-mathbf-q-begin-bmatrix-x-theta-1-theta-2-dot-x-dot-theta-1-dot-theta-2-end-bmatrix-t"]], "State-Space Representation": [[288, "state-space-representation"]], "Static Analysis": [[41, "static-analysis"]], "Static Hosting (GitHub Pages, Netlify, etc.)": [[141, "static-hosting-github-pages-netlify-etc"]], "Statistical Analysis": [[136, "statistical-analysis"], [149, "statistical-analysis"]], "Statistical Analysis Methodology ### Data Collection Simulation Parameters:": [[120, "statistical-analysis-methodology-data-collection-simulation-parameters"]], "Statistical Reference Tables > Coming Soon: statistical reference tables for validation. ## Current Resources For statistical validation, see: - Statistical Tests - Statistical test implementations": [[312, null]], "Statistics": [[24, "statistics"]], "Stats": [[270, "stats"]], "Step 1: Baseline Performance": [[183, "step-1-baseline-performance"]], "Step 1: Choose a Component": [[269, "step-1-choose-a-component"]], "Step 1: Clone Repository": [[124, "step-1-clone-repository"]], "Step 1: Configuration Verification": [[177, "step-1-configuration-verification"]], "Step 1: Copy Files": [[141, "step-1-copy-files"]], "Step 1: Locate Theorem": [[125, "step-1-locate-theorem"]], "Step 1: Select Controller Type": [[158, "step-1-select-controller-type"]], "Step 1: Validate": [[21, "step-1-validate"]], "Step 2:": [[141, "step-2"]], "Step 2: Check Citations": [[125, "step-2-check-citations"]], "Step 2: Check Results": [[21, "step-2-check-results"]], "Step 2: Configure Gains": [[158, "step-2-configure-gains"]], "Step 2: Copy Component Files": [[269, "step-2-copy-component-files"]], "Step 2: Create Virtual Environment": [[124, "step-2-create-virtual-environment"]], "Step 2: Run Basic HIL Simulation": [[177, "step-2-run-basic-hil-simulation"]], "Step 2: Run PSO Optimization": [[183, "step-2-run-pso-optimization"]], "Step 3:": [[141, "step-3"]], "Step 3: Analyze HIL Results": [[177, "step-3-analyze-hil-results"]], "Step 3: Configure PSO (if optimizing)": [[158, "step-3-configure-pso-if-optimizing"]], "Step 3: Install Dependencies": [[124, "step-3-install-dependencies"]], "Step 3: Install Dependencies (if needed)": [[269, "step-3-install-dependencies-if-needed"]], "Step 3: Validate Optimized Gains": [[183, "step-3-validate-optimized-gains"]], "Step 3: Verify Implementation": [[125, "step-3-verify-implementation"]], "Step 3A: If ALL PASS": [[21, "step-3a-if-all-pass"]], "Step 3B: If ANY FAIL": [[21, "step-3b-if-any-fail"]], "Step 4: Configure Simulation": [[158, "step-4-configure-simulation"]], "Step 4: Import and Use": [[269, "step-4-import-and-use"]], "Step 4: Network Performance Analysis": [[177, "step-4-network-performance-analysis"]], "Step 4: Performance Comparison": [[183, "step-4-performance-comparison"]], "Step 4: Review Tests": [[125, "step-4-review-tests"]], "Step 4: Verify": [[141, "step-4-verify"]], "Step-by-Step Optimization Workflow": [[183, "step-by-step-optimization-workflow"]], "Step-by-Step SMC Design": [[163, "step-by-step-smc-design"]], "Still Having Issues?": [[144, "still-having-issues"]], "Strategic Deployment Recommendations ### \u2705 IMMEDIATE DEPLOYMENT APPROVED #### Deployment Conditions": [[218, "strategic-deployment-recommendations-immediate-deployment-approved-deployment-conditions"]], "Strategic Pivot: WebXR \u2192 PWA": [[31, "strategic-pivot-webxr-pwa"]], "Streamlit Best Practices": [[170, "streamlit-best-practices"]], "Streamlit Dashboard User Guide": [[265, null]], "Streamlit Deployment Guide": [[90, null]], "Structure of the report": [[226, "structure-of-the-report"], [239, "structure-of-the-report"]], "Styling & UI": [[29, "styling-ui"]], "Styling and Customization": [[159, "styling-and-customization"]], "Success Criteria": [[21, "success-criteria"], [28, "success-criteria"]], "Success Criteria ### Minimum Acceptance Criteria | Criterion | Target | Validation Method |": [[58, "success-criteria-minimum-acceptance-criteria-criterion-target-validation-method"]], "Success Criteria Achievement ### Phase 4.2 Success Criteria (100% Met) | Criterion | Target | Achieved | Evidence |": [[56, "success-criteria-achievement-phase-4-2-success-criteria-100-met-criterion-target-achieved-evidence"]], "Success Criteria Achievement | Criterion | Target | Achieved | Status |": [[14, "success-criteria-achievement-criterion-target-achieved-status"]], "Success Criteria Met": [[138, "success-criteria-met"]], "Success Criteria Validation ### Minimum Acceptance Criteria | Criterion | Target | Achieved | Status |": [[57, "success-criteria-validation-minimum-acceptance-criteria-criterion-target-achieved-status"]], "Success Criteria Validation ### Phase 3.2 Requirements (from prompt) | Requirement | Status | Notes |": [[67, "success-criteria-validation-phase-3-2-requirements-from-prompt-requirement-status-notes"]], "Success Metrics": [[12, "success-metrics"], [24, "success-metrics"], [27, "success-metrics"]], "Success Summary": [[25, "success-summary"], [26, "success-summary"]], "Successful Validation (Valid Fixture)": [[5, "successful-validation-valid-fixture"]], "Summary": [[126, "summary"], [156, "summary"], [161, "summary"], [162, "summary"], [163, "summary"], [198, "summary"], [200, "summary"], [201, "summary"], [299, "summary"]], "Summary ### Key Takeaways \u2705 PSO is the default optimizer for SMC gain tuning (fast, reliable)": [[215, "summary-key-takeaways-pso-is-the-default-optimizer-for-smc-gain-tuning-fast-reliable"]], "Summary Complete Research Workflow: 1. Formulation: Define question, hypotheses, success criteria": [[169, "summary-complete-research-workflow-1-formulation-define-question-hypotheses-success-criteria"]], "Summary Table": [[43, "summary-table"]], "Summary and Best Practices ### Workflow Best Practices \u2705 Essential Guidelines: 1. Validation - Validate configuration before optimization - Real-time constraint monitoring during execution - Post-optimization result verification - Issue #2 compliance checking throughout 2. Robust Error Handling - Classify errors by severity and recovery strategy - Implement automatic recovery mechanisms - Provide detailed error diagnostics - graceful degradation 3. Performance Optimization - Monitor resource utilization continuously - Apply adaptive optimization strategies - Benchmark against established baselines - Optimize for both speed and quality 4. Quality Assurance - Implement automated quality gates - Enforce acceptance criteria at each phase - Maintain audit trails for reproducibility - Regular regression testing ### Common Workflow Pitfalls \u274c Critical Issues to Avoid: 1. Insufficient Validation - Skipping pre-optimization validation - Missing real-time constraint checking - Inadequate result verification 2. Poor Error Handling - Failing silently on constraint violations - No recovery mechanisms for common failures - Insufficient error diagnostics 3. Performance Degradation - No monitoring of resource usage - Missing convergence quality checks - Inadequate optimization termination criteria ### Deployment Checklist \ud83d\udccb Workflow Deployment Validation: - [ ] Configuration validation framework tested": [[252, "summary-and-best-practices-workflow-best-practices-essential-guidelines-1-validation-validate-configuration-before-optimization-real-time-constraint-monitoring-during-execution-post-optimization-result-verification-issue-2-compliance-checking-throughout-2-robust-error-handling-classify-errors-by-severity-and-recovery-strategy-implement-automatic-recovery-mechanisms-provide-detailed-error-diagnostics-graceful-degradation-3-performance-optimization-monitor-resource-utilization-continuously-apply-adaptive-optimization-strategies-benchmark-against-established-baselines-optimize-for-both-speed-and-quality-4-quality-assurance-implement-automated-quality-gates-enforce-acceptance-criteria-at-each-phase-maintain-audit-trails-for-reproducibility-regular-regression-testing-common-workflow-pitfalls-critical-issues-to-avoid-1-insufficient-validation-skipping-pre-optimization-validation-missing-real-time-constraint-checking-inadequate-result-verification-2-poor-error-handling-failing-silently-on-constraint-violations-no-recovery-mechanisms-for-common-failures-insufficient-error-diagnostics-3-performance-degradation-no-monitoring-of-resource-usage-missing-convergence-quality-checks-inadequate-optimization-termination-criteria-deployment-checklist-workflow-deployment-validation-configuration-validation-framework-tested"]], "Summary and Recommendations ### Configuration Validation Summary Schema Coverage: \u2705 100% of configurable parameters validated": [[73, "summary-and-recommendations-configuration-validation-summary-schema-coverage-100-of-configurable-parameters-validated"]], "Super-Twisting Algorithm": [[183, "super-twisting-algorithm"], [258, "super-twisting-algorithm"]], "Super-Twisting Algorithm (STA)": [[163, "super-twisting-algorithm-sta"]], "Super-Twisting Finite-Time Convergence": [[125, "super-twisting-finite-time-convergence"]], "Super-Twisting Mathematics": [[163, "super-twisting-mathematics"]], "Super-Twisting SMC (6 Parameters)": [[201, "super-twisting-smc-6-parameters"]], "Super-Twisting SMC (Chattering Reduction)": [[156, "super-twisting-smc-chattering-reduction"]], "Super-Twisting SMC Configuration ### Schema Definition ```python": [[273, "super-twisting-smc-configuration-schema-definition-python"]], "Super-Twisting SMC Theory ### Second-Order Sliding Mode Concept Super-Twisting SMC achieves finite-time convergence by utilizing second-order sliding mode dynamics:": [[279, "super-twisting-smc-theory-second-order-sliding-mode-concept-super-twisting-smc-achieves-finite-time-convergence-by-utilizing-second-order-sliding-mode-dynamics"]], "Super-Twisting Sliding Mode Control Technical Guide": [[85, null]], "Super\u2011Twisting SMC": [[226, "supertwisting-smc"], [239, "supertwisting-smc"]], "Super\u2011twisting with adaptive gains": [[226, "supertwisting-with-adaptive-gains"], [239, "supertwisting-with-adaptive-gains"]], "Support Channels": [[141, "support-channels"]], "Support Contacts": [[142, "support-contacts"]], "Support and Contact Issues or Questions:": [[121, "support-and-contact-issues-or-questions"]], "Supported Metrics": [[159, "supported-metrics"]], "Supported SMC Types": [[20, "supported-smc-types"]], "Sustainability": [[138, "sustainability"]], "Swarm Intelligence Principles": [[162, "swarm-intelligence-principles"]], "Swarm Size": [[162, "swarm-size"]], "Swing-Up SMC Technical Guide": [[86, null]], "SymPy": [[8, "sympy"]], "Symbols & Units": [[272, null]], "Symptoms": [[144, "symptoms"], [144, "id3"], [144, "id7"], [144, "id11"], [144, "id14"], [144, "id18"], [144, "id22"], [144, "id26"], [144, "id30"], [144, "id34"]], "System Analysis & Methodology": [[42, "system-analysis-methodology"]], "System Architecture Control Room": [[64, null]], "System Architecture Overview ### Multi-Domain Integration Framework The controller factory operates at the center of a multi-domain integration ecosystem: ```mermaid": [[278, "system-architecture-overview-multi-domain-integration-framework-the-controller-factory-operates-at-the-center-of-a-multi-domain-integration-ecosystem-mermaid"]], "System Architecture Validation ### Core System Health: 100% OPERATIONAL \u2705 | Component | Status | Health Score | Critical Assessment |": [[218, "system-architecture-validation-core-system-health-100-operational-component-status-health-score-critical-assessment"]], "System Components": [[64, "system-components"]], "System Constants": [[258, "system-constants"]], "System Design": [[143, "system-design"]], "System Diagrams This section provides visual representations of the double-inverted pendulum system, including physical structure, coordinate systems, and signal flow diagrams. ## Physical System Architecture ### Double-Inverted Pendulum Structure ```{mermaid}": [[317, null]], "System Dynamics & Numerical Methods": [[199, "system-dynamics-numerical-methods"]], "System Dynamics Equations": [[288, "system-dynamics-equations"]], "System Dynamics Matrices": [[258, "system-dynamics-matrices"]], "System Overview": [[134, "system-overview"], [161, "system-overview"]], "System Parameters": [[289, "table-system-parameters"]], "System Requirements": [[124, "system-requirements"], [153, "system-requirements"], [155, "system-requirements"]], "System Resources": [[245, "system-resources"]], "System Status": [[64, "system-status"]], "Systematic Computation": [[198, "systematic-computation"]], "Table of Contents": [[77, "table-of-contents"], [84, "table-of-contents"], [85, "table-of-contents"], [91, "table-of-contents"], [131, "table-of-contents"], [132, "table-of-contents"], [133, "table-of-contents"], [134, "table-of-contents"], [135, "table-of-contents"], [136, "table-of-contents"], [149, "table-of-contents"], [161, "table-of-contents"], [162, "table-of-contents"], [163, "table-of-contents"], [170, "table-of-contents"], [197, "table-of-contents"], [198, "table-of-contents"], [200, "table-of-contents"], [201, "table-of-contents"], [203, "table-of-contents"], [216, "table-of-contents"], [220, "table-of-contents"], [245, "table-of-contents"], [261, "table-of-contents"], [299, "table-of-contents"], [320, "table-of-contents"]], "Table of Contents - CLI Usage": [[150, "table-of-contents-cli-usage"]], "Table of Contents - Overview": [[35, "table-of-contents-overview"]], "Table of Contents - PSO Parameter Tuning": [[148, "table-of-contents-pso-parameter-tuning"]], "Table of Contents - Running Tests": [[151, "table-of-contents-running-tests"]], "Table of Contents 1. Basic Usage Examples": [[276, "table-of-contents-1-basic-usage-examples"]], "Table of Contents 1. Benchmark Methodology": [[65, "table-of-contents-1-benchmark-methodology"]], "Table of Contents 1. Configuration Architecture Overview": [[73, "table-of-contents-1-configuration-architecture-overview"]], "Table of Contents 1. Core Scientific Computing": [[8, "table-of-contents-1-core-scientific-computing"]], "Table of Contents 1. Deployment Architecture Overview": [[93, "table-of-contents-1-deployment-architecture-overview"]], "Table of Contents 1. Design Patterns (Gang of Four)": [[17, "table-of-contents-1-design-patterns-gang-of-four"]], "Table of Contents 1. Example 1: Monte Carlo Validation of Controller Stability": [[313, "table-of-contents-1-example-1-monte-carlo-validation-of-controller-stability"]], "Table of Contents 1. Executive Summary": [[275, "table-of-contents-1-executive-summary"]], "Table of Contents 1. Introduction": [[193, "table-of-contents-1-introduction"], [208, "table-of-contents-1-introduction"], [297, "table-of-contents-1-introduction"]], "Table of Contents 1. Introduction and Fundamentals": [[205, "table-of-contents-1-introduction-and-fundamentals"]], "Table of Contents 1. Mathematical Foundation": [[78, "table-of-contents-1-mathematical-foundation"], [81, "table-of-contents-1-mathematical-foundation"], [86, "table-of-contents-1-mathematical-foundation"]], "Table of Contents 1. Monte Carlo Simulation Methodology": [[310, "table-of-contents-1-monte-carlo-simulation-methodology"]], "Table of Contents 1. Overview": [[79, "table-of-contents-1-overview"], [80, "table-of-contents-1-overview"], [120, "table-of-contents-1-overview"], [298, "table-of-contents-1-overview"]], "Table of Contents 1. Overview & Architecture": [[61, "table-of-contents-1-overview-architecture"]], "Table of Contents 1. Overview & Architecture - 1.1 Optimization System Architecture - 1.2 PSO Workflow - 1.3 Module Relationships": [[53, "table-of-contents-1-overview-architecture-1-1-optimization-system-architecture-1-2-pso-workflow-1-3-module-relationships"]], "Table of Contents 1. PSO Integration Overview": [[280, "table-of-contents-1-pso-integration-overview"]], "Table of Contents 1. Problem Analysis": [[300, "table-of-contents-1-problem-analysis"]], "Table of Contents 1. Project License": [[15, "table-of-contents-1-project-license"]], "Table of Contents 1. Quick Start Workflows": [[321, "table-of-contents-1-quick-start-workflows"]], "Table of Contents 1. Schema Overview": [[273, "table-of-contents-1-schema-overview"]], "Table of Contents 1. Sliding Mode Control Mathematical Validation": [[191, "table-of-contents-1-sliding-mode-control-mathematical-validation"]], "Table of Contents 1. Sliding Mode Control Theory": [[3, "table-of-contents-1-sliding-mode-control-theory"]], "Table of Contents 1. Test Infrastructure Overview": [[283, "table-of-contents-1-test-infrastructure-overview"]], "Table of Contents ```{contents}": [[202, "table-of-contents-contents"], [215, "table-of-contents-contents"]], "Task 3.2: P3 Class Documentation (15h) Target: 30 P3 classes Config Schemas (20 classes, 10h):": [[10, "task-3-2-p3-class-documentation-15h-target-30-p3-classes-config-schemas-20-classes-10h"]], "Task 4.2: P3 Method Documentation (3h) Target: 45 P3 utility methods Categories:": [[10, "task-4-2-p3-method-documentation-3h-target-45-p3-utility-methods-categories"]], "Task 4.3: Automation and Quality Gates (2h) Pre-commit Hooks:": [[10, "task-4-3-automation-and-quality-gates-2h-pre-commit-hooks"]], "Teaching Applications": [[265, "teaching-applications"]], "Technical Achievement Summary ### Mathematical Validation Completeness | Algorithm Category | Proof Status | Implementation Status | Validation Status |": [[243, "technical-achievement-summary-mathematical-validation-completeness-algorithm-category-proof-status-implementation-status-validation-status"]], "Technical Analysis ### Error Manifestation Primary Error Message:": [[301, "technical-analysis-error-manifestation-primary-error-message"]], "Technical Approach for Each Controller": [[37, "technical-approach-for-each-controller"]], "Technical Architecture": [[30, "technical-architecture"], [31, "technical-architecture"]], "Technical Coverage Analysis & Implementation Guide": [[37, null]], "Technical Coverage Metrics Summary": [[37, "technical-coverage-metrics-summary"]], "Technical Debt": [[32, "technical-debt"]], "Technical Debt Eliminated \u2705": [[24, "technical-debt-eliminated"]], "Technical Details": [[20, "technical-details"], [139, "technical-details"], [152, "technical-details"], [153, "technical-details"], [154, "technical-details"], [155, "technical-details"]], "Technical Documentation": [[137, "technical-documentation"], [277, null]], "Technical Features": [[156, "technical-features"]], "Technical Guides": [[219, "technical-guides"]], "Technical Guides ```{toctree}": [[217, "technical-guides-toctree"]], "Technical Improvements": [[26, "technical-improvements"]], "Technical Reference - Collapsible Code Blocks": [[143, null]], "Technical Solutions Summary": [[24, "technical-solutions-summary"]], "Technical Specifications": [[27, "technical-specifications"], [28, "technical-specifications"]], "Template 1: Fast Simulation (Prototyping)": [[158, "template-1-fast-simulation-prototyping"]], "Template 2: High Accuracy (Validation)": [[158, "template-2-high-accuracy-validation"]], "Template 3: Production (HIL)": [[158, "template-3-production-hil"]], "Test 1: Classical SMC Simulation": [[124, "test-1-classical-smc-simulation"]], "Test 2: PSO optimization with fixed controller": [[300, "test-2-pso-optimization-with-fixed-controller"]], "Test 2: Plot Generation": [[124, "test-2-plot-generation"]], "Test 3: Run Test Suite": [[124, "test-3-run-test-suite"]], "Test Architecture": [[34, "test-architecture"]], "Test Case 1: Full-Featured Theorem": [[299, "test-case-1-full-featured-theorem"]], "Test Case 2: Minimal Lemma": [[299, "test-case-2-minimal-lemma"]], "Test Case 3: Corollary with Proof (No Citation)": [[299, "test-case-3-corollary-with-proof-no-citation"]], "Test Case 4: False Positive Detection": [[299, "test-case-4-false-positive-detection"]], "Test Categories": [[34, "test-categories"]], "Test Coverage": [[20, "test-coverage"], [125, "test-coverage"], [125, "id4"], [125, "id9"], [125, "id12"]], "Test Environment Configuration ### Matplotlib Configuration The test environment enforces headless operation to prevent display issues in CI/CD: ```python": [[283, "test-environment-configuration-matplotlib-configuration-the-test-environment-enforces-headless-operation-to-prevent-display-issues-in-ci-cd-python"]], "Test Execution Guide": [[281, null], [282, null]], "Test Execution Procedures ### Quick Development Testing For rapid feedback during development: ```bash": [[283, "test-execution-procedures-quick-development-testing-for-rapid-feedback-during-development-bash"]], "Test Infrastructure Architecture Analysis ### Test Suite Statistics | Metric | Value | Assessment | Target | Status |": [[284, "test-infrastructure-architecture-analysis-test-suite-statistics-metric-value-assessment-target-status"]], "Test Infrastructure Documentation": [[283, null]], "Test Infrastructure Overview The double-inverted pendulum sliding mode control project employs a sophisticated test infrastructure designed to validate complex control systems, optimization algorithms, and numerical stability. The test suite covers: - Control Theory Validation: SMC variants, stability analysis, Lyapunov functions": [[283, "test-infrastructure-overview-the-double-inverted-pendulum-sliding-mode-control-project-employs-a-sophisticated-test-infrastructure-designed-to-validate-complex-control-systems-optimization-algorithms-and-numerical-stability-the-test-suite-covers-control-theory-validation-smc-variants-stability-analysis-lyapunov-functions"]], "Test Infrastructure Validation Report": [[284, null]], "Test Matrix": [[285, "test-matrix"]], "Test Protocols": [[285, null]], "Test Reporting and Analysis ### Coverage Reports #### HTML Coverage Report": [[282, "test-reporting-and-analysis-coverage-reports-html-coverage-report"]], "Test Results ### pytest Validation Suite ```bash": [[7, "test-results-pytest-validation-suite-bash"]], "Test Structure Template": [[261, "test-structure-template"]], "Test Suite": [[41, "test-suite"], [124, "test-suite"], [126, "test-suite"]], "Test Suite Verification (30 minutes)": [[124, "test-suite-verification-30-minutes"]], "Test Troubleshooting Guide ### Common Issues and approaches #### 1. Matplotlib Backend Errors Symptoms:": [[282, "test-troubleshooting-guide-common-issues-and-approaches-1-matplotlib-backend-errors-symptoms"]], "Test algorithm convergence properties": [[282, "test-algorithm-convergence-properties"]], "Test each controller individually": [[321, "test-each-controller-individually"]], "Test optimized controller": [[182, "test-optimized-controller"]], "Test optimized terminal SMC": [[168, "test-optimized-terminal-smc"]], "Test terminal SMC with default configuration": [[168, "test-terminal-smc-with-default-configuration"]], "Test with physics uncertainty and sensor noise": [[68, "test-with-physics-uncertainty-and-sensor-noise"]], "Tested Themes": [[141, "tested-themes"]], "Testing": [[322, null]], "Testing & Validation": [[29, "testing-validation"]], "Testing & Validation Plan ### Unit Tests Required (Phase 6.2) #### Factory Core Functions": [[56, "testing-validation-plan-unit-tests-required-phase-6-2-factory-core-functions"]], "Testing & Validation Standards": [[95, "testing-validation-standards"]], "Testing Changes": [[142, "testing-changes"]], "Testing Documentation": [[137, "testing-documentation"], [138, "testing-documentation"]], "Testing Framework ### pytest": [[8, "testing-framework-pytest"]], "Testing Guide": [[34, null]], "Testing Infrastructure Enhancements": [[37, "testing-infrastructure-enhancements"]], "Testing Status": [[28, "testing-status"]], "Testing Verification": [[27, "testing-verification"]], "Testing Version Switching": [[315, "testing-version-switching"]], "Testing Workflows": [[322, "testing-workflows"]], "Testing Your Integration": [[141, "testing-your-integration"]], "Testing and Benchmarks": [[186, null]], "Testing and Validation": [[20, "testing-and-validation"]], "Testing and Validation Documentation ## Overview This document provides testing and validation strategies for the SMC Controller Factory system. The testing framework ensures robust operation, factory integration quality, and performance validation to support the GitHub Issue #6 resolution with 95%+ test coverage and enterprise-grade quality assurance. ## Testing Architecture ### Multi-Level Testing Strategy ```": [[114, null]], "Tests Pass Locally but Fail in CI": [[34, "tests-pass-locally-but-fail-in-ci"]], "Text & Typography (\u2b50 Essential)": [[267, "text-typography-essential"]], "Text Components": [[267, "text-components"]], "The 3 Golden Rules": [[211, "the-3-golden-rules"]], "The Critical Runtime Error ### Error Description": [[40, "the-critical-runtime-error-error-description"]], "The PSO Algorithm": [[162, "the-pso-algorithm"]], "The Sliding Surface": [[163, "the-sliding-surface"]], "Theme Customization": [[90, "theme-customization"]], "Theorem 1: Finite-Time Convergence": [[288, "theorem-1-finite-time-convergence"]], "Theorem 2: Asymptotic Stability on Sliding Surface": [[288, "theorem-2-asymptotic-stability-on-sliding-surface"]], "Theorem 3: Adaptive Parameter Convergence": [[288, "theorem-3-adaptive-parameter-convergence"]], "Theorem Location (Documentation)": [[125, "theorem-location-documentation"], [125, "id2"], [125, "id7"]], "Theorem Spot-Checks (verify 3 of 11)": [[126, "theorem-spot-checks-verify-3-of-11"]], "Theorem Statement": [[125, "theorem-statement"]], "Theorem Verification Guide": [[125, null]], "Theorem with Citations ```markdown": [[123, "theorem-with-citations-markdown"]], "Theoretical Foundation of Boundary Layer Approximation": [[195, "theoretical-foundation-of-boundary-layer-approximation"]], "Theoretical Foundations ```{toctree}": [[286, null]], "Theory & Background": [[127, "theory-background"], [127, null]], "Theory & Explanation": [[160, null]], "Theory Documentation Cross-Reference Map ### Phase 2 Theory Documents Available | Document | Location | Status | Controllers |": [[55, "theory-documentation-cross-reference-map-phase-2-theory-documents-available-document-location-status-controllers"]], "Theory Guides": [[12, "theory-guides"]], "Theory Overview": [[296, null]], "Theory and formulation": [[226, "theory-and-formulation"], [239, "theory-and-formulation"]], "Theory with Visualization": [[153, "theory-with-visualization"]], "Thread Safety Issues ### Issue 1: Factory Lock Timeouts #### Symptoms": [[117, "thread-safety-issues-issue-1-factory-lock-timeouts-symptoms"]], "Thread safety and concurrent operations validation": [[107, "thread-safety-and-concurrent-operations-validation"]], "Three-Layer Safety Architecture": [[261, "three-layer-safety-architecture"]], "Three-Parameter Sweep - Settling Time": [[156, "three-parameter-sweep-settling-time"]], "Three.js Components (3D effects)": [[271, "three-js-components-3d-effects"]], "Tier 1: Critical Safety Components (100% Coverage MANDATORY)": [[261, "tier-1-critical-safety-components-100-coverage-mandatory"]], "Tier 2: High-Priority Safety Components (\u226595% Coverage)": [[261, "tier-2-high-priority-safety-components-95-coverage"]], "Tikhonov Regularization (Ridge Regression)": [[290, "tikhonov-regularization-ridge-regression"]], "Time Complexity": [[299, "time-complexity"]], "Time Step vs Accuracy": [[158, "time-step-vs-accuracy"]], "Timestep Selection Guidelines": [[200, "timestep-selection-guidelines"]], "Tip 1:": [[145, "tip-1"]], "Tip 2:": [[145, "tip-2"]], "Tip 3:": [[145, "tip-3"]], "Tip 4:": [[145, "tip-4"]], "Tips & Tricks": [[145, "tips-tricks"]], "To Collapse a Code Block": [[145, "to-collapse-a-code-block"]], "To Expand a Code Block": [[145, "to-expand-a-code-block"]], "Token-Aware Backup": [[70, "token-aware-backup"]], "Top 10 Most-Cited Papers ### 1. Utkin et al. (2009) - Sliding Mode Control": [[123, "top-10-most-cited-papers-1-utkin-et-al-2009-sliding-mode-control"]], "Top 10 Priority Gaps ### \ud83d\udea8 P0 - CRITICAL (Blocking Users) 1. Examples & Code Samples Critically Insufficient - Gap: Only 2 example files vs. required minimum 15 - Impact: Users cannot learn through examples; tutorial effectiveness reduced by 60% - Category: Examples & Code Samples - Recommendation: Create 15 executable examples + 10 Jupyter notebooks - Effort: 70 hours - Expected Impact: Onboarding time \u219350%; Tutorial completion rate 30%\u219270% 2. API Reference Has Many Stub Files - Gap: 20+ stub files (< 500 bytes) with no content; autosummary disabled - Impact: Developers cannot understand API contracts; integration failures likely - Category: API Reference Documentation - Recommendation: Re-sphinx.ext.autosummary; auto-generate from docstrings - Effort: 8 hours - Expected Impact: API coverage 75%\u219295%; Maintenance burden \u219360%": [[11, "top-10-priority-gaps-p0-critical-blocking-users-1-examples-code-samples-critically-insufficient-gap-only-2-example-files-vs-required-minimum-15-impact-users-cannot-learn-through-examples-tutorial-effectiveness-reduced-by-60-category-examples-code-samples-recommendation-create-15-executable-examples-10-jupyter-notebooks-effort-70-hours-expected-impact-onboarding-time-50-tutorial-completion-rate-30-70-2-api-reference-has-many-stub-files-gap-20-stub-files-500-bytes-with-no-content-autosummary-disabled-impact-developers-cannot-understand-api-contracts-integration-failures-likely-category-api-reference-documentation-recommendation-re-sphinx-ext-autosummary-auto-generate-from-docstrings-effort-8-hours-expected-impact-api-coverage-75-95-maintenance-burden-60"]], "Top-level PSO configuration structure": [[247, "top-level-pso-configuration-structure"]], "Topics": [[214, "topics"]], "Total Achievement (Phases 5-10)": [[25, "total-achievement-phases-5-10"]], "Total Documentation Volume": [[138, "total-documentation-volume"]], "Total Kinetic Energy": [[198, "total-kinetic-energy"]], "Trade-off: Accuracy vs Chattering": [[163, "trade-off-accuracy-vs-chattering"]], "Troubleshooting": [[34, "troubleshooting"], [70, "troubleshooting"], [77, "troubleshooting"], [84, "troubleshooting"], [85, "troubleshooting"], [90, "troubleshooting"], [91, "troubleshooting"], [94, "troubleshooting"], [124, "troubleshooting"], [131, "troubleshooting"], [132, "troubleshooting"], [133, "troubleshooting"], [134, "troubleshooting"], [135, "troubleshooting"], [153, "troubleshooting"], [154, "troubleshooting"], [155, "troubleshooting"], [159, "troubleshooting"], [170, "troubleshooting"], [185, "troubleshooting"], [265, "troubleshooting"], [315, "troubleshooting"]], "Troubleshooting ### Problem: LinAlgError still occurs Diagnosis:": [[213, "troubleshooting-problem-linalgerror-still-occurs-diagnosis"]], "Troubleshooting ### Simulation Diverges Symptoms: State values grow unbounded, NaN errors Solutions:": [[150, "troubleshooting-simulation-diverges-symptoms-state-values-grow-unbounded-nan-errors-solutions"]], "Troubleshooting ### Tests Fail ```bash": [[151, "troubleshooting-tests-fail-bash"]], "Troubleshooting & Issue Resolution": [[302, null]], "Troubleshooting Guide ### Common Issues and approaches #### Issue: ValueError: Unknown controller type Symptoms:": [[116, "troubleshooting-guide-common-issues-and-approaches-issue-valueerror-unknown-controller-type-symptoms"]], "Troubleshooting Guide ### Common Test Failures #### 1. Matplotlib Backend Issues Symptoms: Tests fail with display or backend errors": [[283, "troubleshooting-guide-common-test-failures-1-matplotlib-backend-issues-symptoms-tests-fail-with-display-or-backend-errors"]], "Troubleshooting Guide - Collapsible Code Blocks": [[144, null]], "Troubleshooting Integration": [[141, "troubleshooting-integration"]], "Troubleshooting STA-SMC Optimization": [[183, "troubleshooting-sta-smc-optimization"]], "Troubleshooting Workflows ### 1. Common Issue Resolution #### 1.1 Controller Performance Issues ```bash": [[321, "troubleshooting-workflows-1-common-issue-resolution-1-1-controller-performance-issues-bash"]], "Truncation Error": [[200, "truncation-error"]], "Tuning Guidelines": [[183, "tuning-guidelines"]], "Tuning guidance": [[226, "tuning-guidance"], [239, "tuning-guidance"]], "Tutorial 01 Validation Report Phase 5.2: Tutorial 01 (\u201cYour First Simulation\u201d) Validation": [[165, null]], "Tutorial 01: Your First Simulation Level: Beginner": [[164, null]], "Tutorial 02: Controller Comparison & Selection Level: Intermediate": [[166, null]], "Tutorial 02: Interactive Controller Performance Comparison": [[303, null]], "Tutorial 03: PSO Optimization Deep Dive Status: Planned for Phase 7": [[304, null]], "Tutorial 03: PSO Optimization for Controller Tuning Level: Intermediate to Advanced": [[167, null]], "Tutorial 04: Custom Controller Development Level: Advanced": [[168, null]], "Tutorial 05: End-to-End Research Workflow Level: Advanced": [[169, null]], "Tutorial Integration": [[154, "tutorial-integration"]], "Tutorial Series": [[127, "tutorial-series"]], "Tutorials": [[12, "tutorials"], [127, "tutorials"], [127, null], [305, null]], "Tutorials & Learning Guides": [[305, null]], "Tutorials with Live Code": [[153, "tutorials-with-live-code"]], "Two Factory Functions": [[132, "two-factory-functions"]], "Two Phases of SMC": [[163, "two-phases-of-smc"]], "Type Definitions ### Core Types ```python": [[49, "type-definitions-core-types-python"]], "Type Hint Coverage (\u226595%)": [[94, "type-hint-coverage-95"]], "Type Hints": [[258, "type-hints"]], "Type aliases for better type safety": [[49, "type-aliases-for-better-type-safety"]], "Typical Control Parameters": [[288, "table-control-parameters"]], "Typical Parameters": [[198, "typical-parameters"]], "Typical Research Workflow": [[170, "typical-research-workflow"]], "UI Components (\u2b50 Essential)": [[267, "ui-components-essential"]], "ULTIMATE ORCHESTRATOR EXECUTIVE DEPLOYMENT SUMMARY": [[218, null]], "Under Consideration": [[137, "under-consideration"], [139, "under-consideration"]], "Understanding Metrics": [[149, "understanding-metrics"]], "Undocumented Classes (P0)": [[9, "undocumented-classes-p0"]], "Undocumented Methods (P0 - Top 20)": [[9, "undocumented-methods-p0-top-20"]], "Unified sliding surface and recentering": [[226, "unified-sliding-surface-and-recentering"], [239, "unified-sliding-surface-and-recentering"]], "Unit Tests": [[20, "unit-tests"]], "Unit tests only (fast)": [[151, "unit-tests-only-fast"]], "Unknown Disturbance Environment": [[197, "unknown-disturbance-environment"]], "Unnecessary Transitions": [[12, "unnecessary-transitions"]], "Unregister Task": [[70, "unregister-task"]], "Update Button Icons": [[142, "update-button-icons"]], "Update Policy": [[256, "update-policy"]], "Updated CLI Command Reference Based on validation findings, here are the corrected commands for getting started: ### First Simulation (Corrected) Documentation Says:": [[147, "updated-cli-command-reference-based-on-validation-findings-here-are-the-corrected-commands-for-getting-started-first-simulation-corrected-documentation-says"]], "Updated Files (3)": [[138, "updated-files-3"]], "Upgrading Dependencies": [[142, "upgrading-dependencies"]], "Upper: [30.0, 30.0, 20.0, 20.0, 50.0, 10.0]": [[275, "upper-30-0-30-0-20-0-20-0-50-0-10-0"]], "Usage": [[70, "usage"], [159, "usage"], [159, "id1"]], "Usage Example": [[203, "usage-example"], [203, "id3"]], "Usage Examples": [[82, "usage-examples"], [203, "usage-examples"], [219, "usage-examples"]], "Usage Examples ### Basic Usage ```python": [[213, "usage-examples-basic-usage-python"]], "Usage Examples ### Complete PSO Optimization Workflow ```python": [[112, "usage-examples-complete-pso-optimization-workflow-python"]], "Usage Examples {#usage-examples}": [[220, "usage-examples-usage-examples"]], "Usage Guidelines ### Short-Lived Controllers (Single Simulation) ```python": [[210, "usage-guidelines-short-lived-controllers-single-simulation-python"]], "Usage Pattern": [[203, "usage-pattern"]], "Use Case: UC\u2011Fault\u201101 \u2014 Fault handling (sensor dropout)": [[306, "use-case-ucfault01-fault-handling-sensor-dropout"]], "Use Case: UC\u2011Setpoint\u201101 \u2014 Normal operation / set\u2011point change": [[306, "use-case-ucsetpoint01-normal-operation-setpoint-change"]], "Use Case: UC\u2011Start\u201101 \u2014 Startup": [[306, "use-case-ucstart01-startup"]], "Use factory many times without recreating # 2. Use minimal configurations when possible": [[116, "use-factory-many-times-without-recreating-2-use-minimal-configurations-when-possible"]], "Use optimized gains": [[128, "use-optimized-gains"]], "Use pre-optimized gains for immediate results": [[321, "use-pre-optimized-gains-for-immediate-results"]], "User Documentation": [[138, "user-documentation"]], "User Experience": [[138, "user-experience"]], "User Guide: DIP SMC PSO Framework": [[170, null]], "User Guides & Tutorials": [[95, "user-guides-tutorials"], [127, null]], "User Guides & Tutorials Welcome to the DIP SMC PSO framework documentation! This guide covers help you navigate the documentation and find what you need.": [[129, null]], "User Journey Map": [[264, "user-journey-map"]], "User-Facing Improvements": [[26, "user-facing-improvements"]], "User-Facing Version Information": [[315, "user-facing-version-information"]], "Utilities API Guide": [[136, null]], "Validation": [[136, "validation"]], "Validation & Testing": [[26, "validation-testing"]], "Validation & Testing Methodology": [[199, "validation-testing-methodology"]], "Validation & Verification": [[308, null]], "Validation API Reference > Coming Soon: validation API documentation. ## Current Resources For validation APIs, see: - Analysis Validation - Validation metrics API": [[307, null]], "Validation Checklists": [[261, "validation-checklists"]], "Validation Command": [[211, "validation-command"]], "Validation Examples: Practical Implementation Guide Document Status: Phase 3.3 Completion - Executable Examples": [[313, null]], "Validation Framework Guide System Reliability Foundation: Robust Parameter Validation & Scientific Verification": [[208, null]], "Validation Methodology": [[199, null]], "Validation Procedures and Testing ### Automated Validation Testing #### Configuration Test Suite": [[73, "validation-procedures-and-testing-automated-validation-testing-configuration-test-suite"]], "Validation Results": [[41, "validation-results"]], "Validation Results ### 1. Syntax Validation Test: test_example_syntax_valid - Python AST parsing Results:": [[14, "validation-results-1-syntax-validation-test-test-example-syntax-valid-python-ast-parsing-results"]], "Validation Results ### Acceptance Criteria Assessment #### \u2705 Threshold Range: [0.135, 0.150] Result: Threshold = 0.150 (within range) Validation: Upper bound of acceptable range selected to maximize performance. #### \u26a0\ufe0f False Positive Rate: <1% Target: <1%": [[120, "validation-results-acceptance-criteria-assessment-threshold-range-0-135-0-150-result-threshold-0-150-within-range-validation-upper-bound-of-acceptable-range-selected-to-maximize-performance-false-positive-rate-1-target-1"]], "Validation Results ### Post-Fix Controller Performance Matrix | Controller | Pre-Fix Status | Post-Fix Status | PSO Cost | Optimization | Production Ready |": [[40, "validation-results-post-fix-controller-performance-matrix-controller-pre-fix-status-post-fix-status-pso-cost-optimization-production-ready"]], "Validation Rules": [[20, "validation-rules"]], "Validation Rules The factory enforces validation rules for controller creation. ### Gain Validation Rules #### Universal Gain Constraints All controllers must satisfy: 1. Count Constraint: len(gains) == controller_info['gain_count']": [[51, "validation-rules-the-factory-enforces-validation-rules-for-controller-creation-gain-validation-rules-universal-gain-constraints-all-controllers-must-satisfy-1-count-constraint-len-gains-controller-info-gain-count"]], "Validation Rules and Constraints ### Master Configuration Schema": [[73, "validation-rules-and-constraints-master-configuration-schema"]], "Validation Scripts": [[124, "validation-scripts"]], "Validation Scripts (15 minutes)": [[124, "validation-scripts-15-minutes"]], "Validation Summary": [[247, "validation-summary"]], "Validation Summary and Recommendations ### Deployment Readiness Assessment Current Status: \u2705 DEPLOYMENT APPROVED Quality Gate Summary:": [[93, "validation-summary-and-recommendations-deployment-readiness-assessment-current-status-deployment-approved-quality-gate-summary"]], "Validation Test": [[70, "validation-test"]], "Validation Testing Protocols": [[261, "validation-testing-protocols"]], "Validation Workflow": [[12, "validation-workflow"]], "Validation Workflow Guide > Coming Soon: validation workflow documentation. ## Current Resources For validation guidance, see: - Validation Examples - Practical validation examples and patterns": [[314, null]], "Validation Workflows": [[308, "validation-workflows"]], "Validation and Testing": [[30, "validation-and-testing"], [31, "validation-and-testing"]], "Validation and Testing ### 1. Fix Verification #### 1.1 Direct Function Test ```python": [[300, "validation-and-testing-1-fix-verification-1-1-direct-function-test-python"]], "Validation of Custom Models": [[134, "validation-of-custom-models"]], "Variant\u00a0I: Classic Sliding Mode Control (SMC)": [[226, "variant-i-classic-sliding-mode-control-smc"], [239, "variant-i-classic-sliding-mode-control-smc"]], "Variant\u00a0II: Super\u2011Twisting Algorithm (STA) SMC": [[226, "variant-ii-supertwisting-algorithm-sta-smc"], [239, "variant-ii-supertwisting-algorithm-sta-smc"]], "Variant\u00a0III: Adaptive SMC": [[226, "variant-iii-adaptive-smc"], [239, "variant-iii-adaptive-smc"]], "Variant\u00a0IV: Hybrid Adaptive\u2013STA SMC": [[226, "variant-iv-hybrid-adaptivesta-smc"], [239, "variant-iv-hybrid-adaptivesta-smc"]], "Vector Simulation Engine": [[203, "vector-simulation-engine"]], "Vector Variables": [[289, "vector-variables"]], "Velocity Clamping": [[162, "velocity-clamping"]], "Velocity update": [[167, "velocity-update"]], "Verification Checklist": [[125, "verification-checklist"], [126, null]], "Verification Checklist Use this checklist to systematically verify the project: ### Citation System - [ ] BibTeX Completeness: All 94 entries have DOI or URL (100%)": [[121, "verification-checklist-use-this-checklist-to-systematically-verify-the-project-citation-system-bibtex-completeness-all-94-entries-have-doi-or-url-100"]], "Verification Summary": [[125, "verification-summary"], [125, "id5"], [125, "id10"]], "Verification Workflow": [[125, "verification-workflow"]], "Verification Workflow ### Step 1: Citation Verification (15 minutes) Objective: Verify all citations have valid BibTeX entries with DOI/URL ```bash": [[121, "verification-workflow-step-1-citation-verification-15-minutes-objective-verify-all-citations-have-valid-bibtex-entries-with-doi-url-bash"]], "Verification and Validation All theoretical results are validated through:": [[199, "verification-and-validation-all-theoretical-results-are-validated-through"]], "Verify Authentication": [[70, "verify-authentication"]], "Verify PYTHONPATH": [[151, "verify-pythonpath"]], "Verify Results": [[320, "verify-results"]], "Version 1.0 (Legacy) - Deprecated": [[251, "version-1-0-legacy-deprecated"]], "Version Activation": [[315, "version-activation"]], "Version Banners": [[315, "version-banners"]], "Version Compatibility | Component | Required Version | Recommended |": [[128, "version-compatibility-component-required-version-recommended"]], "Version History": [[139, "version-history"], [142, "version-history"], [143, "version-history"]], "Version Impact": [[5, "version-impact"]], "Version Information": [[138, "version-information"]], "Version Management Best Practices": [[315, "version-management-best-practices"]], "Version Naming": [[315, "version-naming"]], "Version Not Showing": [[315, "version-not-showing"]], "Version Numbering": [[139, "version-numbering"]], "Version Selector Not Working": [[315, "version-selector-not-working"]], "Version Selector in Documentation": [[315, "version-selector-in-documentation"]], "Version Strategy": [[315, "version-strategy"]], "Version Tags": [[315, "version-tags"]], "Versioning": [[142, "versioning"]], "View help": [[150, "view-help"]], "Viewing Current Configuration": [[170, "viewing-current-configuration"]], "Visual Documentation Map": [[264, null]], "Visual Documentation Navigator": [[262, null]], "Visual Documentation ```{toctree}": [[316, null]], "Visual Navigation": [[189, "visual-navigation"]], "Visualization": [[136, "visualization"], [265, "visualization"]], "Visualization Exports": [[90, "visualization-exports"]], "Visualization Recipes": [[149, "visualization-recipes"]], "Volume Mounting": [[91, "volume-mounting"]], "Warning Analysis": [[25, "warning-analysis"], [32, "warning-analysis"]], "Warning Elimination Breakdown": [[24, "warning-elimination-breakdown"]], "Warning Threshold Alerts": [[25, "warning-threshold-alerts"]], "Warnings Eliminated (720)": [[32, "warnings-eliminated-720"]], "Watchdog": [[8, "watchdog"]], "Web Interface": [[170, "web-interface"]], "Web Interface ### Streamlit": [[8, "web-interface-streamlit"]], "Web/UI Attribution (Streamlit Dashboard) Add to \u201cAbout\u201d page: ```markdown": [[15, "web-ui-attribution-streamlit-dashboard-add-to-about-page-markdown"]], "Week 2-3: High Priority (P1)": [[11, "week-2-3-high-priority-p1"]], "Weighted Lyapunov Function": [[156, "weighted-lyapunov-function"]], "Weighted Sum Approach": [[201, "weighted-sum-approach"]], "Welch\u2019s t-test (Unequal Variances)": [[149, "welch-s-t-test-unequal-variances"]], "Welcome, Reviewers Thank you for reviewing this project! This package provides resources to help you efficiently verify the technical claims, citations, and implementation quality of our work.": [[121, "welcome-reviewers-thank-you-for-reviewing-this-project-this-package-provides-resources-to-help-you-efficiently-verify-the-technical-claims-citations-and-implementation-quality-of-our-work"]], "What Causes Chattering?": [[163, "what-causes-chattering"]], "What Didn\u2019t Work": [[32, "what-didn-t-work"]], "What Doesn\u2019t Get Backed Up": [[70, "what-doesn-t-get-backed-up"]], "What Doesn\u2019t Work": [[155, "what-doesn-t-work"]], "What Doesn\u2019t Work \u274c": [[27, "what-doesn-t-work"]], "What Gets Backed Up": [[70, "what-gets-backed-up"]], "What Was Built": [[30, "what-was-built"], [31, "what-was-built"]], "What Went Well": [[27, "what-went-well"], [31, "what-went-well"]], "What Worked": [[32, "what-worked"]], "What Worked Exceptionally Well": [[24, "what-worked-exceptionally-well"]], "What Worked Well": [[25, "what-worked-well"], [26, "what-worked-well"], [29, "what-worked-well"], [33, "what-worked-well"]], "What Works": [[155, "what-works"]], "What Works \u2705": [[27, "what-works"]], "What if I run out of local storage space?": [[145, "what-if-i-run-out-of-local-storage-space"]], "What is Sliding Mode Control?": [[163, "what-is-sliding-mode-control"]], "What is This Feature?": [[145, "what-is-this-feature"]], "What is the DIP SMC PSO Framework?": [[146, "what-is-the-dip-smc-pso-framework"]], "When Adding New Code": [[94, "when-adding-new-code"]], "When Modifying Documentation": [[94, "when-modifying-documentation"]], "When PSO Struggles": [[162, "when-pso-struggles"]], "When Technical Terms Are Acceptable": [[12, "when-technical-terms-are-acceptable"]], "When to Choose STA-SMC": [[183, "when-to-choose-sta-smc"]], "When to Use Each": [[132, "when-to-use-each"]], "When to Use Each Directive": [[154, "when-to-use-each-directive"]], "When to Use Each Feature": [[31, "when-to-use-each-feature"]], "When to Use Each Phase": [[30, "when-to-use-each-phase"]], "When to Use STA-SMC": [[183, "when-to-use-sta-smc"]], "When \u201cLet\u2019s\u201d Is Acceptable": [[12, "when-let-s-is-acceptable"]], "Where Pyodide Examples Appear": [[27, "where-pyodide-examples-appear"]], "Why Lagrangian Mechanics?": [[161, "why-lagrangian-mechanics"]], "Why SMC for Underactuated Systems?": [[163, "why-smc-for-underactuated-systems"]], "Why Super-Twisting?": [[163, "why-super-twisting"]], "Why This System is Challenging": [[161, "why-this-system-is-challenging"]], "Why don\u2019t I see collapse buttons on some code blocks?": [[145, "why-don-t-i-see-collapse-buttons-on-some-code-blocks"]], "Why is the animation choppy?": [[145, "why-is-the-animation-choppy"]], "With Colon": [[299, "with-colon"]], "With Convergence Monitoring": [[133, "with-convergence-monitoring"]], "Without Colon": [[299, "without-colon"]], "Workflow Integration": [[265, "workflow-integration"]], "Workflow Status": [[94, "workflow-status"]], "Workflows": [[127, "workflows"]], "Workflows & Guides": [[308, null]], "Workflows & Integration Guides": [[322, null]], "Worst-Case Configuration (Extended)": [[290, "worst-case-configuration-extended"]], "Wrap Cards": [[267, "wrap-cards"]], "Writing Tests ### Unit Test Template ```python": [[151, "writing-tests-unit-test-template-python"]], "XSS Prevention": [[143, "xss-prevention"]], "YAML Configuration Structure ### Complete Configuration Schema The project uses a hierarchical YAML configuration structure: ```yaml": [[72, "yaml-configuration-structure-complete-configuration-schema-the-project-uses-a-hierarchical-yaml-configuration-structure-yaml"]], "You should see: simulate.py, config.yaml, src/, tests/, docs/, etc.": [[146, "you-should-see-simulate-py-config-yaml-src-tests-docs-etc"]], "[1.0.0] - 2025-10-12": [[139, "id1"]], "[Unreleased]": [[139, "unreleased"]], "__init__(self, config)": [[26, "init-self-config"]], "a) plotly-chart - Generic Plotly Chart": [[28, "a-plotly-chart-generic-plotly-chart"]], "adaptive_smc": [[43, "adaptive-smc"]], "aio-pika": [[8, "aio-pika"]], "aiohttp": [[8, "aiohttp"]], "animationDuration": [[140, "animationduration"]], "b) plotly-comparison - Controller Comparison Matrix": [[28, "b-plotly-comparison-controller-comparison-matrix"]], "buttonTitle": [[140, "buttontitle"]], "c) plotly-convergence - PSO Convergence Animation": [[28, "c-plotly-convergence-pso-convergence-animation"]], "cart_mass: 0.10 # \u00b110%": [[193, "cart-mass-0-10-10"]], "classical_smc": [[43, "classical-smc"]], "clearCodeBlockStates()": [[143, "clearcodeblockstates"]], "codeBlockStates": [[143, "codeblockstates"]], "collapseAll()": [[143, "collapseall"]], "collapseCodeBlock(codeBlock, animate = true)": [[143, "collapsecodeblock-codeblock-animate-true"]], "collapsedIcon": [[140, "collapsedicon"]], "config.yaml - Complete configuration example # Global settings": [[72, "config-yaml-complete-configuration-example-global-settings"]], "config.yaml - Master Configuration File": [[73, "config-yaml-master-configuration-file"]], "config.yaml entry for hybrid controller": [[81, "config-yaml-entry-for-hybrid-controller"]], "copybutton.js Compatibility": [[142, "copybutton-js-compatibility"]], "create_pso_controller_factory() Create a PSO-optimized controller factory function. ```python": [[49, "create-pso-controller-factory-create-a-pso-optimized-controller-factory-function-python"]], "d) plotly-scatter-matrix - Parameter Space Exploration": [[28, "d-plotly-scatter-matrix-parameter-space-exploration"]], "easing": [[140, "easing"]], "emergency_recovery.sh - Emergency PSO system recovery echo \u201c\ud83d\udea8 PSO EMERGENCY RECOVERY PROCEDURE\u201d": [[254, "emergency-recovery-sh-emergency-pso-system-recovery-echo-pso-emergency-recovery-procedure"]], "example-metadata:": [[17, "example-metadata"], [17, "id1"], [36, "example-metadata"], [49, "example-metadata"], [49, "id1"], [49, "id2"], [49, "id3"], [49, "id4"], [49, "id5"], [49, "id6"], [51, "example-metadata"], [51, "id1"], [51, "id2"], [51, "id3"], [51, "id4"], [51, "id5"], [51, "id6"], [51, "id7"], [51, "id8"], [53, "example-metadata"], [53, "id1"], [55, "example-metadata"], [58, "example-metadata"], [61, "example-metadata"], [61, "id1"], [61, "id2"], [61, "id3"], [63, "example-metadata"], [63, "id1"], [63, "id2"], [63, "id3"], [63, "id4"], [63, "id5"], [63, "id6"], [68, "example-metadata"], [68, "id1"], [72, "example-metadata"], [72, "id1"], [72, "id2"], [72, "id3"], [78, "example-metadata"], [78, "id1"], [78, "id2"], [79, "example-metadata"], [79, "id1"], [79, "id2"], [79, "id3"], [79, "id4"], [79, "id5"], [79, "id6"], [79, "id7"], [79, "id8"], [79, "id9"], [80, "example-metadata"], [80, "id1"], [80, "id2"], [80, "id3"], [80, "id4"], [80, "id5"], [80, "id6"], [80, "id7"], [80, "id8"], [80, "id9"], [80, "id10"], [80, "id12"], [80, "id13"], [80, "id14"], [88, "example-metadata"], [99, "example-metadata"], [99, "id1"], [99, "id2"], [99, "id3"], [100, "example-metadata"], [101, "example-metadata"], [101, "id1"], [101, "id2"], [101, "id3"], [101, "id4"], [101, "id5"], [102, "example-metadata"], [102, "id1"], [102, "id2"], [102, "id3"], [102, "id4"], [102, "id5"], [102, "id6"], [103, "example-metadata"], [104, "example-metadata"], [104, "id1"], [104, "id2"], [104, "id3"], [104, "id4"], [104, "id5"], [104, "id6"], [107, "example-metadata"], [107, "id1"], [107, "id2"], [107, "id3"], [107, "id4"], [108, "example-metadata"], [108, "id1"], [108, "id2"], [108, "id3"], [108, "id4"], [108, "id5"], [108, "id6"], [109, "example-metadata"], [109, "id1"], [109, "id2"], [109, "id3"], [109, "id4"], [109, "id5"], [109, "id6"], [109, "id7"], [109, "id8"], [109, "id9"], [111, "example-metadata"], [111, "id1"], [111, "id2"], [111, "id3"], [111, "id4"], [111, "id5"], [112, "example-metadata"], [112, "id1"], [112, "id2"], [112, "id3"], [112, "id5"], [112, "id6"], [113, "example-metadata"], [113, "id1"], [113, "id2"], [116, "example-metadata"], [116, "id1"], [116, "id2"], [116, "id3"], [116, "id4"], [116, "id5"], [116, "id6"], [116, "id7"], [117, "example-metadata"], [117, "id1"], [135, "example-metadata"], [135, "id1"], [151, "example-metadata"], [168, "example-metadata"], [168, "id1"], [168, "id2"], [169, "example-metadata"], [178, "example-metadata"], [191, "example-metadata"], [191, "id1"], [191, "id2"], [191, "id3"], [191, "id4"], [193, "example-metadata"], [194, "example-metadata"], [194, "id1"], [194, "id2"], [194, "id3"], [194, "id4"], [194, "id5"], [194, "id6"], [194, "id7"], [194, "id8"], [194, "id9"], [207, "example-metadata"], [207, "id1"], [207, "id2"], [207, "id3"], [207, "id4"], [207, "id5"], [207, "id6"], [208, "example-metadata"], [215, "example-metadata"], [215, "id1"], [215, "id2"], [215, "id3"], [247, "example-metadata"], [247, "id1"], [247, "id2"], [248, "example-metadata"], [248, "id1"], [250, "example-metadata"], [251, "example-metadata"], [251, "id1"], [251, "id2"], [251, "id3"], [251, "id4"], [251, "id5"], [251, "id6"], [252, "example-metadata"], [252, "id1"], [252, "id2"], [252, "id3"], [255, "example-metadata"], [273, "example-metadata"], [273, "id1"], [274, "example-metadata"], [274, "id1"], [274, "id2"], [274, "id3"], [274, "id4"], [274, "id5"], [274, "id6"], [274, "id7"], [275, "example-metadata"], [275, "id1"], [275, "id2"], [276, "example-metadata"], [278, "example-metadata"], [278, "id1"], [278, "id2"], [278, "id3"], [280, "example-metadata"], [280, "id1"], [280, "id2"], [280, "id3"], [280, "id4"], [280, "id5"], [280, "id6"], [280, "id7"], [280, "id8"], [297, "example-metadata"], [297, "id1"], [298, "example-metadata"], [300, "example-metadata"], [300, "id1"], [300, "id2"], [310, "example-metadata"], [313, "example-metadata"], [321, "example-metadata"], [321, "id1"]], "expandAll()": [[143, "expandall"]], "expandCodeBlock(codeBlock, animate = true)": [[143, "expandcodeblock-codeblock-animate-true"]], "expandedIcon": [[140, "expandedicon"]], "get_default_gains() Get default gains for a specific controller type. ```python": [[49, "get-default-gains-get-default-gains-for-a-specific-controller-type-python"]], "global_best=np.array([0.0, 0.0]),": [[291, "global-best-np-array-0-0-0-0"]], "hybrid_adaptive_sta_smc": [[43, "hybrid-adaptive-sta-smc"]], "initial_position=np.array([5.0, 5.0]),": [[291, "initial-position-np-array-5-0-5-0"]], "initial_velocity=np.array([0.0, 0.0]),": [[291, "initial-velocity-np-array-0-0-0-0"]], "iters: 100": [[193, "iters-100"]], "linkchecker": [[8, "linkchecker"]], "list_available_controllers() Get list of currently available controller types. ```python": [[49, "list-available-controllers-get-list-of-currently-available-controller-types-python"]], "list_available_controllers() Query currently available controller types. #### Signature ```python": [[51, "list-available-controllers-query-currently-available-controller-types-signature-python"]], "lower_bounds = [1.0, 1.0, 1.0, 1.0, 5.0, 0.1]": [[80, "lower-bounds-1-0-1-0-1-0-1-0-5-0-0-1"]], "n_evals: 5 # 5 perturbed models per evaluation": [[193, "n-evals-5-5-perturbed-models-per-evaluation"]], "n_particles: 30 result = tuner.optimise() # Uses w_schedule from config # Manual iteration loop for custom control": [[193, "n-particles-30-result-tuner-optimise-uses-w-schedule-from-config-manual-iteration-loop-for-custom-control"]], "numpy.ndarray .get() Method Error Resolution Document Version: 1.0": [[300, "numpy-ndarray-get-method-error-resolution-document-version-1-0"]], "pendulum1_length: 0.05 # \u00b15%": [[193, "pendulum1-length-0-05-5"]], "pendulum1_mass: 0.15 # \u00b115%": [[193, "pendulum1-mass-0-15-15"]], "pendulum2_length: 0.05 # \u00b15% tuner = PSOTuner( controller_factory=controller_factory, config=config, seed=42": [[193, "pendulum2-length-0-05-5-tuner-psotuner-controller-factory-controller-factory-config-config-seed-42"]], "pendulum2_mass: 0.15 # \u00b115%": [[193, "pendulum2-mass-0-15-15"]], "personal_best=np.array([3.0, 3.0]),": [[291, "personal-best-np-array-3-0-3-0"]], "physics_uncertainty:": [[193, "physics-uncertainty"]], "production_config.yaml": [[111, "production-config-yaml"]], "pso:": [[193, "pso"]], "pso_health_monitor.sh - Regular PSO system health monitoring LOG_FILE=\u201d/var/log/pso_health.log\u201d": [[254, "pso-health-monitor-sh-regular-pso-system-health-monitoring-log-file-var-log-pso-health-log"]], "psutil": [[8, "psutil"]], "pytest-benchmark": [[8, "pytest-benchmark"]], "quality_gate.sh - Production deployment gate echo \u201cRunning quality gate validation\u2026\u201d # 1. Unit and integration tests": [[283, "quality-gate-sh-production-deployment-gate-echo-running-quality-gate-validation-1-unit-and-integration-tests"]], "quality_gate.sh - Production deployment validation set -e echo \u201c\ud83d\ude80 Starting quality gate validation\u2026\u201d # 1. Fast unit tests": [[282, "quality-gate-sh-production-deployment-validation-set-e-echo-starting-quality-gate-validation-1-fast-unit-tests"]], "recovery.restore_factory_defaults()": [[254, "recovery-restore-factory-defaults"]], "recovery.restore_from_backup(backup_index=1)": [[254, "recovery-restore-from-backup-backup-index-1"]], "result = simulate_pso_particle_trajectory(": [[291, "result-simulate-pso-particle-trajectory"]], "result1 = analyze_pso_stability(w=0.7, c1=2.0, c2=2.0)": [[291, "result1-analyze-pso-stability-w-0-7-c1-2-0-c2-2-0"]], "result2 = analyze_pso_stability(w=0.5, c1=1.5, c2=1.5)": [[291, "result2-analyze-pso-stability-w-0-5-c1-1-5-c2-1-5"]], "run_simulation": [[216, "run-simulation"]], "run_simulation() Function": [[203, "run-simulation-function"]], "runnable: false": [[55, "runnable-false"], [135, "runnable-false"], [135, "id2"]], "runnable: false # .mypy.ini configuration": [[300, "runnable-false-mypy-ini-configuration"]], "runnable: false # 1. Specific exception types": [[80, "runnable-false-1-specific-exception-types"]], "runnable: false # 1. Use create_pso_controller_factory for consistent interface": [[80, "runnable-false-1-use-create-pso-controller-factory-for-consistent-interface"]], "runnable: false # 1. Use frozen dataclasses for immutable configuration": [[80, "runnable-false-1-use-frozen-dataclasses-for-immutable-configuration"]], "runnable: false # Adaptive PSO with time-varying parameters": [[321, "runnable-false-adaptive-pso-with-time-varying-parameters"]], "runnable: false # Add to SMCType enum": [[51, "runnable-false-add-to-smctype-enum"]], "runnable: false # Add to code_extractor.py": [[298, "runnable-false-add-to-code-extractor-py"]], "runnable: false # Advanced PSO configuration example": [[280, "runnable-false-advanced-pso-configuration-example"]], "runnable: false # Automatic test scenarios (built into enhanced fitness function):": [[280, "runnable-false-automatic-test-scenarios-built-into-enhanced-fitness-function"]], "runnable: false # Automatic test scenarios in fitness evaluation:": [[275, "runnable-false-automatic-test-scenarios-in-fitness-evaluation"]], "runnable: false # Clean SMC Factory": [[80, "runnable-false-clean-smc-factory"], [80, "id11"]], "runnable: false # Complete simulation with classical SMC": [[78, "runnable-false-complete-simulation-with-classical-smc"]], "runnable: false # Configure PSO for robustness optimization": [[280, "runnable-false-configure-pso-for-robustness-optimization"]], "runnable: false # Configure physics uncertainty in config.yaml:": [[193, "runnable-false-configure-physics-uncertainty-in-config-yaml"]], "runnable: false # Controller Registry with PSO Integration Metadata": [[251, "runnable-false-controller-registry-with-pso-integration-metadata"]], "runnable: false # Create factory once (expensive operation)": [[49, "runnable-false-create-factory-once-expensive-operation"]], "runnable: false # Enhanced PSO configuration with robust evaluation": [[276, "runnable-false-enhanced-pso-configuration-with-robust-evaluation"]], "runnable: false # Enterprise Factory": [[80, "runnable-false-enterprise-factory"]], "runnable: false # File: src/controllers/smc/hybrid_adaptive_sta_smc.py": [[300, "runnable-false-file-src-controllers-smc-hybrid-adaptive-sta-smc-py"]], "runnable: false # Get default gains for different controllers": [[49, "runnable-false-get-default-gains-for-different-controllers"]], "runnable: false # Global deprecation warner instance": [[102, "runnable-false-global-deprecation-warner-instance"]], "runnable: false # Mathematical Model for Isolated Coverage": [[88, "runnable-false-mathematical-model-for-isolated-coverage"]], "runnable: false # Memory-efficient patterns: # 1. Reuse factory functions": [[116, "runnable-false-memory-efficient-patterns-1-reuse-factory-functions"]], "runnable: false # Method 1: String-based creation": [[80, "runnable-false-method-1-string-based-creation"]], "runnable: false # Monte Carlo + Cross-Validation + Statistical Tests": [[310, "runnable-false-monte-carlo-cross-validation-statistical-tests"]], "runnable: false # Nested dictionary configuration": [[72, "runnable-false-nested-dictionary-configuration"]], "runnable: false # Optimize STA-SMC with Issue #2 considerations": [[280, "runnable-false-optimize-sta-smc-with-issue-2-considerations"]], "runnable: false # Optional MPC controller import with graceful fallback": [[116, "runnable-false-optional-mpc-controller-import-with-graceful-fallback"]], "runnable: false # Parameter Structure: [K1, K2, k1, k2, \u03bb1, \u03bb2]": [[109, "runnable-false-parameter-structure-k1-k2-k1-k2-1-2"]], "runnable: false # Parameter Structure: [k1, k2, \u03bb1, \u03bb2, K, kd]": [[109, "runnable-false-parameter-structure-k1-k2-1-2-k-kd"]], "runnable: false # Parameter Structure: [k1, k2, \u03bb1, \u03bb2, \u03b3]": [[109, "runnable-false-parameter-structure-k1-k2-1-2"]], "runnable: false # Parameter Structure: [k1, k2, \u03bb1, \u03bb2] (surface gains only)": [[109, "runnable-false-parameter-structure-k1-k2-1-2-surface-gains-only"]], "runnable: false # Pre-Migration Configuration (v1.x)": [[108, "runnable-false-pre-migration-configuration-v1-x"]], "runnable: false # Primary Control Flow": [[63, "runnable-false-primary-control-flow"]], "runnable: false # Priority order:": [[80, "runnable-false-priority-order"]], "runnable: false # Production-ready PSO configuration": [[215, "runnable-false-production-ready-pso-configuration"]], "runnable: false # Safe for automatic migration simple_rename = DeprecationMapping( old_name=\u2019old_name\u2019, new_name=\u2019new_name\u2019, auto_migrate=True ) # Requires manual migration complex_change = DeprecationMapping( old_name=\u2019complex_param\u2019, new_name=\u2019restructured_config\u2019, auto_migrate=False, # Semantic change requires manual intervention migration_guide=\u201dSee migration guide at docs/migration/v3.0.md\u201d ) ### Usage and Monitoringpython": [[102, "runnable-false-safe-for-automatic-migration-simple-rename-deprecationmapping-old-name-old-name-new-name-new-name-auto-migrate-true-requires-manual-migration-complex-change-deprecationmapping-old-name-complex-param-new-name-restructured-config-auto-migrate-false-semantic-change-requires-manual-intervention-migration-guide-see-migration-guide-at-docs-migration-v3-0-md-usage-and-monitoringpython"]], "runnable: false # Test 1: Direct method call": [[300, "runnable-false-test-1-direct-method-call"]], "runnable: false # Thread-safe factory operations": [[100, "runnable-false-thread-safe-factory-operations"]], "runnable: false # Thread-safe factory operations with timeout protection": [[51, "runnable-false-thread-safe-factory-operations-with-timeout-protection"], [80, "runnable-false-thread-safe-factory-operations-with-timeout-protection"]], "runnable: false # Thread-safe patterns: # 1. Pre-create factories for concurrent use": [[116, "runnable-false-thread-safe-patterns-1-pre-create-factories-for-concurrent-use"]], "runnable: false # Validate gains before expensive simulation": [[49, "runnable-false-validate-gains-before-expensive-simulation"]], "runnable: false # scripts/custom_batch_optimization.py": [[321, "runnable-false-scripts-custom-batch-optimization-py"]], "runnable: false # src/controllers/factory.py (lines 507-543) def create_controller(controller_type: str, config: Optional[Any] = None, gains: Optional[Union[list, np.ndarray]] = None) -> Any: \u201c\u201d\u201d Create a controller instance of the specified type. This function is thread-safe and can be called concurrently. Supported types: \u2018classical_smc\u2019, \u2018sta_smc\u2019, \u2018adaptive_smc\u2019, \u2018hybrid_adaptive_sta_smc\u2019, \u2018mpc_controller\u2019 \u201c\u201d\u201d # Normalize controller type (handles aliases) controller_type = _canonicalize_controller_type(controller_type) # Retrieve from registry controller_info = _get_controller_info(controller_type) controller_class = controller_info[\u2018class\u2019] # Resolve gains from config/defaults controller_gains = _resolve_controller_gains(gains, config, controller_type) # Validate gains with controller-specific rules _validate_controller_gains(controller_gains, controller_info) # Create and return configured instance return controller_class(controller_gains, **kwargs)": [[17, "runnable-false-src-controllers-factory-py-lines-507-543-def-create-controller-controller-type-str-config-optional-any-none-gains-optional-union-list-np-ndarray-none-any-create-a-controller-instance-of-the-specified-type-this-function-is-thread-safe-and-can-be-called-concurrently-supported-types-classical-smc-sta-smc-adaptive-smc-hybrid-adaptive-sta-smc-mpc-controller-normalize-controller-type-handles-aliases-controller-type-canonicalize-controller-type-controller-type-retrieve-from-registry-controller-info-get-controller-info-controller-type-controller-class-controller-info-class-resolve-gains-from-config-defaults-controller-gains-resolve-controller-gains-gains-config-controller-type-validate-gains-with-controller-specific-rules-validate-controller-gains-controller-gains-controller-info-create-and-return-configured-instance-return-controller-class-controller-gains-kwargs"]], "runnable: false # src/controllers/new_controller.py import numpy as np": [[51, "runnable-false-src-controllers-new-controller-py-import-numpy-as-np"]], "runnable: false # src/controllers/new_controller_config.py from dataclasses import dataclass": [[51, "runnable-false-src-controllers-new-controller-config-py-from-dataclasses-import-dataclass"]], "runnable: false # src/utils/validation/parameter_validators.py def validate_gains(n_expected: int): \u201c\u201d\u201dDecorator to validate gain array length.\u201d\u201d\u201d def decorator(func): def wrapper(self, gains, *args, **kwargs): if len(gains) != n_expected: raise ValueError(f\u201dExpected {n_expected} gains, got {len(gains)}\u201d) return func(self, gains, *args, **kwargs) return wrapper return decorator # Usage": [[17, "runnable-false-src-utils-validation-parameter-validators-py-def-validate-gains-n-expected-int-decorator-to-validate-gain-array-length-def-decorator-func-def-wrapper-self-gains-args-kwargs-if-len-gains-n-expected-raise-valueerror-f-expected-n-expected-gains-got-len-gains-return-func-self-gains-args-kwargs-return-wrapper-return-decorator-usage"]], "runnable: false # \u2705 GOOD: Validate once at construction": [[208, "runnable-false-good-validate-once-at-construction"]], "runnable: false #!/usr/bin/env python": [[169, "runnable-false-usr-bin-env-python"], [178, "runnable-false-usr-bin-env-python"]], "runnable: false #!/usr/bin/env python3": [[53, "runnable-false-usr-bin-env-python3"], [53, "id2"], [117, "runnable-false-usr-bin-env-python3"], [117, "id2"], [248, "runnable-false-usr-bin-env-python3"]], "runnable: false #======================================================================================\\": [[168, "runnable-false"]], "runnable: false @abstractmethod": [[61, "runnable-false-abstractmethod"]], "runnable: false @dataclass": [[102, "runnable-false-dataclass"]], "runnable: false @dataclass(frozen=True)": [[112, "runnable-false-dataclass-frozen-true"], [112, "id4"], [273, "runnable-false-dataclass-frozen-true"], [273, "id2"], [275, "runnable-false-dataclass-frozen-true"]], "runnable: false @dataclass(frozen=True) class ClassicalSMCConfig: \u201c\u201d\u201dType-safe configuration with mathematical validation.\u201d\u201d\u201d def post_init(self): \u201c\u201d\u201dValidate configuration after creation.\u201d\u201d\u201d self._validate_gains() self._validate_parameters() self._validate_mathematical_constraints() def _validate_gains(self) -> None: \u201c\u201d\u201dValidate gain vector according to SMC theory.\u201d\u201d\u201d if len(self.gains) != 6: raise ValueError(\u201cClassical SMC requires exactly 6 gains\u201d) k1, k2, lam1, lam2, K, kd = self.gains # Surface gains: positive for Hurwitz stability if any(g <= 0 for g in [k1, k2, lam1, lam2]): raise ValueError(\u201cSurface gains must be positive for stability\u201d) # Switching gain: positive for reaching condition if K <= 0: raise ValueError(\u201cSwitching gain K must be positive\u201d) # Derivative gain: non-negative for damping if kd < 0: raise ValueError(\u201cDerivative gain kd must be non-negative\u201d) def _validate_mathematical_constraints(self) -> None: \u201c\u201d\u201dValidate constraints from mathematical theory.\u201d\u201d\u201d # Damping ratio bounds for each subsystem zeta1 = self.lam1 / (2 * np.sqrt(self.k1)) zeta2 = self.lam2 / (2 * np.sqrt(self.k2)) if zeta1 < 0.1 or zeta2 < 0.1: raise ValueError(\u201cDamping ratios too low - may cause oscillations\u201d) if zeta1 > 10.0 or zeta2 > 10.0: raise ValueError(\u201cDamping ratios too high - may cause sluggish response\u201d) 2. **Edge Case Handling:**python def get_effective_controllability_threshold(self) -> float: \u201c\u201d\u201dAuto-compute threshold based on system parameters.\u201d\u201d\u201d if self.controllability_threshold is not None: return self.controllability_threshold # Scale with surface gains for adaptive behavior base_threshold = 0.05 * (self.k1 + self.k2) # Bound within reasonable limits return np.clip(base_threshold, 0.01, 1.0) ``` Mathematical Impact:": [[194, "runnable-false-dataclass-frozen-true-class-classicalsmcconfig-type-safe-configuration-with-mathematical-validation-def-post-init-self-validate-configuration-after-creation-self-validate-gains-self-validate-parameters-self-validate-mathematical-constraints-def-validate-gains-self-none-validate-gain-vector-according-to-smc-theory-if-len-self-gains-6-raise-valueerror-classical-smc-requires-exactly-6-gains-k1-k2-lam1-lam2-k-kd-self-gains-surface-gains-positive-for-hurwitz-stability-if-any-g-0-for-g-in-k1-k2-lam1-lam2-raise-valueerror-surface-gains-must-be-positive-for-stability-switching-gain-positive-for-reaching-condition-if-k-0-raise-valueerror-switching-gain-k-must-be-positive-derivative-gain-non-negative-for-damping-if-kd-0-raise-valueerror-derivative-gain-kd-must-be-non-negative-def-validate-mathematical-constraints-self-none-validate-constraints-from-mathematical-theory-damping-ratio-bounds-for-each-subsystem-zeta1-self-lam1-2-np-sqrt-self-k1-zeta2-self-lam2-2-np-sqrt-self-k2-if-zeta1-0-1-or-zeta2-0-1-raise-valueerror-damping-ratios-too-low-may-cause-oscillations-if-zeta1-10-0-or-zeta2-10-0-raise-valueerror-damping-ratios-too-high-may-cause-sluggish-response-2-edge-case-handling-python-def-get-effective-controllability-threshold-self-float-auto-compute-threshold-based-on-system-parameters-if-self-controllability-threshold-is-not-none-return-self-controllability-threshold-scale-with-surface-gains-for-adaptive-behavior-base-threshold-0-05-self-k1-self-k2-bound-within-reasonable-limits-return-np-clip-base-threshold-0-01-1-0-mathematical-impact"]], "runnable: false @given( gains=st.lists(st.floats(min_value=0.1, max_value=50.0), min_size=4, max_size=4), state=st.lists(st.floats(min_value=-10.0, max_value=10.0), min_size=6, max_size=6) ) def test_sliding_surface_linearity_property(self, gains, state): \u201c\u201d\u201dTest linearity property for all valid parameter combinations.\u201d\u201d\u201d surface = LinearSlidingSurface(gains) state1 = np.array(state) state2 = np.random.uniform(-10, 10, 6) s1 = surface.compute(state1) s2 = surface.compute(state2) s_combined = surface.compute(state1 + state2) # Mathematical property: s(x1 + x2) = s(x1) + s(x2) assert abs(s_combined - (s1 + s2)) < 1e-10 2. **Boundary Layer Monotonicity:**python": [[194, "runnable-false-given-gains-st-lists-st-floats-min-value-0-1-max-value-50-0-min-size-4-max-size-4-state-st-lists-st-floats-min-value-10-0-max-value-10-0-min-size-6-max-size-6-def-test-sliding-surface-linearity-property-self-gains-state-test-linearity-property-for-all-valid-parameter-combinations-surface-linearslidingsurface-gains-state1-np-array-state-state2-np-random-uniform-10-10-6-s1-surface-compute-state1-s2-surface-compute-state2-s-combined-surface-compute-state1-state2-mathematical-property-s-x1-x2-s-x1-s-x2-assert-abs-s-combined-s1-s2-1e-10-2-boundary-layer-monotonicity-python"]], "runnable: false @pytest.mark.parametrize(\u201cgains,expected_valid\u201d, [ ([10, 8, 15, 12, 50, 5], True), # Valid ([0, 8, 15, 12, 50, 5], False), # k1 = 0 invalid ([-10, 8, 15, 12, 50, 5], False), # Negative gain": [[151, "runnable-false-pytest-mark-parametrize-gains-expected-valid-10-8-15-12-50-5-true-valid-0-8-15-12-50-5-false-k1-0-invalid-10-8-15-12-50-5-false-negative-gain"]], "runnable: false ADAPTIVE_SMC_DEPRECATIONS = { \u2018boundary_layer_thickness\u2019: DeprecationMapping( old_name=\u2019boundary_layer_thickness\u2019, new_name=\u2019boundary_layer\u2019, level=DeprecationLevel.WARNING, message=\u201c\u2018boundary_layer_thickness\u2019 parameter renamed to \u2018boundary_layer\u2019.\u201d, migration_guide=( \u201cReplace \u2018boundary_layer_thickness\u2019 with \u2018boundary_layer\u2019 in configuration. \u201c \u201cThe parameter has the same meaning and value range (0.001 to 0.1). \u201c \u201cExample: boundary_layer: 0.01\u201d ), removed_in_version=\u201d3.0.0\u201d, auto_migrate=True ), \u2018adaptation_gain\u2019: DeprecationMapping( old_name=\u2019adaptation_gain\u2019, new_name=\u2019gains[4]\u2019, level=DeprecationLevel.WARNING, message=\u201c\u2018adaptation_gain\u2019 parameter renamed to \u2018gamma\u2019 (included in gains array).\u201d, migration_guide=( \u201cRemove separate \u2018adaptation_gain\u2019 and include gamma as 5th element in gains array. \u201c \u201cThe adaptation gain (gamma) controls parameter estimation rate. \u201c \u201cExample: gains: [k1, k2, \u03bb1, \u03bb2, gamma] where gamma = old adaptation_gain\u201d ), removed_in_version=\u201d3.0.0\u201d, auto_migrate=True, validation_function=lambda x: 0.01 <= x <= 10.0 ), \u2018estimate_bounds\u2019: DeprecationMapping( old_name=\u2019estimate_bounds\u2019, new_name=[\u2018K_min\u2019, \u2018K_max\u2019], level=DeprecationLevel.WARNING, message=\u201c\u2018estimate_bounds\u2019 parameter split into \u2018K_min\u2019 and \u2018K_max\u2019.\u201d, migration_guide=( \u201cReplace \u2018estimate_bounds: [min, max]\u2019 with separate \u2018K_min\u2019 and \u2018K_max\u2019 parameters. \u201c \u201cExample: K_min: 0.1, K_max: 100.0\u201d ), removed_in_version=\u201d3.0.0\u201d, auto_migrate=True ), \u2018adaptation_law\u2019: DeprecationMapping( old_name=\u2019adaptation_law\u2019, new_name=\u2019alpha\u2019, level=DeprecationLevel.INFO, message=\u201c\u2018adaptation_law\u2019 parameter renamed to \u2018alpha\u2019 for clarity.\u201d, migration_guide=( \u201cReplace \u2018adaptation_law\u2019 with \u2018alpha\u2019. \u201c \u201cThe parameter controls adaptation law exponent (typically 0.5 for standard adaptation). \u201c \u201cExample: alpha: 0.5\u201d ), removed_in_version=\u201d4.0.0\u201d, auto_migrate=True )": [[102, "runnable-false-adaptive-smc-deprecations-boundary-layer-thickness-deprecationmapping-old-name-boundary-layer-thickness-new-name-boundary-layer-level-deprecationlevel-warning-message-boundary-layer-thickness-parameter-renamed-to-boundary-layer-migration-guide-replace-boundary-layer-thickness-with-boundary-layer-in-configuration-the-parameter-has-the-same-meaning-and-value-range-0-001-to-0-1-example-boundary-layer-0-01-removed-in-version-3-0-0-auto-migrate-true-adaptation-gain-deprecationmapping-old-name-adaptation-gain-new-name-gains-4-level-deprecationlevel-warning-message-adaptation-gain-parameter-renamed-to-gamma-included-in-gains-array-migration-guide-remove-separate-adaptation-gain-and-include-gamma-as-5th-element-in-gains-array-the-adaptation-gain-gamma-controls-parameter-estimation-rate-example-gains-k1-k2-1-2-gamma-where-gamma-old-adaptation-gain-removed-in-version-3-0-0-auto-migrate-true-validation-function-lambda-x-0-01-x-10-0-estimate-bounds-deprecationmapping-old-name-estimate-bounds-new-name-k-min-k-max-level-deprecationlevel-warning-message-estimate-bounds-parameter-split-into-k-min-and-k-max-migration-guide-replace-estimate-bounds-min-max-with-separate-k-min-and-k-max-parameters-example-k-min-0-1-k-max-100-0-removed-in-version-3-0-0-auto-migrate-true-adaptation-law-deprecationmapping-old-name-adaptation-law-new-name-alpha-level-deprecationlevel-info-message-adaptation-law-parameter-renamed-to-alpha-for-clarity-migration-guide-replace-adaptation-law-with-alpha-the-parameter-controls-adaptation-law-exponent-typically-0-5-for-standard-adaptation-example-alpha-0-5-removed-in-version-4-0-0-auto-migrate-true"]], "runnable: false ALIAS_MAP = { \u2018classic_smc\u2019: \u2018classical_smc\u2019, \u2018smc_classical\u2019: \u2018classical_smc\u2019, \u2018smc_v1\u2019: \u2018classical_smc\u2019, \u2018super_twisting\u2019: \u2018sta_smc\u2019, \u2018sta\u2019: \u2018sta_smc\u2019, \u2018adaptive\u2019: \u2018adaptive_smc\u2019, \u2018hybrid\u2019: \u2018hybrid_adaptive_sta_smc\u2019, \u2018hybrid_sta\u2019: \u2018hybrid_adaptive_sta_smc\u2019,": [[274, "runnable-false-alias-map-classic-smc-classical-smc-smc-classical-classical-smc-smc-v1-classical-smc-super-twisting-sta-smc-sta-sta-smc-adaptive-adaptive-smc-hybrid-hybrid-adaptive-sta-smc-hybrid-sta-hybrid-adaptive-sta-smc"]], "runnable: false CLASSICAL_SMC_DEPRECATIONS = { \u2018gamma\u2019: DeprecationMapping( old_name=\u2019gamma\u2019, new_name=None, level=DeprecationLevel.ERROR, message=\u201c\u2018gamma\u2019 parameter is not valid for classical_smc. Use \u2018boundary_layer\u2019 instead.\u201d, migration_guide=( \u201cClassical SMC uses \u2018boundary_layer\u2019 for chattering reduction, not \u2018gamma\u2019. \u201c \u201cThe \u2018gamma\u2019 parameter is specific to adaptive SMC controllers. \u201c \u201cReplace \u2018gamma: 0.1\u2019 with \u2018boundary_layer: 0.02\u2019 in your configuration.\u201d ), removed_in_version=\u201d2.0.0\u201d, introduced_in_version=\u201d1.8.0\u201d, auto_migrate=False # Cannot auto-migrate due to semantic difference ), \u2018adaptation_rate\u2019: DeprecationMapping( old_name=\u2019adaptation_rate\u2019, new_name=None, level=DeprecationLevel.ERROR, message=\u201c\u2018adaptation_rate\u2019 is not valid for classical_smc. This parameter is only for adaptive_smc.\u201d, migration_guide=( \u201cRemove \u2018adaptation_rate\u2019 from classical SMC configuration. \u201c \u201cIf you need adaptation, use \u2018adaptive_smc\u2019 controller type instead.\u201d ), removed_in_version=\u201d2.0.0\u201d, auto_migrate=True # Can auto-remove invalid parameter ), \u2018switch_function\u2019: DeprecationMapping( old_name=\u2019switch_function\u2019, new_name=\u2019switch_method\u2019, level=DeprecationLevel.WARNING, message=\u201c\u2018switch_function\u2019 parameter renamed to \u2018switch_method\u2019.\u201d, migration_guide=( \u201cReplace \u2018switch_function\u2019 with \u2018switch_method\u2019 in configuration. \u201c \u201cValid values: \u2018sign\u2019, \u2018tanh\u2019, \u2018sigmoid\u2019, \u2018sat\u2019. \u201c \u201cExample: switch_method: \u2018tanh\u2019\u201d ), removed_in_version=\u201d3.0.0\u201d, introduced_in_version=\u201d2.1.0\u201d, auto_migrate=True ), \u2018K_switching\u2019: DeprecationMapping( old_name=\u2019K_switching\u2019, new_name=\u2019gains[4]\u2019, level=DeprecationLevel.WARNING, message=\u201dSeparate \u2018K_switching\u2019 parameter deprecated. Include as 5th element in gains array.\u201d, migration_guide=( \u201cMove K_switching value to gains array as 5th element. \u201c \u201cExample: gains: [k1, k2, \u03bb1, \u03bb2, K_switching, kd] \u201c \u201cOld: K_switching: 15.0, gains: [10, 5, 8, 3, 2] \u201c \u201cNew: gains: [10, 5, 8, 3, 15, 2]\u201d ), removed_in_version=\u201d3.0.0\u201d, auto_migrate=True )": [[102, "runnable-false-classical-smc-deprecations-gamma-deprecationmapping-old-name-gamma-new-name-none-level-deprecationlevel-error-message-gamma-parameter-is-not-valid-for-classical-smc-use-boundary-layer-instead-migration-guide-classical-smc-uses-boundary-layer-for-chattering-reduction-not-gamma-the-gamma-parameter-is-specific-to-adaptive-smc-controllers-replace-gamma-0-1-with-boundary-layer-0-02-in-your-configuration-removed-in-version-2-0-0-introduced-in-version-1-8-0-auto-migrate-false-cannot-auto-migrate-due-to-semantic-difference-adaptation-rate-deprecationmapping-old-name-adaptation-rate-new-name-none-level-deprecationlevel-error-message-adaptation-rate-is-not-valid-for-classical-smc-this-parameter-is-only-for-adaptive-smc-migration-guide-remove-adaptation-rate-from-classical-smc-configuration-if-you-need-adaptation-use-adaptive-smc-controller-type-instead-removed-in-version-2-0-0-auto-migrate-true-can-auto-remove-invalid-parameter-switch-function-deprecationmapping-old-name-switch-function-new-name-switch-method-level-deprecationlevel-warning-message-switch-function-parameter-renamed-to-switch-method-migration-guide-replace-switch-function-with-switch-method-in-configuration-valid-values-sign-tanh-sigmoid-sat-example-switch-method-tanh-removed-in-version-3-0-0-introduced-in-version-2-1-0-auto-migrate-true-k-switching-deprecationmapping-old-name-k-switching-new-name-gains-4-level-deprecationlevel-warning-message-separate-k-switching-parameter-deprecated-include-as-5th-element-in-gains-array-migration-guide-move-k-switching-value-to-gains-array-as-5th-element-example-gains-k1-k2-1-2-k-switching-kd-old-k-switching-15-0-gains-10-5-8-3-2-new-gains-10-5-8-3-15-2-removed-in-version-3-0-0-auto-migrate-true"]], "runnable: false CONTROLLER_ALIASES = { \u2018classic_smc\u2019: \u2018classical_smc\u2019, \u2018smc_classical\u2019: \u2018classical_smc\u2019, \u2018smc_v1\u2019: \u2018classical_smc\u2019, \u2018super_twisting\u2019: \u2018sta_smc\u2019, \u2018sta\u2019: \u2018sta_smc\u2019, \u2018adaptive\u2019: \u2018adaptive_smc\u2019, \u2018hybrid\u2019: \u2018hybrid_adaptive_sta_smc\u2019,": [[80, "runnable-false-controller-aliases-classic-smc-classical-smc-smc-classical-classical-smc-smc-v1-classical-smc-super-twisting-sta-smc-sta-sta-smc-adaptive-adaptive-smc-hybrid-hybrid-adaptive-sta-smc"]], "runnable: false CONTROLLER_REGISTRY = { \u2018classical_smc\u2019: { \u2018class\u2019: ModularClassicalSMC, \u2018config_class\u2019: ClassicalSMCConfig, \u2018default_gains\u2019: [20.0, 15.0, 12.0, 8.0, 35.0, 5.0], \u2018gain_count\u2019: 6, \u2018description\u2019: \u2018Classical sliding mode controller with boundary layer\u2019, \u2018supports_dynamics\u2019: True, \u2018required_params\u2019: [\u2018gains\u2019, \u2018max_force\u2019, \u2018boundary_layer\u2019] }, # \u2026 additional controllers": [[103, "runnable-false-controller-registry-classical-smc-class-modularclassicalsmc-config-class-classicalsmcconfig-default-gains-20-0-15-0-12-0-8-0-35-0-5-0-gain-count-6-description-classical-sliding-mode-controller-with-boundary-layer-supports-dynamics-true-required-params-gains-max-force-boundary-layer-additional-controllers"]], "runnable: false CONTROLLER_REGISTRY = { \u2018classical_smc\u2019: { \u2018class\u2019: ModularClassicalSMC, \u2018config_class\u2019: ClassicalSMCConfig, \u2018default_gains\u2019: [5.0, 5.0, 5.0, 0.5, 0.5, 0.5] }, \u2018sta_smc\u2019: { \u2018class\u2019: ModularSuperTwistingSMC, \u2018config_class\u2019: STASMCConfig, \u2018default_gains\u2019: [5.0, 3.0, 4.0, 4.0, 0.4, 0.4] }, \u2018adaptive_smc\u2019: { \u2018class\u2019: ModularAdaptiveSMC, \u2018config_class\u2019: AdaptiveSMCConfig, \u2018default_gains\u2019: [10.0, 8.0, 5.0, 4.0, 1.0] }, \u2018hybrid_adaptive_sta_smc\u2019: { \u2018class\u2019: ModularHybridSMC, \u2018config_class\u2019: HybridAdaptiveSTASMCConfig, \u2018default_gains\u2019: [5.0, 5.0, 5.0, 0.5] }": [[274, "runnable-false-controller-registry-classical-smc-class-modularclassicalsmc-config-class-classicalsmcconfig-default-gains-5-0-5-0-5-0-0-5-0-5-0-5-sta-smc-class-modularsupertwistingsmc-config-class-stasmcconfig-default-gains-5-0-3-0-4-0-4-0-0-4-0-4-adaptive-smc-class-modularadaptivesmc-config-class-adaptivesmcconfig-default-gains-10-0-8-0-5-0-4-0-1-0-hybrid-adaptive-sta-smc-class-modularhybridsmc-config-class-hybridadaptivestasmcconfig-default-gains-5-0-5-0-5-0-0-5"]], "runnable: false CONTROLLER_REGISTRY: Dict[str, Dict[str, Any]] = { \u2018controller_type\u2019: { \u2018class\u2019: ControllerClass, # Controller class reference \u2018config_class\u2019: ConfigClass, # Configuration class reference \u2018default_gains\u2019: List[float], # Default gain vector \u2018gain_count\u2019: int, # Expected number of gains \u2018description\u2019: str, # Human-readable description \u2018supports_dynamics\u2019: bool, # Whether controller uses dynamics model \u2018required_params\u2019: List[str] # Required configuration parameters }": [[51, "runnable-false-controller-registry-dict-str-dict-str-any-controller-type-class-controllerclass-controller-class-reference-config-class-configclass-configuration-class-reference-default-gains-list-float-default-gain-vector-gain-count-int-expected-number-of-gains-description-str-human-readable-description-supports-dynamics-bool-whether-controller-uses-dynamics-model-required-params-list-str-required-configuration-parameters"]], "runnable: false HYBRID_SMC_DEPRECATIONS = { \u2018mode\u2019: DeprecationMapping( old_name=\u2019mode\u2019, new_name=\u2019hybrid_mode\u2019, level=DeprecationLevel.WARNING, message=\u201c\u2018mode\u2019 parameter renamed to \u2018hybrid_mode\u2019.\u201d, migration_guide=( \u201cReplace \u2018mode\u2019 with \u2018hybrid_mode\u2019 and use HybridMode enum values. \u201c \u201cAvailable modes: \u2018CLASSICAL_ADAPTIVE\u2019, \u2018ADAPTIVE_STA\u2019, \u2018CLASSICAL_STA\u2019. \u201c \u201cExample: hybrid_mode: \u2018CLASSICAL_ADAPTIVE\u2019\u201d ), removed_in_version=\u201d3.0.0\u201d, auto_migrate=True ), \u2018switch_threshold\u2019: DeprecationMapping( old_name=\u2019switch_threshold\u2019, new_name=\u2019switching_criteria\u2019, level=DeprecationLevel.WARNING, message=\u201c\u2018switch_threshold\u2019 renamed to \u2018switching_criteria\u2019 with enhanced functionality.\u201d, migration_guide=( \u201cReplace \u2018switch_threshold\u2019 with \u2018switching_criteria\u2019 configuration. \u201c \u201cNew format supports multiple criteria: error_threshold, time_threshold, performance_threshold. \u201c \u201cExample: switching_criteria: {error_threshold: 0.1, time_threshold: 2.0}\u201d ), removed_in_version=\u201d3.0.0\u201d, auto_migrate=False # Requires manual migration due to format change ), \u2018sub_controller_gains\u2019: DeprecationMapping( old_name=\u2019sub_controller_gains\u2019, new_name=[\u2018classical_config\u2019, \u2018adaptive_config\u2019], level=DeprecationLevel.ERROR, message=\u201c\u2018sub_controller_gains\u2019 replaced with full sub-controller configurations.\u201d, migration_guide=( \u201cReplace \u2018sub_controller_gains\u2019 with complete \u2018classical_config\u2019 and \u2018adaptive_config\u2019 objects. \u201c \u201cThis provides full parameter control for each sub-controller. \u201c \u201cSee hybrid SMC configuration examples in documentation.\u201d ), removed_in_version=\u201d2.0.0\u201d, auto_migrate=False )": [[102, "runnable-false-hybrid-smc-deprecations-mode-deprecationmapping-old-name-mode-new-name-hybrid-mode-level-deprecationlevel-warning-message-mode-parameter-renamed-to-hybrid-mode-migration-guide-replace-mode-with-hybrid-mode-and-use-hybridmode-enum-values-available-modes-classical-adaptive-adaptive-sta-classical-sta-example-hybrid-mode-classical-adaptive-removed-in-version-3-0-0-auto-migrate-true-switch-threshold-deprecationmapping-old-name-switch-threshold-new-name-switching-criteria-level-deprecationlevel-warning-message-switch-threshold-renamed-to-switching-criteria-with-enhanced-functionality-migration-guide-replace-switch-threshold-with-switching-criteria-configuration-new-format-supports-multiple-criteria-error-threshold-time-threshold-performance-threshold-example-switching-criteria-error-threshold-0-1-time-threshold-2-0-removed-in-version-3-0-0-auto-migrate-false-requires-manual-migration-due-to-format-change-sub-controller-gains-deprecationmapping-old-name-sub-controller-gains-new-name-classical-config-adaptive-config-level-deprecationlevel-error-message-sub-controller-gains-replaced-with-full-sub-controller-configurations-migration-guide-replace-sub-controller-gains-with-complete-classical-config-and-adaptive-config-objects-this-provides-full-parameter-control-for-each-sub-controller-see-hybrid-smc-configuration-examples-in-documentation-removed-in-version-2-0-0-auto-migrate-false"]], "runnable: false STA_SMC_DEPRECATIONS = { \u2018K1\u2019: DeprecationMapping( old_name=\u2019K1\u2019, new_name=\u2019gains[0]\u2019, level=DeprecationLevel.WARNING, message=\u201dSeparate K1/K2 parameters deprecated. Use gains array instead.\u201d, migration_guide=( \u201cInclude K1, K2 as first two elements in gains array: [K1, K2, k1, k2, lam1, lam2]. \u201c \u201cThis provides consistent parameter interface across all SMC controllers. \u201c \u201cExample: gains: [35.0, 20.0, 25.0, 18.0, 12.0, 8.0]\u201d ), removed_in_version=\u201d3.0.0\u201d, auto_migrate=True ), \u2018K2\u2019: DeprecationMapping( old_name=\u2019K2\u2019, new_name=\u2019gains[1]\u2019, level=DeprecationLevel.WARNING, message=\u201dSeparate K1/K2 parameters deprecated. Use gains array instead.\u201d, migration_guide=( \u201cInclude K1, K2 as first two elements in gains array: [K1, K2, k1, k2, lam1, lam2]. \u201c \u201cEnsure K1 > K2 for optimal STA performance. \u201c \u201cExample: gains: [35.0, 20.0, 25.0, 18.0, 12.0, 8.0]\u201d ), removed_in_version=\u201d3.0.0\u201d, auto_migrate=True ), \u2018alpha_power\u2019: DeprecationMapping( old_name=\u2019alpha_power\u2019, new_name=\u2019power_exponent\u2019, level=DeprecationLevel.WARNING, message=\u201c\u2018alpha_power\u2019 parameter renamed to \u2018power_exponent\u2019 for clarity.\u201d, migration_guide=( \u201cReplace \u2018alpha_power\u2019 with \u2018power_exponent\u2019. \u201c \u201cStandard STA uses power_exponent: 0.5 for finite-time convergence. \u201c \u201cValid range: (0, 1). Example: power_exponent: 0.5\u201d ), removed_in_version=\u201d3.0.0\u201d, auto_migrate=True, validation_function=lambda x: 0.0 < x < 1.0 ), \u2018switching_function_type\u2019: DeprecationMapping( old_name=\u2019switching_function_type\u2019, new_name=\u2019switch_method\u2019, level=DeprecationLevel.INFO, message=\u201c\u2018switching_function_type\u2019 renamed to \u2018switch_method\u2019 for consistency.\u201d, migration_guide=( \u201cReplace \u2018switching_function_type\u2019 with \u2018switch_method\u2019. \u201c \u201cValid options: \u2018tanh\u2019, \u2018sigmoid\u2019, \u2018sat\u2019. \u201c \u201cSTA-SMC typically uses \u2018tanh\u2019 for smooth switching.\u201d ), removed_in_version=\u201d4.0.0\u201d, auto_migrate=True )": [[102, "runnable-false-sta-smc-deprecations-k1-deprecationmapping-old-name-k1-new-name-gains-0-level-deprecationlevel-warning-message-separate-k1-k2-parameters-deprecated-use-gains-array-instead-migration-guide-include-k1-k2-as-first-two-elements-in-gains-array-k1-k2-k1-k2-lam1-lam2-this-provides-consistent-parameter-interface-across-all-smc-controllers-example-gains-35-0-20-0-25-0-18-0-12-0-8-0-removed-in-version-3-0-0-auto-migrate-true-k2-deprecationmapping-old-name-k2-new-name-gains-1-level-deprecationlevel-warning-message-separate-k1-k2-parameters-deprecated-use-gains-array-instead-migration-guide-include-k1-k2-as-first-two-elements-in-gains-array-k1-k2-k1-k2-lam1-lam2-ensure-k1-k2-for-optimal-sta-performance-example-gains-35-0-20-0-25-0-18-0-12-0-8-0-removed-in-version-3-0-0-auto-migrate-true-alpha-power-deprecationmapping-old-name-alpha-power-new-name-power-exponent-level-deprecationlevel-warning-message-alpha-power-parameter-renamed-to-power-exponent-for-clarity-migration-guide-replace-alpha-power-with-power-exponent-standard-sta-uses-power-exponent-0-5-for-finite-time-convergence-valid-range-0-1-example-power-exponent-0-5-removed-in-version-3-0-0-auto-migrate-true-validation-function-lambda-x-0-0-x-1-0-switching-function-type-deprecationmapping-old-name-switching-function-type-new-name-switch-method-level-deprecationlevel-info-message-switching-function-type-renamed-to-switch-method-for-consistency-migration-guide-replace-switching-function-type-with-switch-method-valid-options-tanh-sigmoid-sat-sta-smc-typically-uses-tanh-for-smooth-switching-removed-in-version-4-0-0-auto-migrate-true"]], "runnable: false benchmark_metadata = { \u2018timestamp\u2019: datetime.now().isoformat(), \u2018config_hash\u2019: hashlib.md5(config_content).hexdigest(), \u2018random_seed\u2019: 1234, \u2018n_trials\u2019: 30, \u2018environment\u2019: { \u2018python_version\u2019: sys.version, \u2018numpy_version\u2019: np.version, \u2018platform\u2019: platform.platform() }": [[68, "runnable-false-benchmark-metadata-timestamp-datetime-now-isoformat-config-hash-hashlib-md5-config-content-hexdigest-random-seed-1234-n-trials-30-environment-python-version-sys-version-numpy-version-np-version-platform-platform-platform"]], "runnable: false class AdaptiveSMCOutput(NamedTuple): \u201c\u201d\u201dReturn type for AdaptiveSMC.compute_control(). Attributes: u: Saturated control input (N) state: Updated adaptation states (e.g., K_adaptive) history: History dictionary sigma: Current sliding surface value \u201c\u201d\u201d u: float state: Tuple[float, \u2026] history: Dict[str, Any] sigma: float": [[79, "runnable-false-class-adaptivesmcoutput-namedtuple-return-type-for-adaptivesmc-compute-control-attributes-u-saturated-control-input-n-state-updated-adaptation-states-e-g-k-adaptive-history-history-dictionary-sigma-current-sliding-surface-value-u-float-state-tuple-float-history-dict-str-any-sigma-float"]], "runnable: false class AttributeConfig: \u201c\u201d\u201dConfiguration using attributes.\u201d\u201d\u201d def init(self): # Create controller configurations as attributes self.classical_smc = type(\u2018Config\u2019, (), { \u2018gains\u2019: [25, 20, 15, 10, 40, 6], \u2018max_force\u2019: 160.0, \u2018boundary_layer\u2019: 0.025, \u2018dt\u2019: 0.001 })() self.adaptive_smc = type(\u2018Config\u2019, (), { \u2018gains\u2019: [30, 22, 18, 12, 5.0], \u2018max_force\u2019: 160.0, \u2018dt\u2019: 0.001, \u2018leak_rate\u2019: 0.02 })() # Initialize controllers namespace": [[72, "runnable-false-class-attributeconfig-configuration-using-attributes-def-init-self-create-controller-configurations-as-attributes-self-classical-smc-type-config-gains-25-20-15-10-40-6-max-force-160-0-boundary-layer-0-025-dt-0-001-self-adaptive-smc-type-config-gains-30-22-18-12-5-0-max-force-160-0-dt-0-001-leak-rate-0-02-initialize-controllers-namespace"]], "runnable: false class BatchOrchestrator(BaseOrchestrator): \u201c\u201d\u201dBatch simulation orchestrator for vectorized execution.\u201d\u201d\u201d def execute( self, initial_state: np.ndarray, control_inputs: np.ndarray, dt: float, horizon: int, **kwargs ) -> ResultContainer: \u201c\u201d\u201dExecute batch simulation.\u201d\u201d\u201d": [[61, "runnable-false-class-batchorchestrator-baseorchestrator-batch-simulation-orchestrator-for-vectorized-execution-def-execute-self-initial-state-np-ndarray-control-inputs-np-ndarray-dt-float-horizon-int-kwargs-resultcontainer-execute-batch-simulation"]], "runnable: false class ClassicalSMC: \u201c\u201d\u201d Implements classical SMC from Utkin (1992). This controller uses sliding surface design with boundary layers to reduce chattering in control systems. \u201c\u201d\u201d # \u2705 Regex: Detects implementation claim # Scope: Unknown (could be module or class) def compute_control(self, state: np.ndarray) -> float: \u201c\u201d\u201d Computes control force based on sliding surface. Implements reaching law from Edwards & Spurgeon (1998) with adaptive gain scheduling. \u201c\u201d\u201d # \u274c Regex: May misattribute scope # (is this class-level or method-level?) def _inner_helper(): \u201c\u201d\u201dHelper implements saturation from Slotine.\u201d\u201d\u201d # \u274c\u274c Regex: Completely misses nested function docstrings pass": [[297, "runnable-false-class-classicalsmc-implements-classical-smc-from-utkin-1992-this-controller-uses-sliding-surface-design-with-boundary-layers-to-reduce-chattering-in-control-systems-regex-detects-implementation-claim-scope-unknown-could-be-module-or-class-def-compute-control-self-state-np-ndarray-float-computes-control-force-based-on-sliding-surface-implements-reaching-law-from-edwards-spurgeon-1998-with-adaptive-gain-scheduling-regex-may-misattribute-scope-is-this-class-level-or-method-level-def-inner-helper-helper-implements-saturation-from-slotine-regex-completely-misses-nested-function-docstrings-pass"]], "runnable: false class ClassicalSMCOutput(NamedTuple): \u201c\u201d\u201dReturn type for ClassicalSMC.compute_control(). Attributes: u: Saturated control input (N) state: Internal controller state (empty tuple for stateless) history: History dictionary for debugging/plotting \u201c\u201d\u201d u: float state: Tuple[Any, \u2026] history: Dict[str, Any]": [[79, "runnable-false-class-classicalsmcoutput-namedtuple-return-type-for-classicalsmc-compute-control-attributes-u-saturated-control-input-n-state-internal-controller-state-empty-tuple-for-stateless-history-history-dictionary-for-debugging-plotting-u-float-state-tuple-any-history-dict-str-any"]], "runnable: false class ConfigurationErrorHandler: \u201c\u201d\u201d error handling and diagnostic system for PSO configuration. \u201c\u201d\u201d ERROR_CATEGORIES = { \u2018SYNTAX\u2019: { \u2018severity\u2019: \u2018CRITICAL\u2019, \u2018auto_fixable\u2019: False, \u2018description\u2019: \u2018YAML syntax or structure errors\u2019 }, \u2018TYPE\u2019: { \u2018severity\u2019: \u2018CRITICAL\u2019, \u2018auto_fixable\u2019: True, \u2018description\u2019: \u2018Data type mismatches\u2019 }, \u2018BOUNDS\u2019: { \u2018severity\u2019: \u2018HIGH\u2019, \u2018auto_fixable\u2019: True, \u2018description\u2019: \u2018Parameter bounds violations\u2019 }, \u2018MATHEMATICAL\u2019: { \u2018severity\u2019: \u2018HIGH\u2019, \u2018auto_fixable\u2019: False, \u2018description\u2019: \u2018Mathematical consistency violations\u2019 }, \u2018PERFORMANCE\u2019: { \u2018severity\u2019: \u2018MEDIUM\u2019, \u2018auto_fixable\u2019: True, \u2018description\u2019: \u2018Suboptimal performance configuration\u2019 }, \u2018COMPATIBILITY\u2019: { \u2018severity\u2019: \u2018MEDIUM\u2019, \u2018auto_fixable\u2019: True, \u2018description\u2019: \u2018Controller compatibility issues\u2019 } } def diagnose_configuration_errors(self, config: dict, controller_type: str = None) -> dict: \u201c\u201d\u201d configuration error diagnosis with auto-fix suggestions. \u201c\u201d\u201d diagnosis = { \u2018errors\u2019: [], \u2018warnings\u2019: [], \u2018auto_fixes\u2019: [], \u2018manual_actions\u2019: [], \u2018overall_status\u2019: \u2018UNKNOWN\u2019 } # Run diagnostic checks for category, info in self.ERROR_CATEGORIES.items(): category_errors = self._check_category(category, config, controller_type) for error in category_errors: error[\u2018category\u2019] = category error[\u2018severity\u2019] = info[\u2018severity\u2019] error[\u2018auto_fixable\u2019] = info[\u2018auto_fixable\u2019] if error[\u2018severity\u2019] == \u2018CRITICAL\u2019: diagnosis[\u2018errors\u2019].append(error) else: diagnosis[\u2018warnings\u2019].append(error) # Generate fix suggestions if error[\u2018auto_fixable\u2019]: fix = self._generate_auto_fix(error, config) if fix: diagnosis[\u2018auto_fixes\u2019].append(fix) else: manual_action = self._generate_manual_action(error) if manual_action: diagnosis[\u2018manual_actions\u2019].append(manual_action) # Determine overall status if diagnosis[\u2018errors\u2019]: diagnosis[\u2018overall_status\u2019] = \u2018CRITICAL\u2019 elif len(diagnosis[\u2018warnings\u2019]) > 5: diagnosis[\u2018overall_status\u2019] = \u2018NEEDS_ATTENTION\u2019 elif diagnosis[\u2018warnings\u2019]: diagnosis[\u2018overall_status\u2019] = \u2018MINOR_ISSUES\u2019 else: diagnosis[\u2018overall_status\u2019] = \u2018HEALTHY\u2019 return diagnosis def _check_category(self, category: str, config: dict, controller_type: str) -> list: \u201c\u201d\u201d Check specific error category and return found issues. \u201c\u201d\u201d errors = [] if category == \u2018MATHEMATICAL\u2019: # PSO convergence check if \u2018algorithm_params\u2019 in config: params = config[\u2018algorithm_params\u2019] if \u2018c1\u2019 in params and \u2018c2\u2019 in params: phi = params[\u2018c1\u2019] + params[\u2018c2\u2019] if phi <= 4.0: errors.append({ \u2018code\u2019: \u2018PSO_CONVERGENCE_RISK\u2019, \u2018message\u2019: f\u2019PSO may not converge: \u03c6 = c\u2081 + c\u2082 = {phi:.3f} \u2264 4.0\u2019, \u2018location\u2019: \u2018algorithm_params.c1, algorithm_params.c2\u2019, \u2018impact\u2019: \u2018Optimization may fail to converge\u2019 }) elif category == \u2018BOUNDS\u2019 and controller_type: # Issue #2 specific checks for STA-SMC if controller_type == \u2018sta_smc\u2019 and \u2018bounds\u2019 in config: bounds = config[\u2018bounds\u2019] if \u2018sta_smc\u2019 in bounds and \u2018max\u2019 in bounds[\u2018sta_smc\u2019]: max_bounds = bounds[\u2018sta_smc\u2019][\u2018max\u2019] if len(max_bounds) >= 6: lambda1_max, lambda2_max = max_bounds[4], max_bounds[5] if lambda1_max > 10.0 or lambda2_max > 10.0: errors.append({ \u2018code\u2019: \u2018ISSUE2_BOUNDS_VIOLATION\u2019, \u2018message\u2019: f\u2019STA-SMC lambda bounds may cause overshoot: \u03bb\u2081_max={lambda1_max}, \u03bb\u2082_max={lambda2_max}\u2019, \u2018location\u2019: \u2018bounds.sta_smc.max[4:6]\u2019, \u2018impact\u2019: \u2018May cause >5% overshoot (Issue #2 regression)\u2019 }) elif category == \u2018PERFORMANCE\u2019: # Suboptimal parameter detection if \u2018algorithm_params\u2019 in config: params = config[\u2018algorithm_params\u2019] if \u2018n_particles\u2019 in params: n_particles = params[\u2018n_particles\u2019] if n_particles < 10 or n_particles > 50: errors.append({ \u2018code\u2019: \u2018SUBOPTIMAL_SWARM_SIZE\u2019, \u2018message\u2019: f\u2019Swarm size {n_particles} outside optimal range [10, 50]\u2019, \u2018location\u2019: \u2018algorithm_params.n_particles\u2019, \u2018impact\u2019: \u2018Suboptimal convergence speed or quality\u2019 }) return errors def _generate_auto_fix(self, error: dict, config: dict) -> dict: \u201c\u201d\u201d Generate automatic fix for fixable errors. \u201c\u201d\u201d if error[\u2018code\u2019] == \u2018PSO_CONVERGENCE_RISK\u2019: return { \u2018error_code\u2019: error[\u2018code\u2019], \u2018fix_type\u2019: \u2018parameter_adjustment\u2019, \u2018action\u2019: \u2018Increase c\u2081 and c\u2082 to ensure \u03c6 > 4\u2019, \u2018changes\u2019: { \u2018algorithm_params.c1\u2019: 2.1, \u2018algorithm_params.c2\u2019: 2.1 }, \u2018justification\u2019: \u2018Ensures PSO convergence with \u03c6 = 4.2 > 4\u2019 } elif error[\u2018code\u2019] == \u2018ISSUE2_BOUNDS_VIOLATION\u2019: return { \u2018error_code\u2019: error[\u2018code\u2019], \u2018fix_type\u2019: \u2018bounds_correction\u2019, \u2018action\u2019: \u2018Apply Issue #2 lambda bounds corrections\u2019, \u2018changes\u2019: { \u2018bounds.sta_smc.max[4]\u2019: 10.0, # lambda1 \u2018bounds.sta_smc.max[5]\u2019: 10.0 # lambda2 }, \u2018justification\u2019: \u2018Prevents overshoot regression from Issue #2\u2019 } elif error[\u2018code\u2019] == \u2018SUBOPTIMAL_SWARM_SIZE\u2019: current_size = config[\u2018algorithm_params\u2019][\u2018n_particles\u2019] optimal_size = np.clip(current_size, 15, 25) # Clamp to optimal range return { \u2018error_code\u2019: error[\u2018code\u2019], \u2018fix_type\u2019: \u2018parameter_optimization\u2019, \u2018action\u2019: f\u2019Adjust swarm size to optimal range\u2019, \u2018changes\u2019: { \u2018algorithm_params.n_particles\u2019: optimal_size }, \u2018justification\u2019: f\u2019Optimizes convergence for {optimal_size} particles\u2019 } return None def apply_auto_fixes(self, config: dict, fixes: list) -> tuple: \u201c\u201d\u201d Apply automatic fixes to configuration. Returns: tuple: (fixed_config, applied_fixes, failed_fixes) \u201c\u201d\u201d fixed_config = config.copy() applied_fixes = [] failed_fixes = [] for fix in fixes: try: for path, new_value in fix[\u2018changes\u2019].items(): self._set_nested_value(fixed_config, path, new_value) applied_fixes.append(fix) except Exception as e: fix[\u2018error\u2019] = str(e) failed_fixes.append(fix) return fixed_config, applied_fixes, failed_fixes def _set_nested_value(self, config: dict, path: str, value: any) -> None: \u201c\u201d\u201d Set nested configuration value using dot notation path. \u201c\u201d\u201d keys = path.split(\u2018.\u2019) current = config for key in keys[:-1]: if \u2018[\u2019 in key and \u2018]\u2019 in key: # Handle array indexing array_key, index_str = key.split(\u2018[\u2019) index = int(index_str.rstrip(\u2018]\u2019)) if array_key not in current: current[array_key] = [] current = current[array_key] # Extend array if necessary while len(current) <= index: current.append(None) current = current[index] else: if key not in current: current[key] = {} current = current[key] # Set the final value final_key = keys[-1] if \u2018[\u2019 in final_key and \u2018]\u2019 in final_key: array_key, index_str = final_key.split(\u2018[\u2019) index = int(index_str.rstrip(\u2018]\u2019)) if array_key not in current: current[array_key] = [] while len(current[array_key]) <= index: current[array_key].append(None) current[array_key][index] = value else: current[final_key] = value": [[247, "runnable-false-class-configurationerrorhandler-error-handling-and-diagnostic-system-for-pso-configuration-error-categories-syntax-severity-critical-auto-fixable-false-description-yaml-syntax-or-structure-errors-type-severity-critical-auto-fixable-true-description-data-type-mismatches-bounds-severity-high-auto-fixable-true-description-parameter-bounds-violations-mathematical-severity-high-auto-fixable-false-description-mathematical-consistency-violations-performance-severity-medium-auto-fixable-true-description-suboptimal-performance-configuration-compatibility-severity-medium-auto-fixable-true-description-controller-compatibility-issues-def-diagnose-configuration-errors-self-config-dict-controller-type-str-none-dict-configuration-error-diagnosis-with-auto-fix-suggestions-diagnosis-errors-warnings-auto-fixes-manual-actions-overall-status-unknown-run-diagnostic-checks-for-category-info-in-self-error-categories-items-category-errors-self-check-category-category-config-controller-type-for-error-in-category-errors-error-category-category-error-severity-info-severity-error-auto-fixable-info-auto-fixable-if-error-severity-critical-diagnosis-errors-append-error-else-diagnosis-warnings-append-error-generate-fix-suggestions-if-error-auto-fixable-fix-self-generate-auto-fix-error-config-if-fix-diagnosis-auto-fixes-append-fix-else-manual-action-self-generate-manual-action-error-if-manual-action-diagnosis-manual-actions-append-manual-action-determine-overall-status-if-diagnosis-errors-diagnosis-overall-status-critical-elif-len-diagnosis-warnings-5-diagnosis-overall-status-needs-attention-elif-diagnosis-warnings-diagnosis-overall-status-minor-issues-else-diagnosis-overall-status-healthy-return-diagnosis-def-check-category-self-category-str-config-dict-controller-type-str-list-check-specific-error-category-and-return-found-issues-errors-if-category-mathematical-pso-convergence-check-if-algorithm-params-in-config-params-config-algorithm-params-if-c1-in-params-and-c2-in-params-phi-params-c1-params-c2-if-phi-4-0-errors-append-code-pso-convergence-risk-message-f-pso-may-not-converge-c1-c2-phi-3f-4-0-location-algorithm-params-c1-algorithm-params-c2-impact-optimization-may-fail-to-converge-elif-category-bounds-and-controller-type-issue-2-specific-checks-for-sta-smc-if-controller-type-sta-smc-and-bounds-in-config-bounds-config-bounds-if-sta-smc-in-bounds-and-max-in-bounds-sta-smc-max-bounds-bounds-sta-smc-max-if-len-max-bounds-6-lambda1-max-lambda2-max-max-bounds-4-max-bounds-5-if-lambda1-max-10-0-or-lambda2-max-10-0-errors-append-code-issue2-bounds-violation-message-f-sta-smc-lambda-bounds-may-cause-overshoot-1-max-lambda1-max-2-max-lambda2-max-location-bounds-sta-smc-max-4-6-impact-may-cause-5-overshoot-issue-2-regression-elif-category-performance-suboptimal-parameter-detection-if-algorithm-params-in-config-params-config-algorithm-params-if-n-particles-in-params-n-particles-params-n-particles-if-n-particles-10-or-n-particles-50-errors-append-code-suboptimal-swarm-size-message-f-swarm-size-n-particles-outside-optimal-range-10-50-location-algorithm-params-n-particles-impact-suboptimal-convergence-speed-or-quality-return-errors-def-generate-auto-fix-self-error-dict-config-dict-dict-generate-automatic-fix-for-fixable-errors-if-error-code-pso-convergence-risk-return-error-code-error-code-fix-type-parameter-adjustment-action-increase-c1-and-c2-to-ensure-4-changes-algorithm-params-c1-2-1-algorithm-params-c2-2-1-justification-ensures-pso-convergence-with-4-2-4-elif-error-code-issue2-bounds-violation-return-error-code-error-code-fix-type-bounds-correction-action-apply-issue-2-lambda-bounds-corrections-changes-bounds-sta-smc-max-4-10-0-lambda1-bounds-sta-smc-max-5-10-0-lambda2-justification-prevents-overshoot-regression-from-issue-2-elif-error-code-suboptimal-swarm-size-current-size-config-algorithm-params-n-particles-optimal-size-np-clip-current-size-15-25-clamp-to-optimal-range-return-error-code-error-code-fix-type-parameter-optimization-action-f-adjust-swarm-size-to-optimal-range-changes-algorithm-params-n-particles-optimal-size-justification-f-optimizes-convergence-for-optimal-size-particles-return-none-def-apply-auto-fixes-self-config-dict-fixes-list-tuple-apply-automatic-fixes-to-configuration-returns-tuple-fixed-config-applied-fixes-failed-fixes-fixed-config-config-copy-applied-fixes-failed-fixes-for-fix-in-fixes-try-for-path-new-value-in-fix-changes-items-self-set-nested-value-fixed-config-path-new-value-applied-fixes-append-fix-except-exception-as-e-fix-error-str-e-failed-fixes-append-fix-return-fixed-config-applied-fixes-failed-fixes-def-set-nested-value-self-config-dict-path-str-value-any-none-set-nested-configuration-value-using-dot-notation-path-keys-path-split-current-config-for-key-in-keys-1-if-in-key-and-in-key-handle-array-indexing-array-key-index-str-key-split-index-int-index-str-rstrip-if-array-key-not-in-current-current-array-key-current-current-array-key-extend-array-if-necessary-while-len-current-index-current-append-none-current-current-index-else-if-key-not-in-current-current-key-current-current-key-set-the-final-value-final-key-keys-1-if-in-final-key-and-in-final-key-array-key-index-str-final-key-split-index-int-index-str-rstrip-if-array-key-not-in-current-current-array-key-while-len-current-array-key-index-current-array-key-append-none-current-array-key-index-value-else-current-final-key-value"]], "runnable: false class ConfigurationMigrator: \u201c\u201d\u201d Automatic migration framework for PSO configuration schema evolution. \u201c\u201d\u201d def init(self): self.migration_rules = { \u201c1.0\u201d: self._migrate_from_v1_0, \u201c1.5\u201d: self._migrate_from_v1_5, \u201c2.0\u201d: self._migrate_from_v2_0 } def migrate_configuration(self, config: dict, source_version: str) -> tuple: \u201c\u201d\u201d Migrate configuration from source version to current schema. Returns: tuple: (migrated_config, migration_warnings, compatibility_issues) \u201c\u201d\u201d if source_version not in self.migration_rules: raise ValueError(f\u201dUnsupported source version: {source_version}\u201d) migrated_config = config.copy() warnings = [] issues = [] # Apply migration rules in sequence current_version = source_version while current_version != CURRENT_SCHEMA_VERSION: migrator = self.migration_rules[current_version] migrated_config, step_warnings = migrator(migrated_config) warnings.extend(step_warnings) current_version = self._get_next_version(current_version) # Validate migrated configuration validation_result = PSO_ConfigurationValidator().validate_complete_config(migrated_config) if not validation_result.is_valid: issues.extend(validation_result.errors) return migrated_config, warnings, issues def _migrate_from_v1_0(self, config: dict) -> tuple: \u201c\u201d\u201d Migrate from v1.0 to v1.5: Remove deprecated fields, update bounds. \u201c\u201d\u201d migrated = config.copy() warnings = [] # Remove deprecated fields deprecated_fields = [\u2018n_processes\u2019, \u2018hyper_trials\u2019, \u2018hyper_search\u2019, \u2018study_timeout\u2019] for field in deprecated_fields: if field in migrated.get(\u2018pso\u2019, {}): del migrated[\u2018pso\u2019][field] warnings.append(f\u201dRemoved deprecated field: {field}\u201d) # Update PSO bounds structure if \u2018pso\u2019 in migrated and \u2018bounds\u2019 in migrated[\u2018pso\u2019]: old_bounds = migrated[\u2018pso\u2019][\u2018bounds\u2019] new_bounds = self._restructure_bounds_v1_5(old_bounds) migrated[\u2018pso\u2019][\u2018bounds\u2019] = new_bounds warnings.append(\u201cRestructured bounds for controller-specific optimization\u201d) return migrated, warnings def _migrate_from_v2_0(self, config: dict) -> tuple: \u201c\u201d\u201d Migrate from v2.0 to v2.1: Issue #2 bounds updates and enhanced features. \u201c\u201d\u201d migrated = config.copy() warnings = [] # Update STA-SMC bounds for Issue #2 compliance if \u2018pso\u2019 in migrated and \u2018bounds\u2019 in migrated[\u2018pso\u2019]: bounds = migrated[\u2018pso\u2019][\u2018bounds\u2019] if \u2018sta_smc\u2019 in bounds: sta_bounds = bounds[\u2018sta_smc\u2019] # Check for Issue #2 problematic bounds if \u2018max\u2019 in sta_bounds and len(sta_bounds[\u2018max\u2019]) >= 6: lambda1_max, lambda2_max = sta_bounds[\u2018max\u2019][4], sta_bounds[\u2018max\u2019][5] if lambda1_max > 10.0 or lambda2_max > 10.0: # Apply Issue #2 corrections sta_bounds[\u2018max\u2019][4] = min(lambda1_max, 10.0) # lambda1 sta_bounds[\u2018max\u2019][5] = min(lambda2_max, 10.0) # lambda2 warnings.append(\u201cApplied Issue #2 lambda bounds corrections for overshoot mitigation\u201d) # Add enhanced features if missing if \u2018enhanced_features\u2019 not in migrated.get(\u2018pso\u2019, {}): migrated[\u2018pso\u2019][\u2018enhanced_features\u2019] = { \u2018w_schedule\u2019: [0.9, 0.4], \u2018velocity_clamp\u2019: [0.1, 0.2], \u2018early_stopping\u2019: {\u2018patience\u2019: 50, \u2018tolerance\u2019: 1e-6} } warnings.append(\u201cAdded enhanced PSO features for improved convergence\u201d) return migrated, warnings def generate_migration_report(self, old_config: dict, new_config: dict, warnings: list, issues: list) -> str: \u201c\u201d\u201d Generate migration report for documentation. \u201c\u201d\u201d report = f\u201d\u201d\u201d": [[247, "runnable-false-class-configurationmigrator-automatic-migration-framework-for-pso-configuration-schema-evolution-def-init-self-self-migration-rules-1-0-self-migrate-from-v1-0-1-5-self-migrate-from-v1-5-2-0-self-migrate-from-v2-0-def-migrate-configuration-self-config-dict-source-version-str-tuple-migrate-configuration-from-source-version-to-current-schema-returns-tuple-migrated-config-migration-warnings-compatibility-issues-if-source-version-not-in-self-migration-rules-raise-valueerror-f-unsupported-source-version-source-version-migrated-config-config-copy-warnings-issues-apply-migration-rules-in-sequence-current-version-source-version-while-current-version-current-schema-version-migrator-self-migration-rules-current-version-migrated-config-step-warnings-migrator-migrated-config-warnings-extend-step-warnings-current-version-self-get-next-version-current-version-validate-migrated-configuration-validation-result-pso-configurationvalidator-validate-complete-config-migrated-config-if-not-validation-result-is-valid-issues-extend-validation-result-errors-return-migrated-config-warnings-issues-def-migrate-from-v1-0-self-config-dict-tuple-migrate-from-v1-0-to-v1-5-remove-deprecated-fields-update-bounds-migrated-config-copy-warnings-remove-deprecated-fields-deprecated-fields-n-processes-hyper-trials-hyper-search-study-timeout-for-field-in-deprecated-fields-if-field-in-migrated-get-pso-del-migrated-pso-field-warnings-append-f-removed-deprecated-field-field-update-pso-bounds-structure-if-pso-in-migrated-and-bounds-in-migrated-pso-old-bounds-migrated-pso-bounds-new-bounds-self-restructure-bounds-v1-5-old-bounds-migrated-pso-bounds-new-bounds-warnings-append-restructured-bounds-for-controller-specific-optimization-return-migrated-warnings-def-migrate-from-v2-0-self-config-dict-tuple-migrate-from-v2-0-to-v2-1-issue-2-bounds-updates-and-enhanced-features-migrated-config-copy-warnings-update-sta-smc-bounds-for-issue-2-compliance-if-pso-in-migrated-and-bounds-in-migrated-pso-bounds-migrated-pso-bounds-if-sta-smc-in-bounds-sta-bounds-bounds-sta-smc-check-for-issue-2-problematic-bounds-if-max-in-sta-bounds-and-len-sta-bounds-max-6-lambda1-max-lambda2-max-sta-bounds-max-4-sta-bounds-max-5-if-lambda1-max-10-0-or-lambda2-max-10-0-apply-issue-2-corrections-sta-bounds-max-4-min-lambda1-max-10-0-lambda1-sta-bounds-max-5-min-lambda2-max-10-0-lambda2-warnings-append-applied-issue-2-lambda-bounds-corrections-for-overshoot-mitigation-add-enhanced-features-if-missing-if-enhanced-features-not-in-migrated-get-pso-migrated-pso-enhanced-features-w-schedule-0-9-0-4-velocity-clamp-0-1-0-2-early-stopping-patience-50-tolerance-1e-6-warnings-append-added-enhanced-pso-features-for-improved-convergence-return-migrated-warnings-def-generate-migration-report-self-old-config-dict-new-config-dict-warnings-list-issues-list-str-generate-migration-report-for-documentation-report-f"]], "runnable: false class ConstraintPropagator: \u201c\u201d\u201d Intelligent constraint propagation for interdependent PSO parameters. \u201c\u201d\u201d def init(self, controller_type: str): self.controller_type = controller_type self.constraint_graph = self._build_constraint_graph() def propagate_constraints(self, initial_bounds: dict) -> dict: \u201c\u201d\u201d Propagate constraints through parameter dependency graph. Example: If \u03bb\u2081 is constrained to [0.1, 5.0] for Issue #2, then c\u2081 bounds must ensure \u03b6\u2081 = \u03bb\u2081/(2\u221ac\u2081) \u2208 [0.69, 0.8] \u201c\u201d\u201d propagated_bounds = initial_bounds.copy() # Iterative constraint propagation converged = False max_iterations = 10 iteration = 0 while not converged and iteration < max_iterations: old_bounds = propagated_bounds.copy() # Apply constraint rules for constraint in self.constraint_graph: propagated_bounds = self._apply_constraint_rule( constraint, propagated_bounds ) # Check convergence converged = self._bounds_converged(old_bounds, propagated_bounds) iteration += 1 return propagated_bounds def _apply_constraint_rule(self, constraint: dict, bounds: dict) -> dict: \u201c\u201d\u201d Apply individual constraint rule with mathematical validation. \u201c\u201d\u201d if constraint[\u2018type\u2019] == \u2018damping_ratio\u2019: # \u03b6 = \u03bb/(2\u221ac) constraint propagation lambda_idx = constraint[\u2018lambda_idx\u2019] c_idx = constraint[\u2018c_idx\u2019] target_zeta_range = constraint[\u2018zeta_range\u2019] lambda_min, lambda_max = bounds[\u2018min\u2019][lambda_idx], bounds[\u2018max\u2019][lambda_idx] # Derive c bounds from lambda bounds and zeta constraints # For \u03b6_min \u2264 \u03bb/(2\u221ac) \u2264 \u03b6_max: # c_min = (\u03bb/(2\u03b6_max))\u00b2, c_max = (\u03bb/(2\u03b6_min))\u00b2 c_min_from_lambda = (lambda_min / (2 * target_zeta_range[1]))**2 c_max_from_lambda = (lambda_max / (2 * target_zeta_range[0]))**2 # Update c bounds with constraint propagation bounds[\u2018min\u2019][c_idx] = max(bounds[\u2018min\u2019][c_idx], c_min_from_lambda) bounds[\u2018max\u2019][c_idx] = min(bounds[\u2018max\u2019][c_idx], c_max_from_lambda) elif constraint[\u2018type\u2019] == \u2018sta_stability\u2019: # K\u2081 > K\u2082 constraint with margin k1_idx, k2_idx = constraint[\u2018k1_idx\u2019], constraint[\u2018k2_idx\u2019] margin = constraint.get(\u2018margin\u2019, 0.1) # Ensure K\u2081_min > K\u2082_max + margin bounds[\u2018min\u2019][k1_idx] = max( bounds[\u2018min\u2019][k1_idx], bounds[\u2018max\u2019][k2_idx] + margin ) return bounds def _build_constraint_graph(self) -> list: \u201c\u201d\u201d Build constraint dependency graph for controller type. \u201c\u201d\u201d if self.controller_type == \u2018classical_smc\u2019: return [ { \u2018type\u2019: \u2018damping_ratio\u2019, \u2018lambda_idx\u2019: 1, \u2018c_idx\u2019: 0, \u2018zeta_range\u2019: [0.6, 0.8] }, { \u2018type\u2019: \u2018damping_ratio\u2019, \u2018lambda_idx\u2019: 3, \u2018c_idx\u2019: 2, \u2018zeta_range\u2019: [0.6, 0.8] }, { \u2018type\u2019: \u2018actuator_saturation\u2019, \u2018gain_indices\u2019: [4, 5], # K, kd \u2018max_total\u2019: 150.0 } ] elif self.controller_type == \u2018sta_smc\u2019: return [ { \u2018type\u2019: \u2018sta_stability\u2019, \u2018k1_idx\u2019: 0, \u2018k2_idx\u2019: 1, \u2018margin\u2019: 0.1 }, { \u2018type\u2019: \u2018damping_ratio\u2019, \u2018lambda_idx\u2019: 4, \u2018c_idx\u2019: 2, # lambda1, k1 \u2018zeta_range\u2019: [0.69, 0.8] # Issue #2 requirement }, { \u2018type\u2019: \u2018damping_ratio\u2019, \u2018lambda_idx\u2019: 5, \u2018c_idx\u2019: 3, # lambda2, k2 \u2018zeta_range\u2019: [0.69, 0.8] # Issue #2 requirement } ] return []": [[247, "runnable-false-class-constraintpropagator-intelligent-constraint-propagation-for-interdependent-pso-parameters-def-init-self-controller-type-str-self-controller-type-controller-type-self-constraint-graph-self-build-constraint-graph-def-propagate-constraints-self-initial-bounds-dict-dict-propagate-constraints-through-parameter-dependency-graph-example-if-1-is-constrained-to-0-1-5-0-for-issue-2-then-c1-bounds-must-ensure-1-1-2c1-0-69-0-8-propagated-bounds-initial-bounds-copy-iterative-constraint-propagation-converged-false-max-iterations-10-iteration-0-while-not-converged-and-iteration-max-iterations-old-bounds-propagated-bounds-copy-apply-constraint-rules-for-constraint-in-self-constraint-graph-propagated-bounds-self-apply-constraint-rule-constraint-propagated-bounds-check-convergence-converged-self-bounds-converged-old-bounds-propagated-bounds-iteration-1-return-propagated-bounds-def-apply-constraint-rule-self-constraint-dict-bounds-dict-dict-apply-individual-constraint-rule-with-mathematical-validation-if-constraint-type-damping-ratio-2c-constraint-propagation-lambda-idx-constraint-lambda-idx-c-idx-constraint-c-idx-target-zeta-range-constraint-zeta-range-lambda-min-lambda-max-bounds-min-lambda-idx-bounds-max-lambda-idx-derive-c-bounds-from-lambda-bounds-and-zeta-constraints-for-min-2c-max-c-min-2-max-2-c-max-2-min-2-c-min-from-lambda-lambda-min-2-target-zeta-range-1-2-c-max-from-lambda-lambda-max-2-target-zeta-range-0-2-update-c-bounds-with-constraint-propagation-bounds-min-c-idx-max-bounds-min-c-idx-c-min-from-lambda-bounds-max-c-idx-min-bounds-max-c-idx-c-max-from-lambda-elif-constraint-type-sta-stability-k1-k2-constraint-with-margin-k1-idx-k2-idx-constraint-k1-idx-constraint-k2-idx-margin-constraint-get-margin-0-1-ensure-k1-min-k2-max-margin-bounds-min-k1-idx-max-bounds-min-k1-idx-bounds-max-k2-idx-margin-return-bounds-def-build-constraint-graph-self-list-build-constraint-dependency-graph-for-controller-type-if-self-controller-type-classical-smc-return-type-damping-ratio-lambda-idx-1-c-idx-0-zeta-range-0-6-0-8-type-damping-ratio-lambda-idx-3-c-idx-2-zeta-range-0-6-0-8-type-actuator-saturation-gain-indices-4-5-k-kd-max-total-150-0-elif-self-controller-type-sta-smc-return-type-sta-stability-k1-idx-0-k2-idx-1-margin-0-1-type-damping-ratio-lambda-idx-4-c-idx-2-lambda1-k1-zeta-range-0-69-0-8-issue-2-requirement-type-damping-ratio-lambda-idx-5-c-idx-3-lambda2-k2-zeta-range-0-69-0-8-issue-2-requirement-return"]], "runnable: false class ControllerIntegrationValidator: \u201c\u201d\u201dvalidation of controller-factory-plant integration.\u201d\u201d\u201d def init(self, plant_config: Any): self.plant_config = plant_config self.test_states = self._generate_test_states() def _generate_test_states(self) -> Dict[str, StateVector]: \u201c\u201d\u201dGenerate test states for validation.\u201d\u201d\u201d return { \u2018equilibrium\u2019: np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), \u2018small_disturbance\u2019: np.array([0.1, 0.05, 0.03, 0.0, 0.0, 0.0]), \u2018large_angles\u2019: np.array([0.5, 0.8, 0.6, 0.2, 0.1, 0.15]), \u2018high_velocity\u2019: np.array([0.1, 0.1, 0.1, 2.0, 1.5, 1.2]), \u2018extreme_state\u2019: np.array([1.0, 1.2, 0.9, 3.0, 2.5, 2.0]) } def validate_controller_integration( self, controller_type: str, gains: GainsArray ) -> Dict[str, Any]: \u201c\u201d\u201dintegration validation.\u201d\u201d\u201d results = { \u2018controller_type\u2019: controller_type, \u2018gains\u2019: gains, \u2018creation_success\u2019: False, \u2018control_computation_success\u2019: False, \u2018stability_analysis\u2019: {}, \u2018performance_metrics\u2019: {}, \u2018integration_score\u2019: 0.0 } try: # 1. Controller creation test controller = create_controller(controller_type, self.plant_config, gains) results[\u2018creation_success\u2019] = True # 2. Control computation test control_results = {} for state_name, state in self.test_states.items(): try: control = controller.compute_control(state, (), {}) control_results[state_name] = { \u2018success\u2019: True, \u2018control_magnitude\u2019: np.abs(control.u) if hasattr(control, \u2018u\u2019) else np.abs(control), \u2018within_bounds\u2019: np.abs(control.u if hasattr(control, \u2018u\u2019) else control) <= 200.0 } except Exception as e: control_results[state_name] = { \u2018success\u2019: False, \u2018error\u2019: str(e) } results[\u2018control_computation_success\u2019] = all( result[\u2018success\u2019] for result in control_results.values() ) results[\u2018control_results\u2019] = control_results # 3. PSO wrapper test try: pso_wrapper = create_pso_optimized_controller( controller_type, gains, self.plant_config ) pso_test_results = {} for state_name, state in self.test_states.items(): control_array = pso_wrapper.compute_control(state) pso_test_results[state_name] = { \u2018control_shape\u2019: control_array.shape, \u2018control_value\u2019: control_array[0], \u2018within_saturation\u2019: np.abs(control_array[0]) <= pso_wrapper.max_force } results[\u2018pso_integration_success\u2019] = True results[\u2018pso_test_results\u2019] = pso_test_results except Exception as e: results[\u2018pso_integration_success\u2019] = False results[\u2018pso_error\u2019] = str(e) # 4. Calculate integration score score = 0.0 if results[\u2018creation_success\u2019]: score += 25.0 if results[\u2018control_computation_success\u2019]: score += 25.0 if results[\u2018pso_integration_success\u2019]: score += 25.0 # Additional scoring based on control quality successful_controls = sum( 1 for result in control_results.values() if result[\u2018success\u2019] ) score += (successful_controls / len(control_results)) * 25.0 results[\u2018integration_score\u2019] = score except Exception as e: results[\u2018creation_error\u2019] = str(e) return results def run_full_integration_suite( self, controller_configs: List[Tuple[str, GainsArray]] ) -> Dict[str, Any]: \u201c\u201d\u201dRun full integration test suite for multiple controllers.\u201d\u201d\u201d suite_results = { \u2018test_timestamp\u2019: time.time(), \u2018plant_config_type\u2019: type(self.plant_config).name, \u2018controller_results\u2019: {}, \u2018summary\u2019: {} } total_score = 0.0 successful_integrations = 0 for controller_type, gains in controller_configs: result = self.validate_controller_integration(controller_type, gains) suite_results[\u2018controller_results\u2019][controller_type] = result total_score += result[\u2018integration_score\u2019] if result[\u2018integration_score\u2019] >= 75.0: # 75% threshold for success successful_integrations += 1 suite_results[\u2018summary\u2019] = { \u2018total_controllers_tested\u2019: len(controller_configs), \u2018successful_integrations\u2019: successful_integrations, \u2018success_rate\u2019: successful_integrations / len(controller_configs), \u2018average_integration_score\u2019: total_score / len(controller_configs), \u2018overall_status\u2019: \u2018PASS\u2019 if successful_integrations >= len(controller_configs) * 0.8 else \u2018FAIL\u2019 } return suite_results # Example usage:": [[101, "runnable-false-class-controllerintegrationvalidator-validation-of-controller-factory-plant-integration-def-init-self-plant-config-any-self-plant-config-plant-config-self-test-states-self-generate-test-states-def-generate-test-states-self-dict-str-statevector-generate-test-states-for-validation-return-equilibrium-np-array-0-0-0-0-0-0-0-0-0-0-0-0-small-disturbance-np-array-0-1-0-05-0-03-0-0-0-0-0-0-large-angles-np-array-0-5-0-8-0-6-0-2-0-1-0-15-high-velocity-np-array-0-1-0-1-0-1-2-0-1-5-1-2-extreme-state-np-array-1-0-1-2-0-9-3-0-2-5-2-0-def-validate-controller-integration-self-controller-type-str-gains-gainsarray-dict-str-any-integration-validation-results-controller-type-controller-type-gains-gains-creation-success-false-control-computation-success-false-stability-analysis-performance-metrics-integration-score-0-0-try-1-controller-creation-test-controller-create-controller-controller-type-self-plant-config-gains-results-creation-success-true-2-control-computation-test-control-results-for-state-name-state-in-self-test-states-items-try-control-controller-compute-control-state-control-results-state-name-success-true-control-magnitude-np-abs-control-u-if-hasattr-control-u-else-np-abs-control-within-bounds-np-abs-control-u-if-hasattr-control-u-else-control-200-0-except-exception-as-e-control-results-state-name-success-false-error-str-e-results-control-computation-success-all-result-success-for-result-in-control-results-values-results-control-results-control-results-3-pso-wrapper-test-try-pso-wrapper-create-pso-optimized-controller-controller-type-gains-self-plant-config-pso-test-results-for-state-name-state-in-self-test-states-items-control-array-pso-wrapper-compute-control-state-pso-test-results-state-name-control-shape-control-array-shape-control-value-control-array-0-within-saturation-np-abs-control-array-0-pso-wrapper-max-force-results-pso-integration-success-true-results-pso-test-results-pso-test-results-except-exception-as-e-results-pso-integration-success-false-results-pso-error-str-e-4-calculate-integration-score-score-0-0-if-results-creation-success-score-25-0-if-results-control-computation-success-score-25-0-if-results-pso-integration-success-score-25-0-additional-scoring-based-on-control-quality-successful-controls-sum-1-for-result-in-control-results-values-if-result-success-score-successful-controls-len-control-results-25-0-results-integration-score-score-except-exception-as-e-results-creation-error-str-e-return-results-def-run-full-integration-suite-self-controller-configs-list-tuple-str-gainsarray-dict-str-any-run-full-integration-test-suite-for-multiple-controllers-suite-results-test-timestamp-time-time-plant-config-type-type-self-plant-config-name-controller-results-summary-total-score-0-0-successful-integrations-0-for-controller-type-gains-in-controller-configs-result-self-validate-controller-integration-controller-type-gains-suite-results-controller-results-controller-type-result-total-score-result-integration-score-if-result-integration-score-75-0-75-threshold-for-success-successful-integrations-1-suite-results-summary-total-controllers-tested-len-controller-configs-successful-integrations-successful-integrations-success-rate-successful-integrations-len-controller-configs-average-integration-score-total-score-len-controller-configs-overall-status-pass-if-successful-integrations-len-controller-configs-0-8-else-fail-return-suite-results-example-usage"]], "runnable: false class ControllerPool: \u201c\u201d\u201dMemory-efficient controller instance pool.\u201d\u201d\u201d def init(self, max_instances: int = 100): self._pool = {} self._usage_count = {} self.max_instances = max_instances def get_controller(self, controller_type: str, config_hash: str): \u201c\u201d\u201dGet controller from pool or create new one.\u201d\u201d\u201d key = f\u201d{controller_type}{config_hash}\u201d if key in self._pool: self._usage_count[key] += 1 return self._pool[key] if len(self._pool) >= self._max_instances: self._evict_least_used() controller = create_controller(controller_type, config) self._pool[key] = controller self._usage_count[key] = 1 return controller": [[274, "runnable-false-class-controllerpool-memory-efficient-controller-instance-pool-def-init-self-max-instances-int-100-self-pool-self-usage-count-self-max-instances-max-instances-def-get-controller-self-controller-type-str-config-hash-str-get-controller-from-pool-or-create-new-one-key-f-controller-type-config-hash-if-key-in-self-pool-self-usage-count-key-1-return-self-pool-key-if-len-self-pool-self-max-instances-self-evict-least-used-controller-create-controller-controller-type-config-self-pool-key-controller-self-usage-count-key-1-return-controller"]], "runnable: false class ControllerProtocol(Protocol): \u201c\u201d\u201dProtocol defining the standard controller interface.\u201d\u201d\u201d def compute_control( self, state: StateVector, last_control: float, history: ConfigDict ) -> ControlOutput: \u201c\u201d\u201dCompute control output for given state.\u201d\u201d\u201d \u2026 def reset(self) -> None: \u201c\u201d\u201dReset controller internal state.\u201d\u201d\u201d \u2026 @property def gains(self) -> List[float]: \u201c\u201d\u201dReturn controller gains.\u201d\u201d\u201d \u2026": [[49, "runnable-false-class-controllerprotocol-protocol-protocol-defining-the-standard-controller-interface-def-compute-control-self-state-statevector-last-control-float-history-configdict-controloutput-compute-control-output-for-given-state-def-reset-self-none-reset-controller-internal-state-property-def-gains-self-list-float-return-controller-gains"]], "runnable: false class DataExchangeBus: \u201c\u201d\u201dCentral data exchange bus for cross-domain communication.\u201d\u201d\u201d def init(self): self._subscribers = {} self._message_queue = [] def subscribe(self, topic: str, callback: Callable): \u201c\u201d\u201dSubscribe to data topic.\u201d\u201d\u201d if topic not in self._subscribers: self._subscribers[topic] = [] self._subscribers[topic].append(callback) def publish(self, topic: str, data: Any): \u201c\u201d\u201dPublish data to topic.\u201d\u201d\u201d if topic in self._subscribers: for callback in self._subscribers[topic]: try: callback(data) except Exception as e: logger.error(f\u201dSubscriber callback failed: {e}\u201d) def get_data_schema(self, topic: str) -> Dict[str, Any]: \u201c\u201d\u201dGet data schema for topic.\u201d\u201d\u201d schemas = { \u2018system_state\u2019: SystemState.annotations, \u2018control_action\u2019: ControlAction.annotations, \u2018simulation_result\u2019: SimulationResult.annotations, \u2018optimization_result\u2019: OptimizationResult.annotations } return schemas.get(topic, {}) # Global data exchange bus instance": [[278, "runnable-false-class-dataexchangebus-central-data-exchange-bus-for-cross-domain-communication-def-init-self-self-subscribers-self-message-queue-def-subscribe-self-topic-str-callback-callable-subscribe-to-data-topic-if-topic-not-in-self-subscribers-self-subscribers-topic-self-subscribers-topic-append-callback-def-publish-self-topic-str-data-any-publish-data-to-topic-if-topic-in-self-subscribers-for-callback-in-self-subscribers-topic-try-callback-data-except-exception-as-e-logger-error-f-subscriber-callback-failed-e-def-get-data-schema-self-topic-str-dict-str-any-get-data-schema-for-topic-schemas-system-state-systemstate-annotations-control-action-controlaction-annotations-simulation-result-simulationresult-annotations-optimization-result-optimizationresult-annotations-return-schemas-get-topic-global-data-exchange-bus-instance"]], "runnable: false class DynamicsModel(Protocol): \u201c\u201d\u201dProtocol for plant dynamics models.\u201d\u201d\u201d def compute_dynamics( self, state: np.ndarray, control_input: np.ndarray, time: float = 0.0, **kwargs: Any ) -> DynamicsResult: \u201c\u201d\u201dCompute system dynamics at given state and input.\u201d\u201d\u201d \u2026 def get_physics_matrices( self, state: np.ndarray ) -> Tuple[np.ndarray, np.ndarray, np.ndarray]: \u201c\u201d\u201dGet physics matrices M, C, G at current state.\u201d\u201d\u201d \u2026 def validate_state(self, state: np.ndarray) -> bool: \u201c\u201d\u201dValidate state vector format and bounds.\u201d\u201d\u201d \u2026 def get_state_dimension(self) -> int: \u201c\u201d\u201dGet dimension of state vector.\u201d\u201d\u201d \u2026 def get_control_dimension(self) -> int: \u201c\u201d\u201dGet dimension of control input vector.\u201d\u201d\u201d \u2026": [[61, "runnable-false-class-dynamicsmodel-protocol-protocol-for-plant-dynamics-models-def-compute-dynamics-self-state-np-ndarray-control-input-np-ndarray-time-float-0-0-kwargs-any-dynamicsresult-compute-system-dynamics-at-given-state-and-input-def-get-physics-matrices-self-state-np-ndarray-tuple-np-ndarray-np-ndarray-np-ndarray-get-physics-matrices-m-c-g-at-current-state-def-validate-state-self-state-np-ndarray-bool-validate-state-vector-format-and-bounds-def-get-state-dimension-self-int-get-dimension-of-state-vector-def-get-control-dimension-self-int-get-dimension-of-control-input-vector"]], "runnable: false class EnterpriseControllerFactory: \u201c\u201d\u201d Enterprise-grade controller factory with integration support. Features: - Type-safe controller creation - Automatic parameter validation - Plant model integration - PSO optimization support - Thread-safe operations - error handling \u201c\u201d\u201d @staticmethod def create_controller( controller_type: str, config: Optional[Any] = None, gains: Optional[GainsArray] = None, **kwargs: Any ) -> ControllerProtocol: \u201c\u201d\u201d Create controller with enhanced integration support. Args: controller_type: Type of controller to create config: Configuration object or dictionary gains: Controller gains array **kwargs: Additional parameters for flexibility Returns: Configured controller instance Raises: ValueError: Invalid controller type or configuration TypeError: Invalid parameter types \u201c\u201d\u201d": [[101, "runnable-false-class-enterprisecontrollerfactory-enterprise-grade-controller-factory-with-integration-support-features-type-safe-controller-creation-automatic-parameter-validation-plant-model-integration-pso-optimization-support-thread-safe-operations-error-handling-staticmethod-def-create-controller-controller-type-str-config-optional-any-none-gains-optional-gainsarray-none-kwargs-any-controllerprotocol-create-controller-with-enhanced-integration-support-args-controller-type-type-of-controller-to-create-config-configuration-object-or-dictionary-gains-controller-gains-array-kwargs-additional-parameters-for-flexibility-returns-configured-controller-instance-raises-valueerror-invalid-controller-type-or-configuration-typeerror-invalid-parameter-types"]], "runnable: false class FactoryAlertManager: \u201c\u201d\u201dProduction alerting for factory system.\u201d\u201d\u201d def init(self, config): self.config = config self.alert_history = [] self.suppression_rules = {} def evaluate_alerts(self, metrics, health_status): \u201c\u201d\u201dEvaluate alert conditions.\u201d\u201d\u201d alerts = [] # Performance alerts if \u2018controller_creation_time\u2019 in metrics: avg_time = metrics[\u2018controller_creation_time\u2019][\u2018mean\u2019] if avg_time > 10: # 10ms threshold alerts.append({ \u2018type\u2019: \u2018performance\u2019, \u2018severity\u2019: \u2018warning\u2019 if avg_time < 20 else \u2018critical\u2019, \u2018message\u2019: f\u2019High controller creation time: {avg_time:.2f}ms\u2019, \u2018metric\u2019: \u2018controller_creation_time\u2019, \u2018value\u2019: avg_time, \u2018threshold\u2019: 10 }) # Memory alerts if \u2018memory_usage\u2019 in metrics: memory_mb = metrics[\u2018memory_usage\u2019][\u2018current\u2019] if memory_mb > 500: # 500MB threshold alerts.append({ \u2018type\u2019: \u2018memory\u2019, \u2018severity\u2019: \u2018warning\u2019 if memory_mb < 1000 else \u2018critical\u2019, \u2018message\u2019: f\u2019High memory usage: {memory_mb:.2f}MB\u2019, \u2018metric\u2019: \u2018memory_usage\u2019, \u2018value\u2019: memory_mb, \u2018threshold\u2019: 500 }) # Health alerts if health_status[\u2018overall_status\u2019] != \u2018healthy\u2019: failed_checks = [name for name, check in health_status[\u2018checks\u2019].items() if not check.get(\u2018healthy\u2019, False)] alerts.append({ \u2018type\u2019: \u2018health\u2019, \u2018severity\u2019: \u2018critical\u2019 if health_status[\u2018overall_status\u2019] == \u2018unhealthy\u2019 else \u2018warning\u2019, \u2018message\u2019: f\u2019Health check failed: {\u201d, \u201c.join(failed_checks)}\u2019, \u2018failed_checks\u2019: failed_checks }) # Apply suppression rules alerts = self.apply_suppression(alerts) # Send notifications for alert in alerts: self.send_notification(alert) return alerts def apply_suppression(self, alerts): \u201c\u201d\u201dApply alert suppression rules.\u201d\u201d\u201d suppressed_alerts = [] for alert in alerts: alert_key = f\u201d{alert[\u2018type\u2019]}_{alert.get(\u2018metric\u2019, \u2018unknown\u2019)}\u201d # Check if alert is already suppressed if alert_key in self.suppression_rules: last_sent = self.suppression_rules[alert_key] if time.time() - last_sent < 300: # 5 minute suppression continue suppressed_alerts.append(alert) self.suppression_rules[alert_key] = time.time() return suppressed_alerts def send_notification(self, alert): \u201c\u201d\u201dSend alert notification.\u201d\u201d\u201d print(f\u201d\ud83d\udea8 ALERT [{alert[\u2018severity\u2019].upper()}]: {alert[\u2018message\u2019]}\u201d) # In production, integrate with: # - Slack/Teams notifications # - PagerDuty # - Email alerts # - SMS notifications # - Monitoring dashboards self.alert_history.append({ \u2018timestamp\u2019: time.time(), \u2018alert\u2019: alert }) # Setup alert manager": [[111, "runnable-false-class-factoryalertmanager-production-alerting-for-factory-system-def-init-self-config-self-config-config-self-alert-history-self-suppression-rules-def-evaluate-alerts-self-metrics-health-status-evaluate-alert-conditions-alerts-performance-alerts-if-controller-creation-time-in-metrics-avg-time-metrics-controller-creation-time-mean-if-avg-time-10-10ms-threshold-alerts-append-type-performance-severity-warning-if-avg-time-20-else-critical-message-f-high-controller-creation-time-avg-time-2f-ms-metric-controller-creation-time-value-avg-time-threshold-10-memory-alerts-if-memory-usage-in-metrics-memory-mb-metrics-memory-usage-current-if-memory-mb-500-500mb-threshold-alerts-append-type-memory-severity-warning-if-memory-mb-1000-else-critical-message-f-high-memory-usage-memory-mb-2f-mb-metric-memory-usage-value-memory-mb-threshold-500-health-alerts-if-health-status-overall-status-healthy-failed-checks-name-for-name-check-in-health-status-checks-items-if-not-check-get-healthy-false-alerts-append-type-health-severity-critical-if-health-status-overall-status-unhealthy-else-warning-message-f-health-check-failed-join-failed-checks-failed-checks-failed-checks-apply-suppression-rules-alerts-self-apply-suppression-alerts-send-notifications-for-alert-in-alerts-self-send-notification-alert-return-alerts-def-apply-suppression-self-alerts-apply-alert-suppression-rules-suppressed-alerts-for-alert-in-alerts-alert-key-f-alert-type-alert-get-metric-unknown-check-if-alert-is-already-suppressed-if-alert-key-in-self-suppression-rules-last-sent-self-suppression-rules-alert-key-if-time-time-last-sent-300-5-minute-suppression-continue-suppressed-alerts-append-alert-self-suppression-rules-alert-key-time-time-return-suppressed-alerts-def-send-notification-self-alert-send-alert-notification-print-f-alert-alert-severity-upper-alert-message-in-production-integrate-with-slack-teams-notifications-pagerduty-email-alerts-sms-notifications-monitoring-dashboards-self-alert-history-append-timestamp-time-time-alert-alert-setup-alert-manager"]], "runnable: false class FactoryError(Exception): \u201c\u201d\u201dBase factory error.\u201d\u201d\u201d pass class ConfigurationError(FactoryError): \u201c\u201d\u201dConfiguration validation error.\u201d\u201d\u201d pass class ControllerTypeError(FactoryError): \u201c\u201d\u201dUnknown controller type error.\u201d\u201d\u201d pass class GainValidationError(FactoryError): \u201c\u201d\u201dGain validation error.\u201d\u201d\u201d pass": [[274, "runnable-false-class-factoryerror-exception-base-factory-error-pass-class-configurationerror-factoryerror-configuration-validation-error-pass-class-controllertypeerror-factoryerror-unknown-controller-type-error-pass-class-gainvalidationerror-factoryerror-gain-validation-error-pass"]], "runnable: false class FactoryMaintenanceManager: \u201c\u201d\u201dProduction maintenance for factory system.\u201d\u201d\u201d def init(self): self.maintenance_log = [] def daily_maintenance(self): \u201c\u201d\u201dDaily maintenance tasks.\u201d\u201d\u201d print(\u201cRunning daily maintenance\u2026\u201d) tasks = [ (\u2018Health Check\u2019, self.comprehensive_health_check), (\u2018Performance Validation\u2019, self.validate_performance), (\u2018Memory Cleanup\u2019, self.memory_cleanup), (\u2018Log Rotation\u2019, self.rotate_logs), (\u2018Cache Cleanup\u2019, self.cleanup_cache), (\u2018Metrics Collection\u2019, self.collect_daily_metrics) ] results = {} for task_name, task_func in tasks: try: print(f\u201d Running {task_name}\u2026\u201d) result = task_func() results[task_name] = {\u2018success\u2019: True, \u2018result\u2019: result} print(f\u201d \u2705 {task_name} completed\u201d) except Exception as e: results[task_name] = {\u2018success\u2019: False, \u2018error\u2019: str(e)} print(f\u201d \u274c {task_name} failed: {e}\u201d) self.log_maintenance_results(\u2018daily\u2019, results) return results def weekly_maintenance(self): \u201c\u201d\u201dWeekly maintenance tasks.\u201d\u201d\u201d print(\u201cRunning weekly maintenance\u2026\u201d) tasks = [ (\u2018Deep Performance Analysis\u2019, self.deep_performance_analysis), (\u2018Memory Leak Detection\u2019, self.detect_memory_leaks), (\u2018Configuration Validation\u2019, self.validate_configuration), (\u2018Dependency Updates Check\u2019, self.check_dependency_updates), (\u2018Security Scan\u2019, self.security_scan), (\u2018Backup Verification\u2019, self.verify_backups) ] results = {} for task_name, task_func in tasks: try: print(f\u201d Running {task_name}\u2026\u201d) result = task_func() results[task_name] = {\u2018success\u2019: True, \u2018result\u2019: result} print(f\u201d \u2705 {task_name} completed\u201d) except Exception as e: results[task_name] = {\u2018success\u2019: False, \u2018error\u2019: str(e)} print(f\u201d \u274c {task_name} failed: {e}\u201d) self.log_maintenance_results(\u2018weekly\u2019, results) return results def comprehensive_health_check(self): \u201c\u201d\u201dhealth validation.\u201d\u201d\u201d # Run extended health checks health_checker = FactoryHealthChecker() return health_checker.perform_health_check() def validate_performance(self): \u201c\u201d\u201dValidate factory performance meets SLAs.\u201d\u201d\u201d from src.controllers.factory import create_controller import time # Performance test creation_times = [] for _ in range(100): start = time.perf_counter() create_controller(\u2018classical_smc\u2019, gains=[20]*6) creation_times.append((time.perf_counter() - start) * 1000) avg_time = sum(creation_times) / len(creation_times) p95_time = sorted(creation_times)[95] p99_time = sorted(creation_times)[99] # SLA validation sla_results = { \u2018average_creation_time_ms\u2019: avg_time, \u2018p95_creation_time_ms\u2019: p95_time, \u2018p99_creation_time_ms\u2019: p99_time, \u2018sla_met\u2019: avg_time < 5.0 and p95_time < 10.0 and p99_time < 25.0 } return sla_results def memory_cleanup(self): \u201c\u201d\u201dCleanup memory and optimize garbage collection.\u201d\u201d\u201d import gc import psutil import os # Force garbage collection before_memory = psutil.Process(os.getpid()).memory_info().rss / 1024 / 1024 collected = gc.collect() after_memory = psutil.Process(os.getpid()).memory_info().rss / 1024 / 1024 return { \u2018objects_collected\u2019: collected, \u2018memory_before_mb\u2019: before_memory, \u2018memory_after_mb\u2019: after_memory, \u2018memory_freed_mb\u2019: before_memory - after_memory } def rotate_logs(self): \u201c\u201d\u201dRotate and compress log files.\u201d\u201d\u201d # Implement log rotation logic return {\u2018logs_rotated\u2019: 0, \u2018size_saved_mb\u2019: 0} def cleanup_cache(self): \u201c\u201d\u201dCleanup factory cache if implemented.\u201d\u201d\u201d # Implement cache cleanup logic return {\u2018cache_entries_removed\u2019: 0} def collect_daily_metrics(self): \u201c\u201d\u201dCollect and store daily metrics.\u201d\u201d\u201d # Collect metrics for historical analysis return {\u2018metrics_collected\u2019: True} def log_maintenance_results(self, maintenance_type, results): \u201c\u201d\u201dLog maintenance results.\u201d\u201d\u201d maintenance_record = { \u2018timestamp\u2019: time.time(), \u2018type\u2019: maintenance_type, \u2018results\u2019: results, \u2018success_rate\u2019: sum(1 for r in results.values() if r[\u2018success\u2019]) / len(results) } self.maintenance_log.append(maintenance_record) print(f\u201dMaintenance {maintenance_type} completed with {maintenance_record[\u2018success_rate\u2019]:.1%} success rate\u201d) # Setup maintenance manager": [[111, "runnable-false-class-factorymaintenancemanager-production-maintenance-for-factory-system-def-init-self-self-maintenance-log-def-daily-maintenance-self-daily-maintenance-tasks-print-running-daily-maintenance-tasks-health-check-self-comprehensive-health-check-performance-validation-self-validate-performance-memory-cleanup-self-memory-cleanup-log-rotation-self-rotate-logs-cache-cleanup-self-cleanup-cache-metrics-collection-self-collect-daily-metrics-results-for-task-name-task-func-in-tasks-try-print-f-running-task-name-result-task-func-results-task-name-success-true-result-result-print-f-task-name-completed-except-exception-as-e-results-task-name-success-false-error-str-e-print-f-task-name-failed-e-self-log-maintenance-results-daily-results-return-results-def-weekly-maintenance-self-weekly-maintenance-tasks-print-running-weekly-maintenance-tasks-deep-performance-analysis-self-deep-performance-analysis-memory-leak-detection-self-detect-memory-leaks-configuration-validation-self-validate-configuration-dependency-updates-check-self-check-dependency-updates-security-scan-self-security-scan-backup-verification-self-verify-backups-results-for-task-name-task-func-in-tasks-try-print-f-running-task-name-result-task-func-results-task-name-success-true-result-result-print-f-task-name-completed-except-exception-as-e-results-task-name-success-false-error-str-e-print-f-task-name-failed-e-self-log-maintenance-results-weekly-results-return-results-def-comprehensive-health-check-self-health-validation-run-extended-health-checks-health-checker-factoryhealthchecker-return-health-checker-perform-health-check-def-validate-performance-self-validate-factory-performance-meets-slas-from-src-controllers-factory-import-create-controller-import-time-performance-test-creation-times-for-in-range-100-start-time-perf-counter-create-controller-classical-smc-gains-20-6-creation-times-append-time-perf-counter-start-1000-avg-time-sum-creation-times-len-creation-times-p95-time-sorted-creation-times-95-p99-time-sorted-creation-times-99-sla-validation-sla-results-average-creation-time-ms-avg-time-p95-creation-time-ms-p95-time-p99-creation-time-ms-p99-time-sla-met-avg-time-5-0-and-p95-time-10-0-and-p99-time-25-0-return-sla-results-def-memory-cleanup-self-cleanup-memory-and-optimize-garbage-collection-import-gc-import-psutil-import-os-force-garbage-collection-before-memory-psutil-process-os-getpid-memory-info-rss-1024-1024-collected-gc-collect-after-memory-psutil-process-os-getpid-memory-info-rss-1024-1024-return-objects-collected-collected-memory-before-mb-before-memory-memory-after-mb-after-memory-memory-freed-mb-before-memory-after-memory-def-rotate-logs-self-rotate-and-compress-log-files-implement-log-rotation-logic-return-logs-rotated-0-size-saved-mb-0-def-cleanup-cache-self-cleanup-factory-cache-if-implemented-implement-cache-cleanup-logic-return-cache-entries-removed-0-def-collect-daily-metrics-self-collect-and-store-daily-metrics-collect-metrics-for-historical-analysis-return-metrics-collected-true-def-log-maintenance-results-self-maintenance-type-results-log-maintenance-results-maintenance-record-timestamp-time-time-type-maintenance-type-results-results-success-rate-sum-1-for-r-in-results-values-if-r-success-len-results-self-maintenance-log-append-maintenance-record-print-f-maintenance-maintenance-type-completed-with-maintenance-record-success-rate-1-success-rate-setup-maintenance-manager"]], "runnable: false class FitnessEvaluator: \u201c\u201d\u201dController-specific fitness evaluation strategies.\u201d\u201d\u201d def init(self, controller_type: str, config: Dict[str, Any]): self.controller_type = controller_type self.config = config self.dynamics = self._create_dynamics(config[\u2018dynamics\u2019]) def evaluate_fitness(self, gains: List[float]) -> float: \u201c\u201d\u201dEvaluate controller performance with given gains.\u201d\u201d\u201d try: # Create controller with candidate gains controller = create_controller( self.controller_type, config=self.config, gains=gains ) # Run simulation simulation_result = self._run_simulation(controller) # Compute fitness fitness = self._compute_fitness_score(simulation_result) return fitness except Exception as e: # Penalty for invalid configurations return 1e6 # Large penalty value def _compute_fitness_score(self, result: SimulationResult) -> float: \u201c\u201d\u201dCompute multi-objective fitness score.\u201d\u201d\u201d # Weighted combination of performance metrics weights = { \u2018angle_error\u2019: 0.4, # Pendulum stabilization \u2018position_error\u2019: 0.2, # Cart positioning \u2018control_effort\u2019: 0.2, # Energy efficiency \u2018settling_time\u2019: 0.1, # Response speed \u2018overshoot\u2019: 0.1 # Stability margin } metrics = self._extract_performance_metrics(result) fitness = sum( weights[metric] * self._normalize_metric(metric, value) for metric, value in metrics.items() ) return fitness": [[63, "runnable-false-class-fitnessevaluator-controller-specific-fitness-evaluation-strategies-def-init-self-controller-type-str-config-dict-str-any-self-controller-type-controller-type-self-config-config-self-dynamics-self-create-dynamics-config-dynamics-def-evaluate-fitness-self-gains-list-float-float-evaluate-controller-performance-with-given-gains-try-create-controller-with-candidate-gains-controller-create-controller-self-controller-type-config-self-config-gains-gains-run-simulation-simulation-result-self-run-simulation-controller-compute-fitness-fitness-self-compute-fitness-score-simulation-result-return-fitness-except-exception-as-e-penalty-for-invalid-configurations-return-1e6-large-penalty-value-def-compute-fitness-score-self-result-simulationresult-float-compute-multi-objective-fitness-score-weighted-combination-of-performance-metrics-weights-angle-error-0-4-pendulum-stabilization-position-error-0-2-cart-positioning-control-effort-0-2-energy-efficiency-settling-time-0-1-response-speed-overshoot-0-1-stability-margin-metrics-self-extract-performance-metrics-result-fitness-sum-weights-metric-self-normalize-metric-metric-value-for-metric-value-in-metrics-items-return-fitness"]], "runnable: false class HILIntegrationProtocol: \u201c\u201d\u201dHardware-in-the-loop integration protocol.\u201d\u201d\u201d def init(self, controller_factory, communication_config: dict): self.factory = controller_factory self.comm_config = communication_config self.safety_limits = self._get_safety_limits() def create_hil_controller( self, controller_type: str, gains: List[float], safety_config: dict ) -> \u2018HILController\u2019: \u201c\u201d\u201dCreate HIL-compatible controller with safety features.\u201d\u201d\u201d # Create base controller base_controller = create_controller(controller_type, gains=gains) # Wrap with HIL safety layer hil_controller = HILSafetyWrapper( base_controller, safety_config, self.safety_limits ) return hil_controller def _get_safety_limits(self) -> dict: \u201c\u201d\u201dGet hardware safety limits.\u201d\u201d\u201d return { \u2018max_force\u2019: 50.0, # Reduced for hardware safety \u2018max_angle\u2019: np.pi / 6, # 30 degrees maximum \u2018max_velocity\u2019: 10.0, # rad/s \u2018emergency_stop_conditions\u2019: [ \u2018angle_limit_exceeded\u2019, \u2018velocity_limit_exceeded\u2019, \u2018communication_failure\u2019 ] } class HILSafetyWrapper: \u201c\u201d\u201dSafety wrapper for HIL controllers.\u201d\u201d\u201d def init(self, controller, safety_config: dict, limits: dict): self.controller = controller self.safety_config = safety_config self.limits = limits self.emergency_stop = False def compute_control(self, state: np.ndarray, *args, **kwargs) -> float: \u201c\u201d\u201dCompute control with safety checks.\u201d\u201d\u201d # Pre-control safety checks if self._check_emergency_conditions(state): self.emergency_stop = True return 0.0 # Emergency stop if self.emergency_stop: return 0.0 # Maintain emergency stop # Compute control try: control_result = self.controller.compute_control(state, *args, **kwargs) u = control_result.u if hasattr(control_result, \u2018u\u2019) else control_result # Post-control safety checks u_safe = self._apply_safety_limits(u, state) return u_safe except Exception as e: logger.error(f\u201dHIL control computation failed: {e}\u201d) self.emergency_stop = True return 0.0 def _check_emergency_conditions(self, state: np.ndarray) -> bool: \u201c\u201d\u201dCheck for emergency stop conditions.\u201d\u201d\u201d theta1, theta2, x, dtheta1, dtheta2, dx = state # Angle limits if abs(theta1) > self.limits[\u2018max_angle\u2019]: logger.warning(\u201cPendulum 1 angle limit exceeded\u201d) return True if abs(theta2) > self.limits[\u2018max_angle\u2019]: logger.warning(\u201cPendulum 2 angle limit exceeded\u201d) return True # Velocity limits if abs(dtheta1) > self.limits[\u2018max_velocity\u2019]: logger.warning(\u201cPendulum 1 velocity limit exceeded\u201d) return True if abs(dtheta2) > self.limits[\u2018max_velocity\u2019]: logger.warning(\u201cPendulum 2 velocity limit exceeded\u201d) return True return False def _apply_safety_limits(self, control: float, state: np.ndarray) -> float: \u201c\u201d\u201dApply safety limits to control signal.\u201d\u201d\u201d # Force magnitude limit u_limited = np.clip(control, -self.limits[\u2018max_force\u2019], self.limits[\u2018max_force\u2019]) # Rate limiting (if previous control available) if hasattr(self, \u2018_last_control\u2019): max_rate = self.safety_config.get(\u2018max_control_rate\u2019, 100.0) # N/s dt = self.safety_config.get(\u2018dt\u2019, 0.001) max_change = max_rate * dt control_change = u_limited - self._last_control if abs(control_change) > max_change: u_limited = self._last_control + np.sign(control_change) * max_change self._last_control = u_limited return u_limited": [[278, "runnable-false-class-hilintegrationprotocol-hardware-in-the-loop-integration-protocol-def-init-self-controller-factory-communication-config-dict-self-factory-controller-factory-self-comm-config-communication-config-self-safety-limits-self-get-safety-limits-def-create-hil-controller-self-controller-type-str-gains-list-float-safety-config-dict-hilcontroller-create-hil-compatible-controller-with-safety-features-create-base-controller-base-controller-create-controller-controller-type-gains-gains-wrap-with-hil-safety-layer-hil-controller-hilsafetywrapper-base-controller-safety-config-self-safety-limits-return-hil-controller-def-get-safety-limits-self-dict-get-hardware-safety-limits-return-max-force-50-0-reduced-for-hardware-safety-max-angle-np-pi-6-30-degrees-maximum-max-velocity-10-0-rad-s-emergency-stop-conditions-angle-limit-exceeded-velocity-limit-exceeded-communication-failure-class-hilsafetywrapper-safety-wrapper-for-hil-controllers-def-init-self-controller-safety-config-dict-limits-dict-self-controller-controller-self-safety-config-safety-config-self-limits-limits-self-emergency-stop-false-def-compute-control-self-state-np-ndarray-args-kwargs-float-compute-control-with-safety-checks-pre-control-safety-checks-if-self-check-emergency-conditions-state-self-emergency-stop-true-return-0-0-emergency-stop-if-self-emergency-stop-return-0-0-maintain-emergency-stop-compute-control-try-control-result-self-controller-compute-control-state-args-kwargs-u-control-result-u-if-hasattr-control-result-u-else-control-result-post-control-safety-checks-u-safe-self-apply-safety-limits-u-state-return-u-safe-except-exception-as-e-logger-error-f-hil-control-computation-failed-e-self-emergency-stop-true-return-0-0-def-check-emergency-conditions-self-state-np-ndarray-bool-check-for-emergency-stop-conditions-theta1-theta2-x-dtheta1-dtheta2-dx-state-angle-limits-if-abs-theta1-self-limits-max-angle-logger-warning-pendulum-1-angle-limit-exceeded-return-true-if-abs-theta2-self-limits-max-angle-logger-warning-pendulum-2-angle-limit-exceeded-return-true-velocity-limits-if-abs-dtheta1-self-limits-max-velocity-logger-warning-pendulum-1-velocity-limit-exceeded-return-true-if-abs-dtheta2-self-limits-max-velocity-logger-warning-pendulum-2-velocity-limit-exceeded-return-true-return-false-def-apply-safety-limits-self-control-float-state-np-ndarray-float-apply-safety-limits-to-control-signal-force-magnitude-limit-u-limited-np-clip-control-self-limits-max-force-self-limits-max-force-rate-limiting-if-previous-control-available-if-hasattr-self-last-control-max-rate-self-safety-config-get-max-control-rate-100-0-n-s-dt-self-safety-config-get-dt-0-001-max-change-max-rate-dt-control-change-u-limited-self-last-control-if-abs-control-change-max-change-u-limited-self-last-control-np-sign-control-change-max-change-self-last-control-u-limited-return-u-limited"]], "runnable: false class HybridSTAOutput(NamedTuple): \u201c\u201d\u201dReturn type for HybridAdaptiveSTASMC.compute_control(). Attributes: u: Saturated control input (N) state: Adaptive gains and integral state (k1, k2, u_int) history: History dictionary sigma: Current sliding surface value \u201c\u201d\u201d u: float state: Tuple[float, \u2026] history: Dict[str, Any] sigma: float": [[79, "runnable-false-class-hybridstaoutput-namedtuple-return-type-for-hybridadaptivestasmc-compute-control-attributes-u-saturated-control-input-n-state-adaptive-gains-and-integral-state-k1-k2-u-int-history-history-dictionary-sigma-current-sliding-surface-value-u-float-state-tuple-float-history-dict-str-any-sigma-float"]], "runnable: false class IndependentValidationPaths: \u201c\u201d\u201dFour independent validation paths preventing cascade failures.\u201d\u201d\u201d def init(self): self.validation_paths = { \u2018coverage_validation\u2019: CoverageValidationPath(), \u2018mathematical_validation\u2019: MathematicalValidationPath(), \u2018performance_validation\u2019: PerformanceValidationPath(), \u2018compliance_validation\u2019: ComplianceValidationPath() } def execute_independent_validation(self) -> IndependentValidationResults: \u201c\u201d\u201dExecute all validation paths independently with failure isolation.\u201d\u201d\u201d results = {} for path_name, validator in self.validation_paths.items(): try: # Each path executes in complete isolation results[path_name] = validator.validate_independently() except Exception as e: # Failure isolation: one path failure doesn\u2019t affect others results[path_name] = ValidationResult( status=\u2019failed\u2019, error=str(e), partial_results=validator.get_partial_results() ) return IndependentValidationResults( path_results=results, overall_status=self._calculate_composite_status(results), deployment_recommendation=self._make_deployment_decision(results) )": [[255, "runnable-false-class-independentvalidationpaths-four-independent-validation-paths-preventing-cascade-failures-def-init-self-self-validation-paths-coverage-validation-coveragevalidationpath-mathematical-validation-mathematicalvalidationpath-performance-validation-performancevalidationpath-compliance-validation-compliancevalidationpath-def-execute-independent-validation-self-independentvalidationresults-execute-all-validation-paths-independently-with-failure-isolation-results-for-path-name-validator-in-self-validation-paths-items-try-each-path-executes-in-complete-isolation-results-path-name-validator-validate-independently-except-exception-as-e-failure-isolation-one-path-failure-doesn-t-affect-others-results-path-name-validationresult-status-failed-error-str-e-partial-results-validator-get-partial-results-return-independentvalidationresults-path-results-results-overall-status-self-calculate-composite-status-results-deployment-recommendation-self-make-deployment-decision-results"]], "runnable: false class MigrationValidationSuite: \u201c\u201d\u201dtest suite for migration validation.\u201d\u201d\u201d def init(self): self.test_results = [] def run_full_validation(self, old_config: Dict[str, Any], new_config: Dict[str, Any], controller_type: str) -> Dict[str, Any]: \u201c\u201d\u201dRun migration validation.\u201d\u201d\u201d results = { \u2018controller_type\u2019: controller_type, \u2018migration_successful\u2019: True, \u2018tests\u2019: {}, \u2018warnings\u2019: [], \u2018errors\u2019: [] } # Test 1: Parameter count validation results[\u2018tests\u2019][\u2018parameter_count\u2019] = self.test_parameter_count(old_config, new_config, controller_type) # Test 2: Stability preservation results[\u2018tests\u2019][\u2018stability\u2019] = self.test_stability_preservation(new_config, controller_type) # Test 3: Physical realizability results[\u2018tests\u2019][\u2018physical_realizability\u2019] = self.test_physical_realizability(new_config, controller_type) # Test 4: Performance preservation results[\u2018tests\u2019][\u2018performance\u2019] = self.test_performance_preservation(old_config, new_config, controller_type) # Test 5: Numerical stability results[\u2018tests\u2019][\u2018numerical_stability\u2019] = self.test_numerical_stability(new_config, controller_type) # Aggregate results failed_tests = [name for name, result in results[\u2018tests\u2019].items() if not result.get(\u2018passed\u2019, False)] results[\u2018migration_successful\u2019] = len(failed_tests) == 0 if failed_tests: results[\u2018errors\u2019].extend([f\u201dFailed test: {test}\u201d for test in failed_tests]) return results def test_parameter_count(self, old_config: Dict[str, Any], new_config: Dict[str, Any], controller_type: str) -> Dict[str, Any]: \u201c\u201d\u201dTest parameter count migration.\u201d\u201d\u201d expected_counts = { \u2018classical_smc\u2019: 6, \u2018adaptive_smc\u2019: 5, \u2018sta_smc\u2019: 6, \u2018hybrid_adaptive_sta_smc\u2019: 4 } new_gains = new_config.get(\u2018gains\u2019, []) expected_count = expected_counts.get(controller_type, 0) passed = len(new_gains) == expected_count return { \u2018passed\u2019: passed, \u2018expected_count\u2019: expected_count, \u2018actual_count\u2019: len(new_gains), \u2018gains\u2019: new_gains } def test_stability_preservation(self, new_config: Dict[str, Any], controller_type: str) -> Dict[str, Any]: \u201c\u201d\u201dTest stability preservation.\u201d\u201d\u201d gains = new_config.get(\u2018gains\u2019, []) if controller_type == \u2018classical_smc\u2019: return StabilityValidator.validate_classical_smc_stability(gains) elif controller_type == \u2018adaptive_smc\u2019: adaptation_params = { \u2018leak_rate\u2019: new_config.get(\u2018leak_rate\u2019, 0.01), \u2018K_min\u2019: new_config.get(\u2018K_min\u2019, 0.1), \u2018K_max\u2019: new_config.get(\u2018K_max\u2019, 100.0) } return StabilityValidator.validate_adaptive_smc_convergence(gains, adaptation_params) elif controller_type == \u2018sta_smc\u2019: algorithm_params = { \u2018power_exponent\u2019: new_config.get(\u2018power_exponent\u2019, 0.5) } return StabilityValidator.validate_sta_smc_finite_time_convergence(gains, algorithm_params) return {\u2018passed\u2019: True, \u2018reason\u2019: \u2018No stability test for this controller type\u2019} def test_physical_realizability(self, new_config: Dict[str, Any], controller_type: str) -> Dict[str, Any]: \u201c\u201d\u201dTest physical realizability of parameters.\u201d\u201d\u201d gains = new_config.get(\u2018gains\u2019, []) max_force = new_config.get(\u2018max_force\u2019, 150.0) dt = new_config.get(\u2018dt\u2019, 0.001) issues = [] # Check gain magnitudes if any(g > 1000 for g in gains): issues.append(\u201cExtremely high gains may be unrealistic\u201d) # Check sampling time if dt < 1e-4: # Less than 0.1ms issues.append(f\u201dVery fast sampling time dt={dt}s may be unrealistic\u201d) elif dt > 0.1: # More than 100ms issues.append(f\u201dSlow sampling time dt={dt}s may degrade performance\u201d) # Check actuator limits if max_force > 1000: # More than 1kN issues.append(f\u201dHigh force limit {max_force}N may be unrealistic\u201d) elif max_force < 1: # Less than 1N issues.append(f\u201dLow force limit {max_force}N may be insufficient\u201d) return { \u2018passed\u2019: len(issues) == 0, \u2018issues\u2019: issues, \u2018parameters_checked\u2019: [\u2018gains\u2019, \u2018max_force\u2019, \u2018dt\u2019] } def test_performance_preservation(self, old_config: Dict[str, Any], new_config: Dict[str, Any], controller_type: str) -> Dict[str, Any]: \u201c\u201d\u201dTest performance preservation.\u201d\u201d\u201d bandwidth_analysis = PerformanceAnalyzer.analyze_control_bandwidth( old_config.get(\u2018gains\u2019, []), new_config.get(\u2018gains\u2019, []), controller_type ) settling_analysis = PerformanceAnalyzer.estimate_settling_time_change(old_config, new_config) # Performance is preserved if bandwidth and settling time are reasonable bandwidth_ok = bandwidth_analysis.get(\u2018performance_preserved\u2019, True) settling_ok = settling_analysis.get(\u2018performance_change\u2019) in [\u2018improved\u2019, \u2018maintained\u2019] return { \u2018passed\u2019: bandwidth_ok and settling_ok, \u2018bandwidth_analysis\u2019: bandwidth_analysis, \u2018settling_analysis\u2019: settling_analysis } def test_numerical_stability(self, new_config: Dict[str, Any], controller_type: str) -> Dict[str, Any]: \u201c\u201d\u201dTest numerical stability of parameters.\u201d\u201d\u201d gains = new_config.get(\u2018gains\u2019, []) dt = new_config.get(\u2018dt\u2019, 0.001) issues = [] # Check condition numbers and numerical issues if controller_type in [\u2018classical_smc\u2019, \u2018adaptive_smc\u2019, \u2018sta_smc\u2019]: if len(gains) >= 4: k1, k2, lam1, lam2 = gains[:4] # Check gain ratios for numerical stability if lam1/k1 > 100 or lam2/k2 > 100: issues.append(\u201cHigh \u03bb/k ratios may cause numerical instability\u201d) if k1/k2 > 10 or k2/k1 > 10: issues.append(\u201cLarge k1/k2 ratio may indicate unbalanced design\u201d) # Check discrete-time stability if controller_type in [\u2018adaptive_smc\u2019, \u2018sta_smc\u2019]: max_gain = max(gains) if gains else 0 nyquist_limit = 1.0 / (2 * dt) if max_gain > nyquist_limit / 10: # Rule of thumb issues.append(f\u201dHigh gains relative to sampling rate may cause instability\u201d) return { \u2018passed\u2019: len(issues) == 0, \u2018issues\u2019: issues, \u2018sampling_time\u2019: dt, \u2018stability_margins\u2019: \u2018acceptable\u2019 if len(issues) == 0 else \u2018marginal\u2019 } # Full validation example": [[99, "runnable-false-class-migrationvalidationsuite-test-suite-for-migration-validation-def-init-self-self-test-results-def-run-full-validation-self-old-config-dict-str-any-new-config-dict-str-any-controller-type-str-dict-str-any-run-migration-validation-results-controller-type-controller-type-migration-successful-true-tests-warnings-errors-test-1-parameter-count-validation-results-tests-parameter-count-self-test-parameter-count-old-config-new-config-controller-type-test-2-stability-preservation-results-tests-stability-self-test-stability-preservation-new-config-controller-type-test-3-physical-realizability-results-tests-physical-realizability-self-test-physical-realizability-new-config-controller-type-test-4-performance-preservation-results-tests-performance-self-test-performance-preservation-old-config-new-config-controller-type-test-5-numerical-stability-results-tests-numerical-stability-self-test-numerical-stability-new-config-controller-type-aggregate-results-failed-tests-name-for-name-result-in-results-tests-items-if-not-result-get-passed-false-results-migration-successful-len-failed-tests-0-if-failed-tests-results-errors-extend-f-failed-test-test-for-test-in-failed-tests-return-results-def-test-parameter-count-self-old-config-dict-str-any-new-config-dict-str-any-controller-type-str-dict-str-any-test-parameter-count-migration-expected-counts-classical-smc-6-adaptive-smc-5-sta-smc-6-hybrid-adaptive-sta-smc-4-new-gains-new-config-get-gains-expected-count-expected-counts-get-controller-type-0-passed-len-new-gains-expected-count-return-passed-passed-expected-count-expected-count-actual-count-len-new-gains-gains-new-gains-def-test-stability-preservation-self-new-config-dict-str-any-controller-type-str-dict-str-any-test-stability-preservation-gains-new-config-get-gains-if-controller-type-classical-smc-return-stabilityvalidator-validate-classical-smc-stability-gains-elif-controller-type-adaptive-smc-adaptation-params-leak-rate-new-config-get-leak-rate-0-01-k-min-new-config-get-k-min-0-1-k-max-new-config-get-k-max-100-0-return-stabilityvalidator-validate-adaptive-smc-convergence-gains-adaptation-params-elif-controller-type-sta-smc-algorithm-params-power-exponent-new-config-get-power-exponent-0-5-return-stabilityvalidator-validate-sta-smc-finite-time-convergence-gains-algorithm-params-return-passed-true-reason-no-stability-test-for-this-controller-type-def-test-physical-realizability-self-new-config-dict-str-any-controller-type-str-dict-str-any-test-physical-realizability-of-parameters-gains-new-config-get-gains-max-force-new-config-get-max-force-150-0-dt-new-config-get-dt-0-001-issues-check-gain-magnitudes-if-any-g-1000-for-g-in-gains-issues-append-extremely-high-gains-may-be-unrealistic-check-sampling-time-if-dt-1e-4-less-than-0-1ms-issues-append-f-very-fast-sampling-time-dt-dt-s-may-be-unrealistic-elif-dt-0-1-more-than-100ms-issues-append-f-slow-sampling-time-dt-dt-s-may-degrade-performance-check-actuator-limits-if-max-force-1000-more-than-1kn-issues-append-f-high-force-limit-max-force-n-may-be-unrealistic-elif-max-force-1-less-than-1n-issues-append-f-low-force-limit-max-force-n-may-be-insufficient-return-passed-len-issues-0-issues-issues-parameters-checked-gains-max-force-dt-def-test-performance-preservation-self-old-config-dict-str-any-new-config-dict-str-any-controller-type-str-dict-str-any-test-performance-preservation-bandwidth-analysis-performanceanalyzer-analyze-control-bandwidth-old-config-get-gains-new-config-get-gains-controller-type-settling-analysis-performanceanalyzer-estimate-settling-time-change-old-config-new-config-performance-is-preserved-if-bandwidth-and-settling-time-are-reasonable-bandwidth-ok-bandwidth-analysis-get-performance-preserved-true-settling-ok-settling-analysis-get-performance-change-in-improved-maintained-return-passed-bandwidth-ok-and-settling-ok-bandwidth-analysis-bandwidth-analysis-settling-analysis-settling-analysis-def-test-numerical-stability-self-new-config-dict-str-any-controller-type-str-dict-str-any-test-numerical-stability-of-parameters-gains-new-config-get-gains-dt-new-config-get-dt-0-001-issues-check-condition-numbers-and-numerical-issues-if-controller-type-in-classical-smc-adaptive-smc-sta-smc-if-len-gains-4-k1-k2-lam1-lam2-gains-4-check-gain-ratios-for-numerical-stability-if-lam1-k1-100-or-lam2-k2-100-issues-append-high-k-ratios-may-cause-numerical-instability-if-k1-k2-10-or-k2-k1-10-issues-append-large-k1-k2-ratio-may-indicate-unbalanced-design-check-discrete-time-stability-if-controller-type-in-adaptive-smc-sta-smc-max-gain-max-gains-if-gains-else-0-nyquist-limit-1-0-2-dt-if-max-gain-nyquist-limit-10-rule-of-thumb-issues-append-f-high-gains-relative-to-sampling-rate-may-cause-instability-return-passed-len-issues-0-issues-issues-sampling-time-dt-stability-margins-acceptable-if-len-issues-0-else-marginal-full-validation-example"]], "runnable: false class MultiObjectivePSOIntegration: \u201c\u201d\u201dMulti-objective PSO integration for controller optimization.\u201d\u201d\u201d def init(self, controller_type: str, objectives: List[str]): self.controller_type = controller_type self.objectives = objectives def create_pareto_optimizer(self) -> Callable: \u201c\u201d\u201dCreate Pareto-optimal PSO optimizer.\u201d\u201d\u201d def pareto_objective(gains: np.ndarray) -> List[float]: \u201c\u201d\u201dMulti-objective function returning Pareto front.\u201d\u201d\u201d controller = create_controller(self.controller_type, gains=gains.tolist()) objectives_values = [] for obj in self.objectives: value = self._evaluate_single_objective(controller, obj) objectives_values.append(value) return objectives_values return pareto_objective def _evaluate_single_objective(self, controller, objective: str) -> float: \u201c\u201d\u201dEvaluate a single objective function.\u201d\u201d\u201d # Implementation specific to each objective pass": [[278, "runnable-false-class-multiobjectivepsointegration-multi-objective-pso-integration-for-controller-optimization-def-init-self-controller-type-str-objectives-list-str-self-controller-type-controller-type-self-objectives-objectives-def-create-pareto-optimizer-self-callable-create-pareto-optimal-pso-optimizer-def-pareto-objective-gains-np-ndarray-list-float-multi-objective-function-returning-pareto-front-controller-create-controller-self-controller-type-gains-gains-tolist-objectives-values-for-obj-in-self-objectives-value-self-evaluate-single-objective-controller-obj-objectives-values-append-value-return-objectives-values-return-pareto-objective-def-evaluate-single-objective-self-controller-objective-str-float-evaluate-a-single-objective-function-implementation-specific-to-each-objective-pass"]], "runnable: false class MyCustomController: def init(self, gains, max_force, **kwargs): \u201c\u201d\u201dInitialize controller with gains and parameters.\u201d\u201d\u201d pass def compute_control(self, state, state_vars, history): \u201c\u201d\u201d Compute control signal for current state. Parameters \u2014\u2014\u2014- state : np.ndarray State vector [x, dx, \u03b8\u2081, d\u03b8\u2081, \u03b8\u2082, d\u03b8\u2082] state_vars : dict Controller-specific internal state history : dict Historical data for multi-step algorithms Returns \u2014\u2014- control : float Control input (force applied to cart) state_vars : dict Updated internal state history : dict Updated history \u201c\u201d\u201d pass def initialize_history(self) -> dict: \u201c\u201d\u201dInitialize history buffer for controller.\u201d\u201d\u201d return {} def cleanup(self): \u201c\u201d\u201dClean up resources (optional).\u201d\u201d\u201d pass": [[168, "runnable-false-class-mycustomcontroller-def-init-self-gains-max-force-kwargs-initialize-controller-with-gains-and-parameters-pass-def-compute-control-self-state-state-vars-history-compute-control-signal-for-current-state-parameters-state-np-ndarray-state-vector-x-dx-1-d1-2-d2-state-vars-dict-controller-specific-internal-state-history-dict-historical-data-for-multi-step-algorithms-returns-control-float-control-input-force-applied-to-cart-state-vars-dict-updated-internal-state-history-dict-updated-history-pass-def-initialize-history-self-dict-initialize-history-buffer-for-controller-return-def-cleanup-self-clean-up-resources-optional-pass"]], "runnable: false class OptimizationMonitor: \u201c\u201d\u201d Real-time monitoring system for PSO optimization with adaptive features. \u201c\u201d\u201d def init(self, monitors: dict, config: dict): self.monitors = monitors self.config = config self.monitoring_data = { \u2018iteration_times\u2019: [], \u2018memory_usage\u2019: [], \u2018cost_improvements\u2019: [], \u2018diversity_metrics\u2019: [], \u2018constraint_violations\u2019: [], \u2018safety_alerts\u2019: [] } def monitor_iteration(self, iteration: int, swarm_state: dict) -> MonitoringResult: \u201c\u201d\u201d Monitor single PSO iteration with metrics collection. \u201c\u201d\u201d iteration_start = time.time() result = MonitoringResult() # Performance monitoring perf_metrics = self.monitors[\u2018performance\u2019].collect_metrics(swarm_state) self.monitoring_data[\u2018iteration_times\u2019].append(perf_metrics[\u2018iteration_time\u2019]) self.monitoring_data[\u2018memory_usage\u2019].append(perf_metrics[\u2018memory_mb\u2019]) # Convergence monitoring conv_metrics = self.monitors[\u2018convergence\u2019].analyze_convergence(swarm_state) self.monitoring_data[\u2018cost_improvements\u2019].append(conv_metrics[\u2018cost_improvement\u2019]) self.monitoring_data[\u2018diversity_metrics\u2019].append(conv_metrics[\u2018diversity\u2019]) # Constraint validation constraint_result = self._validate_constraints_realtime(swarm_state) self.monitoring_data[\u2018constraint_violations\u2019].extend(constraint_result[\u2018violations\u2019]) # Safety monitoring safety_result = self.monitors[\u2018safety\u2019].check_safety_conditions(swarm_state) if safety_result[\u2018alerts\u2019]: self.monitoring_data[\u2018safety_alerts\u2019].extend(safety_result[\u2018alerts\u2019]) # Adaptive parameter adjustment if self._should_adapt_parameters(iteration, swarm_state): adaptations = self._compute_parameter_adaptations(swarm_state) result.parameter_adaptations = adaptations # Issue #2 specific monitoring for STA-SMC if self.config.get(\u2018controller_type\u2019) == \u2018sta_smc\u2019: issue2_result = self._monitor_issue2_compliance(swarm_state) result.issue2_compliance = issue2_result result.monitoring_data = self.monitoring_data result.iteration_time = time.time() - iteration_start return result def _validate_constraints_realtime(self, swarm_state: dict) -> dict: \u201c\u201d\u201d Real-time validation of mathematical and physical constraints. \u201c\u201d\u201d violations = [] particles = swarm_state.get(\u2018positions\u2019, np.array([])) if particles.size == 0: return {\u2018violations\u2019: violations} controller_type = self.config.get(\u2018controller_type\u2019, \u2018classical_smc\u2019) # Controller-specific constraint checking if controller_type == \u2018sta_smc\u2019 and particles.shape[1] >= 6: # K\u2081 > K\u2082 constraint k1_particles, k2_particles = particles[:, 0], particles[:, 1] k1_le_k2_mask = k1_particles <= k2_particles if np.any(k1_le_k2_mask): violation_count = np.sum(k1_le_k2_mask) violations.append({ \u2018type\u2019: \u2018STA_STABILITY_VIOLATION\u2019, \u2018count\u2019: violation_count, \u2018particles\u2019: np.where(k1_le_k2_mask)[0].tolist(), \u2018severity\u2019: \u2018HIGH\u2019 }) # Issue #2 damping ratio constraint if particles.shape[1] >= 6: lambda1, lambda2 = particles[:, 4], particles[:, 5] k1, k2 = particles[:, 2], particles[:, 3] # Safe computation with epsilon to avoid division by zero epsilon = 1e-12 zeta1 = lambda1 / (2 * np.sqrt(k1 + epsilon)) zeta2 = lambda2 / (2 * np.sqrt(k2 + epsilon)) # Check Issue #2 requirement: \u03b6 \u2265 0.69 zeta1_violation = zeta1 < 0.69 zeta2_violation = zeta2 < 0.69 if np.any(zeta1_violation) or np.any(zeta2_violation): violation_particles = np.where(zeta1_violation | zeta2_violation)[0] violations.append({ \u2018type\u2019: \u2018ISSUE2_DAMPING_VIOLATION\u2019, \u2018count\u2019: len(violation_particles), \u2018particles\u2019: violation_particles.tolist(), \u2018severity\u2019: \u2018HIGH\u2019, \u2018details\u2019: { \u2018min_zeta1\u2019: np.min(zeta1), \u2018min_zeta2\u2019: np.min(zeta2), \u2018requirement\u2019: \u2018\u03b6 \u2265 0.69 for <5% overshoot\u2019 } }) return {\u2018violations\u2019: violations} def _monitor_issue2_compliance(self, swarm_state: dict) -> dict: \u201c\u201d\u201d Specialized monitoring for Issue #2 overshoot compliance. \u201c\u201d\u201d particles = swarm_state.get(\u2018positions\u2019, np.array([])) if particles.size == 0 or particles.shape[1] < 6: return {\u2018status\u2019: \u2018insufficient_data\u2019} # Extract surface coefficients lambda1, lambda2 = particles[:, 4], particles[:, 5] k1, k2 = particles[:, 2], particles[:, 3] # Compute damping ratios epsilon = 1e-12 zeta1 = lambda1 / (2 * np.sqrt(k1 + epsilon)) zeta2 = lambda2 / (2 * np.sqrt(k2 + epsilon)) # Issue #2 compliance analysis compliance_stats = { \u2018compliant_particles\u2019: 0, \u2018total_particles\u2019: len(particles), \u2018min_damping_ratio\u2019: min(np.min(zeta1), np.min(zeta2)), \u2018avg_damping_ratio\u2019: (np.mean(zeta1) + np.mean(zeta2)) / 2, \u2018predicted_overshoot_range\u2019: [], \u2018lambda_bounds_status\u2019: \u2018unknown\u2019 } # Count compliant particles (\u03b6 \u2265 0.69) compliant_mask = (zeta1 >= 0.69) & (zeta2 >= 0.69) compliance_stats[\u2018compliant_particles\u2019] = np.sum(compliant_mask) # Predict overshoot for representative particles for i in range(min(5, len(particles))): # Sample first 5 particles zeta_avg = (zeta1[i] + zeta2[i]) / 2 if zeta_avg < 1.0: # Underdamped predicted_overshoot = 100 * np.exp(-zeta_avg * np.pi / np.sqrt(1 - zeta_avg**2)) else: # Overdamped predicted_overshoot = 0.0 compliance_stats[\u2018predicted_overshoot_range\u2019].append(predicted_overshoot) # Check lambda bounds status max_lambda1, max_lambda2 = np.max(lambda1), np.max(lambda2) if max_lambda1 <= 10.0 and max_lambda2 <= 10.0: compliance_stats[\u2018lambda_bounds_status\u2019] = \u2018compliant\u2019 else: compliance_stats[\u2018lambda_bounds_status\u2019] = \u2018violation\u2019 return compliance_stats": [[252, "runnable-false-class-optimizationmonitor-real-time-monitoring-system-for-pso-optimization-with-adaptive-features-def-init-self-monitors-dict-config-dict-self-monitors-monitors-self-config-config-self-monitoring-data-iteration-times-memory-usage-cost-improvements-diversity-metrics-constraint-violations-safety-alerts-def-monitor-iteration-self-iteration-int-swarm-state-dict-monitoringresult-monitor-single-pso-iteration-with-metrics-collection-iteration-start-time-time-result-monitoringresult-performance-monitoring-perf-metrics-self-monitors-performance-collect-metrics-swarm-state-self-monitoring-data-iteration-times-append-perf-metrics-iteration-time-self-monitoring-data-memory-usage-append-perf-metrics-memory-mb-convergence-monitoring-conv-metrics-self-monitors-convergence-analyze-convergence-swarm-state-self-monitoring-data-cost-improvements-append-conv-metrics-cost-improvement-self-monitoring-data-diversity-metrics-append-conv-metrics-diversity-constraint-validation-constraint-result-self-validate-constraints-realtime-swarm-state-self-monitoring-data-constraint-violations-extend-constraint-result-violations-safety-monitoring-safety-result-self-monitors-safety-check-safety-conditions-swarm-state-if-safety-result-alerts-self-monitoring-data-safety-alerts-extend-safety-result-alerts-adaptive-parameter-adjustment-if-self-should-adapt-parameters-iteration-swarm-state-adaptations-self-compute-parameter-adaptations-swarm-state-result-parameter-adaptations-adaptations-issue-2-specific-monitoring-for-sta-smc-if-self-config-get-controller-type-sta-smc-issue2-result-self-monitor-issue2-compliance-swarm-state-result-issue2-compliance-issue2-result-result-monitoring-data-self-monitoring-data-result-iteration-time-time-time-iteration-start-return-result-def-validate-constraints-realtime-self-swarm-state-dict-dict-real-time-validation-of-mathematical-and-physical-constraints-violations-particles-swarm-state-get-positions-np-array-if-particles-size-0-return-violations-violations-controller-type-self-config-get-controller-type-classical-smc-controller-specific-constraint-checking-if-controller-type-sta-smc-and-particles-shape-1-6-k1-k2-constraint-k1-particles-k2-particles-particles-0-particles-1-k1-le-k2-mask-k1-particles-k2-particles-if-np-any-k1-le-k2-mask-violation-count-np-sum-k1-le-k2-mask-violations-append-type-sta-stability-violation-count-violation-count-particles-np-where-k1-le-k2-mask-0-tolist-severity-high-issue-2-damping-ratio-constraint-if-particles-shape-1-6-lambda1-lambda2-particles-4-particles-5-k1-k2-particles-2-particles-3-safe-computation-with-epsilon-to-avoid-division-by-zero-epsilon-1e-12-zeta1-lambda1-2-np-sqrt-k1-epsilon-zeta2-lambda2-2-np-sqrt-k2-epsilon-check-issue-2-requirement-0-69-zeta1-violation-zeta1-0-69-zeta2-violation-zeta2-0-69-if-np-any-zeta1-violation-or-np-any-zeta2-violation-violation-particles-np-where-zeta1-violation-zeta2-violation-0-violations-append-type-issue2-damping-violation-count-len-violation-particles-particles-violation-particles-tolist-severity-high-details-min-zeta1-np-min-zeta1-min-zeta2-np-min-zeta2-requirement-0-69-for-5-overshoot-return-violations-violations-def-monitor-issue2-compliance-self-swarm-state-dict-dict-specialized-monitoring-for-issue-2-overshoot-compliance-particles-swarm-state-get-positions-np-array-if-particles-size-0-or-particles-shape-1-6-return-status-insufficient-data-extract-surface-coefficients-lambda1-lambda2-particles-4-particles-5-k1-k2-particles-2-particles-3-compute-damping-ratios-epsilon-1e-12-zeta1-lambda1-2-np-sqrt-k1-epsilon-zeta2-lambda2-2-np-sqrt-k2-epsilon-issue-2-compliance-analysis-compliance-stats-compliant-particles-0-total-particles-len-particles-min-damping-ratio-min-np-min-zeta1-np-min-zeta2-avg-damping-ratio-np-mean-zeta1-np-mean-zeta2-2-predicted-overshoot-range-lambda-bounds-status-unknown-count-compliant-particles-0-69-compliant-mask-zeta1-0-69-zeta2-0-69-compliance-stats-compliant-particles-np-sum-compliant-mask-predict-overshoot-for-representative-particles-for-i-in-range-min-5-len-particles-sample-first-5-particles-zeta-avg-zeta1-i-zeta2-i-2-if-zeta-avg-1-0-underdamped-predicted-overshoot-100-np-exp-zeta-avg-np-pi-np-sqrt-1-zeta-avg-2-else-overdamped-predicted-overshoot-0-0-compliance-stats-predicted-overshoot-range-append-predicted-overshoot-check-lambda-bounds-status-max-lambda1-max-lambda2-np-max-lambda1-np-max-lambda2-if-max-lambda1-10-0-and-max-lambda2-10-0-compliance-stats-lambda-bounds-status-compliant-else-compliance-stats-lambda-bounds-status-violation-return-compliance-stats"]], "runnable: false class OptimizationPipeline: \u201c\u201d\u201dEnd-to-end optimization pipeline for SMC controllers.\u201d\u201d\u201d def run_optimization_workflow( self, controller_type: str, base_config: Dict[str, Any], optimization_config: Dict[str, Any] ) -> OptimizationWorkflowResult: \u201c\u201d\u201dExecute complete optimization workflow.\u201d\u201d\u201d # Phase 1: Preprocessing config = self._prepare_optimization_config(base_config, optimization_config) bounds = self._get_parameter_bounds(controller_type) # Phase 2: PSO Optimization optimizer = PSOOptimizer(controller_type, config, config[\u2018dynamics\u2019]) optimization_result = optimizer.optimize( n_particles=optimization_config.get(\u2018n_particles\u2019, 30), max_iterations=optimization_config.get(\u2018max_iterations\u2019, 100), convergence_threshold=optimization_config.get(\u2018convergence_threshold\u2019, 1e-6) ) # Phase 3: Validation validation_result = self._validate_optimized_controller( controller_type, optimization_result.best_gains, config ) # Phase 4: Result Packaging workflow_result = OptimizationWorkflowResult( controller_type=controller_type, optimization_result=optimization_result, validation_result=validation_result, optimized_gains=optimization_result.best_gains, final_cost=optimization_result.best_cost ) return workflow_result": [[63, "runnable-false-class-optimizationpipeline-end-to-end-optimization-pipeline-for-smc-controllers-def-run-optimization-workflow-self-controller-type-str-base-config-dict-str-any-optimization-config-dict-str-any-optimizationworkflowresult-execute-complete-optimization-workflow-phase-1-preprocessing-config-self-prepare-optimization-config-base-config-optimization-config-bounds-self-get-parameter-bounds-controller-type-phase-2-pso-optimization-optimizer-psooptimizer-controller-type-config-config-dynamics-optimization-result-optimizer-optimize-n-particles-optimization-config-get-n-particles-30-max-iterations-optimization-config-get-max-iterations-100-convergence-threshold-optimization-config-get-convergence-threshold-1e-6-phase-3-validation-validation-result-self-validate-optimized-controller-controller-type-optimization-result-best-gains-config-phase-4-result-packaging-workflow-result-optimizationworkflowresult-controller-type-controller-type-optimization-result-optimization-result-validation-result-validation-result-optimized-gains-optimization-result-best-gains-final-cost-optimization-result-best-cost-return-workflow-result"]], "runnable: false class OptimizationWorkflowManager: \u201c\u201d\u201d management of PSO optimization workflow execution. \u201c\u201d\u201d def init(self, config: dict, controller_type: str): self.config = config self.controller_type = controller_type self.monitors = { \u2018performance\u2019: PerformanceMonitor(), \u2018convergence\u2019: ConvergenceMonitor(), \u2018memory\u2019: MemoryMonitor(), \u2018safety\u2019: SafetyMonitor() } self.workflow_state = WorkflowState() def execute_optimization_workflow(self, controller_factory: Callable) -> OptimizationResult: \u201c\u201d\u201d Execute complete PSO optimization workflow with monitoring. Workflow Phases: 1. Pre-optimization setup and validation 2. PSO tuner initialization 3. Optimization loop execution 4. Real-time monitoring and adaptation 5. Post-optimization validation 6. Result analysis and reporting \u201c\u201d\u201d workflow_start_time = time.time() result = OptimizationResult() try: # Phase 1: Pre-optimization Setup setup_result = self._execute_setup_phase(controller_factory) result.setup_results = setup_result if not setup_result.success: result.status = \u2018SETUP_FAILED\u2019 return result # Phase 2: PSO Tuner Initialization tuner_result = self._execute_tuner_initialization() result.tuner_results = tuner_result if not tuner_result.success: result.status = \u2018TUNER_FAILED\u2019 return result # Phase 3: Optimization Execution optimization_result = self._execute_optimization_loop() result.optimization_results = optimization_result if not optimization_result.success: result.status = \u2018OPTIMIZATION_FAILED\u2019 return result # Phase 4: Post-optimization Validation validation_result = self._execute_validation_phase(optimization_result) result.validation_results = validation_result # Phase 5: Result Analysis analysis_result = self._execute_analysis_phase(optimization_result) result.analysis_results = analysis_result result.status = \u2018SUCCESS\u2019 result.total_time = time.time() - workflow_start_time except Exception as e: result.status = \u2018ERROR\u2019 result.error_message = str(e) result.total_time = time.time() - workflow_start_time return result def _execute_setup_phase(self, controller_factory: Callable) -> SetupResult: \u201c\u201d\u201d Execute pre-optimization setup and validation. \u201c\u201d\u201d setup_result = SetupResult() # Validate controller factory if not hasattr(controller_factory, \u2018n_gains\u2019): setup_result.errors.append(\u2018Controller factory missing n_gains attribute\u2019) setup_result.success = False return setup_result # Validate factory functionality try: test_gains = np.ones(controller_factory.n_gains) test_controller = controller_factory(test_gains) if not hasattr(test_controller, \u2018max_force\u2019): setup_result.warnings.append(\u2018Controller missing max_force attribute\u2019) except Exception as e: setup_result.errors.append(f\u2019Controller factory test failed: {str(e)}\u2019) setup_result.success = False return setup_result # Setup monitoring systems for name, monitor in self.monitors.items(): try: monitor.initialize(self.config) setup_result.monitors_initialized.append(name) except Exception as e: setup_result.errors.append(f\u2019Monitor {name} initialization failed: {str(e)}\u2019) # Validate memory availability available_memory = psutil.virtual_memory().available / (1024**3) # GB required_memory = self._estimate_memory_requirement() if available_memory < required_memory: setup_result.warnings.append(f\u2019Low memory: {available_memory:.1f}GB available, {required_memory:.1f}GB recommended\u2019) setup_result.success = len(setup_result.errors) == 0 return setup_result def _execute_optimization_loop(self) -> OptimizationLoopResult: \u201c\u201d\u201d Execute PSO optimization loop with real-time monitoring. \u201c\u201d\u201d result = OptimizationLoopResult() try: # Initialize PSO tuner tuner = PSOTuner( controller_factory=self.controller_factory, config=self.config, seed=self.config.get(\u2018pso\u2019, {}).get(\u2018execution\u2019, {}).get(\u2018seed\u2019, 42) ) # Setup optimization monitoring optimization_monitor = OptimizationMonitor( monitors=self.monitors, config=self.config ) # Execute optimization with monitoring pso_result = tuner.optimise() # Extract results result.best_cost = pso_result[\u2018best_cost\u2019] result.best_gains = pso_result[\u2018best_pos\u2019] result.cost_history = pso_result[\u2018history\u2019][\u2018cost\u2019] result.position_history = pso_result[\u2018history\u2019][\u2018pos\u2019] # Get monitoring data result.performance_metrics = optimization_monitor.get_performance_summary() result.convergence_analysis = optimization_monitor.get_convergence_analysis() result.success = True except Exception as e: result.success = False result.error_message = str(e) return result": [[252, "runnable-false-class-optimizationworkflowmanager-management-of-pso-optimization-workflow-execution-def-init-self-config-dict-controller-type-str-self-config-config-self-controller-type-controller-type-self-monitors-performance-performancemonitor-convergence-convergencemonitor-memory-memorymonitor-safety-safetymonitor-self-workflow-state-workflowstate-def-execute-optimization-workflow-self-controller-factory-callable-optimizationresult-execute-complete-pso-optimization-workflow-with-monitoring-workflow-phases-1-pre-optimization-setup-and-validation-2-pso-tuner-initialization-3-optimization-loop-execution-4-real-time-monitoring-and-adaptation-5-post-optimization-validation-6-result-analysis-and-reporting-workflow-start-time-time-time-result-optimizationresult-try-phase-1-pre-optimization-setup-setup-result-self-execute-setup-phase-controller-factory-result-setup-results-setup-result-if-not-setup-result-success-result-status-setup-failed-return-result-phase-2-pso-tuner-initialization-tuner-result-self-execute-tuner-initialization-result-tuner-results-tuner-result-if-not-tuner-result-success-result-status-tuner-failed-return-result-phase-3-optimization-execution-optimization-result-self-execute-optimization-loop-result-optimization-results-optimization-result-if-not-optimization-result-success-result-status-optimization-failed-return-result-phase-4-post-optimization-validation-validation-result-self-execute-validation-phase-optimization-result-result-validation-results-validation-result-phase-5-result-analysis-analysis-result-self-execute-analysis-phase-optimization-result-result-analysis-results-analysis-result-result-status-success-result-total-time-time-time-workflow-start-time-except-exception-as-e-result-status-error-result-error-message-str-e-result-total-time-time-time-workflow-start-time-return-result-def-execute-setup-phase-self-controller-factory-callable-setupresult-execute-pre-optimization-setup-and-validation-setup-result-setupresult-validate-controller-factory-if-not-hasattr-controller-factory-n-gains-setup-result-errors-append-controller-factory-missing-n-gains-attribute-setup-result-success-false-return-setup-result-validate-factory-functionality-try-test-gains-np-ones-controller-factory-n-gains-test-controller-controller-factory-test-gains-if-not-hasattr-test-controller-max-force-setup-result-warnings-append-controller-missing-max-force-attribute-except-exception-as-e-setup-result-errors-append-f-controller-factory-test-failed-str-e-setup-result-success-false-return-setup-result-setup-monitoring-systems-for-name-monitor-in-self-monitors-items-try-monitor-initialize-self-config-setup-result-monitors-initialized-append-name-except-exception-as-e-setup-result-errors-append-f-monitor-name-initialization-failed-str-e-validate-memory-availability-available-memory-psutil-virtual-memory-available-1024-3-gb-required-memory-self-estimate-memory-requirement-if-available-memory-required-memory-setup-result-warnings-append-f-low-memory-available-memory-1f-gb-available-required-memory-1f-gb-recommended-setup-result-success-len-setup-result-errors-0-return-setup-result-def-execute-optimization-loop-self-optimizationloopresult-execute-pso-optimization-loop-with-real-time-monitoring-result-optimizationloopresult-try-initialize-pso-tuner-tuner-psotuner-controller-factory-self-controller-factory-config-self-config-seed-self-config-get-pso-get-execution-get-seed-42-setup-optimization-monitoring-optimization-monitor-optimizationmonitor-monitors-self-monitors-config-self-config-execute-optimization-with-monitoring-pso-result-tuner-optimise-extract-results-result-best-cost-pso-result-best-cost-result-best-gains-pso-result-best-pos-result-cost-history-pso-result-history-cost-result-position-history-pso-result-history-pos-get-monitoring-data-result-performance-metrics-optimization-monitor-get-performance-summary-result-convergence-analysis-optimization-monitor-get-convergence-analysis-result-success-true-except-exception-as-e-result-success-false-result-error-message-str-e-return-result"]], "runnable: false class Orchestrator(ABC): \u201c\u201d\u201dBase interface for simulation execution strategies.\u201d\u201d\u201d @abstractmethod def execute( self, initial_state: np.ndarray, control_inputs: np.ndarray, dt: float, horizon: int, **kwargs ) -> ResultContainer: \u201c\u201d\u201dExecute simulation with specified strategy.\u201d\u201d\u201d pass": [[61, "runnable-false-class-orchestrator-abc-base-interface-for-simulation-execution-strategies-abstractmethod-def-execute-self-initial-state-np-ndarray-control-inputs-np-ndarray-dt-float-horizon-int-kwargs-resultcontainer-execute-simulation-with-specified-strategy-pass"]], "runnable: false class PSOControllerWrapper: \u201c\u201d\u201d PSO-optimized controller wrapper with validation. Provides: - Simplified control interface for fitness evaluation - Automatic gain validation with controller-specific rules - Performance monitoring and error handling - Thread-safe operation for parallel PSO \u201c\u201d\u201d def init(self, controller: Any, controller_type: str, validation_config: Dict[str, Any]): self.controller = controller self.controller_type = controller_type self.validation_config = validation_config # PSO-required attributes self.n_gains = CONTROLLER_REGISTRY[controller_type][\u2018gain_count\u2019] self.max_force = getattr(controller, \u2018max_force\u2019, 150.0) # Performance tracking self.control_calls = 0 self.control_failures = 0 self.last_control_time = 0.0 def validate_gains(self, particles: np.ndarray) -> np.ndarray: \u201c\u201d\u201d Vectorized gain validation for PSO particle swarms. Args: particles: Array of shape (n_particles, n_gains) Returns: Boolean mask indicating valid particles \u201c\u201d\u201d if particles.ndim == 1: particles = particles.reshape(1, -1) valid_mask = np.ones(particles.shape[0], dtype=bool) # Basic validation for i, gains in enumerate(particles): try: # Check gain count if len(gains) != self.n_gains: valid_mask[i] = False continue # Check for finite positive values if not all(np.isfinite(g) and g > 0 for g in gains): valid_mask[i] = False continue # Controller-specific validation if not self._validate_controller_specific_constraints(gains): valid_mask[i] = False continue except Exception: valid_mask[i] = False return valid_mask def _validate_controller_specific_constraints(self, gains: List[float]) -> bool: \u201c\u201d\u201dApply mathematical constraints for each controller type.\u201d\u201d\u201d if self.controller_type == \u2018classical_smc\u2019: # Classical SMC: All gains positive, reasonable ranges k1, k2, lam1, lam2, K, kd = gains return all(g > 0 for g in gains[:5]) and kd >= 0 elif self.controller_type == \u2018sta_smc\u2019: # Super-Twisting: Critical stability condition K1 > K2 K1, K2 = gains[0], gains[1] return K1 > K2 > 0 and all(g > 0 for g in gains[2:]) elif self.controller_type == \u2018adaptive_smc\u2019: # Adaptive SMC: Adaptation rate bounds k1, k2, lam1, lam2, gamma = gains return all(g > 0 for g in gains[:4]) and 0.1 <= gamma <= 20.0 elif self.controller_type == \u2018hybrid_adaptive_sta_smc\u2019: # Hybrid SMC: Surface parameters positive return all(g > 0 for g in gains) return True def compute_control(self, state: np.ndarray) -> np.ndarray: \u201c\u201d\u201d PSO-compatible control computation with error handling. Args: state: System state vector [\u03b8\u2081, \u03b8\u2082, x, \u03b8\u0307\u2081, \u03b8\u0307\u2082, \u1e8b] Returns: Control output as numpy array \u201c\u201d\u201d try: self.control_calls += 1 start_time = time.time() # Validate input state if len(state) != 6: raise ValueError(f\u201dExpected 6-element state, got {len(state)}\u201d) # Call underlying controller result = self.controller.compute_control(state, {}, {}) # Extract control value if hasattr(result, \u2018u\u2019): u = result.u elif isinstance(result, dict) and \u2018u\u2019 in result: u = result[\u2018u\u2019] else: u = result # Apply saturation and return as array u_sat = np.clip(float(u), -self.max_force, self.max_force) # Performance tracking self.last_control_time = time.time() - start_time return np.array([u_sat]) except Exception as e: self.control_failures += 1 # Return safe fallback control return np.array([0.0])": [[104, "runnable-false-class-psocontrollerwrapper-pso-optimized-controller-wrapper-with-validation-provides-simplified-control-interface-for-fitness-evaluation-automatic-gain-validation-with-controller-specific-rules-performance-monitoring-and-error-handling-thread-safe-operation-for-parallel-pso-def-init-self-controller-any-controller-type-str-validation-config-dict-str-any-self-controller-controller-self-controller-type-controller-type-self-validation-config-validation-config-pso-required-attributes-self-n-gains-controller-registry-controller-type-gain-count-self-max-force-getattr-controller-max-force-150-0-performance-tracking-self-control-calls-0-self-control-failures-0-self-last-control-time-0-0-def-validate-gains-self-particles-np-ndarray-np-ndarray-vectorized-gain-validation-for-pso-particle-swarms-args-particles-array-of-shape-n-particles-n-gains-returns-boolean-mask-indicating-valid-particles-if-particles-ndim-1-particles-particles-reshape-1-1-valid-mask-np-ones-particles-shape-0-dtype-bool-basic-validation-for-i-gains-in-enumerate-particles-try-check-gain-count-if-len-gains-self-n-gains-valid-mask-i-false-continue-check-for-finite-positive-values-if-not-all-np-isfinite-g-and-g-0-for-g-in-gains-valid-mask-i-false-continue-controller-specific-validation-if-not-self-validate-controller-specific-constraints-gains-valid-mask-i-false-continue-except-exception-valid-mask-i-false-return-valid-mask-def-validate-controller-specific-constraints-self-gains-list-float-bool-apply-mathematical-constraints-for-each-controller-type-if-self-controller-type-classical-smc-classical-smc-all-gains-positive-reasonable-ranges-k1-k2-lam1-lam2-k-kd-gains-return-all-g-0-for-g-in-gains-5-and-kd-0-elif-self-controller-type-sta-smc-super-twisting-critical-stability-condition-k1-k2-k1-k2-gains-0-gains-1-return-k1-k2-0-and-all-g-0-for-g-in-gains-2-elif-self-controller-type-adaptive-smc-adaptive-smc-adaptation-rate-bounds-k1-k2-lam1-lam2-gamma-gains-return-all-g-0-for-g-in-gains-4-and-0-1-gamma-20-0-elif-self-controller-type-hybrid-adaptive-sta-smc-hybrid-smc-surface-parameters-positive-return-all-g-0-for-g-in-gains-return-true-def-compute-control-self-state-np-ndarray-np-ndarray-pso-compatible-control-computation-with-error-handling-args-state-system-state-vector-1-2-x-1-2-x-returns-control-output-as-numpy-array-try-self-control-calls-1-start-time-time-time-validate-input-state-if-len-state-6-raise-valueerror-f-expected-6-element-state-got-len-state-call-underlying-controller-result-self-controller-compute-control-state-extract-control-value-if-hasattr-result-u-u-result-u-elif-isinstance-result-dict-and-u-in-result-u-result-u-else-u-result-apply-saturation-and-return-as-array-u-sat-np-clip-float-u-self-max-force-self-max-force-performance-tracking-self-last-control-time-time-time-start-time-return-np-array-u-sat-except-exception-as-e-self-control-failures-1-return-safe-fallback-control-return-np-array-0-0"]], "runnable: false class PSOControllerWrapper: \u201c\u201d\u201d PSO-optimized wrapper providing simplified interface for SMC controllers. This wrapper is specifically designed for PSO fitness evaluation with: - Simplified control interface (single state input) - Automatic state management for stateful controllers - Unified output format (numpy array) - Robust error handling for PSO robustness - Performance optimization for repeated evaluations The wrapper handles the complexity of different SMC controller interfaces while providing a consistent, PSO-friendly API. Mathematical Foundation: The wrapper preserves the mathematical properties of the underlying SMC controller while simplifying the interface: Input: state = [\u03b8\u2081, \u03b8\u2082, x, \u03b8\u0307\u2081, \u03b8\u0307\u2082, \u1e8b] \u2208 \u211d\u2076 Output: u \u2208 \u211d (scalar control force) Internal State Management: - Classical SMC: Stateless (empty state_vars) - STA SMC: Maintains (z, \u03c3) for integration - Adaptive SMC: Tracks adaptation variables - Hybrid SMC: Manages mode switching state Performance Characteristics: - Control computation: <0.1ms typical - Memory overhead: <500B per wrapper - Thread safety: Read operations only - Error recovery: Graceful degradation for invalid inputs \u201c\u201d\u201d def init(self, controller: SMCProtocol): \u201c\u201d\u201d Initialize PSO wrapper with SMC controller. Args: controller: SMC controller implementing SMCProtocol Raises: TypeError: If controller doesn\u2019t implement required interface ValueError: If controller configuration is invalid \u201c\u201d\u201d # Validate controller interface if not hasattr(controller, \u2018compute_control\u2019): raise TypeError(\u201cController must implement compute_control method\u201d) if not hasattr(controller, \u2018gains\u2019): raise TypeError(\u201cController must have gains property\u201d) self.controller = controller self._history = {} # Initialize empty history # Initialize controller-specific state variables controller_name = type(controller).name if \u2018SuperTwisting\u2019 in controller_name or \u2018STA\u2019 in controller_name: # STA-SMC maintains integration variables (z, \u03c3) self._state_vars = (0.0, 0.0) # Initial (z=0, \u03c3=0) elif \u2018Hybrid\u2019 in controller_name: # Hybrid controller tracks adaptive gains and integration self._state_vars = ( getattr(controller, \u2018k1_init\u2019, 5.0), # k1_prev getattr(controller, \u2018k2_init\u2019, 3.0), # k2_prev 0.0 # u_int_prev ) elif \u2018Adaptive\u2019 in controller_name: # Adaptive SMC may track adaptation state self._state_vars = getattr(controller, \u2018_initial_state\u2019, ()) else: # Classical SMC and others use empty state self._state_vars = () # Performance tracking self._call_count = 0 self._total_compute_time = 0.0 self._last_error = None def compute_control(self, state: np.ndarray, state_vars: Optional[Any] = None, history: Optional[Dict[str, Any]] = None ) -> np.ndarray: \u201c\u201d\u201d Compute control with flexible interface supporting both: 1. Simplified PSO interface: compute_control(state) 2. Full interface: compute_control(state, state_vars, history) Mathematical Interface: Input state vector: x = [\u03b8\u2081, \u03b8\u2082, x_cart, \u03b8\u0307\u2081, \u03b8\u0307\u2082, \u1e8b_cart] - \u03b8\u2081, \u03b8\u2082: Pendulum angles [rad] - x_cart: Cart position [m] - \u03b8\u0307\u2081, \u03b8\u0307\u2082: Angular velocities [rad/s] - \u1e8b_cart: Cart velocity [m/s] Output control: u \u2208 \u211d - Scalar control force [N] - Bounded by actuator limits Args: state: System state vector (6-element numpy array) state_vars: Controller state variables (optional) history: Controller history (optional) Returns: Control output as 1-element numpy array [u] Raises: ValueError: If state has wrong dimensions RuntimeError: If control computation fails Performance: - Typical computation time: 0.01-0.1ms - Memory allocation: Minimal (output array only) - Error handling: Graceful fallback to zero control PSO Usage Pattern: python def pso_fitness(gains): controller = create_smc_for_pso(SMCType.CLASSICAL, gains) # Simplified interface for PSO total_error = 0.0 for state in test_states: u = controller.compute_control(state) # Returns [u] # Use u[0] for scalar control value total_error += evaluate_single_step(state, u[0]) return total_error  State Management: The wrapper automatically manages controller state between calls: - Classical SMC: No state management needed - STA SMC: Updates integration variables (z, \u03c3) - Adaptive SMC: Updates adaptation parameters - Hybrid SMC: Updates mode and adaptation state Error Recovery: If control computation fails: 1. Log error for debugging 2. Return safe fallback control (zero) 3. Increment error counter for monitoring 4. Continue operation (don\u2019t crash PSO) \u201c\u201d\u201d import time # Performance tracking start_time = time.perf_counter() self._call_count += 1 try: # Input validation if not isinstance(state, np.ndarray): state = np.array(state) if state.shape != (6,): raise ValueError(f\u201dState must be 6-element array, got shape {state.shape}\u201d) if not np.all(np.isfinite(state)): raise ValueError(\u201cState contains non-finite values (NaN or inf)\u201d) # Use provided parameters or defaults final_state_vars = state_vars if state_vars is not None else self._state_vars final_history = history if history is not None else self._history # Call underlying controller result = self.controller.compute_control(state, final_state_vars, final_history) # Extract control value from result # Handle different controller output formats if hasattr(result, \u2018u\u2019): # Standard controller output with .u attribute control_value = result.u # Update state variables if available if hasattr(result, \u2018state_vars\u2019): self._state_vars = result.state_vars elif hasattr(result, \u2018control\u2019): # Alternative output format with .control attribute control_value = result.control elif isinstance(result, dict): # Dictionary output format if \u2018u\u2019 in result: control_value = result[\u2018u\u2019] elif \u2018control\u2019 in result: control_value = result[\u2018control\u2019] else: raise ValueError(\u201cDictionary result missing control value\u201d) # Update state if provided if \u2018state_vars\u2019 in result: self._state_vars = result[\u2018state_vars\u2019] elif isinstance(result, tuple): # Tuple output (e.g., early return from some controllers) control_value = result[0] # First element is control if len(result) > 1: self._state_vars = result[1] # Second element is state else: # Assume result is the control value directly control_value = result # Convert to scalar if needed if isinstance(control_value, np.ndarray): if control_value.size == 1: control_value = float(control_value) else: control_value = float(control_value[0]) elif not isinstance(control_value, (int, float)): control_value = float(control_value) # Validate output if not np.isfinite(control_value): raise ValueError(\u201cController returned non-finite control value\u201d) # Apply saturation (defensive programming) max_force = getattr(self.controller, \u2018max_force\u2019, 100.0) control_saturated = np.clip(control_value, -max_force, max_force) # For simplified interface (PSO usage), return numpy array if state_vars is None and history is None: output = np.array([control_saturated]) else: # For full interface, return in format expected by simulation output = control_saturated # Performance tracking compute_time = time.perf_counter() - start_time self._total_compute_time += compute_time return output except Exception as e: # Error handling for robust PSO operation self._last_error = str(e) # Log error for debugging (in production, use proper logging) print(f\u201dWarning: Control computation failed: {e}\u201d) # Return safe fallback control if state_vars is None and history is None: return np.array([0.0]) # PSO interface else: return 0.0 # Full interface @property def gains(self) -> List[float]: \u201c\u201d\u201d Return controller gains. Returns: List of controller gain parameters Usage: python controller = create_smc_for_pso(SMCType.CLASSICAL, gains) print(f\"Controller gains: {controller.gains}\")  \u201c\u201d\u201d return self.controller.gains @property def performance_stats(self) -> Dict[str, Any]: \u201c\u201d\u201d Return performance statistics for monitoring. Returns: Dictionary with performance metrics: - call_count: Number of control computations - total_time: Total computation time [s] - average_time: Average computation time [ms] - last_error: Last error message (if any) Usage: python # After PSO optimization stats = controller.performance_stats print(f\"Average computation time: {stats['average_time']:.3f}ms\")  \u201c\u201d\u201d avg_time_ms = (self._total_compute_time / self._call_count * 1000 if self._call_count > 0 else 0.0) return { \u2018call_count\u2019: self._call_count, \u2018total_time\u2019: self._total_compute_time, \u2018average_time\u2019: avg_time_ms, \u2018last_error\u2019: self._last_error } def reset_performance_stats(self) -> None: \u201c\u201d\u201dReset performance tracking statistics.\u201d\u201d\u201d self._call_count = 0 self._total_compute_time = 0.0 self._last_error = None def validate_state_input(self, state: np.ndarray) -> Tuple[bool, str]: \u201c\u201d\u201d Validate state input for control computation. Args: state: State vector to validate Returns: Tuple of (is_valid, error_message) Usage: python is_valid, error = controller.validate_state_input(test_state) if not is_valid: print(f\"Invalid state: {error}\")  \u201c\u201d\u201d try: if not isinstance(state, np.ndarray): return False, \u201cState must be numpy array\u201d if state.shape != (6,): return False, f\u201dState must be 6-element array, got {state.shape}\u201d if not np.all(np.isfinite(state)): return False, \u201cState contains non-finite values\u201d # Check reasonable ranges (optional) angles = state[:2] # \u03b8\u2081, \u03b8\u2082 if np.any(np.abs(angles) > 2*np.pi): return False, \u201cAngles exceed reasonable range (\u00b12\u03c0)\u201d velocities = state[3:] # \u03b8\u0307\u2081, \u03b8\u0307\u2082, \u1e8b if np.any(np.abs(velocities) > 100): return False, \u201cVelocities exceed reasonable range (\u00b1100)\u201d return True, \u201c\u201d except Exception as e: return False, f\u201dValidation error: {e}\u201d def repr(self) -> str: \u201c\u201d\u201dString representation for debugging.\u201d\u201d\u201d controller_type = type(self.controller).name return f\u201dPSOControllerWrapper({controller_type}, gains={self.gains})\u201d": [[112, "runnable-false-class-psocontrollerwrapper-pso-optimized-wrapper-providing-simplified-interface-for-smc-controllers-this-wrapper-is-specifically-designed-for-pso-fitness-evaluation-with-simplified-control-interface-single-state-input-automatic-state-management-for-stateful-controllers-unified-output-format-numpy-array-robust-error-handling-for-pso-robustness-performance-optimization-for-repeated-evaluations-the-wrapper-handles-the-complexity-of-different-smc-controller-interfaces-while-providing-a-consistent-pso-friendly-api-mathematical-foundation-the-wrapper-preserves-the-mathematical-properties-of-the-underlying-smc-controller-while-simplifying-the-interface-input-state-1-2-x-1-2-x-6-output-u-scalar-control-force-internal-state-management-classical-smc-stateless-empty-state-vars-sta-smc-maintains-z-for-integration-adaptive-smc-tracks-adaptation-variables-hybrid-smc-manages-mode-switching-state-performance-characteristics-control-computation-0-1ms-typical-memory-overhead-500b-per-wrapper-thread-safety-read-operations-only-error-recovery-graceful-degradation-for-invalid-inputs-def-init-self-controller-smcprotocol-initialize-pso-wrapper-with-smc-controller-args-controller-smc-controller-implementing-smcprotocol-raises-typeerror-if-controller-doesn-t-implement-required-interface-valueerror-if-controller-configuration-is-invalid-validate-controller-interface-if-not-hasattr-controller-compute-control-raise-typeerror-controller-must-implement-compute-control-method-if-not-hasattr-controller-gains-raise-typeerror-controller-must-have-gains-property-self-controller-controller-self-history-initialize-empty-history-initialize-controller-specific-state-variables-controller-name-type-controller-name-if-supertwisting-in-controller-name-or-sta-in-controller-name-sta-smc-maintains-integration-variables-z-self-state-vars-0-0-0-0-initial-z-0-0-elif-hybrid-in-controller-name-hybrid-controller-tracks-adaptive-gains-and-integration-self-state-vars-getattr-controller-k1-init-5-0-k1-prev-getattr-controller-k2-init-3-0-k2-prev-0-0-u-int-prev-elif-adaptive-in-controller-name-adaptive-smc-may-track-adaptation-state-self-state-vars-getattr-controller-initial-state-else-classical-smc-and-others-use-empty-state-self-state-vars-performance-tracking-self-call-count-0-self-total-compute-time-0-0-self-last-error-none-def-compute-control-self-state-np-ndarray-state-vars-optional-any-none-history-optional-dict-str-any-none-np-ndarray-compute-control-with-flexible-interface-supporting-both-1-simplified-pso-interface-compute-control-state-2-full-interface-compute-control-state-state-vars-history-mathematical-interface-input-state-vector-x-1-2-x-cart-1-2-x-cart-1-2-pendulum-angles-rad-x-cart-cart-position-m-1-2-angular-velocities-rad-s-x-cart-cart-velocity-m-s-output-control-u-scalar-control-force-n-bounded-by-actuator-limits-args-state-system-state-vector-6-element-numpy-array-state-vars-controller-state-variables-optional-history-controller-history-optional-returns-control-output-as-1-element-numpy-array-u-raises-valueerror-if-state-has-wrong-dimensions-runtimeerror-if-control-computation-fails-performance-typical-computation-time-0-01-0-1ms-memory-allocation-minimal-output-array-only-error-handling-graceful-fallback-to-zero-control-pso-usage-pattern-python-def-pso-fitness-gains-controller-create-smc-for-pso-smctype-classical-gains-simplified-interface-for-pso-total-error-0-0-for-state-in-test-states-u-controller-compute-control-state-returns-u-use-u-0-for-scalar-control-value-total-error-evaluate-single-step-state-u-0-return-total-error-state-management-the-wrapper-automatically-manages-controller-state-between-calls-classical-smc-no-state-management-needed-sta-smc-updates-integration-variables-z-adaptive-smc-updates-adaptation-parameters-hybrid-smc-updates-mode-and-adaptation-state-error-recovery-if-control-computation-fails-1-log-error-for-debugging-2-return-safe-fallback-control-zero-3-increment-error-counter-for-monitoring-4-continue-operation-don-t-crash-pso-import-time-performance-tracking-start-time-time-perf-counter-self-call-count-1-try-input-validation-if-not-isinstance-state-np-ndarray-state-np-array-state-if-state-shape-6-raise-valueerror-f-state-must-be-6-element-array-got-shape-state-shape-if-not-np-all-np-isfinite-state-raise-valueerror-state-contains-non-finite-values-nan-or-inf-use-provided-parameters-or-defaults-final-state-vars-state-vars-if-state-vars-is-not-none-else-self-state-vars-final-history-history-if-history-is-not-none-else-self-history-call-underlying-controller-result-self-controller-compute-control-state-final-state-vars-final-history-extract-control-value-from-result-handle-different-controller-output-formats-if-hasattr-result-u-standard-controller-output-with-u-attribute-control-value-result-u-update-state-variables-if-available-if-hasattr-result-state-vars-self-state-vars-result-state-vars-elif-hasattr-result-control-alternative-output-format-with-control-attribute-control-value-result-control-elif-isinstance-result-dict-dictionary-output-format-if-u-in-result-control-value-result-u-elif-control-in-result-control-value-result-control-else-raise-valueerror-dictionary-result-missing-control-value-update-state-if-provided-if-state-vars-in-result-self-state-vars-result-state-vars-elif-isinstance-result-tuple-tuple-output-e-g-early-return-from-some-controllers-control-value-result-0-first-element-is-control-if-len-result-1-self-state-vars-result-1-second-element-is-state-else-assume-result-is-the-control-value-directly-control-value-result-convert-to-scalar-if-needed-if-isinstance-control-value-np-ndarray-if-control-value-size-1-control-value-float-control-value-else-control-value-float-control-value-0-elif-not-isinstance-control-value-int-float-control-value-float-control-value-validate-output-if-not-np-isfinite-control-value-raise-valueerror-controller-returned-non-finite-control-value-apply-saturation-defensive-programming-max-force-getattr-self-controller-max-force-100-0-control-saturated-np-clip-control-value-max-force-max-force-for-simplified-interface-pso-usage-return-numpy-array-if-state-vars-is-none-and-history-is-none-output-np-array-control-saturated-else-for-full-interface-return-in-format-expected-by-simulation-output-control-saturated-performance-tracking-compute-time-time-perf-counter-start-time-self-total-compute-time-compute-time-return-output-except-exception-as-e-error-handling-for-robust-pso-operation-self-last-error-str-e-log-error-for-debugging-in-production-use-proper-logging-print-f-warning-control-computation-failed-e-return-safe-fallback-control-if-state-vars-is-none-and-history-is-none-return-np-array-0-0-pso-interface-else-return-0-0-full-interface-property-def-gains-self-list-float-return-controller-gains-returns-list-of-controller-gain-parameters-usage-python-controller-create-smc-for-pso-smctype-classical-gains-print-f-controller-gains-controller-gains-return-self-controller-gains-property-def-performance-stats-self-dict-str-any-return-performance-statistics-for-monitoring-returns-dictionary-with-performance-metrics-call-count-number-of-control-computations-total-time-total-computation-time-s-average-time-average-computation-time-ms-last-error-last-error-message-if-any-usage-python-after-pso-optimization-stats-controller-performance-stats-print-f-average-computation-time-stats-average-time-3f-ms-avg-time-ms-self-total-compute-time-self-call-count-1000-if-self-call-count-0-else-0-0-return-call-count-self-call-count-total-time-self-total-compute-time-average-time-avg-time-ms-last-error-self-last-error-def-reset-performance-stats-self-none-reset-performance-tracking-statistics-self-call-count-0-self-total-compute-time-0-0-self-last-error-none-def-validate-state-input-self-state-np-ndarray-tuple-bool-str-validate-state-input-for-control-computation-args-state-state-vector-to-validate-returns-tuple-of-is-valid-error-message-usage-python-is-valid-error-controller-validate-state-input-test-state-if-not-is-valid-print-f-invalid-state-error-try-if-not-isinstance-state-np-ndarray-return-false-state-must-be-numpy-array-if-state-shape-6-return-false-f-state-must-be-6-element-array-got-state-shape-if-not-np-all-np-isfinite-state-return-false-state-contains-non-finite-values-check-reasonable-ranges-optional-angles-state-2-1-2-if-np-any-np-abs-angles-2-np-pi-return-false-angles-exceed-reasonable-range-2-velocities-state-3-1-2-x-if-np-any-np-abs-velocities-100-return-false-velocities-exceed-reasonable-range-100-return-true-except-exception-as-e-return-false-f-validation-error-e-def-repr-self-str-string-representation-for-debugging-controller-type-type-self-controller-name-return-f-psocontrollerwrapper-controller-type-gains-self-gains"]], "runnable: false class PSOControllerWrapper: \u201c\u201d\u201dPSO-friendly wrapper that simplifies the control interface.\u201d\u201d\u201d def init(self, controller: SMCProtocol): self.controller = controller self._history = {} # Initialize state_vars based on controller type controller_name = type(controller).name if \u2018SuperTwisting\u2019 in controller_name: self._state_vars = (0.0, 0.0) # (z, sigma) elif \u2018Hybrid\u2019 in controller_name: self._state_vars = (k1_init, k2_init, 0.0) else: self._state_vars = () def compute_control(self, state: np.ndarray) -> np.ndarray: \u201c\u201d\u201dSimplified compute_control for PSO fitness evaluation.\u201d\u201d\u201d result = self.controller.compute_control(state, self._state_vars, self._history) # Extract control value and return as numpy array if hasattr(result, \u2018u\u2019): control_value = result.u elif isinstance(result, dict) and \u2018u\u2019 in result: control_value = result[\u2018u\u2019] else: control_value = result return np.array([control_value])": [[80, "runnable-false-class-psocontrollerwrapper-pso-friendly-wrapper-that-simplifies-the-control-interface-def-init-self-controller-smcprotocol-self-controller-controller-self-history-initialize-state-vars-based-on-controller-type-controller-name-type-controller-name-if-supertwisting-in-controller-name-self-state-vars-0-0-0-0-z-sigma-elif-hybrid-in-controller-name-self-state-vars-k1-init-k2-init-0-0-else-self-state-vars-def-compute-control-self-state-np-ndarray-np-ndarray-simplified-compute-control-for-pso-fitness-evaluation-result-self-controller-compute-control-state-self-state-vars-self-history-extract-control-value-and-return-as-numpy-array-if-hasattr-result-u-control-value-result-u-elif-isinstance-result-dict-and-u-in-result-control-value-result-u-else-control-value-result-return-np-array-control-value"]], "runnable: false class PSOControllerWrapper: \u201c\u201d\u201dWrapper for SMC controllers to provide PSO-compatible interface.\u201d\u201d\u201d def init(self, controller, n_gains: int, controller_type: str): self.controller = controller self.n_gains = n_gains self.controller_type = controller_type self.max_force = getattr(controller, \u2018max_force\u2019, 150.0) def validate_gains(self, particles: np.ndarray) -> np.ndarray: \u201c\u201d\u201dValidate gain particles for PSO optimization.\u201d\u201d\u201d # Domain-specific validation logic return valid_mask def compute_control(self, state: np.ndarray) -> np.ndarray: \u201c\u201d\u201dPSO-compatible control computation interface.\u201d\u201d\u201d # Standardized interface for PSO fitness evaluation return control_output": [[116, "runnable-false-class-psocontrollerwrapper-wrapper-for-smc-controllers-to-provide-pso-compatible-interface-def-init-self-controller-n-gains-int-controller-type-str-self-controller-controller-self-n-gains-n-gains-self-controller-type-controller-type-self-max-force-getattr-controller-max-force-150-0-def-validate-gains-self-particles-np-ndarray-np-ndarray-validate-gain-particles-for-pso-optimization-domain-specific-validation-logic-return-valid-mask-def-compute-control-self-state-np-ndarray-np-ndarray-pso-compatible-control-computation-interface-standardized-interface-for-pso-fitness-evaluation-return-control-output"]], "runnable: false class PSOControllerWrapper: \u201c\u201d\u201dWrapper for SMC controllers to provide PSO-compatible interface.\u201d\u201d\u201d def init(self, controller, n_gains: int, controller_type: str): self.controller = controller self.n_gains = n_gains self.controller_type = controller_type self.max_force = getattr(controller, \u2018max_force\u2019, 150.0) self.dynamics_model = getattr(controller, \u2018dynamics_model\u2019, None) def validate_gains(self, particles: np.ndarray) -> np.ndarray: \u201c\u201d\u201dValidate gain particles for PSO optimization.\u201d\u201d\u201d # Checks gain count, finiteness, positivity, and controller-specific constraints \u2026 def compute_control(self, state: np.ndarray) -> np.ndarray: \u201c\u201d\u201dPSO-compatible control computation interface.\u201d\u201d\u201d # Simplified interface for PSO fitness evaluation \u2026": [[51, "runnable-false-class-psocontrollerwrapper-wrapper-for-smc-controllers-to-provide-pso-compatible-interface-def-init-self-controller-n-gains-int-controller-type-str-self-controller-controller-self-n-gains-n-gains-self-controller-type-controller-type-self-max-force-getattr-controller-max-force-150-0-self-dynamics-model-getattr-controller-dynamics-model-none-def-validate-gains-self-particles-np-ndarray-np-ndarray-validate-gain-particles-for-pso-optimization-checks-gain-count-finiteness-positivity-and-controller-specific-constraints-def-compute-control-self-state-np-ndarray-np-ndarray-pso-compatible-control-computation-interface-simplified-interface-for-pso-fitness-evaluation"]], "runnable: false class PSOFactoryIntegration: \u201c\u201d\u201dPSO-Factory integration layer.\u201d\u201d\u201d def init(self, controller_type: str, plant_model_config: dict): self.controller_type = controller_type self.plant_config = plant_model_config self.gain_bounds = self._get_theoretical_bounds() def create_optimization_objective( self, performance_metrics: List[str], weights: Optional[List[float]] = None ) -> Callable: \u201c\u201d\u201dCreate PSO optimization objective function.\u201d\u201d\u201d def objective_function(gains: np.ndarray) -> float: try: # Create controller with proposed gains controller = create_controller( self.controller_type, gains=gains.tolist() ) # Create plant model plant_model = PlantModelRegistry.create_model( \u2018simplified_dip\u2019, self.plant_config ) # Create bridge bridge = ControllerPlantBridge(controller, plant_model) # Run simulation performance = self._evaluate_performance( bridge, performance_metrics ) # Compute weighted cost if weights is None: weights = [1.0] * len(performance_metrics) total_cost = sum(w * p for w, p in zip(weights, performance)) return total_cost except Exception as e: # Return high cost for invalid configurations return 1e6 return objective_function def _evaluate_performance( self, bridge: ControllerPlantBridge, metrics: List[str] ) -> List[float]: \u201c\u201d\u201dEvaluate controller performance metrics.\u201d\u201d\u201d # Standard test scenario initial_state = np.array([0.1, 0.05, 0.0, 0.0, 0.0, 0.0]) # Small perturbation dt = 0.001 t_final = 10.0 steps = int(t_final / dt) # Simulation state = initial_state.copy() states = [state.copy()] controls = [] for _ in range(steps): state, metadata = bridge.step(state, dt) states.append(state.copy()) controls.append(metadata[\u2018control_value\u2019]) states = np.array(states) controls = np.array(controls) # Compute metrics results = [] for metric in metrics: if metric == \u2018settling_time\u2019: results.append(self._compute_settling_time(states, dt)) elif metric == \u2018overshoot\u2019: results.append(self._compute_overshoot(states)) elif metric == \u2018control_effort\u2019: results.append(self._compute_control_effort(controls)) elif metric == \u2018steady_state_error\u2019: results.append(self._compute_steady_state_error(states)) else: raise ValueError(f\u201dUnknown metric: {metric}\u201d) return results def _get_theoretical_bounds(self) -> Tuple[List[float], List[float]]: \u201c\u201d\u201dGet theoretical bounds for optimization.\u201d\u201d\u201d return get_gain_bounds_for_pso(SMCType(self.controller_type))": [[278, "runnable-false-class-psofactoryintegration-pso-factory-integration-layer-def-init-self-controller-type-str-plant-model-config-dict-self-controller-type-controller-type-self-plant-config-plant-model-config-self-gain-bounds-self-get-theoretical-bounds-def-create-optimization-objective-self-performance-metrics-list-str-weights-optional-list-float-none-callable-create-pso-optimization-objective-function-def-objective-function-gains-np-ndarray-float-try-create-controller-with-proposed-gains-controller-create-controller-self-controller-type-gains-gains-tolist-create-plant-model-plant-model-plantmodelregistry-create-model-simplified-dip-self-plant-config-create-bridge-bridge-controllerplantbridge-controller-plant-model-run-simulation-performance-self-evaluate-performance-bridge-performance-metrics-compute-weighted-cost-if-weights-is-none-weights-1-0-len-performance-metrics-total-cost-sum-w-p-for-w-p-in-zip-weights-performance-return-total-cost-except-exception-as-e-return-high-cost-for-invalid-configurations-return-1e6-return-objective-function-def-evaluate-performance-self-bridge-controllerplantbridge-metrics-list-str-list-float-evaluate-controller-performance-metrics-standard-test-scenario-initial-state-np-array-0-1-0-05-0-0-0-0-0-0-0-0-small-perturbation-dt-0-001-t-final-10-0-steps-int-t-final-dt-simulation-state-initial-state-copy-states-state-copy-controls-for-in-range-steps-state-metadata-bridge-step-state-dt-states-append-state-copy-controls-append-metadata-control-value-states-np-array-states-controls-np-array-controls-compute-metrics-results-for-metric-in-metrics-if-metric-settling-time-results-append-self-compute-settling-time-states-dt-elif-metric-overshoot-results-append-self-compute-overshoot-states-elif-metric-control-effort-results-append-self-compute-control-effort-controls-elif-metric-steady-state-error-results-append-self-compute-steady-state-error-states-else-raise-valueerror-f-unknown-metric-metric-return-results-def-get-theoretical-bounds-self-tuple-list-float-list-float-get-theoretical-bounds-for-optimization-return-get-gain-bounds-for-pso-smctype-self-controller-type"]], "runnable: false class PSOFactoryInterface: \u201c\u201d\u201d High-performance interface for PSO optimization workflows. Features: - Thread-safe parallel optimization - Automatic gain validation and bounds checking - Performance monitoring and diagnostics - Fallback mechanisms for invalid parameter sets \u201c\u201d\u201d def init(self, controller_type: str, simulation_config: Any): self.controller_type = controller_type self.config = simulation_config self._initialize_pso_environment() def _initialize_pso_environment(self) -> None: \u201c\u201d\u201dSetup PSO optimization environment with all requirements.\u201d\u201d\u201d # Controller specifications self.registry_info = CONTROLLER_REGISTRY[self.controller_type] self.n_gains = self.registry_info[\u2018gain_count\u2019] self.default_gains = self.registry_info[\u2018default_gains\u2019] # PSO bounds (mathematically derived) self.bounds_lower, self.bounds_upper = get_gain_bounds_for_pso( SMCType(self.controller_type) ) # Performance tracking self.metrics = { \u2018total_evaluations\u2019: 0, \u2018successful_evaluations\u2019: 0, \u2018validation_failures\u2019: 0, \u2018simulation_failures\u2019: 0, \u2018best_fitness\u2019: float(\u2018inf\u2019), \u2018average_fitness\u2019: 0.0 } # Thread safety self._evaluation_lock = threading.RLock()": [[104, "runnable-false-class-psofactoryinterface-high-performance-interface-for-pso-optimization-workflows-features-thread-safe-parallel-optimization-automatic-gain-validation-and-bounds-checking-performance-monitoring-and-diagnostics-fallback-mechanisms-for-invalid-parameter-sets-def-init-self-controller-type-str-simulation-config-any-self-controller-type-controller-type-self-config-simulation-config-self-initialize-pso-environment-def-initialize-pso-environment-self-none-setup-pso-optimization-environment-with-all-requirements-controller-specifications-self-registry-info-controller-registry-self-controller-type-self-n-gains-self-registry-info-gain-count-self-default-gains-self-registry-info-default-gains-pso-bounds-mathematically-derived-self-bounds-lower-self-bounds-upper-get-gain-bounds-for-pso-smctype-self-controller-type-performance-tracking-self-metrics-total-evaluations-0-successful-evaluations-0-validation-failures-0-simulation-failures-0-best-fitness-float-inf-average-fitness-0-0-thread-safety-self-evaluation-lock-threading-rlock"]], "runnable: false class PSOFactoryInterface: \u201c\u201d\u201d Specialized interface for PSO optimization integration. Features: - Vectorized controller creation for swarm populations - Automatic parameter validation and bounds checking - Performance-optimized fitness evaluation - Thread-safe parallel optimization support \u201c\u201d\u201d def init(self, controller_type: str, plant_config: Any): self.controller_type = controller_type self.plant_config = plant_config self._setup_optimization_environment() def _setup_optimization_environment(self) -> None: \u201c\u201d\u201dInitialize PSO optimization environment.\u201d\u201d\u201d # Get controller specifications self.gain_spec = SMC_GAIN_SPECS[SMCType(self.controller_type)] self.n_gains = self.gain_spec.n_gains self.bounds = self.gain_spec.gain_bounds # Performance monitoring self.evaluation_count = 0 self.successful_evaluations = 0 self.failed_evaluations = 0 # Thread-safe operations self._lock = threading.RLock() def create_pso_controller_factory(self) -> Callable[[GainsArray], PSOControllerWrapper]: \u201c\u201d\u201d Create PSO-optimized controller factory function. Returns: Factory function that takes gains and returns PSO-wrapped controller \u201c\u201d\u201d def controller_factory(gains: GainsArray) -> PSOControllerWrapper: \u201c\u201d\u201dPSO controller factory with validation.\u201d\u201d\u201d with self._lock: self.evaluation_count += 1 try: # Validate gains if not self._validate_pso_gains(gains): self.failed_evaluations += 1 return self._create_fallback_controller(gains) # Create controller via factory controller = create_controller( controller_type=self.controller_type, config=self.plant_config, gains=gains ) # Wrap for PSO optimization wrapper = PSOControllerWrapper( controller=controller, controller_type=self.controller_type, validation_enabled=True ) # Add PSO-required attributes wrapper.n_gains = self.n_gains wrapper.controller_type = self.controller_type wrapper.max_force = getattr(controller, \u2018max_force\u2019, 150.0) self.successful_evaluations += 1 return wrapper except Exception as e: logger.warning(f\u201dPSO controller creation failed: {e}\u201d) self.failed_evaluations += 1 return self._create_fallback_controller(gains) # Add PSO-required attributes to factory function controller_factory.n_gains = self.n_gains controller_factory.controller_type = self.controller_type controller_factory.bounds = self.bounds controller_factory.max_force = 150.0 return controller_factory def _validate_pso_gains(self, gains: GainsArray) -> bool: \u201c\u201d\u201dValidate gains for PSO optimization.\u201d\u201d\u201d try: gains_array = np.asarray(gains) # Check dimensions if len(gains_array) != self.n_gains: return False # Check bounds for i, (gain, (min_val, max_val)) in enumerate(zip(gains_array, self.bounds)): if not (min_val <= gain <= max_val): return False # Check numerical validity if not np.all(np.isfinite(gains_array)): return False # Controller-specific validation return validate_smc_gains(SMCType(self.controller_type), gains_array) except Exception: return False def _create_fallback_controller(self, gains: GainsArray) -> PSOControllerWrapper: \u201c\u201d\u201dCreate fallback controller for invalid parameters.\u201d\u201d\u201d # Use default gains as fallback default_gains = get_default_gains(self.controller_type) try: controller = create_controller( controller_type=self.controller_type, config=self.plant_config, gains=default_gains ) wrapper = PSOControllerWrapper( controller=controller, controller_type=self.controller_type, validation_enabled=False # Disable validation for fallback ) wrapper.n_gains = self.n_gains wrapper.controller_type = self.controller_type wrapper.is_fallback = True return wrapper except Exception: # Emergency fallback - return minimal controller return self._create_emergency_fallback() def get_optimization_statistics(self) -> Dict[str, Any]: \u201c\u201d\u201dGet PSO optimization statistics.\u201d\u201d\u201d with self._lock: success_rate = self.successful_evaluations / max(1, self.evaluation_count) return { \u2018total_evaluations\u2019: self.evaluation_count, \u2018successful_evaluations\u2019: self.successful_evaluations, \u2018failed_evaluations\u2019: self.failed_evaluations, \u2018success_rate\u2019: success_rate, \u2018optimization_health\u2019: \u2018GOOD\u2019 if success_rate > 0.8 else \u2018WARNING\u2019 if success_rate > 0.5 else \u2018POOR\u2019 }": [[113, "runnable-false-class-psofactoryinterface-specialized-interface-for-pso-optimization-integration-features-vectorized-controller-creation-for-swarm-populations-automatic-parameter-validation-and-bounds-checking-performance-optimized-fitness-evaluation-thread-safe-parallel-optimization-support-def-init-self-controller-type-str-plant-config-any-self-controller-type-controller-type-self-plant-config-plant-config-self-setup-optimization-environment-def-setup-optimization-environment-self-none-initialize-pso-optimization-environment-get-controller-specifications-self-gain-spec-smc-gain-specs-smctype-self-controller-type-self-n-gains-self-gain-spec-n-gains-self-bounds-self-gain-spec-gain-bounds-performance-monitoring-self-evaluation-count-0-self-successful-evaluations-0-self-failed-evaluations-0-thread-safe-operations-self-lock-threading-rlock-def-create-pso-controller-factory-self-callable-gainsarray-psocontrollerwrapper-create-pso-optimized-controller-factory-function-returns-factory-function-that-takes-gains-and-returns-pso-wrapped-controller-def-controller-factory-gains-gainsarray-psocontrollerwrapper-pso-controller-factory-with-validation-with-self-lock-self-evaluation-count-1-try-validate-gains-if-not-self-validate-pso-gains-gains-self-failed-evaluations-1-return-self-create-fallback-controller-gains-create-controller-via-factory-controller-create-controller-controller-type-self-controller-type-config-self-plant-config-gains-gains-wrap-for-pso-optimization-wrapper-psocontrollerwrapper-controller-controller-controller-type-self-controller-type-validation-enabled-true-add-pso-required-attributes-wrapper-n-gains-self-n-gains-wrapper-controller-type-self-controller-type-wrapper-max-force-getattr-controller-max-force-150-0-self-successful-evaluations-1-return-wrapper-except-exception-as-e-logger-warning-f-pso-controller-creation-failed-e-self-failed-evaluations-1-return-self-create-fallback-controller-gains-add-pso-required-attributes-to-factory-function-controller-factory-n-gains-self-n-gains-controller-factory-controller-type-self-controller-type-controller-factory-bounds-self-bounds-controller-factory-max-force-150-0-return-controller-factory-def-validate-pso-gains-self-gains-gainsarray-bool-validate-gains-for-pso-optimization-try-gains-array-np-asarray-gains-check-dimensions-if-len-gains-array-self-n-gains-return-false-check-bounds-for-i-gain-min-val-max-val-in-enumerate-zip-gains-array-self-bounds-if-not-min-val-gain-max-val-return-false-check-numerical-validity-if-not-np-all-np-isfinite-gains-array-return-false-controller-specific-validation-return-validate-smc-gains-smctype-self-controller-type-gains-array-except-exception-return-false-def-create-fallback-controller-self-gains-gainsarray-psocontrollerwrapper-create-fallback-controller-for-invalid-parameters-use-default-gains-as-fallback-default-gains-get-default-gains-self-controller-type-try-controller-create-controller-controller-type-self-controller-type-config-self-plant-config-gains-default-gains-wrapper-psocontrollerwrapper-controller-controller-controller-type-self-controller-type-validation-enabled-false-disable-validation-for-fallback-wrapper-n-gains-self-n-gains-wrapper-controller-type-self-controller-type-wrapper-is-fallback-true-return-wrapper-except-exception-emergency-fallback-return-minimal-controller-return-self-create-emergency-fallback-def-get-optimization-statistics-self-dict-str-any-get-pso-optimization-statistics-with-self-lock-success-rate-self-successful-evaluations-max-1-self-evaluation-count-return-total-evaluations-self-evaluation-count-successful-evaluations-self-successful-evaluations-failed-evaluations-self-failed-evaluations-success-rate-success-rate-optimization-health-good-if-success-rate-0-8-else-warning-if-success-rate-0-5-else-poor"]], "runnable: false class PSOOptimizer: \u201c\u201d\u201d Universal PSO optimizer for all SMC controller types. Provides consistent optimization interface with controller-specific fitness functions, boundary handling, and convergence criteria. \u201c\u201d\u201d def init( self, controller_type: str, config: Dict[str, Any], dynamics_config: Dict[str, Any] ): self.controller_type = controller_type self.bounds = self._get_controller_bounds(controller_type) self.fitness_evaluator = self._create_fitness_evaluator( controller_type, config, dynamics_config ) def optimize( self, n_particles: int = 30, max_iterations: int = 100, convergence_threshold: float = 1e-6 ) -> OptimizationResult: \u201c\u201d\u201dRun PSO optimization with adaptive parameters.\u201d\u201d\u201d # Initialize swarm with controller-specific bounds swarm = self._initialize_swarm(n_particles) # PSO main loop with adaptive parameters for iteration in range(max_iterations): # Evaluate fitness for all particles fitness_values = self._evaluate_population(swarm) # Update global and personal bests self._update_bests(swarm, fitness_values) # Check convergence if self._check_convergence(fitness_values, convergence_threshold): break # Update particle velocities and positions self._update_swarm(swarm, iteration, max_iterations) return self._create_optimization_result(swarm, iteration)": [[63, "runnable-false-class-psooptimizer-universal-pso-optimizer-for-all-smc-controller-types-provides-consistent-optimization-interface-with-controller-specific-fitness-functions-boundary-handling-and-convergence-criteria-def-init-self-controller-type-str-config-dict-str-any-dynamics-config-dict-str-any-self-controller-type-controller-type-self-bounds-self-get-controller-bounds-controller-type-self-fitness-evaluator-self-create-fitness-evaluator-controller-type-config-dynamics-config-def-optimize-self-n-particles-int-30-max-iterations-int-100-convergence-threshold-float-1e-6-optimizationresult-run-pso-optimization-with-adaptive-parameters-initialize-swarm-with-controller-specific-bounds-swarm-self-initialize-swarm-n-particles-pso-main-loop-with-adaptive-parameters-for-iteration-in-range-max-iterations-evaluate-fitness-for-all-particles-fitness-values-self-evaluate-population-swarm-update-global-and-personal-bests-self-update-bests-swarm-fitness-values-check-convergence-if-self-check-convergence-fitness-values-convergence-threshold-break-update-particle-velocities-and-positions-self-update-swarm-swarm-iteration-max-iterations-return-self-create-optimization-result-swarm-iteration"]], "runnable: false class PSOPerformanceMonitor: \u201c\u201d\u201d Real-time performance monitoring for PSO-Factory integration. Provides monitoring of: - PSO convergence metrics - Controller creation performance - Simulation execution times - Memory usage tracking - Error rate monitoring \u201c\u201d\u201d def init(self, monitoring_config: Dict[str, Any]): self.config = monitoring_config self.metrics = { \u2018pso_metrics\u2019: { \u2018total_evaluations\u2019: 0, \u2018successful_evaluations\u2019: 0, \u2018failed_evaluations\u2019: 0, \u2018average_fitness\u2019: 0.0, \u2018best_fitness\u2019: float(\u2018inf\u2019), \u2018convergence_rate\u2019: 0.0 }, \u2018performance_metrics\u2019: { \u2018controller_creation_time\u2019: [], \u2018simulation_execution_time\u2019: [], \u2018fitness_computation_time\u2019: [], \u2018total_optimization_time\u2019: 0.0 }, \u2018resource_metrics\u2019: { \u2018peak_memory_usage\u2019: 0.0, \u2018average_memory_usage\u2019: 0.0, \u2018cpu_utilization\u2019: [], \u2018memory_samples\u2019: [] }, \u2018error_metrics\u2019: { \u2018creation_failures\u2019: 0, \u2018simulation_failures\u2019: 0, \u2018validation_failures\u2019: 0, \u2018total_errors\u2019: 0 } } self.start_time = None self.monitoring_active = False def start_monitoring(self): \u201c\u201d\u201dStart performance monitoring session.\u201d\u201d\u201d import time self.start_time = time.time() self.monitoring_active = True self._reset_metrics() def stop_monitoring(self) -> Dict[str, Any]: \u201c\u201d\u201dStop monitoring and return complete performance report.\u201d\u201d\u201d import time if self.start_time: self.metrics[\u2018performance_metrics\u2019][\u2018total_optimization_time\u2019] = ( time.time() - self.start_time ) self.monitoring_active = False return self.generate_performance_report() def log_controller_creation(self, success: bool, creation_time: float): \u201c\u201d\u201dLog controller creation event.\u201d\u201d\u201d if not self.monitoring_active: return self.metrics[\u2018performance_metrics\u2019][\u2018controller_creation_time\u2019].append(creation_time) if success: self.metrics[\u2018pso_metrics\u2019][\u2018successful_evaluations\u2019] += 1 else: self.metrics[\u2018error_metrics\u2019][\u2018creation_failures\u2019] += 1 self.metrics[\u2018pso_metrics\u2019][\u2018failed_evaluations\u2019] += 1 def log_simulation_execution(self, success: bool, execution_time: float): \u201c\u201d\u201dLog simulation execution event.\u201d\u201d\u201d if not self.monitoring_active: return if success: self.metrics[\u2018performance_metrics\u2019][\u2018simulation_execution_time\u2019].append(execution_time) else: self.metrics[\u2018error_metrics\u2019][\u2018simulation_failures\u2019] += 1 def log_fitness_evaluation(self, fitness_value: float, computation_time: float): \u201c\u201d\u201dLog fitness evaluation result.\u201d\u201d\u201d if not self.monitoring_active: return self.metrics[\u2018performance_metrics\u2019][\u2018fitness_computation_time\u2019].append(computation_time) self.metrics[\u2018pso_metrics\u2019][\u2018total_evaluations\u2019] += 1 # Update best fitness if fitness_value < self.metrics[\u2018pso_metrics\u2019][\u2018best_fitness\u2019]: self.metrics[\u2018pso_metrics\u2019][\u2018best_fitness\u2019] = fitness_value # Update average fitness (running average) total_evals = self.metrics[\u2018pso_metrics\u2019][\u2018total_evaluations\u2019] current_avg = self.metrics[\u2018pso_metrics\u2019][\u2018average_fitness\u2019] self.metrics[\u2018pso_metrics\u2019][\u2018average_fitness\u2019] = ( (current_avg * (total_evals - 1) + fitness_value) / total_evals ) def log_resource_usage(self): \u201c\u201d\u201dLog current resource usage.\u201d\u201d\u201d if not self.monitoring_active: return try: import psutil # Memory usage memory_info = psutil.virtual_memory() current_memory = memory_info.percent self.metrics[\u2018resource_metrics\u2019][\u2018memory_samples\u2019].append(current_memory) # Update peak memory if current_memory > self.metrics[\u2018resource_metrics\u2019][\u2018peak_memory_usage\u2019]: self.metrics[\u2018resource_metrics\u2019][\u2018peak_memory_usage\u2019] = current_memory # CPU utilization cpu_percent = psutil.cpu_percent(interval=None) self.metrics[\u2018resource_metrics\u2019][\u2018cpu_utilization\u2019].append(cpu_percent) except ImportError: pass # psutil not available def check_performance_alerts(self) -> List[str]: \u201c\u201d\u201dCheck for performance issues and return alerts.\u201d\u201d\u201d alerts = [] # Memory usage alerts if self.metrics[\u2018resource_metrics\u2019][\u2018peak_memory_usage\u2019] > 90: alerts.append(f\u201dHigh memory usage: {self.metrics[\u2018resource_metrics\u2019][\u2018peak_memory_usage\u2019]:.1f}%\u201d) # Error rate alerts total_evals = self.metrics[\u2018pso_metrics\u2019][\u2018total_evaluations\u2019] if total_evals > 0: error_rate = self.metrics[\u2018error_metrics\u2019][\u2018total_errors\u2019] / total_evals if error_rate > 0.1: alerts.append(f\u201dHigh error rate: {error_rate:.1%}\u201d) # Performance alerts creation_times = self.metrics[\u2018performance_metrics\u2019][\u2018controller_creation_time\u2019] if creation_times and np.mean(creation_times) > 0.002: # 2ms threshold alerts.append(f\u201dSlow controller creation: {np.mean(creation_times)*1000:.2f}ms average\u201d) return alerts def generate_performance_report(self) -> Dict[str, Any]: \u201c\u201d\u201dGenerate performance report.\u201d\u201d\u201d # Calculate derived metrics total_evals = self.metrics[\u2018pso_metrics\u2019][\u2018total_evaluations\u2019] success_rate = (self.metrics[\u2018pso_metrics\u2019][\u2018successful_evaluations\u2019] / total_evals * 100 if total_evals > 0 else 0) creation_times = self.metrics[\u2018performance_metrics\u2019][\u2018controller_creation_time\u2019] avg_creation_time = np.mean(creation_times) if creation_times else 0 simulation_times = self.metrics[\u2018performance_metrics\u2019][\u2018simulation_execution_time\u2019] avg_simulation_time = np.mean(simulation_times) if simulation_times else 0 fitness_times = self.metrics[\u2018performance_metrics\u2019][\u2018fitness_computation_time\u2019] avg_fitness_time = np.mean(fitness_times) if fitness_times else 0 memory_samples = self.metrics[\u2018resource_metrics\u2019][\u2018memory_samples\u2019] avg_memory = np.mean(memory_samples) if memory_samples else 0 cpu_samples = self.metrics[\u2018resource_metrics\u2019][\u2018cpu_utilization\u2019] avg_cpu = np.mean(cpu_samples) if cpu_samples else 0 total_time = self.metrics[\u2018performance_metrics\u2019][\u2018total_optimization_time\u2019] evaluations_per_second = total_evals / total_time if total_time > 0 else 0 # Generate report report = { \u2018summary\u2019: { \u2018total_evaluations\u2019: total_evals, \u2018success_rate\u2019: success_rate, \u2018best_fitness_achieved\u2019: self.metrics[\u2018pso_metrics\u2019][\u2018best_fitness\u2019], \u2018total_optimization_time\u2019: total_time, \u2018evaluations_per_second\u2019: evaluations_per_second }, \u2018performance\u2019: { \u2018average_controller_creation_time_ms\u2019: avg_creation_time * 1000, \u2018average_simulation_time_ms\u2019: avg_simulation_time * 1000, \u2018average_fitness_computation_time_ms\u2019: avg_fitness_time * 1000 }, \u2018resources\u2019: { \u2018peak_memory_usage_percent\u2019: self.metrics[\u2018resource_metrics\u2019][\u2018peak_memory_usage\u2019], \u2018average_memory_usage_percent\u2019: avg_memory, \u2018average_cpu_utilization_percent\u2019: avg_cpu }, \u2018errors\u2019: { \u2018controller_creation_failures\u2019: self.metrics[\u2018error_metrics\u2019][\u2018creation_failures\u2019], \u2018simulation_failures\u2019: self.metrics[\u2018error_metrics\u2019][\u2018simulation_failures\u2019], \u2018validation_failures\u2019: self.metrics[\u2018error_metrics\u2019][\u2018validation_failures\u2019], \u2018total_error_count\u2019: self.metrics[\u2018error_metrics\u2019][\u2018total_errors\u2019] }, \u2018alerts\u2019: self.check_performance_alerts(), \u2018raw_metrics\u2019: self.metrics } return report def _reset_metrics(self): \u201c\u201d\u201dReset all metrics for new monitoring session.\u201d\u201d\u201d for category in self.metrics.values(): if isinstance(category, dict): for key, value in category.items(): if isinstance(value, list): category[key] = [] elif isinstance(value, (int, float)): if \u2018best_fitness\u2019 in key: category[key] = float(\u2018inf\u2019) else: category[key] = 0 # Context manager for automatic monitoring": [[112, "runnable-false-class-psoperformancemonitor-real-time-performance-monitoring-for-pso-factory-integration-provides-monitoring-of-pso-convergence-metrics-controller-creation-performance-simulation-execution-times-memory-usage-tracking-error-rate-monitoring-def-init-self-monitoring-config-dict-str-any-self-config-monitoring-config-self-metrics-pso-metrics-total-evaluations-0-successful-evaluations-0-failed-evaluations-0-average-fitness-0-0-best-fitness-float-inf-convergence-rate-0-0-performance-metrics-controller-creation-time-simulation-execution-time-fitness-computation-time-total-optimization-time-0-0-resource-metrics-peak-memory-usage-0-0-average-memory-usage-0-0-cpu-utilization-memory-samples-error-metrics-creation-failures-0-simulation-failures-0-validation-failures-0-total-errors-0-self-start-time-none-self-monitoring-active-false-def-start-monitoring-self-start-performance-monitoring-session-import-time-self-start-time-time-time-self-monitoring-active-true-self-reset-metrics-def-stop-monitoring-self-dict-str-any-stop-monitoring-and-return-complete-performance-report-import-time-if-self-start-time-self-metrics-performance-metrics-total-optimization-time-time-time-self-start-time-self-monitoring-active-false-return-self-generate-performance-report-def-log-controller-creation-self-success-bool-creation-time-float-log-controller-creation-event-if-not-self-monitoring-active-return-self-metrics-performance-metrics-controller-creation-time-append-creation-time-if-success-self-metrics-pso-metrics-successful-evaluations-1-else-self-metrics-error-metrics-creation-failures-1-self-metrics-pso-metrics-failed-evaluations-1-def-log-simulation-execution-self-success-bool-execution-time-float-log-simulation-execution-event-if-not-self-monitoring-active-return-if-success-self-metrics-performance-metrics-simulation-execution-time-append-execution-time-else-self-metrics-error-metrics-simulation-failures-1-def-log-fitness-evaluation-self-fitness-value-float-computation-time-float-log-fitness-evaluation-result-if-not-self-monitoring-active-return-self-metrics-performance-metrics-fitness-computation-time-append-computation-time-self-metrics-pso-metrics-total-evaluations-1-update-best-fitness-if-fitness-value-self-metrics-pso-metrics-best-fitness-self-metrics-pso-metrics-best-fitness-fitness-value-update-average-fitness-running-average-total-evals-self-metrics-pso-metrics-total-evaluations-current-avg-self-metrics-pso-metrics-average-fitness-self-metrics-pso-metrics-average-fitness-current-avg-total-evals-1-fitness-value-total-evals-def-log-resource-usage-self-log-current-resource-usage-if-not-self-monitoring-active-return-try-import-psutil-memory-usage-memory-info-psutil-virtual-memory-current-memory-memory-info-percent-self-metrics-resource-metrics-memory-samples-append-current-memory-update-peak-memory-if-current-memory-self-metrics-resource-metrics-peak-memory-usage-self-metrics-resource-metrics-peak-memory-usage-current-memory-cpu-utilization-cpu-percent-psutil-cpu-percent-interval-none-self-metrics-resource-metrics-cpu-utilization-append-cpu-percent-except-importerror-pass-psutil-not-available-def-check-performance-alerts-self-list-str-check-for-performance-issues-and-return-alerts-alerts-memory-usage-alerts-if-self-metrics-resource-metrics-peak-memory-usage-90-alerts-append-f-high-memory-usage-self-metrics-resource-metrics-peak-memory-usage-1f-error-rate-alerts-total-evals-self-metrics-pso-metrics-total-evaluations-if-total-evals-0-error-rate-self-metrics-error-metrics-total-errors-total-evals-if-error-rate-0-1-alerts-append-f-high-error-rate-error-rate-1-performance-alerts-creation-times-self-metrics-performance-metrics-controller-creation-time-if-creation-times-and-np-mean-creation-times-0-002-2ms-threshold-alerts-append-f-slow-controller-creation-np-mean-creation-times-1000-2f-ms-average-return-alerts-def-generate-performance-report-self-dict-str-any-generate-performance-report-calculate-derived-metrics-total-evals-self-metrics-pso-metrics-total-evaluations-success-rate-self-metrics-pso-metrics-successful-evaluations-total-evals-100-if-total-evals-0-else-0-creation-times-self-metrics-performance-metrics-controller-creation-time-avg-creation-time-np-mean-creation-times-if-creation-times-else-0-simulation-times-self-metrics-performance-metrics-simulation-execution-time-avg-simulation-time-np-mean-simulation-times-if-simulation-times-else-0-fitness-times-self-metrics-performance-metrics-fitness-computation-time-avg-fitness-time-np-mean-fitness-times-if-fitness-times-else-0-memory-samples-self-metrics-resource-metrics-memory-samples-avg-memory-np-mean-memory-samples-if-memory-samples-else-0-cpu-samples-self-metrics-resource-metrics-cpu-utilization-avg-cpu-np-mean-cpu-samples-if-cpu-samples-else-0-total-time-self-metrics-performance-metrics-total-optimization-time-evaluations-per-second-total-evals-total-time-if-total-time-0-else-0-generate-report-report-summary-total-evaluations-total-evals-success-rate-success-rate-best-fitness-achieved-self-metrics-pso-metrics-best-fitness-total-optimization-time-total-time-evaluations-per-second-evaluations-per-second-performance-average-controller-creation-time-ms-avg-creation-time-1000-average-simulation-time-ms-avg-simulation-time-1000-average-fitness-computation-time-ms-avg-fitness-time-1000-resources-peak-memory-usage-percent-self-metrics-resource-metrics-peak-memory-usage-average-memory-usage-percent-avg-memory-average-cpu-utilization-percent-avg-cpu-errors-controller-creation-failures-self-metrics-error-metrics-creation-failures-simulation-failures-self-metrics-error-metrics-simulation-failures-validation-failures-self-metrics-error-metrics-validation-failures-total-error-count-self-metrics-error-metrics-total-errors-alerts-self-check-performance-alerts-raw-metrics-self-metrics-return-report-def-reset-metrics-self-reset-all-metrics-for-new-monitoring-session-for-category-in-self-metrics-values-if-isinstance-category-dict-for-key-value-in-category-items-if-isinstance-value-list-category-key-elif-isinstance-value-int-float-if-best-fitness-in-key-category-key-float-inf-else-category-key-0-context-manager-for-automatic-monitoring"]], "runnable: false class PSOProgressMonitor: \u201c\u201d\u201d PSO optimization progress monitoring. Features: - Convergence detection - Performance tracking - Early termination criteria - Optimization health assessment \u201c\u201d\u201d def init( self, convergence_threshold: float = 1e-6, stagnation_threshold: int = 20, max_evaluation_time: float = 0.1 ): self.convergence_threshold = convergence_threshold self.stagnation_threshold = stagnation_threshold self.max_evaluation_time = max_evaluation_time # Progress tracking self.iteration_history = [] self.best_fitness_history = [] self.diversity_history = [] self.evaluation_time_history = [] # Convergence state self.converged = False self.stagnation_count = 0 self.best_fitness = float(\u2018inf\u2019) def update_progress( self, iteration: int, swarm_positions: np.ndarray, fitness_values: List[float], evaluation_time: float ) -> Dict[str, Any]: \u201c\u201d\u201d Update optimization progress and assess termination criteria. Returns: Progress update with termination recommendations \u201c\u201d\u201d # Update best fitness current_best = min(fitness_values) improvement = self.best_fitness - current_best if improvement > self.convergence_threshold: self.best_fitness = current_best self.stagnation_count = 0 else: self.stagnation_count += 1 # Calculate swarm diversity diversity = self._calculate_swarm_diversity(swarm_positions) # Record history self.iteration_history.append(iteration) self.best_fitness_history.append(current_best) self.diversity_history.append(diversity) self.evaluation_time_history.append(evaluation_time) # Assess convergence convergence_status = self._assess_convergence(diversity, improvement) # Performance assessment performance_status = self._assess_performance(evaluation_time) # Termination recommendation should_terminate, termination_reason = self._should_terminate( convergence_status, performance_status ) return { \u2018iteration\u2019: iteration, \u2018best_fitness\u2019: current_best, \u2018improvement\u2019: improvement, \u2018diversity\u2019: diversity, \u2018stagnation_count\u2019: self.stagnation_count, \u2018convergence_status\u2019: convergence_status, \u2018performance_status\u2019: performance_status, \u2018should_terminate\u2019: should_terminate, \u2018termination_reason\u2019: termination_reason, \u2018evaluation_time\u2019: evaluation_time } def _calculate_swarm_diversity(self, swarm_positions: np.ndarray) -> float: \u201c\u201d\u201dCalculate swarm diversity metric.\u201d\u201d\u201d if len(swarm_positions) < 2: return 0.0 # Calculate pairwise distances distances = [] for i in range(len(swarm_positions)): for j in range(i + 1, len(swarm_positions)): distance = np.linalg.norm(swarm_positions[i] - swarm_positions[j]) distances.append(distance) return np.mean(distances) if distances else 0.0 def _assess_convergence(self, diversity: float, improvement: float) -> str: \u201c\u201d\u201dAssess convergence status.\u201d\u201d\u201d if improvement < self.convergence_threshold and diversity < 0.01: return \u2018CONVERGED\u2019 elif self.stagnation_count >= self.stagnation_threshold: return \u2018STAGNATED\u2019 elif diversity < 0.1: return \u2018LOW_DIVERSITY\u2019 elif improvement > 1.0: return \u2018IMPROVING\u2019 else: return \u2018SEARCHING\u2019 def _assess_performance(self, evaluation_time: float) -> str: \u201c\u201d\u201dAssess computational performance.\u201d\u201d\u201d if evaluation_time > self.max_evaluation_time: return \u2018SLOW\u2019 elif evaluation_time > self.max_evaluation_time * 0.5: return \u2018MODERATE\u2019 else: return \u2018FAST\u2019 def _should_terminate( self, convergence_status: str, performance_status: str ) -> Tuple[bool, str]: \u201c\u201d\u201dDetermine if optimization should terminate early.\u201d\u201d\u201d if convergence_status == \u2018CONVERGED\u2019: return True, \u2018Convergence achieved\u2019 if convergence_status == \u2018STAGNATED\u2019: return True, f\u2019Stagnation detected ({self.stagnation_count} iterations)\u2019 if performance_status == \u2018SLOW\u2019 and len(self.evaluation_time_history) > 10: avg_time = np.mean(self.evaluation_time_history[-10:]) if avg_time > self.max_evaluation_time * 2: return True, \u2018Performance degradation detected\u2019 return False, \u2018Continue optimization\u2019 def generate_optimization_report(self) -> Dict[str, Any]: \u201c\u201d\u201dGenerate optimization report.\u201d\u201d\u201d return { \u2018optimization_summary\u2019: { \u2018total_iterations\u2019: len(self.iteration_history), \u2018best_fitness_achieved\u2019: min(self.best_fitness_history) if self.best_fitness_history else float(\u2018inf\u2019), \u2018final_diversity\u2019: self.diversity_history[-1] if self.diversity_history else 0.0, \u2018convergence_status\u2019: \u2018CONVERGED\u2019 if self.converged else \u2018INCOMPLETE\u2019 }, \u2018performance_metrics\u2019: { \u2018avg_evaluation_time\u2019: np.mean(self.evaluation_time_history) if self.evaluation_time_history else 0.0, \u2018max_evaluation_time\u2019: np.max(self.evaluation_time_history) if self.evaluation_time_history else 0.0, \u2018total_optimization_time\u2019: sum(self.evaluation_time_history) }, \u2018convergence_analysis\u2019: { \u2018fitness_improvement_rate\u2019: self._calculate_improvement_rate(), \u2018diversity_trend\u2019: self._calculate_diversity_trend(), \u2018stagnation_periods\u2019: self._identify_stagnation_periods() } } def _calculate_improvement_rate(self) -> float: \u201c\u201d\u201dCalculate average fitness improvement rate.\u201d\u201d\u201d if len(self.best_fitness_history) < 2: return 0.0 improvements = [] for i in range(1, len(self.best_fitness_history)): improvement = self.best_fitness_history[i-1] - self.best_fitness_history[i] improvements.append(max(0, improvement)) return np.mean(improvements) def _calculate_diversity_trend(self) -> str: \u201c\u201d\u201dCalculate diversity trend over time.\u201d\u201d\u201d if len(self.diversity_history) < 10: return \u2018INSUFFICIENT_DATA\u2019 recent_diversity = np.mean(self.diversity_history[-5:]) earlier_diversity = np.mean(self.diversity_history[-10:-5]) if recent_diversity < earlier_diversity * 0.8: return \u2018DECREASING\u2019 elif recent_diversity > earlier_diversity * 1.2: return \u2018INCREASING\u2019 else: return \u2018STABLE\u2019 def _identify_stagnation_periods(self) -> List[Tuple[int, int]]: \u201c\u201d\u201dIdentify periods of stagnation in optimization.\u201d\u201d\u201d stagnation_periods = [] current_start = None stagnation_threshold = 5 for i in range(1, len(self.best_fitness_history)): improvement = self.best_fitness_history[i-1] - self.best_fitness_history[i] if improvement < self.convergence_threshold: if current_start is None: current_start = i - 1 else: if current_start is not None and i - current_start >= stagnation_threshold: stagnation_periods.append((current_start, i - 1)) current_start = None # Handle final stagnation period if current_start is not None and len(self.best_fitness_history) - current_start >= stagnation_threshold: stagnation_periods.append((current_start, len(self.best_fitness_history) - 1)) return stagnation_periods": [[113, "runnable-false-class-psoprogressmonitor-pso-optimization-progress-monitoring-features-convergence-detection-performance-tracking-early-termination-criteria-optimization-health-assessment-def-init-self-convergence-threshold-float-1e-6-stagnation-threshold-int-20-max-evaluation-time-float-0-1-self-convergence-threshold-convergence-threshold-self-stagnation-threshold-stagnation-threshold-self-max-evaluation-time-max-evaluation-time-progress-tracking-self-iteration-history-self-best-fitness-history-self-diversity-history-self-evaluation-time-history-convergence-state-self-converged-false-self-stagnation-count-0-self-best-fitness-float-inf-def-update-progress-self-iteration-int-swarm-positions-np-ndarray-fitness-values-list-float-evaluation-time-float-dict-str-any-update-optimization-progress-and-assess-termination-criteria-returns-progress-update-with-termination-recommendations-update-best-fitness-current-best-min-fitness-values-improvement-self-best-fitness-current-best-if-improvement-self-convergence-threshold-self-best-fitness-current-best-self-stagnation-count-0-else-self-stagnation-count-1-calculate-swarm-diversity-diversity-self-calculate-swarm-diversity-swarm-positions-record-history-self-iteration-history-append-iteration-self-best-fitness-history-append-current-best-self-diversity-history-append-diversity-self-evaluation-time-history-append-evaluation-time-assess-convergence-convergence-status-self-assess-convergence-diversity-improvement-performance-assessment-performance-status-self-assess-performance-evaluation-time-termination-recommendation-should-terminate-termination-reason-self-should-terminate-convergence-status-performance-status-return-iteration-iteration-best-fitness-current-best-improvement-improvement-diversity-diversity-stagnation-count-self-stagnation-count-convergence-status-convergence-status-performance-status-performance-status-should-terminate-should-terminate-termination-reason-termination-reason-evaluation-time-evaluation-time-def-calculate-swarm-diversity-self-swarm-positions-np-ndarray-float-calculate-swarm-diversity-metric-if-len-swarm-positions-2-return-0-0-calculate-pairwise-distances-distances-for-i-in-range-len-swarm-positions-for-j-in-range-i-1-len-swarm-positions-distance-np-linalg-norm-swarm-positions-i-swarm-positions-j-distances-append-distance-return-np-mean-distances-if-distances-else-0-0-def-assess-convergence-self-diversity-float-improvement-float-str-assess-convergence-status-if-improvement-self-convergence-threshold-and-diversity-0-01-return-converged-elif-self-stagnation-count-self-stagnation-threshold-return-stagnated-elif-diversity-0-1-return-low-diversity-elif-improvement-1-0-return-improving-else-return-searching-def-assess-performance-self-evaluation-time-float-str-assess-computational-performance-if-evaluation-time-self-max-evaluation-time-return-slow-elif-evaluation-time-self-max-evaluation-time-0-5-return-moderate-else-return-fast-def-should-terminate-self-convergence-status-str-performance-status-str-tuple-bool-str-determine-if-optimization-should-terminate-early-if-convergence-status-converged-return-true-convergence-achieved-if-convergence-status-stagnated-return-true-f-stagnation-detected-self-stagnation-count-iterations-if-performance-status-slow-and-len-self-evaluation-time-history-10-avg-time-np-mean-self-evaluation-time-history-10-if-avg-time-self-max-evaluation-time-2-return-true-performance-degradation-detected-return-false-continue-optimization-def-generate-optimization-report-self-dict-str-any-generate-optimization-report-return-optimization-summary-total-iterations-len-self-iteration-history-best-fitness-achieved-min-self-best-fitness-history-if-self-best-fitness-history-else-float-inf-final-diversity-self-diversity-history-1-if-self-diversity-history-else-0-0-convergence-status-converged-if-self-converged-else-incomplete-performance-metrics-avg-evaluation-time-np-mean-self-evaluation-time-history-if-self-evaluation-time-history-else-0-0-max-evaluation-time-np-max-self-evaluation-time-history-if-self-evaluation-time-history-else-0-0-total-optimization-time-sum-self-evaluation-time-history-convergence-analysis-fitness-improvement-rate-self-calculate-improvement-rate-diversity-trend-self-calculate-diversity-trend-stagnation-periods-self-identify-stagnation-periods-def-calculate-improvement-rate-self-float-calculate-average-fitness-improvement-rate-if-len-self-best-fitness-history-2-return-0-0-improvements-for-i-in-range-1-len-self-best-fitness-history-improvement-self-best-fitness-history-i-1-self-best-fitness-history-i-improvements-append-max-0-improvement-return-np-mean-improvements-def-calculate-diversity-trend-self-str-calculate-diversity-trend-over-time-if-len-self-diversity-history-10-return-insufficient-data-recent-diversity-np-mean-self-diversity-history-5-earlier-diversity-np-mean-self-diversity-history-10-5-if-recent-diversity-earlier-diversity-0-8-return-decreasing-elif-recent-diversity-earlier-diversity-1-2-return-increasing-else-return-stable-def-identify-stagnation-periods-self-list-tuple-int-int-identify-periods-of-stagnation-in-optimization-stagnation-periods-current-start-none-stagnation-threshold-5-for-i-in-range-1-len-self-best-fitness-history-improvement-self-best-fitness-history-i-1-self-best-fitness-history-i-if-improvement-self-convergence-threshold-if-current-start-is-none-current-start-i-1-else-if-current-start-is-not-none-and-i-current-start-stagnation-threshold-stagnation-periods-append-current-start-i-1-current-start-none-handle-final-stagnation-period-if-current-start-is-not-none-and-len-self-best-fitness-history-current-start-stagnation-threshold-stagnation-periods-append-current-start-len-self-best-fitness-history-1-return-stagnation-periods"]], "runnable: false class PSOTuner: \u201c\u201d\u201dHigh-throughput, vectorised tuner for sliding-mode controllers.\u201d\u201d\u201d # Core Components: def init(self, controller_factory, config, seed=None, rng=None): \u201c\u201d\u201d Architecture Elements: - Local PRNG management (avoid global side effects) - Instance-level normalization constants - Adaptive penalty computation - Configuration validation and deprecation handling \u201c\u201d\u201d def _fitness(self, particles: np.ndarray) -> np.ndarray: \u201c\u201d\u201d Vectorized fitness evaluation pipeline: 1. Pre-filter invalid particles via validate_gains() 2. Batch simulation via vector_sim 3. Cost computation with instability penalties 4. Uncertainty aggregation (if configured) \u201c\u201d\u201d def optimize(self, **kwargs) -> Dict[str, Any]: \u201c\u201d\u201d PySwarms integration with enhancements: - Velocity clamping for stability - Inertia weight scheduling - Convergence monitoring - Result validation and storage \u201c\u201d\u201d": [[250, "runnable-false-class-psotuner-high-throughput-vectorised-tuner-for-sliding-mode-controllers-core-components-def-init-self-controller-factory-config-seed-none-rng-none-architecture-elements-local-prng-management-avoid-global-side-effects-instance-level-normalization-constants-adaptive-penalty-computation-configuration-validation-and-deprecation-handling-def-fitness-self-particles-np-ndarray-np-ndarray-vectorized-fitness-evaluation-pipeline-1-pre-filter-invalid-particles-via-validate-gains-2-batch-simulation-via-vector-sim-3-cost-computation-with-instability-penalties-4-uncertainty-aggregation-if-configured-def-optimize-self-kwargs-dict-str-any-pyswarms-integration-with-enhancements-velocity-clamping-for-stability-inertia-weight-scheduling-convergence-monitoring-result-validation-and-storage"]], "runnable: false class PSO_ConvergenceMonitor: \u201c\u201d\u201d Advanced convergence monitoring with multiple termination criteria. \u201c\u201d\u201d def init(self, patience: int = 50, tolerance: float = 1e-6, diversity_threshold: float = 1e-8): self.patience = patience self.tolerance = tolerance self.diversity_threshold = diversity_threshold self.best_cost_history = [] self.diversity_history = [] self.stagnation_counter = 0 def check_convergence(self, swarm_positions: np.ndarray, swarm_costs: np.ndarray) -> tuple[bool, str]: \u201c\u201d\u201d Multi-criteria convergence detection: 1. Cost improvement stagnation 2. Swarm diversity collapse 3. Gradient-based local optimum detection \u201c\u201d\u201d current_best = np.min(swarm_costs) self.best_cost_history.append(current_best) # Swarm diversity (standard deviation of positions) diversity = np.mean(np.std(swarm_positions, axis=0)) self.diversity_history.append(diversity) # Check improvement stagnation if len(self.best_cost_history) >= 2: improvement = abs(self.best_cost_history[-2] - current_best) relative_improvement = improvement / (abs(current_best) + 1e-12) if relative_improvement < self.tolerance: self.stagnation_counter += 1 else: self.stagnation_counter = 0 # Convergence conditions if self.stagnation_counter >= self.patience: return True, f\u201dCost stagnation: {self.stagnation_counter} iterations without improvement\u201d if diversity < self.diversity_threshold: return True, f\u201dDiversity collapse: \u03c3 = {diversity:.2e} < {self.diversity_threshold:.2e}\u201d return False, \u201cOptimization continuing\u201d": [[251, "runnable-false-class-pso-convergencemonitor-advanced-convergence-monitoring-with-multiple-termination-criteria-def-init-self-patience-int-50-tolerance-float-1e-6-diversity-threshold-float-1e-8-self-patience-patience-self-tolerance-tolerance-self-diversity-threshold-diversity-threshold-self-best-cost-history-self-diversity-history-self-stagnation-counter-0-def-check-convergence-self-swarm-positions-np-ndarray-swarm-costs-np-ndarray-tuple-bool-str-multi-criteria-convergence-detection-1-cost-improvement-stagnation-2-swarm-diversity-collapse-3-gradient-based-local-optimum-detection-current-best-np-min-swarm-costs-self-best-cost-history-append-current-best-swarm-diversity-standard-deviation-of-positions-diversity-np-mean-np-std-swarm-positions-axis-0-self-diversity-history-append-diversity-check-improvement-stagnation-if-len-self-best-cost-history-2-improvement-abs-self-best-cost-history-2-current-best-relative-improvement-improvement-abs-current-best-1e-12-if-relative-improvement-self-tolerance-self-stagnation-counter-1-else-self-stagnation-counter-0-convergence-conditions-if-self-stagnation-counter-self-patience-return-true-f-cost-stagnation-self-stagnation-counter-iterations-without-improvement-if-diversity-self-diversity-threshold-return-true-f-diversity-collapse-diversity-2e-self-diversity-threshold-2e-return-false-optimization-continuing"]], "runnable: false class ParallelPSOEvaluator: \u201c\u201d\u201d Thread-safe parallel evaluation system for PSO optimization. Features: - Multi-threaded fitness evaluation - Load balancing across CPU cores - Memory-efficient swarm processing - Progress monitoring and early termination \u201c\u201d\u201d def init( self, controller_factory: Callable, fitness_function: Callable, n_threads: int = 4, batch_size: int = 8 ): self.controller_factory = controller_factory self.fitness_function = fitness_function self.n_threads = n_threads self.batch_size = batch_size # Thread management self.thread_pool = ThreadPoolExecutor(max_workers=n_threads) self.evaluation_lock = threading.RLock() # Performance monitoring self.evaluation_times = [] self.success_count = 0 self.failure_count = 0 def evaluate_swarm_parallel( self, swarm_positions: np.ndarray, timeout_seconds: float = 30.0 ) -> List[float]: \u201c\u201d\u201d Evaluate entire swarm in parallel with timeout protection. Args: swarm_positions: Array of shape (swarm_size, n_dimensions) timeout_seconds: Maximum time for evaluation Returns: List of fitness values for each particle \u201c\u201d\u201d swarm_size = swarm_positions.shape[0] fitness_values = [float(\u2018inf\u2019)] * swarm_size # Submit evaluation tasks future_to_index = {} for i in range(swarm_size): future = self.thread_pool.submit( self._evaluate_particle_safe, swarm_positions[i], i ) future_to_index[future] = i # Collect results with timeout completed_count = 0 start_time = time.time() for future in as_completed(future_to_index, timeout=timeout_seconds): try: particle_index = future_to_index[future] fitness_value = future.result(timeout=1.0) # Individual timeout fitness_values[particle_index] = fitness_value with self.evaluation_lock: self.success_count += 1 completed_count += 1 except Exception as e: particle_index = future_to_index[future] logger.warning(f\u201dParticle {particle_index} evaluation failed: {e}\u201d) with self.evaluation_lock: self.failure_count += 1 # Use penalty value for failed evaluations fitness_values[particle_index] = 5000.0 # Check for timeout if time.time() - start_time > timeout_seconds: logger.warning(f\u201dSwarm evaluation timeout after {timeout_seconds}s\u201d) break # Cancel remaining futures for future in future_to_index: if not future.done(): future.cancel() return fitness_values def _evaluate_particle_safe(self, gains: GainsArray, particle_index: int) -> float: \u201c\u201d\u201dThread-safe particle evaluation with error handling.\u201d\u201d\u201d start_time = time.time() try: # Create controller controller = self.controller_factory(gains) # Evaluate fitness fitness_value = self.fitness_function(gains, controller) # Record evaluation time evaluation_time = time.time() - start_time with self.evaluation_lock: self.evaluation_times.append(evaluation_time) return fitness_value except Exception as e: logger.warning(f\u201dParticle {particle_index} failed: {e}\u201d) return 3000.0 # High penalty for failures def get_evaluation_statistics(self) -> Dict[str, Any]: \u201c\u201d\u201dGet parallel evaluation performance statistics.\u201d\u201d\u201d with self.evaluation_lock: total_evaluations = self.success_count + self.failure_count success_rate = self.success_count / max(1, total_evaluations) avg_time = np.mean(self.evaluation_times) if self.evaluation_times else 0.0 max_time = np.max(self.evaluation_times) if self.evaluation_times else 0.0 return { \u2018total_evaluations\u2019: total_evaluations, \u2018success_count\u2019: self.success_count, \u2018failure_count\u2019: self.failure_count, \u2018success_rate\u2019: success_rate, \u2018avg_evaluation_time\u2019: avg_time, \u2018max_evaluation_time\u2019: max_time, \u2018total_evaluation_time\u2019: sum(self.evaluation_times), \u2018parallel_efficiency\u2019: avg_time * self.n_threads / max(max_time, 0.001) } def cleanup(self): \u201c\u201d\u201dClean up thread pool resources.\u201d\u201d\u201d self.thread_pool.shutdown(wait=True)": [[113, "runnable-false-class-parallelpsoevaluator-thread-safe-parallel-evaluation-system-for-pso-optimization-features-multi-threaded-fitness-evaluation-load-balancing-across-cpu-cores-memory-efficient-swarm-processing-progress-monitoring-and-early-termination-def-init-self-controller-factory-callable-fitness-function-callable-n-threads-int-4-batch-size-int-8-self-controller-factory-controller-factory-self-fitness-function-fitness-function-self-n-threads-n-threads-self-batch-size-batch-size-thread-management-self-thread-pool-threadpoolexecutor-max-workers-n-threads-self-evaluation-lock-threading-rlock-performance-monitoring-self-evaluation-times-self-success-count-0-self-failure-count-0-def-evaluate-swarm-parallel-self-swarm-positions-np-ndarray-timeout-seconds-float-30-0-list-float-evaluate-entire-swarm-in-parallel-with-timeout-protection-args-swarm-positions-array-of-shape-swarm-size-n-dimensions-timeout-seconds-maximum-time-for-evaluation-returns-list-of-fitness-values-for-each-particle-swarm-size-swarm-positions-shape-0-fitness-values-float-inf-swarm-size-submit-evaluation-tasks-future-to-index-for-i-in-range-swarm-size-future-self-thread-pool-submit-self-evaluate-particle-safe-swarm-positions-i-i-future-to-index-future-i-collect-results-with-timeout-completed-count-0-start-time-time-time-for-future-in-as-completed-future-to-index-timeout-timeout-seconds-try-particle-index-future-to-index-future-fitness-value-future-result-timeout-1-0-individual-timeout-fitness-values-particle-index-fitness-value-with-self-evaluation-lock-self-success-count-1-completed-count-1-except-exception-as-e-particle-index-future-to-index-future-logger-warning-f-particle-particle-index-evaluation-failed-e-with-self-evaluation-lock-self-failure-count-1-use-penalty-value-for-failed-evaluations-fitness-values-particle-index-5000-0-check-for-timeout-if-time-time-start-time-timeout-seconds-logger-warning-f-swarm-evaluation-timeout-after-timeout-seconds-s-break-cancel-remaining-futures-for-future-in-future-to-index-if-not-future-done-future-cancel-return-fitness-values-def-evaluate-particle-safe-self-gains-gainsarray-particle-index-int-float-thread-safe-particle-evaluation-with-error-handling-start-time-time-time-try-create-controller-controller-self-controller-factory-gains-evaluate-fitness-fitness-value-self-fitness-function-gains-controller-record-evaluation-time-evaluation-time-time-time-start-time-with-self-evaluation-lock-self-evaluation-times-append-evaluation-time-return-fitness-value-except-exception-as-e-logger-warning-f-particle-particle-index-failed-e-return-3000-0-high-penalty-for-failures-def-get-evaluation-statistics-self-dict-str-any-get-parallel-evaluation-performance-statistics-with-self-evaluation-lock-total-evaluations-self-success-count-self-failure-count-success-rate-self-success-count-max-1-total-evaluations-avg-time-np-mean-self-evaluation-times-if-self-evaluation-times-else-0-0-max-time-np-max-self-evaluation-times-if-self-evaluation-times-else-0-0-return-total-evaluations-total-evaluations-success-count-self-success-count-failure-count-self-failure-count-success-rate-success-rate-avg-evaluation-time-avg-time-max-evaluation-time-max-time-total-evaluation-time-sum-self-evaluation-times-parallel-efficiency-avg-time-self-n-threads-max-max-time-0-001-def-cleanup-self-clean-up-thread-pool-resources-self-thread-pool-shutdown-wait-true"]], "runnable: false class ParameterResolutionError(ValueError): \u201c\u201d\u201dRaised when parameter resolution fails.\u201d\u201d\u201d pass class GainValidationError(ValueError): \u201c\u201d\u201dRaised when gain validation fails.\u201d\u201d\u201d pass def create_controller_with_parameter_recovery( controller_type: str, config: Optional[Any] = None, gains: Optional[Union[list, np.ndarray]] = None": [[109, "runnable-false-class-parameterresolutionerror-valueerror-raised-when-parameter-resolution-fails-pass-class-gainvalidationerror-valueerror-raised-when-gain-validation-fails-pass-def-create-controller-with-parameter-recovery-controller-type-str-config-optional-any-none-gains-optional-union-list-np-ndarray-none"]], "runnable: false class ParameterValidator: \u201c\u201d\u201dparameter validation for SMC controllers.\u201d\u201d\u201d @staticmethod def validate_gain_structure( gains: List[float], controller_type: str, controller_info: Dict[str, Any] ) -> None: \u201c\u201d\u201dValidate gain array structure and constraints.\u201d\u201d\u201d # 1. Length validation expected_count = controller_info[\u2018gain_count\u2019] if len(gains) != expected_count: raise ValueError( f\u201dController \u2018{controller_type}\u2019 requires {expected_count} gains, \u201c f\u201dgot {len(gains)}. Expected structure: {controller_info.get(\u2018gain_names\u2019, [])}\u201d ) # 2. Numerical validation for i, gain in enumerate(gains): if not isinstance(gain, (int, float)): raise TypeError(f\u201dGain[{i}] must be numeric, got {type(gain)}\u201d) if not np.isfinite(gain): raise ValueError(f\u201dGain[{i}] must be finite, got {gain}\u201d) # 3. Physical constraint validation ParameterValidator._validate_physical_constraints(gains, controller_type) @staticmethod def _validate_physical_constraints(gains: List[float], controller_type: str) -> None: \u201c\u201d\u201dValidate controller-specific physical constraints.\u201d\u201d\u201d if controller_type == \u2018classical_smc\u2019: # All gains must be positive for stability if any(g <= 0 for g in gains): raise ValueError(\u201cClassical SMC: All gains must be positive for stability\u201d) # Specific constraint: K (switching gain) should be significant K = gains[4] # K is 5th element if K < 1.0: warnings.warn(f\u201dClassical SMC: K={K} may be too small for effective switching\u201d) elif controller_type == \u2018adaptive_smc\u2019: # Surface gains must be positive if any(g <= 0 for g in gains[:4]): raise ValueError(\u201cAdaptive SMC: Surface gains k1, k2, \u03bb1, \u03bb2 must be positive\u201d) # Gamma (adaptation rate) constraints gamma = gains[4] if gamma <= 0: raise ValueError(\u201cAdaptive SMC: Adaptation rate \u03b3 must be positive\u201d) if gamma > 10.0: warnings.warn(f\u201dAdaptive SMC: \u03b3={gamma} may cause adaptation instability\u201d) elif controller_type == \u2018sta_smc\u2019: # All gains positive for STA stability if any(g <= 0 for g in gains): raise ValueError(\u201cSTA-SMC: All gains must be positive\u201d) # STA-specific constraint: K1 > K2 typically K1, K2 = gains[0], gains[1] if K1 <= K2: warnings.warn(\u201cSTA-SMC: Typically K1 > K2 for proper STA operation\u201d) elif controller_type == \u2018hybrid_adaptive_sta_smc\u2019: # Only surface gains for hybrid controller if any(g <= 0 for g in gains): raise ValueError(\u201cHybrid SMC: All surface gains must be positive\u201d)": [[109, "runnable-false-class-parametervalidator-parameter-validation-for-smc-controllers-staticmethod-def-validate-gain-structure-gains-list-float-controller-type-str-controller-info-dict-str-any-none-validate-gain-array-structure-and-constraints-1-length-validation-expected-count-controller-info-gain-count-if-len-gains-expected-count-raise-valueerror-f-controller-controller-type-requires-expected-count-gains-f-got-len-gains-expected-structure-controller-info-get-gain-names-2-numerical-validation-for-i-gain-in-enumerate-gains-if-not-isinstance-gain-int-float-raise-typeerror-f-gain-i-must-be-numeric-got-type-gain-if-not-np-isfinite-gain-raise-valueerror-f-gain-i-must-be-finite-got-gain-3-physical-constraint-validation-parametervalidator-validate-physical-constraints-gains-controller-type-staticmethod-def-validate-physical-constraints-gains-list-float-controller-type-str-none-validate-controller-specific-physical-constraints-if-controller-type-classical-smc-all-gains-must-be-positive-for-stability-if-any-g-0-for-g-in-gains-raise-valueerror-classical-smc-all-gains-must-be-positive-for-stability-specific-constraint-k-switching-gain-should-be-significant-k-gains-4-k-is-5th-element-if-k-1-0-warnings-warn-f-classical-smc-k-k-may-be-too-small-for-effective-switching-elif-controller-type-adaptive-smc-surface-gains-must-be-positive-if-any-g-0-for-g-in-gains-4-raise-valueerror-adaptive-smc-surface-gains-k1-k2-1-2-must-be-positive-gamma-adaptation-rate-constraints-gamma-gains-4-if-gamma-0-raise-valueerror-adaptive-smc-adaptation-rate-must-be-positive-if-gamma-10-0-warnings-warn-f-adaptive-smc-gamma-may-cause-adaptation-instability-elif-controller-type-sta-smc-all-gains-positive-for-sta-stability-if-any-g-0-for-g-in-gains-raise-valueerror-sta-smc-all-gains-must-be-positive-sta-specific-constraint-k1-k2-typically-k1-k2-gains-0-gains-1-if-k1-k2-warnings-warn-sta-smc-typically-k1-k2-for-proper-sta-operation-elif-controller-type-hybrid-adaptive-sta-smc-only-surface-gains-for-hybrid-controller-if-any-g-0-for-g-in-gains-raise-valueerror-hybrid-smc-all-surface-gains-must-be-positive"]], "runnable: false class PerformanceAnalyzer: \u201c\u201d\u201dAnalyze performance preservation during migration.\u201d\u201d\u201d @staticmethod def analyze_control_bandwidth(old_gains: List[float], new_gains: List[float], controller_type: str) -> Dict[str, Any]: \u201c\u201d\u201dAnalyze control bandwidth preservation.\u201d\u201d\u201d if controller_type == \u2018classical_smc\u2019: if len(old_gains) >= 4 and len(new_gains) >= 4: old_bandwidth = min(old_gains[2], old_gains[3]) # min(\u03bb1, \u03bb2) new_bandwidth = min(new_gains[2], new_gains[3]) bandwidth_ratio = new_bandwidth / old_bandwidth return { \u2018old_bandwidth\u2019: old_bandwidth, \u2018new_bandwidth\u2019: new_bandwidth, \u2018bandwidth_ratio\u2019: bandwidth_ratio, \u2018performance_preserved\u2019: 0.8 <= bandwidth_ratio <= 1.2 # \u00b120% tolerance } elif controller_type == \u2018adaptive_smc\u2019: if len(old_gains) >= 4 and len(new_gains) >= 4: old_adaptation_rate = old_gains[4] if len(old_gains) > 4 else 1.0 new_adaptation_rate = new_gains[4] if len(new_gains) > 4 else 1.0 adaptation_ratio = new_adaptation_rate / old_adaptation_rate return { \u2018old_adaptation_rate\u2019: old_adaptation_rate, \u2018new_adaptation_rate\u2019: new_adaptation_rate, \u2018adaptation_ratio\u2019: adaptation_ratio, \u2018performance_preserved\u2019: 0.5 <= adaptation_ratio <= 2.0 # \u00b1100% tolerance } return {\u2018analysis\u2019: \u2018not_applicable\u2019, \u2018controller_type\u2019: controller_type} @staticmethod def estimate_settling_time_change(old_config: Dict[str, Any], new_config: Dict[str, Any]) -> Dict[str, Any]: \u201c\u201d\u201dEstimate settling time changes after migration.\u201d\u201d\u201d old_gains = old_config.get(\u2018gains\u2019, []) new_gains = new_config.get(\u2018gains\u2019, []) if len(old_gains) >= 4 and len(new_gains) >= 4: # Simplified settling time estimate based on surface coefficients old_settling = 4.0 / min(old_gains[2], old_gains[3]) # 4/min(\u03bb1, \u03bb2) new_settling = 4.0 / min(new_gains[2], new_gains[3]) settling_ratio = new_settling / old_settling return { \u2018old_settling_time\u2019: old_settling, \u2018new_settling_time\u2019: new_settling, \u2018settling_ratio\u2019: settling_ratio, \u2018performance_change\u2019: \u2018improved\u2019 if settling_ratio < 1.0 else \u2018degraded\u2019 if settling_ratio > 1.1 else \u2018maintained\u2019 } return {\u2018analysis\u2019: \u2018insufficient_data\u2019} # Performance analysis example": [[99, "runnable-false-class-performanceanalyzer-analyze-performance-preservation-during-migration-staticmethod-def-analyze-control-bandwidth-old-gains-list-float-new-gains-list-float-controller-type-str-dict-str-any-analyze-control-bandwidth-preservation-if-controller-type-classical-smc-if-len-old-gains-4-and-len-new-gains-4-old-bandwidth-min-old-gains-2-old-gains-3-min-1-2-new-bandwidth-min-new-gains-2-new-gains-3-bandwidth-ratio-new-bandwidth-old-bandwidth-return-old-bandwidth-old-bandwidth-new-bandwidth-new-bandwidth-bandwidth-ratio-bandwidth-ratio-performance-preserved-0-8-bandwidth-ratio-1-2-20-tolerance-elif-controller-type-adaptive-smc-if-len-old-gains-4-and-len-new-gains-4-old-adaptation-rate-old-gains-4-if-len-old-gains-4-else-1-0-new-adaptation-rate-new-gains-4-if-len-new-gains-4-else-1-0-adaptation-ratio-new-adaptation-rate-old-adaptation-rate-return-old-adaptation-rate-old-adaptation-rate-new-adaptation-rate-new-adaptation-rate-adaptation-ratio-adaptation-ratio-performance-preserved-0-5-adaptation-ratio-2-0-100-tolerance-return-analysis-not-applicable-controller-type-controller-type-staticmethod-def-estimate-settling-time-change-old-config-dict-str-any-new-config-dict-str-any-dict-str-any-estimate-settling-time-changes-after-migration-old-gains-old-config-get-gains-new-gains-new-config-get-gains-if-len-old-gains-4-and-len-new-gains-4-simplified-settling-time-estimate-based-on-surface-coefficients-old-settling-4-0-min-old-gains-2-old-gains-3-4-min-1-2-new-settling-4-0-min-new-gains-2-new-gains-3-settling-ratio-new-settling-old-settling-return-old-settling-time-old-settling-new-settling-time-new-settling-settling-ratio-settling-ratio-performance-change-improved-if-settling-ratio-1-0-else-degraded-if-settling-ratio-1-1-else-maintained-return-analysis-insufficient-data-performance-analysis-example"]], "runnable: false class ProductionFactoryDeployment: \u201c\u201d\u201dProduction deployment manager for factory system.\u201d\u201d\u201d def init(self, config): self.config = config self.current_version = None self.new_version = None self.rollback_data = {} def pre_deployment_checks(self): \u201c\u201d\u201dRun pre-deployment validation.\u201d\u201d\u201d checks = { \u2018dependencies\u2019: self.verify_dependencies(), \u2018configuration\u2019: self.validate_configuration(), \u2018compatibility\u2019: self.check_backward_compatibility(), \u2018performance\u2019: self.benchmark_performance(), \u2018health\u2019: self.health_check() } passed = all(checks.values()) failed_checks = [name for name, result in checks.items() if not result] if not passed: raise RuntimeError(f\u201dPre-deployment checks failed: {failed_checks}\u201d) return checks def deploy_with_canary(self, percentage=10): \u201c\u201d\u201dDeploy new factory version using canary strategy.\u201d\u201d\u201d print(f\u201dStarting canary deployment ({percentage}% traffic)\u201d) # 1. Deploy to canary environment canary_success = self.deploy_canary() if not canary_success: raise RuntimeError(\u201cCanary deployment failed\u201d) # 2. Monitor canary performance canary_metrics = self.monitor_canary(duration=300) # 5 minutes if not self.evaluate_canary_metrics(canary_metrics): self.rollback_canary() raise RuntimeError(\u201cCanary metrics below threshold\u201d) # 3. Gradual rollout for percentage in [25, 50, 75, 100]: print(f\u201dRolling out to {percentage}% of traffic\u201d) self.update_traffic_split(percentage) metrics = self.monitor_deployment(duration=180) # 3 minutes if not self.evaluate_metrics(metrics): self.rollback_deployment() raise RuntimeError(f\u201dRollout failed at {percentage}%\u201d) print(\u201d\u2705 Deployment completed successfully\u201d) return True def rollback_deployment(self): \u201c\u201d\u201dRollback to previous version.\u201d\u201d\u201d print(\u201d\ud83d\udd04 Rolling back deployment\u201d) # Restore previous factory version self.restore_factory_version() # Verify rollback success health_ok = self.health_check() if not health_ok: raise RuntimeError(\u201cRollback verification failed\u201d) print(\u201d\u2705 Rollback completed successfully\u201d) # Example deployment": [[111, "runnable-false-class-productionfactorydeployment-production-deployment-manager-for-factory-system-def-init-self-config-self-config-config-self-current-version-none-self-new-version-none-self-rollback-data-def-pre-deployment-checks-self-run-pre-deployment-validation-checks-dependencies-self-verify-dependencies-configuration-self-validate-configuration-compatibility-self-check-backward-compatibility-performance-self-benchmark-performance-health-self-health-check-passed-all-checks-values-failed-checks-name-for-name-result-in-checks-items-if-not-result-if-not-passed-raise-runtimeerror-f-pre-deployment-checks-failed-failed-checks-return-checks-def-deploy-with-canary-self-percentage-10-deploy-new-factory-version-using-canary-strategy-print-f-starting-canary-deployment-percentage-traffic-1-deploy-to-canary-environment-canary-success-self-deploy-canary-if-not-canary-success-raise-runtimeerror-canary-deployment-failed-2-monitor-canary-performance-canary-metrics-self-monitor-canary-duration-300-5-minutes-if-not-self-evaluate-canary-metrics-canary-metrics-self-rollback-canary-raise-runtimeerror-canary-metrics-below-threshold-3-gradual-rollout-for-percentage-in-25-50-75-100-print-f-rolling-out-to-percentage-of-traffic-self-update-traffic-split-percentage-metrics-self-monitor-deployment-duration-180-3-minutes-if-not-self-evaluate-metrics-metrics-self-rollback-deployment-raise-runtimeerror-f-rollout-failed-at-percentage-print-deployment-completed-successfully-return-true-def-rollback-deployment-self-rollback-to-previous-version-print-rolling-back-deployment-restore-previous-factory-version-self-restore-factory-version-verify-rollback-success-health-ok-self-health-check-if-not-health-ok-raise-runtimeerror-rollback-verification-failed-print-rollback-completed-successfully-example-deployment"]], "runnable: false class QualityGateSystem: \u201c\u201d\u201d Automated quality gate system for PSO optimization workflow. \u201c\u201d\u201d def init(self, config: dict): self.config = config self.quality_gates = [ ConfigurationQualityGate(), OptimizationQualityGate(), PerformanceQualityGate(), SafetyQualityGate(), Issue2ComplianceQualityGate(), RegressionQualityGate() ] def evaluate_quality_gates(self, workflow_result: dict) -> QualityGateReport: \u201c\u201d\u201d Evaluate all quality gates and generate report. \u201c\u201d\u201d report = QualityGateReport() for gate in self.quality_gates: gate_result = gate.evaluate(workflow_result, self.config) report.add_gate_result(gate.name, gate_result) # Generate overall assessment report.generate_overall_assessment() return report class Issue2ComplianceQualityGate(QualityGate): \u201c\u201d\u201d Quality gate specifically for Issue #2 overshoot compliance. \u201c\u201d\u201d def init(self): self.name = \u201cIssue2_Overshoot_Compliance\u201d self.acceptance_criteria = { \u2018max_predicted_overshoot\u2019: 5.0, # % maximum theoretical overshoot \u2018min_damping_ratio\u2019: 0.69, # Minimum damping for compliance \u2018max_lambda_bounds\u2019: 10.0, # Maximum lambda values \u2018simulation_overshoot_limit\u2019: 5.0 # % maximum measured overshoot } def evaluate(self, workflow_result: dict, config: dict) -> QualityGateResult: \u201c\u201d\u201d Evaluate Issue #2 overshoot compliance. \u201c\u201d\u201d result = QualityGateResult(gate_name=self.name) # Skip if not STA-SMC if config.get(\u2018controller_type\u2019) != \u2018sta_smc\u2019: result.status = \u2018SKIPPED\u2019 result.message = \u2018Issue #2 compliance only applies to STA-SMC\u2019 return result optimized_gains = workflow_result.get(\u2018best_gains\u2019) if optimized_gains is None or len(optimized_gains) < 6: result.status = \u2018FAILED\u2019 result.message = \u2018Missing or insufficient optimized gains\u2019 return result # Extract surface coefficients lambda1, lambda2 = optimized_gains[4], optimized_gains[5] k1, k2 = optimized_gains[2], optimized_gains[3] # Check 1: Lambda bounds compliance lambda_bounds_ok = (lambda1 <= self.acceptance_criteria[\u2018max_lambda_bounds\u2019] and lambda2 <= self.acceptance_criteria[\u2018max_lambda_bounds\u2019]) # Check 2: Damping ratio compliance zeta1 = lambda1 / (2 * np.sqrt(k1)) zeta2 = lambda2 / (2 * np.sqrt(k2)) damping_ok = (zeta1 >= self.acceptance_criteria[\u2018min_damping_ratio\u2019] and zeta2 >= self.acceptance_criteria[\u2018min_damping_ratio\u2019]) # Check 3: Predicted overshoot avg_zeta = (zeta1 + zeta2) / 2 if avg_zeta < 1.0: predicted_overshoot = 100 * np.exp(-avg_zeta * np.pi / np.sqrt(1 - avg_zeta**2)) else: predicted_overshoot = 0.0 overshoot_prediction_ok = predicted_overshoot <= self.acceptance_criteria[\u2018max_predicted_overshoot\u2019] # Check 4: Simulation validation (if available) simulation_ok = True measured_overshoot = None if \u2018overshoot_measurement\u2019 in workflow_result: overshoot_data = workflow_result[\u2018overshoot_measurement\u2019] measured_overshoot = overshoot_data.get(\u2018measured_overshoot_percent\u2019, 0) simulation_ok = measured_overshoot <= self.acceptance_criteria[\u2018simulation_overshoot_limit\u2019] # Overall assessment all_checks_pass = lambda_bounds_ok and damping_ok and overshoot_prediction_ok and simulation_ok if all_checks_pass: result.status = \u2018PASSED\u2019 result.message = f\u2019Issue #2 compliance verified: predicted overshoot {predicted_overshoot:.2f}%\u2019 else: result.status = \u2018FAILED\u2019 failed_checks = [] if not lambda_bounds_ok: failed_checks.append(f\u2019Lambda bounds: \u03bb\u2081={lambda1:.3f}, \u03bb\u2082={lambda2:.3f} > {self.acceptance_criteria[\u201cmax_lambda_bounds\u201d]}\u2019) if not damping_ok: failed_checks.append(f\u2019Damping ratios: \u03b6\u2081={zeta1:.3f}, \u03b6\u2082={zeta2:.3f} < {self.acceptance_criteria[\u201cmin_damping_ratio\u201d]}\u2019) if not overshoot_prediction_ok: failed_checks.append(f\u2019Predicted overshoot: {predicted_overshoot:.2f}% > {self.acceptance_criteria[\u201cmax_predicted_overshoot\u201d]}%\u2019) if not simulation_ok and measured_overshoot is not None: failed_checks.append(f\u2019Measured overshoot: {measured_overshoot:.2f}% > {self.acceptance_criteria[\u201csimulation_overshoot_limit\u201d]}%\u2019) result.message = f\u2019Issue #2 compliance failed: {\u201d; \u201c.join(failed_checks)}\u2019 # Add detailed metrics result.metrics = { \u2018lambda1\u2019: lambda1, \u2018lambda2\u2019: lambda2, \u2018damping_ratio_1\u2019: zeta1, \u2018damping_ratio_2\u2019: zeta2, \u2018predicted_overshoot_percent\u2019: predicted_overshoot, \u2018measured_overshoot_percent\u2019: measured_overshoot, \u2018lambda_bounds_compliant\u2019: lambda_bounds_ok, \u2018damping_compliant\u2019: damping_ok, \u2018overshoot_prediction_compliant\u2019: overshoot_prediction_ok, \u2018simulation_compliant\u2019: simulation_ok } return result": [[252, "runnable-false-class-qualitygatesystem-automated-quality-gate-system-for-pso-optimization-workflow-def-init-self-config-dict-self-config-config-self-quality-gates-configurationqualitygate-optimizationqualitygate-performancequalitygate-safetyqualitygate-issue2compliancequalitygate-regressionqualitygate-def-evaluate-quality-gates-self-workflow-result-dict-qualitygatereport-evaluate-all-quality-gates-and-generate-report-report-qualitygatereport-for-gate-in-self-quality-gates-gate-result-gate-evaluate-workflow-result-self-config-report-add-gate-result-gate-name-gate-result-generate-overall-assessment-report-generate-overall-assessment-return-report-class-issue2compliancequalitygate-qualitygate-quality-gate-specifically-for-issue-2-overshoot-compliance-def-init-self-self-name-issue2-overshoot-compliance-self-acceptance-criteria-max-predicted-overshoot-5-0-maximum-theoretical-overshoot-min-damping-ratio-0-69-minimum-damping-for-compliance-max-lambda-bounds-10-0-maximum-lambda-values-simulation-overshoot-limit-5-0-maximum-measured-overshoot-def-evaluate-self-workflow-result-dict-config-dict-qualitygateresult-evaluate-issue-2-overshoot-compliance-result-qualitygateresult-gate-name-self-name-skip-if-not-sta-smc-if-config-get-controller-type-sta-smc-result-status-skipped-result-message-issue-2-compliance-only-applies-to-sta-smc-return-result-optimized-gains-workflow-result-get-best-gains-if-optimized-gains-is-none-or-len-optimized-gains-6-result-status-failed-result-message-missing-or-insufficient-optimized-gains-return-result-extract-surface-coefficients-lambda1-lambda2-optimized-gains-4-optimized-gains-5-k1-k2-optimized-gains-2-optimized-gains-3-check-1-lambda-bounds-compliance-lambda-bounds-ok-lambda1-self-acceptance-criteria-max-lambda-bounds-and-lambda2-self-acceptance-criteria-max-lambda-bounds-check-2-damping-ratio-compliance-zeta1-lambda1-2-np-sqrt-k1-zeta2-lambda2-2-np-sqrt-k2-damping-ok-zeta1-self-acceptance-criteria-min-damping-ratio-and-zeta2-self-acceptance-criteria-min-damping-ratio-check-3-predicted-overshoot-avg-zeta-zeta1-zeta2-2-if-avg-zeta-1-0-predicted-overshoot-100-np-exp-avg-zeta-np-pi-np-sqrt-1-avg-zeta-2-else-predicted-overshoot-0-0-overshoot-prediction-ok-predicted-overshoot-self-acceptance-criteria-max-predicted-overshoot-check-4-simulation-validation-if-available-simulation-ok-true-measured-overshoot-none-if-overshoot-measurement-in-workflow-result-overshoot-data-workflow-result-overshoot-measurement-measured-overshoot-overshoot-data-get-measured-overshoot-percent-0-simulation-ok-measured-overshoot-self-acceptance-criteria-simulation-overshoot-limit-overall-assessment-all-checks-pass-lambda-bounds-ok-and-damping-ok-and-overshoot-prediction-ok-and-simulation-ok-if-all-checks-pass-result-status-passed-result-message-f-issue-2-compliance-verified-predicted-overshoot-predicted-overshoot-2f-else-result-status-failed-failed-checks-if-not-lambda-bounds-ok-failed-checks-append-f-lambda-bounds-1-lambda1-3f-2-lambda2-3f-self-acceptance-criteria-max-lambda-bounds-if-not-damping-ok-failed-checks-append-f-damping-ratios-1-zeta1-3f-2-zeta2-3f-self-acceptance-criteria-min-damping-ratio-if-not-overshoot-prediction-ok-failed-checks-append-f-predicted-overshoot-predicted-overshoot-2f-self-acceptance-criteria-max-predicted-overshoot-if-not-simulation-ok-and-measured-overshoot-is-not-none-failed-checks-append-f-measured-overshoot-measured-overshoot-2f-self-acceptance-criteria-simulation-overshoot-limit-result-message-f-issue-2-compliance-failed-join-failed-checks-add-detailed-metrics-result-metrics-lambda1-lambda1-lambda2-lambda2-damping-ratio-1-zeta1-damping-ratio-2-zeta2-predicted-overshoot-percent-predicted-overshoot-measured-overshoot-percent-measured-overshoot-lambda-bounds-compliant-lambda-bounds-ok-damping-compliant-damping-ok-overshoot-prediction-compliant-overshoot-prediction-ok-simulation-compliant-simulation-ok-return-result"]], "runnable: false class SMCFactory: \u201c\u201d\u201d Type-safe factory for creating SMC controllers. Provides unified interface for all 4 core SMC types with: - Mathematical constraint validation - Performance optimization - PSO integration support - Configuration management \u201c\u201d\u201d @staticmethod def create_controller(smc_type: SMCType, config: SMCConfig) -> SMCProtocol: \u201c\u201d\u201d Create SMC controller with validation and optimization. Args: smc_type: Controller type from SMCType enum config: Type-safe configuration object Returns: Initialized SMC controller implementing SMCProtocol Raises: ValueError: If gains violate mathematical constraints FactoryConfigurationError: If configuration is invalid \u201c\u201d\u201d # Validate mathematical constraints if not validate_smc_gains(smc_type, config.gains): raise ValueError(f\u201dGains violate stability constraints for {smc_type}\u201d) # Create controller based on type controller_map = { SMCType.CLASSICAL: ClassicalSMC, SMCType.ADAPTIVE: AdaptiveSMC, SMCType.SUPER_TWISTING: SuperTwistingSMC, SMCType.HYBRID: HybridAdaptiveSTASMC } controller_class = controller_map[smc_type] return controller_class(**config.to_controller_params())": [[107, "runnable-false-class-smcfactory-type-safe-factory-for-creating-smc-controllers-provides-unified-interface-for-all-4-core-smc-types-with-mathematical-constraint-validation-performance-optimization-pso-integration-support-configuration-management-staticmethod-def-create-controller-smc-type-smctype-config-smcconfig-smcprotocol-create-smc-controller-with-validation-and-optimization-args-smc-type-controller-type-from-smctype-enum-config-type-safe-configuration-object-returns-initialized-smc-controller-implementing-smcprotocol-raises-valueerror-if-gains-violate-mathematical-constraints-factoryconfigurationerror-if-configuration-is-invalid-validate-mathematical-constraints-if-not-validate-smc-gains-smc-type-config-gains-raise-valueerror-f-gains-violate-stability-constraints-for-smc-type-create-controller-based-on-type-controller-map-smctype-classical-classicalsmc-smctype-adaptive-adaptivesmc-smctype-super-twisting-supertwistingsmc-smctype-hybrid-hybridadaptivestasmc-controller-class-controller-map-smc-type-return-controller-class-config-to-controller-params"]], "runnable: false class SMCType(Enum): \u201c\u201d\u201d Enumeration of supported SMC controller types for PSO optimization. Each type corresponds to a specific sliding mode control algorithm with distinct mathematical properties and parameter requirements. \u201c\u201d\u201d CLASSICAL = \u201cclassical_smc\u201d \u201c\u201d\u201d Classical sliding mode controller with boundary layer. Mathematical Model: u = u_eq + u_sw u_eq = (GB)^(-1)[-Gf(x) + \u1e61_ref] u_sw = -K\u00b7tanh(s/\u03c6) Gain Parameters: [k1, k2, \u03bb1, \u03bb2, K, kd] k1, k2: Position gains for pendulum 1 and 2 \u03bb1, \u03bb2: Surface gains for pendulum 1 and 2 K: Switching gain kd: Damping gain Mathematical Constraints: - \u03bb1, \u03bb2, K > 0 (stability requirement) - kd \u2265 0 (non-negative damping) PSO Bounds: [(0.1,50), (0.1,50), (1,50), (1,50), (1,200), (0,50)] \u201c\u201d\u201d SUPER_TWISTING = \u201csta_smc\u201d \u201c\u201d\u201d Super-twisting sliding mode controller (second-order). Mathematical Model: u\u0307 = -K1\u00b7sign(s) - K2\u00b7sign(\u1e61) s = \u03c3(x) (sliding surface) Gain Parameters: [K1, K2, \u03bb1, \u03bb2, \u03b11, \u03b12] K1: Primary twisting gain K2: Secondary twisting gain \u03bb1, \u03bb2: Surface gains \u03b11, \u03b12: Higher-order surface parameters Mathematical Constraints: - K1 > K2 > 0 (finite-time convergence) - \u03bb1, \u03bb2, \u03b11, \u03b12 > 0 (stability) PSO Bounds: [(2,100), (1,99), (1,50), (1,50), (1,50), (1,50)] \u201c\u201d\u201d ADAPTIVE = \u201cadaptive_smc\u201d \u201c\u201d\u201d Adaptive sliding mode controller with online gain tuning. Mathematical Model: u = u_eq + u_sw K\u0307 = \u03b3|s| - \u03c3K (adaptation law) Gain Parameters: [k1, k2, \u03bb1, \u03bb2, \u03b3] k1, k2: Position gains \u03bb1, \u03bb2: Surface gains \u03b3: Adaptation rate Mathematical Constraints: - k1, k2, \u03bb1, \u03bb2 > 0 (stability) - 0.1 \u2264 \u03b3 \u2264 20.0 (bounded adaptation) PSO Bounds: [(0.1,50), (0.1,50), (1,50), (1,50), (0.1,20)] \u201c\u201d\u201d HYBRID = \u201chybrid_adaptive_sta_smc\u201d \u201c\u201d\u201d Hybrid adaptive super-twisting controller. Mathematical Model: u = u_adaptive + u_sta (mode switching) Gain Parameters: [k1, k2, \u03bb1, \u03bb2] k1, k2: Surface gains for pendulum 1 and 2 \u03bb1, \u03bb2: Higher-order surface gains Mathematical Constraints: - All parameters > 0 (stability) PSO Bounds: [(1,50), (1,50), (1,50), (1,50)] \u201c\u201d\u201d @property def gain_count(self) -> int: \u201c\u201d\u201dReturn number of gain parameters for this controller type.\u201d\u201d\u201d return { SMCType.CLASSICAL: 6, SMCType.SUPER_TWISTING: 6, SMCType.ADAPTIVE: 5, SMCType.HYBRID: 4 }[self] @property def mathematical_constraints(self) -> Dict[str, str]: \u201c\u201d\u201dReturn mathematical constraints as human-readable strings.\u201d\u201d\u201d return { SMCType.CLASSICAL: \u201c\u03bb1,\u03bb2,K > 0; kd \u2265 0\u201d, SMCType.SUPER_TWISTING: \u201cK1 > K2 > 0; \u03bb1,\u03bb2,\u03b11,\u03b12 > 0\u201d, SMCType.ADAPTIVE: \u201ck1,k2,\u03bb1,\u03bb2 > 0; 0.1 \u2264 \u03b3 \u2264 20.0\u201d, SMCType.HYBRID: \u201ck1,k2,\u03bb1,\u03bb2 > 0\u201d }[self]": [[112, "runnable-false-class-smctype-enum-enumeration-of-supported-smc-controller-types-for-pso-optimization-each-type-corresponds-to-a-specific-sliding-mode-control-algorithm-with-distinct-mathematical-properties-and-parameter-requirements-classical-classical-smc-classical-sliding-mode-controller-with-boundary-layer-mathematical-model-u-u-eq-u-sw-u-eq-gb-1-gf-x-s-ref-u-sw-ktanh-s-gain-parameters-k1-k2-1-2-k-kd-k1-k2-position-gains-for-pendulum-1-and-2-1-2-surface-gains-for-pendulum-1-and-2-k-switching-gain-kd-damping-gain-mathematical-constraints-1-2-k-0-stability-requirement-kd-0-non-negative-damping-pso-bounds-0-1-50-0-1-50-1-50-1-50-1-200-0-50-super-twisting-sta-smc-super-twisting-sliding-mode-controller-second-order-mathematical-model-u-k1sign-s-k2sign-s-s-x-sliding-surface-gain-parameters-k1-k2-1-2-1-2-k1-primary-twisting-gain-k2-secondary-twisting-gain-1-2-surface-gains-1-2-higher-order-surface-parameters-mathematical-constraints-k1-k2-0-finite-time-convergence-1-2-1-2-0-stability-pso-bounds-2-100-1-99-1-50-1-50-1-50-1-50-adaptive-adaptive-smc-adaptive-sliding-mode-controller-with-online-gain-tuning-mathematical-model-u-u-eq-u-sw-k-s-k-adaptation-law-gain-parameters-k1-k2-1-2-k1-k2-position-gains-1-2-surface-gains-adaptation-rate-mathematical-constraints-k1-k2-1-2-0-stability-0-1-20-0-bounded-adaptation-pso-bounds-0-1-50-0-1-50-1-50-1-50-0-1-20-hybrid-hybrid-adaptive-sta-smc-hybrid-adaptive-super-twisting-controller-mathematical-model-u-u-adaptive-u-sta-mode-switching-gain-parameters-k1-k2-1-2-k1-k2-surface-gains-for-pendulum-1-and-2-1-2-higher-order-surface-gains-mathematical-constraints-all-parameters-0-stability-pso-bounds-1-50-1-50-1-50-1-50-property-def-gain-count-self-int-return-number-of-gain-parameters-for-this-controller-type-return-smctype-classical-6-smctype-super-twisting-6-smctype-adaptive-5-smctype-hybrid-4-self-property-def-mathematical-constraints-self-dict-str-str-return-mathematical-constraints-as-human-readable-strings-return-smctype-classical-1-2-k-0-kd-0-smctype-super-twisting-k1-k2-0-1-2-1-2-0-smctype-adaptive-k1-k2-1-2-0-0-1-20-0-smctype-hybrid-k1-k2-1-2-0-self"]], "runnable: false class STAOutput(NamedTuple): \u201c\u201d\u201dReturn type for SuperTwistingSMC.compute_control(). Attributes: u: Bounded control input (N) state: Auxiliary integrator states (z, sigma) history: History dictionary \u201c\u201d\u201d u: float state: Tuple[float, \u2026] history: Dict[str, Any]": [[79, "runnable-false-class-staoutput-namedtuple-return-type-for-supertwistingsmc-compute-control-attributes-u-bounded-control-input-n-state-auxiliary-integrator-states-z-sigma-history-history-dictionary-u-float-state-tuple-float-history-dict-str-any"]], "runnable: false class SafetyManager: \u201c\u201d\u201dsafety management for control systems.\u201d\u201d\u201d def init(self, safety_config: Dict[str, Any]): self.safety_limits = safety_config[\u2018limits\u2019] self.emergency_procedures = safety_config[\u2018emergency_procedures\u2019] def validate_control_safety( self, control_action: float, system_state: np.ndarray, controller_type: str ) -> SafetyValidationResult: \u201c\u201d\u201dValidate control action against safety constraints.\u201d\u201d\u201d safety_violations = [] # Check control force limits if abs(control_action) > self.safety_limits[\u2018max_force\u2019]: safety_violations.append( SafetyViolation( type=\u2019control_force_limit\u2019, severity=\u2019critical\u2019, value=control_action, limit=self.safety_limits[\u2018max_force\u2019] ) ) # Check system state limits angles = system_state[:2] # \u03b8\u2081, \u03b8\u2082 if np.any(np.abs(angles) > self.safety_limits[\u2018max_angle\u2019]): safety_violations.append( SafetyViolation( type=\u2019angle_limit\u2019, severity=\u2019warning\u2019, value=angles, limit=self.safety_limits[\u2018max_angle\u2019] ) ) # Determine safety status if any(v.severity == \u2018critical\u2019 for v in safety_violations): safety_status = \u2018unsafe\u2019 recommended_action = \u2018emergency_stop\u2019 elif safety_violations: safety_status = \u2018warning\u2019 recommended_action = \u2018apply_safety_filter\u2019 else: safety_status = \u2018safe\u2019 recommended_action = \u2018proceed\u2019 return SafetyValidationResult( status=safety_status, violations=safety_violations, recommended_action=recommended_action ) def apply_safety_filter( self, control_action: float, system_state: np.ndarray ) -> float: \u201c\u201d\u201dApply safety filter to control action.\u201d\u201d\u201d # Clamp control force to safe limits safe_control = np.clip( control_action, -self.safety_limits[\u2018max_force\u2019], self.safety_limits[\u2018max_force\u2019] ) # Additional state-dependent safety modifications angles = system_state[:2] if np.any(np.abs(angles) > self.safety_limits[\u2018warning_angle\u2019]): # Reduce control authority near angle limits safety_factor = 0.7 safe_control *= safety_factor return safe_control": [[63, "runnable-false-class-safetymanager-safety-management-for-control-systems-def-init-self-safety-config-dict-str-any-self-safety-limits-safety-config-limits-self-emergency-procedures-safety-config-emergency-procedures-def-validate-control-safety-self-control-action-float-system-state-np-ndarray-controller-type-str-safetyvalidationresult-validate-control-action-against-safety-constraints-safety-violations-check-control-force-limits-if-abs-control-action-self-safety-limits-max-force-safety-violations-append-safetyviolation-type-control-force-limit-severity-critical-value-control-action-limit-self-safety-limits-max-force-check-system-state-limits-angles-system-state-2-1-2-if-np-any-np-abs-angles-self-safety-limits-max-angle-safety-violations-append-safetyviolation-type-angle-limit-severity-warning-value-angles-limit-self-safety-limits-max-angle-determine-safety-status-if-any-v-severity-critical-for-v-in-safety-violations-safety-status-unsafe-recommended-action-emergency-stop-elif-safety-violations-safety-status-warning-recommended-action-apply-safety-filter-else-safety-status-safe-recommended-action-proceed-return-safetyvalidationresult-status-safety-status-violations-safety-violations-recommended-action-recommended-action-def-apply-safety-filter-self-control-action-float-system-state-np-ndarray-float-apply-safety-filter-to-control-action-clamp-control-force-to-safe-limits-safe-control-np-clip-control-action-self-safety-limits-max-force-self-safety-limits-max-force-additional-state-dependent-safety-modifications-angles-system-state-2-if-np-any-np-abs-angles-self-safety-limits-warning-angle-reduce-control-authority-near-angle-limits-safety-factor-0-7-safe-control-safety-factor-return-safe-control"]], "runnable: false class SecurityManager: \u201c\u201d\u201dSecurity management for production deployment.\u201d\u201d\u201d @staticmethod def validate_configuration_integrity(config_path: str) -> bool: \u201c\u201d\u201dValidate configuration file integrity.\u201d\u201d\u201d # Check file permissions file_stat = os.stat(config_path) if file_stat.st_mode & 0o077: # Check for world/group writable raise SecurityError(\u201cConfiguration file has insecure permissions\u201d) # Validate configuration content with open(config_path, \u2018r\u2019) as f: config_content = f.read() # Check for suspicious content suspicious_patterns = [ r\u2019import\\s+os\u2019, r\u2019exec\\s*(\u2019, r\u2019eval\\s*(\u2019, r\u2019import\u2019, r\u2019subprocess\u2019 ] for pattern in suspicious_patterns: if re.search(pattern, config_content): raise SecurityError(f\u201dSuspicious pattern found in config: {pattern}\u201d) return True @staticmethod def sanitize_user_input(user_input: Dict[str, Any]) -> Dict[str, Any]: \u201c\u201d\u201dSanitize user input to prevent injection attacks.\u201d\u201d\u201d sanitized = {} for key, value in user_input.items(): # Validate key names if not re.match(r\u2019^[a-zA-Z_][a-zA-Z0-9_]*$\u2019, key): raise SecurityError(f\u201dInvalid parameter name: {key}\u201d) # Sanitize values based on type if isinstance(value, str): # Remove potentially dangerous characters sanitized_value = re.sub(r\u2019[<>\u201d\u2019&]\u2019, \u2018\u2019, value) sanitized[key] = sanitized_value elif isinstance(value, (int, float)): # Validate numeric ranges if abs(value) > 1e6: # Reasonable upper bound raise SecurityError(f\u201dNumeric value out of range: {value}\u201d) sanitized[key] = value else: sanitized[key] = value return sanitized": [[63, "runnable-false-class-securitymanager-security-management-for-production-deployment-staticmethod-def-validate-configuration-integrity-config-path-str-bool-validate-configuration-file-integrity-check-file-permissions-file-stat-os-stat-config-path-if-file-stat-st-mode-0o077-check-for-world-group-writable-raise-securityerror-configuration-file-has-insecure-permissions-validate-configuration-content-with-open-config-path-r-as-f-config-content-f-read-check-for-suspicious-content-suspicious-patterns-r-import-s-os-r-exec-s-r-eval-s-r-import-r-subprocess-for-pattern-in-suspicious-patterns-if-re-search-pattern-config-content-raise-securityerror-f-suspicious-pattern-found-in-config-pattern-return-true-staticmethod-def-sanitize-user-input-user-input-dict-str-any-dict-str-any-sanitize-user-input-to-prevent-injection-attacks-sanitized-for-key-value-in-user-input-items-validate-key-names-if-not-re-match-r-a-za-z-a-za-z0-9-key-raise-securityerror-f-invalid-parameter-name-key-sanitize-values-based-on-type-if-isinstance-value-str-remove-potentially-dangerous-characters-sanitized-value-re-sub-r-value-sanitized-key-sanitized-value-elif-isinstance-value-int-float-validate-numeric-ranges-if-abs-value-1e6-reasonable-upper-bound-raise-securityerror-f-numeric-value-out-of-range-value-sanitized-key-value-else-sanitized-key-value-return-sanitized"]], "runnable: false class SimulationCache: \u201c\u201d\u201d Intelligent caching system for PSO optimization. Features: - Hash-based lookup for identical gain sets - LRU eviction for memory management - Cache hit/miss statistics - Persistent storage for long-running optimizations \u201c\u201d\u201d def init(self, max_size: int = 1000, tolerance: float = 1e-6): self.cache = {} self.max_size = max_size self.tolerance = tolerance self.hits = 0 self.misses = 0 def get_cache_key(self, gains: np.ndarray) -> str: \u201c\u201d\u201dGenerate consistent cache key for gain arrays.\u201d\u201d\u201d rounded_gains = np.round(gains / self.tolerance) * self.tolerance return hash(tuple(rounded_gains)) def get(self, gains: np.ndarray) -> Optional[float]: \u201c\u201d\u201dRetrieve cached fitness if available.\u201d\u201d\u201d key = self.get_cache_key(gains) if key in self.cache: self.hits += 1 return self.cache[key] self.misses += 1 return None def put(self, gains: np.ndarray, fitness: float) -> None: \u201c\u201d\u201dStore fitness result in cache.\u201d\u201d\u201d if len(self.cache) >= self.max_size: # Remove oldest entry (simple LRU) oldest_key = next(iter(self.cache)) del self.cache[oldest_key] key = self.get_cache_key(gains) self.cache[key] = fitness def get_statistics(self) -> Dict[str, Any]: \u201c\u201d\u201dReturn cache performance statistics.\u201d\u201d\u201d total_requests = self.hits + self.misses hit_rate = self.hits / total_requests if total_requests > 0 else 0 return { \u2018hits\u2019: self.hits, \u2018misses\u2019: self.misses, \u2018hit_rate\u2019: hit_rate, \u2018cache_size\u2019: len(self.cache) }": [[104, "runnable-false-class-simulationcache-intelligent-caching-system-for-pso-optimization-features-hash-based-lookup-for-identical-gain-sets-lru-eviction-for-memory-management-cache-hit-miss-statistics-persistent-storage-for-long-running-optimizations-def-init-self-max-size-int-1000-tolerance-float-1e-6-self-cache-self-max-size-max-size-self-tolerance-tolerance-self-hits-0-self-misses-0-def-get-cache-key-self-gains-np-ndarray-str-generate-consistent-cache-key-for-gain-arrays-rounded-gains-np-round-gains-self-tolerance-self-tolerance-return-hash-tuple-rounded-gains-def-get-self-gains-np-ndarray-optional-float-retrieve-cached-fitness-if-available-key-self-get-cache-key-gains-if-key-in-self-cache-self-hits-1-return-self-cache-key-self-misses-1-return-none-def-put-self-gains-np-ndarray-fitness-float-none-store-fitness-result-in-cache-if-len-self-cache-self-max-size-remove-oldest-entry-simple-lru-oldest-key-next-iter-self-cache-del-self-cache-oldest-key-key-self-get-cache-key-gains-self-cache-key-fitness-def-get-statistics-self-dict-str-any-return-cache-performance-statistics-total-requests-self-hits-self-misses-hit-rate-self-hits-total-requests-if-total-requests-0-else-0-return-hits-self-hits-misses-self-misses-hit-rate-hit-rate-cache-size-len-self-cache"]], "runnable: false class SlidingSurface(ABC): \u201c\u201d\u201dAbstract interface for sliding surface calculations.\u201d\u201d\u201d @abstractmethod def compute(self, state: np.ndarray) -> float: \u201c\u201d\u201dCompute sliding surface value.\u201d\u201d\u201d pass @abstractmethod def compute_derivative(self, state: np.ndarray, state_dot: np.ndarray) -> float: \u201c\u201d\u201dCompute sliding surface derivative.\u201d\u201d\u201d pass @abstractmethod def _validate_gains(self) -> None: \u201c\u201d\u201dValidate gains for mathematical correctness.\u201d\u201d\u201d pass class BoundaryLayer: \u201c\u201d\u201dInterface for boundary layer implementations.\u201d\u201d\u201d def compute_switching_function(self, surface_value: float) -> float: \u201c\u201d\u201dCompute continuous switching function.\u201d\u201d\u201d pass def compute_switching_control(self, surface_value: float, gain: float, surface_derivative: float = 0.0) -> float: \u201c\u201d\u201dCompute switching control with boundary layer.\u201d\u201d\u201d pass": [[194, "runnable-false-class-slidingsurface-abc-abstract-interface-for-sliding-surface-calculations-abstractmethod-def-compute-self-state-np-ndarray-float-compute-sliding-surface-value-pass-abstractmethod-def-compute-derivative-self-state-np-ndarray-state-dot-np-ndarray-float-compute-sliding-surface-derivative-pass-abstractmethod-def-validate-gains-self-none-validate-gains-for-mathematical-correctness-pass-class-boundarylayer-interface-for-boundary-layer-implementations-def-compute-switching-function-self-surface-value-float-float-compute-continuous-switching-function-pass-def-compute-switching-control-self-surface-value-float-gain-float-surface-derivative-float-0-0-float-compute-switching-control-with-boundary-layer-pass"]], "runnable: false class StabilityValidator: \u201c\u201d\u201dValidate stability preservation during parameter migration.\u201d\u201d\u201d @staticmethod def validate_classical_smc_stability(gains: List[float]) -> Dict[str, Any]: \u201c\u201d\u201dValidate Classical SMC stability conditions.\u201d\u201d\u201d if len(gains) != 6: return {\u2018valid\u2019: False, \u2018reason\u2019: \u2018Invalid gain count\u2019} k1, k2, lam1, lam2, K, kd = gains # Check basic positivity if any(g <= 0 for g in gains): return {\u2018valid\u2019: False, \u2018reason\u2019: \u2018All gains must be positive\u2019} # Check sliding surface stability # For double pendulum: sliding surface eigenvalues should be negative surface_eigs = [-lam1/k1, -lam2/k2] if any(eig >= 0 for eig in surface_eigs): return {\u2018valid\u2019: False, \u2018reason\u2019: f\u2019Unstable surface eigenvalues: {surface_eigs}\u2019} # Check actuator reasonableness if K > 200: # Very high switching gain return { \u2018valid\u2019: True, \u2018warnings\u2019: [f\u2019High switching gain K={K} may cause excessive chattering\u2019] } # Check derivative gain ratio kd_ratio = kd / K if kd_ratio > 0.5: # Derivative gain too large relative to switching gain return { \u2018valid\u2019: True, \u2018warnings\u2019: [f\u2019High derivative gain ratio {kd_ratio:.2f} may degrade performance\u2019] } return { \u2018valid\u2019: True, \u2018surface_eigenvalues\u2019: surface_eigs, \u2018estimated_convergence_rate\u2019: min(abs(eig) for eig in surface_eigs), \u2018switching_magnitude\u2019: K, \u2018chattering_reduction\u2019: kd } @staticmethod def validate_adaptive_smc_convergence(gains: List[float], adaptation_params: Dict[str, float]) -> Dict[str, Any]: \u201c\u201d\u201dValidate Adaptive SMC convergence conditions.\u201d\u201d\u201d if len(gains) != 5: return {\u2018valid\u2019: False, \u2018reason\u2019: \u2018Invalid gain count\u2019} k1, k2, lam1, lam2, gamma = gains # Check basic conditions if any(g <= 0 for g in gains): return {\u2018valid\u2019: False, \u2018reason\u2019: \u2018All gains must be positive\u2019} # Check adaptation stability leak_rate = adaptation_params.get(\u2018leak_rate\u2019, 0.01) K_min = adaptation_params.get(\u2018K_min\u2019, 0.1) K_max = adaptation_params.get(\u2018K_max\u2019, 100.0) # Adaptation stability condition: leak rate should be small relative to adaptation rate stability_margin = leak_rate / gamma if stability_margin > 0.2: return { \u2018valid\u2019: True, \u2018warnings\u2019: [f\u2019High leak-to-adaptation ratio {stability_margin:.3f} may slow convergence\u2019] } # Check adaptation bounds if K_min >= K_max: return {\u2018valid\u2019: False, \u2018reason\u2019: \u2018K_min must be less than K_max\u2019} gain_ratio = K_max / K_min if gain_ratio > 1000: # Very wide adaptation range return { \u2018valid\u2019: True, \u2018warnings\u2019: [f\u2019Wide adaptation range (ratio: {gain_ratio:.1f}) may cause instability\u2019] } return { \u2018valid\u2019: True, \u2018adaptation_rate\u2019: gamma, \u2018stability_margin\u2019: stability_margin, \u2018adaptation_range\u2019: [K_min, K_max], \u2018estimated_settling_time\u2019: 5.0 / min(lam1/k1, lam2/k2) # Rough estimate } @staticmethod def validate_sta_smc_finite_time_convergence(gains: List[float], algorithm_params: Dict[str, float]) -> Dict[str, Any]: \u201c\u201d\u201dValidate Super-Twisting finite-time convergence conditions.\u201d\u201d\u201d if len(gains) != 6: return {\u2018valid\u2019: False, \u2018reason\u2019: \u2018Invalid gain count\u2019} K1, K2, k1, k2, lam1, lam2 = gains # Check basic positivity if any(g <= 0 for g in gains): return {\u2018valid\u2019: False, \u2018reason\u2019: \u2018All gains must be positive\u2019} # Check super-twisting convergence conditions alpha = algorithm_params.get(\u2018power_exponent\u2019, 0.5) if not (0 < alpha < 1): return {\u2018valid\u2019: False, \u2018reason\u2019: f\u2019Power exponent \u03b1={alpha} must be in (0,1)\u2019} # Simplified convergence check (assumes L=1) L_estimate = 1.0 min_K1 = L_estimate / alpha min_K2 = K1**2 / (2 * L_estimate) + L_estimate warnings = [] if K1 < min_K1: warnings.append(f\u2019K\u2081={K1:.2f} may be too small for convergence (recommended: \u2265{min_K1:.2f})\u2019) if K2 < min_K2: warnings.append(f\u2019K\u2082={K2:.2f} may be too small for convergence (recommended: \u2265{min_K2:.2f})\u2019) # Estimate finite-time convergence convergence_time = 2 * (1 / (1 - alpha)) * (1 / min(K1, K2)**0.5) return { \u2018valid\u2019: True, \u2018warnings\u2019: warnings, \u2018algorithmic_gains\u2019: [K1, K2], \u2018surface_gains\u2019: [k1, k2, lam1, lam2], \u2018power_exponent\u2019: alpha, \u2018estimated_convergence_time\u2019: convergence_time, \u2018convergence_conditions_met\u2019: len(warnings) == 0 } # Validation example": [[99, "runnable-false-class-stabilityvalidator-validate-stability-preservation-during-parameter-migration-staticmethod-def-validate-classical-smc-stability-gains-list-float-dict-str-any-validate-classical-smc-stability-conditions-if-len-gains-6-return-valid-false-reason-invalid-gain-count-k1-k2-lam1-lam2-k-kd-gains-check-basic-positivity-if-any-g-0-for-g-in-gains-return-valid-false-reason-all-gains-must-be-positive-check-sliding-surface-stability-for-double-pendulum-sliding-surface-eigenvalues-should-be-negative-surface-eigs-lam1-k1-lam2-k2-if-any-eig-0-for-eig-in-surface-eigs-return-valid-false-reason-f-unstable-surface-eigenvalues-surface-eigs-check-actuator-reasonableness-if-k-200-very-high-switching-gain-return-valid-true-warnings-f-high-switching-gain-k-k-may-cause-excessive-chattering-check-derivative-gain-ratio-kd-ratio-kd-k-if-kd-ratio-0-5-derivative-gain-too-large-relative-to-switching-gain-return-valid-true-warnings-f-high-derivative-gain-ratio-kd-ratio-2f-may-degrade-performance-return-valid-true-surface-eigenvalues-surface-eigs-estimated-convergence-rate-min-abs-eig-for-eig-in-surface-eigs-switching-magnitude-k-chattering-reduction-kd-staticmethod-def-validate-adaptive-smc-convergence-gains-list-float-adaptation-params-dict-str-float-dict-str-any-validate-adaptive-smc-convergence-conditions-if-len-gains-5-return-valid-false-reason-invalid-gain-count-k1-k2-lam1-lam2-gamma-gains-check-basic-conditions-if-any-g-0-for-g-in-gains-return-valid-false-reason-all-gains-must-be-positive-check-adaptation-stability-leak-rate-adaptation-params-get-leak-rate-0-01-k-min-adaptation-params-get-k-min-0-1-k-max-adaptation-params-get-k-max-100-0-adaptation-stability-condition-leak-rate-should-be-small-relative-to-adaptation-rate-stability-margin-leak-rate-gamma-if-stability-margin-0-2-return-valid-true-warnings-f-high-leak-to-adaptation-ratio-stability-margin-3f-may-slow-convergence-check-adaptation-bounds-if-k-min-k-max-return-valid-false-reason-k-min-must-be-less-than-k-max-gain-ratio-k-max-k-min-if-gain-ratio-1000-very-wide-adaptation-range-return-valid-true-warnings-f-wide-adaptation-range-ratio-gain-ratio-1f-may-cause-instability-return-valid-true-adaptation-rate-gamma-stability-margin-stability-margin-adaptation-range-k-min-k-max-estimated-settling-time-5-0-min-lam1-k1-lam2-k2-rough-estimate-staticmethod-def-validate-sta-smc-finite-time-convergence-gains-list-float-algorithm-params-dict-str-float-dict-str-any-validate-super-twisting-finite-time-convergence-conditions-if-len-gains-6-return-valid-false-reason-invalid-gain-count-k1-k2-k1-k2-lam1-lam2-gains-check-basic-positivity-if-any-g-0-for-g-in-gains-return-valid-false-reason-all-gains-must-be-positive-check-super-twisting-convergence-conditions-alpha-algorithm-params-get-power-exponent-0-5-if-not-0-alpha-1-return-valid-false-reason-f-power-exponent-alpha-must-be-in-0-1-simplified-convergence-check-assumes-l-1-l-estimate-1-0-min-k1-l-estimate-alpha-min-k2-k1-2-2-l-estimate-l-estimate-warnings-if-k1-min-k1-warnings-append-f-k1-k1-2f-may-be-too-small-for-convergence-recommended-min-k1-2f-if-k2-min-k2-warnings-append-f-k2-k2-2f-may-be-too-small-for-convergence-recommended-min-k2-2f-estimate-finite-time-convergence-convergence-time-2-1-1-alpha-1-min-k1-k2-0-5-return-valid-true-warnings-warnings-algorithmic-gains-k1-k2-surface-gains-k1-k2-lam1-lam2-power-exponent-alpha-estimated-convergence-time-convergence-time-convergence-conditions-met-len-warnings-0-validation-example"]], "runnable: false class TestClassicalSMCConfigValidation: \u201c\u201d\u201dTest configuration parameter validation.\u201d\u201d\u201d def test_positive_gain_requirement(self): \u201c\u201d\u201dTest that all surface gains must be positive.\u201d\u201d\u201d # Valid configuration valid_gains = [5.0, 3.0, 4.0, 2.0, 10.0, 1.0] config = ClassicalSMCConfig(gains=valid_gains, max_force=100, dt=0.01, boundary_layer=0.01) # Invalid: zero gain with pytest.raises(ValueError, match=\u201dmust be positive\u201d): invalid_gains = [0.0, 3.0, 4.0, 2.0, 10.0, 1.0] ClassicalSMCConfig(gains=invalid_gains, max_force=100, dt=0.01, boundary_layer=0.01) # Invalid: negative gain with pytest.raises(ValueError, match=\u201dmust be positive\u201d): invalid_gains = [5.0, -3.0, 4.0, 2.0, 10.0, 1.0] ClassicalSMCConfig(gains=invalid_gains, max_force=100, dt=0.01, boundary_layer=0.01) def test_switching_gain_validation(self): \u201c\u201d\u201dTest switching gain must be positive.\u201d\u201d\u201d with pytest.raises(ValueError, match=\u201dSwitching gain K must be positive\u201d): invalid_gains = [5.0, 3.0, 4.0, 2.0, -10.0, 1.0] # K < 0 ClassicalSMCConfig(gains=invalid_gains, max_force=100, dt=0.01, boundary_layer=0.01) def test_boundary_layer_validation(self): \u201c\u201d\u201dTest boundary layer thickness validation.\u201d\u201d\u201d # Valid boundary layer valid_gains = [5.0, 3.0, 4.0, 2.0, 10.0, 1.0] config = ClassicalSMCConfig(gains=valid_gains, max_force=100, dt=0.01, boundary_layer=0.05) # Invalid: zero boundary layer with pytest.raises(ValueError, match=\u201dboundary_layer must be positive\u201d): ClassicalSMCConfig(gains=valid_gains, max_force=100, dt=0.01, boundary_layer=0.0) # Invalid: negative boundary layer with pytest.raises(ValueError, match=\u201dboundary_layer must be positive\u201d): ClassicalSMCConfig(gains=valid_gains, max_force=100, dt=0.01, boundary_layer=-0.01)": [[207, "runnable-false-class-testclassicalsmcconfigvalidation-test-configuration-parameter-validation-def-test-positive-gain-requirement-self-test-that-all-surface-gains-must-be-positive-valid-configuration-valid-gains-5-0-3-0-4-0-2-0-10-0-1-0-config-classicalsmcconfig-gains-valid-gains-max-force-100-dt-0-01-boundary-layer-0-01-invalid-zero-gain-with-pytest-raises-valueerror-match-must-be-positive-invalid-gains-0-0-3-0-4-0-2-0-10-0-1-0-classicalsmcconfig-gains-invalid-gains-max-force-100-dt-0-01-boundary-layer-0-01-invalid-negative-gain-with-pytest-raises-valueerror-match-must-be-positive-invalid-gains-5-0-3-0-4-0-2-0-10-0-1-0-classicalsmcconfig-gains-invalid-gains-max-force-100-dt-0-01-boundary-layer-0-01-def-test-switching-gain-validation-self-test-switching-gain-must-be-positive-with-pytest-raises-valueerror-match-switching-gain-k-must-be-positive-invalid-gains-5-0-3-0-4-0-2-0-10-0-1-0-k-0-classicalsmcconfig-gains-invalid-gains-max-force-100-dt-0-01-boundary-layer-0-01-def-test-boundary-layer-validation-self-test-boundary-layer-thickness-validation-valid-boundary-layer-valid-gains-5-0-3-0-4-0-2-0-10-0-1-0-config-classicalsmcconfig-gains-valid-gains-max-force-100-dt-0-01-boundary-layer-0-05-invalid-zero-boundary-layer-with-pytest-raises-valueerror-match-boundary-layer-must-be-positive-classicalsmcconfig-gains-valid-gains-max-force-100-dt-0-01-boundary-layer-0-0-invalid-negative-boundary-layer-with-pytest-raises-valueerror-match-boundary-layer-must-be-positive-classicalsmcconfig-gains-valid-gains-max-force-100-dt-0-01-boundary-layer-0-01"]], "runnable: false class TestConfigurationValidationCoverage: \u201c\u201d\u201dcoverage of all validation rules.\u201d\u201d\u201d @pytest.mark.parametrize(\u201cinvalid_gain_index\u201d, [0, 1, 2, 3]) def test_zero_surface_gains_rejection(self, invalid_gain_index): \u201c\u201d\u201dTest rejection of zero surface gains.\u201d\u201d\u201d gains = [5.0, 3.0, 4.0, 2.0, 10.0, 1.0] gains[invalid_gain_index] = 0.0 with pytest.raises(ValueError, match=\u201dmust be positive\u201d): ClassicalSMCConfig(gains=gains, max_force=100, dt=0.01, boundary_layer=0.01) @pytest.mark.parametrize(\u201cinvalid_gain_index\u201d, [0, 1, 2, 3]) def test_negative_surface_gains_rejection(self, invalid_gain_index): \u201c\u201d\u201dTest rejection of negative surface gains.\u201d\u201d\u201d gains = [5.0, 3.0, 4.0, 2.0, 10.0, 1.0] gains[invalid_gain_index] = -1.0 with pytest.raises(ValueError, match=\u201dmust be positive\u201d): ClassicalSMCConfig(gains=gains, max_force=100, dt=0.01, boundary_layer=0.01) ### 3.2 Numerical Stability Testing **Enhanced Numerical Robustness Tests:** 1. **Extreme Value Testing:**python": [[194, "runnable-false-class-testconfigurationvalidationcoverage-coverage-of-all-validation-rules-pytest-mark-parametrize-invalid-gain-index-0-1-2-3-def-test-zero-surface-gains-rejection-self-invalid-gain-index-test-rejection-of-zero-surface-gains-gains-5-0-3-0-4-0-2-0-10-0-1-0-gains-invalid-gain-index-0-0-with-pytest-raises-valueerror-match-must-be-positive-classicalsmcconfig-gains-gains-max-force-100-dt-0-01-boundary-layer-0-01-pytest-mark-parametrize-invalid-gain-index-0-1-2-3-def-test-negative-surface-gains-rejection-self-invalid-gain-index-test-rejection-of-negative-surface-gains-gains-5-0-3-0-4-0-2-0-10-0-1-0-gains-invalid-gain-index-1-0-with-pytest-raises-valueerror-match-must-be-positive-classicalsmcconfig-gains-gains-max-force-100-dt-0-01-boundary-layer-0-01-3-2-numerical-stability-testing-enhanced-numerical-robustness-tests-1-extreme-value-testing-python"]], "runnable: false class TestMathematicalCorrectness: \u201c\u201d\u201dTest mathematical properties of implementations.\u201d\u201d\u201d def test_lyapunov_function_properties(self): \u201c\u201d\u201dTest Lyapunov function is positive definite.\u201d\u201d\u201d controller = ClassicalSMC() for _ in range(1000): state = np.random.uniform(-\u03c0, \u03c0, 6) V = controller.compute_lyapunov_function(state) # Property 1: V \u2265 0 assert V >= 0 # Property 2: V = 0 only at equilibrium if not np.allclose(state, 0): assert V > 0 def test_sliding_surface_stability(self): \u201c\u201d\u201dTest sliding surface leads to stable dynamics.\u201d\u201d\u201d controller = ClassicalSMC(lambda1=2.0, lambda2=1.5) # Test exponential stability on sliding surface dt = 0.01 times = np.arange(0, 5, dt) for initial_error in [0.1, 0.5, 1.0]: e1_history = [initial_error] e2_history = [initial_error] for t in times[1:]: # Sliding dynamics: \u0117\u2081 + \u03bb\u2081e\u2081 = 0, \u0117\u2082 + \u03bb\u2082e\u2082 = 0 e1_new = e1_history[-1] * np.exp(-controller.lambda1 * dt) e2_new = e2_history[-1] * np.exp(-controller.lambda2 * dt) e1_history.append(e1_new) e2_history.append(e2_new) # Verify exponential decay assert e1_history[-1] < 0.01 * initial_error assert e2_history[-1] < 0.01 * initial_error": [[191, "runnable-false-class-testmathematicalcorrectness-test-mathematical-properties-of-implementations-def-test-lyapunov-function-properties-self-test-lyapunov-function-is-positive-definite-controller-classicalsmc-for-in-range-1000-state-np-random-uniform-6-v-controller-compute-lyapunov-function-state-property-1-v-0-assert-v-0-property-2-v-0-only-at-equilibrium-if-not-np-allclose-state-0-assert-v-0-def-test-sliding-surface-stability-self-test-sliding-surface-leads-to-stable-dynamics-controller-classicalsmc-lambda1-2-0-lambda2-1-5-test-exponential-stability-on-sliding-surface-dt-0-01-times-np-arange-0-5-dt-for-initial-error-in-0-1-0-5-1-0-e1-history-initial-error-e2-history-initial-error-for-t-in-times-1-sliding-dynamics-e1-1e1-0-e2-2e2-0-e1-new-e1-history-1-np-exp-controller-lambda1-dt-e2-new-e2-history-1-np-exp-controller-lambda2-dt-e1-history-append-e1-new-e2-history-append-e2-new-verify-exponential-decay-assert-e1-history-1-0-01-initial-error-assert-e2-history-1-0-01-initial-error"]], "runnable: false class TestNumericalAccuracy: \u201c\u201d\u201dTest numerical accuracy and precision.\u201d\u201d\u201d def test_floating_point_consistency(self): \u201c\u201d\u201dTest that computations are consistent across repeated calls.\u201d\u201d\u201d config = ClassicalSMCConfig( gains=[5.0, 3.0, 4.0, 2.0, 10.0, 1.0], max_force=100.0, dt=0.01, boundary_layer=0.01 ) controller = ModularClassicalSMC(config=config) state = np.array([0.1, 0.05, 0.08, 0.02, 0.03, 0.01]) # Compute control multiple times results = [] for _ in range(100): result = controller.compute_control(state, {}, {}) control = result.get(\u2018control_output\u2019, result.get(\u2018control\u2019, result.get(\u2018u\u2019))) if control is not None: results.append(control) if results: results = np.array(results) # All results should be identical (deterministic computation) std_dev = np.std(results, axis=0) assert np.all(std_dev < 1e-15) # Machine precision def test_numerical_stability_small_values(self): \u201c\u201d\u201dTest numerical stability with very small state values.\u201d\u201d\u201d config = ClassicalSMCConfig( gains=[5.0, 3.0, 4.0, 2.0, 10.0, 1.0], max_force=100.0, dt=0.01, boundary_layer=0.01 ) controller = ModularClassicalSMC(config=config) # Very small state values (near machine precision) small_state = np.array([1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15]) result = controller.compute_control(small_state, {}, {}) control = result.get(\u2018control_output\u2019, result.get(\u2018control\u2019, result.get(\u2018u\u2019))) if control is not None: # Control should be finite and small assert np.all(np.isfinite(control)) assert np.all(np.abs(control) < 1.0) def test_numerical_stability_large_values(self): \u201c\u201d\u201dTest numerical stability with large state values.\u201d\u201d\u201d config = ClassicalSMCConfig( gains=[5.0, 3.0, 4.0, 2.0, 10.0, 1.0], max_force=100.0, dt=0.01, boundary_layer=0.01 ) controller = ModularClassicalSMC(config=config) # Large state values (but within reasonable bounds) large_state = np.array([10.0, 5.0, 3.0, 2.0, 2.0, 1.0]) result = controller.compute_control(large_state, {}, {}) control = result.get(\u2018control_output\u2019, result.get(\u2018control\u2019, result.get(\u2018u\u2019))) if control is not None: # Control should be finite and saturated assert np.all(np.isfinite(control)) assert np.all(np.abs(control) <= config.max_force * 1.01) # Within saturation": [[207, "runnable-false-class-testnumericalaccuracy-test-numerical-accuracy-and-precision-def-test-floating-point-consistency-self-test-that-computations-are-consistent-across-repeated-calls-config-classicalsmcconfig-gains-5-0-3-0-4-0-2-0-10-0-1-0-max-force-100-0-dt-0-01-boundary-layer-0-01-controller-modularclassicalsmc-config-config-state-np-array-0-1-0-05-0-08-0-02-0-03-0-01-compute-control-multiple-times-results-for-in-range-100-result-controller-compute-control-state-control-result-get-control-output-result-get-control-result-get-u-if-control-is-not-none-results-append-control-if-results-results-np-array-results-all-results-should-be-identical-deterministic-computation-std-dev-np-std-results-axis-0-assert-np-all-std-dev-1e-15-machine-precision-def-test-numerical-stability-small-values-self-test-numerical-stability-with-very-small-state-values-config-classicalsmcconfig-gains-5-0-3-0-4-0-2-0-10-0-1-0-max-force-100-0-dt-0-01-boundary-layer-0-01-controller-modularclassicalsmc-config-config-very-small-state-values-near-machine-precision-small-state-np-array-1e-15-1e-15-1e-15-1e-15-1e-15-1e-15-result-controller-compute-control-small-state-control-result-get-control-output-result-get-control-result-get-u-if-control-is-not-none-control-should-be-finite-and-small-assert-np-all-np-isfinite-control-assert-np-all-np-abs-control-1-0-def-test-numerical-stability-large-values-self-test-numerical-stability-with-large-state-values-config-classicalsmcconfig-gains-5-0-3-0-4-0-2-0-10-0-1-0-max-force-100-0-dt-0-01-boundary-layer-0-01-controller-modularclassicalsmc-config-config-large-state-values-but-within-reasonable-bounds-large-state-np-array-10-0-5-0-3-0-2-0-2-0-1-0-result-controller-compute-control-large-state-control-result-get-control-output-result-get-control-result-get-u-if-control-is-not-none-control-should-be-finite-and-saturated-assert-np-all-np-isfinite-control-assert-np-all-np-abs-control-config-max-force-1-01-within-saturation"]], "runnable: false class TestSystemLevelMathematics: \u201c\u201d\u201dTest mathematical consistency across system components.\u201d\u201d\u201d def test_control_law_decomposition(self): \u201c\u201d\u201dTest that control law components sum correctly.\u201d\u201d\u201d config = ClassicalSMCConfig( gains=[5.0, 3.0, 4.0, 2.0, 10.0, 1.0], max_force=100.0, dt=0.01, boundary_layer=0.01 ) controller = ModularClassicalSMC(config=config) state = np.array([0.1, 0.05, 0.08, 0.02, 0.03, 0.01]) # Get overall control output result = controller.compute_control(state, {}, {}) total_control = result.get(\u2018control_output\u2019, result.get(\u2018control\u2019, result.get(\u2018u\u2019))) # Get individual components (if available in debug output) components = result.get(\u2018debug\u2019, {}) if \u2018u_equivalent\u2019 in components and \u2018u_switching\u2019 in components and \u2018u_derivative\u2019 in components: u_eq = components[\u2018u_equivalent\u2019] u_sw = components[\u2018u_switching\u2019] u_d = components[\u2018u_derivative\u2019] # Before saturation, should sum correctly u_unsaturated = u_eq + u_sw + u_d # After saturation u_saturated = np.clip(u_unsaturated, -config.max_force, config.max_force) # Should match total control (before any additional processing) if total_control is not None: assert np.allclose(u_saturated, total_control, rtol=1e-10) def test_lyapunov_function_properties(self): \u201c\u201d\u201dTest Lyapunov function properties for stability analysis.\u201d\u201d\u201d config = ClassicalSMCConfig( gains=[5.0, 3.0, 4.0, 2.0, 10.0, 1.0], max_force=100.0, dt=0.01, boundary_layer=0.01 ) controller = ModularClassicalSMC(config=config) surface = LinearSlidingSurface(config.get_surface_gains()) # Multiple test states states = [ np.array([0.1, 0.05, 0.08, 0.02, 0.03, 0.01]), np.array([0.2, 0.1, 0.15, 0.05, 0.08, 0.03]), np.array([-0.1, -0.05, -0.08, -0.02, -0.03, -0.01]) ] for state in states: s = surface.compute(state) # Lyapunov function candidate: V = 0.5 * s\u00b2 V = 0.5 * s**2 # V should be non-negative assert V >= 0 # V = 0 if and only if s = 0 if abs(s) < 1e-10: assert V < 1e-15 else: assert V > 0 def test_reaching_law_satisfaction(self): \u201c\u201d\u201dTest that reaching law is satisfied: s\u1e61 \u2264 -\u03b7|s|.\u201d\u201d\u201d config = ClassicalSMCConfig( gains=[5.0, 3.0, 4.0, 2.0, 10.0, 1.0], max_force=100.0, dt=0.01, boundary_layer=0.01 ) surface = LinearSlidingSurface(config.get_surface_gains()) # Test state away from surface state = np.array([0.1, 0.05, 0.08, 0.02, 0.03, 0.01]) s = surface.compute(state) # Simplified reaching law check (without full dynamics) # For switching control: u_sw = -K * sign(s) # The reaching condition s\u1e61 \u2264 -\u03b7|s| should be satisfied # when K is chosen large enough # This is a simplified test - full test would require dynamics model if abs(s) > config.boundary_layer: # Outside boundary layer, should have strong reaching behavior expected_reaching_rate = -config.K * abs(s) / max(abs(s), config.boundary_layer) assert expected_reaching_rate < 0 # Should be moving toward surface": [[207, "runnable-false-class-testsystemlevelmathematics-test-mathematical-consistency-across-system-components-def-test-control-law-decomposition-self-test-that-control-law-components-sum-correctly-config-classicalsmcconfig-gains-5-0-3-0-4-0-2-0-10-0-1-0-max-force-100-0-dt-0-01-boundary-layer-0-01-controller-modularclassicalsmc-config-config-state-np-array-0-1-0-05-0-08-0-02-0-03-0-01-get-overall-control-output-result-controller-compute-control-state-total-control-result-get-control-output-result-get-control-result-get-u-get-individual-components-if-available-in-debug-output-components-result-get-debug-if-u-equivalent-in-components-and-u-switching-in-components-and-u-derivative-in-components-u-eq-components-u-equivalent-u-sw-components-u-switching-u-d-components-u-derivative-before-saturation-should-sum-correctly-u-unsaturated-u-eq-u-sw-u-d-after-saturation-u-saturated-np-clip-u-unsaturated-config-max-force-config-max-force-should-match-total-control-before-any-additional-processing-if-total-control-is-not-none-assert-np-allclose-u-saturated-total-control-rtol-1e-10-def-test-lyapunov-function-properties-self-test-lyapunov-function-properties-for-stability-analysis-config-classicalsmcconfig-gains-5-0-3-0-4-0-2-0-10-0-1-0-max-force-100-0-dt-0-01-boundary-layer-0-01-controller-modularclassicalsmc-config-config-surface-linearslidingsurface-config-get-surface-gains-multiple-test-states-states-np-array-0-1-0-05-0-08-0-02-0-03-0-01-np-array-0-2-0-1-0-15-0-05-0-08-0-03-np-array-0-1-0-05-0-08-0-02-0-03-0-01-for-state-in-states-s-surface-compute-state-lyapunov-function-candidate-v-0-5-s2-v-0-5-s-2-v-should-be-non-negative-assert-v-0-v-0-if-and-only-if-s-0-if-abs-s-1e-10-assert-v-1e-15-else-assert-v-0-def-test-reaching-law-satisfaction-self-test-that-reaching-law-is-satisfied-ss-s-config-classicalsmcconfig-gains-5-0-3-0-4-0-2-0-10-0-1-0-max-force-100-0-dt-0-01-boundary-layer-0-01-surface-linearslidingsurface-config-get-surface-gains-test-state-away-from-surface-state-np-array-0-1-0-05-0-08-0-02-0-03-0-01-s-surface-compute-state-simplified-reaching-law-check-without-full-dynamics-for-switching-control-u-sw-k-sign-s-the-reaching-condition-ss-s-should-be-satisfied-when-k-is-chosen-large-enough-this-is-a-simplified-test-full-test-would-require-dynamics-model-if-abs-s-config-boundary-layer-outside-boundary-layer-should-have-strong-reaching-behavior-expected-reaching-rate-config-k-abs-s-max-abs-s-config-boundary-layer-assert-expected-reaching-rate-0-should-be-moving-toward-surface"]], "runnable: false class WorkflowPerformanceOptimizer: \u201c\u201d\u201d Adaptive optimization of workflow performance based on runtime metrics. \u201c\u201d\u201d def init(self): self.performance_history = [] self.optimization_strategies = { \u2018memory_optimization\u2019: self._optimize_memory_usage, \u2018convergence_acceleration\u2019: self._accelerate_convergence, \u2018bounds_tightening\u2019: self._tighten_bounds_dynamically, \u2018parameter_adaptation\u2019: self._adapt_pso_parameters } def optimize_workflow_performance(self, current_metrics: dict, workflow_config: dict) -> OptimizationResult: \u201c\u201d\u201d Analyze current performance and apply optimization strategies. \u201c\u201d\u201d result = OptimizationResult() # Analyze performance trends performance_analysis = self._analyze_performance_trends(current_metrics) # Apply relevant optimization strategies for strategy_name, strategy_func in self.optimization_strategies.items(): if self._should_apply_strategy(strategy_name, performance_analysis): strategy_result = strategy_func(current_metrics, workflow_config) result.add_strategy_result(strategy_name, strategy_result) return result def _accelerate_convergence(self, metrics: dict, config: dict) -> dict: \u201c\u201d\u201d Apply convergence acceleration strategies based on performance analysis. \u201c\u201d\u201d acceleration_result = { \u2018applied_optimizations\u2019: [], \u2018expected_improvement\u2019: 0.0 } # Check convergence rate convergence_rate = metrics.get(\u2018convergence_rate\u2019, 0.0) if convergence_rate < 0.05: # Slow convergence detected # Suggest inertia weight adjustment current_w = config.get(\u2018pso\u2019, {}).get(\u2018algorithm_params\u2019, {}).get(\u2018w\u2019, 0.7) if current_w > 0.5: suggested_w = max(0.4, current_w - 0.1) acceleration_result[\u2018applied_optimizations\u2019].append({ \u2018parameter\u2019: \u2018inertia_weight\u2019, \u2018current_value\u2019: current_w, \u2018suggested_value\u2019: suggested_w, \u2018justification\u2019: \u2018Reduce inertia for faster exploitation\u2019 }) acceleration_result[\u2018expected_improvement\u2019] += 15.0 # 15% improvement # Check diversity metrics diversity = metrics.get(\u2018swarm_diversity\u2019, 1.0) if diversity < 1e-8: # Very low diversity acceleration_result[\u2018applied_optimizations\u2019].append({ \u2018parameter\u2019: \u2018restart_mechanism\u2019, \u2018action\u2019: \u2018enable\u2019, \u2018fraction\u2019: 0.2, \u2018justification\u2019: \u2018Restart 20% of particles to escape local optimum\u2019 }) acceleration_result[\u2018expected_improvement\u2019] += 20.0 # 20% improvement return acceleration_result": [[252, "runnable-false-class-workflowperformanceoptimizer-adaptive-optimization-of-workflow-performance-based-on-runtime-metrics-def-init-self-self-performance-history-self-optimization-strategies-memory-optimization-self-optimize-memory-usage-convergence-acceleration-self-accelerate-convergence-bounds-tightening-self-tighten-bounds-dynamically-parameter-adaptation-self-adapt-pso-parameters-def-optimize-workflow-performance-self-current-metrics-dict-workflow-config-dict-optimizationresult-analyze-current-performance-and-apply-optimization-strategies-result-optimizationresult-analyze-performance-trends-performance-analysis-self-analyze-performance-trends-current-metrics-apply-relevant-optimization-strategies-for-strategy-name-strategy-func-in-self-optimization-strategies-items-if-self-should-apply-strategy-strategy-name-performance-analysis-strategy-result-strategy-func-current-metrics-workflow-config-result-add-strategy-result-strategy-name-strategy-result-return-result-def-accelerate-convergence-self-metrics-dict-config-dict-dict-apply-convergence-acceleration-strategies-based-on-performance-analysis-acceleration-result-applied-optimizations-expected-improvement-0-0-check-convergence-rate-convergence-rate-metrics-get-convergence-rate-0-0-if-convergence-rate-0-05-slow-convergence-detected-suggest-inertia-weight-adjustment-current-w-config-get-pso-get-algorithm-params-get-w-0-7-if-current-w-0-5-suggested-w-max-0-4-current-w-0-1-acceleration-result-applied-optimizations-append-parameter-inertia-weight-current-value-current-w-suggested-value-suggested-w-justification-reduce-inertia-for-faster-exploitation-acceleration-result-expected-improvement-15-0-15-improvement-check-diversity-metrics-diversity-metrics-get-swarm-diversity-1-0-if-diversity-1e-8-very-low-diversity-acceleration-result-applied-optimizations-append-parameter-restart-mechanism-action-enable-fraction-0-2-justification-restart-20-of-particles-to-escape-local-optimum-acceleration-result-expected-improvement-20-0-20-improvement-return-acceleration-result"]], "runnable: false controllers = [\u2018classical_smc\u2019, \u2018sta_smc\u2019, \u2018adaptive_smc\u2019]": [[68, "runnable-false-controllers-classical-smc-sta-smc-adaptive-smc"]], "runnable: false def _evaluate_controller_performance(self, controller, gains): \u201c\u201d\u201dMulti-scenario performance evaluation.\u201d\u201d\u201d # For each test scenario: for scenario in test_scenarios: # Simulate controller performance cost = self._simulate_scenario(controller, scenario) total_cost += cost * scenario[\u2018weight\u2019] # Cost components: # - Position error: 10.0 * \u222b|state_error|\u00b2dt # - Control effort: 0.1 * \u222b|u|\u00b2dt # - Control rate: 0.05 * \u222b|du/dt|\u00b2dt # - Stability penalty: penalties for instability return total_cost / total_weight": [[280, "runnable-false-def-evaluate-controller-performance-self-controller-gains-multi-scenario-performance-evaluation-for-each-test-scenario-for-scenario-in-test-scenarios-simulate-controller-performance-cost-self-simulate-scenario-controller-scenario-total-cost-cost-scenario-weight-cost-components-position-error-10-0-state-error-2dt-control-effort-0-1-u-2dt-control-rate-0-05-du-dt-2dt-stability-penalty-penalties-for-instability-return-total-cost-total-weight"]], "runnable: false def _extract_controller_parameters( config: Optional[Any], controller_type: str, controller_info: Dict[str, Any]": [[109, "runnable-false-def-extract-controller-parameters-config-optional-any-controller-type-str-controller-info-dict-str-any"]], "runnable: false def _resolve_controller_gains( gains: Optional[Union[List[float], np.ndarray]], config: Optional[Any], controller_type: str, controller_info: Dict[str, Any]": [[72, "runnable-false-def-resolve-controller-gains-gains-optional-union-list-float-np-ndarray-config-optional-any-controller-type-str-controller-info-dict-str-any"], [109, "runnable-false-def-resolve-controller-gains-gains-optional-union-list-float-np-ndarray-config-optional-any-controller-type-str-controller-info-dict-str-any"]], "runnable: false def _validate_controller_gains( gains: List[float], controller_info: Dict[str, Any]": [[116, "runnable-false-def-validate-controller-gains-gains-list-float-controller-info-dict-str-any"]], "runnable: false def _validate_controller_gains(gains, controller_info, controller_type): \u201c\u201d\u201dValidate controller gains with controller-specific rules.\u201d\u201d\u201d # 1. Count validation if len(gains) != controller_info[\u2018gain_count\u2019]: raise ValueError(f\u201dExpected {controller_info[\u2018gain_count\u2019]} gains, got {len(gains)}\u201d) # 2. Finite values if not all(isinstance(g, (int, float)) and np.isfinite(g) for g in gains): raise ValueError(\u201cAll gains must be finite numbers\u201d) # 3. Positivity if any(g <= 0 for g in gains): raise ValueError(\u201cAll gains must be positive\u201d) # 4. Controller-specific constraints if controller_type == \u2018sta_smc\u2019 and len(gains) >= 2: K1, K2 = gains[0], gains[1] if K1 <= K2: raise ValueError(\u201cSuper-Twisting stability requires K1 > K2 > 0\u201d)": [[80, "runnable-false-def-validate-controller-gains-gains-controller-info-controller-type-validate-controller-gains-with-controller-specific-rules-1-count-validation-if-len-gains-controller-info-gain-count-raise-valueerror-f-expected-controller-info-gain-count-gains-got-len-gains-2-finite-values-if-not-all-isinstance-g-int-float-and-np-isfinite-g-for-g-in-gains-raise-valueerror-all-gains-must-be-finite-numbers-3-positivity-if-any-g-0-for-g-in-gains-raise-valueerror-all-gains-must-be-positive-4-controller-specific-constraints-if-controller-type-sta-smc-and-len-gains-2-k1-k2-gains-0-gains-1-if-k1-k2-raise-valueerror-super-twisting-stability-requires-k1-k2-0"]], "runnable: false def _validate_gains(self) -> None: \u201c\u201d\u201dValidate gains according to Hurwitz stability requirements.\u201d\u201d\u201d # Check finite values if not np.all(np.isfinite(self.gains)): invalid_indices = np.where(~np.isfinite(self.gains))[0] raise ValueError(f\u201dGains contain NaN/infinite values at indices: {invalid_indices}\u201d) # Positivity requirement for stability if len(self.gains) >= 4: if any(g <= 0 for g in self.gains[:4]): raise ValueError(\u201cSurface gains [k1, k2, \u03bb1, \u03bb2] must be positive for stability\u201d) # Minimum threshold for numerical stability if any(g < 1e-12 for g in self.gains[:4]): raise ValueError(\u201cGains too small (min: 1e-12) - numerical instability risk\u201d) ``` 3. Mathematical Property Verification: - Linearity: s(\u03b1x\u2081 + \u03b2x\u2082) = \u03b1s(x\u2081) + \u03b2s(x\u2082) - Homogeneity: s(\u03b1x) = \u03b1s(x) - Continuity: lim_{x\u2192x\u2080} s(x) = s(x\u2080) - Differentiability: ds/dt exists and is computable Mathematical Impact:": [[194, "runnable-false-def-validate-gains-self-none-validate-gains-according-to-hurwitz-stability-requirements-check-finite-values-if-not-np-all-np-isfinite-self-gains-invalid-indices-np-where-np-isfinite-self-gains-0-raise-valueerror-f-gains-contain-nan-infinite-values-at-indices-invalid-indices-positivity-requirement-for-stability-if-len-self-gains-4-if-any-g-0-for-g-in-self-gains-4-raise-valueerror-surface-gains-k1-k2-1-2-must-be-positive-for-stability-minimum-threshold-for-numerical-stability-if-any-g-1e-12-for-g-in-self-gains-4-raise-valueerror-gains-too-small-min-1e-12-numerical-instability-risk-3-mathematical-property-verification-linearity-s-x1-x2-s-x1-s-x2-homogeneity-s-x-s-x-continuity-lim-xx0-s-x-s-x0-differentiability-ds-dt-exists-and-is-computable-mathematical-impact"]], "runnable: false def adaptive_pso_optimization( controller_type: str, simulation_config: Any, adaptation_config: Dict[str, Any]": [[104, "runnable-false-def-adaptive-pso-optimization-controller-type-str-simulation-config-any-adaptation-config-dict-str-any"]], "runnable: false def adaptive_pso_optimization(controller_type: SMCType) -> Tuple[np.ndarray, float]: \u201c\u201d\u201dAdaptive PSO with dynamic parameter adjustment.\u201d\u201d\u201d factory = create_pso_controller_factory(controller_type) class AdaptivePSOController: \u201c\u201d\u201dAdaptive PSO controller with factory integration.\u201d\u201d\u201d def init(self): self.iteration = 0 self.best_fitness_history = [] self.stagnation_counter = 0 self.current_bounds = get_gain_bounds_for_pso(controller_type) def adapt_parameters(self, current_best_fitness: float) -> Dict[str, float]: \u201c\u201d\u201dAdapt PSO parameters based on progress.\u201d\u201d\u201d # Check for stagnation if (len(self.best_fitness_history) > 0 and abs(current_best_fitness - self.best_fitness_history[-1]) < 1e-6): self.stagnation_counter += 1 else: self.stagnation_counter = 0 self.best_fitness_history.append(current_best_fitness) # Adaptive parameter adjustment if self.stagnation_counter > 10: # Increase exploration w = 0.9 # High inertia c1, c2 = 2.5, 1.5 # High cognitive, low social # Expand search bounds slightly lower, upper = self.current_bounds expansion = 0.1 self.current_bounds = ( [l * (1 - expansion) for l in lower], [u * (1 + expansion) for u in upper] ) elif self.iteration < 50: # Early exploration phase w = 0.9 c1, c2 = 2.0, 2.0 else: # Late exploitation phase w = 0.4 c1, c2 = 1.5, 2.5 self.iteration += 1 return { \u2018w\u2019: w, \u2018c1\u2019: c1, \u2018c2\u2019: c2, \u2018bounds\u2019: self.current_bounds } def fitness_function(self, gains: np.ndarray) -> float: \u201c\u201d\u201dAdaptive fitness function with dynamic objectives.\u201d\u201d\u201d try: controller = factory(gains) metrics = evaluate_controller_performance(controller) # Dynamic objective weighting based on iteration if self.iteration < 30: # Early phase: focus on basic performance return 0.7 * metrics[\u2018ise\u2019] + 0.3 * metrics[\u2018control_effort\u2019] elif self.iteration < 80: # Middle phase: balance performance and robustness return (0.4 * metrics[\u2018ise\u2019] + 0.3 * metrics[\u2018control_effort\u2019] + 0.3 * metrics[\u2018robustness_penalty\u2019]) else: # Late phase: focus on refinement return (0.3 * metrics[\u2018ise\u2019] + 0.2 * metrics[\u2018control_effort\u2019] + 0.3 * metrics[\u2018robustness_penalty\u2019] + 0.2 * metrics[\u2018chattering_penalty\u2019]) except: return float(\u2018inf\u2019) # Run adaptive PSO adaptive_controller = AdaptivePSOController() # Initial PSO configuration pso_params = adaptive_controller.adapt_parameters(float(\u2018inf\u2019)) optimizer = PSOTuner( controller_factory=adaptive_controller.fitness_function, config=config, adaptive_callback=adaptive_controller.adapt_parameters ) return optimizer.optimize_adaptive()": [[248, "runnable-false-def-adaptive-pso-optimization-controller-type-smctype-tuple-np-ndarray-float-adaptive-pso-with-dynamic-parameter-adjustment-factory-create-pso-controller-factory-controller-type-class-adaptivepsocontroller-adaptive-pso-controller-with-factory-integration-def-init-self-self-iteration-0-self-best-fitness-history-self-stagnation-counter-0-self-current-bounds-get-gain-bounds-for-pso-controller-type-def-adapt-parameters-self-current-best-fitness-float-dict-str-float-adapt-pso-parameters-based-on-progress-check-for-stagnation-if-len-self-best-fitness-history-0-and-abs-current-best-fitness-self-best-fitness-history-1-1e-6-self-stagnation-counter-1-else-self-stagnation-counter-0-self-best-fitness-history-append-current-best-fitness-adaptive-parameter-adjustment-if-self-stagnation-counter-10-increase-exploration-w-0-9-high-inertia-c1-c2-2-5-1-5-high-cognitive-low-social-expand-search-bounds-slightly-lower-upper-self-current-bounds-expansion-0-1-self-current-bounds-l-1-expansion-for-l-in-lower-u-1-expansion-for-u-in-upper-elif-self-iteration-50-early-exploration-phase-w-0-9-c1-c2-2-0-2-0-else-late-exploitation-phase-w-0-4-c1-c2-1-5-2-5-self-iteration-1-return-w-w-c1-c1-c2-c2-bounds-self-current-bounds-def-fitness-function-self-gains-np-ndarray-float-adaptive-fitness-function-with-dynamic-objectives-try-controller-factory-gains-metrics-evaluate-controller-performance-controller-dynamic-objective-weighting-based-on-iteration-if-self-iteration-30-early-phase-focus-on-basic-performance-return-0-7-metrics-ise-0-3-metrics-control-effort-elif-self-iteration-80-middle-phase-balance-performance-and-robustness-return-0-4-metrics-ise-0-3-metrics-control-effort-0-3-metrics-robustness-penalty-else-late-phase-focus-on-refinement-return-0-3-metrics-ise-0-2-metrics-control-effort-0-3-metrics-robustness-penalty-0-2-metrics-chattering-penalty-except-return-float-inf-run-adaptive-pso-adaptive-controller-adaptivepsocontroller-initial-pso-configuration-pso-params-adaptive-controller-adapt-parameters-float-inf-optimizer-psotuner-controller-factory-adaptive-controller-fitness-function-config-config-adaptive-callback-adaptive-controller-adapt-parameters-return-optimizer-optimize-adaptive"]], "runnable: false def adaptive_strategy(self, diversity: float) -> None: \u201c\u201d\u201dAdjust parameters based on swarm diversity. Args: diversity: Current swarm diversity metric \u201c\u201d\u201d threshold_low = 0.1 threshold_high = 0.5 if diversity < threshold_low: # Low diversity \u2192 Premature convergence risk # Increase exploration self.inertia_weight = min(0.9, self.inertia_weight * 1.1) self.cognitive_weight = min(2.5, self.cognitive_weight * 1.1) self.logger.info(\u201cLow diversity detected - increasing exploration\u201d) elif diversity > threshold_high: # High diversity \u2192 Slow convergence # Increase exploitation self.inertia_weight = max(0.4, self.inertia_weight * 0.9) self.social_weight = min(2.5, self.social_weight * 1.1) self.logger.info(\u201cHigh diversity detected - increasing exploitation\u201d)": [[215, "runnable-false-def-adaptive-strategy-self-diversity-float-none-adjust-parameters-based-on-swarm-diversity-args-diversity-current-swarm-diversity-metric-threshold-low-0-1-threshold-high-0-5-if-diversity-threshold-low-low-diversity-premature-convergence-risk-increase-exploration-self-inertia-weight-min-0-9-self-inertia-weight-1-1-self-cognitive-weight-min-2-5-self-cognitive-weight-1-1-self-logger-info-low-diversity-detected-increasing-exploration-elif-diversity-threshold-high-high-diversity-slow-convergence-increase-exploitation-self-inertia-weight-max-0-4-self-inertia-weight-0-9-self-social-weight-min-2-5-self-social-weight-1-1-self-logger-info-high-diversity-detected-increasing-exploitation"]], "runnable: false def benchmark_factory_performance(): \u201c\u201d\u201dBenchmark factory instantiation performance.\u201d\u201d\u201d controller_types = [\u2018classical_smc\u2019, \u2018sta_smc\u2019, \u2018adaptive_smc\u2019] results = {} for controller_type in controller_types: times = [] for _ in range(100): start = time.perf_counter() controller = create_controller(controller_type) end = time.perf_counter() times.append(end - start) results[controller_type] = { \u2018mean\u2019: np.mean(times), \u2018std\u2019: np.std(times), \u2018max\u2019: np.max(times), \u2018p95\u2019: np.percentile(times, 95) } return results": [[274, "runnable-false-def-benchmark-factory-performance-benchmark-factory-instantiation-performance-controller-types-classical-smc-sta-smc-adaptive-smc-results-for-controller-type-in-controller-types-times-for-in-range-100-start-time-perf-counter-controller-create-controller-controller-type-end-time-perf-counter-times-append-end-start-results-controller-type-mean-np-mean-times-std-np-std-times-max-np-max-times-p95-np-percentile-times-95-return-results"]], "runnable: false def blue_green_deployment(): \u201c\u201d\u201dBlue-green deployment strategy.\u201d\u201d\u201d print(\u201cStarting blue-green deployment\u201d) # Setup green environment green_env = setup_green_environment() # Deploy to green environment deploy_to_green(green_env) # Smoke test green environment if not smoke_test_green(green_env): cleanup_green(green_env) raise RuntimeError(\u201cGreen environment smoke test failed\u201d) # Switch traffic to green switch_traffic_to_green(green_env) # Monitor for issues monitor_duration = 600 # 10 minutes if monitor_green_environment(monitor_duration): # Success - cleanup blue environment cleanup_blue_environment() print(\u201d\u2705 Blue-green deployment successful\u201d) else: # Issues detected - rollback to blue switch_traffic_to_blue() cleanup_green(green_env) raise RuntimeError(\u201cGreen environment issues detected, rolled back\u201d) # Run blue-green deployment": [[111, "runnable-false-def-blue-green-deployment-blue-green-deployment-strategy-print-starting-blue-green-deployment-setup-green-environment-green-env-setup-green-environment-deploy-to-green-environment-deploy-to-green-green-env-smoke-test-green-environment-if-not-smoke-test-green-green-env-cleanup-green-green-env-raise-runtimeerror-green-environment-smoke-test-failed-switch-traffic-to-green-switch-traffic-to-green-green-env-monitor-for-issues-monitor-duration-600-10-minutes-if-monitor-green-environment-monitor-duration-success-cleanup-blue-environment-cleanup-blue-environment-print-blue-green-deployment-successful-else-issues-detected-rollback-to-blue-switch-traffic-to-blue-cleanup-green-green-env-raise-runtimeerror-green-environment-issues-detected-rolled-back-run-blue-green-deployment"]], "runnable: false def compare_controller_performance(): \u201c\u201d\u201dCompare optimized controllers across different types.\u201d\u201d\u201d # Optimize all controller types controller_types = [ ControllerType.CLASSICAL_SMC, ControllerType.STA_SMC, ControllerType.ADAPTIVE_SMC ] results = {} for controller_type in controller_types: print(f\u201dOptimizing {controller_type.value}\u2026\u201d) pso_config = PSOFactoryConfig( controller_type=controller_type, population_size=20, max_iterations=50 ) pso_factory = EnhancedPSOFactory(pso_config) result = pso_factory.optimize_controller() results[controller_type.value] = result # Performance comparison print(\u201c\\n=== Controller Performance Comparison ===\u201d) print(f\u201d{\u2018Controller\u2019:<20} {\u2018Best Cost\u2019:<12} {\u2018Converged\u2019:<10} {\u2018Improvement\u2019:<12}\u201d) print(\u201c-\u201d * 60) for controller_name, result in results.items(): if result[\u2018success\u2019]: best_cost = result[\u2018best_cost\u2019] converged = result[\u2018performance_analysis\u2019][\u2018converged\u2019] improvement = result[\u2018performance_analysis\u2019][\u2018improvement_ratio\u2019] print(f\u201d{controller_name:<20} {best_cost:<12.6f} {str(converged):<10} {improvement:<12.1%}\u201d) else: print(f\u201d{controller_name:<20} {\u2018FAILED\u2019:<12} {\u2018-\u2018:<10} {\u2018-\u2018:<12}\u201d) return results # Run comparison": [[280, "runnable-false-def-compare-controller-performance-compare-optimized-controllers-across-different-types-optimize-all-controller-types-controller-types-controllertype-classical-smc-controllertype-sta-smc-controllertype-adaptive-smc-results-for-controller-type-in-controller-types-print-f-optimizing-controller-type-value-pso-config-psofactoryconfig-controller-type-controller-type-population-size-20-max-iterations-50-pso-factory-enhancedpsofactory-pso-config-result-pso-factory-optimize-controller-results-controller-type-value-result-performance-comparison-print-n-controller-performance-comparison-print-f-controller-20-best-cost-12-converged-10-improvement-12-print-60-for-controller-name-result-in-results-items-if-result-success-best-cost-result-best-cost-converged-result-performance-analysis-converged-improvement-result-performance-analysis-improvement-ratio-print-f-controller-name-20-best-cost-12-6f-str-converged-10-improvement-12-1-else-print-f-controller-name-20-failed-12-10-12-return-results-run-comparison"]], "runnable: false def complete_pso_optimization_example(): \u201c\u201d\u201d Complete example demonstrating PSO-Factory integration. This example shows: 1. Configuration setup 2. Controller creation and validation 3. PSO optimization execution 4. Performance monitoring 5. Results analysis and validation \u201c\u201d\u201d # Step 1: Configuration setup pso_config = PSOFactoryConfig( controller_type=SMCType.CLASSICAL, max_force=100.0, dt=0.01, pso_params={ \u2018n_particles\u2019: 30, \u2018iters\u2019: 100, \u2018c1\u2019: 2.0, \u2018c2\u2019: 2.0, \u2018w\u2019: 0.9 }, enable_monitoring=True, strict_validation=True ) # Step 2: Simulation configuration simulation_config = { \u2018duration\u2019: 5.0, \u2018dt\u2019: 0.01, \u2018initial_state\u2019: [0.1, 0.1, 0.0, 0.0, 0.0, 0.0], # Small perturbation \u2018disturbances\u2019: { \u2018enable\u2019: True, \u2018amplitude\u2019: 5.0, \u2018frequency\u2019: 1.0 }, \u2018performance_objectives\u2019: [\u2018ise\u2019, \u2018overshoot\u2019, \u2018control_effort\u2019] } # Step 3: PSO optimization with monitoring with monitor_pso_performance(pso_config.pso_params) as monitor: # Define fitness function @handle_pso_errors def fitness_function(particles: np.ndarray) -> np.ndarray: fitness_scores = [] for gains in particles: start_time = time.perf_counter() try: # Create controller with validation controller = create_smc_for_pso( pso_config.controller_type, gains.tolist(), pso_config.max_force ) creation_time = time.perf_counter() - start_time monitor.log_controller_creation(True, creation_time) # Run simulation sim_start = time.perf_counter() result = run_simulation(controller, simulation_config) sim_time = time.perf_counter() - sim_start monitor.log_simulation_execution(True, sim_time) # Compute fitness fitness_start = time.perf_counter() fitness = compute_multi_objective_fitness( result, simulation_config[\u2018performance_objectives\u2019] ) fitness_time = time.perf_counter() - fitness_start monitor.log_fitness_evaluation(fitness, fitness_time) fitness_scores.append(fitness) except Exception as e: monitor.log_controller_creation(False, 0.0) fitness_scores.append(1000.0) # Log resource usage periodically if len(fitness_scores) % 10 == 0: monitor.log_resource_usage() return np.array(fitness_scores) # Step 4: Execute PSO optimization from pyswarms.single import GlobalBestPSO bounds = pso_config.gain_bounds bounds_array = np.array(bounds) optimizer = GlobalBestPSO( n_particles=pso_config.pso_params[\u2018n_particles\u2019], dimensions=pso_config.n_gains, options={ \u2018c1\u2019: pso_config.pso_params[\u2018c1\u2019], \u2018c2\u2019: pso_config.pso_params[\u2018c2\u2019], \u2018w\u2019: pso_config.pso_params[\u2018w\u2019] }, bounds=(bounds_array[:, 0], bounds_array[:, 1]) ) print(\u201cStarting PSO optimization\u2026\u201d) best_cost, best_gains = optimizer.optimize( fitness_function, iters=pso_config.pso_params[\u2018iters\u2019], verbose=True ) # Step 5: Results analysis performance_report = monitor.generate_performance_report() # Validate optimized controller optimized_controller = create_smc_for_pso( pso_config.controller_type, best_gains.tolist(), pso_config.max_force ) # Run validation simulation validation_result = run_simulation(optimized_controller, simulation_config) validation_metrics = compute_validation_metrics(validation_result) # Step 6: Generate report optimization_report = { \u2018optimization_results\u2019: { \u2018best_gains\u2019: best_gains.tolist(), \u2018best_fitness\u2019: float(best_cost), \u2018optimization_history\u2019: optimizer.cost_history, \u2018convergence_iteration\u2019: find_convergence_iteration(optimizer.cost_history) }, \u2018validation_results\u2019: { \u2018controller_gains\u2019: optimized_controller.gains, \u2018performance_metrics\u2019: validation_metrics, \u2018stability_analysis\u2019: estimate_stability_properties( pso_config.controller_type, best_gains.tolist() ) }, \u2018performance_report\u2019: performance_report, \u2018configuration\u2019: { \u2018pso_config\u2019: pso_config.dict, \u2018simulation_config\u2019: simulation_config, \u2018bounds_used\u2019: bounds } } # Step 7: Display results print_optimization_summary(optimization_report) return optimization_report def print_optimization_summary(report: Dict[str, Any]): \u201c\u201d\u201dPrint formatted optimization summary.\u201d\u201d\u201d opt_results = report[\u2018optimization_results\u2019] val_results = report[\u2018validation_results\u2019] perf_report = report[\u2018performance_report\u2019] print(\u201c\\n\u201d + \u201c=\u201d*80) print(\u201cPSO OPTIMIZATION RESULTS SUMMARY\u201d) print(\u201c=\u201d*80) print(f\u201d\\n\ud83d\udcca OPTIMIZATION RESULTS:\u201d) print(f\u201d Best Fitness: {opt_results[\u2018best_fitness\u2019]:.6f}\u201d) print(f\u201d Best Gains: {opt_results[\u2018best_gains\u2019]}\u201d) print(f\u201d Convergence: Iteration {opt_results[\u2018convergence_iteration\u2019]}\u201d) print(f\u201d\\n\ud83c\udfaf VALIDATION METRICS:\u201d) for metric, value in val_results[\u2018performance_metrics\u2019].items(): print(f\u201d {metric.upper()}: {value:.4f}\u201d) print(f\u201d\\n\u26a1 PERFORMANCE SUMMARY:\u201d) summary = perf_report[\u2018summary\u2019] print(f\u201d Total Evaluations: {summary[\u2018total_evaluations\u2019]}\u201d) print(f\u201d Success Rate: {summary[\u2018success_rate\u2019]:.1f}%\u201d) print(f\u201d Evaluations/sec: {summary[\u2018evaluations_per_second\u2019]:.1f}\u201d) print(f\u201d Total Time: {summary[\u2018total_optimization_time\u2019]:.1f}s\u201d) perf = perf_report[\u2018performance\u2019] print(f\u201d Avg Creation Time: {perf[\u2018average_controller_creation_time_ms\u2019]:.2f}ms\u201d) print(f\u201d Avg Simulation Time: {perf[\u2018average_simulation_time_ms\u2019]:.2f}ms\u201d) resources = perf_report[\u2018resources\u2019] print(f\u201d Peak Memory: {resources[\u2018peak_memory_usage_percent\u2019]:.1f}%\u201d) print(f\u201d Avg CPU: {resources[\u2018average_cpu_utilization_percent\u2019]:.1f}%\u201d) if perf_report[\u2018alerts\u2019]: print(f\u201d\\n\u26a0\ufe0f PERFORMANCE ALERTS:\u201d) for alert in perf_report[\u2018alerts\u2019]: print(f\u201d - {alert}\u201d) print(\u201c\\n\u201d + \u201c=\u201d*80) def find_convergence_iteration(cost_history: List[float], tolerance: float = 1e-6, patience: int = 10 ) -> int: \u201c\u201d\u201dFind iteration where PSO converged.\u201d\u201d\u201d if len(cost_history) < patience: return len(cost_history) for i in range(patience, len(cost_history)): # Check if fitness has been stable for \u2018patience\u2019 iterations recent_costs = cost_history[i-patience:i] if max(recent_costs) - min(recent_costs) < tolerance: return i - patience + 1 return len(cost_history) # No convergence detected # Run the complete example": [[112, "runnable-false-def-complete-pso-optimization-example-complete-example-demonstrating-pso-factory-integration-this-example-shows-1-configuration-setup-2-controller-creation-and-validation-3-pso-optimization-execution-4-performance-monitoring-5-results-analysis-and-validation-step-1-configuration-setup-pso-config-psofactoryconfig-controller-type-smctype-classical-max-force-100-0-dt-0-01-pso-params-n-particles-30-iters-100-c1-2-0-c2-2-0-w-0-9-enable-monitoring-true-strict-validation-true-step-2-simulation-configuration-simulation-config-duration-5-0-dt-0-01-initial-state-0-1-0-1-0-0-0-0-0-0-0-0-small-perturbation-disturbances-enable-true-amplitude-5-0-frequency-1-0-performance-objectives-ise-overshoot-control-effort-step-3-pso-optimization-with-monitoring-with-monitor-pso-performance-pso-config-pso-params-as-monitor-define-fitness-function-handle-pso-errors-def-fitness-function-particles-np-ndarray-np-ndarray-fitness-scores-for-gains-in-particles-start-time-time-perf-counter-try-create-controller-with-validation-controller-create-smc-for-pso-pso-config-controller-type-gains-tolist-pso-config-max-force-creation-time-time-perf-counter-start-time-monitor-log-controller-creation-true-creation-time-run-simulation-sim-start-time-perf-counter-result-run-simulation-controller-simulation-config-sim-time-time-perf-counter-sim-start-monitor-log-simulation-execution-true-sim-time-compute-fitness-fitness-start-time-perf-counter-fitness-compute-multi-objective-fitness-result-simulation-config-performance-objectives-fitness-time-time-perf-counter-fitness-start-monitor-log-fitness-evaluation-fitness-fitness-time-fitness-scores-append-fitness-except-exception-as-e-monitor-log-controller-creation-false-0-0-fitness-scores-append-1000-0-log-resource-usage-periodically-if-len-fitness-scores-10-0-monitor-log-resource-usage-return-np-array-fitness-scores-step-4-execute-pso-optimization-from-pyswarms-single-import-globalbestpso-bounds-pso-config-gain-bounds-bounds-array-np-array-bounds-optimizer-globalbestpso-n-particles-pso-config-pso-params-n-particles-dimensions-pso-config-n-gains-options-c1-pso-config-pso-params-c1-c2-pso-config-pso-params-c2-w-pso-config-pso-params-w-bounds-bounds-array-0-bounds-array-1-print-starting-pso-optimization-best-cost-best-gains-optimizer-optimize-fitness-function-iters-pso-config-pso-params-iters-verbose-true-step-5-results-analysis-performance-report-monitor-generate-performance-report-validate-optimized-controller-optimized-controller-create-smc-for-pso-pso-config-controller-type-best-gains-tolist-pso-config-max-force-run-validation-simulation-validation-result-run-simulation-optimized-controller-simulation-config-validation-metrics-compute-validation-metrics-validation-result-step-6-generate-report-optimization-report-optimization-results-best-gains-best-gains-tolist-best-fitness-float-best-cost-optimization-history-optimizer-cost-history-convergence-iteration-find-convergence-iteration-optimizer-cost-history-validation-results-controller-gains-optimized-controller-gains-performance-metrics-validation-metrics-stability-analysis-estimate-stability-properties-pso-config-controller-type-best-gains-tolist-performance-report-performance-report-configuration-pso-config-pso-config-dict-simulation-config-simulation-config-bounds-used-bounds-step-7-display-results-print-optimization-summary-optimization-report-return-optimization-report-def-print-optimization-summary-report-dict-str-any-print-formatted-optimization-summary-opt-results-report-optimization-results-val-results-report-validation-results-perf-report-report-performance-report-print-n-80-print-pso-optimization-results-summary-print-80-print-f-n-optimization-results-print-f-best-fitness-opt-results-best-fitness-6f-print-f-best-gains-opt-results-best-gains-print-f-convergence-iteration-opt-results-convergence-iteration-print-f-n-validation-metrics-for-metric-value-in-val-results-performance-metrics-items-print-f-metric-upper-value-4f-print-f-n-performance-summary-summary-perf-report-summary-print-f-total-evaluations-summary-total-evaluations-print-f-success-rate-summary-success-rate-1f-print-f-evaluations-sec-summary-evaluations-per-second-1f-print-f-total-time-summary-total-optimization-time-1f-s-perf-perf-report-performance-print-f-avg-creation-time-perf-average-controller-creation-time-ms-2f-ms-print-f-avg-simulation-time-perf-average-simulation-time-ms-2f-ms-resources-perf-report-resources-print-f-peak-memory-resources-peak-memory-usage-percent-1f-print-f-avg-cpu-resources-average-cpu-utilization-percent-1f-if-perf-report-alerts-print-f-n-performance-alerts-for-alert-in-perf-report-alerts-print-f-alert-print-n-80-def-find-convergence-iteration-cost-history-list-float-tolerance-float-1e-6-patience-int-10-int-find-iteration-where-pso-converged-if-len-cost-history-patience-return-len-cost-history-for-i-in-range-patience-len-cost-history-check-if-fitness-has-been-stable-for-patience-iterations-recent-costs-cost-history-i-patience-i-if-max-recent-costs-min-recent-costs-tolerance-return-i-patience-1-return-len-cost-history-no-convergence-detected-run-the-complete-example"]], "runnable: false def complete_research_workflow(): \u201c\u201d\u201dComplete research workflow demonstrating PSO-factory integration.\u201d\u201d\u201d print(\u201c=== Complete Research Workflow ===\u201d) # Step 1: Baseline controllers print(\u201c\\n1. Creating baseline controllers\u2026\u201d) from src.controllers.factory import create_controller baseline_controllers = { \u2018classical\u2019: create_controller(\u2018classical_smc\u2019, gains=[8.0, 6.0, 4.0, 3.0, 15.0, 2.0]), \u2018sta\u2019: create_controller(\u2018sta_smc\u2019, gains=[8.0, 4.0, 12.0, 6.0, 4.85, 3.43]), \u2018adaptive\u2019: create_controller(\u2018adaptive_smc\u2019, gains=[12.0, 10.0, 6.0, 5.0, 2.5]) } print(f\u201dCreated {len(baseline_controllers)} baseline controllers\u201d) # Step 2: PSO optimization print(\u201c\\n2. Running PSO optimization\u2026\u201d) optimization_results = {} for controller_name in [\u2018classical_smc\u2019, \u2018sta_smc\u2019, \u2018adaptive_smc\u2019]: controller_enum = { \u2018classical_smc\u2019: ControllerType.CLASSICAL_SMC, \u2018sta_smc\u2019: ControllerType.STA_SMC, \u2018adaptive_smc\u2019: ControllerType.ADAPTIVE_SMC }[controller_name] pso_config = PSOFactoryConfig( controller_type=controller_enum, population_size=20, max_iterations=60, use_robust_evaluation=True ) pso_factory = EnhancedPSOFactory(pso_config) result = pso_factory.optimize_controller() optimization_results[controller_name] = result if result[\u2018success\u2019]: cost = result[\u2018best_cost\u2019] converged = result[\u2018performance_analysis\u2019][\u2018converged\u2019] print(f\u201d {controller_name}: cost={cost:.6f}, converged={converged}\u201d) else: print(f\u201d {controller_name}: FAILED - {result.get(\u2018error\u2019, \u2018Unknown\u2019)}\u201d) # Step 3: Performance comparison print(\u201c\\n3. Performance comparison\u2026\u201d) comparison_data = [] for controller_name, result in optimization_results.items(): if result[\u2018success\u2019]: comparison_data.append({ \u2018controller\u2019: controller_name, \u2018cost\u2019: result[\u2018best_cost\u2019], \u2018gains\u2019: result[\u2018best_gains\u2019], \u2018converged\u2019: result[\u2018performance_analysis\u2019][\u2018converged\u2019], \u2018improvement\u2019: result[\u2018performance_analysis\u2019][\u2018improvement_ratio\u2019] }) # Sort by cost (lower is better) comparison_data.sort(key=lambda x: x[\u2018cost\u2019]) print(f\u201d{\u2018Rank\u2019:<4} {\u2018Controller\u2019:<15} {\u2018Cost\u2019:<12} {\u2018Converged\u2019:<10} {\u2018Improvement\u2019:<12}\u201d) print(\u201c-\u201d * 55) for i, data in enumerate(comparison_data, 1): print(f\u201d{i:<4} {data[\u2018controller\u2019]:<15} {data[\u2018cost\u2019]:<12.6f} \u201c f\u201d{str(data[\u2018converged\u2019]):<10} {data[\u2018improvement\u2019]:<12.1%}\u201d) # Step 4: Best controller analysis if comparison_data: best_controller = comparison_data[0] print(f\u201d\\n4. Best controller analysis:\u201d) print(f\u201d Controller: {best_controller[\u2018controller\u2019]}\u201d) print(f\u201d Cost: {best_controller[\u2018cost\u2019]:.6f}\u201d) print(f\u201d Gains: {best_controller[\u2018gains\u2019]}\u201d) print(f\u201d Converged: {best_controller[\u2018converged\u2019]}\u201d) print(f\u201d Improvement: {best_controller[\u2018improvement\u2019]:.1%}\u201d) # Create optimized controller best_name = best_controller[\u2018controller\u2019] best_gains = best_controller[\u2018gains\u2019] optimized_controller = create_controller(best_name, gains=best_gains) print(f\u201d Optimized controller ready for deployment\u201d) return { \u2018baseline_controllers\u2019: baseline_controllers, \u2018optimization_results\u2019: optimization_results, \u2018best_controller\u2019: optimized_controller, \u2018comparison_data\u2019: comparison_data } else: print(\u201cNo successful optimizations\u201d) return None # Run complete workflow": [[280, "runnable-false-def-complete-research-workflow-complete-research-workflow-demonstrating-pso-factory-integration-print-complete-research-workflow-step-1-baseline-controllers-print-n1-creating-baseline-controllers-from-src-controllers-factory-import-create-controller-baseline-controllers-classical-create-controller-classical-smc-gains-8-0-6-0-4-0-3-0-15-0-2-0-sta-create-controller-sta-smc-gains-8-0-4-0-12-0-6-0-4-85-3-43-adaptive-create-controller-adaptive-smc-gains-12-0-10-0-6-0-5-0-2-5-print-f-created-len-baseline-controllers-baseline-controllers-step-2-pso-optimization-print-n2-running-pso-optimization-optimization-results-for-controller-name-in-classical-smc-sta-smc-adaptive-smc-controller-enum-classical-smc-controllertype-classical-smc-sta-smc-controllertype-sta-smc-adaptive-smc-controllertype-adaptive-smc-controller-name-pso-config-psofactoryconfig-controller-type-controller-enum-population-size-20-max-iterations-60-use-robust-evaluation-true-pso-factory-enhancedpsofactory-pso-config-result-pso-factory-optimize-controller-optimization-results-controller-name-result-if-result-success-cost-result-best-cost-converged-result-performance-analysis-converged-print-f-controller-name-cost-cost-6f-converged-converged-else-print-f-controller-name-failed-result-get-error-unknown-step-3-performance-comparison-print-n3-performance-comparison-comparison-data-for-controller-name-result-in-optimization-results-items-if-result-success-comparison-data-append-controller-controller-name-cost-result-best-cost-gains-result-best-gains-converged-result-performance-analysis-converged-improvement-result-performance-analysis-improvement-ratio-sort-by-cost-lower-is-better-comparison-data-sort-key-lambda-x-x-cost-print-f-rank-4-controller-15-cost-12-converged-10-improvement-12-print-55-for-i-data-in-enumerate-comparison-data-1-print-f-i-4-data-controller-15-data-cost-12-6f-f-str-data-converged-10-data-improvement-12-1-step-4-best-controller-analysis-if-comparison-data-best-controller-comparison-data-0-print-f-n4-best-controller-analysis-print-f-controller-best-controller-controller-print-f-cost-best-controller-cost-6f-print-f-gains-best-controller-gains-print-f-converged-best-controller-converged-print-f-improvement-best-controller-improvement-1-create-optimized-controller-best-name-best-controller-controller-best-gains-best-controller-gains-optimized-controller-create-controller-best-name-gains-best-gains-print-f-optimized-controller-ready-for-deployment-return-baseline-controllers-baseline-controllers-optimization-results-optimization-results-best-controller-optimized-controller-comparison-data-comparison-data-else-print-no-successful-optimizations-return-none-run-complete-workflow"]], "runnable: false def compute(self, state: np.ndarray) -> float: \u201c\u201d\u201dCompute linear sliding surface with numerical safeguards.\u201d\u201d\u201d # Input validation if len(state) < 6: raise ValueError(\u201cState must have at least 6 elements\u201d) # Handle non-finite values if not np.all(np.isfinite(state)): state = np.where(np.isfinite(state), state, 0.0) # Extract components theta1, theta1_dot = state[2], state[3] theta2, theta2_dot = state[4], state[5] # Linear sliding surface: s = \u03bb\u2081\u03b8\u0307\u2081 + k\u2081\u03b8\u2081 + \u03bb\u2082\u03b8\u0307\u2082 + k\u2082\u03b8\u2082 s = (self.lam1 * theta1_dot + self.k1 * theta1 + self.lam2 * theta2_dot + self.k2 * theta2) # Numerical safety return 0.0 if not np.isfinite(s) else float(s) 2. **Stability Analysis Integration:**python": [[194, "runnable-false-def-compute-self-state-np-ndarray-float-compute-linear-sliding-surface-with-numerical-safeguards-input-validation-if-len-state-6-raise-valueerror-state-must-have-at-least-6-elements-handle-non-finite-values-if-not-np-all-np-isfinite-state-state-np-where-np-isfinite-state-state-0-0-extract-components-theta1-theta1-dot-state-2-state-3-theta2-theta2-dot-state-4-state-5-linear-sliding-surface-s-11-k11-22-k22-s-self-lam1-theta1-dot-self-k1-theta1-self-lam2-theta2-dot-self-k2-theta2-numerical-safety-return-0-0-if-not-np-isfinite-s-else-float-s-2-stability-analysis-integration-python"]], "runnable: false def compute_control(self, state: np.ndarray, target: np.ndarray) -> float: \u201c\u201d\u201dCompute SMC control signal.\u201d\u201d\u201d # Extract state variables theta1, theta2, x, theta1_dot, theta2_dot, x_dot = state # Compute errors e1 = theta1 - target[0] # Position error pendulum 1 e2 = theta2 - target[1] # Position error pendulum 2 e1_dot = theta1_dot - target[3] # Velocity error pendulum 1 e2_dot = theta2_dot - target[4] # Velocity error pendulum 2 # Sliding surface: s = \u03bb\u2081e\u2081 + \u03bb\u2082e\u2082 + \u0117\u2081 + \u0117\u2082 s = self.lambda1 * e1 + self.lambda2 * e2 + e1_dot + e2_dot # Control law: u = u_eq + u_sw u_equivalent = self._compute_equivalent_control(state, target) u_switching = -self.K * np.sign(s) return u_equivalent + u_switching": [[191, "runnable-false-def-compute-control-self-state-np-ndarray-target-np-ndarray-float-compute-smc-control-signal-extract-state-variables-theta1-theta2-x-theta1-dot-theta2-dot-x-dot-state-compute-errors-e1-theta1-target-0-position-error-pendulum-1-e2-theta2-target-1-position-error-pendulum-2-e1-dot-theta1-dot-target-3-velocity-error-pendulum-1-e2-dot-theta2-dot-target-4-velocity-error-pendulum-2-sliding-surface-s-1e1-2e2-e1-e2-s-self-lambda1-e1-self-lambda2-e2-e1-dot-e2-dot-control-law-u-u-eq-u-sw-u-equivalent-self-compute-equivalent-control-state-target-u-switching-self-k-np-sign-s-return-u-equivalent-u-switching"]], "runnable: false def compute_control(self, state: np.ndarray, target: np.ndarray) -> float: \u201c\u201d\u201dCompute Super-Twisting control signal.\u201d\u201d\u201d # Compute sliding surface s = self._compute_sliding_surface(state, target) # Super-Twisting control law # u\u2081 = -\u03b1\u2081|s|^(1/2) sign(s) u1 = -self.alpha1 * np.power(np.abs(s), 0.5) * np.sign(s) # u\u2082 = \u222b(-\u03b1\u2082 sign(s)) dt self.integral_term += -self.alpha2 * np.sign(s) * self.dt return u1 + self.integral_term": [[191, "runnable-false-def-compute-control-self-state-np-ndarray-target-np-ndarray-float-compute-super-twisting-control-signal-compute-sliding-surface-s-self-compute-sliding-surface-state-target-super-twisting-control-law-u1-1-s-1-2-sign-s-u1-self-alpha1-np-power-np-abs-s-0-5-np-sign-s-u2-2-sign-s-dt-self-integral-term-self-alpha2-np-sign-s-self-dt-return-u1-self-integral-term"]], "runnable: false def compute_fitness_cost(t: np.ndarray, x: np.ndarray, u: np.ndarray, sigma: np.ndarray) -> float: \u201c\u201d\u201d Multi-objective fitness function for PSO optimization. Mathematical Formulation: J = w\u2081\u222b\u2080\u1d40||e(t)||\u00b2dt + w\u2082\u222b\u2080\u1d40u\u00b2(t)dt + w\u2083\u222b\u2080\u1d40(du/dt)\u00b2dt + w\u2084\u222b\u2080\u1d40\u03c3\u00b2(t)dt + P Where: - e(t) = x(t) - x_ref: state error vector - u(t): control effort - du/dt: control rate (chattering penalty) - \u03c3(t): sliding variable magnitude - P: instability penalty for early termination Cost Function Components: 1. State Error (ISE): \u222b\u2080\u1d40||e(t)||\u00b2dt 2. Control Effort: \u222b\u2080\u1d40u\u00b2(t)dt 3. Control Rate: \u222b\u2080\u1d40(du/dt)\u00b2dt 4. Sliding Variable Energy: \u222b\u2080\u1d40\u03c3\u00b2(t)dt 5. Stability Penalty: Graded penalty for premature failure \u201c\u201d\u201d dt = np.diff(t) dt_matrix = dt[None, :] # Shape (1, N-1) # State error integration (all state components) state_error_sq = np.sum(x[:, :-1, :]2 * dt_matrix[:, :, None], axis=(1, 2)) # Control effort integration control_effort_sq = np.sum(u2 * dt_matrix, axis=1) # Control rate penalty (anti-chattering) du = np.diff(u, axis=1, prepend=u[:, 0:1]) control_rate_sq = np.sum(du2 * dt_matrix, axis=1) # Sliding variable energy sliding_energy = np.sum(sigma2 * dt_matrix, axis=1) # Instability detection and penalty instability_mask = detect_instability(x, u, sigma) stability_penalty = compute_graded_penalty(instability_mask, t) # Weighted cost aggregation total_cost = ( weights.state_error * normalize(state_error_sq, norms.ise) + weights.control_effort * normalize(control_effort_sq, norms.control) + weights.control_rate * normalize(control_rate_sq, norms.rate) + weights.stability * normalize(sliding_energy, norms.sliding) + stability_penalty ) return total_cost": [[251, "runnable-false-def-compute-fitness-cost-t-np-ndarray-x-np-ndarray-u-np-ndarray-sigma-np-ndarray-float-multi-objective-fitness-function-for-pso-optimization-mathematical-formulation-j-w10-e-t-2dt-w20-u2-t-dt-w30-du-dt-2dt-w40-2-t-dt-p-where-e-t-x-t-x-ref-state-error-vector-u-t-control-effort-du-dt-control-rate-chattering-penalty-t-sliding-variable-magnitude-p-instability-penalty-for-early-termination-cost-function-components-1-state-error-ise-0-e-t-2dt-2-control-effort-0-u2-t-dt-3-control-rate-0-du-dt-2dt-4-sliding-variable-energy-0-2-t-dt-5-stability-penalty-graded-penalty-for-premature-failure-dt-np-diff-t-dt-matrix-dt-none-shape-1-n-1-state-error-integration-all-state-components-state-error-sq-np-sum-x-1-2-dt-matrix-none-axis-1-2-control-effort-integration-control-effort-sq-np-sum-u2-dt-matrix-axis-1-control-rate-penalty-anti-chattering-du-np-diff-u-axis-1-prepend-u-0-1-control-rate-sq-np-sum-du2-dt-matrix-axis-1-sliding-variable-energy-sliding-energy-np-sum-sigma2-dt-matrix-axis-1-instability-detection-and-penalty-instability-mask-detect-instability-x-u-sigma-stability-penalty-compute-graded-penalty-instability-mask-t-weighted-cost-aggregation-total-cost-weights-state-error-normalize-state-error-sq-norms-ise-weights-control-effort-normalize-control-effort-sq-norms-control-weights-control-rate-normalize-control-rate-sq-norms-rate-weights-stability-normalize-sliding-energy-norms-sliding-stability-penalty-return-total-cost"]], "runnable: false def compute_switching_function(self, surface_value: float) -> float: \u201c\u201d\u201dCompute continuous switching function with adaptive boundary layer.\u201d\u201d\u201d # Adaptive boundary layer thickness surface_derivative = self._get_surface_derivative() effective_thickness = self.base_thickness + self.slope * abs(surface_derivative) # Continuous switching approximation if self.switch_method == \u201ctanh\u201d: return np.tanh(surface_value / effective_thickness) elif self.switch_method == \u201clinear\u201d: return np.clip(surface_value / effective_thickness, -1.0, 1.0) else: # \u201csign\u201d return np.sign(surface_value) 3. **Validation Rules:**python if thickness <= 0: raise ValueError(\u201cBoundary layer thickness must be positive\u201d) if slope < 0: raise ValueError(\u201cBoundary layer slope must be non-negative\u201d) ``` Mathematical Impact:": [[194, "runnable-false-def-compute-switching-function-self-surface-value-float-float-compute-continuous-switching-function-with-adaptive-boundary-layer-adaptive-boundary-layer-thickness-surface-derivative-self-get-surface-derivative-effective-thickness-self-base-thickness-self-slope-abs-surface-derivative-continuous-switching-approximation-if-self-switch-method-tanh-return-np-tanh-surface-value-effective-thickness-elif-self-switch-method-linear-return-np-clip-surface-value-effective-thickness-1-0-1-0-else-sign-return-np-sign-surface-value-3-validation-rules-python-if-thickness-0-raise-valueerror-boundary-layer-thickness-must-be-positive-if-slope-0-raise-valueerror-boundary-layer-slope-must-be-non-negative-mathematical-impact"]], "runnable: false def controller_factory(gains: np.ndarray) -> Controller: \u201c\u201d\u201d PSO-compatible controller factory interface. Mathematical Foundation: The factory must instantiate controllers with gain vector G \u2208 \u211d\u207f where n is controller-specific dimensionality: - Classical SMC: G \u2208 \u211d\u2076 (c\u2081, \u03bb\u2081, c\u2082, \u03bb\u2082, K, kd) - STA-SMC: G \u2208 \u211d\u2076 (K\u2081, K\u2082, k\u2081, k\u2082, \u03bb\u2081, \u03bb\u2082) - Adaptive SMC: G \u2208 \u211d\u2075 (c\u2081, \u03bb\u2081, c\u2082, \u03bb\u2082, \u03b3) - Hybrid Adaptive STA-SMC: G \u2208 \u211d\u2074 (c\u2081, \u03bb\u2081, c\u2082, \u03bb\u2082) Parameters \u2014\u2014\u2014- gains : np.ndarray, shape (n,) Controller gain vector with validated bounds Returns \u2014\u2014- Controller Configured SMC instance with required attributes: - max_force: float (actuator saturation limit) - validate_gains: Optional[Callable] (pre-filtering function) Interface Contracts \u2014\u2014\u2014\u2014\u2014\u2014 1. Factory function MUST have attribute \u2018n_gains\u2019 specifying dimensionality 2. Returned controller MUST implement control computation interface 3. All gains MUST be positive and within specified bounds 4. Controller MUST handle edge cases (singularities, saturation) \u201c\u201d\u201d return create_controller(controller_type, config, gains=gains) # Required factory attribute": [[251, "runnable-false-def-controller-factory-gains-np-ndarray-controller-pso-compatible-controller-factory-interface-mathematical-foundation-the-factory-must-instantiate-controllers-with-gain-vector-g-n-where-n-is-controller-specific-dimensionality-classical-smc-g-6-c1-1-c2-2-k-kd-sta-smc-g-6-k1-k2-k1-k2-1-2-adaptive-smc-g-5-c1-1-c2-2-hybrid-adaptive-sta-smc-g-4-c1-1-c2-2-parameters-gains-np-ndarray-shape-n-controller-gain-vector-with-validated-bounds-returns-controller-configured-smc-instance-with-required-attributes-max-force-float-actuator-saturation-limit-validate-gains-optional-callable-pre-filtering-function-interface-contracts-1-factory-function-must-have-attribute-n-gains-specifying-dimensionality-2-returned-controller-must-implement-control-computation-interface-3-all-gains-must-be-positive-and-within-specified-bounds-4-controller-must-handle-edge-cases-singularities-saturation-return-create-controller-controller-type-config-gains-gains-required-factory-attribute"]], "runnable: false def create_controller(controller_type: str, config: Optional[Any] = None, gains: Optional[Union[list, np.ndarray]] = None) -> Any: \u201c\u201d\u201dCreate controller with graceful degradation.\u201d\u201d\u201d try: # Attempt full configuration creation controller_config = create_full_config(controller_type, config, gains) return controller_class(controller_config) except Exception as e: logger.warning(f\u201dFull config creation failed: {e}. Using minimal config.\u201d) # Fallback to minimal configuration minimal_config = create_minimal_config(controller_type, gains) return controller_class(minimal_config)": [[116, "runnable-false-def-create-controller-controller-type-str-config-optional-any-none-gains-optional-union-list-np-ndarray-none-any-create-controller-with-graceful-degradation-try-attempt-full-configuration-creation-controller-config-create-full-config-controller-type-config-gains-return-controller-class-controller-config-except-exception-as-e-logger-warning-f-full-config-creation-failed-e-using-minimal-config-fallback-to-minimal-configuration-minimal-config-create-minimal-config-controller-type-gains-return-controller-class-minimal-config"]], "runnable: false def create_fallback_configuration(controller_type, gains): \u201c\u201d\u201dCreate minimal working configuration when full config fails.\u201d\u201d\u201d fallback_params = { \u2018gains\u2019: gains, \u2018max_force\u2019: 150.0, # Safe default \u2018dt\u2019: 0.001, # Standard timestep } # Add controller-specific required parameters if controller_type == \u2018classical_smc\u2019: fallback_params[\u2018boundary_layer\u2019] = 0.02 elif controller_type == \u2018sta_smc\u2019: fallback_params[\u2018K1\u2019] = 4.0 fallback_params[\u2018K2\u2019] = 0.4 return controller_info\u2019config_class\u2019": [[274, "runnable-false-def-create-fallback-configuration-controller-type-gains-create-minimal-working-configuration-when-full-config-fails-fallback-params-gains-gains-max-force-150-0-safe-default-dt-0-001-standard-timestep-add-controller-specific-required-parameters-if-controller-type-classical-smc-fallback-params-boundary-layer-0-02-elif-controller-type-sta-smc-fallback-params-k1-4-0-fallback-params-k2-0-4-return-controller-info-config-class"]], "runnable: false def create_minimal_config(controller_type: str) -> Dict[str, Any]: \u201c\u201d\u201dCreate minimal viable configuration for controller type.\u201d\u201d\u201d base_config = { \u2018max_force\u2019: 150.0, \u2018dt\u2019: 0.001 } # Add controller-specific minimal parameters if controller_type == \u2018classical_smc\u2019: base_config[\u2018boundary_layer\u2019] = 0.02 elif controller_type == \u2018adaptive_smc\u2019: base_config.update({ \u2018leak_rate\u2019: 0.01, \u2018adapt_rate_limit\u2019: 10.0, \u2018K_min\u2019: 0.1, \u2018K_max\u2019: 100.0, \u2018K_init\u2019: 10.0, \u2018alpha\u2019: 0.5 }) elif controller_type == \u2018sta_smc\u2019: base_config.update({ \u2018power_exponent\u2019: 0.5, \u2018regularization\u2019: 1e-6, \u2018switch_method\u2019: \u2018tanh\u2019 }) return base_config": [[109, "runnable-false-def-create-minimal-config-controller-type-str-dict-str-any-create-minimal-viable-configuration-for-controller-type-base-config-max-force-150-0-dt-0-001-add-controller-specific-minimal-parameters-if-controller-type-classical-smc-base-config-boundary-layer-0-02-elif-controller-type-adaptive-smc-base-config-update-leak-rate-0-01-adapt-rate-limit-10-0-k-min-0-1-k-max-100-0-k-init-10-0-alpha-0-5-elif-controller-type-sta-smc-base-config-update-power-exponent-0-5-regularization-1e-6-switch-method-tanh-return-base-config"]], "runnable: false def create_pso_controller_factory(smc_type: SMCType, **kwargs) -> Callable: \u201c\u201d\u201dCreate a PSO-optimized controller factory function.\u201d\u201d\u201d def controller_factory(gains: Union[list, np.ndarray]) -> Any: return create_smc_for_pso(smc_type, gains, **kwargs) # Add PSO-required attributes spec = SMC_GAIN_SPECS[smc_type] controller_factory.n_gains = spec.n_gains controller_factory.controller_type = smc_type.value controller_factory.max_force = kwargs.get(\u2018max_force\u2019, 150.0) return controller_factory": [[80, "runnable-false-def-create-pso-controller-factory-smc-type-smctype-kwargs-callable-create-a-pso-optimized-controller-factory-function-def-controller-factory-gains-union-list-np-ndarray-any-return-create-smc-for-pso-smc-type-gains-kwargs-add-pso-required-attributes-spec-smc-gain-specs-smc-type-controller-factory-n-gains-spec-n-gains-controller-factory-controller-type-smc-type-value-controller-factory-max-force-kwargs-get-max-force-150-0-return-controller-factory"]], "runnable: false def create_pso_optimized_controller( controller_type: str, gains: GainsArray, plant_config: Any, pso_options: Optional[Dict[str, Any]] = None": [[101, "runnable-false-def-create-pso-optimized-controller-controller-type-str-gains-gainsarray-plant-config-any-pso-options-optional-dict-str-any-none"]], "runnable: false def create_smc_for_pso( smc_type: SMCType, gains: Union[list, np.ndarray], plant_config_or_model: Optional[Any] = None, **kwargs: Any": [[116, "runnable-false-def-create-smc-for-pso-smc-type-smctype-gains-union-list-np-ndarray-plant-config-or-model-optional-any-none-kwargs-any"]], "runnable: false def create_smc_for_pso(smc_type: SMCType, gains: List[float], max_force: float = 100.0, dt: float = 0.01) -> PSOControllerWrapper: \u201c\u201d\u201d PSO-optimized controller creation with simplified interface. This function provides the optimal interface for PSO fitness functions: - Single-line controller creation - Automatic parameter validation - Performance-optimized wrapper - Error handling for invalid gains Mathematical Foundation: Each controller type has specific gain requirements: - Classical: [k1, k2, \u03bb1, \u03bb2, K, kd] with \u03bb\u1d62 > 0, K > 0 - STA: [K1, K2, \u03bb1, \u03bb2, \u03b11, \u03b12] with K1 > K2 > 0 - Adaptive: [k1, k2, \u03bb1, \u03bb2, \u03b3] with 0.1 \u2264 \u03b3 \u2264 20.0 - Hybrid: [k1, k2, \u03bb1, \u03bb2] with surface gains > 0 PSO Integration Example: python def fitness_function(gains_array): controller = create_smc_for_pso(SMCType.CLASSICAL, gains_array) performance = evaluate_controller(controller, test_scenarios) return performance # Lower is better  Args: smc_type: SMC controller type gains: Controller gains array from PSO max_force: Maximum control force saturation dt: Control timestep Returns: PSOControllerWrapper with simplified control interface Raises: ValueError: If gains violate mathematical constraints \u201c\u201d\u201d # Create configuration with mathematical validation config = SMCConfig( gains=gains, max_force=max_force, dt=dt ) # Create controller through factory controller = SMCFactory.create_controller(smc_type, config) # Return PSO-optimized wrapper return PSOControllerWrapper(controller)": [[107, "runnable-false-def-create-smc-for-pso-smc-type-smctype-gains-list-float-max-force-float-100-0-dt-float-0-01-psocontrollerwrapper-pso-optimized-controller-creation-with-simplified-interface-this-function-provides-the-optimal-interface-for-pso-fitness-functions-single-line-controller-creation-automatic-parameter-validation-performance-optimized-wrapper-error-handling-for-invalid-gains-mathematical-foundation-each-controller-type-has-specific-gain-requirements-classical-k1-k2-1-2-k-kd-with-i-0-k-0-sta-k1-k2-1-2-1-2-with-k1-k2-0-adaptive-k1-k2-1-2-with-0-1-20-0-hybrid-k1-k2-1-2-with-surface-gains-0-pso-integration-example-python-def-fitness-function-gains-array-controller-create-smc-for-pso-smctype-classical-gains-array-performance-evaluate-controller-controller-test-scenarios-return-performance-lower-is-better-args-smc-type-smc-controller-type-gains-controller-gains-array-from-pso-max-force-maximum-control-force-saturation-dt-control-timestep-returns-psocontrollerwrapper-with-simplified-control-interface-raises-valueerror-if-gains-violate-mathematical-constraints-create-configuration-with-mathematical-validation-config-smcconfig-gains-gains-max-force-max-force-dt-dt-create-controller-through-factory-controller-smcfactory-create-controller-smc-type-config-return-pso-optimized-wrapper-return-psocontrollerwrapper-controller"]], "runnable: false def dead_zone( x: Union[float, np.ndarray], threshold: float": [[79, "runnable-false-def-dead-zone-x-union-float-np-ndarray-threshold-float"]], "runnable: false def extract_from_file(file_path: str) -> List[Dict]: try: source = Path(file_path).read_text(encoding=\u2019utf-8\u2019) tree = ast.parse(source) extractor = CodeClaimExtractor() extractor.visit(tree) return extractor.claims except SyntaxError as e: logger.warning(f\u201dSyntax error in {file_path}:{e.lineno} - skipping\u201d) return [] except UnicodeDecodeError: logger.error(f\u201dEncoding issue in {file_path} - skipping\u201d) return [] except Exception as e: logger.error(f\u201dUnexpected error in {file_path}: {e}\u201d) return []": [[297, "runnable-false-def-extract-from-file-file-path-str-list-dict-try-source-path-file-path-read-text-encoding-utf-8-tree-ast-parse-source-extractor-codeclaimextractor-extractor-visit-tree-return-extractor-claims-except-syntaxerror-as-e-logger-warning-f-syntax-error-in-file-path-e-lineno-skipping-return-except-unicodedecodeerror-logger-error-f-encoding-issue-in-file-path-skipping-return-except-exception-as-e-logger-error-f-unexpected-error-in-file-path-e-return"]], "runnable: false def fitness_function(gains_array): \u201c\u201d\u201dPSO fitness evaluation for classical SMC.\u201d\u201d\u201d # Create controller with candidate gains controller = ClassicalSMC( gains=gains_array, max_force=100.0, boundary_layer=0.01 ) # Run simulation result = run_simulation(controller, duration=5.0, dt=0.01) # Compute multi-objective fitness tracking_error = compute_ise(result.states) control_effort = compute_rms(result.controls) chattering = compute_chattering_index(result.controls) # Weighted cost return (0.5 * tracking_error + 0.3 * control_effort + 0.2 * chattering)": [[78, "runnable-false-def-fitness-function-gains-array-pso-fitness-evaluation-for-classical-smc-create-controller-with-candidate-gains-controller-classicalsmc-gains-gains-array-max-force-100-0-boundary-layer-0-01-run-simulation-result-run-simulation-controller-duration-5-0-dt-0-01-compute-multi-objective-fitness-tracking-error-compute-ise-result-states-control-effort-compute-rms-result-controls-chattering-compute-chattering-index-result-controls-weighted-cost-return-0-5-tracking-error-0-3-control-effort-0-2-chattering"]], "runnable: false def get_default_gains(controller_type: str) -> List[float]": [[49, "runnable-false-def-get-default-gains-controller-type-str-list-float"]], "runnable: false def get_gain_bounds_for_pso(smc_type: SMCType) -> List[Tuple[float, float]]: \u201c\u201d\u201d Get PSO optimization bounds based on control theory. Bounds are derived from: - Stability requirements (Lyapunov conditions) - Performance constraints (settling time, overshoot) - Physical limitations (actuator saturation) - Practical implementation limits Mathematical Derivation: Classical SMC Bounds: - Surface gains \u03bb\u1d62: [1.0, 50.0] based on desired bandwidth - Position gains k\u1d62: [0.1, 50.0] for reasonable pole placement - Switching gain K: [1.0, 200.0] for disturbance rejection - Damping gain kd: [0.0, 50.0] for chattering reduction Super-Twisting Bounds: - K1: [2.0, 100.0] with constraint K1 > K2 - K2: [1.0, 99.0] ensuring convergence condition - Surface gains: [1.0, 50.0] for stability Adaptive SMC Bounds: - Surface gains: [1.0, 50.0] for stability - Adaptation rate \u03b3: [0.1, 20.0] for bounded adaptation Returns: List of (lower_bound, upper_bound) tuples for each gain \u201c\u201d\u201d bounds_map = { SMCType.CLASSICAL: [ (0.1, 50.0), # k1: position gain pendulum 1 (0.1, 50.0), # k2: position gain pendulum 2 (1.0, 50.0), # \u03bb1: surface gain pendulum 1 (1.0, 50.0), # \u03bb2: surface gain pendulum 2 (1.0, 200.0), # K: switching gain (0.0, 50.0) # kd: damping gain ], SMCType.SUPER_TWISTING: [ (2.0, 100.0), # K1: primary twisting gain (K1 > K2) (1.0, 99.0), # K2: secondary twisting gain (1.0, 50.0), # \u03bb1: surface gain pendulum 1 (1.0, 50.0), # \u03bb2: surface gain pendulum 2 (1.0, 50.0), # \u03b11: higher-order surface gain 1 (1.0, 50.0) # \u03b12: higher-order surface gain 2 ], SMCType.ADAPTIVE: [ (0.1, 50.0), # k1: position gain pendulum 1 (0.1, 50.0), # k2: position gain pendulum 2 (1.0, 50.0), # \u03bb1: surface gain pendulum 1 (1.0, 50.0), # \u03bb2: surface gain pendulum 2 (0.1, 20.0) # \u03b3: adaptation rate ], SMCType.HYBRID: [ (1.0, 50.0), # k1: surface gain pendulum 1 (1.0, 50.0), # k2: surface gain pendulum 2 (1.0, 50.0), # \u03bb1: surface gain 1 (1.0, 50.0) # \u03bb2: surface gain 2 ] } return bounds_map[smc_type]": [[107, "runnable-false-def-get-gain-bounds-for-pso-smc-type-smctype-list-tuple-float-float-get-pso-optimization-bounds-based-on-control-theory-bounds-are-derived-from-stability-requirements-lyapunov-conditions-performance-constraints-settling-time-overshoot-physical-limitations-actuator-saturation-practical-implementation-limits-mathematical-derivation-classical-smc-bounds-surface-gains-i-1-0-50-0-based-on-desired-bandwidth-position-gains-ki-0-1-50-0-for-reasonable-pole-placement-switching-gain-k-1-0-200-0-for-disturbance-rejection-damping-gain-kd-0-0-50-0-for-chattering-reduction-super-twisting-bounds-k1-2-0-100-0-with-constraint-k1-k2-k2-1-0-99-0-ensuring-convergence-condition-surface-gains-1-0-50-0-for-stability-adaptive-smc-bounds-surface-gains-1-0-50-0-for-stability-adaptation-rate-0-1-20-0-for-bounded-adaptation-returns-list-of-lower-bound-upper-bound-tuples-for-each-gain-bounds-map-smctype-classical-0-1-50-0-k1-position-gain-pendulum-1-0-1-50-0-k2-position-gain-pendulum-2-1-0-50-0-1-surface-gain-pendulum-1-1-0-50-0-2-surface-gain-pendulum-2-1-0-200-0-k-switching-gain-0-0-50-0-kd-damping-gain-smctype-super-twisting-2-0-100-0-k1-primary-twisting-gain-k1-k2-1-0-99-0-k2-secondary-twisting-gain-1-0-50-0-1-surface-gain-pendulum-1-1-0-50-0-2-surface-gain-pendulum-2-1-0-50-0-1-higher-order-surface-gain-1-1-0-50-0-2-higher-order-surface-gain-2-smctype-adaptive-0-1-50-0-k1-position-gain-pendulum-1-0-1-50-0-k2-position-gain-pendulum-2-1-0-50-0-1-surface-gain-pendulum-1-1-0-50-0-2-surface-gain-pendulum-2-0-1-20-0-adaptation-rate-smctype-hybrid-1-0-50-0-k1-surface-gain-pendulum-1-1-0-50-0-k2-surface-gain-pendulum-2-1-0-50-0-1-surface-gain-1-1-0-50-0-2-surface-gain-2-return-bounds-map-smc-type"]], "runnable: false def get_gain_bounds_for_pso(smc_type: SMCType) -> Tuple[List[float], List[float]]: \u201c\u201d\u201dGet PSO gain bounds for a controller type.\u201d\u201d\u201d bounds_map = { SMCType.CLASSICAL: { \u2018lower\u2019: [1.0, 1.0, 1.0, 1.0, 5.0, 0.1], # [k1, k2, lam1, lam2, K, kd] \u2018upper\u2019: [30.0, 30.0, 20.0, 20.0, 50.0, 10.0] }, SMCType.ADAPTIVE: { \u2018lower\u2019: [2.0, 2.0, 1.0, 1.0, 0.5], # [k1, k2, lam1, lam2, gamma] \u2018upper\u2019: [40.0, 40.0, 25.0, 25.0, 10.0] }, # \u2026 additional controller types } return (bounds_map[smc_type][\u2018lower\u2019], bounds_map[smc_type][\u2018upper\u2019])": [[116, "runnable-false-def-get-gain-bounds-for-pso-smc-type-smctype-tuple-list-float-list-float-get-pso-gain-bounds-for-a-controller-type-bounds-map-smctype-classical-lower-1-0-1-0-1-0-1-0-5-0-0-1-k1-k2-lam1-lam2-k-kd-upper-30-0-30-0-20-0-20-0-50-0-10-0-smctype-adaptive-lower-2-0-2-0-1-0-1-0-0-5-k1-k2-lam1-lam2-gamma-upper-40-0-40-0-25-0-25-0-10-0-additional-controller-types-return-bounds-map-smc-type-lower-bounds-map-smc-type-upper"]], "runnable: false def get_optimized_pso_bounds(controller_type: str, plant_params: Dict[str, Any]) -> Tuple[List[float], List[float]]: \u201c\u201d\u201d Compute optimized PSO bounds based on plant parameters and control theory. Uses stability margins and performance requirements to derive tight bounds. \u201c\u201d\u201d if controller_type == \u2018classical_smc\u2019: # Classical SMC bounds based on stability analysis # Pole placement considerations for closed-loop stability max_damping = plant_params.get(\u2018max_damping_requirement\u2019, 0.7) settling_time = plant_params.get(\u2018settling_time_requirement\u2019, 2.0) # Derive bounds from desired closed-loop characteristics lambda_min = 4.0 / settling_time # Natural frequency requirement lambda_max = 20.0 # Upper bound to prevent excessive control effort k_min = lambda_min / 2.0 # Position gain lower bound k_max = lambda_max * 2.0 # Position gain upper bound K_min = estimate_min_switching_gain(plant_params) K_max = plant_params.get(\u2018max_force\u2019, 150.0) * 0.8 # Conservative upper bound bounds_lower = [k_min, k_min, lambda_min, lambda_min, K_min, 0.0] bounds_upper = [k_max, k_max, lambda_max, lambda_max, K_max, 10.0] elif controller_type == \u2018sta_smc\u2019: # Super-Twisting bounds with stability constraint K1 > K2 # Lyapunov-based design bounds L0 = estimate_lipschitz_constant(plant_params) K1_min = math.sqrt(L0) * 1.1 # Safety margin K1_max = math.sqrt(L0) * 5.0 # Conservative upper bound K2_min = L0 / (2 * math.sqrt(L0 - K1_min**2)) * 1.1 K2_max = K1_max * 0.8 # Ensure K1 > K2 constraint bounds_lower = [K1_min, K2_min, 2.0, 2.0, 5.0, 5.0] bounds_upper = [K1_max, K2_max, 30.0, 30.0, 20.0, 20.0] elif controller_type == \u2018adaptive_smc\u2019: # Adaptive SMC bounds based on adaptation rate limits # Stability-preserving adaptation rate bounds gamma_min = 0.1 # Minimum for reasonable adaptation speed gamma_max = estimate_max_adaptation_rate(plant_params) # Stability limit bounds_lower = [2.0, 2.0, 5.0, 5.0, gamma_min] bounds_upper = [40.0, 40.0, 25.0, 25.0, gamma_max] else: # hybrid_adaptive_sta_smc # Hybrid controller bounds (conservative surface parameters) bounds_lower = [2.0, 2.0, 5.0, 5.0] bounds_upper = [30.0, 30.0, 20.0, 20.0] return bounds_lower, bounds_upper def estimate_min_switching_gain(plant_params: Dict[str, Any]) -> float: \u201c\u201d\u201dEstimate minimum switching gain based on disturbance bounds.\u201d\u201d\u201d # Extract disturbance characteristics max_model_uncertainty = plant_params.get(\u2018model_uncertainty\u2019, 0.2) max_external_disturbance = plant_params.get(\u2018external_disturbance\u2019, 5.0) safety_margin = plant_params.get(\u2018safety_margin\u2019, 1.5) # Conservative estimate return (max_model_uncertainty + max_external_disturbance) * safety_margin def estimate_lipschitz_constant(plant_params: Dict[str, Any]) -> float: \u201c\u201d\u201dEstimate Lipschitz constant for STA design.\u201d\u201d\u201d # Based on system nonlinearity and uncertainty bounds max_nonlinearity = plant_params.get(\u2018max_nonlinearity\u2019, 10.0) uncertainty_bound = plant_params.get(\u2018uncertainty_bound\u2019, 5.0) return max_nonlinearity + uncertainty_bound def estimate_max_adaptation_rate(plant_params: Dict[str, Any]) -> float: \u201c\u201d\u201dEstimate maximum stable adaptation rate.\u201d\u201d\u201d # Based on parameter variation speed and system bandwidth system_bandwidth = plant_params.get(\u2018system_bandwidth\u2019, 10.0) # rad/s parameter_variation_rate = plant_params.get(\u2018parameter_variation_rate\u2019, 0.1) # Hz # Conservative bound: adaptation much slower than system dynamics return min(system_bandwidth / 10.0, 1.0 / parameter_variation_rate)": [[104, "runnable-false-def-get-optimized-pso-bounds-controller-type-str-plant-params-dict-str-any-tuple-list-float-list-float-compute-optimized-pso-bounds-based-on-plant-parameters-and-control-theory-uses-stability-margins-and-performance-requirements-to-derive-tight-bounds-if-controller-type-classical-smc-classical-smc-bounds-based-on-stability-analysis-pole-placement-considerations-for-closed-loop-stability-max-damping-plant-params-get-max-damping-requirement-0-7-settling-time-plant-params-get-settling-time-requirement-2-0-derive-bounds-from-desired-closed-loop-characteristics-lambda-min-4-0-settling-time-natural-frequency-requirement-lambda-max-20-0-upper-bound-to-prevent-excessive-control-effort-k-min-lambda-min-2-0-position-gain-lower-bound-k-max-lambda-max-2-0-position-gain-upper-bound-k-min-estimate-min-switching-gain-plant-params-k-max-plant-params-get-max-force-150-0-0-8-conservative-upper-bound-bounds-lower-k-min-k-min-lambda-min-lambda-min-k-min-0-0-bounds-upper-k-max-k-max-lambda-max-lambda-max-k-max-10-0-elif-controller-type-sta-smc-super-twisting-bounds-with-stability-constraint-k1-k2-lyapunov-based-design-bounds-l0-estimate-lipschitz-constant-plant-params-k1-min-math-sqrt-l0-1-1-safety-margin-k1-max-math-sqrt-l0-5-0-conservative-upper-bound-k2-min-l0-2-math-sqrt-l0-k1-min-2-1-1-k2-max-k1-max-0-8-ensure-k1-k2-constraint-bounds-lower-k1-min-k2-min-2-0-2-0-5-0-5-0-bounds-upper-k1-max-k2-max-30-0-30-0-20-0-20-0-elif-controller-type-adaptive-smc-adaptive-smc-bounds-based-on-adaptation-rate-limits-stability-preserving-adaptation-rate-bounds-gamma-min-0-1-minimum-for-reasonable-adaptation-speed-gamma-max-estimate-max-adaptation-rate-plant-params-stability-limit-bounds-lower-2-0-2-0-5-0-5-0-gamma-min-bounds-upper-40-0-40-0-25-0-25-0-gamma-max-else-hybrid-adaptive-sta-smc-hybrid-controller-bounds-conservative-surface-parameters-bounds-lower-2-0-2-0-5-0-5-0-bounds-upper-30-0-30-0-20-0-20-0-return-bounds-lower-bounds-upper-def-estimate-min-switching-gain-plant-params-dict-str-any-float-estimate-minimum-switching-gain-based-on-disturbance-bounds-extract-disturbance-characteristics-max-model-uncertainty-plant-params-get-model-uncertainty-0-2-max-external-disturbance-plant-params-get-external-disturbance-5-0-safety-margin-plant-params-get-safety-margin-1-5-conservative-estimate-return-max-model-uncertainty-max-external-disturbance-safety-margin-def-estimate-lipschitz-constant-plant-params-dict-str-any-float-estimate-lipschitz-constant-for-sta-design-based-on-system-nonlinearity-and-uncertainty-bounds-max-nonlinearity-plant-params-get-max-nonlinearity-10-0-uncertainty-bound-plant-params-get-uncertainty-bound-5-0-return-max-nonlinearity-uncertainty-bound-def-estimate-max-adaptation-rate-plant-params-dict-str-any-float-estimate-maximum-stable-adaptation-rate-based-on-parameter-variation-speed-and-system-bandwidth-system-bandwidth-plant-params-get-system-bandwidth-10-0-rad-s-parameter-variation-rate-plant-params-get-parameter-variation-rate-0-1-hz-conservative-bound-adaptation-much-slower-than-system-dynamics-return-min-system-bandwidth-10-0-1-0-parameter-variation-rate"]], "runnable: false def init(self, gains, \u2026): # Check count if len(gains) != expected_count: raise ValueError(f\u201dExpected {expected_count} gains, got {len(gains)}\u201d) # Check bounds if any(g < 0 for g in gains[:4]): # Surface gains must be positive raise ValueError(\u201cSurface gains must be non-negative\u201d) # Check constraints (e.g., exponents in (0,1)) if not (0 < alpha < 1): raise ValueError(f\u201dExponent \u03b1 must be in (0,1), got {alpha}\u201d)": [[168, "runnable-false-def-init-self-gains-check-count-if-len-gains-expected-count-raise-valueerror-f-expected-expected-count-gains-got-len-gains-check-bounds-if-any-g-0-for-g-in-gains-4-surface-gains-must-be-positive-raise-valueerror-surface-gains-must-be-non-negative-check-constraints-e-g-exponents-in-0-1-if-not-0-alpha-1-raise-valueerror-f-exponent-must-be-in-0-1-got-alpha"]], "runnable: false def integrate_adaptive_smc( gains: List[float], plant_config: Any, adaptation_params: Optional[Dict[str, float]] = None": [[101, "runnable-false-def-integrate-adaptive-smc-gains-list-float-plant-config-any-adaptation-params-optional-dict-str-float-none"]], "runnable: false def integrate_classical_smc( gains: List[float], plant_config: Any, optimization_bounds: Optional[Tuple[List[float], List[float]]] = None": [[101, "runnable-false-def-integrate-classical-smc-gains-list-float-plant-config-any-optimization-bounds-optional-tuple-list-float-list-float-none"]], "runnable: false def integrate_super_twisting_smc( gains: List[float], plant_config: Any, sta_params: Optional[Dict[str, float]] = None": [[101, "runnable-false-def-integrate-super-twisting-smc-gains-list-float-plant-config-any-sta-params-optional-dict-str-float-none"]], "runnable: false def interactive_migration_wizard() -> None: \u201c\u201d\u201d Interactive step-by-step migration wizard for complex configurations. \u201c\u201d\u201d print(\u201c=== SMC Controller Configuration Migration Wizard ===\\n\u201d) # Step 1: Configuration file location config_path = input(\u201cEnter path to configuration file: \u201c).strip() if not os.path.exists(config_path): print(f\u201dError: File not found - {config_path}\u201d) return # Step 2: Backup preferences create_backup = input(\u201cCreate backup before migration? (Y/n): \u201c).strip().lower() create_backup = create_backup != \u2018n\u2019 # Step 3: Migration analysis print(\u201c\\nAnalyzing configuration\u2026\u201d) migrator = ConfigurationMigrationUtility() # Load and analyze configuration try: with open(config_path, \u2018r\u2019) as f: if config_path.endswith((\u2018.yml\u2019, \u2018.yaml\u2019)): import yaml config_data = yaml.safe_load(f) else: import json config_data = json.load(f) # Analyze deprecations warner = ControllerDeprecationWarner() analysis_results = {} if \u2018controllers\u2019 in config_data: for controller_type, controller_config in config_data[\u2018controllers\u2019].items(): if isinstance(controller_config, dict): _, warnings = warner.check_deprecated_parameters(controller_type, controller_config) analysis_results[controller_type] = warnings # Display analysis total_warnings = sum(len(warnings) for warnings in analysis_results.values()) if total_warnings == 0: print(\u201d\u2713 No deprecated parameters found. Configuration is up to date.\u201d) return print(f\u201dFound {total_warnings} deprecated parameters:\u201d) for controller_type, warnings in analysis_results.items(): if warnings: print(f\u201d\\n {controller_type}:\u201d) for warning in warnings: print(f\u201d - {warning.old_parameter}: {warning.migration_guide}\u201d) # Step 4: Confirm migration proceed = input(f\u201d\\nProceed with migration? (Y/n): \u201c).strip().lower() if proceed == \u2018n\u2019: print(\u201cMigration cancelled.\u201d) return # Step 5: Perform migration print(\u201c\\nPerforming migration\u2026\u201d) result = migrator.migrate_configuration_file( config_file_path=config_path, create_backup=create_backup ) if result.success: print(\u201d\u2713 Migration completed successfully!\u201d) if result.backup_file: print(f\u201d Backup created: {result.backup_file}\u201d) # Step 6: Validation validate = input(\u201c\\nValidate migrated configuration? (Y/n): \u201c).strip().lower() if validate != \u2018n\u2019: validation_result = migrator.validate_migrated_configuration( result.migration_summary.get(\u2018migrated_config\u2019, {}) ) if validation_result.success: print(\u201d\u2713 Validation passed - configuration is ready to use.\u201d) else: print(\u201d\u26a0 Validation issues found:\u201d) for issue in validation_result.issues: print(f\u201d - {issue}\u201d) else: print(f\u201d\u2717 Migration failed: {result.error}\u201d) except Exception as e: print(f\u201dError during migration analysis: {e}\u201d) # Run the wizard": [[108, "runnable-false-def-interactive-migration-wizard-none-interactive-step-by-step-migration-wizard-for-complex-configurations-print-smc-controller-configuration-migration-wizard-n-step-1-configuration-file-location-config-path-input-enter-path-to-configuration-file-strip-if-not-os-path-exists-config-path-print-f-error-file-not-found-config-path-return-step-2-backup-preferences-create-backup-input-create-backup-before-migration-y-n-strip-lower-create-backup-create-backup-n-step-3-migration-analysis-print-nanalyzing-configuration-migrator-configurationmigrationutility-load-and-analyze-configuration-try-with-open-config-path-r-as-f-if-config-path-endswith-yml-yaml-import-yaml-config-data-yaml-safe-load-f-else-import-json-config-data-json-load-f-analyze-deprecations-warner-controllerdeprecationwarner-analysis-results-if-controllers-in-config-data-for-controller-type-controller-config-in-config-data-controllers-items-if-isinstance-controller-config-dict-warnings-warner-check-deprecated-parameters-controller-type-controller-config-analysis-results-controller-type-warnings-display-analysis-total-warnings-sum-len-warnings-for-warnings-in-analysis-results-values-if-total-warnings-0-print-no-deprecated-parameters-found-configuration-is-up-to-date-return-print-f-found-total-warnings-deprecated-parameters-for-controller-type-warnings-in-analysis-results-items-if-warnings-print-f-n-controller-type-for-warning-in-warnings-print-f-warning-old-parameter-warning-migration-guide-step-4-confirm-migration-proceed-input-f-nproceed-with-migration-y-n-strip-lower-if-proceed-n-print-migration-cancelled-return-step-5-perform-migration-print-nperforming-migration-result-migrator-migrate-configuration-file-config-file-path-config-path-create-backup-create-backup-if-result-success-print-migration-completed-successfully-if-result-backup-file-print-f-backup-created-result-backup-file-step-6-validation-validate-input-nvalidate-migrated-configuration-y-n-strip-lower-if-validate-n-validation-result-migrator-validate-migrated-configuration-result-migration-summary-get-migrated-config-if-validation-result-success-print-validation-passed-configuration-is-ready-to-use-else-print-validation-issues-found-for-issue-in-validation-result-issues-print-f-issue-else-print-f-migration-failed-result-error-except-exception-as-e-print-f-error-during-migration-analysis-e-run-the-wizard"]], "runnable: false def list_available_controllers() -> List[str]": [[49, "runnable-false-def-list-available-controllers-list-str"]], "runnable: false def list_available_controllers() -> list": [[51, "runnable-false-def-list-available-controllers-list"]], "runnable: false def log_iteration_statistics(self, iteration: int, fitness: np.ndarray) -> None: \u201c\u201d\u201dLog statistics for current iteration. Args: iteration: Current iteration number fitness: Fitness values for all particles \u201c\u201d\u201d # Best fitness best_fitness = np.min(fitness) self.fitness_history.append(best_fitness) # Average and worst fitness avg_fitness = np.mean(fitness) worst_fitness = np.max(fitness[fitness < np.inf]) # Diversity diversity = self.compute_diversity() self.diversity_history.append(diversity) # Improvement rate if len(self.fitness_history) > 1: improvement = self.fitness_history[-2] - self.fitness_history[-1] improvement_pct = 100 * improvement / self.fitness_history[-2] else: improvement_pct = 0.0 # Log to console/file self.logger.info( f\u201dIteration {iteration:3d}: \u201c f\u201dBest={best_fitness:8.4f}, \u201c f\u201dAvg={avg_fitness:8.4f}, \u201c f\u201dDiversity={diversity:.4f}, \u201c f\u201dImprovement={improvement_pct:+.2f}%\u201d )": [[215, "runnable-false-def-log-iteration-statistics-self-iteration-int-fitness-np-ndarray-none-log-statistics-for-current-iteration-args-iteration-current-iteration-number-fitness-fitness-values-for-all-particles-best-fitness-best-fitness-np-min-fitness-self-fitness-history-append-best-fitness-average-and-worst-fitness-avg-fitness-np-mean-fitness-worst-fitness-np-max-fitness-fitness-np-inf-diversity-diversity-self-compute-diversity-self-diversity-history-append-diversity-improvement-rate-if-len-self-fitness-history-1-improvement-self-fitness-history-2-self-fitness-history-1-improvement-pct-100-improvement-self-fitness-history-2-else-improvement-pct-0-0-log-to-console-file-self-logger-info-f-iteration-iteration-3d-f-best-best-fitness-8-4f-f-avg-avg-fitness-8-4f-f-diversity-diversity-4f-f-improvement-improvement-pct-2f"]], "runnable: false def migrate_adaptive_smc_manually(old_config: Dict[str, Any]) -> Dict[str, Any]: \u201c\u201d\u201d Manual migration procedure for Adaptive SMC configurations. Changes: 1. Combine gains and adaptation_gain into 5-element gains array 2. Rename \u2018boundary_layer_thickness\u2019 to \u2018boundary_layer\u2019 3. Split \u2018estimate_bounds\u2019 into \u2018K_min\u2019 and \u2018K_max\u2019 4. Rename \u2018adaptation_law\u2019 to \u2018alpha\u2019 \u201c\u201d\u201d new_config = {} # Step 1: Handle gains array with gamma (adaptation rate) gains = old_config.get(\u2018gains\u2019, [12.0, 10.0, 6.0, 5.0]) # If gains has only 4 elements, add adaptation_gain as 5th element if len(gains) == 4: adaptation_gain = old_config.get(\u2018adaptation_gain\u2019, 2.5) gains = gains + [adaptation_gain] elif len(gains) < 4: # Fill missing gains with defaults default_gains = [12.0, 10.0, 6.0, 5.0, 2.5] gains = gains + default_gains[len(gains):] new_config[\u2018gains\u2019] = gains[:5] # Ensure exactly 5 gains # Step 2: Handle renamed parameters renames = { \u2018boundary_layer_thickness\u2019: \u2018boundary_layer\u2019, \u2018adaptation_law\u2019: \u2018alpha\u2019 } for old_name, new_name in renames.items(): if old_name in old_config: new_config[new_name] = old_config[old_name] print(f\u201dMigrated: {old_name} -> {new_name}\u201d) # Step 3: Handle split parameters if \u2018estimate_bounds\u2019 in old_config: bounds = old_config[\u2018estimate_bounds\u2019] if isinstance(bounds, (list, tuple)) and len(bounds) == 2: new_config[\u2018K_min\u2019] = bounds[0] new_config[\u2018K_max\u2019] = bounds[1] print(f\u201dSplit: estimate_bounds -> K_min, K_max\u201d) else: print(f\u201dWarning: Invalid estimate_bounds format, using defaults\u201d) new_config[\u2018K_min\u2019] = 0.1 new_config[\u2018K_max\u2019] = 100.0 # Step 4: Copy valid parameters valid_params = [ \u2018max_force\u2019, \u2018dt\u2019, \u2018boundary_layer\u2019, \u2018leak_rate\u2019, \u2018adapt_rate_limit\u2019, \u2018K_min\u2019, \u2018K_max\u2019, \u2018K_init\u2019, \u2018alpha\u2019, \u2018dead_zone\u2019, \u2018smooth_switch\u2019, \u2018dynamics_model\u2019 ] for param in valid_params: if param in old_config: new_config[param] = old_config[param] # Step 5: Ensure required parameters have defaults new_config.setdefault(\u2018max_force\u2019, 150.0) new_config.setdefault(\u2018dt\u2019, 0.001) new_config.setdefault(\u2018boundary_layer\u2019, 0.01) new_config.setdefault(\u2018leak_rate\u2019, 0.01) new_config.setdefault(\u2018adapt_rate_limit\u2019, 10.0) new_config.setdefault(\u2018K_min\u2019, 0.1) new_config.setdefault(\u2018K_max\u2019, 100.0) new_config.setdefault(\u2018K_init\u2019, 10.0) new_config.setdefault(\u2018alpha\u2019, 0.5) return new_config # Example usage": [[108, "runnable-false-def-migrate-adaptive-smc-manually-old-config-dict-str-any-dict-str-any-manual-migration-procedure-for-adaptive-smc-configurations-changes-1-combine-gains-and-adaptation-gain-into-5-element-gains-array-2-rename-boundary-layer-thickness-to-boundary-layer-3-split-estimate-bounds-into-k-min-and-k-max-4-rename-adaptation-law-to-alpha-new-config-step-1-handle-gains-array-with-gamma-adaptation-rate-gains-old-config-get-gains-12-0-10-0-6-0-5-0-if-gains-has-only-4-elements-add-adaptation-gain-as-5th-element-if-len-gains-4-adaptation-gain-old-config-get-adaptation-gain-2-5-gains-gains-adaptation-gain-elif-len-gains-4-fill-missing-gains-with-defaults-default-gains-12-0-10-0-6-0-5-0-2-5-gains-gains-default-gains-len-gains-new-config-gains-gains-5-ensure-exactly-5-gains-step-2-handle-renamed-parameters-renames-boundary-layer-thickness-boundary-layer-adaptation-law-alpha-for-old-name-new-name-in-renames-items-if-old-name-in-old-config-new-config-new-name-old-config-old-name-print-f-migrated-old-name-new-name-step-3-handle-split-parameters-if-estimate-bounds-in-old-config-bounds-old-config-estimate-bounds-if-isinstance-bounds-list-tuple-and-len-bounds-2-new-config-k-min-bounds-0-new-config-k-max-bounds-1-print-f-split-estimate-bounds-k-min-k-max-else-print-f-warning-invalid-estimate-bounds-format-using-defaults-new-config-k-min-0-1-new-config-k-max-100-0-step-4-copy-valid-parameters-valid-params-max-force-dt-boundary-layer-leak-rate-adapt-rate-limit-k-min-k-max-k-init-alpha-dead-zone-smooth-switch-dynamics-model-for-param-in-valid-params-if-param-in-old-config-new-config-param-old-config-param-step-5-ensure-required-parameters-have-defaults-new-config-setdefault-max-force-150-0-new-config-setdefault-dt-0-001-new-config-setdefault-boundary-layer-0-01-new-config-setdefault-leak-rate-0-01-new-config-setdefault-adapt-rate-limit-10-0-new-config-setdefault-k-min-0-1-new-config-setdefault-k-max-100-0-new-config-setdefault-k-init-10-0-new-config-setdefault-alpha-0-5-return-new-config-example-usage"]], "runnable: false def migrate_classical_smc_manually(old_config: Dict[str, Any]) -> Dict[str, Any]: \u201c\u201d\u201d Manual migration procedure for Classical SMC configurations. Changes: 1. Combine gains and K_switching into 6-element gains array 2. Remove invalid \u2018gamma\u2019 parameter 3. Rename \u2018switch_function\u2019 to \u2018switch_method\u2019 4. Ensure boundary_layer parameter is present \u201c\u201d\u201d new_config = {} # Step 1: Handle gains array gains = old_config.get(\u2018gains\u2019, [8.0, 6.0, 4.0, 3.0, 15.0]) # If gains has only 5 elements, add K_switching as 6th element if len(gains) == 5: K_switching = old_config.get(\u2018K_switching\u2019, 2.0) gains = gains + [K_switching] elif len(gains) < 5: # Fill missing gains with defaults default_gains = [8.0, 6.0, 4.0, 3.0, 15.0, 2.0] gains = gains + default_gains[len(gains):] new_config[\u2018gains\u2019] = gains[:6] # Ensure exactly 6 gains # Step 2: Handle deprecated parameters deprecated_params = [\u2018gamma\u2019, \u2018adaptation_rate\u2019, \u2018K_switching\u2019] for param in deprecated_params: if param in old_config: if param == \u2018gamma\u2019: print(f\u201dWarning: Removed invalid \u2018gamma\u2019 parameter for Classical SMC\u201d) elif param == \u2018adaptation_rate\u2019: print(f\u201dWarning: Removed \u2018adaptation_rate\u2019 - not valid for Classical SMC\u201d) # K_switching already handled in gains array # Step 3: Handle renamed parameters if \u2018switch_function\u2019 in old_config: new_config[\u2018switch_method\u2019] = old_config[\u2018switch_function\u2019] print(f\u201dMigrated: switch_function -> switch_method\u201d) # Step 4: Copy valid parameters valid_params = [ \u2018max_force\u2019, \u2018dt\u2019, \u2018boundary_layer\u2019, \u2018switch_method\u2019, \u2018damping_gain\u2019, \u2018dynamics_model\u2019 ] for param in valid_params: if param in old_config: new_config[param] = old_config[param] # Step 5: Ensure required parameters have defaults new_config.setdefault(\u2018max_force\u2019, 150.0) new_config.setdefault(\u2018dt\u2019, 0.001) new_config.setdefault(\u2018boundary_layer\u2019, 0.02) return new_config # Example usage": [[108, "runnable-false-def-migrate-classical-smc-manually-old-config-dict-str-any-dict-str-any-manual-migration-procedure-for-classical-smc-configurations-changes-1-combine-gains-and-k-switching-into-6-element-gains-array-2-remove-invalid-gamma-parameter-3-rename-switch-function-to-switch-method-4-ensure-boundary-layer-parameter-is-present-new-config-step-1-handle-gains-array-gains-old-config-get-gains-8-0-6-0-4-0-3-0-15-0-if-gains-has-only-5-elements-add-k-switching-as-6th-element-if-len-gains-5-k-switching-old-config-get-k-switching-2-0-gains-gains-k-switching-elif-len-gains-5-fill-missing-gains-with-defaults-default-gains-8-0-6-0-4-0-3-0-15-0-2-0-gains-gains-default-gains-len-gains-new-config-gains-gains-6-ensure-exactly-6-gains-step-2-handle-deprecated-parameters-deprecated-params-gamma-adaptation-rate-k-switching-for-param-in-deprecated-params-if-param-in-old-config-if-param-gamma-print-f-warning-removed-invalid-gamma-parameter-for-classical-smc-elif-param-adaptation-rate-print-f-warning-removed-adaptation-rate-not-valid-for-classical-smc-k-switching-already-handled-in-gains-array-step-3-handle-renamed-parameters-if-switch-function-in-old-config-new-config-switch-method-old-config-switch-function-print-f-migrated-switch-function-switch-method-step-4-copy-valid-parameters-valid-params-max-force-dt-boundary-layer-switch-method-damping-gain-dynamics-model-for-param-in-valid-params-if-param-in-old-config-new-config-param-old-config-param-step-5-ensure-required-parameters-have-defaults-new-config-setdefault-max-force-150-0-new-config-setdefault-dt-0-001-new-config-setdefault-boundary-layer-0-02-return-new-config-example-usage"]], "runnable: false def migrate_hybrid_smc_manually(old_config: Dict[str, Any]) -> Dict[str, Any]: \u201c\u201d\u201d Manual migration procedure for Hybrid SMC configurations. Changes: 1. Rename \u2018mode\u2019 to \u2018hybrid_mode\u2019 2. Replace \u2018sub_controller_gains\u2019 with full sub-configurations 3. Update \u2018switch_threshold\u2019 to \u2018switching_criteria\u2019 \u201c\u201d\u201d new_config = {} # Step 1: Handle surface gains (4 elements for hybrid controller) gains = old_config.get(\u2018gains\u2019, [18.0, 12.0, 10.0, 8.0]) new_config[\u2018gains\u2019] = gains[:4] # Ensure exactly 4 surface gains # Step 2: Handle mode parameter if \u2018mode\u2019 in old_config: new_config[\u2018hybrid_mode\u2019] = old_config[\u2018mode\u2019] print(f\u201dMigrated: mode -> hybrid_mode\u201d) else: new_config[\u2018hybrid_mode\u2019] = \u2018CLASSICAL_ADAPTIVE\u2019 # Default # Step 3: Handle sub-controller configurations if \u2018sub_controller_gains\u2019 in old_config: sub_gains = old_config[\u2018sub_controller_gains\u2019] # Create proper sub-configurations if isinstance(sub_gains, dict): classical_gains = sub_gains.get(\u2018classical\u2019, [20.0, 15.0, 12.0, 8.0, 35.0, 5.0]) adaptive_gains = sub_gains.get(\u2018adaptive\u2019, [25.0, 18.0, 15.0, 10.0, 4.0]) else: # Use defaults if format is unrecognized classical_gains = [20.0, 15.0, 12.0, 8.0, 35.0, 5.0] adaptive_gains = [25.0, 18.0, 15.0, 10.0, 4.0] # Create full sub-configurations new_config[\u2018classical_config\u2019] = { \u2018gains\u2019: classical_gains, \u2018max_force\u2019: 150.0, \u2018dt\u2019: 0.001, \u2018boundary_layer\u2019: 0.02 } new_config[\u2018adaptive_config\u2019] = { \u2018gains\u2019: adaptive_gains, \u2018max_force\u2019: 150.0, \u2018dt\u2019: 0.001, \u2018leak_rate\u2019: 0.01, \u2018adapt_rate_limit\u2019: 10.0, \u2018K_min\u2019: 0.1, \u2018K_max\u2019: 100.0, \u2018K_init\u2019: 10.0, \u2018alpha\u2019: 0.5 } print(\u201cConverted: sub_controller_gains -> full sub-configurations\u201d) # Step 4: Handle switching criteria if \u2018switch_threshold\u2019 in old_config: threshold = old_config[\u2018switch_threshold\u2019] new_config[\u2018switching_criteria\u2019] = { \u2018error_threshold\u2019: threshold, \u2018time_threshold\u2019: 2.0 # Default } print(\u201cConverted: switch_threshold -> switching_criteria\u201d) # Step 5: Copy valid parameters valid_params = [ \u2018dt\u2019, \u2018max_force\u2019, \u2018k1_init\u2019, \u2018k2_init\u2019, \u2018gamma1\u2019, \u2018gamma2\u2019, \u2018dynamics_model\u2019, \u2018hybrid_mode\u2019, \u2018classical_config\u2019, \u2018adaptive_config\u2019 ] for param in valid_params: if param in old_config: new_config[param] = old_config[param] # Step 6: Ensure required parameters have defaults new_config.setdefault(\u2018dt\u2019, 0.001) new_config.setdefault(\u2018max_force\u2019, 150.0) new_config.setdefault(\u2018k1_init\u2019, 5.0) new_config.setdefault(\u2018k2_init\u2019, 3.0) new_config.setdefault(\u2018gamma1\u2019, 0.5) new_config.setdefault(\u2018gamma2\u2019, 0.3) return new_config # Example usage": [[108, "runnable-false-def-migrate-hybrid-smc-manually-old-config-dict-str-any-dict-str-any-manual-migration-procedure-for-hybrid-smc-configurations-changes-1-rename-mode-to-hybrid-mode-2-replace-sub-controller-gains-with-full-sub-configurations-3-update-switch-threshold-to-switching-criteria-new-config-step-1-handle-surface-gains-4-elements-for-hybrid-controller-gains-old-config-get-gains-18-0-12-0-10-0-8-0-new-config-gains-gains-4-ensure-exactly-4-surface-gains-step-2-handle-mode-parameter-if-mode-in-old-config-new-config-hybrid-mode-old-config-mode-print-f-migrated-mode-hybrid-mode-else-new-config-hybrid-mode-classical-adaptive-default-step-3-handle-sub-controller-configurations-if-sub-controller-gains-in-old-config-sub-gains-old-config-sub-controller-gains-create-proper-sub-configurations-if-isinstance-sub-gains-dict-classical-gains-sub-gains-get-classical-20-0-15-0-12-0-8-0-35-0-5-0-adaptive-gains-sub-gains-get-adaptive-25-0-18-0-15-0-10-0-4-0-else-use-defaults-if-format-is-unrecognized-classical-gains-20-0-15-0-12-0-8-0-35-0-5-0-adaptive-gains-25-0-18-0-15-0-10-0-4-0-create-full-sub-configurations-new-config-classical-config-gains-classical-gains-max-force-150-0-dt-0-001-boundary-layer-0-02-new-config-adaptive-config-gains-adaptive-gains-max-force-150-0-dt-0-001-leak-rate-0-01-adapt-rate-limit-10-0-k-min-0-1-k-max-100-0-k-init-10-0-alpha-0-5-print-converted-sub-controller-gains-full-sub-configurations-step-4-handle-switching-criteria-if-switch-threshold-in-old-config-threshold-old-config-switch-threshold-new-config-switching-criteria-error-threshold-threshold-time-threshold-2-0-default-print-converted-switch-threshold-switching-criteria-step-5-copy-valid-parameters-valid-params-dt-max-force-k1-init-k2-init-gamma1-gamma2-dynamics-model-hybrid-mode-classical-config-adaptive-config-for-param-in-valid-params-if-param-in-old-config-new-config-param-old-config-param-step-6-ensure-required-parameters-have-defaults-new-config-setdefault-dt-0-001-new-config-setdefault-max-force-150-0-new-config-setdefault-k1-init-5-0-new-config-setdefault-k2-init-3-0-new-config-setdefault-gamma1-0-5-new-config-setdefault-gamma2-0-3-return-new-config-example-usage"]], "runnable: false def migrate_hybrid_smc_parameters_mathematical(old_params: Dict[str, Any]) -> Dict[str, Any]: \u201c\u201d\u201d Mathematically sound migration for Hybrid SMC parameters. Mathematical Validation: 1. Preserve mode switching stability 2. Maintain unified surface design 3. Ensure sub-controller compatibility \u201c\u201d\u201d new_params = {} # Extract surface gains (shared across all modes) surface_gains = old_params.get(\u2018gains\u2019, [18.0, 12.0, 10.0, 8.0]) if len(surface_gains) != 4: raise ValueError(\u201cHybrid SMC requires exactly 4 surface gains [c\u2081, \u03bb\u2081, c\u2082, \u03bb\u2082]\u201d) c1, lam1, c2, lam2 = surface_gains # Validate surface stability if any(g <= 0 for g in [c1, lam1, c2, lam2]): raise ValueError(\u201cAll surface coefficients must be positive\u201d) # Check surface eigenvalue placement for stability eigen1 = -lam1 / c1 eigen2 = -lam2 / c2 if eigen1 >= 0 or eigen2 >= 0: print(f\u201dWarning: Surface eigenvalues [{eigen1:.3f}, {eigen2:.3f}] may indicate instability\u201d) new_params[\u2018gains\u2019] = surface_gains # Handle mode parameter migration mode_mappings = { \u2018mode\u2019: \u2018hybrid_mode\u2019, \u2018switch_threshold\u2019: \u2018switching_criteria\u2019, \u2018classical_params\u2019: \u2018classical_config\u2019, \u2018adaptive_params\u2019: \u2018adaptive_config\u2019 } for old_param, new_param in mode_mappings.items(): if old_param in old_params: if old_param == \u2018switch_threshold\u2019: # Convert scalar threshold to criteria dict threshold = old_params[old_param] new_params[\u2018switching_criteria\u2019] = { \u2018error_threshold\u2019: threshold, \u2018time_threshold\u2019: 2.0, # Default time threshold \u2018performance_threshold\u2019: 0.1 # Performance-based switching } else: new_params[new_param] = old_params[old_param] # Handle sub-controller gain migration if \u2018sub_controller_gains\u2019 in old_params: sub_gains = old_params[\u2018sub_controller_gains\u2019] if isinstance(sub_gains, dict): # Create proper sub-controller configurations classical_gains = sub_gains.get(\u2018classical\u2019, [20.0, 15.0, 12.0, 8.0, 35.0, 5.0]) adaptive_gains = sub_gains.get(\u2018adaptive\u2019, [25.0, 18.0, 15.0, 10.0, 4.0]) # Validate sub-controller gains if len(classical_gains) != 6: raise ValueError(\u201cClassical sub-controller requires 6 gains\u201d) if len(adaptive_gains) != 5: raise ValueError(\u201cAdaptive sub-controller requires 5 gains\u201d) # Create complete sub-configurations with surface coupling new_params[\u2018classical_config\u2019] = { \u2018gains\u2019: classical_gains, \u2018max_force\u2019: old_params.get(\u2018max_force\u2019, 150.0), \u2018boundary_layer\u2019: 0.02, \u2018dt\u2019: old_params.get(\u2018dt\u2019, 0.001), \u2018surface_coupling\u2019: True # Ensure surface consistency } new_params[\u2018adaptive_config\u2019] = { \u2018gains\u2019: adaptive_gains, \u2018max_force\u2019: old_params.get(\u2018max_force\u2019, 150.0), \u2018leak_rate\u2019: 0.01, \u2018adapt_rate_limit\u2019: 10.0, \u2018K_min\u2019: 0.1, \u2018K_max\u2019: 100.0, \u2018dt\u2019: old_params.get(\u2018dt\u2019, 0.001), \u2018surface_coupling\u2019: True # Ensure surface consistency } # Set hybrid-specific parameters with mathematical justification new_params.setdefault(\u2018hybrid_mode\u2019, \u2018CLASSICAL_ADAPTIVE\u2019) # Conservative default new_params.setdefault(\u2018dt\u2019, 0.001) # Fast sampling for mode switching new_params.setdefault(\u2018max_force\u2019, 150.0) # Shared actuator limit # Advanced hybrid parameters new_params.setdefault(\u2018mode_hysteresis\u2019, 0.1) # Prevent chattering in mode switching new_params.setdefault(\u2018transition_smoothing\u2019, True) # Smooth mode transitions new_params.setdefault(\u2018surface_consistency_check\u2019, True) # Validate surface compatibility # Validate hybrid mode switching stability if \u2018switching_criteria\u2019 in new_params: criteria = new_params[\u2018switching_criteria\u2019] error_thresh = criteria.get(\u2018error_threshold\u2019, 0.1) time_thresh = criteria.get(\u2018time_threshold\u2019, 2.0) # Check switching frequency to prevent chattering min_dwell_time = 0.1 # Minimum time in each mode if time_thresh < min_dwell_time: print(f\u201dWarning: Short time threshold {time_thresh}s may cause mode chattering\u201d) return new_params # Mathematical validation example": [[99, "runnable-false-def-migrate-hybrid-smc-parameters-mathematical-old-params-dict-str-any-dict-str-any-mathematically-sound-migration-for-hybrid-smc-parameters-mathematical-validation-1-preserve-mode-switching-stability-2-maintain-unified-surface-design-3-ensure-sub-controller-compatibility-new-params-extract-surface-gains-shared-across-all-modes-surface-gains-old-params-get-gains-18-0-12-0-10-0-8-0-if-len-surface-gains-4-raise-valueerror-hybrid-smc-requires-exactly-4-surface-gains-c1-1-c2-2-c1-lam1-c2-lam2-surface-gains-validate-surface-stability-if-any-g-0-for-g-in-c1-lam1-c2-lam2-raise-valueerror-all-surface-coefficients-must-be-positive-check-surface-eigenvalue-placement-for-stability-eigen1-lam1-c1-eigen2-lam2-c2-if-eigen1-0-or-eigen2-0-print-f-warning-surface-eigenvalues-eigen1-3f-eigen2-3f-may-indicate-instability-new-params-gains-surface-gains-handle-mode-parameter-migration-mode-mappings-mode-hybrid-mode-switch-threshold-switching-criteria-classical-params-classical-config-adaptive-params-adaptive-config-for-old-param-new-param-in-mode-mappings-items-if-old-param-in-old-params-if-old-param-switch-threshold-convert-scalar-threshold-to-criteria-dict-threshold-old-params-old-param-new-params-switching-criteria-error-threshold-threshold-time-threshold-2-0-default-time-threshold-performance-threshold-0-1-performance-based-switching-else-new-params-new-param-old-params-old-param-handle-sub-controller-gain-migration-if-sub-controller-gains-in-old-params-sub-gains-old-params-sub-controller-gains-if-isinstance-sub-gains-dict-create-proper-sub-controller-configurations-classical-gains-sub-gains-get-classical-20-0-15-0-12-0-8-0-35-0-5-0-adaptive-gains-sub-gains-get-adaptive-25-0-18-0-15-0-10-0-4-0-validate-sub-controller-gains-if-len-classical-gains-6-raise-valueerror-classical-sub-controller-requires-6-gains-if-len-adaptive-gains-5-raise-valueerror-adaptive-sub-controller-requires-5-gains-create-complete-sub-configurations-with-surface-coupling-new-params-classical-config-gains-classical-gains-max-force-old-params-get-max-force-150-0-boundary-layer-0-02-dt-old-params-get-dt-0-001-surface-coupling-true-ensure-surface-consistency-new-params-adaptive-config-gains-adaptive-gains-max-force-old-params-get-max-force-150-0-leak-rate-0-01-adapt-rate-limit-10-0-k-min-0-1-k-max-100-0-dt-old-params-get-dt-0-001-surface-coupling-true-ensure-surface-consistency-set-hybrid-specific-parameters-with-mathematical-justification-new-params-setdefault-hybrid-mode-classical-adaptive-conservative-default-new-params-setdefault-dt-0-001-fast-sampling-for-mode-switching-new-params-setdefault-max-force-150-0-shared-actuator-limit-advanced-hybrid-parameters-new-params-setdefault-mode-hysteresis-0-1-prevent-chattering-in-mode-switching-new-params-setdefault-transition-smoothing-true-smooth-mode-transitions-new-params-setdefault-surface-consistency-check-true-validate-surface-compatibility-validate-hybrid-mode-switching-stability-if-switching-criteria-in-new-params-criteria-new-params-switching-criteria-error-thresh-criteria-get-error-threshold-0-1-time-thresh-criteria-get-time-threshold-2-0-check-switching-frequency-to-prevent-chattering-min-dwell-time-0-1-minimum-time-in-each-mode-if-time-thresh-min-dwell-time-print-f-warning-short-time-threshold-time-thresh-s-may-cause-mode-chattering-return-new-params-mathematical-validation-example"]], "runnable: false def migrate_pso_configuration(legacy_config: dict) -> PSOConfig: \u201c\u201d\u201d Migrate legacy PSO configuration to current schema with validation. Migration Rules: 1. Remove deprecated fields with warnings 2. Update bounds for Issue #2 resolution compatibility 3. Add new enhanced features with sensible defaults 4. Validate mathematical consistency of migrated parameters \u201c\u201d\u201d warnings = [] # Remove deprecated fields deprecated_fields = [\u2018n_processes\u2019, \u2018hyper_trials\u2019, \u2018hyper_search\u2019, \u2018study_timeout\u2019] for field in deprecated_fields: if field in legacy_config: warnings.append(f\u201dDeprecated field \u2018{field}\u2019 removed during migration\u201d) del legacy_config[field] # Update bounds for Issue #2 compatibility if \u2018bounds\u2019 in legacy_config: old_bounds = legacy_config[\u2018bounds\u2019] if \u2018max\u2019 in old_bounds and len(old_bounds[\u2018max\u2019]) >= 6: # Check for problematic lambda bounds from Issue #2 if old_bounds[\u2018max\u2019][4] > 10.0 or old_bounds[\u2018max\u2019][5] > 10.0: warnings.append(\u201cUpdated lambda bounds for Issue #2 overshoot resolution\u201d) old_bounds[\u2018max\u2019][4] = min(old_bounds[\u2018max\u2019][4], 10.0) old_bounds[\u2018max\u2019][5] = min(old_bounds[\u2018max\u2019][5], 10.0) # Add enhanced features if missing if \u2018w_schedule\u2019 not in legacy_config: legacy_config[\u2018w_schedule\u2019] = [0.9, 0.4] warnings.append(\u201cAdded inertia weight scheduling for improved convergence\u201d) if \u2018velocity_clamp\u2019 not in legacy_config: legacy_config[\u2018velocity_clamp\u2019] = [0.1, 0.2] warnings.append(\u201cAdded velocity clamping for stability\u201d) # Validate migrated configuration migrated_config = PSOConfig(**legacy_config) validation_result = PSO_ConfigValidator.validate_hyperparameters(migrated_config) if not validation_result.is_valid: raise ConfigurationError(f\u201dMigration failed validation: {validation_result.errors}\u201d) return migrated_config, warnings": [[251, "runnable-false-def-migrate-pso-configuration-legacy-config-dict-psoconfig-migrate-legacy-pso-configuration-to-current-schema-with-validation-migration-rules-1-remove-deprecated-fields-with-warnings-2-update-bounds-for-issue-2-resolution-compatibility-3-add-new-enhanced-features-with-sensible-defaults-4-validate-mathematical-consistency-of-migrated-parameters-warnings-remove-deprecated-fields-deprecated-fields-n-processes-hyper-trials-hyper-search-study-timeout-for-field-in-deprecated-fields-if-field-in-legacy-config-warnings-append-f-deprecated-field-field-removed-during-migration-del-legacy-config-field-update-bounds-for-issue-2-compatibility-if-bounds-in-legacy-config-old-bounds-legacy-config-bounds-if-max-in-old-bounds-and-len-old-bounds-max-6-check-for-problematic-lambda-bounds-from-issue-2-if-old-bounds-max-4-10-0-or-old-bounds-max-5-10-0-warnings-append-updated-lambda-bounds-for-issue-2-overshoot-resolution-old-bounds-max-4-min-old-bounds-max-4-10-0-old-bounds-max-5-min-old-bounds-max-5-10-0-add-enhanced-features-if-missing-if-w-schedule-not-in-legacy-config-legacy-config-w-schedule-0-9-0-4-warnings-append-added-inertia-weight-scheduling-for-improved-convergence-if-velocity-clamp-not-in-legacy-config-legacy-config-velocity-clamp-0-1-0-2-warnings-append-added-velocity-clamping-for-stability-validate-migrated-configuration-migrated-config-psoconfig-legacy-config-validation-result-pso-configvalidator-validate-hyperparameters-migrated-config-if-not-validation-result-is-valid-raise-configurationerror-f-migration-failed-validation-validation-result-errors-return-migrated-config-warnings"]], "runnable: false def migrate_sta_smc_manually(old_config: Dict[str, Any]) -> Dict[str, Any]: \u201c\u201d\u201d Manual migration procedure for Super-Twisting SMC configurations. Changes: 1. Combine K1, K2, and other gains into 6-element gains array 2. Rename \u2018alpha_power\u2019 to \u2018power_exponent\u2019 3. Rename \u2018switching_function_type\u2019 to \u2018switch_method\u2019 \u201c\u201d\u201d new_config = {} # Step 1: Handle gains array with K1, K2 integration gains = old_config.get(\u2018gains\u2019, []) # If K1 and K2 are separate parameters, integrate them if \u2018K1\u2019 in old_config and \u2018K2\u2019 in old_config: K1 = old_config[\u2018K1\u2019] K2 = old_config[\u2018K2\u2019] # If gains array exists, assume it contains [k1, k2, lam1, lam2] if len(gains) >= 4: gains = [K1, K2] + gains[:4] else: # Create full gains array default_surface_gains = [25.0, 18.0, 12.0, 8.0] surface_gains = gains + default_surface_gains[len(gains):] gains = [K1, K2] + surface_gains[:4] print(f\u201dIntegrated: K1={K1}, K2={K2} into gains array\u201d) elif len(gains) < 6: # Fill missing gains with defaults default_gains = [35.0, 20.0, 25.0, 18.0, 12.0, 8.0] gains = gains + default_gains[len(gains):] new_config[\u2018gains\u2019] = gains[:6] # Ensure exactly 6 gains # Step 2: Handle renamed parameters renames = { \u2018alpha_power\u2019: \u2018power_exponent\u2019, \u2018switching_function_type\u2019: \u2018switch_method\u2019 } for old_name, new_name in renames.items(): if old_name in old_config: new_config[new_name] = old_config[old_name] print(f\u201dMigrated: {old_name} -> {new_name}\u201d) # Step 3: Copy valid parameters valid_params = [ \u2018max_force\u2019, \u2018dt\u2019, \u2018power_exponent\u2019, \u2018regularization\u2019, \u2018boundary_layer\u2019, \u2018switch_method\u2019, \u2018damping_gain\u2019, \u2018dynamics_model\u2019 ] for param in valid_params: if param in old_config: new_config[param] = old_config[param] # Step 4: Ensure required parameters have defaults new_config.setdefault(\u2018max_force\u2019, 150.0) new_config.setdefault(\u2018dt\u2019, 0.001) new_config.setdefault(\u2018power_exponent\u2019, 0.5) new_config.setdefault(\u2018regularization\u2019, 1e-6) new_config.setdefault(\u2018boundary_layer\u2019, 0.01) new_config.setdefault(\u2018switch_method\u2019, \u2018tanh\u2019) return new_config # Example usage": [[108, "runnable-false-def-migrate-sta-smc-manually-old-config-dict-str-any-dict-str-any-manual-migration-procedure-for-super-twisting-smc-configurations-changes-1-combine-k1-k2-and-other-gains-into-6-element-gains-array-2-rename-alpha-power-to-power-exponent-3-rename-switching-function-type-to-switch-method-new-config-step-1-handle-gains-array-with-k1-k2-integration-gains-old-config-get-gains-if-k1-and-k2-are-separate-parameters-integrate-them-if-k1-in-old-config-and-k2-in-old-config-k1-old-config-k1-k2-old-config-k2-if-gains-array-exists-assume-it-contains-k1-k2-lam1-lam2-if-len-gains-4-gains-k1-k2-gains-4-else-create-full-gains-array-default-surface-gains-25-0-18-0-12-0-8-0-surface-gains-gains-default-surface-gains-len-gains-gains-k1-k2-surface-gains-4-print-f-integrated-k1-k1-k2-k2-into-gains-array-elif-len-gains-6-fill-missing-gains-with-defaults-default-gains-35-0-20-0-25-0-18-0-12-0-8-0-gains-gains-default-gains-len-gains-new-config-gains-gains-6-ensure-exactly-6-gains-step-2-handle-renamed-parameters-renames-alpha-power-power-exponent-switching-function-type-switch-method-for-old-name-new-name-in-renames-items-if-old-name-in-old-config-new-config-new-name-old-config-old-name-print-f-migrated-old-name-new-name-step-3-copy-valid-parameters-valid-params-max-force-dt-power-exponent-regularization-boundary-layer-switch-method-damping-gain-dynamics-model-for-param-in-valid-params-if-param-in-old-config-new-config-param-old-config-param-step-4-ensure-required-parameters-have-defaults-new-config-setdefault-max-force-150-0-new-config-setdefault-dt-0-001-new-config-setdefault-power-exponent-0-5-new-config-setdefault-regularization-1e-6-new-config-setdefault-boundary-layer-0-01-new-config-setdefault-switch-method-tanh-return-new-config-example-usage"]], "runnable: false def monitor_classical_smc(controller, state, result): \u201c\u201d\u201dMonitor classical SMC performance indicators.\u201d\u201d\u201d sigma = result.history[\u2018sigma\u2019][-1] u_eq = result.history[\u2018u_eq\u2019][-1] u_robust = result.history[\u2018u_robust\u2019][-1] eps_eff = result.history[\u2018epsilon_eff\u2019][-1] # Performance indicators surface_distance = abs(sigma) eq_ratio = abs(u_eq) / controller.max_force if controller.max_force > 0 else 0 robust_ratio = abs(u_robust) / controller.max_force if controller.max_force > 0 else 0 # Warning conditions if surface_distance > 1.0: print(f\u201dWARNING: Large sliding surface: {surface_distance:.3f}\u201d) if eq_ratio > 0.9: print(f\u201dWARNING: Equivalent control near saturation: {eq_ratio:.3f}\u201d) if abs(result.control) >= controller.max_force * 0.99: print(f\u201dWARNING: Control saturated: {result.control:.2f} N\u201d) return { \u2018surface_distance\u2019: surface_distance, \u2018eq_ratio\u2019: eq_ratio, \u2018robust_ratio\u2019: robust_ratio, \u2018boundary_layer\u2019: eps_eff }": [[78, "runnable-false-def-monitor-classical-smc-controller-state-result-monitor-classical-smc-performance-indicators-sigma-result-history-sigma-1-u-eq-result-history-u-eq-1-u-robust-result-history-u-robust-1-eps-eff-result-history-epsilon-eff-1-performance-indicators-surface-distance-abs-sigma-eq-ratio-abs-u-eq-controller-max-force-if-controller-max-force-0-else-0-robust-ratio-abs-u-robust-controller-max-force-if-controller-max-force-0-else-0-warning-conditions-if-surface-distance-1-0-print-f-warning-large-sliding-surface-surface-distance-3f-if-eq-ratio-0-9-print-f-warning-equivalent-control-near-saturation-eq-ratio-3f-if-abs-result-control-controller-max-force-0-99-print-f-warning-control-saturated-result-control-2f-n-return-surface-distance-surface-distance-eq-ratio-eq-ratio-robust-ratio-robust-ratio-boundary-layer-eps-eff"]], "runnable: false def multi_objective_pso_optimization( controller_types: List[str], simulation_config: Any, objectives: Dict[str, float], # {\u2018ise\u2019: 0.4, \u2018overshoot\u2019: 0.3, \u2018energy\u2019: 0.3} pso_config: Dict[str, Any]": [[104, "runnable-false-def-multi-objective-pso-optimization-controller-types-list-str-simulation-config-any-objectives-dict-str-float-ise-0-4-overshoot-0-3-energy-0-3-pso-config-dict-str-any"]], "runnable: false def optimize_bounds_for_controller( self, controller_type: SMCType, strategy: BoundsOptimizationStrategy = BoundsOptimizationStrategy.HYBRID, max_optimization_time: float = 300.0": [[58, "runnable-false-def-optimize-bounds-for-controller-self-controller-type-smctype-strategy-boundsoptimizationstrategy-boundsoptimizationstrategy-hybrid-max-optimization-time-float-300-0"]], "runnable: false def optimize_controller_comprehensive(): \u201c\u201d\u201dComplete PSO optimization workflow example.\u201d\u201d\u201d # Step 1: Configuration pso_config = PSOFactoryConfig( controller_type=ControllerType.STA_SMC, population_size=25, max_iterations=100, convergence_threshold=1e-5, fitness_timeout=15.0 ) # Step 2: Create PSO factory pso_factory = EnhancedPSOFactory(pso_config) # Step 3: Run optimization optimization_result = pso_factory.optimize_controller() if optimization_result[\u2018success\u2019]: # Step 4: Extract results best_gains = optimization_result[\u2018best_gains\u2019] best_cost = optimization_result[\u2018best_cost\u2019] optimized_controller = optimization_result[\u2018controller\u2019] # Step 5: Performance analysis perf_analysis = optimization_result[\u2018performance_analysis\u2019] validation_results = optimization_result[\u2018validation_results\u2019] print(f\u201dOptimization successful!\u201d) print(f\u201dBest gains: {best_gains}\u201d) print(f\u201dBest cost: {best_cost:.6f}\u201d) print(f\u201dConverged: {perf_analysis[\u2018converged\u2019]}\u201d) return optimized_controller, optimization_result else: print(f\u201dOptimization failed: {optimization_result[\u2018error\u2019]}\u201d) return None, optimization_result": [[275, "runnable-false-def-optimize-controller-comprehensive-complete-pso-optimization-workflow-example-step-1-configuration-pso-config-psofactoryconfig-controller-type-controllertype-sta-smc-population-size-25-max-iterations-100-convergence-threshold-1e-5-fitness-timeout-15-0-step-2-create-pso-factory-pso-factory-enhancedpsofactory-pso-config-step-3-run-optimization-optimization-result-pso-factory-optimize-controller-if-optimization-result-success-step-4-extract-results-best-gains-optimization-result-best-gains-best-cost-optimization-result-best-cost-optimized-controller-optimization-result-controller-step-5-performance-analysis-perf-analysis-optimization-result-performance-analysis-validation-results-optimization-result-validation-results-print-f-optimization-successful-print-f-best-gains-best-gains-print-f-best-cost-best-cost-6f-print-f-converged-perf-analysis-converged-return-optimized-controller-optimization-result-else-print-f-optimization-failed-optimization-result-error-return-none-optimization-result"]], "runnable: false def production_readiness_check(): \u201c\u201d\u201dproduction readiness validation.\u201d\u201d\u201d import time import threading import numpy as np from src.controllers.factory import ( create_controller, list_available_controllers, get_default_gains, create_pso_controller_factory, SMCType ) print(\u201c=== Production Readiness Assessment ===\\n\u201d) results = { \u2018basic_functionality\u2019: False, \u2018thread_safety\u2019: False, \u2018performance\u2019: False, \u2018pso_integration\u2019: False, \u2018error_handling\u2019: False, \u2018memory_stability\u2019: False } # 1. Basic Functionality Test print(\u201c1. Testing Basic Functionality\u2026\u201d) try: controllers = list_available_controllers() if len(controllers) >= 4: # Expect at least 4 controller types for controller_type in controllers: gains = get_default_gains(controller_type) controller = create_controller(controller_type, gains=gains) # Test control computation test_state = np.array([0.1, 0.1, 0.0, 0.0, 0.0, 0.0]) result = controller.compute_control(test_state, (), {}) control_value = result.u if hasattr(result, \u2018u\u2019) else result if not np.isfinite(control_value): raise ValueError(f\u201dInvalid control output: {control_value}\u201d) results[\u2018basic_functionality\u2019] = True print(\u201d \u2705 Basic functionality test PASSED\u201d) else: print(f\u201d \u274c Insufficient controllers available: {len(controllers)}\u201d) except Exception as e: print(f\u201d \u274c Basic functionality test FAILED: {e}\u201d) # 2. Thread Safety Test print(\u201c\\n2. Testing Thread Safety\u2026\u201d) try: def concurrent_creation(): return create_controller(\u2018classical_smc\u2019, gains=[20]*6) # Test concurrent controller creation start_time = time.time() threads = [] for _ in range(10): thread = threading.Thread(target=concurrent_creation) threads.append(thread) thread.start() for thread in threads: thread.join(timeout=5) if thread.is_alive(): raise TimeoutError(\u201cThread did not complete in time\u201d) execution_time = time.time() - start_time if execution_time < 10: # Should complete within 10 seconds results[\u2018thread_safety\u2019] = True print(f\u201d \u2705 Thread safety test PASSED ({execution_time:.2f}s)\u201d) else: print(f\u201d \u274c Thread safety test SLOW ({execution_time:.2f}s)\u201d) except Exception as e: print(f\u201d \u274c Thread safety test FAILED: {e}\u201d) # 3. Performance Test print(\u201c\\n3. Testing Performance\u2026\u201d) try: # Measure controller creation time creation_times = [] for _ in range(100): start = time.perf_counter() create_controller(\u2018classical_smc\u2019, gains=[20]*6) end = time.perf_counter() creation_times.append((end - start) * 1000) # Convert to ms avg_time = sum(creation_times) / len(creation_times) max_time = max(creation_times) if avg_time < 5.0 and max_time < 50.0: # < 5ms average, < 50ms max results[\u2018performance\u2019] = True print(f\u201d \u2705 Performance test PASSED (avg: {avg_time:.2f}ms, max: {max_time:.2f}ms)\u201d) else: print(f\u201d \u274c Performance test FAILED (avg: {avg_time:.2f}ms, max: {max_time:.2f}ms)\u201d) except Exception as e: print(f\u201d \u274c Performance test FAILED: {e}\u201d) # 4. PSO Integration Test print(\u201c\\n4. Testing PSO Integration\u2026\u201d) try: factory_func = create_pso_controller_factory(SMCType.CLASSICAL) # Check required attributes if hasattr(factory_func, \u2018n_gains\u2019) and hasattr(factory_func, \u2018controller_type\u2019): test_gains = [20, 15, 12, 8, 35, 5] controller = factory_func(test_gains) if controller is not None: results[\u2018pso_integration\u2019] = True print(\u201d \u2705 PSO integration test PASSED\u201d) else: print(\u201d \u274c PSO factory returned None\u201d) else: print(\u201d \u274c PSO factory missing required attributes\u201d) except Exception as e: print(f\u201d \u274c PSO integration test FAILED: {e}\u201d) # 5. Error Handling Test print(\u201c\\n5. Testing Error Handling\u2026\u201d) try: error_cases = [ (\u2018invalid_type\u2019, [10]*6), (\u2018classical_smc\u2019, [10]*3), # Wrong gain count (\u2018classical_smc\u2019, [-10]*6), # Negative gains ] handled_errors = 0 for controller_type, gains in error_cases: try: create_controller(controller_type, gains=gains) print(f\u201d \u26a0\ufe0f Expected error not raised for {controller_type}\u201d) except (ValueError, TypeError) as e: handled_errors += 1 except Exception as e: print(f\u201d \u26a0\ufe0f Unexpected error type for {controller_type}: {type(e)}\u201d) if handled_errors >= len(error_cases) - 1: # Allow one unexpected case results[\u2018error_handling\u2019] = True print(f\u201d \u2705 Error handling test PASSED ({handled_errors}/{len(error_cases)} cases)\u201d) else: print(f\u201d \u274c Error handling test FAILED ({handled_errors}/{len(error_cases)} cases)\u201d) except Exception as e: print(f\u201d \u274c Error handling test FAILED: {e}\u201d) # 6. Memory Stability Test print(\u201c\\n6. Testing Memory Stability\u2026\u201d) try: import psutil import os process = psutil.Process(os.getpid()) initial_memory = process.memory_info().rss / 1024 / 1024 # MB # Create and destroy many controllers for _ in range(1000): controller = create_controller(\u2018classical_smc\u2019, gains=[20]*6) del controller final_memory = process.memory_info().rss / 1024 / 1024 memory_increase = final_memory - initial_memory if memory_increase < 10: # Less than 10MB increase results[\u2018memory_stability\u2019] = True print(f\u201d \u2705 Memory stability test PASSED ({memory_increase:.2f}MB increase)\u201d) else: print(f\u201d \u274c Memory stability test FAILED ({memory_increase:.2f}MB increase)\u201d) except ImportError: print(\u201d \u26a0\ufe0f psutil not available, skipping memory test\u201d) results[\u2018memory_stability\u2019] = True # Assume pass if can\u2019t test except Exception as e: print(f\u201d \u274c Memory stability test FAILED: {e}\u201d) # Summary passed_tests = sum(results.values()) total_tests = len(results) success_rate = (passed_tests / total_tests) * 100 print(f\u201d\\n=== Production Readiness Summary ===\u201d) print(f\u201dTests passed: {passed_tests}/{total_tests}\u201d) print(f\u201dSuccess rate: {success_rate:.1f}%\u201d) if success_rate >= 95: print(\u201d\u2705 READY FOR PRODUCTION DEPLOYMENT\u201d) return True elif success_rate >= 80: print(\u201d\u26a0\ufe0f DEPLOYMENT WITH MONITORING RECOMMENDED\u201d) return False else: print(\u201d\u274c NOT READY FOR PRODUCTION\u201d) return False # Run production readiness check": [[111, "runnable-false-def-production-readiness-check-production-readiness-validation-import-time-import-threading-import-numpy-as-np-from-src-controllers-factory-import-create-controller-list-available-controllers-get-default-gains-create-pso-controller-factory-smctype-print-production-readiness-assessment-n-results-basic-functionality-false-thread-safety-false-performance-false-pso-integration-false-error-handling-false-memory-stability-false-1-basic-functionality-test-print-1-testing-basic-functionality-try-controllers-list-available-controllers-if-len-controllers-4-expect-at-least-4-controller-types-for-controller-type-in-controllers-gains-get-default-gains-controller-type-controller-create-controller-controller-type-gains-gains-test-control-computation-test-state-np-array-0-1-0-1-0-0-0-0-0-0-0-0-result-controller-compute-control-test-state-control-value-result-u-if-hasattr-result-u-else-result-if-not-np-isfinite-control-value-raise-valueerror-f-invalid-control-output-control-value-results-basic-functionality-true-print-basic-functionality-test-passed-else-print-f-insufficient-controllers-available-len-controllers-except-exception-as-e-print-f-basic-functionality-test-failed-e-2-thread-safety-test-print-n2-testing-thread-safety-try-def-concurrent-creation-return-create-controller-classical-smc-gains-20-6-test-concurrent-controller-creation-start-time-time-time-threads-for-in-range-10-thread-threading-thread-target-concurrent-creation-threads-append-thread-thread-start-for-thread-in-threads-thread-join-timeout-5-if-thread-is-alive-raise-timeouterror-thread-did-not-complete-in-time-execution-time-time-time-start-time-if-execution-time-10-should-complete-within-10-seconds-results-thread-safety-true-print-f-thread-safety-test-passed-execution-time-2f-s-else-print-f-thread-safety-test-slow-execution-time-2f-s-except-exception-as-e-print-f-thread-safety-test-failed-e-3-performance-test-print-n3-testing-performance-try-measure-controller-creation-time-creation-times-for-in-range-100-start-time-perf-counter-create-controller-classical-smc-gains-20-6-end-time-perf-counter-creation-times-append-end-start-1000-convert-to-ms-avg-time-sum-creation-times-len-creation-times-max-time-max-creation-times-if-avg-time-5-0-and-max-time-50-0-5ms-average-50ms-max-results-performance-true-print-f-performance-test-passed-avg-avg-time-2f-ms-max-max-time-2f-ms-else-print-f-performance-test-failed-avg-avg-time-2f-ms-max-max-time-2f-ms-except-exception-as-e-print-f-performance-test-failed-e-4-pso-integration-test-print-n4-testing-pso-integration-try-factory-func-create-pso-controller-factory-smctype-classical-check-required-attributes-if-hasattr-factory-func-n-gains-and-hasattr-factory-func-controller-type-test-gains-20-15-12-8-35-5-controller-factory-func-test-gains-if-controller-is-not-none-results-pso-integration-true-print-pso-integration-test-passed-else-print-pso-factory-returned-none-else-print-pso-factory-missing-required-attributes-except-exception-as-e-print-f-pso-integration-test-failed-e-5-error-handling-test-print-n5-testing-error-handling-try-error-cases-invalid-type-10-6-classical-smc-10-3-wrong-gain-count-classical-smc-10-6-negative-gains-handled-errors-0-for-controller-type-gains-in-error-cases-try-create-controller-controller-type-gains-gains-print-f-expected-error-not-raised-for-controller-type-except-valueerror-typeerror-as-e-handled-errors-1-except-exception-as-e-print-f-unexpected-error-type-for-controller-type-type-e-if-handled-errors-len-error-cases-1-allow-one-unexpected-case-results-error-handling-true-print-f-error-handling-test-passed-handled-errors-len-error-cases-cases-else-print-f-error-handling-test-failed-handled-errors-len-error-cases-cases-except-exception-as-e-print-f-error-handling-test-failed-e-6-memory-stability-test-print-n6-testing-memory-stability-try-import-psutil-import-os-process-psutil-process-os-getpid-initial-memory-process-memory-info-rss-1024-1024-mb-create-and-destroy-many-controllers-for-in-range-1000-controller-create-controller-classical-smc-gains-20-6-del-controller-final-memory-process-memory-info-rss-1024-1024-memory-increase-final-memory-initial-memory-if-memory-increase-10-less-than-10mb-increase-results-memory-stability-true-print-f-memory-stability-test-passed-memory-increase-2f-mb-increase-else-print-f-memory-stability-test-failed-memory-increase-2f-mb-increase-except-importerror-print-psutil-not-available-skipping-memory-test-results-memory-stability-true-assume-pass-if-can-t-test-except-exception-as-e-print-f-memory-stability-test-failed-e-summary-passed-tests-sum-results-values-total-tests-len-results-success-rate-passed-tests-total-tests-100-print-f-n-production-readiness-summary-print-f-tests-passed-passed-tests-total-tests-print-f-success-rate-success-rate-1f-if-success-rate-95-print-ready-for-production-deployment-return-true-elif-success-rate-80-print-deployment-with-monitoring-recommended-return-false-else-print-not-ready-for-production-return-false-run-production-readiness-check"]], "runnable: false def pso_optimization_data_flow(): \u201c\u201d\u201d Data flow through PSO optimization process. 1. Parameter Bounds \u2192 Swarm Initialization 2. Swarm Positions \u2192 Controller Instances 3. Controller Performance \u2192 Fitness Evaluation 4. Fitness Values \u2192 Swarm Updates 5. Convergence Check \u2192 Result Extraction \u201c\u201d\u201d # Step 1: Swarm Initialization parameter_bounds = get_controller_bounds(controller_type) swarm_positions = initialize_swarm(n_particles, parameter_bounds) # Step 2: Parallel Fitness Evaluation fitness_results = [] for particle_position in swarm_positions: # Create controller with candidate parameters candidate_controller = create_controller(controller_type, gains=particle_position) # Evaluate performance simulation_result = run_simulation(candidate_controller) fitness_score = compute_fitness(simulation_result) fitness_results.append(fitness_score) # Step 3: Swarm Update updated_swarm = update_swarm_velocities_and_positions( swarm_positions, fitness_results, global_best, personal_bests ) # Step 4: Convergence Analysis convergence_status = analyze_convergence(fitness_results, convergence_criteria) # Step 5: Result Packaging optimization_result = OptimizationResult( best_gains=global_best.position, best_cost=global_best.fitness, convergence_iterations=current_iteration, convergence_status=convergence_status ) return optimization_result": [[63, "runnable-false-def-pso-optimization-data-flow-data-flow-through-pso-optimization-process-1-parameter-bounds-swarm-initialization-2-swarm-positions-controller-instances-3-controller-performance-fitness-evaluation-4-fitness-values-swarm-updates-5-convergence-check-result-extraction-step-1-swarm-initialization-parameter-bounds-get-controller-bounds-controller-type-swarm-positions-initialize-swarm-n-particles-parameter-bounds-step-2-parallel-fitness-evaluation-fitness-results-for-particle-position-in-swarm-positions-create-controller-with-candidate-parameters-candidate-controller-create-controller-controller-type-gains-particle-position-evaluate-performance-simulation-result-run-simulation-candidate-controller-fitness-score-compute-fitness-simulation-result-fitness-results-append-fitness-score-step-3-swarm-update-updated-swarm-update-swarm-velocities-and-positions-swarm-positions-fitness-results-global-best-personal-bests-step-4-convergence-analysis-convergence-status-analyze-convergence-fitness-results-convergence-criteria-step-5-result-packaging-optimization-result-optimizationresult-best-gains-global-best-position-best-cost-global-best-fitness-convergence-iterations-current-iteration-convergence-status-convergence-status-return-optimization-result"]], "runnable: false def real_time_optimization_integration(): \u201c\u201d\u201dDemonstrate real-time optimization with live feedback.\u201d\u201d\u201d import time import threading from queue import Queue class OptimizationMonitor: \u201c\u201d\u201dReal-time optimization monitoring.\u201d\u201d\u201d def init(self): self.progress_queue = Queue() self.current_iteration = 0 self.current_best_cost = float(\u2018inf\u2019) self.is_running = False def update_progress(self, iteration, best_cost): \u201c\u201d\u201dUpdate optimization progress.\u201d\u201d\u201d self.current_iteration = iteration self.current_best_cost = best_cost self.progress_queue.put((iteration, best_cost)) def start_monitoring(self): \u201c\u201d\u201dStart monitoring thread.\u201d\u201d\u201d self.is_running = True monitor_thread = threading.Thread(target=self._monitor_loop) monitor_thread.daemon = True monitor_thread.start() def stop_monitoring(self): \u201c\u201d\u201dStop monitoring.\u201d\u201d\u201d self.is_running = False def _monitor_loop(self): \u201c\u201d\u201dMonitoring loop.\u201d\u201d\u201d while self.is_running: try: if not self.progress_queue.empty(): iteration, cost = self.progress_queue.get(timeout=0.1) print(f\u201d\\rIteration {iteration}: Best cost = {cost:.6f}\u201d, end=\u2019\u2019, flush=True) time.sleep(0.1) except: continue # Create monitor monitor = OptimizationMonitor() # Configure PSO with monitoring integration pso_config = PSOFactoryConfig( controller_type=ControllerType.CLASSICAL_SMC, population_size=20, max_iterations=50, use_robust_evaluation=True ) print(\u201cStarting real-time PSO optimization\u2026\u201d) # Start monitoring monitor.start_monitoring() try: # Create factory and optimize pso_factory = EnhancedPSOFactory(pso_config) # Note: In a real implementation, you would integrate the monitor # with the PSO algorithm\u2019s iteration callback result = pso_factory.optimize_controller() print(\u201c\\n\u201d) # New line after progress updates if result[\u2018success\u2019]: print(f\u201dOptimization completed successfully!\u201d) print(f\u201dFinal cost: {result[\u2018best_cost\u2019]:.6f}\u201d) print(f\u201dOptimized gains: {result[\u2018best_gains\u2019]}\u201d) # Real-time validation optimized_controller = result[\u2018controller\u2019] print(\u201c\\nPerforming real-time validation\u2026\u201d) test_states = [ [0.0, 0.1, 0.05, 0.0, 0.0, 0.0], [0.0, 0.2, 0.1, 0.0, 0.0, 0.0], [0.0, 0.3, 0.15, 0.0, 0.0, 0.0] ] for i, state in enumerate(test_states): control_output = optimized_controller.compute_control(state) if hasattr(control_output, \u2018u\u2019): u = control_output.u else: u = control_output print(f\u201d Test {i+1}: state={state[:3]}, control={u:.3f}\u201d) print(\u201cReal-time validation completed\u201d) else: print(f\u201dOptimization failed: {result.get(\u2018error\u2019, \u2018Unknown\u2019)}\u201d) finally: monitor.stop_monitoring() return result # Run real-time optimization": [[280, "runnable-false-def-real-time-optimization-integration-demonstrate-real-time-optimization-with-live-feedback-import-time-import-threading-from-queue-import-queue-class-optimizationmonitor-real-time-optimization-monitoring-def-init-self-self-progress-queue-queue-self-current-iteration-0-self-current-best-cost-float-inf-self-is-running-false-def-update-progress-self-iteration-best-cost-update-optimization-progress-self-current-iteration-iteration-self-current-best-cost-best-cost-self-progress-queue-put-iteration-best-cost-def-start-monitoring-self-start-monitoring-thread-self-is-running-true-monitor-thread-threading-thread-target-self-monitor-loop-monitor-thread-daemon-true-monitor-thread-start-def-stop-monitoring-self-stop-monitoring-self-is-running-false-def-monitor-loop-self-monitoring-loop-while-self-is-running-try-if-not-self-progress-queue-empty-iteration-cost-self-progress-queue-get-timeout-0-1-print-f-riteration-iteration-best-cost-cost-6f-end-flush-true-time-sleep-0-1-except-continue-create-monitor-monitor-optimizationmonitor-configure-pso-with-monitoring-integration-pso-config-psofactoryconfig-controller-type-controllertype-classical-smc-population-size-20-max-iterations-50-use-robust-evaluation-true-print-starting-real-time-pso-optimization-start-monitoring-monitor-start-monitoring-try-create-factory-and-optimize-pso-factory-enhancedpsofactory-pso-config-note-in-a-real-implementation-you-would-integrate-the-monitor-with-the-pso-algorithm-s-iteration-callback-result-pso-factory-optimize-controller-print-n-new-line-after-progress-updates-if-result-success-print-f-optimization-completed-successfully-print-f-final-cost-result-best-cost-6f-print-f-optimized-gains-result-best-gains-real-time-validation-optimized-controller-result-controller-print-nperforming-real-time-validation-test-states-0-0-0-1-0-05-0-0-0-0-0-0-0-0-0-2-0-1-0-0-0-0-0-0-0-0-0-3-0-15-0-0-0-0-0-0-for-i-state-in-enumerate-test-states-control-output-optimized-controller-compute-control-state-if-hasattr-control-output-u-u-control-output-u-else-u-control-output-print-f-test-i-1-state-state-3-control-u-3f-print-real-time-validation-completed-else-print-f-optimization-failed-result-get-error-unknown-finally-monitor-stop-monitoring-return-result-run-real-time-optimization"]], "runnable: false def robust_optimization_under_uncertainty(pso_tuner: PSOTuner, uncertainty_config: PhysicsUncertaintySchema) -> dict: \u201c\u201d\u201d Monte Carlo robust optimization with uncertainty quantification. Methodology: 1. Sample N physics realizations from uncertainty distributions 2. Evaluate each particle against all realizations 3. Aggregate costs using risk-sensitive criteria (mean + \u03b1\u00b7std) 4. Report confidence intervals for optimal gains Mathematical Framework: - Uncertain parameters: \u03b8 ~ N(\u03b8\u2080, \u03c3\u00b2) for each physics parameter - Robust cost: J_robust = E[J(G,\u03b8)] + \u03b1\u00b7Std[J(G,\u03b8)] - Risk parameter: \u03b1 \u2208 [0, 1] balancing mean vs variance \u201c\u201d\u201d # Generate uncertainty samples physics_samples = generate_physics_samples(uncertainty_config) # Multi-realization evaluation costs_per_realization = [] for physics_params in physics_samples: # Evaluate swarm under this realization realization_costs = pso_tuner.evaluate_swarm_with_physics(physics_params) costs_per_realization.append(realization_costs) # Risk-sensitive aggregation mean_costs = np.mean(costs_per_realization, axis=0) std_costs = np.std(costs_per_realization, axis=0) robust_costs = mean_costs + uncertainty_config.risk_factor * std_costs return { \u2018robust_costs\u2019: robust_costs, \u2018mean_costs\u2019: mean_costs, \u2018std_costs\u2019: std_costs, \u2018confidence_intervals\u2019: compute_confidence_intervals(costs_per_realization), \u2018physics_samples\u2019: physics_samples }": [[251, "runnable-false-def-robust-optimization-under-uncertainty-pso-tuner-psotuner-uncertainty-config-physicsuncertaintyschema-dict-monte-carlo-robust-optimization-with-uncertainty-quantification-methodology-1-sample-n-physics-realizations-from-uncertainty-distributions-2-evaluate-each-particle-against-all-realizations-3-aggregate-costs-using-risk-sensitive-criteria-mean-std-4-report-confidence-intervals-for-optimal-gains-mathematical-framework-uncertain-parameters-n-0-2-for-each-physics-parameter-robust-cost-j-robust-e-j-g-std-j-g-risk-parameter-0-1-balancing-mean-vs-variance-generate-uncertainty-samples-physics-samples-generate-physics-samples-uncertainty-config-multi-realization-evaluation-costs-per-realization-for-physics-params-in-physics-samples-evaluate-swarm-under-this-realization-realization-costs-pso-tuner-evaluate-swarm-with-physics-physics-params-costs-per-realization-append-realization-costs-risk-sensitive-aggregation-mean-costs-np-mean-costs-per-realization-axis-0-std-costs-np-std-costs-per-realization-axis-0-robust-costs-mean-costs-uncertainty-config-risk-factor-std-costs-return-robust-costs-robust-costs-mean-costs-mean-costs-std-costs-std-costs-confidence-intervals-compute-confidence-intervals-costs-per-realization-physics-samples-physics-samples"]], "runnable: false def run_migration_test_suite() -> None: \u201c\u201d\u201d test suite for migration functionality. \u201c\u201d\u201d print(\u201c=== Migration Test Suite ===\\n\u201d) # Test 1: Classical SMC migration print(\u201cTest 1: Classical SMC Migration\u201d) old_classical = { \u2018gains\u2019: [10, 5, 8, 3, 15], \u2018K_switching\u2019: 2.0, \u2018gamma\u2019: 0.1, \u2018switch_function\u2019: \u2018sign\u2019 } new_classical = migrate_classical_smc_manually(old_classical) # Validation checks assert len(new_classical[\u2018gains\u2019]) == 6, \u201cClassical SMC should have 6 gains\u201d assert new_classical[\u2018gains\u2019][5] == 2.0, \u201cK_switching should be integrated\u201d assert \u2018gamma\u2019 not in new_classical, \u201cInvalid gamma should be removed\u201d assert new_classical.get(\u2018switch_method\u2019) == \u2018sign\u2019, \u201cswitch_function should be renamed\u201d print(\u201d\u2713 Classical SMC migration test passed\\n\u201d) # Test 2: Adaptive SMC migration print(\u201cTest 2: Adaptive SMC Migration\u201d) old_adaptive = { \u2018gains\u2019: [12, 10, 6, 5], \u2018adaptation_gain\u2019: 2.5, \u2018boundary_layer_thickness\u2019: 0.02, \u2018estimate_bounds\u2019: [0.1, 100.0] } new_adaptive = migrate_adaptive_smc_manually(old_adaptive) # Validation checks assert len(new_adaptive[\u2018gains\u2019]) == 5, \u201cAdaptive SMC should have 5 gains\u201d assert new_adaptive[\u2018gains\u2019][4] == 2.5, \u201cAdaptation gain should be integrated\u201d assert new_adaptive.get(\u2018boundary_layer\u2019) == 0.02, \u201cParameter should be renamed\u201d assert new_adaptive.get(\u2018K_min\u2019) == 0.1, \u201cestimate_bounds should be split\u201d assert new_adaptive.get(\u2018K_max\u2019) == 100.0, \u201cestimate_bounds should be split\u201d print(\u201d\u2713 Adaptive SMC migration test passed\\n\u201d) # Test 3: STA-SMC migration print(\u201cTest 3: STA-SMC Migration\u201d) old_sta = { \u2018K1\u2019: 35.0, \u2018K2\u2019: 20.0, \u2018gains\u2019: [25, 18, 12, 8], \u2018alpha_power\u2019: 0.5 } new_sta = migrate_sta_smc_manually(old_sta) # Validation checks assert len(new_sta[\u2018gains\u2019]) == 6, \u201cSTA-SMC should have 6 gains\u201d assert new_sta[\u2018gains\u2019][0] == 35.0, \u201cK1 should be first gain\u201d assert new_sta[\u2018gains\u2019][1] == 20.0, \u201cK2 should be second gain\u201d assert new_sta.get(\u2018power_exponent\u2019) == 0.5, \u201calpha_power should be renamed\u201d print(\u201d\u2713 STA-SMC migration test passed\\n\u201d) print(\u201cAll migration tests passed! \u2713\u201d) # Run the test suite": [[108, "runnable-false-def-run-migration-test-suite-none-test-suite-for-migration-functionality-print-migration-test-suite-n-test-1-classical-smc-migration-print-test-1-classical-smc-migration-old-classical-gains-10-5-8-3-15-k-switching-2-0-gamma-0-1-switch-function-sign-new-classical-migrate-classical-smc-manually-old-classical-validation-checks-assert-len-new-classical-gains-6-classical-smc-should-have-6-gains-assert-new-classical-gains-5-2-0-k-switching-should-be-integrated-assert-gamma-not-in-new-classical-invalid-gamma-should-be-removed-assert-new-classical-get-switch-method-sign-switch-function-should-be-renamed-print-classical-smc-migration-test-passed-n-test-2-adaptive-smc-migration-print-test-2-adaptive-smc-migration-old-adaptive-gains-12-10-6-5-adaptation-gain-2-5-boundary-layer-thickness-0-02-estimate-bounds-0-1-100-0-new-adaptive-migrate-adaptive-smc-manually-old-adaptive-validation-checks-assert-len-new-adaptive-gains-5-adaptive-smc-should-have-5-gains-assert-new-adaptive-gains-4-2-5-adaptation-gain-should-be-integrated-assert-new-adaptive-get-boundary-layer-0-02-parameter-should-be-renamed-assert-new-adaptive-get-k-min-0-1-estimate-bounds-should-be-split-assert-new-adaptive-get-k-max-100-0-estimate-bounds-should-be-split-print-adaptive-smc-migration-test-passed-n-test-3-sta-smc-migration-print-test-3-sta-smc-migration-old-sta-k1-35-0-k2-20-0-gains-25-18-12-8-alpha-power-0-5-new-sta-migrate-sta-smc-manually-old-sta-validation-checks-assert-len-new-sta-gains-6-sta-smc-should-have-6-gains-assert-new-sta-gains-0-35-0-k1-should-be-first-gain-assert-new-sta-gains-1-20-0-k2-should-be-second-gain-assert-new-sta-get-power-exponent-0-5-alpha-power-should-be-renamed-print-sta-smc-migration-test-passed-n-print-all-migration-tests-passed-run-the-test-suite"]], "runnable: false def safe_controller_creation(controller_class, config): \u201c\u201d\u201dCreate controller with error recovery.\u201d\u201d\u201d try: return controller_class(config) except Exception as e: logger.error(f\u201dController instantiation failed: {e}\u201d) # Try with minimal configuration minimal_config = create_minimal_config(config) try: return controller_class(minimal_config) except Exception as e2: logger.error(f\u201dMinimal controller creation failed: {e2}\u201d) raise FactoryError(f\u201dCannot create controller: {e}, {e2}\u201d)": [[274, "runnable-false-def-safe-controller-creation-controller-class-config-create-controller-with-error-recovery-try-return-controller-class-config-except-exception-as-e-logger-error-f-controller-instantiation-failed-e-try-with-minimal-configuration-minimal-config-create-minimal-config-config-try-return-controller-class-minimal-config-except-exception-as-e2-logger-error-f-minimal-controller-creation-failed-e2-raise-factoryerror-f-cannot-create-controller-e-e2"]], "runnable: false def safe_divide( numerator: NumericType, denominator: NumericType, epsilon: float = 1e-12, fallback: float = 0.0, warn: bool = False,": [[79, "runnable-false-def-safe-divide-numerator-numerictype-denominator-numerictype-epsilon-float-1e-12-fallback-float-0-0-warn-bool-false"]], "runnable: false def safe_exp( x: NumericType, max_value: float = 700.0, warn: bool = False,": [[79, "runnable-false-def-safe-exp-x-numerictype-max-value-float-700-0-warn-bool-false"]], "runnable: false def safe_norm( vector: np.ndarray, ord: Optional[Union[int, float, str]] = 2, axis: Optional[int] = None, min_norm: float = 1e-15,": [[79, "runnable-false-def-safe-norm-vector-np-ndarray-ord-optional-union-int-float-str-2-axis-optional-int-none-min-norm-float-1e-15"]], "runnable: false def safe_normalize( vector: np.ndarray, ord: Optional[Union[int, float, str]] = 2, axis: Optional[int] = None, min_norm: float = 1e-15, fallback: Optional[np.ndarray] = None,": [[79, "runnable-false-def-safe-normalize-vector-np-ndarray-ord-optional-union-int-float-str-2-axis-optional-int-none-min-norm-float-1e-15-fallback-optional-np-ndarray-none"]], "runnable: false def safe_sqrt( x: NumericType, min_value: float = 1e-15, warn: bool = False,": [[79, "runnable-false-def-safe-sqrt-x-numerictype-min-value-float-1e-15-warn-bool-false"]], "runnable: false def select_smc_controller(requirements): \u201c\u201d\u201dDecision tree for SMC controller selection.\u201d\u201d\u201d if requirements.get(\u2018parameter_uncertainty\u2019) == \u2018high\u2019: if requirements.get(\u2018convergence_time\u2019) == \u2018finite\u2019: return \u2018hybrid_adaptive_sta_smc\u2019 # Best of both worlds else: return \u2018adaptive_smc\u2019 # Parameter adaptation focus elif requirements.get(\u2018convergence_time\u2019) == \u2018finite\u2019: if requirements.get(\u2018chattering_tolerance\u2019) == \u2018low\u2019: return \u2018sta_smc\u2019 # Finite-time + smooth control else: return \u2018classical_smc\u2019 # Fast and simple elif requirements.get(\u2018computational_resources\u2019) == \u2018limited\u2019: return \u2018classical_smc\u2019 # Lowest computational cost elif requirements.get(\u2018performance_priority\u2019) == \u2018maximum\u2019: return \u2018hybrid_adaptive_sta_smc\u2019 # Best overall performance else: return \u2018classical_smc\u2019 # Default choice for general use": [[36, "runnable-false-def-select-smc-controller-requirements-decision-tree-for-smc-controller-selection-if-requirements-get-parameter-uncertainty-high-if-requirements-get-convergence-time-finite-return-hybrid-adaptive-sta-smc-best-of-both-worlds-else-return-adaptive-smc-parameter-adaptation-focus-elif-requirements-get-convergence-time-finite-if-requirements-get-chattering-tolerance-low-return-sta-smc-finite-time-smooth-control-else-return-classical-smc-fast-and-simple-elif-requirements-get-computational-resources-limited-return-classical-smc-lowest-computational-cost-elif-requirements-get-performance-priority-maximum-return-hybrid-adaptive-sta-smc-best-overall-performance-else-return-classical-smc-default-choice-for-general-use"]], "runnable: false def test_boundary_layer_continuity(): \u201c\u201d\u201dTest that boundary layer provides continuous switching.\u201d\u201d\u201d boundary_layer = BoundaryLayer(thickness=0.1, switch_method=\u201dtanh\u201d) # Test continuity at surface (s=0) epsilon = 1e-8 switch_left = boundary_layer.compute_switching_function(-epsilon) switch_right = boundary_layer.compute_switching_function(epsilon) switch_center = boundary_layer.compute_switching_function(0.0) # Values should be very close at the boundary assert abs(switch_left - switch_center) < 1e-6 assert abs(switch_right - switch_center) < 1e-6 2. **Monotonicity**:python def test_boundary_layer_monotonicity(): \u201c\u201d\u201dTest that switching function is monotonic.\u201d\u201d\u201d boundary_layer = BoundaryLayer(thickness=0.1, switch_method=\u201dtanh\u201d) s_values = np.linspace(-1, 1, 100) switch_values = [boundary_layer.compute_switching_function(s) for s in s_values] # Switching function should be strictly increasing for i in range(len(switch_values) - 1): assert switch_values[i+1] >= switch_values[i] 3. **Asymptotic Behavior**:python def test_boundary_layer_asymptotic_behavior(): \u201c\u201d\u201dTest asymptotic limits of switching function.\u201d\u201d\u201d boundary_layer = BoundaryLayer(thickness=0.1, switch_method=\u201dtanh\u201d) # Large positive surface value switch_pos = boundary_layer.compute_switching_function(10.0) assert abs(switch_pos - 1.0) < 1e-3 # Large negative surface value switch_neg = boundary_layer.compute_switching_function(-10.0) assert abs(switch_neg - (-1.0)) < 1e-3 ### 2.2 Configuration Validation Tests **Test Suite:** `tests/test_controllers/smc/algorithms/classical/test_config_validation.py` #### 2.2.1 Parameter Validationpython": [[207, "runnable-false-def-test-boundary-layer-continuity-test-that-boundary-layer-provides-continuous-switching-boundary-layer-boundarylayer-thickness-0-1-switch-method-tanh-test-continuity-at-surface-s-0-epsilon-1e-8-switch-left-boundary-layer-compute-switching-function-epsilon-switch-right-boundary-layer-compute-switching-function-epsilon-switch-center-boundary-layer-compute-switching-function-0-0-values-should-be-very-close-at-the-boundary-assert-abs-switch-left-switch-center-1e-6-assert-abs-switch-right-switch-center-1e-6-2-monotonicity-python-def-test-boundary-layer-monotonicity-test-that-switching-function-is-monotonic-boundary-layer-boundarylayer-thickness-0-1-switch-method-tanh-s-values-np-linspace-1-1-100-switch-values-boundary-layer-compute-switching-function-s-for-s-in-s-values-switching-function-should-be-strictly-increasing-for-i-in-range-len-switch-values-1-assert-switch-values-i-1-switch-values-i-3-asymptotic-behavior-python-def-test-boundary-layer-asymptotic-behavior-test-asymptotic-limits-of-switching-function-boundary-layer-boundarylayer-thickness-0-1-switch-method-tanh-large-positive-surface-value-switch-pos-boundary-layer-compute-switching-function-10-0-assert-abs-switch-pos-1-0-1e-3-large-negative-surface-value-switch-neg-boundary-layer-compute-switching-function-10-0-assert-abs-switch-neg-1-0-1e-3-2-2-configuration-validation-tests-test-suite-tests-test-controllers-smc-algorithms-classical-test-config-validation-py-2-2-1-parameter-validationpython"]], "runnable: false def test_boundary_layer_monotonicity_all_methods(self): \u201c\u201d\u201dTest monotonicity for all switching methods.\u201d\u201d\u201d methods = [\u201ctanh\u201d, \u201clinear\u201d, \u201csign\u201d] for method in methods: boundary_layer = BoundaryLayer(thickness=0.1, switch_method=method) s_values = np.linspace(-2, 2, 1000) switch_values = [boundary_layer.compute_switching_function(s) for s in s_values] # Must be monotonically increasing for i in range(len(switch_values) - 1): assert switch_values[i+1] >= switch_values[i] 3. **Configuration Validation Coverage:**python": [[194, "runnable-false-def-test-boundary-layer-monotonicity-all-methods-self-test-monotonicity-for-all-switching-methods-methods-tanh-linear-sign-for-method-in-methods-boundary-layer-boundarylayer-thickness-0-1-switch-method-method-s-values-np-linspace-2-2-1000-switch-values-boundary-layer-compute-switching-function-s-for-s-in-s-values-must-be-monotonically-increasing-for-i-in-range-len-switch-values-1-assert-switch-values-i-1-switch-values-i-3-configuration-validation-coverage-python"]], "runnable: false def test_computation_precision_consistency(self): \u201c\u201d\u201dTest that repeated computations maintain precision.\u201d\u201d\u201d config = ClassicalSMCConfig( gains=[5.0, 3.0, 4.0, 2.0, 10.0, 1.0], max_force=100.0, dt=0.01, boundary_layer=0.01 ) controller = ModularClassicalSMC(config=config) state = np.array([0.123456789, 0.987654321, 0.456789123, 0.321654987, 0.789123456, 0.654987321]) # Compute control 1000 times results = [] for _ in range(1000): result = controller.compute_control(state, {}, {}) control = result.get(\u2018control_output\u2019, result.get(\u2018control\u2019, 0)) results.append(control) results = np.array(results) # Standard deviation should be zero (deterministic computation) std_dev = np.std(results, axis=0) if results.ndim > 1 else np.std(results) assert np.all(std_dev < 1e-15) # Machine precision level ``` ## 4. Implementation Architecture Improvements ### 4.1 Modular Component Design Before (Monolithic): Single 458-line controller with mixed concerns": [[194, "runnable-false-def-test-computation-precision-consistency-self-test-that-repeated-computations-maintain-precision-config-classicalsmcconfig-gains-5-0-3-0-4-0-2-0-10-0-1-0-max-force-100-0-dt-0-01-boundary-layer-0-01-controller-modularclassicalsmc-config-config-state-np-array-0-123456789-0-987654321-0-456789123-0-321654987-0-789123456-0-654987321-compute-control-1000-times-results-for-in-range-1000-result-controller-compute-control-state-control-result-get-control-output-result-get-control-0-results-append-control-results-np-array-results-standard-deviation-should-be-zero-deterministic-computation-std-dev-np-std-results-axis-0-if-results-ndim-1-else-np-std-results-assert-np-all-std-dev-1e-15-machine-precision-level-4-implementation-architecture-improvements-4-1-modular-component-design-before-monolithic-single-458-line-controller-with-mixed-concerns"]], "runnable: false def test_end_to_end_mathematical_properties(): \u201c\u201d\u201dTest mathematical properties in complete system.\u201d\u201d\u201d # Initialize system system = DoubleInvertedPendulum() controller = ClassicalSMC() # Initial condition away from equilibrium x0 = np.array([0.2, 0.1, 0.0, 0.0, 0.0, 0.0]) target = np.zeros(6) # Simulate system trajectory = simulate_system(system, controller, x0, target, t_final=10.0) # Mathematical property verification # 1. Verify Lyapunov function decreases V_values = [controller.compute_lyapunov_function(state) for state in trajectory.states] assert np.all(np.diff(V_values) <= 0), \u201cLyapunov function must be non-increasing\u201d # 2. Verify convergence to target final_error = np.linalg.norm(trajectory.states[-1] - target) assert final_error < 0.01, f\u201dFinal error {final_error} too large\u201d # 3. Verify control signal bounds max_control = np.max(np.abs(trajectory.controls)) assert max_control <= controller.u_max, \u201cControl signal exceeds limits\u201d": [[191, "runnable-false-def-test-end-to-end-mathematical-properties-test-mathematical-properties-in-complete-system-initialize-system-system-doubleinvertedpendulum-controller-classicalsmc-initial-condition-away-from-equilibrium-x0-np-array-0-2-0-1-0-0-0-0-0-0-0-0-target-np-zeros-6-simulate-system-trajectory-simulate-system-system-controller-x0-target-t-final-10-0-mathematical-property-verification-1-verify-lyapunov-function-decreases-v-values-controller-compute-lyapunov-function-state-for-state-in-trajectory-states-assert-np-all-np-diff-v-values-0-lyapunov-function-must-be-non-increasing-2-verify-convergence-to-target-final-error-np-linalg-norm-trajectory-states-1-target-assert-final-error-0-01-f-final-error-final-error-too-large-3-verify-control-signal-bounds-max-control-np-max-np-abs-trajectory-controls-assert-max-control-controller-u-max-control-signal-exceeds-limits"]], "runnable: false def test_hurwitz_stability_check(): \u201c\u201d\u201dTest that gain combinations satisfy Hurwitz stability.\u201d\u201d\u201d def check_stability(k1, k2, lam1, lam2): \u201c\u201d\u201dCheck if gains produce stable sliding dynamics.\u201d\u201d\u201d # For each 2x2 subsystem: s\u00b2 + \u03bb\u1d62s + c\u1d62 = 0 # Stability requires \u03bb\u1d62 > 0 and c\u1d62 > 0 return k1 > 0 and k2 > 0 and lam1 > 0 and lam2 > 0 # Stable configuration stable_gains = [5.0, 3.0, 4.0, 2.0, 10.0, 1.0] config = ClassicalSMCConfig(gains=stable_gains, max_force=100, dt=0.01, boundary_layer=0.01) assert check_stability(config.k1, config.k2, config.lam1, config.lam2) # Check damping ratios zeta1 = config.lam1 / (2 * np.sqrt(config.k1)) zeta2 = config.lam2 / (2 * np.sqrt(config.k2)) # Both subsystems should have positive damping assert zeta1 > 0 assert zeta2 > 0": [[207, "runnable-false-def-test-hurwitz-stability-check-test-that-gain-combinations-satisfy-hurwitz-stability-def-check-stability-k1-k2-lam1-lam2-check-if-gains-produce-stable-sliding-dynamics-for-each-2x2-subsystem-s2-is-ci-0-stability-requires-i-0-and-ci-0-return-k1-0-and-k2-0-and-lam1-0-and-lam2-0-stable-configuration-stable-gains-5-0-3-0-4-0-2-0-10-0-1-0-config-classicalsmcconfig-gains-stable-gains-max-force-100-dt-0-01-boundary-layer-0-01-assert-check-stability-config-k1-config-k2-config-lam1-config-lam2-check-damping-ratios-zeta1-config-lam1-2-np-sqrt-config-k1-zeta2-config-lam2-2-np-sqrt-config-k2-both-subsystems-should-have-positive-damping-assert-zeta1-0-assert-zeta2-0"]], "runnable: false def test_numerical_stability_extreme_values(self): \u201c\u201d\u201dTest behavior with extreme but valid parameter values.\u201d\u201d\u201d # Very small gains (but above minimum threshold) small_gains = [1e-10, 1e-10, 1e-10, 1e-10, 1e-8, 0.0] config_small = ClassicalSMCConfig(gains=small_gains, max_force=1e-6, dt=1e-6, boundary_layer=1e-8) # Very large gains large_gains = [1e6, 1e6, 1e6, 1e6, 1e8, 1e4] config_large = ClassicalSMCConfig(gains=large_gains, max_force=1e8, dt=1e-3, boundary_layer=1.0) # Both should create valid controllers controller_small = ModularClassicalSMC(config=config_small) controller_large = ModularClassicalSMC(config=config_large) # Test with moderate state values state = np.array([0.1, 0.05, 0.08, 0.02, 0.03, 0.01]) result_small = controller_small.compute_control(state, {}, {}) result_large = controller_large.compute_control(state, {}, {}) # Both should produce finite, bounded results assert np.all(np.isfinite(result_small.get(\u2018control_output\u2019, [0]))) assert np.all(np.isfinite(result_large.get(\u2018control_output\u2019, [0]))) 2. **Precision Consistency Testing:**python": [[194, "runnable-false-def-test-numerical-stability-extreme-values-self-test-behavior-with-extreme-but-valid-parameter-values-very-small-gains-but-above-minimum-threshold-small-gains-1e-10-1e-10-1e-10-1e-10-1e-8-0-0-config-small-classicalsmcconfig-gains-small-gains-max-force-1e-6-dt-1e-6-boundary-layer-1e-8-very-large-gains-large-gains-1e6-1e6-1e6-1e6-1e8-1e4-config-large-classicalsmcconfig-gains-large-gains-max-force-1e8-dt-1e-3-boundary-layer-1-0-both-should-create-valid-controllers-controller-small-modularclassicalsmc-config-config-small-controller-large-modularclassicalsmc-config-config-large-test-with-moderate-state-values-state-np-array-0-1-0-05-0-08-0-02-0-03-0-01-result-small-controller-small-compute-control-state-result-large-controller-large-compute-control-state-both-should-produce-finite-bounded-results-assert-np-all-np-isfinite-result-small-get-control-output-0-assert-np-all-np-isfinite-result-large-get-control-output-0-2-precision-consistency-testing-python"]], "runnable: false def test_sliding_surface_gain_sensitivity(): \u201c\u201d\u201dTest that surface responds correctly to gain changes.\u201d\u201d\u201d gains1 = [5, 3, 4, 2] gains2 = [10, 6, 8, 4] # Doubled gains surface1 = LinearSlidingSurface(gains1) surface2 = LinearSlidingSurface(gains2) state = np.array([0.1, 0.1, 0.1, 0.05, 0.05, 0.05]) s1 = surface1.compute(state) s2 = surface2.compute(state) # Surface value should double with doubled gains assert abs(s2 - 2 * s1) < 1e-10 #### 2.1.2 Boundary Layer Properties **Test Suite:** `tests/test_controllers/smc/algorithms/classical/test_boundary_layer.py` **Mathematical Properties Validated:** 1. **Continuity**:python": [[207, "runnable-false-def-test-sliding-surface-gain-sensitivity-test-that-surface-responds-correctly-to-gain-changes-gains1-5-3-4-2-gains2-10-6-8-4-doubled-gains-surface1-linearslidingsurface-gains1-surface2-linearslidingsurface-gains2-state-np-array-0-1-0-1-0-1-0-05-0-05-0-05-s1-surface1-compute-state-s2-surface2-compute-state-surface-value-should-double-with-doubled-gains-assert-abs-s2-2-s1-1e-10-2-1-2-boundary-layer-properties-test-suite-tests-test-controllers-smc-algorithms-classical-test-boundary-layer-py-mathematical-properties-validated-1-continuity-python"]], "runnable: false def test_sliding_surface_linearity(): \u201c\u201d\u201dTest that sliding surface is linear in state.\u201d\u201d\u201d surface = LinearSlidingSurface(gains=[5, 3, 4, 2]) state1 = np.array([0.1, 0.1, 0.1, 0.05, 0.05, 0.05]) state2 = np.array([0.2, 0.2, 0.2, 0.1, 0.1, 0.1]) s1 = surface.compute(state1) s2 = surface.compute(state2) s_combined = surface.compute(state1 + state2) # Linearity: s(x1 + x2) = s(x1) + s(x2) assert abs(s_combined - (s1 + s2)) < 1e-10 2. **Homogeneity Property**:python def test_sliding_surface_homogeneity(): \u201c\u201d\u201dTest that sliding surface is homogeneous of degree 1.\u201d\u201d\u201d surface = LinearSlidingSurface(gains=[5, 3, 4, 2]) state = np.array([0.1, 0.1, 0.1, 0.05, 0.05, 0.05]) alpha = 2.5 s_original = surface.compute(state) s_scaled = surface.compute(alpha * state) # Homogeneity: s(\u03b1\u00b7x) = \u03b1\u00b7s(x) assert abs(s_scaled - alpha * s_original) < 1e-10 3. **Gain Sensitivity**:python": [[207, "runnable-false-def-test-sliding-surface-linearity-test-that-sliding-surface-is-linear-in-state-surface-linearslidingsurface-gains-5-3-4-2-state1-np-array-0-1-0-1-0-1-0-05-0-05-0-05-state2-np-array-0-2-0-2-0-2-0-1-0-1-0-1-s1-surface-compute-state1-s2-surface-compute-state2-s-combined-surface-compute-state1-state2-linearity-s-x1-x2-s-x1-s-x2-assert-abs-s-combined-s1-s2-1e-10-2-homogeneity-property-python-def-test-sliding-surface-homogeneity-test-that-sliding-surface-is-homogeneous-of-degree-1-surface-linearslidingsurface-gains-5-3-4-2-state-np-array-0-1-0-1-0-1-0-05-0-05-0-05-alpha-2-5-s-original-surface-compute-state-s-scaled-surface-compute-alpha-state-homogeneity-s-x-s-x-assert-abs-s-scaled-alpha-s-original-1e-10-3-gain-sensitivity-python"]], "runnable: false def update_adaptive_parameters(self, iteration: int) -> None: \u201c\u201d\u201dUpdate PSO parameters based on iteration progress. Args: iteration: Current iteration number \u201c\u201d\u201d if not self.adaptive_weights: return # Progress ratio [0, 1] progress = iteration / self.max_iterations # Linear decreasing inertia weight self.inertia_weight = ( self.initial_inertia - (self.initial_inertia - self.final_inertia) * progress ) # Time-varying cognitive coefficient self.cognitive_weight = ( self.initial_c1 - (self.initial_c1 - self.final_c1) * progress ) # Time-varying social coefficient self.social_weight = ( self.initial_c2 + (self.final_c2 - self.initial_c2) * progress ) self.logger.debug( f\u201dIteration {iteration}: \u03c9={self.inertia_weight:.3f}, \u201c f\u201dc1={self.cognitive_weight:.3f}, c2={self.social_weight:.3f}\u201d )": [[215, "runnable-false-def-update-adaptive-parameters-self-iteration-int-none-update-pso-parameters-based-on-iteration-progress-args-iteration-current-iteration-number-if-not-self-adaptive-weights-return-progress-ratio-0-1-progress-iteration-self-max-iterations-linear-decreasing-inertia-weight-self-inertia-weight-self-initial-inertia-self-initial-inertia-self-final-inertia-progress-time-varying-cognitive-coefficient-self-cognitive-weight-self-initial-c1-self-initial-c1-self-final-c1-progress-time-varying-social-coefficient-self-social-weight-self-initial-c2-self-final-c2-self-initial-c2-progress-self-logger-debug-f-iteration-iteration-self-inertia-weight-3f-f-c1-self-cognitive-weight-3f-c2-self-social-weight-3f"]], "runnable: false def update_particles(self): \u201c\u201d\u201dUpdate particle velocities and positions.\u201d\u201d\u201d for i in range(self.n_particles): # Random coefficients r1, r2 = np.random.random(2) # Velocity update with constriction factor self.velocities[i] = self.chi * ( self.w * self.velocities[i] + self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i]) + self.c2 * r2 * (self.global_best_position - self.positions[i]) ) # Position update self.positions[i] += self.velocities[i] # Boundary handling self.positions[i] = np.clip(self.positions[i], self.bounds_min, self.bounds_max)": [[191, "runnable-false-def-update-particles-self-update-particle-velocities-and-positions-for-i-in-range-self-n-particles-random-coefficients-r1-r2-np-random-random-2-velocity-update-with-constriction-factor-self-velocities-i-self-chi-self-w-self-velocities-i-self-c1-r1-self-personal-best-positions-i-self-positions-i-self-c2-r2-self-global-best-position-self-positions-i-position-update-self-positions-i-self-velocities-i-boundary-handling-self-positions-i-np-clip-self-positions-i-self-bounds-min-self-bounds-max"]], "runnable: false def validate_controller_gains(controller_type: str, gains: np.ndarray) -> np.ndarray: \u201c\u201d\u201d Validate gain vectors for controller-specific stability requirements. Mathematical Validation Rules: Classical SMC: - All gains > 0 (positive definiteness) - Sliding surface gains c\u2081, \u03bb\u2081, c\u2082, \u03bb\u2082 ensure Hurwitz characteristic polynomial - Switching gains K, kd provide reaching condition satisfaction STA-SMC (Super-Twisting): - Algorithmic gains: K\u2081 > K\u2082 > 0 (stability condition) - Surface coefficients: \u03bb\u2081, \u03bb\u2082 for target damping ratio \u03b6 \u2208 [0.6, 0.8] - Finite-time convergence: K\u2081\u00b2 > 4K\u2082|\u03bb\u2081\u03bb\u2082| Parameters \u2014\u2014\u2014- controller_type : str Controller identifier from registry gains : np.ndarray, shape (B, n) Batch of gain vectors to validate Returns \u2014\u2014- np.ndarray, shape (B,), dtype=bool Validity mask for each gain vector \u201c\u201d\u201d registry_info = CONTROLLER_REGISTRY[controller_type] bounds = registry_info[\u2018gain_bounds\u2019] # Basic bounds checking valid_mask = np.ones(gains.shape[0], dtype=bool) for i, (min_val, max_val) in enumerate(bounds): valid_mask &= (gains[:, i] >= min_val) & (gains[:, i] <= max_val) # Controller-specific stability checks if controller_type == \u2018sta_smc\u2019: # K\u2081 > K\u2082 condition for STA stability valid_mask &= gains[:, 0] > gains[:, 1] # Surface coefficient bounds for target damping lambda1, lambda2 = gains[:, 4], gains[:, 5] damping_ratio = lambda2 / (2 * np.sqrt(lambda1)) valid_mask &= (damping_ratio >= 0.6) & (damping_ratio <= 0.8) return valid_mask": [[251, "runnable-false-def-validate-controller-gains-controller-type-str-gains-np-ndarray-np-ndarray-validate-gain-vectors-for-controller-specific-stability-requirements-mathematical-validation-rules-classical-smc-all-gains-0-positive-definiteness-sliding-surface-gains-c1-1-c2-2-ensure-hurwitz-characteristic-polynomial-switching-gains-k-kd-provide-reaching-condition-satisfaction-sta-smc-super-twisting-algorithmic-gains-k1-k2-0-stability-condition-surface-coefficients-1-2-for-target-damping-ratio-0-6-0-8-finite-time-convergence-k12-4k2-12-parameters-controller-type-str-controller-identifier-from-registry-gains-np-ndarray-shape-b-n-batch-of-gain-vectors-to-validate-returns-np-ndarray-shape-b-dtype-bool-validity-mask-for-each-gain-vector-registry-info-controller-registry-controller-type-bounds-registry-info-gain-bounds-basic-bounds-checking-valid-mask-np-ones-gains-shape-0-dtype-bool-for-i-min-val-max-val-in-enumerate-bounds-valid-mask-gains-i-min-val-gains-i-max-val-controller-specific-stability-checks-if-controller-type-sta-smc-k1-k2-condition-for-sta-stability-valid-mask-gains-0-gains-1-surface-coefficient-bounds-for-target-damping-lambda1-lambda2-gains-4-gains-5-damping-ratio-lambda2-2-np-sqrt-lambda1-valid-mask-damping-ratio-0-6-damping-ratio-0-8-return-valid-mask"]], "runnable: false def validate_inputs(controller_type, config, gains): \u201c\u201d\u201dValidate factory inputs before processing.\u201d\u201d\u201d # Controller type validation if not isinstance(controller_type, str): raise TypeError(\u201ccontroller_type must be string\u201d) # Gains validation if gains is not None: if not isinstance(gains, (list, np.ndarray)): raise TypeError(\u201cgains must be list or numpy array\u201d) if not all(isinstance(g, (int, float)) for g in gains): raise ValueError(\u201cgains must contain numeric values\u201d) if any(not np.isfinite(g) for g in gains): raise ValueError(\u201cgains contain NaN or infinite values\u201d)": [[274, "runnable-false-def-validate-inputs-controller-type-config-gains-validate-factory-inputs-before-processing-controller-type-validation-if-not-isinstance-controller-type-str-raise-typeerror-controller-type-must-be-string-gains-validation-if-gains-is-not-none-if-not-isinstance-gains-list-np-ndarray-raise-typeerror-gains-must-be-list-or-numpy-array-if-not-all-isinstance-g-int-float-for-g-in-gains-raise-valueerror-gains-must-contain-numeric-values-if-any-not-np-isfinite-g-for-g-in-gains-raise-valueerror-gains-contain-nan-or-infinite-values"]], "runnable: false def validate_lyapunov_stability_conditions(): \u201c\u201d\u201d Verify that factory-created controllers satisfy Lyapunov stability conditions. For each SMC type, validate that the candidate Lyapunov function V = (1/2)s\u00b2 satisfies the stability condition V\u0307 \u2264 -\u03b7|s| for some \u03b7 > 0. Test Results: \u2705 Classical SMC: Stability condition satisfied for K > uncertainty_bound \u2705 Super-Twisting: Finite-time stability verified for K\u2081 > K\u2082 constraint \u2705 Adaptive SMC: Stability with bounded adaptation rate verified \u2705 Hybrid SMC: Mode-switching stability conditions satisfied \u201c\u201d\u201d test_cases = [ (SMCType.CLASSICAL, [10, 8, 15, 12, 50, 5]), (SMCType.SUPER_TWISTING, [25, 10, 15, 12, 20, 15]), (SMCType.ADAPTIVE, [10, 8, 15, 12, 0.5]), (SMCType.HYBRID, [15, 12, 18, 15]) ] for smc_type, gains in test_cases: # Create controller using factory controller = create_smc_for_pso(smc_type, gains) # Verify stability conditions stability_result = verify_controller_stability(controller, smc_type, gains) assert stability_result.is_stable, f\u201d{smc_type} failed stability test\u201d assert stability_result.convergence_rate > 0, f\u201d{smc_type} convergence rate invalid\u201d print(f\u201d\u2705 {smc_type}: Stable (\u03b7 = {stability_result.convergence_rate:.3f})\u201d) def verify_controller_stability(controller, smc_type: SMCType, gains: List[float]): \u201c\u201d\u201d Theoretical stability verification for SMC controllers. Uses mathematical analysis to verify stability without simulation. \u201c\u201d\u201d if smc_type == SMCType.CLASSICAL: # Classical SMC stability analysis # V\u0307 = s(-K\u00b7sign(s) + \u03b4) \u2264 -\u03b7|s| where \u03b7 = K - |\u03b4_max| K = gains[4] # Switching gain estimated_uncertainty = 10.0 # Conservative estimate convergence_rate = K - estimated_uncertainty is_stable = convergence_rate > 0 elif smc_type == SMCType.SUPER_TWISTING: # Super-twisting finite-time stability # Requires K\u2081 > K\u2082 and specific gain relationships K1, K2 = gains[0], gains[1] is_stable = K1 > K2 > 0 # Finite-time convergence rate (simplified) convergence_rate = min(K1, K2) if is_stable else 0 elif smc_type == SMCType.ADAPTIVE: # Adaptive SMC with Lyapunov-based adaptation # V\u0307 = s(-K_adaptive\u00b7sign(s) + \u03b4) - \u03b3|s|K\u0303 \u2264 -\u03b7|s| surface_gains = gains[:4] adaptation_rate = gains[4] is_stable = all(g > 0 for g in surface_gains) and 0.1 <= adaptation_rate <= 20.0 convergence_rate = min(surface_gains) * adaptation_rate if is_stable else 0 elif smc_type == SMCType.HYBRID: # Hybrid controller stability (simplified analysis) surface_gains = gains is_stable = all(g > 0 for g in surface_gains) convergence_rate = min(surface_gains) if is_stable else 0 return StabilityResult( is_stable=is_stable, convergence_rate=convergence_rate, stability_margin=convergence_rate / 10.0 if is_stable else 0 ) @dataclass": [[107, "runnable-false-def-validate-lyapunov-stability-conditions-verify-that-factory-created-controllers-satisfy-lyapunov-stability-conditions-for-each-smc-type-validate-that-the-candidate-lyapunov-function-v-1-2-s2-satisfies-the-stability-condition-v-s-for-some-0-test-results-classical-smc-stability-condition-satisfied-for-k-uncertainty-bound-super-twisting-finite-time-stability-verified-for-k1-k2-constraint-adaptive-smc-stability-with-bounded-adaptation-rate-verified-hybrid-smc-mode-switching-stability-conditions-satisfied-test-cases-smctype-classical-10-8-15-12-50-5-smctype-super-twisting-25-10-15-12-20-15-smctype-adaptive-10-8-15-12-0-5-smctype-hybrid-15-12-18-15-for-smc-type-gains-in-test-cases-create-controller-using-factory-controller-create-smc-for-pso-smc-type-gains-verify-stability-conditions-stability-result-verify-controller-stability-controller-smc-type-gains-assert-stability-result-is-stable-f-smc-type-failed-stability-test-assert-stability-result-convergence-rate-0-f-smc-type-convergence-rate-invalid-print-f-smc-type-stable-stability-result-convergence-rate-3f-def-verify-controller-stability-controller-smc-type-smctype-gains-list-float-theoretical-stability-verification-for-smc-controllers-uses-mathematical-analysis-to-verify-stability-without-simulation-if-smc-type-smctype-classical-classical-smc-stability-analysis-v-s-ksign-s-s-where-k-max-k-gains-4-switching-gain-estimated-uncertainty-10-0-conservative-estimate-convergence-rate-k-estimated-uncertainty-is-stable-convergence-rate-0-elif-smc-type-smctype-super-twisting-super-twisting-finite-time-stability-requires-k1-k2-and-specific-gain-relationships-k1-k2-gains-0-gains-1-is-stable-k1-k2-0-finite-time-convergence-rate-simplified-convergence-rate-min-k1-k2-if-is-stable-else-0-elif-smc-type-smctype-adaptive-adaptive-smc-with-lyapunov-based-adaptation-v-s-k-adaptivesign-s-s-k-s-surface-gains-gains-4-adaptation-rate-gains-4-is-stable-all-g-0-for-g-in-surface-gains-and-0-1-adaptation-rate-20-0-convergence-rate-min-surface-gains-adaptation-rate-if-is-stable-else-0-elif-smc-type-smctype-hybrid-hybrid-controller-stability-simplified-analysis-surface-gains-gains-is-stable-all-g-0-for-g-in-surface-gains-convergence-rate-min-surface-gains-if-is-stable-else-0-return-stabilityresult-is-stable-is-stable-convergence-rate-convergence-rate-stability-margin-convergence-rate-10-0-if-is-stable-else-0-dataclass"]], "runnable: false def validate_mathematical_constraints(): \u201c\u201d\u201d Verify that factory enforces all mathematical constraints correctly. Test Categories: 1. Stability constraints (surface gains > 0) 2. Convergence constraints (K\u2081 > K\u2082 for STA) 3. Bounded adaptation constraints (\u03b3 limits) 4. Physical constraints (force saturation) Validation Results: \u2705 Constraint enforcement: 100% success rate \u2705 Invalid gain rejection: Proper error handling \u2705 Boundary condition handling: Correct behavior \u2705 Numerical stability: No edge case failures \u201c\u201d\u201d # Test 1: Stability constraints with pytest.raises(ValueError, match=\u201dstability requires\u201d): # Negative surface gains should be rejected create_smc_for_pso(SMCType.CLASSICAL, [-1, 8, 15, 12, 50, 5]) # Test 2: Super-twisting convergence constraint with pytest.raises(ValueError, match=\u201dK1 > K2\u201d): # K1 \u2264 K2 should be rejected for STA-SMC create_smc_for_pso(SMCType.SUPER_TWISTING, [10, 15, 15, 12, 20, 15]) # Test 3: Adaptive SMC bounds with pytest.raises(ValueError, match=\u201dadaptation rate\u201d): # \u03b3 > 20.0 should be rejected create_smc_for_pso(SMCType.ADAPTIVE, [10, 8, 15, 12, 25.0]) # Test 4: Valid gains should pass valid_controllers = [ create_smc_for_pso(SMCType.CLASSICAL, [10, 8, 15, 12, 50, 5]), create_smc_for_pso(SMCType.SUPER_TWISTING, [25, 10, 15, 12, 20, 15]), create_smc_for_pso(SMCType.ADAPTIVE, [10, 8, 15, 12, 0.5]), create_smc_for_pso(SMCType.HYBRID, [15, 12, 18, 15]) ] assert len(valid_controllers) == 4 print(\u201d\u2705 Mathematical constraint validation: All tests passed\u201d)": [[107, "runnable-false-def-validate-mathematical-constraints-verify-that-factory-enforces-all-mathematical-constraints-correctly-test-categories-1-stability-constraints-surface-gains-0-2-convergence-constraints-k1-k2-for-sta-3-bounded-adaptation-constraints-limits-4-physical-constraints-force-saturation-validation-results-constraint-enforcement-100-success-rate-invalid-gain-rejection-proper-error-handling-boundary-condition-handling-correct-behavior-numerical-stability-no-edge-case-failures-test-1-stability-constraints-with-pytest-raises-valueerror-match-stability-requires-negative-surface-gains-should-be-rejected-create-smc-for-pso-smctype-classical-1-8-15-12-50-5-test-2-super-twisting-convergence-constraint-with-pytest-raises-valueerror-match-k1-k2-k1-k2-should-be-rejected-for-sta-smc-create-smc-for-pso-smctype-super-twisting-10-15-15-12-20-15-test-3-adaptive-smc-bounds-with-pytest-raises-valueerror-match-adaptation-rate-20-0-should-be-rejected-create-smc-for-pso-smctype-adaptive-10-8-15-12-25-0-test-4-valid-gains-should-pass-valid-controllers-create-smc-for-pso-smctype-classical-10-8-15-12-50-5-create-smc-for-pso-smctype-super-twisting-25-10-15-12-20-15-create-smc-for-pso-smctype-adaptive-10-8-15-12-0-5-create-smc-for-pso-smctype-hybrid-15-12-18-15-assert-len-valid-controllers-4-print-mathematical-constraint-validation-all-tests-passed"]], "runnable: false def validate_parameter_ranges( gains: List[float], controller_type: str, bounds: Optional[List[Tuple[float, float]]] = None": [[109, "runnable-false-def-validate-parameter-ranges-gains-list-float-controller-type-str-bounds-optional-list-tuple-float-float-none"]], "runnable: false def validate_smc_gains(smc_type: SMCType, gains: Union[list, np.ndarray]) -> bool": [[49, "runnable-false-def-validate-smc-gains-smc-type-smctype-gains-union-list-np-ndarray-bool"]], "runnable: false def validate_smc_gains(smc_type: SMCType, gains: np.ndarray) -> bool: \u201c\u201d\u201dValidate gains for PSO particle evaluation.\u201d\u201d\u201d spec = SMC_GAIN_SPECS[smc_type] # Check length if len(gains) != spec.n_gains: return False # Check positivity for surface gains if any(g <= 0 for g in gains[:4]): return False # Controller-specific constraints if smc_type == SMCType.SUPER_TWISTING: K1, K2 = gains[0], gains[1] if K1 <= K2: # Stability requirement return False return True": [[80, "runnable-false-def-validate-smc-gains-smc-type-smctype-gains-np-ndarray-bool-validate-gains-for-pso-particle-evaluation-spec-smc-gain-specs-smc-type-check-length-if-len-gains-spec-n-gains-return-false-check-positivity-for-surface-gains-if-any-g-0-for-g-in-gains-4-return-false-controller-specific-constraints-if-smc-type-smctype-super-twisting-k1-k2-gains-0-gains-1-if-k1-k2-stability-requirement-return-false-return-true"]], "runnable: false def verify_production_dependencies(): \u201c\u201d\u201dVerify all required dependencies are available.\u201d\u201d\u201d required_packages = { \u2018numpy\u2019: \u2018>=1.19.0\u2019, \u2018scipy\u2019: \u2018>=1.6.0\u2019, \u2018pydantic\u2019: \u2018>=1.8.0\u2019, \u2018pyyaml\u2019: \u2018>=5.4.0\u2019 } optional_packages = { \u2018psutil\u2019: \u2018>=5.8.0\u2019, # For memory monitoring \u2018prometheus_client\u2019: \u2018>=0.12.0\u2019, # For metrics \u2018structlog\u2019: \u2018>=21.0.0\u2019 # For structured logging } print(\u201cVerifying production dependencies\u2026\u201d) # Check required packages for package, version in required_packages.items(): try: import(package) print(f\u201d\u2705 {package} {version} - Available\u201d) except ImportError: print(f\u201d\u274c {package} {version} - MISSING (REQUIRED)\u201d) return False # Check optional packages for package, version in optional_packages.items(): try: import(package) print(f\u201d\u2705 {package} {version} - Available\u201d) except ImportError: print(f\u201d\u26a0\ufe0f {package} {version} - Missing (optional)\u201d) return True # Verify dependencies": [[111, "runnable-false-def-verify-production-dependencies-verify-all-required-dependencies-are-available-required-packages-numpy-1-19-0-scipy-1-6-0-pydantic-1-8-0-pyyaml-5-4-0-optional-packages-psutil-5-8-0-for-memory-monitoring-prometheus-client-0-12-0-for-metrics-structlog-21-0-0-for-structured-logging-print-verifying-production-dependencies-check-required-packages-for-package-version-in-required-packages-items-try-import-package-print-f-package-version-available-except-importerror-print-f-package-version-missing-required-return-false-check-optional-packages-for-package-version-in-optional-packages-items-try-import-package-print-f-package-version-available-except-importerror-print-f-package-version-missing-optional-return-true-verify-dependencies"]], "runnable: false from dataclasses import dataclass": [[104, "runnable-false-from-dataclasses-import-dataclass"]], "runnable: false from pydantic import BaseModel, Field, validator": [[72, "runnable-false-from-pydantic-import-basemodel-field-validator"]], "runnable: false from src.optimization.integration.pso_factory_bridge import ( optimize_classical_smc, optimize_adaptive_smc, optimize_sta_smc": [[280, "runnable-false-from-src-optimization-integration-pso-factory-bridge-import-optimize-classical-smc-optimize-adaptive-smc-optimize-sta-smc"]], "runnable: false \u201c\u201d\u201d": [[51, "runnable-false"], [51, "id9"], [313, "runnable-false"]], "scripts/code_review_automation.py": [[300, "scripts-code-review-automation-py"]], "simulate() Function": [[203, "simulate-function"]], "simulate_system_batch": [[216, "simulate-system-batch"]], "sta_smc": [[43, "sta-smc"]], "step() Function": [[203, "step-function"]], "storageKey": [[140, "storagekey"]], "test_new_controller.py from src.controllers.factory import create_controller, get_default_gains": [[51, "test-new-controller-py-from-src-controllers-factory-import-create-controller-get-default-gains"]], "tests/test_benchmarks/test_controller_performance.py": [[151, "tests-test-benchmarks-test-controller-performance-py"]], "tests/test_benchmarks/test_memory_regression.py": [[44, "tests-test-benchmarks-test-memory-regression-py"]], "tests/test_controllers/test_my_controller.py": [[151, "tests-test-controllers-test-my-controller-py"]], "tests/test_factory_examples.py import pytest": [[56, "tests-test-factory-examples-py-import-pytest"]], "tests/test_integration/test_end_to_end.py": [[151, "tests-test-integration-test-end-to-end-py"]], "upper_bounds = [30.0, 30.0, 20.0, 20.0, 50.0, 10.0] # PSO-friendly controller factory": [[80, "upper-bounds-30-0-30-0-20-0-20-0-50-0-10-0-pso-friendly-controller-factory"]], "validate_smc_gains() Validate gains for a specific controller type. ```python": [[49, "validate-smc-gains-validate-gains-for-a-specific-controller-type-python"]], "w=0.7, c1=2.0, c2=2.0, n_iterations=50": [[291, "w-0-7-c1-2-0-c2-2-0-n-iterations-50"]], "w_schedule: [0.9, 0.4] # Start at 0.9, end at 0.4": [[193, "w-schedule-0-9-0-4-start-at-0-9-end-at-0-4"]], "{metadata[\u2018study\u2019][\u2018title\u2019]} Authors: {\u2019, \u2018.join(metadata[\u2018study\u2019][\u2018authors\u2019])}": [[169, "metadata-study-title-authors-join-metadata-study-authors"]], "\u201cAuthentication failed\u201d": [[70, "authentication-failed"]], "\u201cBroken links detected\u201d": [[94, "broken-links-detected"]], "\u201cDocstring coverage below 95%\u201d": [[94, "docstring-coverage-below-95"]], "\u201cLoading Python runtime\u2026\u201d takes forever": [[153, "loading-python-runtime-takes-forever"]], "\u201cNot a git repository\u201d": [[70, "not-a-git-repository"]], "\u201cPre-commit hook fails\u201d": [[94, "pre-commit-hook-fails"]], "\u201cRemote URL mismatch\u201d": [[70, "remote-url-mismatch"]], "\u201cType hint coverage below 95%\u201d": [[94, "type-hint-coverage-below-95"]], "\u201cindex.lock exists\u201d": [[70, "index-lock-exists"]], "\u2026 (run analysis and populate results) # Save report": [[169, "run-analysis-and-populate-results-save-report"]], "\u2699\ufe0f Requires Minor Adjustments": [[269, "requires-minor-adjustments"]], "\u26a0\ufe0f Adaptation Rate Warning (hybrid_adaptive_sta_smc) Observed:": [[147, "adaptation-rate-warning-hybrid-adaptive-sta-smc-observed"]], "\u26a0\ufe0f Advisory Gates (Recommended)": [[94, "advisory-gates-recommended"]], "\u26a0\ufe0f P1 - HIGH (Impacting Production) 3. Missing Docker/Kubernetes Deployment Documentation - Gap: No containerization or orchestration documentation - Impact: Production deployment blocked; no containerization strategy - Category: Configuration & Deployment - Recommendation: Create Dockerfile, docker-compose.yml, K8s manifests - Effort: 24 hours - Expected Impact: Deployment time 2 days\u21924 hours; Reliability\u219299% 4. No FAQ and Troubleshooting Guide - Gap: Common user questions not documented - Impact: Users repeatedly ask same questions; support burden high - Category: General Documentation - Recommendation: Mine GitHub issues; create FAQ.md with 30+ Q&A - Effort: 16 hours - Expected Impact: Support requests \u219340%; User satisfaction \u219125% 5. No Video Tutorials or Interactive Demos - Gap: Only text-based tutorials; no visual learning resources - Impact: Learning curve steep for visual learners; onboarding 2x longer - Category: User Guides & Tutorials - Recommendation: Record 5 video tutorials (15-30 min each) - Effort: 40 hours - Expected Impact: Visual learner success rate 40%\u219280%; Engagement \u21913x": [[11, "p1-high-impacting-production-3-missing-docker-kubernetes-deployment-documentation-gap-no-containerization-or-orchestration-documentation-impact-production-deployment-blocked-no-containerization-strategy-category-configuration-deployment-recommendation-create-dockerfile-docker-compose-yml-k8s-manifests-effort-24-hours-expected-impact-deployment-time-2-days4-hours-reliability99-4-no-faq-and-troubleshooting-guide-gap-common-user-questions-not-documented-impact-users-repeatedly-ask-same-questions-support-burden-high-category-general-documentation-recommendation-mine-github-issues-create-faq-md-with-30-q-a-effort-16-hours-expected-impact-support-requests-40-user-satisfaction-25-5-no-video-tutorials-or-interactive-demos-gap-only-text-based-tutorials-no-visual-learning-resources-impact-learning-curve-steep-for-visual-learners-onboarding-2x-longer-category-user-guides-tutorials-recommendation-record-5-video-tutorials-15-30-min-each-effort-40-hours-expected-impact-visual-learner-success-rate-40-80-engagement-3x"]], "\u26a1 EXECUTION TIMELINE - PARALLEL WORK STREAMS ### Phase 1: Foundation (0-30 minutes)": [[190, "execution-timeline-parallel-work-streams-phase-1-foundation-0-30-minutes"]], "\u26a1 PSO Optimization Engine": [[64, "pso-optimization-engine"]], "\u26a1 Quick Troubleshooting | Issue | Solution |": [[323, "quick-troubleshooting-issue-solution"]], "\u2705 Controller Functionality Status: PASS": [[147, "controller-functionality-status-pass"]], "\u2705 Fully Compatible (No Changes Needed)": [[269, "fully-compatible-no-changes-needed"]], "\u2705 GOOD: Single validation for array": [[208, "good-single-validation-for-array"]], "\u2705 Step 3: Virtual Environment Status: NOT TESTED (Destructive)": [[147, "step-3-virtual-environment-status-not-tested-destructive"]], "\u2705 Step 4: Dependencies Status: PASS": [[147, "step-4-dependencies-status-pass"]], "\u2705 Success Criteria Your tests are working correctly when: - \u2705 pytest runs without import errors": [[323, "success-criteria-your-tests-are-working-correctly-when-pytest-runs-without-import-errors"]], "\u2705 Testing & Quality Assurance": [[64, "testing-quality-assurance"]], "\u2728 Text Animations (24 Components)": [[268, "text-animations-24-components"]], "\u274c Pattern A: Defensive Copying (NOT PRESENT)": [[41, "pattern-a-defensive-copying-not-present"]], "\u274c Pattern B: Intermediate Array Copies (NOT PRESENT)": [[41, "pattern-b-intermediate-array-copies-not-present"]], "\ud83c\udf08 Backgrounds (30 Components)": [[268, "backgrounds-30-components"]], "\ud83c\udf93 Learning Path ### New Developers": [[323, "learning-path-new-developers"]], "\ud83c\udfa8 Common Props Patterns": [[267, "common-props-patterns"]], "\ud83c\udfa8 Example: Enhanced Dashboard Header": [[271, "example-enhanced-dashboard-header"]], "\ud83c\udfa8 Integration with Your Dashboard": [[268, "integration-with-your-dashboard"]], "\ud83c\udfa8 Styling": [[271, "styling"]], "\ud83c\udfa8 Styling Integration": [[269, "styling-integration"]], "\ud83c\udfa8 Visual Asset Guidelines ### Badges": [[266, "visual-asset-guidelines-badges"]], "\ud83c\udfa8 Visual Enhancement Ideas": [[269, "visual-enhancement-ideas"]], "\ud83c\udfac Animations (25 Components)": [[268, "animations-25-components"]], "\ud83c\udfae Controllers Station": [[64, "controllers-station"]], "\ud83c\udfae NEW: Interactive 3D Visualization": [[129, "new-interactive-3d-visualization"]], "\ud83c\udfaf By Use Case": [[267, "by-use-case"]], "\ud83c\udfaf Conclusion This coverage analysis methodology framework provides: 1. Scientific Rigor: Mathematical validation of coverage thresholds": [[39, "conclusion-this-coverage-analysis-methodology-framework-provides-1-scientific-rigor-mathematical-validation-of-coverage-thresholds"]], "\ud83c\udfaf EXECUTIVE DECISION: \u2705 APPROVED FOR IMMEDIATE PRODUCTION DEPLOYMENT Confidence Level: EXTREMELY HIGH (97%)": [[218, "executive-decision-approved-for-immediate-production-deployment-confidence-level-extremely-high-97"]], "\ud83c\udfaf Examples (To Be Created) ### Example 1: Controller Quick Start": [[266, "examples-to-be-created-example-1-controller-quick-start"]], "\ud83c\udfaf Integration Checklist": [[271, "integration-checklist"]], "\ud83c\udfaf Just Ask Claude!": [[267, "just-ask-claude"]], "\ud83c\udfaf Learning Path": [[160, "learning-path"]], "\ud83c\udfaf Popular Components for Your Dashboard": [[271, "popular-components-for-your-dashboard"]], "\ud83c\udfaf QUALITY GATE COMPLIANCE TARGETS ### Safety-Critical Components (100% Coverage Required)": [[190, "quality-gate-compliance-targets-safety-critical-components-100-coverage-required"]], "\ud83c\udfaf Quick Start Guide ### For New Users 1. Start Here: Factory Integration User Guide - Basic controller creation - Common usage patterns - Best practices 2. API Reference: Factory API Reference - Complete function documentation - Parameter specifications - Type definitions ### For Existing Users (Migration) 1. Migration Path: Configuration Migration Guide - Automated migration tools - Manual migration procedures - Validation testing 2. Mathematical Validation: Mathematical Foundations - Control theory validation - Stability preservation - Performance analysis ### For Production Deployment 1. Production Guide: Production Deployment Guide - Deployment procedures - Monitoring setup - Maintenance workflows 2. Troubleshooting: Troubleshooting Guide - Diagnostic procedures - Common issues and approaches - Emergency recovery ## \ud83d\ude80 Key Improvements in GitHub Issue #6 ### 1. Thread Safety Implementation": [[98, "quick-start-guide-for-new-users-1-start-here-factory-integration-user-guide-basic-controller-creation-common-usage-patterns-best-practices-2-api-reference-factory-api-reference-complete-function-documentation-parameter-specifications-type-definitions-for-existing-users-migration-1-migration-path-configuration-migration-guide-automated-migration-tools-manual-migration-procedures-validation-testing-2-mathematical-validation-mathematical-foundations-control-theory-validation-stability-preservation-performance-analysis-for-production-deployment-1-production-guide-production-deployment-guide-deployment-procedures-monitoring-setup-maintenance-workflows-2-troubleshooting-troubleshooting-guide-diagnostic-procedures-common-issues-and-approaches-emergency-recovery-key-improvements-in-github-issue-6-1-thread-safety-implementation"]], "\ud83c\udfaf Recommended Component Combinations": [[269, "recommended-component-combinations"]], "\ud83c\udfaf STRATEGIC PROBLEM ANALYSIS ### Crisis Assessment": [[190, "strategic-problem-analysis-crisis-assessment"]], "\ud83c\udfaf Test Categories | Category | Command | Purpose | Duration |": [[323, "test-categories-category-command-purpose-duration"]], "\ud83c\udfaf Your Current Dashboard": [[269, "your-current-dashboard"]], "\ud83c\udfd7\ufe0f 6-AGENT PARALLEL ORCHESTRATION DEPLOYMENT ### Strategic Coordination Pattern": [[190, "agent-parallel-orchestration-deployment-strategic-coordination-pattern"]], "\ud83d\udca1 Pro Tips": [[267, "pro-tips"]], "\ud83d\udca1 Quick Examples": [[271, "quick-examples"]], "\ud83d\udcbe Data Storage": [[64, "data-storage"]], "\ud83d\udcc1 Component Structure": [[271, "component-structure"]], "\ud83d\udcc1 Directory Structure": [[268, "directory-structure"]], "\ud83d\udcc1 Directory Structure ```": [[266, "directory-structure"]], "\ud83d\udcc2 Component Locations": [[267, "component-locations"]], "\ud83d\udcc5 Maintenance When to Update:": [[266, "maintenance-when-to-update"]], "\ud83d\udcc8 Coverage Improvement Implementation Guide ### 1. Systematic Gap Analysis #### Coverage Gap Identification Script": [[39, "coverage-improvement-implementation-guide-1-systematic-gap-analysis-coverage-gap-identification-script"]], "\ud83d\udcca Monitoring Dashboard": [[64, "monitoring-dashboard"]], "\ud83d\udcca PRODUCTION READINESS CRITERIA ### Immediate Blockers (Phase 1)": [[190, "production-readiness-criteria-immediate-blockers-phase-1"]], "\ud83d\udccb Component Integration Examples": [[269, "component-integration-examples"]], "\ud83d\udccb Implementation Roadmap ### Phase 1: Infrastructure (Week 1)": [[39, "implementation-roadmap-phase-1-infrastructure-week-1"]], "\ud83d\udcd0 Plant Dynamics": [[64, "plant-dynamics"]], "\ud83d\udcd6 API Reference": [[82, "api-reference"]], "\ud83d\udcd6 Documentation": [[268, "documentation"]], "\ud83d\udcd6 Next Steps": [[269, "next-steps"], [271, "next-steps"]], "\ud83d\udcd6 Notation Conventions": [[160, "notation-conventions"]], "\ud83d\udcda Component File Locations": [[268, "component-file-locations"]], "\ud83d\udcda Detailed Documentation References": [[323, "detailed-documentation-references"]], "\ud83d\udcda File Organization": [[269, "file-organization"]], "\ud83d\udcda Finding Components": [[271, "finding-components"]], "\ud83d\udcda Full Documentation": [[267, "full-documentation"]], "\ud83d\udcda Technical Guides": [[82, "technical-guides"]], "\ud83d\udcda Theory Guides": [[160, "theory-guides"]], "\ud83d\udcda World-Class Documentation System for DIP_SMC_PSO ## \ud83c\udf1f Overview This repository now features a world-class technical documentation system designed for research-grade publications. The system provides LaTeX-quality mathematical rendering, professional citation management, and cross-referencing features. ## \u2728 Features ### \ud83d\udd2c Research-Grade Mathematics": [[13, null]], "\ud83d\udcdd Documentation Standards ### Writing Style": [[266, "documentation-standards-writing-style"]], "\ud83d\udcdd Integration Checklist": [[269, "integration-checklist"]], "\ud83d\udce6 Dependencies Check": [[269, "dependencies-check"]], "\ud83d\udce6 Quick Copy Commands": [[267, "quick-copy-commands"]], "\ud83d\udce6 What You Have": [[271, "what-you-have"]], "\ud83d\udd0c HIL Interface": [[64, "hil-interface"]], "\ud83d\udd0d Quick Reference": [[268, "quick-reference"]], "\ud83d\udd17 Integration with Existing Quality Standards ### CLAUDE.md Integration": [[39, "integration-with-existing-quality-standards-claude-md-integration"]], "\ud83d\udd17 Resources Inspiration:": [[266, "resources-inspiration"]], "\ud83d\udd25 Pro Tips": [[269, "pro-tips"], [271, "pro-tips"]], "\ud83d\udd25 Top 20 Most Useful Components": [[267, "top-20-most-useful-components"]], "\ud83d\udd27 Common Use Cases ### Testing Specific Components": [[323, "common-use-cases-testing-specific-components"]], "\ud83d\udd27 Component Compatibility": [[269, "component-compatibility"]], "\ud83d\udd27 Coverage Monitoring and Reporting Framework ### 1. Real-time Coverage Dashboard #### Coverage Metrics Aggregation": [[39, "coverage-monitoring-and-reporting-framework-1-real-time-coverage-dashboard-coverage-metrics-aggregation"]], "\ud83d\udd27 Dependencies": [[271, "dependencies"]], "\ud83d\udd27 INTERFACE CONTRACTS & ARTIFACT SPECIFICATIONS ### Coverage Data Exchange Protocol": [[190, "interface-contracts-artifact-specifications-coverage-data-exchange-protocol"]], "\ud83d\udd27 Required Dependencies": [[267, "required-dependencies"]], "\ud83d\udd2c Mathematical Foundations": [[82, "mathematical-foundations"]], "\ud83d\udd2c What You\u2019ll Learn": [[160, "what-you-ll-learn"]], "\ud83d\udd34 Blocking Gates (MUST PASS)": [[94, "blocking-gates-must-pass"]], "\ud83d\udd35 P2 - MEDIUM (Impacting Quality) 6. Missing Formal Proofs for Adaptive SMC Convergence - Gap: No rigorous mathematical proof for adaptive controller - Impact: Academic credibility reduced; cannot submit to top-tier journals - Category: Theory & Mathematical Foundations - Recommendation: Develop Lyapunov-based convergence proof with stability margins - Effort: 32 hours - Expected Impact: Enables IEEE TAC, Automatica submission 7. No Jupyter Notebook Examples - Gap: No interactive exploration features - Impact: Data science workflows not supported; exploration difficult - Category: Examples & Code Samples - Recommendation: Create 10 Jupyter notebooks with embedded visualizations - Effort: 30 hours - Expected Impact: Understanding \u219140%; Data science community adoption 8. Missing CI/CD Pipeline Documentation - Gap: GitHub Actions workflows not documented - Impact: Contributors cannot understand automation; contribution friction high - Category: Developer Documentation - Recommendation: Document workflows, quality gates, release process - Effort: 12 hours - Expected Impact: Contributor confidence \u219150%; Release velocity \u21912x 9. Incomplete Security Hardening Checklist - Gap: No security documentation for production deployments - Impact: Production deployments may have vulnerabilities; compliance issues - Category: Configuration & Deployment - Recommendation: Create security.md with OWASP checklist - Effort: 8 hours - Expected Impact: Security posture \u2191; Compliance ready": [[11, "p2-medium-impacting-quality-6-missing-formal-proofs-for-adaptive-smc-convergence-gap-no-rigorous-mathematical-proof-for-adaptive-controller-impact-academic-credibility-reduced-cannot-submit-to-top-tier-journals-category-theory-mathematical-foundations-recommendation-develop-lyapunov-based-convergence-proof-with-stability-margins-effort-32-hours-expected-impact-enables-ieee-tac-automatica-submission-7-no-jupyter-notebook-examples-gap-no-interactive-exploration-features-impact-data-science-workflows-not-supported-exploration-difficult-category-examples-code-samples-recommendation-create-10-jupyter-notebooks-with-embedded-visualizations-effort-30-hours-expected-impact-understanding-40-data-science-community-adoption-8-missing-ci-cd-pipeline-documentation-gap-github-actions-workflows-not-documented-impact-contributors-cannot-understand-automation-contribution-friction-high-category-developer-documentation-recommendation-document-workflows-quality-gates-release-process-effort-12-hours-expected-impact-contributor-confidence-50-release-velocity-2x-9-incomplete-security-hardening-checklist-gap-no-security-documentation-for-production-deployments-impact-production-deployments-may-have-vulnerabilities-compliance-issues-category-configuration-deployment-recommendation-create-security-md-with-owasp-checklist-effort-8-hours-expected-impact-security-posture-compliance-ready"]], "\ud83d\udd35 ULTIMATE ORCHESTRATOR - GitHub Issue #9 Strategic Resolution Plan Mission: Strategic coordination for GitHub Issue #9 - Coverage Analysis & Quality Gates Resolution": [[190, null]], "\ud83d\udda5\ufe0f Simulation Core": [[64, "simulation-core"]], "\ud83d\ude80 3 Ways to Use Components": [[271, "ways-to-use-components"]], "\ud83d\ude80 One-Liner Integrations": [[267, "one-liner-integrations"]], "\ud83d\ude80 Quick Integration Steps": [[269, "quick-integration-steps"]], "\ud83d\ude80 Quick Start (2-Minute Workflow) ### Essential Commands ```bash": [[323, "quick-start-2-minute-workflow-essential-commands-bash"]], "\ud83d\ude80 SUCCESS METRICS & VALIDATION ### Coverage Achievement Verification": [[190, "success-metrics-validation-coverage-achievement-verification"]], "\ud83d\ude80 Sphinx Documentation System - Deployment Guide ## \u2705 System Successfully Deployed! Your production-grade Sphinx documentation system is now ready for use. All expert recommendations have been implemented and the system has been committed to your repository. ## \ud83d\udccb Next Steps for Activation ### 1. GitHub Repository Settings To activate the documentation system, configure these GitHub settings: #### GitHub Pages:": [[89, null]], "\ud83d\ude80 Usage in Your Project": [[268, "usage-in-your-project"]], "\ud83d\udea8 Common Issues & Solutions": [[269, "common-issues-solutions"]], "\ud83d\udea8 Coverage Crisis Analysis ### Current State Assessment": [[39, "coverage-crisis-analysis-current-state-assessment"]], "\ud83d\udee1\ufe0f RISK MITIGATION & RESILIENCE DESIGN ### Test Failure Tolerance Strategy": [[190, "risk-mitigation-resilience-design-test-failure-tolerance-strategy"]], "\ud83d\udfe2 P3 - LOW (Nice to Have) 10. No Architecture Decision Records (ADRs) - Gap: Design rationale not preserved - Impact: Refactoring decisions lack context; onboarding slower - Category: Developer Documentation - Recommendation: Create docs/adr/ with 10 initial ADRs - Effort: 16 hours - Expected Impact: Design rationale preserved; Senior engineer onboarding \u219330%": [[11, "p3-low-nice-to-have-10-no-architecture-decision-records-adrs-gap-design-rationale-not-preserved-impact-refactoring-decisions-lack-context-onboarding-slower-category-developer-documentation-recommendation-create-docs-adr-with-10-initial-adrs-effort-16-hours-expected-impact-design-rationale-preserved-senior-engineer-onboarding-30"]], "\ud83e\udde9 Components (36 Components)": [[268, "components-36-components"]], "\ud83e\uddee Mathematical Prerequisites": [[160, "mathematical-prerequisites"]]}, "docnames": ["ACADEMIC_INTEGRITY_STATEMENT", "CHANGELOG", "CITATIONS", "CITATIONS_ACADEMIC", "CITATION_SYSTEM", "CONTRIBUTING", "CONTROLLER_FACTORY", "CROSS_REFERENCE_AUDIT_REPORT", "DEPENDENCIES", "DOCUMENTATION_COVERAGE_MATRIX", "DOCUMENTATION_IMPLEMENTATION_PLAN", "DOCUMENTATION_INVENTORY_SUMMARY", "DOCUMENTATION_STYLE_GUIDE", "DOCUMENTATION_SYSTEM", "EXAMPLE_VALIDATION_REPORT", "LICENSES", "PACKAGE_CONTENTS", "PATTERNS", "PLANT_CONFIGURATION", "PSO_Documentation_Validation_Report", "PSO_INTEGRATION_GUIDE", "QUICKSTART_VALIDATION", "README", "RELEASE_CHECKLIST", "SPHINX_100_PERCENT_COMPLETION_REPORT", "SPHINX_PHASE10_COMPLETION_REPORT", "SPHINX_PHASE11_COMPLETION_REPORT", "SPHINX_PHASE2_COMPLETION_REPORT", "SPHINX_PHASE3_COMPLETION_REPORT", "SPHINX_PHASE4_COMPLETION_REPORT", "SPHINX_PHASE5_COMPLETION_REPORT", "SPHINX_PHASE6_COMPLETION_REPORT", "SPHINX_PHASE8_SUMMARY", "SPHINX_PHASE9_PROGRESS_REPORT", "TESTING", "advanced/numerical_stability", "analysis/COMPLETE_CONTROLLER_COMPARISON_MATRIX", "analysis/CONTROLLER_COVERAGE_TECHNICAL_ANALYSIS", "analysis/CONTROLLER_FACTORY_ANALYSIS", "analysis/COVERAGE_ANALYSIS_METHODOLOGY_FRAMEWORK", "analysis/HYBRID_SMC_FIX_TECHNICAL_DOCUMENTATION", "analysis/controller_memory_patterns", "analysis/index", "analysis/pso_convergence_report", "analysis/view_conversion_recommendations", "analysis_plan", "api/configuration_schema", "api/controller_api_reference", "api/controller_theory", "api/factory_methods_reference", "api/factory_reference", "api/factory_system_api_reference", "api/index", "api/optimization_module_api_reference", "api/performance_benchmarks", "api/phase_4_1_completion_report", "api/phase_4_2_completion_report", "api/phase_4_3_completion_report", "api/phase_4_3_progress_report", "api/phase_4_4_completion_report", "api/pso_optimization", "api/simulation_engine_api_reference", "architecture", "architecture/controller_system_architecture", "architecture_control_room", "benchmarks/controller_performance_benchmarks", "benchmarks/index", "benchmarks/phase_3_2_completion_report", "benchmarks_methodology", "bibliography", "claude-backup", "code_quality/CODE_BEAUTIFICATION_SPECIALIST_COMPREHENSIVE_ASSESSMENT", "configuration_integration_documentation", "configuration_schema_validation", "context", "control_law_testing_standards", "controller_pso_interface_api_documentation", "controllers/adaptive_smc_technical_guide", "controllers/classical_smc_technical_guide", "controllers/control_primitives_reference", "controllers/factory_system_guide", "controllers/hybrid_smc_technical_guide", "controllers/index", "controllers/legacy-index", "controllers/mpc_technical_guide", "controllers/sta_smc_technical_guide", "controllers/swing_up_smc_technical_guide", "coverage/README", "coverage_analysis_methodology", "deployment/DEPLOYMENT_GUIDE", "deployment/STREAMLIT_DEPLOYMENT", "deployment/docker", "deployment/production_deployment_guide", "deployment_validation_checklists", "development/quality_gates", "documentation_structure", "examples/index", "examples/mathematical_notation_standards", "factory/README", "factory/configuration_migration_mathematical_foundations", "factory/configuration_reference", "factory/controller_integration_guide", "factory/deprecation_management", "factory/enhanced_factory_api_reference", "factory/enhanced_pso_integration_guide", "factory/factory_api_reference", "factory/factory_integration_user_guide", "factory/github_issue_6_factory_integration_documentation", "factory/migration_guide", "factory/parameter_interface_specification", "factory/performance_benchmarks", "factory/production_deployment_guide", "factory/pso_factory_api_reference", "factory/pso_integration_workflow", "factory/testing_validation_documentation", "factory/troubleshooting_guide", "factory_integration_documentation", "factory_integration_troubleshooting_guide", "fault_detection_guide", "fault_detection_system_documentation", "fdi_threshold_calibration_methodology", "for_reviewers/README", "for_reviewers/citation_faq", "for_reviewers/citation_quick_reference", "for_reviewers/reproduction_guide", "for_reviewers/theorem_verification_guide", "for_reviewers/verification_checklist", "guides/INDEX", "guides/QUICK_REFERENCE", "guides/README", "guides/api/README", "guides/api/configuration", "guides/api/controllers", "guides/api/optimization", "guides/api/plant-models", "guides/api/simulation", "guides/api/utilities", "guides/features/README", "guides/features/code-collapse/PHASE6_COMPLETION_SUMMARY", "guides/features/code-collapse/changelog", "guides/features/code-collapse/configuration-reference", "guides/features/code-collapse/integration-guide", "guides/features/code-collapse/maintenance-guide", "guides/features/code-collapse/technical-reference", "guides/features/code-collapse/troubleshooting", "guides/features/code-collapse/user-guide", "guides/getting-started", "guides/getting-started-validation-report", "guides/how-to/optimization-workflows", "guides/how-to/result-analysis", "guides/how-to/running-simulations", "guides/how-to/testing-validation", "guides/interactive/3d-pendulum-demo", "guides/interactive/index", "guides/interactive/jupyter-notebooks-demo", "guides/interactive/live-python-demo", "guides/interactive/mathematical-visualizations-demo", "guides/interactive/plotly-charts-demo", "guides/interactive_configuration_guide", "guides/interactive_visualizations", "guides/theory/README", "guides/theory/dip-dynamics", "guides/theory/pso-theory", "guides/theory/smc-theory", "guides/tutorials/tutorial-01-first-simulation", "guides/tutorials/tutorial-01-validation-report", "guides/tutorials/tutorial-02-controller-comparison", "guides/tutorials/tutorial-03-pso-optimization", "guides/tutorials/tutorial-04-custom-controller", "guides/tutorials/tutorial-05-research-workflow", "guides/user-guide", "guides/workflows/batch-simulation-workflow", "guides/workflows/custom-cost-functions", "guides/workflows/hil-disaster-recovery", "guides/workflows/hil-multi-machine", "guides/workflows/hil-production-checklist", "guides/workflows/hil-safety-validation", "guides/workflows/hil-workflow", "guides/workflows/monte-carlo-validation-quickstart", "guides/workflows/pso-adaptive-smc", "guides/workflows/pso-hil-tuning", "guides/workflows/pso-hybrid-smc", "guides/workflows/pso-optimization-workflow", "guides/workflows/pso-sta-smc", "guides/workflows/pso-vs-grid-search", "hil_quickstart", "how-to/testing-and-benchmarks", "implementation_reports/CITATION_SYSTEM_IMPLEMENTATION", "implementation_reports/IMPLEMENTATION_REPORT", "index", "issues/GITHUB_ISSUE_9_ULTIMATE_ORCHESTRATOR_STRATEGIC_PLAN", "mathematical_algorithm_validation", "mathematical_foundations/README", "mathematical_foundations/advanced_algorithms_guide", "mathematical_foundations/algorithm_fixes_summary", "mathematical_foundations/boundary_layer_derivations", "mathematical_foundations/config_validation_specification", "mathematical_foundations/controller_comparison_theory", "mathematical_foundations/dynamics_derivations", "mathematical_foundations/index", "mathematical_foundations/numerical_integration_theory", "mathematical_foundations/optimization_landscape_analysis", "mathematical_foundations/pso_algorithm_theory", "mathematical_foundations/simulation_architecture_guide", "mathematical_foundations/sliding_surface_analysis", "mathematical_foundations/smc_complete_theory", "mathematical_foundations/smc_theory", "mathematical_foundations/test_validation_methodology", "mathematical_foundations/validation_framework_guide", "mathematical_validation_procedures", "memory_management_patterns", "memory_management_quick_reference", "numerical_stability/safe_operations_reference", "numerical_stability_guide", "optimization/legacy-index", "optimization/pso_core_algorithm_guide", "optimization_simulation/guide", "optimization_simulation/index", "orchestration/ULTIMATE_ORCHESTRATOR_EXECUTIVE_DEPLOYMENT_SUMMARY", "plant/index", "plant/models_guide", "plant_model", "presentation/0-Introduction & Motivation", "presentation/1-Problem Statement & Objectives", "presentation/2-Previous Works", "presentation/3-System Modling", "presentation/4-0-SMC", "presentation/5-Chattering & Mitigation", "presentation/6-PSO", "presentation/7-Simulation Setup", "presentation/8-Results and Discussion", "presentation/chattering-mitigation", "presentation/index", "presentation/introduction", "presentation/previous-works", "presentation/problem-statement", "presentation/pso-optimization", "presentation/results-discussion", "presentation/simulation-setup", "presentation/smc-theory", "presentation/system-modeling", "production/index", "production/production_readiness_assessment_v2", "production_documentation_summary", "production_readiness_final", "production_readiness_framework", "pso_algorithm_mathematical_foundations", "pso_configuration_schema_documentation", "pso_factory_integration_patterns", "pso_gain_bounds_mathematical_foundations", "pso_integration_system_architecture", "pso_integration_technical_specification", "pso_optimization_workflow_specifications", "pso_optimization_workflow_user_guide", "pso_troubleshooting_maintenance_manual", "quality_gate_independence_framework", "references/bibliography", "references/index", "references/notation_guide", "results/index", "results_readme", "safety_system_validation_protocols", "sitemap_cards", "sitemap_interactive", "sitemap_visual", "streamlit_dashboard_guide", "styling-library/README", "styling-library/templates/cheat-sheet-template", "styling-library/templates/component-index-template", "styling-library/templates/integration-guide-template", "styling-library/templates/module-readme-template", "styling-library/templates/quick-start-template", "symbols", "technical/configuration_schema_reference", "technical/controller_factory_integration", "technical/factory_integration_fixes_issue6", "technical/factory_usage_examples", "technical/index", "technical/integration_protocols", "technical/mathematical_foundations", "technical/pso_integration_workflows", "test_execution_execution_guide", "test_execution_guide", "test_infrastructure_documentation", "test_infrastructure_validation_report", "test_protocols", "theory/index", "theory/lyapunov_stability_analysis", "theory/mathematical_references", "theory/notation_and_conventions", "theory/numerical_stability_methods", "theory/pso_algorithm_foundations", "theory/pso_convergence_analysis", "theory/pso_optimization_complete", "theory/smc_theory_complete", "theory/system_dynamics_complete", "theory_overview", "tools/ast_traversal_patterns", "tools/claim_extraction_guide", "tools/regex_pattern_reference", "troubleshooting/hybrid_smc_runtime_fix", "troubleshooting/hybrid_smc_runtime_fix_final", "troubleshooting/index", "tutorials/02_controller_performance_comparison", "tutorials/03_pso_optimization_deep_dive", "tutorials/index", "use_cases", "validation/api_reference", "validation/index", "validation/phase_3_3_completion_report", "validation/simulation_result_validation", "validation/simulation_validation_guide", "validation/statistical_reference_tables", "validation/validation_examples", "validation/validation_workflow", "versioning_guide", "visual/index", "visual/system_diagrams", "visualization/PHASE_3_1_COMPLETION_REPORT", "visualization/pso_convergence_plots", "workflow/research_workflow", "workflows/complete_integration_guide", "workflows/index", "workflows/pytest_testing_workflow"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["ACADEMIC_INTEGRITY_STATEMENT.md", "CHANGELOG.md", "CITATIONS.md", "CITATIONS_ACADEMIC.md", "CITATION_SYSTEM.md", "CONTRIBUTING.md", "CONTROLLER_FACTORY.md", "CROSS_REFERENCE_AUDIT_REPORT.md", "DEPENDENCIES.md", "DOCUMENTATION_COVERAGE_MATRIX.md", "DOCUMENTATION_IMPLEMENTATION_PLAN.md", "DOCUMENTATION_INVENTORY_SUMMARY.md", "DOCUMENTATION_STYLE_GUIDE.md", "DOCUMENTATION_SYSTEM.md", "EXAMPLE_VALIDATION_REPORT.md", "LICENSES.md", "PACKAGE_CONTENTS.md", "PATTERNS.md", "PLANT_CONFIGURATION.md", "PSO_Documentation_Validation_Report.md", "PSO_INTEGRATION_GUIDE.md", "QUICKSTART_VALIDATION.md", "README.md", "RELEASE_CHECKLIST.md", "SPHINX_100_PERCENT_COMPLETION_REPORT.md", "SPHINX_PHASE10_COMPLETION_REPORT.md", "SPHINX_PHASE11_COMPLETION_REPORT.md", "SPHINX_PHASE2_COMPLETION_REPORT.md", "SPHINX_PHASE3_COMPLETION_REPORT.md", "SPHINX_PHASE4_COMPLETION_REPORT.md", "SPHINX_PHASE5_COMPLETION_REPORT.md", "SPHINX_PHASE6_COMPLETION_REPORT.md", "SPHINX_PHASE8_SUMMARY.md", "SPHINX_PHASE9_PROGRESS_REPORT.md", "TESTING.md", "advanced/numerical_stability.md", "analysis/COMPLETE_CONTROLLER_COMPARISON_MATRIX.md", "analysis/CONTROLLER_COVERAGE_TECHNICAL_ANALYSIS.md", "analysis/CONTROLLER_FACTORY_ANALYSIS.md", "analysis/COVERAGE_ANALYSIS_METHODOLOGY_FRAMEWORK.md", "analysis/HYBRID_SMC_FIX_TECHNICAL_DOCUMENTATION.md", "analysis/controller_memory_patterns.md", "analysis/index.md", "analysis/pso_convergence_report.md", "analysis/view_conversion_recommendations.md", "analysis_plan.md", "api/configuration_schema.md", "api/controller_api_reference.md", "api/controller_theory.md", "api/factory_methods_reference.md", "api/factory_reference.md", "api/factory_system_api_reference.md", "api/index.md", "api/optimization_module_api_reference.md", "api/performance_benchmarks.md", "api/phase_4_1_completion_report.md", "api/phase_4_2_completion_report.md", "api/phase_4_3_completion_report.md", "api/phase_4_3_progress_report.md", "api/phase_4_4_completion_report.md", "api/pso_optimization.md", "api/simulation_engine_api_reference.md", "architecture.md", "architecture/controller_system_architecture.md", "architecture_control_room.md", "benchmarks/controller_performance_benchmarks.md", "benchmarks/index.md", "benchmarks/phase_3_2_completion_report.md", "benchmarks_methodology.md", "bibliography.md", "claude-backup.md", "code_quality/CODE_BEAUTIFICATION_SPECIALIST_COMPREHENSIVE_ASSESSMENT.md", "configuration_integration_documentation.md", "configuration_schema_validation.md", "context.md", "control_law_testing_standards.md", "controller_pso_interface_api_documentation.md", "controllers/adaptive_smc_technical_guide.md", "controllers/classical_smc_technical_guide.md", "controllers/control_primitives_reference.md", "controllers/factory_system_guide.md", "controllers/hybrid_smc_technical_guide.md", "controllers/index.md", "controllers/legacy-index.md", "controllers/mpc_technical_guide.md", "controllers/sta_smc_technical_guide.md", "controllers/swing_up_smc_technical_guide.md", "coverage/README.md", "coverage_analysis_methodology.md", "deployment/DEPLOYMENT_GUIDE.md", "deployment/STREAMLIT_DEPLOYMENT.md", "deployment/docker.md", "deployment/production_deployment_guide.md", "deployment_validation_checklists.md", "development/quality_gates.md", "documentation_structure.md", "examples/index.md", "examples/mathematical_notation_standards.md", "factory/README.md", "factory/configuration_migration_mathematical_foundations.md", "factory/configuration_reference.md", "factory/controller_integration_guide.md", "factory/deprecation_management.md", "factory/enhanced_factory_api_reference.md", "factory/enhanced_pso_integration_guide.md", "factory/factory_api_reference.md", "factory/factory_integration_user_guide.md", "factory/github_issue_6_factory_integration_documentation.md", "factory/migration_guide.md", "factory/parameter_interface_specification.md", "factory/performance_benchmarks.md", "factory/production_deployment_guide.md", "factory/pso_factory_api_reference.md", "factory/pso_integration_workflow.md", "factory/testing_validation_documentation.md", "factory/troubleshooting_guide.md", "factory_integration_documentation.md", "factory_integration_troubleshooting_guide.md", "fault_detection_guide.md", "fault_detection_system_documentation.md", "fdi_threshold_calibration_methodology.md", "for_reviewers/README.md", "for_reviewers/citation_faq.md", "for_reviewers/citation_quick_reference.md", "for_reviewers/reproduction_guide.md", "for_reviewers/theorem_verification_guide.md", "for_reviewers/verification_checklist.md", "guides/INDEX.md", "guides/QUICK_REFERENCE.md", "guides/README.md", "guides/api/README.md", "guides/api/configuration.md", "guides/api/controllers.md", "guides/api/optimization.md", "guides/api/plant-models.md", "guides/api/simulation.md", "guides/api/utilities.md", "guides/features/README.md", "guides/features/code-collapse/PHASE6_COMPLETION_SUMMARY.md", "guides/features/code-collapse/changelog.md", "guides/features/code-collapse/configuration-reference.md", "guides/features/code-collapse/integration-guide.md", "guides/features/code-collapse/maintenance-guide.md", "guides/features/code-collapse/technical-reference.md", "guides/features/code-collapse/troubleshooting.md", "guides/features/code-collapse/user-guide.md", "guides/getting-started.md", "guides/getting-started-validation-report.md", "guides/how-to/optimization-workflows.md", "guides/how-to/result-analysis.md", "guides/how-to/running-simulations.md", "guides/how-to/testing-validation.md", "guides/interactive/3d-pendulum-demo.md", "guides/interactive/index.md", "guides/interactive/jupyter-notebooks-demo.md", "guides/interactive/live-python-demo.md", "guides/interactive/mathematical-visualizations-demo.md", "guides/interactive/plotly-charts-demo.md", "guides/interactive_configuration_guide.md", "guides/interactive_visualizations.md", "guides/theory/README.md", "guides/theory/dip-dynamics.md", "guides/theory/pso-theory.md", "guides/theory/smc-theory.md", "guides/tutorials/tutorial-01-first-simulation.md", "guides/tutorials/tutorial-01-validation-report.md", "guides/tutorials/tutorial-02-controller-comparison.md", "guides/tutorials/tutorial-03-pso-optimization.md", "guides/tutorials/tutorial-04-custom-controller.md", "guides/tutorials/tutorial-05-research-workflow.md", "guides/user-guide.md", "guides/workflows/batch-simulation-workflow.md", "guides/workflows/custom-cost-functions.md", "guides/workflows/hil-disaster-recovery.md", "guides/workflows/hil-multi-machine.md", "guides/workflows/hil-production-checklist.md", "guides/workflows/hil-safety-validation.md", "guides/workflows/hil-workflow.md", "guides/workflows/monte-carlo-validation-quickstart.md", "guides/workflows/pso-adaptive-smc.md", "guides/workflows/pso-hil-tuning.md", "guides/workflows/pso-hybrid-smc.md", "guides/workflows/pso-optimization-workflow.md", "guides/workflows/pso-sta-smc.md", "guides/workflows/pso-vs-grid-search.md", "hil_quickstart.md", "how-to/testing-and-benchmarks.md", "implementation_reports/CITATION_SYSTEM_IMPLEMENTATION.md", "implementation_reports/IMPLEMENTATION_REPORT.md", "index.md", "issues/GITHUB_ISSUE_9_ULTIMATE_ORCHESTRATOR_STRATEGIC_PLAN.md", "mathematical_algorithm_validation.md", "mathematical_foundations/README.md", "mathematical_foundations/advanced_algorithms_guide.md", "mathematical_foundations/algorithm_fixes_summary.md", "mathematical_foundations/boundary_layer_derivations.md", "mathematical_foundations/config_validation_specification.md", "mathematical_foundations/controller_comparison_theory.md", "mathematical_foundations/dynamics_derivations.md", "mathematical_foundations/index.md", "mathematical_foundations/numerical_integration_theory.md", "mathematical_foundations/optimization_landscape_analysis.md", "mathematical_foundations/pso_algorithm_theory.md", "mathematical_foundations/simulation_architecture_guide.md", "mathematical_foundations/sliding_surface_analysis.md", "mathematical_foundations/smc_complete_theory.md", "mathematical_foundations/smc_theory.md", "mathematical_foundations/test_validation_methodology.md", "mathematical_foundations/validation_framework_guide.md", "mathematical_validation_procedures.md", "memory_management_patterns.md", "memory_management_quick_reference.md", "numerical_stability/safe_operations_reference.md", "numerical_stability_guide.md", "optimization/legacy-index.md", "optimization/pso_core_algorithm_guide.md", "optimization_simulation/guide.md", "optimization_simulation/index.md", "orchestration/ULTIMATE_ORCHESTRATOR_EXECUTIVE_DEPLOYMENT_SUMMARY.md", "plant/index.md", "plant/models_guide.md", "plant_model.md", "presentation/0-Introduction & Motivation.md", "presentation/1-Problem Statement & Objectives.md", "presentation/2-Previous Works.md", "presentation/3-System Modling.md", "presentation/4-0-SMC.md", "presentation/5-Chattering & Mitigation.md", "presentation/6-PSO.md", "presentation/7-Simulation Setup.md", "presentation/8-Results and Discussion.md", "presentation/chattering-mitigation.md", "presentation/index.md", "presentation/introduction.md", "presentation/previous-works.md", "presentation/problem-statement.md", "presentation/pso-optimization.md", "presentation/results-discussion.md", "presentation/simulation-setup.md", "presentation/smc-theory.md", "presentation/system-modeling.md", "production/index.md", "production/production_readiness_assessment_v2.md", "production_documentation_summary.md", "production_readiness_final.md", "production_readiness_framework.md", "pso_algorithm_mathematical_foundations.md", "pso_configuration_schema_documentation.md", "pso_factory_integration_patterns.md", "pso_gain_bounds_mathematical_foundations.md", "pso_integration_system_architecture.md", "pso_integration_technical_specification.md", "pso_optimization_workflow_specifications.md", "pso_optimization_workflow_user_guide.md", "pso_troubleshooting_maintenance_manual.md", "quality_gate_independence_framework.md", "references/bibliography.md", "references/index.md", "references/notation_guide.md", "results/index.md", "results_readme.md", "safety_system_validation_protocols.md", "sitemap_cards.md", "sitemap_interactive.md", "sitemap_visual.md", "streamlit_dashboard_guide.md", "styling-library/README.md", "styling-library/templates/cheat-sheet-template.md", "styling-library/templates/component-index-template.md", "styling-library/templates/integration-guide-template.md", "styling-library/templates/module-readme-template.md", "styling-library/templates/quick-start-template.md", "symbols.md", "technical/configuration_schema_reference.md", "technical/controller_factory_integration.md", "technical/factory_integration_fixes_issue6.md", "technical/factory_usage_examples.md", "technical/index.md", "technical/integration_protocols.md", "technical/mathematical_foundations.md", "technical/pso_integration_workflows.md", "test_execution_execution_guide.md", "test_execution_guide.md", "test_infrastructure_documentation.md", "test_infrastructure_validation_report.md", "test_protocols.md", "theory/index.md", "theory/lyapunov_stability_analysis.md", "theory/mathematical_references.md", "theory/notation_and_conventions.md", "theory/numerical_stability_methods.md", "theory/pso_algorithm_foundations.md", "theory/pso_convergence_analysis.md", "theory/pso_optimization_complete.md", "theory/smc_theory_complete.md", "theory/system_dynamics_complete.md", "theory_overview.md", "tools/ast_traversal_patterns.md", "tools/claim_extraction_guide.md", "tools/regex_pattern_reference.md", "troubleshooting/hybrid_smc_runtime_fix.md", "troubleshooting/hybrid_smc_runtime_fix_final.md", "troubleshooting/index.md", "tutorials/02_controller_performance_comparison.md", "tutorials/03_pso_optimization_deep_dive.md", "tutorials/index.md", "use_cases.md", "validation/api_reference.md", "validation/index.md", "validation/phase_3_3_completion_report.md", "validation/simulation_result_validation.md", "validation/simulation_validation_guide.md", "validation/statistical_reference_tables.md", "validation/validation_examples.md", "validation/validation_workflow.md", "versioning_guide.md", "visual/index.md", "visual/system_diagrams.md", "visualization/PHASE_3_1_COMPLETION_REPORT.md", "visualization/pso_convergence_plots.md", "workflow/research_workflow.md", "workflows/complete_integration_guide.md", "workflows/index.md", "workflows/pytest_testing_workflow.md"], "indexentries": {}, "objects": {}, "objnames": {}, "objtypes": {}, "terms": {"": [0, 1, 10, 21, 22, 23, 24, 25, 27, 28, 30, 31, 35, 36, 39, 40, 41, 45, 51, 53, 61, 62, 65, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 84, 85, 86, 88, 90, 92, 97, 98, 102, 103, 105, 108, 114, 116, 117, 118, 119, 121, 123, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 140, 141, 144, 145, 146, 150, 151, 152, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 177, 178, 183, 185, 189, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 211, 213, 215, 216, 219, 220, 222, 224, 226, 227, 231, 232, 233, 234, 239, 242, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 258, 259, 260, 261, 265, 269, 271, 272, 273, 274, 275, 276, 277, 279, 282, 283, 284, 285, 287, 288, 289, 291, 293, 294, 295, 296, 298, 299, 301, 302, 306, 308, 309, 310, 316, 317, 318, 320, 321], "0": [1, 2, 5, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 50, 52, 55, 56, 59, 62, 64, 67, 68, 70, 74, 75, 76, 77, 82, 83, 84, 85, 88, 90, 91, 92, 97, 98, 100, 105, 106, 114, 115, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 177, 178, 181, 182, 183, 185, 189, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 231, 232, 233, 234, 239, 240, 241, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 265, 267, 269, 271, 276, 277, 279, 284, 285, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 301, 302, 306, 308, 309, 315, 316, 317, 318, 320, 322], "00": [43, 44, 53, 57, 61, 111, 152, 177, 308, 318], "000": [2, 12, 41, 53, 57, 59, 61, 65, 67, 82, 85, 107, 146, 164, 171, 182, 197, 198, 215, 229, 238, 242, 254, 259, 290, 299, 309, 318], "000000": [19, 36, 40, 81, 177, 182, 183, 218, 242, 244, 245, 301, 302], "000001": 308, "000003": [169, 308], "0001": [35, 61, 73, 135, 200, 253, 278, 308, 320], "0002": [290, 308], "0003": 36, "0005": [36, 62, 74, 146, 164, 170, 253, 265], "0006": [198, 320], "0007": 198, "0008": [36, 320], "000x": 213, "001": [17, 28, 29, 36, 38, 45, 49, 50, 51, 56, 61, 65, 67, 68, 73, 74, 76, 77, 78, 80, 81, 85, 98, 100, 101, 103, 105, 106, 114, 116, 117, 118, 119, 121, 125, 131, 135, 146, 147, 148, 150, 154, 158, 164, 165, 166, 167, 168, 169, 170, 177, 183, 185, 196, 197, 200, 205, 216, 227, 231, 232, 248, 250, 253, 254, 260, 265, 272, 273, 275, 276, 277, 279, 284, 285, 290, 293, 298, 306, 320, 321], "0012": 308, "0013": [65, 198], "0014": 198, "0015": 74, "0018": 308, "0019": 65, "001\u00b2": 177, "002": [45, 61, 65, 74, 78, 98, 107, 170, 200, 253, 254, 260, 272, 285, 290, 306, 310, 321], "0020717031000099029": [121, 122, 123, 205], "00207179308923053": 205, "00207728608926853": 205, "00208": 216, "0023": 308, "00278": 200, "0028": 200, "003": [45, 68, 74, 120, 170, 197, 200, 260, 272, 285], "0035": 320, "004": [45, 51, 74, 121, 122, 125, 221, 260, 272], "0042": 320, "00433": [8, 15], "00463": 182, "004rad": 124, "005": [51, 65, 74, 77, 78, 86, 116, 124, 125, 128, 131, 134, 135, 148, 150, 158, 164, 165, 167, 170, 197, 200, 213, 221, 247, 272, 290, 320, 321], "0055": [227, 230, 231, 237], "00553": [224, 234], "0056": 308, "005rad": 124, "006": [210, 211, 272, 290], "0063": [227, 230, 231, 237], "0066cc": 141, "007": 272, "0071": 308, "0077": 198, "0078": 198, "008": [77, 78, 146, 147, 164, 165, 205, 272], "0083": [164, 198, 227, 230, 231, 237], "008m": 124, "009": 272, "00e": 53, "00z": [44, 298], "01": [17, 20, 27, 28, 30, 35, 36, 38, 41, 44, 45, 51, 53, 61, 62, 65, 67, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 92, 93, 97, 98, 100, 101, 103, 105, 106, 111, 114, 116, 117, 118, 119, 120, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 146, 148, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 166, 167, 168, 170, 171, 177, 182, 183, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 208, 209, 211, 215, 216, 217, 220, 224, 232, 234, 242, 247, 248, 249, 250, 252, 253, 254, 261, 273, 274, 275, 276, 283, 284, 287, 288, 289, 290, 294, 295, 296, 298, 300, 310, 313, 317, 320, 321], "010": [170, 197, 272], "0100": 177, "01057": 8, "011": 272, "01172": [224, 234], "012": [12, 61, 68, 85, 253, 272, 290], "013": [65, 67, 272, 308], "0130408907": 123, "0130673893": 123, "0134853987": 17, "0135974445": 17, "014": [272, 297, 298], "015": [61, 72, 77, 78, 120, 197, 272], "0154": 198, "0157": 198, "016": [39, 272], "0167": 308, "017": 272, "018": 272, "01891": 8, "019": [8, 15, 78, 125, 272], "01_getting_start": 154, "01m": 124, "01rad": 124, "01t14": 70, "01t16": 44, "02": [22, 27, 28, 38, 44, 50, 51, 53, 61, 65, 67, 76, 77, 78, 79, 80, 81, 84, 85, 86, 97, 98, 100, 101, 103, 105, 106, 107, 111, 113, 114, 116, 117, 124, 127, 129, 130, 132, 134, 135, 136, 146, 150, 153, 157, 158, 160, 163, 164, 165, 167, 168, 170, 177, 182, 197, 199, 200, 229, 230, 232, 237, 238, 247, 253, 254, 259, 265, 273, 275, 276, 277, 290, 297, 298, 300, 304, 305, 306, 320], "020": [8, 15, 17, 197, 272], "0201633610": 17, "021": [121, 122, 272], "022": [65, 67, 125, 272], "023": [121, 125, 224, 234, 272, 298], "0234": 308, "024": [61, 224, 234, 272], "025": [272, 313], "0259": 198, "026": [272, 308], "0261": 198, "027": 272, "0288": 65, "028m": 107, "029": [65, 272], "029m": 107, "02_controller_performance_comparison": 304, "02t14": 298, "03": [2, 3, 8, 10, 15, 17, 22, 28, 53, 72, 77, 81, 98, 111, 113, 114, 119, 127, 129, 133, 146, 148, 155, 160, 162, 164, 165, 166, 182, 199, 200, 201, 219, 220, 232, 247, 290, 303, 305], "030": [61, 272], "031": [78, 272, 308], "031m": 107, "032": [221, 296], "033": 221, "0339": 65, "034": [65, 67, 221], "0340": 65, "0342": 313, "035": [77, 221], "035m": 107, "036": [11, 221], "037": 221, "038": 221, "039": 221, "04": [7, 55, 77, 78, 79, 80, 82, 84, 85, 86, 91, 127, 129, 130, 132, 146, 151, 160, 164, 165, 166, 167, 182, 197, 198, 199, 200, 201, 202, 205, 215, 217, 219, 247, 268, 290, 315], "040": 221, "040890": [78, 205], "041": [65, 67, 221], "0412": 308, "0417": 131, "042": 45, "0421": 308, "0424": 65, "043": [45, 62, 74, 285], "0430_thb05_3": [222, 233], "0438": [119, 120], "044": [62, 74, 120], "045": [62, 68, 74, 308, 309], "0456": 308, "046": 74, "0467": 65, "047": [53, 55, 120, 306], "048": [193, 285, 306], "0486462783": 123, "0488": 65, "049": [65, 67, 285, 306], "05": [7, 10, 30, 35, 38, 40, 44, 49, 50, 51, 53, 55, 56, 61, 65, 68, 72, 73, 74, 76, 78, 80, 84, 86, 92, 93, 97, 98, 99, 103, 104, 109, 112, 113, 114, 116, 117, 118, 120, 127, 128, 129, 130, 134, 135, 136, 139, 140, 143, 146, 148, 149, 150, 156, 158, 159, 162, 163, 164, 165, 166, 167, 168, 170, 171, 185, 196, 199, 200, 201, 202, 203, 215, 216, 219, 220, 229, 232, 238, 245, 247, 248, 250, 251, 253, 254, 255, 265, 273, 274, 275, 276, 277, 282, 283, 284, 287, 290, 293, 300, 301, 306, 308, 320, 321], "050": [74, 93, 198], "051": 74, "0514": 65, "0518": 198, "052": [74, 170], "0521": 166, "0523": [169, 198, 308], "053": 74, "0534": 308, "054": 74, "055": 74, "056": [74, 308], "057": 74, "0571": 65, "058": 74, "059": 74, "05_phase4_validation_qu": [24, 25, 33], "05m": 119, "06": [108, 182, 200, 201, 247, 266, 290, 300], "060": 74, "060123": 308, "061": 74, "0617": 297, "062": [74, 308], "063": 74, "064": [62, 308], "0647": 65, "065": [62, 65, 67], "066": 62, "067": [62, 71], "0679": 65, "068": 45, "0686": [8, 15], "0689": 65, "069": [65, 67], "07": [9, 11, 46, 48, 51, 52, 53, 54, 56, 58, 59, 60, 61, 65, 67, 147, 165, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 197, 230, 237, 287, 290, 291, 308, 310, 313, 315, 318], "070": 62, "071": 296, "0712": 169, "071234": 308, "072": 296, "073": [296, 308], "0734": 65, "0737ba03": [24, 33], "074": 296, "0748406012": [78, 123, 205], "075": [65, 67, 197, 285, 296], "0750": 65, "076": [285, 296], "076543": 308, "077": 285, "0771": 65, "078": 78, "0795": 65, "07e5": [227, 231], "08": [28, 53, 94, 128, 146, 150, 164, 169, 170, 177, 199, 201, 249, 290], "080": [65, 67], "0823": 308, "083": 198, "0867": [178, 308], "087": [68, 308], "0873": 198, "087654": 308, "089": 313, "089012": 308, "09": [1, 12, 35, 36, 38, 40, 65, 71, 73, 81, 91, 93, 121, 124, 125, 126, 187, 191, 241, 243, 245, 251, 258, 261, 282, 283, 297, 298, 300, 302, 320, 321, 323], "0900": 308, "091234": 308, "0938": 131, "094": [61, 313], "096": 61, "097": [65, 308], "0974": [119, 120], "098": [61, 65, 67, 308], "0982": 65, "098234": 308, "098765": 53, "099": 61, "0996": 65, "0e": [37, 53, 108, 216], "0e8": 216, "0f": [39, 177, 178, 313], "0kb": 138, "0m": [141, 245, 249], "0n": 107, "0pt": 310, "0t": [230, 237], "0tu": [230, 237], "0t\u03c3": [230, 237], "0w_": [230, 237], "0x": [61, 120, 203, 290], "0xedb88320": 177, "0xffffffff": [177, 185], "1": [1, 5, 12, 13, 16, 20, 22, 23, 25, 36, 43, 52, 64, 68, 75, 83, 87, 94, 95, 96, 100, 105, 110, 114, 115, 118, 128, 129, 130, 138, 140, 142, 148, 149, 150, 151, 152, 157, 159, 161, 162, 163, 170, 178, 187, 189, 192, 199, 200, 201, 202, 209, 214, 217, 218, 219, 222, 226, 232, 233, 239, 241, 242, 244, 256, 257, 267, 272, 277, 285, 286, 289, 292, 293, 294, 295, 302, 306, 308, 311, 315, 316, 317, 322], "10": [0, 1, 2, 4, 9, 12, 15, 17, 19, 20, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 44, 45, 46, 48, 50, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 65, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 97, 98, 100, 101, 103, 105, 106, 114, 115, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 156, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 211, 215, 216, 217, 219, 220, 221, 222, 224, 226, 227, 231, 232, 233, 234, 239, 241, 243, 244, 250, 254, 255, 257, 258, 261, 265, 266, 267, 268, 269, 271, 273, 276, 277, 279, 282, 283, 285, 287, 288, 290, 293, 296, 297, 298, 299, 300, 303, 306, 308, 310, 315, 317, 318, 320, 321], "100": [1, 2, 4, 9, 14, 17, 19, 20, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 41, 49, 50, 51, 52, 53, 58, 61, 67, 68, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 100, 101, 103, 104, 105, 106, 113, 114, 115, 116, 117, 118, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 162, 164, 165, 166, 167, 168, 170, 171, 177, 178, 182, 183, 185, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 208, 209, 210, 211, 213, 214, 216, 217, 220, 221, 229, 230, 232, 237, 238, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 265, 267, 273, 276, 277, 279, 280, 282, 284, 285, 287, 290, 291, 293, 297, 300, 301, 306, 308, 310, 318, 320, 321], "1000": [10, 17, 25, 35, 37, 39, 41, 53, 61, 63, 65, 68, 71, 72, 73, 76, 77, 78, 79, 81, 84, 85, 91, 92, 98, 101, 103, 107, 113, 114, 115, 116, 117, 118, 119, 124, 132, 133, 135, 139, 148, 154, 155, 157, 159, 164, 170, 171, 177, 178, 183, 185, 193, 195, 197, 199, 200, 201, 203, 208, 210, 211, 220, 222, 230, 232, 233, 237, 248, 249, 254, 259, 261, 265, 267, 274, 275, 280, 282, 283, 284, 287, 290, 291, 293, 309, 310, 313, 317, 320, 321], "10000": [17, 27, 37, 63, 92, 107, 111, 119, 127, 149, 155, 157, 167, 171, 191, 209, 210, 211, 249, 256, 290, 293, 308, 310], "100000": [119, 210, 213], "1000000": [22, 23, 73, 318], "100000x": 213, "1000m": [63, 92, 140], "1000x": [61, 193], "1001": [9, 177, 203], "1004": 9, "1006": 9, "1007": [78, 123, 205], "100_year": 310, "100d": 291, "100hz": [92, 177, 242], "100kb": [30, 105, 107, 139, 141, 142, 143], "100m": [28, 29, 30, 31, 93, 98, 118, 141, 157, 209, 251, 261, 321], "100mb": [90, 107, 117], "100mbp": 93, "100n": [61, 65, 124, 167], "100x": [1, 29, 61, 203, 213, 317], "100x100": 155, "100\u03bc": [278, 283], "101": [38, 185, 203], "1012": 17, "1016": [205, 297, 298], "102": [2, 36, 38, 77, 78, 140, 197], "1024": [17, 73, 92, 98, 107, 114, 115, 117, 171, 185, 210, 211, 251, 253, 254, 310, 313], "10266": [228, 236], "10282": [228, 236], "103": [8, 245], "1034": [119, 120], "1035": [85, 123, 205, 287], "1038": [8, 15, 17], "104": [55, 59, 127, 129, 140, 141, 144], "1040": [85, 123, 205, 287], "105": [14, 77, 78, 85, 197], "1057": 8, "106": [55, 59, 140, 141, 144], "1067": 71, "107": [57, 245], "10700k": [78, 197], "1073": [222, 228, 233, 236], "108": [53, 245], "1080": [121, 122, 123, 205], "109": [61, 71], "1092": 309, "1093": 309, "10cm": 73, "10d": [53, 193, 293], "10gi": 92, "10k_timestep": 119, "10kb": [30, 105, 249, 297], "10khz": 197, "10m": [1, 29, 61, 70, 92, 93, 98, 110, 114, 118, 129, 135, 154, 158, 177, 213, 242, 245, 261, 310, 313], "10mb": [31, 38, 98, 107, 117, 143, 145], "10n": 265, "10th": [63, 150], "10x": [61, 73, 91, 107, 127, 158, 170, 213, 290], "10x10": 155, "10\u00b2": [230, 237], "10\u00b3": [205, 230, 237], "10\u00b9\u00b2": 290, "10\u00b9\u2070": 290, "10\u00b9\u2074": [201, 290], "10\u03bc": [38, 208, 282, 283, 284], "10\u2074": [230, 237], "10\u2075": [230, 237], "10\u2076": [36, 205], "10\u2077": 36, "10\u2078": 36, "10\u2079": 36, "11": [1, 7, 8, 9, 10, 11, 15, 19, 24, 25, 27, 31, 32, 33, 44, 51, 56, 57, 59, 65, 67, 77, 78, 85, 91, 92, 95, 114, 118, 124, 127, 128, 138, 144, 146, 147, 153, 155, 161, 164, 190, 197, 198, 200, 201, 202, 205, 220, 222, 225, 226, 227, 229, 230, 231, 232, 233, 237, 238, 239, 240, 242, 248, 257, 259, 282, 283, 284, 288, 290, 299, 310], "110": [1, 33, 55, 57, 61, 151, 166, 170, 270], "1109": [8, 123, 205, 257, 297, 320], "111": [37, 133, 147, 201], "1113": 200, "112": [11, 25, 44, 77, 245, 290], "1123": 178, "11239": 297, "113": [24, 25, 84, 140, 147, 283], "114": [17, 65, 140], "1144": 124, "1145": [8, 15, 17], "115": [226, 239, 266, 267, 268, 271, 298], "1158": 309, "1159": 309, "116": [25, 26, 27, 84], "117": [220, 290], "118": [25, 55, 144, 166, 170], "1180": 320, "1185": 318, "1186": [224, 234], "119": [37, 44, 55, 144], "1190": 318, "11c": 26, "11e": [53, 65, 67], "12": [1, 2, 9, 10, 14, 17, 19, 24, 25, 26, 27, 28, 29, 32, 33, 35, 36, 38, 40, 41, 42, 44, 50, 51, 52, 55, 56, 57, 59, 61, 65, 68, 73, 75, 77, 78, 80, 81, 82, 84, 85, 86, 92, 95, 98, 100, 101, 105, 106, 109, 112, 114, 116, 117, 118, 120, 124, 125, 128, 129, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 158, 159, 164, 166, 167, 168, 169, 170, 171, 177, 178, 182, 183, 192, 193, 196, 197, 198, 199, 200, 201, 203, 205, 207, 209, 210, 211, 215, 216, 217, 218, 220, 222, 225, 226, 227, 229, 230, 231, 232, 233, 237, 238, 239, 240, 242, 246, 247, 248, 249, 253, 254, 259, 273, 274, 275, 276, 277, 279, 282, 284, 287, 288, 290, 295, 297, 298, 303, 304, 308, 309, 310, 315, 318, 320, 321], "120": [9, 24, 33, 52, 55, 56, 57, 58, 72, 77, 84, 92, 93, 113, 124, 127, 128, 129, 142, 150, 153, 168, 169, 170, 182, 197, 201, 215, 247, 280, 298, 299, 309], "1200": [56, 156], "1201": [123, 205], "120kb": 30, "121": [55, 153], "122": [84, 290], "123": [9, 51, 55, 124, 129, 148, 151, 167, 170, 253, 254, 308, 320], "1234": [169, 308, 320], "123456": [53, 308], "1234567": 320, "123456789": 199, "123456789012": 91, "124": [36, 55, 84], "12430": 318, "1245": 253, "1247": [205, 287, 290], "124959": [226, 239], "125": [33, 53, 61, 78, 92, 151, 200, 241, 301], "1250": 320, "1252": 190, "126": [85, 177, 197], "1263": [205, 287, 290], "127": [55, 73, 86, 142, 177, 185, 190, 253], "12700k": 299, "1278": [245, 261], "128": [55, 78, 81, 140, 142, 166, 170, 197, 220, 245], "129": 14, "12h": 10, "12i_1\u03b8": [225, 240], "12i_2\u03b8": [225, 240], "12m": 119, "12m_1": [225, 240], "12m_2": [225, 240], "12mcx": [225, 240], "12px": [140, 144], "12sin": [225, 240], "13": [1, 2, 9, 10, 16, 17, 24, 30, 31, 44, 55, 56, 59, 65, 67, 77, 78, 84, 92, 121, 122, 124, 164, 166, 177, 182, 183, 188, 198, 205, 213, 220, 222, 225, 226, 227, 229, 230, 231, 232, 233, 237, 238, 239, 240, 242, 247, 256, 290, 298, 308, 318], "130": [52, 84, 125, 126, 140, 201, 215], "131": [14, 140], "132": 67, "133": [55, 121, 122, 124, 126], "1337": [148, 167], "134": [14, 17, 36, 37, 77, 78, 197, 308], "1342": 308, "134217728": 92, "135": [118, 119, 122, 124], "1352": 65, "135deg": [140, 141], "136": [55, 65, 298], "1362": 202, "137": 37, "138": [25, 33, 67, 165, 308, 318], "1380": 318, "1381": 202, "139": [37, 300], "13kb": 318, "14": [1, 2, 7, 8, 9, 15, 26, 27, 28, 29, 30, 31, 33, 36, 40, 44, 51, 52, 55, 56, 61, 65, 67, 72, 77, 81, 92, 101, 107, 124, 126, 127, 128, 137, 139, 140, 141, 142, 143, 144, 145, 149, 150, 152, 153, 156, 157, 158, 159, 162, 164, 165, 167, 170, 171, 182, 197, 198, 201, 203, 205, 213, 215, 222, 229, 230, 232, 233, 237, 238, 242, 244, 265, 290, 291, 298, 301, 302, 318, 320, 321], "140": [3, 31, 72, 147, 201, 249], "141": [24, 33, 55, 197], "14159": 72, "142": [24, 33, 124, 147, 298], "1427": 65, "143": [227, 231, 299], "1436": [65, 318], "14362": [228, 236], "144": [14, 37, 55, 77, 121, 122, 197, 227, 231], "14400": 318, "1446": [197, 205, 230, 237], "1447": 290, "145": [26, 55, 120, 166, 170, 220, 308, 320], "1454": [197, 205, 230, 237], "146": 55, "147": [24, 71, 259, 318], "148": 37, "149": [26, 37, 55, 318], "15": [0, 1, 2, 7, 8, 9, 12, 15, 16, 17, 20, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 41, 43, 50, 51, 52, 53, 55, 56, 65, 67, 68, 70, 71, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 86, 92, 97, 98, 100, 104, 105, 106, 109, 112, 113, 114, 115, 116, 117, 118, 119, 122, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 140, 142, 143, 144, 146, 148, 150, 152, 153, 155, 156, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 178, 182, 183, 188, 192, 196, 197, 198, 199, 200, 201, 202, 203, 205, 208, 209, 211, 213, 215, 216, 217, 218, 220, 221, 222, 229, 232, 233, 238, 242, 243, 245, 248, 249, 251, 253, 254, 255, 259, 261, 269, 273, 276, 277, 283, 284, 287, 290, 291, 297, 298, 300, 303, 309, 310, 313, 320, 321, 323], "150": [0, 4, 19, 21, 25, 33, 38, 43, 49, 50, 52, 56, 57, 58, 59, 61, 62, 65, 67, 72, 74, 76, 82, 85, 90, 92, 98, 100, 101, 103, 105, 106, 107, 112, 114, 115, 117, 118, 119, 128, 136, 146, 148, 150, 164, 165, 170, 171, 177, 178, 182, 183, 185, 190, 198, 200, 201, 202, 215, 216, 227, 231, 232, 248, 249, 251, 252, 253, 254, 259, 273, 275, 276, 277, 278, 280, 293, 297, 310, 318, 320], "1500": [70, 113, 167], "15000": 164, "150n": 92, "151": [37, 65, 127, 269], "1512": 178, "152": [86, 147, 318], "1522": 65, "153": [44, 55, 318], "154": 86, "155": [37, 55, 122], "156": [14, 24, 55, 81, 144], "1567": 169, "1570": [227, 231], "15787v1": [228, 236], "158": [37, 55], "159": [9, 120], "15kb": 30, "15m": 38, "15min": [16, 89, 188], "15px": 141, "15t10": 253, "15\u00b2": 163, "16": [9, 10, 15, 17, 24, 26, 35, 41, 42, 51, 52, 70, 72, 85, 92, 101, 124, 126, 127, 133, 148, 149, 167, 177, 182, 193, 200, 205, 222, 229, 232, 233, 238, 242, 247, 249, 251, 290, 298, 299, 308], "160": [37, 55, 197, 201, 290], "1606": 309, "1607": 309, "161": [37, 40, 301], "162": [24, 33, 67, 298], "1628": 9, "164": [55, 142], "1649": 309, "165": [14, 55, 118, 119, 120, 297], "1650": 309, "166": [37, 147], "16695": 200, "167": [14, 71, 118, 120, 127, 308], "168": [30, 177, 185], "169": [37, 147], "16px": 140, "17": [1, 2, 8, 9, 11, 15, 19, 36, 39, 40, 70, 78, 81, 92, 124, 127, 131, 133, 153, 161, 178, 182, 183, 197, 205, 229, 230, 237, 238, 242, 244, 283, 290, 298, 301, 302, 321], "170": [37, 122, 144], "1702": 178, "171": [44, 146, 147, 164, 165], "173": [14, 24], "17354": 39, "174": [61, 313], "1745": 198, "175": [3, 55, 299], "176": [200, 246, 291], "177": 55, "179": 37, "18": [1, 9, 11, 19, 24, 26, 30, 31, 33, 36, 38, 40, 50, 51, 52, 55, 56, 65, 67, 77, 78, 79, 80, 81, 85, 91, 98, 101, 103, 105, 106, 109, 112, 114, 117, 118, 124, 128, 131, 132, 150, 164, 165, 166, 167, 169, 170, 192, 194, 197, 198, 200, 201, 205, 210, 211, 215, 226, 227, 230, 231, 237, 239, 248, 253, 259, 284, 290, 298, 308], "180": [1, 24, 29, 32, 58, 59, 61, 75, 86, 98, 125, 134, 151, 164, 190, 200, 201, 247, 255, 320], "1800": [93, 113, 200], "18053": [228, 236], "18074": [228, 236], "181": [17, 86, 140, 144], "182": [14, 29, 55, 291], "1820": [119, 120], "183": [26, 37, 198, 220], "18309": [224, 234], "1843": 309, "1844": 309, "184818": 205, "185": [55, 86, 124, 182, 297, 298, 299], "186": [9, 24, 55, 165], "18656": 200, "187": [86, 122, 124, 126, 200, 298], "188": [26, 65, 67, 71, 86], "1880": 65, "189": [65, 142], "1892": 123, "18m": 119, "19": [9, 10, 13, 24, 25, 26, 32, 37, 43, 59, 77, 85, 98, 147, 159, 182, 202, 215, 222, 233, 298], "1905": 297, "1906": 65, "191": 147, "192": [67, 127, 159, 177, 185, 200, 303, 318], "192x192": [1, 31], "193": 86, "1931": 65, "1935": [205, 228, 236], "1935182504": 17, "19372": 200, "194": 44, "194056": [222, 233], "1942": [123, 230, 237, 257, 290, 291], "1948": [123, 230, 237, 257, 290, 291], "195": [55, 85], "1950": 256, "196": [55, 291], "1963": 213, "197": [55, 77, 291, 308], "1970": [166, 256], "1974": 318, "1977": [169, 205, 230, 237], "1979": 310, "198": [55, 86, 182], "1980": [166, 256], "1982": 17, "1983": [205, 227, 230, 231, 237], "1986": [2, 78, 123, 205], "1988": [256, 310], "1989": 81, "199": 55, "1990": [166, 256], "1991": [2, 35, 78, 81, 122, 125, 187, 199, 205, 256, 258, 287, 297, 299, 303], "1992": [2, 12, 55, 78, 82, 83, 97, 103, 123, 163, 192, 194, 196, 199, 204, 205, 206, 207, 213, 245, 246, 287, 290, 303], "1993": [81, 84, 86, 123, 199, 205, 228, 236, 287, 290, 303], "1994": [2, 297], "1995": [2, 12, 58, 81, 86, 122, 162, 187, 199, 202, 230, 237, 245, 256, 257, 290, 303, 310], "1996": [81, 222, 228, 229, 233, 236, 238], "1997": [35, 223, 235], "1998": [78, 81, 97, 103, 125, 163, 192, 194, 196, 199, 202, 204, 205, 206, 230, 237, 245, 246, 287, 290, 291, 298], "1999": [78, 194, 196, 197, 205, 257, 310], "19e": 318, "1_000_000": 274, "1a9f6265": [24, 32], "1co": [225, 240], "1d": [53, 61, 161, 199, 291], "1e": [35, 51, 52, 61, 65, 72, 73, 75, 78, 80, 81, 82, 84, 85, 92, 98, 100, 101, 103, 105, 106, 107, 119, 150, 151, 168, 193, 195, 196, 198, 199, 200, 201, 202, 204, 208, 209, 213, 215, 216, 219, 220, 232, 242, 253, 254, 273, 274, 276, 277, 279, 280, 283, 284, 287, 290, 320], "1e10": [35, 213, 290], "1e12": [35, 65, 78, 81, 209, 213, 279, 290], "1e13": [65, 213], "1e14": [51, 80, 213, 220, 290], "1e15": 61, "1e1e1": 30, "1e2": 213, "1e3": [35, 119, 209], "1e4": [199, 202, 213, 290], "1e5": [213, 273, 274, 275, 279, 290], "1e6": [20, 35, 75, 78, 112, 119, 198, 199, 201, 202, 203, 205, 209, 215, 248, 250, 261, 277], "1e8": [35, 199, 213, 287], "1e9": [35, 201], "1f": [17, 35, 39, 51, 65, 84, 92, 98, 107, 115, 117, 119, 128, 135, 136, 149, 164, 167, 168, 169, 170, 171, 193, 208, 209, 210, 211, 248, 251, 253, 254, 313, 320, 321], "1gb": [111, 242], "1j": 287, "1kb": [105, 107, 138, 143, 145, 210, 211, 249, 318], "1khz": [81, 114], "1kn": 98, "1l": [249, 251], "1m": [37, 38, 41, 50, 61, 73, 98, 103, 105, 107, 114, 119, 135, 162, 225, 240, 249, 251, 253, 274, 279, 282, 283, 284, 321], "1mb": [41, 94, 114, 210, 274], "1mcjk": [225, 240], "1mm": 68, "1n": [98, 127], "1n\u03b3ijk": [225, 240], "1pt": 310, "1q_": [225, 240], "1rem": 144, "1st": [59, 61, 67, 310], "1w_": [230, 237], "1x": [61, 158, 203, 213, 259], "1\u00e2": 296, "2": [0, 1, 2, 4, 5, 12, 13, 15, 16, 20, 22, 25, 35, 36, 38, 39, 40, 43, 44, 49, 51, 52, 64, 66, 68, 71, 73, 75, 81, 82, 83, 86, 87, 88, 89, 92, 93, 94, 95, 100, 103, 105, 106, 110, 114, 115, 117, 118, 120, 122, 128, 129, 130, 139, 140, 142, 146, 148, 149, 150, 151, 152, 153, 157, 159, 161, 162, 163, 164, 167, 170, 182, 187, 188, 190, 192, 196, 199, 200, 201, 202, 205, 208, 209, 210, 214, 217, 219, 221, 222, 223, 226, 232, 233, 235, 239, 241, 242, 243, 244, 253, 255, 256, 257, 266, 267, 272, 274, 276, 277, 279, 282, 283, 285, 286, 289, 293, 294, 295, 301, 302, 304, 306, 308, 316, 317, 321], "20": [1, 7, 17, 19, 25, 26, 29, 30, 31, 33, 36, 38, 41, 43, 50, 51, 52, 56, 57, 58, 59, 61, 62, 65, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 91, 92, 93, 98, 101, 105, 106, 109, 114, 115, 117, 118, 119, 120, 122, 124, 125, 127, 131, 132, 133, 134, 135, 145, 146, 147, 148, 156, 158, 159, 162, 163, 164, 166, 167, 169, 170, 171, 177, 178, 182, 183, 187, 191, 193, 194, 196, 197, 201, 202, 203, 207, 213, 215, 216, 217, 218, 224, 227, 229, 230, 231, 234, 237, 238, 243, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 257, 266, 271, 273, 276, 277, 283, 287, 290, 291, 293, 297, 298, 300, 303, 308, 309, 320, 321], "200": [0, 4, 17, 19, 20, 27, 32, 35, 36, 51, 53, 56, 57, 58, 59, 71, 72, 73, 76, 77, 78, 80, 81, 84, 85, 86, 92, 93, 98, 105, 106, 109, 111, 114, 115, 124, 128, 129, 131, 132, 133, 140, 148, 151, 156, 158, 162, 167, 168, 170, 182, 183, 193, 197, 198, 201, 202, 203, 207, 208, 215, 216, 224, 229, 230, 234, 237, 238, 242, 245, 246, 247, 248, 250, 251, 252, 253, 254, 273, 274, 279, 283, 290, 291, 293, 297, 308, 310, 321], "2000": [70, 84, 86, 113, 123, 166, 177, 200, 254, 256, 293], "2000m": [63, 92], "2001": [86, 125, 227, 230, 231, 237], "2002": [2, 35, 58, 81, 84, 86, 122, 161, 162, 187, 192, 194, 199, 204, 207, 230, 237, 245, 246, 287, 290, 297], "2003": [2, 17, 81, 84, 85, 86, 103, 121, 122, 125, 126, 187, 199, 204, 205, 206, 207, 230, 237, 258, 290, 291, 297, 298, 299, 309], "2004": [86, 123, 202, 207, 309], "2005": [222, 233], "2006": [84, 123, 161, 202, 205, 227, 231, 246, 258, 291, 297], "2007": [2, 8, 77, 85, 86, 122, 123, 162, 205, 230, 237, 290, 291], "2008": [77, 81, 123, 125, 199, 205, 230, 237, 290, 310], "2009": [10, 84, 122, 199, 202, 205, 310], "200d": 291, "200k": 67, "200m": [30, 31], "200n": 242, "201": [77, 124, 205, 230, 237, 297], "2010": [2, 86, 123, 199, 227, 231, 256], "2011": [2, 17, 199, 202, 228, 236, 310], "2012": [2, 85, 86, 103, 121, 125, 199, 205, 206, 226, 239, 245, 256, 261, 287, 297, 310], "2013": [8, 35, 187, 197, 199, 205, 213, 226, 230, 237, 239, 290, 310], "2014": [2, 163, 187, 192, 194, 197, 199, 204, 205, 226, 228, 236, 239, 256, 310], "2015": [2, 8, 15, 17, 291], "2016": [8, 84, 223, 226, 227, 231, 235, 239], "2017": [8, 84, 123, 125, 226, 230, 237, 239, 290], "2018": [2, 8, 15, 123, 226, 227, 231, 239], "2019": [8, 17, 222, 223, 227, 231, 233, 235], "201998": [229, 238], "202": [44, 61], "2020": [2, 15, 17, 55, 77, 84, 125, 223, 226, 228, 229, 235, 236, 238, 239, 256, 297], "2021": [223, 224, 227, 231, 234, 235], "2022": [205, 228, 229, 236, 238], "2023": [222, 224, 226, 227, 231, 233, 234, 239, 256], "2024": [15, 103, 104, 107, 112, 223, 224, 228, 229, 234, 235, 236, 238, 253, 273, 277, 280, 297, 320], "2025": [1, 2, 3, 8, 9, 12, 15, 17, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 40, 41, 44, 46, 48, 51, 52, 53, 54, 56, 58, 59, 60, 61, 64, 65, 67, 70, 71, 73, 77, 78, 79, 80, 81, 82, 84, 85, 86, 91, 93, 94, 95, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 160, 161, 162, 163, 165, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 187, 189, 191, 197, 198, 199, 200, 201, 202, 205, 211, 215, 216, 217, 219, 220, 222, 223, 224, 228, 229, 233, 234, 235, 236, 238, 241, 243, 245, 251, 258, 261, 266, 268, 282, 283, 287, 290, 291, 297, 298, 300, 302, 308, 310, 313, 315, 318, 320, 321, 323], "203": [14, 55, 127, 129, 140, 144, 298], "2038": 178, "204": [138, 139, 142], "2045": 309, "2048": [92, 247, 251], "205": [40, 120, 127, 301], "206": [67, 86], "207": [55, 77, 205, 230, 237], "208": [37, 197, 290, 298], "209": 44, "2094": 309, "2095": 309, "20and": [229, 238], "20but": [229, 238], "20criterion": [229, 238], "20current": [229, 238], "20db": 194, "20each": [229, 238], "20eberhart": [229, 238], "20element": [229, 238], "20h": 10, "20i": [229, 238], "20iter": [229, 238], "20kb": 103, "20m": [158, 261], "20mb": [1, 31], "20movement": [229, 238], "20particl": [229, 238], "20provid": [229, 238], "20robust": [229, 238], "20sacrif": [229, 238], "20satisfi": [229, 238], "20shi": [229, 238], "20stop": [229, 238], "20the": [229, 238], "20thu": [229, 238], "20to": [229, 238], "20veloc": [229, 238], "20x": 249, "21": [8, 9, 53, 65, 92, 98, 119, 124, 126, 128, 140, 141, 151, 163, 166, 167, 170, 177, 182, 198, 227, 229, 230, 231, 237, 238, 242, 253, 256, 259], "210": [11, 44, 86, 124], "2100": 200, "211": [14, 308], "21105": [8, 15], "212": [24, 32, 37, 86, 142, 165, 200, 205, 230, 237, 298], "213": [138, 139, 142], "2134": 178, "214": [55, 77], "214238289": [222, 233], "2145": [124, 308], "215": 245, "216": [55, 65, 67, 86], "217": [25, 26, 310], "218": 17, "2186": [119, 120], "2186179": 123, "2187": 200, "219": [119, 120], "2195829": 297, "21kb": [138, 139, 141, 142, 143], "22": [1, 2, 7, 9, 10, 33, 36, 43, 51, 52, 59, 65, 77, 85, 92, 101, 107, 121, 122, 124, 126, 141, 167, 170, 192, 193, 194, 197, 198, 201, 205, 220, 225, 228, 229, 230, 236, 237, 238, 240, 284, 315], "220": [31, 70, 86, 125], "221": [226, 239], "2212": 309, "2215": [227, 231], "222": [55, 205, 230, 237], "2224": [227, 231], "2227": [222, 229, 233, 238], "223": [55, 290, 308], "224": [40, 301], "225": [37, 86, 144], "227": [9, 86, 283], "228": [120, 298], "229": [37, 86, 165], "22mb": [153, 155], "22sin": [225, 240], "23": [8, 9, 11, 15, 17, 24, 39, 53, 55, 65, 67, 70, 77, 89, 120, 131, 141, 142, 167, 182, 183, 193, 198, 205, 220, 225, 228, 236, 240, 253, 259, 290, 308, 310], "231c2b13": [24, 33], "232": [120, 226, 239, 290], "233": [40, 86, 144, 301], "234": [17, 55, 166, 167, 170, 253, 308], "2341": [53, 166], "2345": 167, "234567": 53, "235": [37, 67, 119, 120], "236": 55, "238": 55, "239": 9, "24": [8, 9, 24, 27, 32, 38, 57, 65, 67, 77, 91, 93, 122, 124, 126, 143, 165, 169, 177, 182, 200, 210, 215, 222, 227, 230, 231, 233, 237, 242, 245, 249, 251, 271, 298], "240": [55, 298], "2407": [224, 234], "241": [120, 140, 194, 196], "2412": [228, 236], "242": [26, 55, 86], "243": [9, 24, 33, 55, 78, 290], "244": [55, 290], "245": [242, 308], "246": [140, 194, 196, 308], "247": [9, 24, 57, 58, 59], "248": [37, 43, 77], "249": [61, 77], "249992552127914": 300, "24x": [41, 61], "25": [8, 9, 10, 19, 27, 36, 38, 40, 50, 51, 52, 53, 56, 65, 67, 68, 71, 74, 78, 79, 80, 81, 84, 85, 86, 92, 98, 103, 105, 106, 109, 112, 113, 114, 115, 117, 124, 127, 128, 131, 132, 133, 135, 136, 141, 142, 144, 148, 150, 158, 164, 165, 166, 167, 168, 170, 177, 178, 182, 183, 192, 194, 197, 198, 201, 202, 203, 205, 209, 213, 215, 216, 217, 218, 227, 229, 231, 238, 242, 243, 244, 245, 248, 253, 254, 255, 256, 259, 271, 273, 276, 277, 280, 290, 297, 298, 299, 301, 302, 303, 308, 309, 320, 321], "250": [10, 30, 55, 56, 57, 58, 59, 77, 78, 140, 201, 297, 309, 320, 321], "2508": [228, 236], "250m": 143, "251": [55, 77], "2512": [166, 170], "252": 61, "253": [55, 77], "25360": 200, "254": [44, 55], "255": [55, 67, 144], "256": [104, 202, 298], "257": [17, 55, 309], "258": 37, "259": 299, "25m": 158, "25mb": [153, 155], "25th": 8, "25x": 203, "26": [8, 9, 11, 15, 17, 65, 67, 124, 134, 141, 142, 198, 215, 229, 238, 308], "260": [24, 45, 55], "261": [8, 77], "2623": 8, "26262": [243, 245, 261], "263": [55, 77, 291], "2631": 8, "264": 14, "2649": [8, 15, 17], "265": [55, 140, 143], "266": [24, 33, 37], "2668": 120, "267": [37, 44, 308], "2673": [229, 238], "2689": [77, 205, 230, 237], "269": 26, "2694": [77, 205, 230, 237], "27": [2, 8, 25, 28, 52, 107, 142, 197, 257, 298], "271": 55, "272": [8, 14, 24, 55], "273": 45, "274": [24, 55], "275": [24, 33, 124], "2756": 178, "276": 55, "2775": [226, 239], "278": [26, 55, 290], "2787": [226, 239], "279": 202, "2798": 202, "27c3c60": [147, 165], "27kb": 29, "28": [7, 8, 9, 15, 19, 36, 37, 38, 51, 65, 72, 73, 77, 78, 84, 86, 93, 101, 103, 104, 107, 112, 131, 140, 147, 166, 177, 182, 191, 197, 218, 229, 230, 237, 238, 242, 243, 245, 251, 261, 282, 283, 298, 321], "280": [55, 309], "2803": 202, "281": [78, 202], "282": [55, 229, 238], "2820": 318, "283": [55, 85, 197], "2833157": [8, 15, 17], "2833162": [8, 15, 17], "2834": [166, 170], "2841": 313, "2842": 178, "2847": 167, "285": [55, 65, 127, 167], "286": 65, "287": [14, 36, 147, 308], "28859631": 182, "2886": [182, 183], "289": [37, 308], "28h": 10, "29": [2, 36, 40, 57, 61, 71, 81, 118, 161, 166, 182, 183, 192, 194, 198, 241, 298, 300, 302, 321, 323], "290": 55, "2909": 8, "291": 310, "2913": 8, "294": 55, "295": [14, 202], "296": [37, 55, 229, 238], "297": 55, "298": [24, 32, 308], "2980": [222, 233], "2986": [226, 239], "299": [14, 55], "2991": [226, 239], "2a8c112d": 25, "2ab": 191, "2c": [161, 229, 238, 287], "2c3e50": 30, "2co": [225, 240], "2cov": 310, "2d": [1, 8, 27, 30, 53, 163, 201, 254, 313], "2d2d2d": 30, "2dt": [230, 237], "2e": [35, 78, 198, 213, 220, 252, 280, 290], "2e1": 53, "2e2": [227, 231], "2e9x": 290, "2ecc71": 30, "2f": [35, 44, 51, 52, 58, 61, 72, 73, 77, 82, 83, 84, 85, 86, 92, 98, 115, 117, 119, 128, 132, 134, 135, 136, 148, 149, 150, 151, 164, 166, 167, 169, 170, 171, 177, 183, 185, 193, 203, 208, 214, 216, 220, 249, 251, 254, 276, 310, 313, 321], "2fa": 93, "2g": [63, 92], "2gb": [27, 91, 153, 155, 247, 251, 252], "2gi": [63, 91, 92], "2h": 290, "2i": [225, 240, 310], "2k": [191, 293, 310], "2k_2": [200, 287], "2k_3": 200, "2kb": [138, 210, 211, 318], "2khz": [81, 197], "2k\u2082": [200, 249], "2k\u2083": 200, "2l": [97, 99, 199, 249, 251, 287], "2l_1": [198, 295], "2ln": 310, "2m": [38, 98, 103, 107, 245, 321], "2mb": [22, 274, 299], "2min": 323, "2n": [78, 124, 265], "2nd": [17, 35, 36, 40, 49, 51, 59, 61, 67, 84, 103, 199, 205, 287, 290, 291, 297, 310], "2pt": 310, "2px": [30, 31, 140, 141], "2q": [225, 240], "2rad": 124, "2rem": 144, "2t": 77, "2t_": [225, 240], "2v": [191, 205, 279, 287, 299], "2w_": [230, 237], "2x": [44, 61, 73, 134, 166, 310], "2x2": [28, 199], "2\u00e2": 296, "2\u03b1": [163, 274, 279], "2\u03b3": [77, 103, 205], "2\u03b3\u2081": 205, "2\u03b3\u2082": 205, "2\u03b4": 84, "2\u03b4_u": 84, "2\u03b6\u03c9\u2099": [249, 251], "2\u03b6\u03c9\u2099\u0117": 249, "2\u03b6\u03c9\u2099\u1d62": 73, "2\u03b8": 310, "2\u03c0": 98, "2\u03c1_max": 249, "3": [0, 1, 2, 4, 8, 12, 13, 15, 16, 17, 19, 20, 21, 22, 25, 35, 36, 39, 40, 44, 49, 51, 52, 64, 66, 68, 70, 71, 73, 75, 81, 82, 83, 86, 87, 88, 89, 92, 93, 94, 95, 98, 100, 103, 105, 106, 110, 113, 114, 115, 117, 118, 120, 122, 128, 129, 130, 134, 139, 140, 142, 146, 148, 149, 150, 151, 152, 153, 157, 159, 161, 162, 163, 164, 168, 169, 170, 178, 182, 184, 185, 187, 188, 190, 192, 196, 198, 199, 200, 201, 202, 205, 208, 209, 210, 213, 215, 217, 218, 219, 221, 222, 223, 225, 226, 232, 233, 235, 239, 242, 243, 244, 254, 255, 257, 266, 273, 276, 277, 278, 279, 282, 283, 285, 286, 289, 293, 294, 295, 298, 300, 301, 304, 308, 315, 316, 321, 323], "30": [1, 2, 8, 9, 12, 14, 15, 19, 20, 27, 28, 29, 31, 34, 36, 41, 43, 49, 50, 51, 53, 55, 56, 57, 58, 59, 61, 65, 67, 73, 77, 78, 81, 82, 84, 85, 86, 91, 92, 94, 98, 101, 102, 103, 105, 106, 107, 114, 115, 121, 122, 125, 127, 128, 129, 130, 131, 132, 133, 136, 146, 147, 151, 153, 154, 155, 158, 159, 162, 164, 165, 166, 167, 169, 170, 171, 178, 182, 183, 197, 198, 199, 200, 201, 202, 203, 209, 215, 216, 217, 218, 220, 224, 227, 228, 230, 231, 234, 236, 237, 242, 245, 247, 251, 252, 253, 254, 255, 261, 265, 271, 276, 277, 279, 280, 282, 283, 284, 290, 293, 298, 303, 308, 310, 318, 320, 321, 323], "300": [24, 35, 52, 56, 57, 59, 85, 92, 93, 98, 124, 136, 140, 149, 159, 169, 182, 200, 216, 247, 248, 253, 254, 255, 280, 299, 309, 310, 320, 321], "3000": [63, 92, 98, 167, 202, 208], "300m": [27, 30], "301": [55, 92], "301272239_a_comprehensive_review_of_particle_swarm_optim": [222, 233], "302": 55, "305": 25, "3051": [77, 226, 239], "306064507_chattering_analysis_of_conventional_and_super_twisting_sliding_mode_control_algorithm": [222, 233], "3062": [77, 226, 239], "307": 44, "3078": [230, 237], "308": [193, 290], "3083": [230, 237], "309": [61, 308], "30h": 10, "30k": 58, "30kb": 141, "30mb": [27, 155], "30x": [61, 193, 203], "31": [27, 36, 40, 78, 81, 140, 166, 169, 170, 177, 182, 197, 198, 226, 239, 245, 259, 290, 298, 318], "310": 59, "312": [78, 167, 308], "313": [29, 55], "313360478316266": 300, "3134": [19, 40, 81, 244, 301, 302, 321], "316": [14, 55, 197], "3168": 200, "317": [78, 290, 291], "3178": 65, "318": [55, 65, 165], "3187": [166, 170], "319": 78, "32": [8, 9, 10, 22, 32, 62, 65, 67, 68, 124, 166, 167, 170, 177, 183, 185, 193, 200, 229, 238, 247, 254, 318, 320], "320": [14, 55, 120, 165], "320px": [144, 145], "321": 297, "321654987": 199, "322": 55, "323": [27, 61, 147], "324": 26, "325": [55, 242, 290, 291], "326": 11, "327": 120, "328": [78, 194, 196, 197, 205], "329": [44, 78], "3292500": 8, "32gb": [259, 299], "32mb": 194, "33": [2, 9, 10, 57, 65, 67, 121, 122, 198, 200, 201, 225, 230, 237, 240, 318], "330": [26, 55, 59, 85, 165], "331": 78, "332": [3, 55], "332301486_sliding_mode_control_design_for_stabilization_of_underactuated_mechanical_system": [222, 233], "333": 52, "3330701": 8, "334": [55, 85], "33455": [224, 234], "335": [290, 291, 298], "336": [7, 55, 85], "337": [65, 67], "338": [9, 55], "339": [32, 33, 55], "339200": 200, "33e": 53, "34": [26, 53, 65, 67, 85, 124, 127, 131, 151, 166, 170, 183, 201, 253, 290, 308], "342": [17, 24, 33, 78, 194, 196, 197, 205], "3421": [169, 308], "343": [9, 17, 55, 85], "344": 11, "345": [77, 290, 291, 308], "3456": 308, "346": [77, 227, 231], "347": 290, "348": 216, "3498db": 30, "35": [2, 7, 11, 14, 17, 30, 31, 36, 38, 44, 50, 51, 52, 56, 65, 67, 77, 80, 82, 86, 98, 101, 105, 106, 107, 109, 113, 114, 116, 117, 121, 122, 124, 128, 139, 148, 150, 170, 183, 194, 197, 200, 201, 215, 218, 248, 259, 280, 284, 298, 299, 309, 318], "350": [27, 65, 129, 140, 141, 142, 216, 227, 231], "3509134": 8, "350m": [142, 143], "351759418_inverted_pendulum_system_disturbance_and_uncertainty_effects_reduction_using_sliding_mod": [222, 233], "354": 39, "355": 200, "356": 55, "357": [8, 17], "358": 55, "359": [9, 147], "359986572901373": 74, "35kb": 138, "36": [9, 14, 32, 38, 55, 68, 71, 77, 121, 122, 177, 178, 182, 205, 215, 227, 228, 229, 230, 231, 236, 237, 238, 271, 297, 300, 308, 310], "360": [1, 26, 44, 55], "3600": [73, 92, 93, 111, 210, 211, 251], "362": [8, 17, 24, 55, 228, 229, 236, 238], "363": [44, 227, 231], "3646": 178, "365": [36, 92], "366016236_an_optimal_pso": [222, 233], "367": 24, "3674": [229, 238], "368": [33, 44], "369": 44, "36x": 14, "37": [17, 25, 55, 122, 126, 167, 182, 215, 290], "371": [226, 239], "373": [44, 57], "375": [27, 55], "377": [55, 242], "378": [227, 231], "3782": [222, 233], "379": 55, "38": [9, 15, 31, 37, 51, 72, 98, 124, 166, 177, 182, 205, 218, 227, 230, 231, 237, 243, 247, 253, 290, 298, 300, 320], "380": [36, 309], "380mb": 245, "381": [9, 24, 32, 55], "382": 55, "382125063_optimized_hierarchical_sliding_mode_control_for_the_sw": [224, 234], "383074023_tuning_equations_for_sliding_mode_controllers_an_optimal_multi": [222, 233], "384": [9, 55, 200, 202], "385": [55, 165], "385796022798831": [226, 239], "386": [27, 57], "387": [170, 308], "388": 55, "389": [65, 85, 228, 236, 308], "38e4": [227, 231], "39": [0, 2, 3, 24, 25, 33, 65, 121, 123, 124, 126, 166, 202, 243, 256, 298, 300], "390": [77, 216], "391": [55, 85, 165, 202, 308], "392": 71, "393": [55, 200, 216], "397": 29, "398": [55, 165, 308], "399": 85, "3b": 58, "3c": 58, "3d": [1, 27, 30, 31, 52, 64, 127, 133, 155, 163, 189, 201, 214, 225, 240, 248, 253, 267, 268, 269, 316], "3db": 245, "3f": [39, 49, 51, 61, 68, 72, 73, 76, 77, 81, 82, 83, 84, 85, 86, 98, 114, 115, 117, 118, 119, 135, 136, 148, 151, 164, 167, 183, 193, 203, 214, 216, 248, 249, 251, 253, 254, 276, 277, 310, 313, 320], "3f856056": [24, 33], "3h": 290, "3i": [225, 240], "3k\u2081": 205, "3m": [194, 251], "3mb": [28, 30, 31, 157, 274], "3min": [24, 32, 323], "3n": 127, "3px": 144, "3rad": 124, "3rd": [81, 199, 230, 237, 245, 287, 290], "3x": [44, 120, 158, 299], "3x3": 61, "3xl": 269, "3\u00e2": 296, "3\u03c3": 118, "4": [0, 1, 2, 4, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 25, 26, 37, 38, 39, 40, 43, 44, 50, 51, 52, 64, 68, 70, 71, 73, 74, 75, 78, 79, 81, 86, 87, 88, 89, 93, 94, 98, 100, 103, 105, 106, 114, 115, 116, 117, 118, 120, 121, 122, 128, 129, 130, 133, 134, 135, 136, 138, 139, 140, 142, 146, 148, 149, 150, 153, 159, 161, 162, 163, 164, 167, 170, 178, 182, 184, 187, 188, 190, 196, 198, 199, 200, 202, 208, 209, 210, 213, 214, 216, 217, 218, 221, 222, 225, 226, 232, 233, 239, 240, 242, 243, 244, 253, 255, 257, 258, 259, 266, 270, 271, 273, 276, 277, 278, 279, 282, 283, 284, 288, 293, 294, 295, 297, 298, 300, 301, 303, 304, 308, 316, 323], "40": [9, 10, 13, 24, 29, 30, 33, 49, 51, 53, 55, 56, 58, 59, 61, 65, 67, 71, 73, 84, 85, 86, 92, 98, 101, 103, 105, 113, 114, 117, 124, 148, 156, 162, 164, 165, 166, 167, 182, 183, 193, 197, 198, 200, 201, 202, 203, 205, 215, 216, 228, 236, 245, 248, 253, 254, 259, 280, 290, 299, 303, 309, 321], "400": [27, 53, 55, 57, 58, 65, 121, 124, 140, 159, 197, 309], "400kb": 44, "400mb": [91, 107, 245], "400px": 159, "402": 55, "404": [30, 144], "404040": 30, "405": 291, "4052": [229, 238], "407": 82, "408": 77, "409": [27, 228, 236], "4096": 92, "40kb": 30, "40mb": 107, "40px": [139, 143], "41": [9, 55, 71, 167, 177, 182, 197, 205, 298, 299, 310], "410": 78, "412": [55, 308], "413": 78, "415": [55, 290], "42": [9, 17, 19, 25, 34, 43, 51, 53, 56, 58, 61, 72, 76, 78, 80, 124, 126, 128, 142, 144, 148, 150, 165, 167, 170, 177, 199, 203, 215, 216, 217, 224, 230, 234, 237, 245, 247, 251, 253, 254, 290, 291, 293, 297, 298, 300, 310, 313, 318, 320, 321], "420": [1, 29, 31, 36], "423": [61, 216, 217], "424": [127, 129, 144, 298], "425": [14, 77], "427": 17, "428": [55, 84], "429": 55, "42e3": [227, 231], "43": [1, 17, 24, 25, 26, 33, 36, 38, 40, 43, 51, 57, 65, 77, 85, 127, 140, 151, 177, 183, 194, 196, 205, 230, 237, 249, 251, 253, 254, 273, 275, 276, 277], "430": [55, 65, 309, 318], "432": [55, 170, 308], "4325": 178, "433": [8, 55, 144], "434": [55, 127, 129], "435": [230, 237], "438": [127, 129], "43a46cb7": 147, "44": [9, 19, 25, 36, 40, 43, 59, 61, 65, 67, 81, 92, 141, 142, 143, 144, 166, 177, 197, 200, 225, 230, 237, 240, 242, 244, 301, 302, 318, 321], "440": [55, 141], "441": 71, "443": [55, 77, 92, 230, 237], "444": 55, "445": [55, 59, 141, 308], "446": 55, "44689": 43, "447": [197, 249], "447\u00b2": 249, "447\u03c0": 249, "448": 55, "448965535453176": 300, "449": [19, 40, 81, 244, 301, 302, 321], "44px": 144, "44x44px": 31, "45": [1, 9, 25, 35, 36, 40, 45, 49, 51, 53, 61, 65, 72, 74, 77, 78, 81, 85, 86, 92, 109, 121, 122, 127, 129, 140, 146, 147, 151, 158, 164, 165, 166, 167, 169, 170, 171, 178, 197, 199, 201, 203, 242, 245, 247, 248, 251, 253, 254, 257, 259, 261, 266, 282, 285, 299, 310], "450": [1, 29, 30, 31, 36, 58, 124, 156, 216, 255], "451": [55, 167], "452": [77, 170, 313], "4523": [166, 167, 170], "455": 55, "456": [148, 167, 170, 227, 231, 254, 308], "4567": [53, 308], "456789123": 199, "457": [55, 171], "458": [192, 199], "459": 298, "45kb": [30, 138], "45m": 251, "45mb": 194, "45z": 253, "45\u00e2": 296, "46": [9, 10, 121, 122, 124, 146, 164, 165, 171, 300], "46139792": [222, 233], "462167782799487": [45, 226, 239], "463": [55, 82], "465": [205, 227, 230, 231, 237, 308], "466": 55, "46732": 200, "468": 55, "47": [9, 17, 43, 44, 55, 166, 167, 170, 230, 237, 251, 290], "472": 55, "473": 55, "474": 291, "477": [55, 122], "4782": 167, "479": 216, "47e": 53, "48": [11, 14, 37, 55, 65, 67, 92, 93, 147, 167, 182, 183, 215, 242, 299, 318], "480": 290, "480mb": 245, "480px": 30, "483": 302, "4833": 65, "484": [2, 17], "486": 78, "48681": 297, "487": [55, 84, 124, 308], "488": [55, 290], "488968": [123, 257], "489": [55, 308], "4891": 167, "4893": [123, 205], "49": [9, 10, 51, 200, 215, 303], "490": [55, 230, 237], "491": [230, 237, 291], "492": [205, 227, 230, 231, 237], "494": [19, 53], "49445": [53, 250, 253, 254], "495": 41, "49618": [73, 131, 133, 162], "498": [55, 78], "4d": [36, 163, 201], "4e": [52, 290], "4e0": 53, "4f": [35, 52, 61, 65, 68, 97, 98, 117, 119, 128, 130, 132, 133, 134, 135, 136, 148, 149, 150, 151, 164, 166, 167, 168, 169, 170, 171, 177, 178, 194, 203, 214, 216, 217, 220, 248, 310, 313, 320, 321], "4g": [63, 91, 92], "4gb": [91, 124, 242], "4gi": [63, 91, 92], "4h": 10, "4kb": [29, 107, 138, 211, 249], "4k\u2082l": [206, 247, 249, 251, 252], "4l": 163, "4lk2": 112, "4lk_2": 107, "4mb": [107, 318], "4n": 310, "4px": [140, 142], "4th": [35, 59, 199, 213, 216, 246, 290], "4x": 290, "4xl": 267, "4\u00b2": 310, "4\u03b1": 163, "4\u03bb\u1d62": [78, 205], "4\u03bb\u2081": 206, "4\u03bb\u2082": 206, "4\u03c6": [162, 251], "5": [1, 2, 4, 9, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 32, 33, 35, 36, 38, 39, 40, 41, 43, 44, 50, 51, 52, 56, 58, 65, 70, 71, 73, 74, 75, 81, 82, 83, 84, 86, 87, 88, 92, 93, 94, 98, 100, 105, 106, 114, 115, 117, 118, 120, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 145, 146, 148, 149, 150, 152, 153, 155, 158, 159, 161, 162, 163, 164, 166, 167, 169, 170, 178, 182, 183, 185, 187, 188, 190, 196, 198, 199, 200, 202, 205, 208, 209, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 230, 232, 233, 235, 237, 239, 240, 241, 242, 244, 255, 256, 257, 258, 259, 261, 266, 267, 273, 276, 277, 278, 279, 282, 283, 284, 285, 288, 289, 293, 294, 295, 296, 300, 301, 303, 306, 308, 317, 321, 323], "50": [2, 7, 9, 14, 17, 19, 20, 22, 24, 27, 29, 30, 31, 33, 35, 36, 37, 39, 40, 41, 45, 49, 50, 51, 52, 55, 56, 57, 58, 59, 61, 65, 67, 68, 72, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 92, 93, 95, 98, 101, 103, 104, 105, 106, 109, 113, 114, 115, 117, 118, 120, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 146, 147, 148, 149, 150, 153, 154, 155, 158, 162, 163, 164, 166, 167, 168, 169, 170, 171, 177, 178, 182, 183, 192, 193, 197, 198, 199, 201, 202, 203, 205, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 222, 229, 230, 232, 233, 237, 238, 242, 245, 246, 249, 250, 253, 254, 267, 269, 273, 274, 276, 277, 279, 283, 284, 285, 287, 290, 293, 297, 300, 301, 308, 309, 310, 317, 321], "500": [1, 4, 10, 17, 35, 44, 53, 55, 57, 58, 61, 65, 67, 72, 78, 84, 85, 98, 107, 114, 121, 124, 126, 132, 136, 141, 142, 146, 147, 148, 151, 152, 162, 164, 168, 170, 171, 178, 196, 197, 198, 200, 201, 202, 208, 210, 211, 215, 246, 247, 253, 254, 267, 284, 290, 293, 297, 299, 309, 310, 313], "5000": [68, 98, 133, 147, 164, 165, 200, 249, 256, 290, 293, 310], "50000": 254, "500b": [98, 107], "500kb": [110, 155], "500m": [28, 31, 140, 141, 142, 157], "500mb": [93, 98, 124, 136, 171, 245], "501": [61, 127, 129, 171, 216], "503": 111, "504": 55, "506": 55, "50d": 291, "50gb": 93, "50gi": 92, "50k": 58, "50kb": 103, "50m": [1, 30, 31, 92, 93, 98, 143, 243, 245, 274, 310], "50mb": [1, 115, 274, 318], "50w_": [230, 237], "50x": [1, 53, 107], "50\u03bc": 38, "50\u2076": 201, "51": [14, 52, 65, 170, 177, 320], "510": 55, "5103": 200, "511": [57, 58, 291], "512": [127, 308], "512x512": [1, 31], "513": [9, 11, 55], "514": 55, "515": 55, "517": [55, 127, 129, 230, 237], "5179": 200, "519": 55, "52": [9, 11, 24, 26, 33, 36, 37, 65, 78, 124, 166, 167, 170, 182, 183, 201, 245, 247, 290], "520": [25, 26], "5205": [182, 183], "5205127": 182, "521": [55, 308], "522": [11, 55], "523": [55, 127, 129, 313], "524": 165, "5247": 200, "525": [55, 127], "526": 17, "527": 165, "5281": [8, 320], "529": 78, "53": [14, 24, 33, 37, 52, 77, 124, 205, 227, 230, 231, 237], "531": 55, "533": [43, 127, 318], "535": 165, "53e4": [227, 231], "54": [9, 52, 65, 67, 107, 166, 167, 225, 240], "540": 201, "543": [127, 129], "547": 24, "54736654": 182, "5474": [182, 183], "549": 291, "55": [1, 2, 8, 9, 10, 11, 37, 51, 55, 59, 92, 124, 140, 142, 143, 144, 145, 147, 167, 182, 183, 225, 230, 237, 240, 249, 277, 309, 318], "550": 53, "550mb": 136, "554": 165, "5555": [91, 131, 170], "557": 17, "558": 309, "559": 309, "55e5": [227, 231], "56": [8, 9, 26, 32, 65, 166, 177, 183, 200, 253], "560": 290, "5601": 92, "561": 183, "562": [165, 208], "5623": 167, "564": 165, "566": 197, "567": 308, "567890": 53, "569": 17, "57": [9, 53, 57, 61, 77, 85, 92, 123, 205, 215, 226, 239, 242, 259, 287, 303], "576": [85, 165, 205], "57600": 200, "579": 218, "58": [24, 33, 37, 124, 139, 141, 142, 143, 167, 171, 177, 202, 205, 246, 287, 290, 291, 298, 310], "580": 17, "585": [8, 17, 55, 165], "586": [57, 59, 85, 205], "587": 165, "589": 129, "59": [9, 10, 24, 33, 37, 65, 67, 77, 140, 170, 182, 183, 227, 230, 231, 237, 290], "590": 28, "591": 290, "594": 27, "598": 165, "5d": [36, 107, 163, 171, 201], "5e": [84, 113, 213], "5e3": 53, "5f526980": [24, 32], "5k": [230, 237], "5k_": [230, 237], "5kb": [30, 103, 138, 210, 211], "5khz": 197, "5l": 199, "5m": [38, 81, 92, 98, 103, 105, 110, 124, 177, 197, 245, 253, 274, 321], "5mb": [30, 31, 144, 171, 274], "5min": [24, 32, 284, 323], "5n": [78, 107, 265, 297], "5px": [139, 140, 143, 145], "5rem": 140, "5t": 197, "5th": [53, 59, 98, 200, 216, 241, 310], "5x": [44, 61, 91, 158], "5\u00b2": 310, "5\u03b1\u00b2": 163, "5\u03bc": 38, "6": [1, 2, 8, 9, 15, 16, 17, 19, 20, 24, 25, 26, 28, 29, 32, 35, 36, 38, 39, 40, 43, 44, 45, 49, 51, 52, 58, 65, 67, 68, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 86, 88, 92, 93, 94, 95, 102, 117, 118, 120, 121, 122, 124, 128, 129, 131, 132, 133, 134, 135, 136, 139, 142, 146, 149, 150, 151, 153, 155, 161, 162, 164, 165, 166, 168, 170, 178, 182, 183, 185, 187, 193, 196, 198, 199, 200, 202, 203, 208, 209, 213, 215, 216, 219, 220, 222, 223, 225, 226, 230, 232, 233, 235, 237, 239, 240, 241, 242, 246, 250, 255, 258, 259, 261, 273, 274, 277, 279, 282, 283, 284, 285, 289, 293, 294, 295, 297, 299, 300, 308, 309, 317, 321], "60": [1, 8, 9, 14, 15, 26, 29, 53, 55, 56, 57, 59, 72, 77, 81, 84, 86, 92, 98, 101, 111, 112, 113, 127, 128, 129, 137, 139, 141, 142, 143, 145, 150, 152, 153, 154, 155, 164, 165, 166, 167, 169, 170, 177, 178, 182, 189, 200, 201, 215, 218, 228, 236, 247, 251, 252, 254, 257, 265, 277, 282, 283, 284, 290, 297, 298, 299, 303, 320, 321], "600": [53, 56, 57, 59, 98, 121, 127, 129, 218, 255, 290], "600px": 295, "606": 318, "608": [71, 127], "60m": 310, "60mb": [27, 28, 30, 31, 153, 155], "61": [24, 25, 32, 36, 39, 43, 167, 227, 230, 231, 237], "611": [129, 308], "61508": [243, 261], "617": [41, 297], "619": [127, 129], "62": [9, 10, 11, 14, 24, 25, 33, 36, 37, 40, 52, 81, 124, 182, 197], "620": 200, "6216": [19, 40, 81, 244, 301, 302, 321], "62164880704037": 300, "63": [9, 14, 25, 37, 52, 65, 67, 230, 237], "632": [193, 197], "63361": 297, "635": 127, "63e3": [227, 231], "64": [9, 37, 55, 147, 185, 245, 256], "640": [129, 200], "642": [78, 205, 291], "643": 29, "644": [11, 92], "64448": 200, "647": 203, "648": [65, 67, 182], "64bit": 282, "65": [9, 10, 52, 55, 65, 71, 74, 107, 124, 140, 141, 142, 167, 177, 192, 194, 215, 220, 221, 229, 230, 237, 238, 242, 253, 259, 297], "650": [1, 30, 53, 156], "6523": 308, "653": 308, "654": 170, "654987321": 199, "65535": 73, "6557": 19, "6561": 200, "657": 318, "66": [9, 36, 40, 57, 65, 147, 225, 240, 297, 298], "662": 127, "667eea": 31, "67": [7, 9, 17, 33, 37, 53, 55, 151, 166, 170, 182, 183, 253, 254, 266, 298, 299, 308, 309], "67076936": 182, "6708": [182, 183], "674": [40, 81, 302], "675": [71, 302], "677": 302, "678": [24, 33], "6784": 200, "67e": 53, "68": [11, 25, 77, 111, 140, 143, 178, 182, 298], "680": [7, 302], "6812": 178, "685": 309, "686": 309, "687": 308, "689": 302, "69": [9, 55, 123, 182, 246, 249, 291], "690": [36, 302], "698": 308, "699146": 123, "6a15e9b8": [24, 32], "6d": [36, 161, 177, 185, 201, 247, 251], "6db": 245, "6e": 53, "6f": [51, 52, 76, 98, 107, 114, 116, 135, 149, 169, 177, 193, 220, 248, 252, 253, 276, 277, 278, 313, 320, 321], "6ghz": 119, "6mu": [227, 231, 232], "6px": [144, 145], "6th": 98, "6x": [118, 119, 202, 259], "6xl": [269, 271], "6\u00e2": 296, "7": [4, 8, 9, 14, 15, 16, 19, 24, 26, 27, 28, 29, 32, 33, 36, 38, 40, 46, 48, 51, 52, 54, 55, 56, 57, 58, 60, 65, 67, 70, 71, 72, 73, 75, 77, 78, 81, 82, 84, 85, 86, 88, 89, 92, 94, 98, 101, 113, 114, 116, 118, 120, 121, 122, 124, 127, 128, 131, 132, 133, 134, 135, 136, 141, 146, 148, 150, 151, 152, 162, 163, 164, 167, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 190, 191, 194, 196, 197, 198, 199, 201, 202, 205, 209, 215, 216, 222, 223, 225, 226, 230, 232, 233, 235, 237, 239, 240, 241, 243, 245, 246, 247, 250, 251, 253, 254, 255, 259, 266, 273, 282, 284, 288, 293, 297, 299, 300, 305, 308, 309, 321], "70": [7, 8, 9, 14, 15, 27, 30, 31, 39, 55, 57, 58, 59, 61, 65, 67, 86, 93, 98, 113, 133, 153, 154, 155, 166, 170, 192, 215, 216, 217, 224, 234, 245, 252, 261, 297, 309, 313], "700": [53, 57, 82, 193], "703": 11, "706": 165, "709": 55, "70k": [58, 67], "71": [9, 17, 19, 30, 37, 52, 85, 167, 220, 226, 239, 298], "711": 55, "712": 9, "7167709d": [24, 33], "72": [9, 24, 32, 43, 52, 57, 230, 237, 259, 313], "720": [30, 198, 247], "721": [55, 193], "722": 14, "723": [41, 55], "7231": 308, "7234": 167, "724": 129, "7240": [229, 238], "726": [127, 129], "7270": [229, 238], "729": [19, 53, 193, 200, 250, 253, 254, 258], "7298": [73, 131, 133, 162, 202, 215], "729844": 167, "73": [9, 37, 55, 123, 162, 202, 215, 229, 238, 246, 291], "731": 14, "732825508736690": 45, "733": [3, 323], "734": 165, "737": [55, 71], "738": 165, "739": 55, "7390": [222, 229, 233, 238], "74": [1, 9, 10, 14, 43, 183, 230, 237], "743": 308, "747": [24, 33, 55], "749": 182, "74h": 10, "75": [2, 9, 37, 40, 61, 65, 67, 92, 98, 107, 112, 115, 121, 122, 126, 131, 134, 135, 159, 166, 167, 182, 213, 215, 218, 226, 229, 230, 237, 238, 239, 242, 243, 253, 254, 257, 280, 299, 300, 301, 303, 308, 310, 318, 320], "750": [53, 167, 198], "752": 308, "754": [79, 177, 193], "757": 309, "7571": 200, "7587": 19, "759": [24, 25, 32, 33], "76": [9, 10, 36, 40, 57, 85, 123, 171, 204, 205, 227, 230, 231, 237, 243, 253], "761053": 205, "764": [57, 58], "764ba2": 31, "765": 31, "768": 193, "768kb": 318, "768px": [30, 140, 144], "77": [9, 14, 19, 36, 40, 81, 92, 127, 197, 242, 244, 301, 302, 308, 321], "7717": 8, "776": 308, "777": [91, 310], "78": [9, 11, 53, 55, 65, 67, 124, 171, 182, 200, 249, 251, 253, 259, 298], "780": [247, 249], "782": 28, "7825": 8, "783": 11, "784": [29, 129], "787": 310, "789": [148, 167, 254, 308], "7891": 308, "789123456": 199, "78h": 290, "78hk": 290, "79": [9, 10, 33, 37, 86, 119, 120, 166, 170, 193, 249], "797": 129, "79e6d51": 165, "7e13": 290, "7e2": 53, "7f": 185, "7kb": 318, "7min": [16, 89, 188], "7x": [120, 203, 259, 290], "8": [1, 2, 4, 7, 8, 9, 10, 14, 16, 19, 20, 25, 26, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 50, 51, 52, 55, 57, 58, 63, 65, 67, 71, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 98, 100, 105, 106, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 128, 129, 131, 132, 133, 134, 135, 136, 139, 141, 142, 143, 146, 148, 149, 150, 152, 154, 155, 158, 162, 163, 164, 165, 166, 167, 169, 170, 178, 183, 187, 188, 190, 191, 193, 197, 198, 199, 200, 202, 203, 205, 208, 209, 210, 211, 213, 214, 216, 217, 219, 220, 222, 223, 225, 226, 229, 232, 233, 235, 238, 239, 240, 241, 245, 248, 250, 254, 255, 256, 257, 259, 265, 273, 275, 276, 277, 282, 283, 284, 293, 299, 300, 303, 308, 310, 315, 318, 320, 321], "80": [3, 9, 31, 33, 39, 44, 51, 52, 55, 56, 57, 58, 63, 71, 78, 85, 91, 92, 93, 98, 101, 113, 114, 118, 124, 125, 126, 140, 141, 142, 148, 164, 165, 167, 170, 178, 182, 197, 215, 216, 217, 218, 228, 229, 230, 236, 237, 238, 242, 245, 247, 250, 252, 253, 255, 280, 283, 290, 298, 308, 309, 310, 321], "800": [1, 31, 56, 57, 58, 59, 93, 121, 156, 200, 245, 309], "8000": [13, 189, 256, 321], "8001": 321, "802": 177, "806": [57, 58], "808": 71, "8080": [63, 73, 92, 128, 150, 170], "8081": 73, "80kb": 138, "81": [9, 11, 26, 30, 51, 53, 61, 73, 74, 86, 92, 131, 134, 136, 150, 164, 170, 182, 198, 208, 209, 216, 220, 221, 229, 238, 258, 259, 289, 295], "810": 124, "8123": 308, "8176": [123, 205], "82": [9, 24, 33, 43, 55, 85, 158, 166, 167, 178, 215, 243, 253, 259, 318, 320], "821": 313, "822": 300, "823": [170, 308], "8234": [166, 308], "826": [127, 129], "827": [27, 28], "828": 30, "83": [9, 14, 86, 147, 166, 170, 227, 229, 230, 231, 237, 238], "836": 308, "84": [9, 44, 147, 167, 200], "841": 298, "84379": [78, 205], "844": 119, "848": 298, "85": [0, 2, 4, 9, 11, 17, 24, 31, 33, 36, 37, 38, 39, 40, 44, 51, 52, 53, 64, 71, 78, 86, 88, 92, 93, 95, 113, 121, 124, 126, 151, 158, 167, 170, 183, 189, 190, 194, 201, 208, 218, 242, 245, 249, 251, 254, 255, 256, 259, 262, 273, 275, 276, 277, 282, 283, 284, 290, 291, 293, 297, 298, 299, 310, 323], "850": [202, 247], "8501": [90, 91, 92, 150, 170, 265, 321], "8502": 91, "850x": 61, "852": [166, 298], "854": [11, 308], "86": [9, 55, 67, 147, 167, 259, 308, 310, 318], "8601": 70, "86400": 93, "865": [127, 129, 308], "867": 245, "86878336": 182, "8688": [182, 183], "87": [9, 10, 37, 53, 55, 65, 122, 124, 126, 167, 177, 182, 183, 205, 215, 218, 242, 284, 298], "8705": 318, "872": 64, "8734": 308, "875": [78, 205], "876": 308, "876kb": 318, "88": [1, 9, 27, 28, 30, 31, 55, 71, 85, 124, 137, 139, 140, 141, 142, 143, 144, 145, 152, 153, 156, 157, 166, 215, 245, 259, 265, 298, 299], "884": 308, "885": [78, 205], "8888": [72, 91, 116], "89": [9, 17, 32, 36, 55, 65, 81, 124, 142, 167, 229, 230, 237, 238, 242, 245, 253, 259, 284, 300, 308], "8901": 308, "8908": 318, "891": 308, "892": 308, "895515998216162": [45, 226, 239], "896": [227, 230, 231, 237], "8acab28": 25, "8c": 24, "8d": 201, "8da4c88b": 24, "8e4x": 290, "8gb": [93, 124], "8kb": 138, "8m": [194, 245], "8mb": [1, 155], "8n": 78, "8px": [139, 140, 142, 143, 144, 145], "8x": [61, 202, 259, 290], "9": [1, 4, 8, 9, 10, 14, 15, 19, 22, 25, 26, 29, 30, 31, 32, 34, 36, 37, 38, 40, 43, 44, 51, 52, 55, 57, 58, 59, 61, 63, 65, 67, 71, 72, 73, 74, 75, 77, 81, 82, 83, 85, 86, 88, 90, 91, 92, 93, 104, 107, 111, 113, 114, 117, 118, 119, 124, 127, 128, 129, 131, 133, 134, 136, 146, 148, 149, 150, 151, 158, 162, 164, 166, 167, 168, 169, 170, 182, 187, 197, 198, 199, 200, 201, 202, 204, 205, 208, 209, 213, 214, 216, 220, 221, 222, 224, 226, 229, 230, 232, 233, 234, 237, 238, 239, 241, 243, 244, 245, 250, 254, 258, 259, 261, 282, 283, 288, 289, 293, 295, 299, 300, 301, 308, 310, 318, 320, 321], "90": [1, 2, 8, 9, 11, 14, 17, 27, 28, 30, 31, 35, 38, 53, 56, 58, 61, 65, 67, 71, 86, 88, 92, 93, 98, 104, 107, 111, 119, 121, 122, 124, 126, 127, 129, 134, 137, 139, 140, 141, 142, 143, 144, 145, 152, 153, 156, 157, 161, 167, 168, 182, 190, 193, 200, 201, 202, 207, 215, 218, 222, 228, 233, 236, 242, 245, 252, 253, 254, 255, 261, 265, 283, 290, 297, 298, 299, 309, 310, 313, 318], "900": [25, 71, 93], "9000": [177, 185], "9001": [177, 185], "901": [227, 230, 231, 237], "9012": 53, "9017": 200, "904": 308, "905": [57, 310], "9090": [63, 92], "9093": 92, "9096": 318, "91": [9, 10, 14, 25, 37, 38, 43, 53, 65, 124, 227, 230, 231, 237, 259, 284, 308], "9100": 92, "912": 308, "916": 29, "9177": 308, "918": 11, "92": [9, 11, 24, 33, 36, 43, 65, 77, 78, 88, 166, 170, 177, 230, 237, 245, 255, 284, 290, 299], "920": [1, 30, 247, 310], "9200": 92, "92097": 200, "923": 308, "924": [85, 123, 204, 205, 230, 237], "92808594": 182, "9281": [182, 183], "92t": 78, "93": [9, 11, 31, 53, 55, 71, 77, 86, 107, 124, 182, 183, 222, 226, 233, 239, 259, 298], "931": 71, "931256": 291, "937": [246, 291], "93930": [228, 236], "93944": [228, 236], "94": [9, 10, 19, 36, 55, 124, 126, 166, 170, 226, 239, 242, 245, 284, 290], "941": [85, 123, 204, 205, 230, 237], "942": [17, 58], "95": [2, 4, 8, 12, 17, 24, 31, 32, 33, 36, 37, 38, 39, 43, 50, 53, 56, 65, 67, 68, 71, 75, 76, 77, 78, 86, 87, 88, 89, 93, 95, 100, 103, 104, 107, 113, 115, 116, 118, 119, 120, 123, 124, 127, 129, 135, 136, 149, 151, 158, 166, 169, 171, 178, 182, 190, 197, 200, 201, 205, 207, 208, 209, 218, 242, 244, 245, 247, 250, 252, 253, 255, 259, 277, 282, 283, 284, 290, 297, 298, 299, 301, 308, 310, 318, 320, 323], "950": 215, "95th": [53, 120, 135, 290, 308], "95x": 61, "96": [1, 9, 24, 26, 53, 55, 58, 59, 68, 94, 183, 218, 242, 284], "963": 308, "963kb": 318, "97": [9, 14, 55, 86, 107, 113, 124, 166, 178, 182, 242, 245, 248, 259, 284, 313, 318], "9700k": [61, 259], "971": [246, 291], "974": 308, "975": 53, "9750h": 119, "9765": 308, "978": [17, 78, 123, 205], "9780486462783": 123, "9780748408269": 257, "9781420065619": [123, 205], "9781449367831": 8, "9781498701822": 123, "9798": 308, "98": [9, 33, 35, 36, 38, 55, 59, 65, 86, 88, 93, 113, 124, 127, 158, 200, 215, 218, 242, 245, 253, 284, 297, 299, 310, 318], "9821": [167, 308], "983": 308, "9856": 166, "986": 170, "987": [170, 308], "987654321": 199, "988": 182, "98x": 61, "99": [9, 14, 16, 33, 35, 38, 55, 65, 67, 70, 75, 76, 77, 82, 83, 85, 86, 88, 89, 98, 118, 119, 120, 121, 122, 124, 125, 126, 140, 143, 158, 166, 170, 182, 188, 191, 209, 210, 211, 213, 215, 218, 226, 229, 238, 239, 242, 245, 261, 279, 290, 308, 309, 310, 318], "992": 308, "998": 308, "999": [210, 211, 254], "99th": [120, 170, 308], "9_": 299, "9a": 24, "9b": 24, "9c": 24, "9kb": [138, 139, 141, 142, 143], "9th": 209, "9x": 259, "A": [8, 12, 13, 17, 19, 22, 29, 35, 40, 45, 49, 51, 53, 55, 59, 61, 62, 67, 70, 78, 81, 84, 85, 86, 94, 103, 109, 117, 123, 125, 127, 132, 144, 145, 146, 154, 155, 156, 161, 163, 164, 167, 170, 194, 196, 197, 199, 200, 201, 202, 204, 205, 206, 209, 210, 213, 215, 218, 220, 221, 222, 223, 226, 227, 231, 232, 233, 235, 239, 246, 251, 252, 253, 259, 274, 278, 279, 283, 284, 287, 289, 294, 295, 297, 298, 301, 303, 310, 313, 318], "AND": [38, 61, 86, 167, 310], "AS": [15, 91], "And": [13, 33, 297], "As": [13, 201, 232, 241, 283], "At": [33, 43, 56, 84, 86, 118, 145, 146, 163, 164, 191, 195, 198, 232, 246, 254, 295, 308], "BE": 142, "Be": [15, 44, 147], "But": [24, 67, 86, 144, 146, 163, 201, 297], "By": [2, 3, 8, 12, 24, 39, 55, 62, 63, 65, 67, 70, 85, 92, 94, 95, 121, 122, 124, 125, 146, 164, 166, 167, 168, 169, 205, 207, 209, 223, 224, 225, 226, 227, 230, 231, 232, 234, 235, 237, 239, 240, 242, 255, 258, 282, 283, 284, 299, 301, 309, 315, 323], "FOR": [24, 59, 61, 63, 92, 98, 202, 215, 216, 242, 244, 245, 284], "For": [0, 4, 6, 7, 13, 15, 17, 18, 22, 23, 30, 31, 34, 35, 39, 51, 53, 55, 64, 65, 67, 68, 69, 72, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 97, 104, 113, 117, 119, 120, 121, 124, 125, 126, 127, 129, 132, 140, 141, 142, 144, 145, 146, 150, 156, 159, 160, 161, 162, 163, 164, 167, 168, 170, 178, 183, 185, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 209, 212, 214, 215, 216, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 246, 249, 250, 252, 253, 256, 257, 259, 264, 265, 266, 274, 275, 277, 281, 285, 286, 287, 289, 290, 293, 294, 295, 297, 298, 299, 306, 308, 309, 310, 311, 315, 316, 323], "IF": [202, 216], "IN": 58, "ISE": [45, 51, 53, 56, 59, 61, 75, 95, 97, 107, 128, 129, 130, 132, 133, 134, 135, 136, 148, 150, 151, 166, 167, 168, 169, 170, 178, 182, 183, 193, 198, 199, 200, 201, 202, 215, 216, 217, 228, 236, 246, 253, 285], "If": [12, 17, 19, 23, 31, 35, 44, 49, 50, 51, 53, 58, 61, 70, 73, 76, 77, 78, 79, 80, 84, 86, 94, 98, 103, 104, 116, 117, 121, 122, 123, 124, 125, 126, 129, 144, 145, 148, 163, 164, 166, 167, 170, 177, 191, 193, 194, 200, 201, 202, 203, 204, 205, 206, 213, 216, 222, 224, 226, 227, 229, 231, 233, 234, 238, 239, 255, 268, 270, 275, 287, 290, 291, 294, 299, 301, 306, 308, 320], "In": [2, 10, 12, 13, 28, 30, 31, 38, 41, 44, 45, 61, 74, 81, 82, 91, 92, 96, 98, 107, 127, 132, 142, 144, 156, 159, 170, 178, 187, 193, 199, 203, 204, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 254, 257, 258, 266, 269, 277, 285, 288, 298, 306, 313], "It": [12, 17, 19, 22, 52, 53, 82, 83, 98, 103, 127, 165, 170, 199, 203, 224, 226, 227, 229, 230, 231, 232, 234, 237, 238, 239, 252, 258], "Its": [162, 222, 223, 226, 233, 235, 239, 291], "NO": [61, 166, 169, 197, 200, 208, 242, 245, 276, 302], "NOT": [12, 44, 98, 109, 167, 242], "Near": [33, 41, 85, 161, 164, 166, 193, 201, 205, 213, 228, 236, 293], "No": [2, 3, 5, 12, 15, 17, 19, 23, 24, 26, 27, 29, 30, 31, 32, 34, 35, 40, 41, 44, 45, 49, 50, 51, 53, 56, 61, 63, 64, 65, 67, 68, 70, 72, 77, 78, 84, 85, 86, 87, 88, 91, 98, 101, 102, 115, 117, 120, 124, 126, 127, 132, 134, 138, 141, 143, 144, 145, 146, 148, 149, 153, 159, 161, 162, 163, 165, 166, 168, 169, 170, 177, 178, 182, 190, 193, 196, 197, 198, 201, 202, 203, 205, 207, 211, 213, 216, 218, 220, 229, 230, 232, 237, 238, 242, 247, 248, 250, 251, 254, 274, 276, 277, 283, 284, 285, 287, 288, 293, 297, 298, 300, 306, 309, 310, 313, 316, 320, 321, 323], "Not": [7, 14, 15, 17, 35, 36, 55, 59, 61, 65, 67, 72, 77, 80, 82, 85, 86, 97, 115, 117, 120, 122, 129, 134, 135, 140, 141, 143, 144, 145, 148, 165, 166, 167, 178, 200, 201, 202, 208, 210, 215, 265, 266, 275, 283, 290, 297, 299, 309, 310, 313], "ONE": [21, 226, 227, 231, 239], "OR": [85, 86, 127, 155, 242, 298, 310], "Of": [224, 234], "On": [17, 67, 79, 89, 91, 93, 143, 144, 145, 146, 163, 166, 167, 175, 191, 205, 206, 228, 230, 236, 237, 242, 304, 310, 317], "One": [67, 108, 119, 122, 164, 222, 224, 233, 234, 266, 275, 276, 280, 290, 298, 308, 310], "Or": [7, 13, 22, 61, 80, 91, 116, 124, 132, 133, 150, 151, 163, 183, 220, 253, 275], "Such": [222, 226, 230, 233, 237, 239], "TO": [142, 178, 216], "That": 21, "The": [4, 5, 6, 8, 10, 12, 17, 18, 19, 20, 22, 24, 25, 26, 27, 29, 30, 32, 34, 36, 38, 39, 41, 52, 56, 58, 59, 62, 64, 65, 67, 69, 70, 74, 75, 77, 82, 83, 84, 85, 87, 89, 90, 94, 95, 97, 121, 123, 125, 127, 131, 132, 133, 134, 135, 136, 143, 145, 146, 149, 152, 154, 156, 157, 159, 161, 167, 170, 185, 189, 191, 192, 195, 198, 199, 201, 202, 203, 204, 206, 214, 216, 218, 220, 221, 222, 224, 226, 227, 231, 232, 233, 234, 239, 241, 244, 245, 247, 249, 250, 252, 253, 254, 256, 257, 258, 265, 266, 270, 276, 277, 282, 285, 286, 287, 288, 289, 290, 292, 294, 296, 298, 299, 303, 306, 309, 310, 315, 316, 317, 321], "Their": [224, 234], "Then": [119, 156, 159, 163, 171, 205, 287, 303], "There": 232, "These": [3, 12, 14, 17, 26, 44, 45, 62, 72, 74, 75, 94, 106, 116, 117, 127, 131, 147, 160, 191, 199, 204, 207, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 261, 270, 276, 277, 310, 313], "Theses": [222, 233], "To": [20, 22, 64, 69, 70, 94, 95, 128, 129, 131, 132, 133, 135, 136, 137, 141, 146, 147, 155, 160, 163, 164, 166, 167, 168, 169, 170, 185, 189, 191, 195, 204, 222, 223, 225, 226, 227, 229, 231, 232, 233, 235, 238, 239, 240, 246, 268, 279, 287, 290, 291, 293, 299, 308], "WITH": [61, 98, 126, 218], "Will": [70, 84, 102, 108, 131, 139, 143, 222, 233, 310, 313], "With": [12, 17, 19, 22, 49, 53, 56, 78, 82, 86, 92, 103, 105, 119, 124, 127, 136, 148, 164, 177, 182, 183, 195, 199, 222, 232, 233, 254, 269, 275, 287, 290, 291, 294, 297, 298, 310], "_": [9, 10, 37, 39, 41, 50, 51, 53, 65, 67, 68, 76, 78, 80, 81, 84, 85, 92, 98, 100, 106, 107, 109, 112, 114, 115, 116, 117, 119, 120, 123, 126, 132, 133, 134, 151, 168, 171, 193, 195, 198, 199, 200, 201, 202, 203, 206, 209, 216, 220, 221, 224, 225, 226, 227, 231, 232, 234, 239, 240, 246, 248, 277, 279, 283, 287, 290, 291, 293, 294, 295, 299, 310, 313, 315], "_0": [193, 295], "_1": [19, 74, 81, 97, 152, 156, 191, 198, 199, 200, 201, 220, 221, 225, 240, 242, 245, 246, 258, 272, 287, 290, 291, 293, 295, 296, 299], "_12": [225, 240], "_1b_\u03b8_2": [225, 240], "_1co": [225, 240], "_1sin": [225, 240], "_1\u03b8": [225, 240], "_2": [19, 74, 81, 97, 152, 191, 198, 199, 200, 201, 220, 221, 225, 240, 242, 245, 246, 258, 272, 287, 290, 291, 293, 295, 296, 299], "_20m_2": [225, 240], "_22": [225, 240], "_2co": [225, 240], "_2m": [225, 240], "_2sin": [225, 240], "_3": [246, 290], "_4": [246, 290], "__": 84, "___": 200, "_____": 200, "_______________": 126, "_______________________": 126, "_____________________________________________": 126, "__attribute__": 177, "__call__": [55, 61, 216], "__class__": [154, 168, 207], "__config__": 254, "__debug__": [40, 79, 300], "__del__": [55, 78, 168, 210, 211], "__dict__": 39, "__file__": 117, "__future__": 71, "__getattr__": [76, 117], "__import__": [117, 254], "__init__": [10, 11, 17, 19, 35, 37, 39, 53, 55, 58, 61, 63, 65, 71, 72, 73, 75, 76, 77, 78, 79, 80, 84, 85, 86, 92, 94, 103, 106, 107, 112, 115, 116, 117, 118, 119, 127, 132, 134, 135, 194, 201, 203, 207, 208, 209, 210, 211, 216, 220, 247, 248, 249, 250, 251, 252, 253, 254, 255, 261, 274, 278, 279, 280, 297, 299, 313, 315, 320, 321], "__main__": [39, 53, 76, 92, 117, 253, 254, 300, 313, 320, 321], "__name__": [39, 53, 75, 76, 92, 93, 115, 117, 154, 168, 207, 210, 252, 253, 254, 278, 280, 300, 313, 320, 321], "__post_init__": [38, 56, 72, 107, 116, 131], "__pycache__": 91, "__repr__": 39, "__str__": 94, "__version__": [115, 254], "_a": [193, 279], "_adapt_bound": 112, "_adapt_bounds_for_perform": 247, "_adapt_for_converg": 254, "_adapt_for_low_divers": 254, "_adapt_for_stagn": 254, "_adapt_pso_paramet": 112, "_adaptive_gain": 117, "_add_required_paramet": 72, "_aggregate_worker_result": 63, "_analyze_boundary_failur": 75, "_analyze_computational_trend": 63, "_analyze_constraint_behavior": 75, "_analyze_control_trend": 63, "_analyze_controller_consist": 75, "_analyze_coverage_ti": 255, "_analyze_disturbance_reject": 75, "_analyze_exponential_converg": 75, "_analyze_failure_mod": 255, "_analyze_failure_pattern": 255, "_analyze_framework_perform": 255, "_analyze_integration_consist": 75, "_analyze_jitter_control_impact": 209, "_analyze_mathematical_properti": 209, "_analyze_matrix_condit": 75, "_analyze_multi_objective_properti": 209, "_analyze_numerical_behavior": 75, "_analyze_numerical_st": 209, "_analyze_parameter_sweep": 278, "_analyze_pareto_converg": 209, "_analyze_perform": 247, "_analyze_performance_regress": 255, "_analyze_pso_converg": 209, "_analyze_regress": 75, "_analyze_result": 17, "_analyze_robustness_characterist": 75, "_analyze_saturation_behavior": 75, "_analyze_score_success_correl": 255, "_analyze_stability_trend": 63, "_analyze_test_coverag": 75, "_analyze_violation_region": 209, "_apply_adaptive_adjust": 112, "_apply_adaptive_regular": 290, "_apply_dynamic_adjust": 247, "_apply_gains_to_config": 63, "_apply_migr": 72, "_apply_parameter_map": 72, "_apply_safe_improv": 255, "_apply_safety_constraint": 321, "_apply_safety_limit": 277, "_apply_structure_chang": 72, "_apply_theoretical_valid": 255, "_apply_value_transform": 72, "_approve_compliance_deploy": 255, "_approve_deploy": 255, "_approve_performance_deploy": 255, "_array_to_output": [40, 301], "_assess_chattering_sever": 209, "_assess_config_health": 247, "_assess_configuration_valid": 75, "_assess_controller_health": 63, "_assess_converg": 98, "_assess_convergence_properti": 75, "_assess_current_perform": 247, "_assess_degradation_level": 255, "_assess_deployment_impact": 255, "_assess_deployment_risk": 255, "_assess_failure_impact": 255, "_assess_mathematical_sound": 209, "_assess_numerical_robust": 75, "_assess_operation_st": 209, "_assess_overall_condit": 209, "_assess_overall_health": 254, "_assess_overall_numerical_st": 209, "_assess_overall_st": 255, "_assess_perform": [98, 247], "_assess_performance_object": 75, "_assess_reachability_properti": 75, "_assess_risk_level": 255, "_assess_safety_requir": 75, "_assess_static_mathematical_properti": 255, "_assess_theoretical_sound": 255, "_attempt_adaptive_tun": 252, "_attempt_bounds_correct": 252, "_attempt_configuration_repair": 252, "_attempt_parameter_adjust": 252, "_b": 193, "_backup_": 254, "_basecontrollerconfig": 9, "_basic_state_valid": 61, "_benchmark_control": 255, "_benchmark_perform": 254, "_benchmark_pso_optim": 255, "_benchmark_simulation_engin": 255, "_build": [1, 13, 24, 25, 26, 27, 28, 29, 30, 31, 89, 138, 141, 142, 144, 154, 188, 189, 194, 315], "_c": [74, 198], "_cache_lock": 117, "_calculate_completion_percentag": 255, "_calculate_compliance_scor": 255, "_calculate_confid": 255, "_calculate_control_energi": 75, "_calculate_control_quality_scor": 75, "_calculate_deployment_scor": 255, "_calculate_diversity_trend": 98, "_calculate_expected_improv": 255, "_calculate_hypervolum": 209, "_calculate_improvement_r": 98, "_calculate_is": 75, "_calculate_ita": 75, "_calculate_mathematical_rigor_scor": 209, "_calculate_migration_health_scor": 102, "_calculate_next_review_d": 255, "_calculate_numerical_accuraci": 209, "_calculate_objective_margin": 75, "_calculate_optimization_confid": 255, "_calculate_overall_health": 255, "_calculate_overall_risk": 255, "_calculate_overshoot": 75, "_calculate_partial_success_accuraci": 255, "_calculate_performance_degrad": 75, "_calculate_performance_metr": 75, "_calculate_performance_scor": 255, "_calculate_r_squar": 75, "_calculate_recovery_time_stat": 255, "_calculate_reliability_trend": 255, "_calculate_rigor_scor": 255, "_calculate_rise_tim": 75, "_calculate_robustness_margin": 75, "_calculate_settling_tim": 75, "_calculate_steady_state_error": 75, "_calculate_success_confid": 255, "_calculate_swarm_divers": 98, "_calculate_system_confid": 255, "_calculate_theoretical_reaching_tim": 75, "_calculate_tolerance_trend": 255, "_calculate_weighted_partial_coverag": 255, "_call_count": 98, "_call_f": [55, 84], "_canonicalize_controller_typ": [51, 56, 100, 274], "_capture_st": 117, "_categorize_viol": 75, "_check_classical_smc_constraint": 252, "_check_configur": 254, "_check_controller_compat": 247, "_check_controller_factori": 254, "_check_controller_plant_compat": 278, "_check_depend": 254, "_check_diversity_collaps": 104, "_check_emergency_condit": 277, "_check_fitness_plateau": [104, 112], "_check_issue2_compli": 247, "_check_math_consist": 247, "_check_numerical_st": 63, "_check_performance_optim": 247, "_check_pso_engin": 254, "_check_simulation_engin": 254, "_check_sta_smc_constraint": 252, "_check_state_constraint": 75, "_check_statistical_converg": [104, 112], "_check_system_resourc": 254, "_check_trigg": 247, "_classical_smc_constraint": 290, "_classify_error": 252, "_cleanup_threshold": 117, "_clone_control": 117, "_collect_coverage_with_timeout": 255, "_combine_cost": [53, 57, 246], "_combine_stage_result": 112, "_compliance_fallback_strategi": 255, "_compress_old_histori": 63, "_comput": 207, "_compute_adaptive_inertia": 247, "_compute_constraint_penalti": 215, "_compute_control_algorithm": 321, "_compute_control_cor": 41, "_compute_control_effort": 277, "_compute_convergence_effici": 251, "_compute_cost_from_traj": [19, 45, 53, 57, 193, 250, 253], "_compute_equivalent_control": [41, 55, 78, 81, 85, 226, 239], "_compute_error_r": 63, "_compute_overshoot": [63, 277], "_compute_physics_matric": 78, "_compute_regressor": 191, "_compute_settling_error": 63, "_compute_settling_tim": 277, "_compute_sliding_surfac": [55, 78, 81, 85, 226, 239], "_compute_steady_state_error": 277, "_compute_taper_factor": [55, 81], "_compute_time_varying_term": 61, "_confid": 279, "_config_cach": 117, "_config_to_dict": 72, "_configplacehold": 9, "_control": [63, 106, 117], "_control_buff": 210, "_controller_cach": 117, "_controller_pool": 117, "_controller_registri": [76, 132], "_controller_specific_reaching_valid": 279, "_convert_env_valu": 72, "_convert_gains_to_legaci": 76, "_coulomb_frict": 135, "_count_verified_mathematical_properti": 75, "_count_verified_properti": 209, "_counter": [119, 120], "_coverage_fallback_strategi": 255, "_create_adaptive_fitness_funct": 112, "_create_control": 75, "_create_controller_impl": [116, 300], "_create_default_config": 72, "_create_disturbance_profil": 75, "_create_dynamics_model": [51, 56, 80, 100], "_create_emergency_fallback": 98, "_create_failure_result": 44, "_create_fallback_control": 98, "_create_minimal_config": 117, "_create_objective_funct": 58, "_create_perturbed_system": 75, "_create_test_control": 252, "_create_test_dynam": 252, "_create_test_plant_config": 114, "_create_with_fallback": 117, "_creation_count": 117, "_creation_start": 76, "_crossov": 44, "_cusum": 119, "_cv": 310, "_d": 291, "_data": [159, 303], "_debug_step_avail": 117, "_debug_step_configur": 117, "_debug_step_instanti": 117, "_debug_step_paramet": 117, "_deep_merg": 72, "_define_monitoring_requir": 255, "_define_risk_monitor": 255, "_define_rollback_trigg": 255, "_deprecation_map": 102, "_deprecation_warn": 102, "_detect_anomali": 63, "_detect_performance_regress": 63, "_determine_acceptable_risk_threshold": 255, "_determine_deployment_statu": 255, "_determine_gain_count": 101, "_determine_overall_test_statu": 75, "_dict_to_config": 72, "_discretize_exact": [55, 84], "_discretize_forward_eul": 55, "_divid": 193, "_domin": 44, "_dot": 258, "_dummydyn": [9, 10], "_dummynumba": [9, 10], "_duration_at_least_dt": 216, "_dynam": 210, "_dynamics_ref": [17, 78, 168, 210], "_err": 84, "_estimate_convergence_difficulti": 290, "_estimate_convergence_tim": 75, "_estimate_performance_degrad": 209, "_estimate_roundoff_error": 209, "_estimate_truncation_error": 209, "_evalu": 201, "_evaluate_bounds_candid": 58, "_evaluate_controller_perform": 277, "_evaluate_criterion": 255, "_evaluate_particle_saf": 98, "_evaluate_perform": [106, 277], "_evaluate_pso_perform": 58, "_evaluate_single_object": 277, "_evaluation_lock": 98, "_evict_least_us": 277, "_execute_parallel_optim": 63, "_exp": 193, "_ext": [27, 28, 29, 30], "_extract_claim": 297, "_extract_control_valu": 80, "_extract_controller_paramet": [51, 56, 80, 98, 114], "_extract_criteria_valu": 255, "_extract_env_var_overrid": 72, "_extract_gains_from_config": [72, 116], "_f": 289, "_factor": 291, "_factory_lock": [51, 56, 80, 100, 103, 116], "_failur": 280, "_fallback": 84, "_fallbackpdcontrol": 9, "_find_migration_path": 73, "_fit": [53, 57, 193], "_gain": 51, "_generate_boundary_scenario": 75, "_generate_bounds_candid": 58, "_generate_cart_position_st": 75, "_generate_comprehensive_report": [75, 255], "_generate_consistency_test_scenario": 75, "_generate_constraint_test_scenario": 75, "_generate_convergence_scenario": 75, "_generate_decision_rational": 255, "_generate_deployment_condit": 255, "_generate_deployment_recommend": 255, "_generate_disturbance_scenario": 75, "_generate_executive_summari": [75, 255], "_generate_extreme_test_scenario": 75, "_generate_gap_analysi": 255, "_generate_health_improv": 255, "_generate_high_velocity_st": 75, "_generate_improvement_recommend": 255, "_generate_integration_scenario": 75, "_generate_large_angle_st": 75, "_generate_matrix_test_condit": 75, "_generate_migration_recommend": 102, "_generate_mitigation_strategi": 255, "_generate_objective_test_scenario": 75, "_generate_optimization_recommend": [63, 251], "_generate_parameter_combin": 278, "_generate_path_detail": 255, "_generate_precision_test_scenario": 75, "_generate_reachability_scenario": 75, "_generate_recommend": 247, "_generate_recovery_recommend": 255, "_generate_regression_report": 75, "_generate_risk_assess": 255, "_generate_robustness_scenario": 75, "_generate_rollback_plan": 255, "_generate_sampl": 17, "_generate_small_angle_st": 75, "_generate_stability_test_scenario": 75, "_generate_test_recommend": 75, "_generate_test_scenario": 117, "_generate_test_st": 98, "_get_cached_config": 117, "_get_config_valu": 73, "_get_controller_info": [49, 51, 56, 80, 100], "_get_cpu_util": 63, "_get_current_threshold": 255, "_get_deployment_histori": 255, "_get_framework_vers": 255, "_get_historical_coverage_baselin": 255, "_get_latest_vers": 73, "_get_local_vari": 300, "_get_memory_usag": 63, "_get_most_used_deprec": 102, "_get_optimized_bound": 249, "_get_path_completion_percentag": 255, "_get_recent_degradation_ev": 255, "_get_recent_partial_success_ev": 255, "_get_recent_path_execut": 255, "_get_safety_limit": 277, "_get_surface_deriv": 199, "_get_theoretical_bound": [277, 279], "_get_upcoming_remov": 102, "_get_used_vari": 300, "_get_validation_rul": 247, "_group_migrations_by_control": 102, "_guard_bound": [61, 203, 216], "_guard_energi": [61, 203, 216], "_guard_no_nan": [61, 203, 216], "_handle_computation_error": 63, "_handle_configuration_error": 63, "_handle_creation_error": 63, "_handle_parameter_inst": 247, "_handle_poor_converg": 247, "_handle_safety_viol": 247, "_handle_unknown_error": 63, "_has_return_stat": 300, "_hat": 258, "_high_frequ": 209, "_histori": [9, 10, 82, 98, 210], "_history_buff": 63, "_i": [19, 53, 81, 193, 198, 200, 205, 220, 225, 240, 246, 258, 279, 287, 288, 289, 290, 293, 295], "_ic": [150, 170], "_identify_bottleneck": 251, "_identify_confidence_factor": 255, "_identify_covered_area": 255, "_identify_critical_issu": 75, "_identify_critical_matric": 75, "_identify_factory_issu": 75, "_identify_failed_path": 255, "_identify_improvement_opportun": 255, "_identify_integration_issu": 75, "_identify_partial_path": 255, "_identify_regress": 75, "_identify_risk_factor": 255, "_identify_stagnation_period": 98, "_identify_successful_path": 255, "_identify_validation_gap": 255, "_improv": 53, "_initi": 117, "_initial_st": [98, 117], "_initialize_controller_paramet": 321, "_initialize_controller_pool": 63, "_initialize_deprecation_map": 102, "_initialize_dynamics_model": 203, "_initialize_migration_rul": 72, "_initialize_pso_environ": 98, "_initialize_validation_rul": 72, "_int": [36, 40, 205, 301], "_integral_st": 210, "_integrate_step": 254, "_interfac": 44, "_interpret_chattering_result": 209, "_interpret_conditioning_result": 209, "_interpret_jitter_result": 209, "_interpret_lyapunov_result": 209, "_interpret_multi_objective_result": 209, "_interpret_numerical_st": 209, "_interpret_pso_converg": 209, "_interpret_reachability_result": 209, "_interpret_real_time_result": 209, "_interpret_stability_result": 75, "_is_appropriate_except": 75, "_is_valid_posit": 215, "_issue_deprecation_warn": 102, "_iter_perturbed_phys": [57, 224, 234], "_j": [198, 246, 291], "_jupyter_cach": [1, 29, 154], "_k": [53, 119, 198, 216, 246, 279, 290], "_kinetic_energi": 86, "_kwarg": [61, 203], "_large_amplitud": 209, "_large_disturb": 166, "_last_control": 277, "_last_error": 98, "_last_stat": 119, "_last_u_out": 84, "_legacy_control": 76, "_load_base_config": 72, "_load_baseline_result": 75, "_load_config": 72, "_load_config_schema": 254, "_load_environment_overrid": 72, "_load_full_step": 203, "_load_lowrank_step": 203, "_load_parameter_set": 72, "_load_templ": 72, "_load_validation_criteria": 252, "_lock": 98, "_lock_timeout": [51, 56, 80, 103, 116], "_log_creation_failur": 117, "_lower": 119, "_m": 246, "_make_cache_kei": 117, "_make_deployment_decis": 75, "_mathematical_fallback_strategi": 255, "_matrix": 258, "_max_du": 84, "_max_forc": 76, "_max_inst": 277, "_measure_actual_overshoot": 252, "_measure_control_computation_lat": 255, "_measure_simulation_step_tim": 255, "_message_queu": 277, "_method": 94, "_migrate_configur": 252, "_migrate_split_paramet": 102, "_migrate_to_gains_arrai": 102, "_migration_histori": 102, "_minimal_fallback": 255, "_miss": 44, "_mode": 86, "_model": 278, "_monitor_decision_accuraci": 255, "_monitor_loop": 277, "_monitor_path_reli": 255, "_monitor_performance_metr": 255, "_monitor_tolerance_effect": 255, "_must_be_strictly_posit": 216, "_n": [53, 200, 246, 290], "_needs_migr": 252, "_no_show": [283, 284], "_normal": 193, "_normalis": [53, 57, 58], "_normalize_result": [40, 301], "_notify_observ": [17, 72], "_numeric_linearize_continu": [55, 84], "_observ": 17, "_on_controller_delet": 117, "_optim": [167, 253, 280], "_optimize_quality_threshold": 255, "_optimize_threshold": 255, "_p": [79, 258, 290, 294], "_parallel": 253, "_pd_kd": 84, "_pd_kp": 84, "_percent": 120, "_perform": 255, "_perform_automatic_migr": 102, "_perform_cleanup": 117, "_performance_fallback_strategi": 255, "_pool": 277, "_pool_siz": 117, "_potential_energi": 86, "_pre_creation_check": 117, "_prepare_controller_config": 63, "_previous_error": 210, "_prioritize_improv": 255, "_process_config": 117, "_propagate_classical_smc_constraint": 252, "_propagate_sta_smc_constraint": 252, "_r": 294, "_rate": 81, "_record_migr": 102, "_recovery_backup_": 92, "_ref": 317, "_reg": 290, "_reset_metr": 98, "_residual_window": 119, "_resolve_controller_gain": [38, 49, 51, 56, 98, 100, 114, 116], "_result": [44, 254], "_run_optim": 58, "_run_parallel_simul": 17, "_run_performance_benchmark": 255, "_run_precision_test": 75, "_run_pso_stag": 112, "_run_sequential_simul": 17, "_run_verification_simul": 252, "_safe_control_output": 321, "_safe_fallback": [55, 84], "_satur": 297, "_seeded_global_numpi": [58, 224, 234], "_select_optimal_bound": 58, "_select_restart_particl": 247, "_select_stabil": 86, "_setup_configuration_manag": 72, "_setup_log": 117, "_setup_logg": 254, "_setup_monitor": 61, "_setup_optimization_environ": 98, "_setup_valid": 61, "_should_adapt_bound": 247, "_should_adapt_inertia": 247, "_should_restart_particl": 247, "_should_switch_to_stabil": [55, 86], "_should_switch_to_sw": [55, 86], "_should_termin": 98, "_simulate_and_evalu": 254, "_simulate_control_respons": 75, "_simulate_convergence_respons": 75, "_simulate_reaching_phas": 75, "_simulate_scenario": 277, "_simulate_step_respons": 75, "_simulate_with_control_histori": 75, "_simulate_with_disturb": 75, "_smc": [72, 273], "_sqrt": 193, "_sta_smc_control_numba": [41, 55], "_sta_smc_cor": [55, 85], "_stab_histori": 86, "_stab_state_var": 86, "_stabil": 291, "_stability_monitor": 61, "_stabilizer_initi": 86, "_stat": 44, "_state_buff": 210, "_state_lock": 117, "_state_valid": 61, "_state_var": [82, 98], "_static": [13, 27, 28, 30, 138, 139, 141, 142, 143, 144, 188], "_stcore": [90, 91], "_step": 232, "_strategy_default_paramet": 117, "_strategy_direct_cr": 117, "_strategy_minimal_config": 117, "_subscrib": 277, "_summarize_controller_consist": 75, "_summarize_disturbance_reject": 75, "_summarize_error_handl": 75, "_summarize_perform": 75, "_summarize_robust": 75, "_surface_buff": 210, "_switch_tim": 86, "_t": [128, 193], "_tabl": 13, "_test_behavioral_requir": 278, "_test_boundary_respons": 75, "_test_configuration_consist": 75, "_test_control_perform": 75, "_test_controller_behavior": 278, "_test_controller_dynamics_integr": 75, "_test_controller_respons": 75, "_test_degenerate_condit": 75, "_test_edge_case_configur": 75, "_test_factory_cr": 75, "_test_finite_time_converg": 255, "_test_invalid_configur": 75, "_test_lyapunov_st": 255, "_test_method": 278, "_test_plant_model_behavior": 278, "_test_properti": 278, "_test_robustness_properti": 255, "_test_sliding_surface_reach": 255, "_test_valid_configur": 75, "_threshold": 120, "_time": 290, "_timeout": 261, "_total": 44, "_total_compute_tim": 98, "_u": 193, "_u_prev": 84, "_update_adaptive_gain": 81, "_update_config_path": 73, "_update_histori": 321, "_update_mod": [55, 86], "_upper": 119, "_usage_count": 277, "_usage_statist": 102, "_use_historical_baselin": 255, "_validate_adaptation_st": 72, "_validate_adaptive_paramet": 72, "_validate_adaptive_smc": 72, "_validate_ascii_head": 255, "_validate_basic_structur": 72, "_validate_bound": 252, "_validate_classical_smc": 72, "_validate_com_within_length": 216, "_validate_compat": 278, "_validate_component_interfac": 75, "_validate_config_transit": 73, "_validate_configuration_compli": 255, "_validate_control_paramet": [72, 116], "_validate_controller_bound": 247, "_validate_controller_compat": 252, "_validate_controller_constraint": 252, "_validate_controller_gain": [38, 49, 51, 56, 82, 100, 103, 114], "_validate_controller_interfac": 63, "_validate_controller_specific_constraint": 98, "_validate_convergence_condit": 72, "_validate_convergence_properti": 255, "_validate_convergence_qu": 252, "_validate_cross_paramet": 72, "_validate_documentation_coverag": 255, "_validate_energy_conserv": 209, "_validate_file_head": 255, "_validate_gain": [63, 72, 116, 196, 199, 204, 273, 274], "_validate_gain_update_st": 73, "_validate_gains_cach": 112, "_validate_hybrid_smc": 72, "_validate_input": 117, "_validate_issue2_compli": 252, "_validate_mathematical_consist": 252, "_validate_mathematical_constraint": 199, "_validate_mathematical_properti": 194, "_validate_matric": 61, "_validate_method": 278, "_validate_method_signatur": 278, "_validate_mpc": 72, "_validate_mpc_paramet": [49, 51, 56], "_validate_numerical_properti": 255, "_validate_optimization_upd": 73, "_validate_paramet": [199, 274], "_validate_pareto_optim": 209, "_validate_performance_benchmark": 252, "_validate_physical_constraint": 98, "_validate_properti": 278, "_validate_pso_bound": 107, "_validate_pso_gain": 98, "_validate_reachability_condit": 75, "_validate_realtime_constraint": 255, "_validate_runtime_constraint": 73, "_validate_safety_limit": 252, "_validate_saturation_upd": 73, "_validate_schema": 63, "_validate_st": 279, "_validate_sta_smc": 72, "_validate_stability_properti": 255, "_validate_stability_requir": [72, 116], "_validate_structur": 252, "_validate_syntax": 252, "_validate_twisting_paramet": 72, "_validate_typ": [252, 278], "_validate_type_annot": 255, "_vec": 258, "_verify_control_object": 75, "_verify_controller_properti": 75, "_verify_convergence_rate_specif": 75, "_verify_error_handl": 75, "_verify_graceful_boundary_handl": 75, "_verify_lyapunov_condit": 75, "_verify_precision_requir": 75, "_viscous_frict": 135, "_vs_": 321, "_weak_refer": 117, "_weight": 118, "_x": [290, 294], "_y": 290, "_zone": [81, 224, 234], "a1": [246, 261], "a2": [246, 261], "a21": 200, "a3": 261, "a31": 200, "a32": 200, "a4": 261, "a41": 200, "a42": 200, "a43": 200, "a5": 261, "a51": 200, "a52": 200, "a53": 200, "a54": 200, "a61": 200, "a62": 200, "a63": 200, "a64": 200, "a65": 200, "a7d72dba": [24, 33], "a8f3c2d1": 165, "a_c": 84, "a_cl": 279, "a_d": 84, "a_reg": 220, "aa": [1, 30, 31], "aaron": 8, "ab": [35, 37, 40, 41, 49, 51, 61, 67, 72, 73, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 98, 104, 107, 113, 114, 116, 119, 125, 132, 149, 151, 161, 164, 166, 167, 168, 169, 171, 177, 178, 195, 197, 199, 201, 202, 203, 204, 205, 209, 213, 215, 216, 219, 220, 224, 228, 234, 236, 242, 247, 249, 252, 254, 255, 256, 261, 277, 282, 283, 287, 290, 291, 301, 310, 313, 318, 320, 321], "abbrev": 315, "abbrevi": [117, 291, 298], "abc": [52, 76, 199, 278], "abil": [223, 229, 235, 238, 310], "abl": 146, "abort": 108, "about": [2, 3, 8, 13, 17, 22, 32, 40, 67, 74, 112, 127, 145, 146, 161, 165, 198, 220, 221, 224, 225, 232, 234, 240, 256, 272, 295, 296, 302], "abov": [8, 12, 53, 59, 64, 74, 77, 91, 92, 93, 120, 141, 142, 144, 147, 155, 158, 163, 167, 170, 171, 178, 195, 196, 197, 199, 215, 216, 221, 222, 223, 225, 226, 230, 232, 233, 235, 237, 239, 240, 246, 264, 283, 285, 290, 293, 294], "abrupt": [84, 222, 224, 226, 232, 233, 234, 239], "abruptli": 201, "abs_": 81, "abs_d": [178, 313], "absenc": 294, "absent": [5, 221, 225, 240], "absolut": [45, 55, 61, 65, 68, 75, 81, 97, 107, 124, 127, 129, 135, 140, 154, 166, 167, 190, 200, 205, 216, 223, 226, 227, 229, 231, 235, 238, 239, 267, 269, 271, 285, 301, 318, 321], "absolute_toler": 208, "absorb": [201, 202, 215], "abstract": [12, 17, 39, 41, 51, 52, 59, 67, 127, 132, 199, 220, 232, 320], "abstractmethod": [17, 52, 76, 199, 278], "abus": 76, "ac": [84, 222, 233], "academ": [1, 4, 12, 13, 16, 17, 19, 25, 31, 55, 89, 95, 125, 126, 127, 188, 189, 192, 222, 232, 233, 257, 297, 298], "acado": 257, "acc05": [222, 233], "acc_num": [222, 233], "acceler": [1, 8, 22, 30, 35, 41, 53, 55, 58, 63, 73, 74, 91, 92, 97, 104, 118, 129, 131, 134, 135, 137, 139, 141, 142, 144, 145, 146, 152, 156, 161, 163, 164, 171, 176, 189, 191, 193, 195, 198, 204, 208, 220, 224, 226, 227, 231, 232, 234, 239, 242, 246, 250, 251, 254, 258, 259, 261, 272, 279, 289, 290, 293, 295, 304, 310, 317], "acceleration_coeffici": 92, "acceleration_schedul": 293, "acceleration_solut": 295, "accent": 90, "accept": [1, 5, 7, 10, 22, 25, 26, 27, 32, 35, 45, 50, 59, 61, 65, 67, 75, 78, 81, 85, 88, 92, 93, 98, 109, 114, 115, 119, 121, 126, 147, 149, 158, 163, 164, 166, 170, 175, 177, 182, 183, 185, 196, 197, 200, 209, 210, 218, 222, 224, 225, 226, 233, 234, 239, 240, 250, 251, 253, 254, 259, 261, 269, 271, 273, 278, 280, 284, 290, 299, 306, 308, 310], "acceptable_chatt": 209, "acceptable_chattering_threshold": 209, "acceptable_jitt": 209, "acceptable_risk_threshold": 255, "acceptable_threshold": 310, "acceptable_violation_prob": 209, "accepted_step": 61, "access": [0, 1, 2, 4, 13, 17, 20, 23, 24, 27, 29, 32, 38, 40, 44, 49, 52, 55, 56, 58, 61, 64, 65, 67, 76, 79, 81, 90, 91, 93, 95, 98, 100, 106, 107, 111, 115, 117, 118, 124, 125, 127, 128, 130, 131, 135, 137, 139, 142, 143, 146, 150, 153, 168, 170, 171, 175, 177, 185, 188, 189, 199, 203, 207, 210, 216, 218, 220, 222, 223, 224, 226, 233, 234, 235, 239, 256, 257, 276, 280, 282, 283, 288, 300, 301, 315, 317, 318], "access_log": 92, "accessmod": 92, "accessor": [10, 55, 59, 61, 192, 196, 224, 234], "accident": 144, "accommod": [19, 119], "accompani": [19, 232], "accomplish": [24, 127], "accord": [39, 62, 82, 196, 199, 204, 222, 224, 226, 227, 229, 230, 231, 233, 234, 237, 238, 239, 256, 257, 273, 275], "accordingli": [50, 232, 296], "account": [1, 84, 97, 119, 185, 193, 202, 220, 224, 234, 253, 290, 313], "accumul": [35, 77, 84, 90, 118, 119, 163, 200, 207, 209, 210, 224, 230, 234, 237, 282, 284, 290], "accur": [12, 22, 32, 35, 51, 56, 57, 58, 59, 61, 74, 84, 86, 94, 97, 121, 125, 134, 135, 137, 147, 165, 166, 190, 216, 222, 223, 232, 233, 235, 265, 290, 309], "accuraci": [0, 4, 12, 16, 19, 22, 30, 35, 39, 56, 57, 58, 59, 65, 67, 72, 79, 81, 86, 87, 88, 89, 103, 118, 123, 124, 125, 128, 129, 131, 134, 135, 138, 146, 147, 148, 149, 156, 164, 165, 166, 167, 169, 170, 188, 192, 194, 195, 196, 197, 199, 202, 205, 209, 213, 216, 217, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 243, 244, 246, 255, 265, 282, 283, 284, 287, 290, 293, 294, 297, 299, 303, 308, 309, 310, 318, 320], "accuracy_audit": [122, 123, 125, 126], "achiev": [7, 10, 12, 17, 19, 28, 29, 30, 32, 33, 36, 38, 39, 40, 53, 55, 71, 72, 75, 78, 81, 85, 86, 92, 98, 119, 121, 122, 123, 125, 127, 129, 143, 156, 163, 164, 167, 169, 182, 183, 188, 193, 197, 201, 204, 205, 206, 216, 222, 224, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 259, 261, 290, 293, 300, 301, 303, 310, 320], "achieved_target": 36, "aci": 91, "acklei": 193, "acknowledg": [2, 11, 15, 67], "acm": 8, "acquir": 56, "acquisit": [63, 98, 105, 115], "acr": 91, "acrobot": 86, "across": [1, 12, 14, 19, 20, 24, 25, 27, 29, 30, 32, 33, 34, 36, 37, 40, 41, 45, 51, 52, 53, 56, 58, 59, 61, 63, 65, 70, 71, 75, 76, 84, 86, 88, 90, 92, 94, 95, 97, 98, 104, 106, 112, 114, 116, 118, 119, 120, 121, 122, 125, 127, 129, 133, 137, 139, 141, 143, 148, 149, 154, 155, 156, 157, 162, 166, 167, 169, 170, 171, 174, 181, 185, 188, 190, 192, 193, 194, 199, 204, 209, 213, 215, 216, 218, 220, 222, 223, 224, 226, 228, 230, 233, 234, 235, 236, 237, 239, 242, 244, 246, 247, 248, 250, 251, 253, 255, 256, 257, 258, 265, 274, 275, 277, 282, 283, 290, 291, 292, 293, 298, 303, 308, 318, 320], "act": [74, 198, 205, 222, 226, 232, 233, 239, 255, 291, 295, 296], "action": [1, 13, 14, 16, 19, 23, 25, 29, 30, 31, 37, 38, 39, 41, 44, 58, 59, 65, 67, 70, 71, 76, 84, 85, 88, 89, 102, 111, 112, 118, 121, 122, 145, 146, 147, 151, 154, 161, 164, 178, 185, 188, 190, 193, 205, 211, 222, 226, 227, 231, 232, 233, 239, 241, 244, 245, 255, 261, 273, 274, 278, 281, 298, 300, 301, 310, 321], "actions_taken": 111, "activ": [1, 12, 30, 31, 40, 52, 59, 61, 64, 73, 77, 85, 92, 93, 95, 102, 111, 117, 121, 122, 124, 126, 135, 139, 146, 153, 161, 163, 164, 175, 177, 188, 193, 203, 205, 216, 218, 222, 233, 243, 244, 251, 252, 254, 255, 261, 266, 284, 295, 298, 320], "activate_emergency_fallback": 111, "active_control": 118, "active_count": 111, "active_result": [40, 301], "actual": [10, 12, 22, 28, 39, 40, 41, 44, 49, 50, 51, 56, 65, 67, 85, 95, 108, 114, 115, 117, 119, 120, 126, 127, 144, 148, 159, 167, 169, 170, 171, 177, 178, 188, 201, 207, 208, 222, 224, 232, 233, 234, 252, 253, 254, 255, 261, 287, 297, 298, 301, 302, 318, 321], "actual_count": [98, 117], "actual_far": 119, "actual_fit": 201, "actual_frequ": 93, "actual_nam": 313, "actual_reaching_tim": 209, "actual_valu": 208, "actuat": [9, 22, 45, 51, 53, 56, 61, 62, 68, 74, 76, 77, 78, 82, 84, 85, 86, 98, 118, 123, 146, 148, 149, 161, 163, 164, 166, 167, 170, 177, 182, 183, 185, 194, 195, 196, 197, 199, 209, 216, 221, 222, 224, 226, 227, 231, 232, 233, 234, 239, 242, 247, 249, 250, 252, 253, 259, 261, 265, 273, 275, 290, 294, 296, 303, 306, 310, 316, 317], "actuator_bandwidth": 253, "actuator_command": 63, "actuator_delai": 81, "actuator_function": 321, "actuator_lat": [209, 216], "actuator_limit": 253, "actuator_satur": [185, 321], "actuator_stress": 248, "ad": [1, 2, 10, 13, 14, 15, 17, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 52, 53, 55, 56, 70, 72, 82, 84, 108, 117, 118, 127, 134, 137, 138, 141, 142, 144, 145, 165, 188, 192, 204, 205, 222, 224, 226, 229, 230, 232, 233, 234, 237, 238, 239, 256, 257, 266, 271, 274, 278, 287, 290, 301], "adabunu": [223, 235], "adam": 202, "adamhein": [225, 240], "adapt": [0, 2, 9, 10, 12, 17, 19, 20, 22, 29, 30, 31, 32, 37, 38, 40, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 62, 64, 71, 72, 73, 74, 76, 78, 82, 83, 84, 85, 87, 88, 92, 98, 100, 101, 103, 105, 106, 113, 114, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 139, 146, 148, 149, 150, 158, 159, 160, 162, 164, 167, 168, 170, 171, 172, 177, 182, 183, 187, 189, 191, 192, 193, 196, 199, 202, 203, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 222, 223, 229, 230, 232, 233, 235, 237, 238, 242, 243, 244, 245, 247, 253, 254, 257, 259, 265, 272, 273, 275, 276, 277, 282, 283, 285, 293, 294, 296, 298, 303, 304, 306, 308, 309, 316, 317, 320, 322], "adapt_paramet": 253, "adapt_parameters_realtim": 247, "adapt_r": [216, 224, 234], "adapt_rate_limit": [38, 51, 56, 72, 77, 80, 81, 98, 100, 101, 105, 106, 107, 115, 197, 224, 226, 234, 239, 273, 275, 276], "adapt_rate_posit": 77, "adaptation_act": [77, 81], "adaptation_active_fract": 287, "adaptation_alpha": 166, "adaptation_bandwidth": 112, "adaptation_beta": 166, "adaptation_bound": 81, "adaptation_config": 98, "adaptation_converg": 248, "adaptation_cost": 113, "adaptation_error": 113, "adaptation_focus": 113, "adaptation_gain": [98, 99], "adaptation_histori": 112, "adaptation_law": [9, 17, 98, 99], "adaptation_log": 321, "adaptation_map": 99, "adaptation_monitor": 113, "adaptation_not_too_slow": 112, "adaptation_param": [98, 109], "adaptation_penalty_weight": 113, "adaptation_r": [36, 37, 65, 67, 73, 81, 98, 131, 132, 166, 208], "adaptation_rang": 98, "adaptation_rate_bound": 248, "adaptation_ratio": [77, 81, 98, 113], "adaptation_sat_threshold": 55, "adaptation_st": [112, 247], "adaptation_strategi": 247, "adaptation_test_1": 113, "adaptation_test_2": 113, "adaptation_time_const": 72, "adaptation_trigg": 247, "adaptationlaw": 17, "adaptationmonitor": 321, "adapted_bound": [112, 247], "adapted_fit": 112, "adapted_gain": [132, 166], "adaptive_acceler": 293, "adaptive_bound": [20, 106, 275], "adaptive_callback": 254, "adaptive_ci": 320, "adaptive_config": [38, 51, 56, 72, 80, 98, 100, 101, 103, 105, 106, 109, 114, 248, 273, 275, 276, 279, 280], "adaptive_control": [106, 273, 275, 276, 320], "adaptive_control_loop": 321, "adaptive_ctrl": 203, "adaptive_data": 313, "adaptive_dt": 135, "adaptive_en": 119, "adaptive_factori": [275, 276, 280], "adaptive_fit": 112, "adaptive_fitness_funct": 113, "adaptive_gain": [52, 81, 98, 101, 117, 166, 242, 253, 280, 298], "adaptive_inertia": 293, "adaptive_integr": 9, "adaptive_lyapunov": 294, "adaptive_lyapunov_deriv": 294, "adaptive_param": [98, 103, 105], "adaptive_paramet": 247, "adaptive_pso": 104, "adaptive_pso_optim": 98, "adaptive_regular": 35, "adaptive_result": [275, 276, 280], "adaptive_rk": 61, "adaptive_schedul": 247, "adaptive_select": 321, "adaptive_smc": [2, 9, 19, 21, 22, 28, 30, 38, 39, 40, 42, 50, 51, 52, 53, 56, 63, 65, 67, 73, 75, 76, 77, 78, 79, 82, 88, 91, 92, 93, 98, 100, 101, 103, 105, 106, 107, 108, 113, 114, 115, 116, 117, 124, 126, 128, 131, 132, 146, 147, 148, 149, 150, 159, 166, 167, 170, 177, 185, 189, 191, 197, 203, 210, 216, 222, 223, 224, 226, 227, 231, 233, 234, 235, 239, 242, 244, 247, 250, 253, 254, 265, 273, 275, 276, 277, 278, 283, 285, 287, 298, 301, 303, 304, 317, 321], "adaptive_smc_bound": [76, 249], "adaptive_smc_deprec": 98, "adaptive_smc_dip": 113, "adaptive_smc_gain": 76, "adaptive_smc_law": 294, "adaptive_smc_optim": 253, "adaptive_smc_technical_guid": [30, 77], "adaptive_sta": 98, "adaptive_strategi": 214, "adaptive_sub": [273, 275, 276], "adaptive_tun": [252, 321], "adaptive_vs_class": 320, "adaptive_w": 247, "adaptive_weight": 214, "adaptiveboundarylay": 35, "adaptivecontrol": 17, "adaptivecontrollermanag": 106, "adaptivecontrollersystem": 321, "adaptivectrl": 317, "adaptivegainschedul": 35, "adaptiveperf": 259, "adaptivepso": [215, 253], "adaptivepsofactori": 112, "adaptivepsooptim": 104, "adaptivepsotun": [247, 254], "adaptiveregular": [220, 290], "adaptiverk4": 35, "adaptiverk45integr": 216, "adaptiverungekutta": [59, 61], "adaptivesimul": 254, "adaptivesmc": [9, 10, 17, 35, 41, 51, 63, 67, 76, 77, 80, 82, 86, 98, 132, 210, 221, 222, 233, 250, 294, 317], "adaptivesmcconfig": [17, 38, 51, 72, 73, 80, 100, 101, 105, 109, 114, 131, 216, 273, 275, 276, 277], "adaptivesmcconfigmapp": 63, "adaptivesmcoutput": [77, 82], "adaptivesmcparamet": 109, "adaptiveswingupsmc": 86, "add": [5, 10, 11, 13, 14, 17, 19, 20, 21, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39, 40, 52, 55, 56, 57, 59, 61, 63, 67, 68, 70, 71, 72, 73, 76, 77, 78, 81, 82, 84, 86, 89, 90, 94, 98, 99, 100, 101, 107, 112, 115, 117, 118, 122, 124, 127, 132, 133, 134, 135, 137, 138, 140, 143, 155, 157, 159, 162, 164, 165, 166, 167, 168, 169, 170, 171, 177, 178, 182, 183, 185, 187, 195, 196, 198, 202, 203, 210, 213, 226, 227, 231, 239, 248, 253, 254, 255, 256, 257, 265, 266, 268, 269, 272, 277, 283, 290, 291, 300, 313, 315, 321], "add_argu": [300, 321], "add_completed_todo": 14, "add_direct": [24, 30], "add_html_meta_tag": 31, "add_level_result": 247, "add_manifest_link": 31, "add_mathviz_asset": 30, "add_parameter_uncertainti": 283, "add_random_perturb": 191, "add_simulation_result": 252, "add_subplot": [133, 201], "add_trajectori": [59, 61], "add_validation_result": 252, "addeventlisten": [30, 143], "addhandl": 254, "addison": [161, 207, 297], "addit": [19, 24, 30, 31, 34, 36, 37, 39, 45, 49, 50, 51, 56, 59, 61, 68, 71, 72, 73, 74, 76, 78, 80, 98, 99, 100, 105, 107, 112, 117, 119, 120, 122, 132, 137, 141, 147, 159, 177, 178, 185, 196, 197, 199, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 247, 251, 255, 256, 268, 273, 275, 287, 289, 298, 309, 313, 320], "addition": [12, 225, 230, 237, 240], "additional_depend": 10, "addopt": 39, "addr": 185, "address": [25, 26, 38, 59, 71, 73, 82, 90, 91, 94, 95, 98, 116, 122, 128, 150, 166, 170, 177, 185, 199, 222, 223, 226, 227, 230, 231, 232, 233, 235, 237, 239, 243, 246, 251, 254, 257, 260], "addus": 92, "adequ": [7, 31, 77, 103, 121, 122, 125, 178, 255, 282, 290, 308, 310], "adequate_reject": 75, "adf": [309, 310], "adher": [1, 63, 68, 93, 226, 239, 245, 278], "adjust": [1, 10, 20, 22, 24, 30, 37, 38, 50, 53, 55, 57, 58, 61, 62, 64, 85, 86, 87, 88, 89, 92, 99, 103, 104, 107, 112, 115, 118, 119, 120, 124, 129, 131, 132, 133, 140, 141, 142, 144, 146, 148, 150, 152, 153, 154, 156, 157, 162, 163, 167, 170, 178, 182, 188, 189, 194, 195, 200, 201, 202, 205, 214, 216, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 251, 253, 254, 265, 273, 275, 276, 280, 283, 290, 296, 306, 310, 316, 322], "adjusted_bound": [53, 290], "adjusted_fit": 112, "adjusted_low": 53, "adjusted_upp": 53, "admin": [92, 94, 254], "administr": [98, 254], "admonit": 141, "adopt": [107, 138, 227, 231, 232, 259], "advanc": [5, 7, 11, 12, 13, 17, 19, 22, 25, 27, 28, 29, 30, 36, 38, 39, 40, 49, 51, 53, 55, 57, 59, 61, 63, 68, 69, 71, 78, 79, 80, 81, 83, 85, 86, 98, 104, 106, 107, 111, 112, 113, 115, 118, 119, 120, 123, 127, 129, 130, 132, 134, 140, 145, 146, 147, 148, 150, 151, 155, 160, 163, 164, 165, 166, 172, 181, 182, 189, 192, 194, 195, 197, 198, 199, 200, 201, 202, 205, 215, 216, 218, 220, 222, 226, 227, 229, 230, 231, 232, 233, 237, 238, 239, 242, 244, 247, 250, 252, 259, 266, 273, 277, 282, 283, 290, 293, 301, 305, 310, 320, 323], "advanced_algorithms_guid": [33, 193], "advanced_configuration_exampl": 49, "advantag": [31, 56, 59, 61, 77, 84, 85, 86, 120, 122, 134, 161, 162, 163, 166, 169, 195, 197, 198, 199, 202, 205, 222, 227, 231, 233, 248, 290, 297, 310], "advisori": [1, 5, 127, 146], "aerodynam": 220, "aerodynamic_forc": 220, "aerospac": [166, 222, 233], "aesthet": 190, "af_inet": [177, 185], "affect": [15, 25, 32, 34, 35, 44, 51, 61, 67, 74, 86, 103, 109, 112, 119, 131, 142, 146, 156, 158, 161, 163, 164, 167, 168, 190, 196, 227, 231, 237, 247, 249, 275, 279, 290, 294, 298], "affin": [92, 279], "afford": 310, "afr": [223, 235], "after": [0, 1, 3, 7, 10, 24, 25, 26, 30, 31, 32, 33, 38, 39, 40, 44, 45, 51, 53, 58, 59, 61, 65, 67, 70, 72, 75, 78, 80, 81, 84, 85, 86, 90, 92, 93, 94, 98, 104, 105, 106, 107, 108, 115, 116, 117, 118, 119, 120, 127, 132, 138, 140, 141, 142, 143, 144, 146, 147, 153, 159, 160, 161, 164, 165, 166, 167, 168, 170, 178, 182, 192, 193, 197, 198, 199, 205, 209, 210, 216, 218, 225, 237, 240, 252, 253, 254, 266, 267, 274, 277, 285, 290, 295, 298, 300, 301, 306, 308, 310, 318], "after_fix": 300, "after_memori": 98, "ag": [92, 245], "again": [21, 143, 144, 145, 155], "against": [12, 22, 40, 53, 56, 57, 58, 65, 75, 79, 84, 93, 103, 107, 109, 112, 117, 118, 119, 121, 124, 125, 127, 151, 156, 168, 177, 179, 189, 193, 194, 197, 203, 205, 206, 210, 221, 222, 224, 227, 229, 230, 231, 233, 234, 237, 238, 244, 247, 250, 254, 255, 256, 265, 273, 275, 278, 279, 283, 284, 285, 294, 298, 310, 311], "agarw": 291, "agent": [11, 19, 24, 36, 39, 44, 55, 56, 57, 58, 63, 65, 67, 70, 73, 77, 78, 81, 85, 92, 93, 95, 119, 120, 189, 224, 234, 241, 242, 245, 247, 249, 251, 252, 256, 261, 282, 283, 284, 290, 298, 300, 301, 309, 318, 321, 323], "agentcoordinationprotocol": 252, "agg": [27, 34, 124, 155, 169, 178, 282, 283, 284, 323], "aggrav": [227, 231], "aggreg": [53, 57, 59, 61, 63, 64, 88, 98, 159, 172, 199, 203, 209, 216, 223, 224, 225, 234, 235, 240, 293, 297], "aggregate_passing_coverag": 88, "aggregatedcoverag": 88, "aggress": [32, 53, 68, 72, 81, 84, 86, 109, 113, 146, 148, 164, 166, 167, 170, 183, 193, 201, 217, 222, 226, 229, 230, 233, 237, 238, 239, 247, 248, 253, 261, 273, 275, 290], "aggressive_gain": 109, "agil": 17, "agostino": [309, 310], "agre": 310, "agreement": 290, "ahead": [10, 119, 296, 310], "ahm": [230, 237], "ahmad": [226, 239], "aho": 297, "ai": [0, 4, 11, 27, 28, 29, 30, 31, 36, 39, 152, 153, 154, 155, 157, 218, 283, 298], "ai_citation_find": 298, "ai_pattern_audit_report": 12, "ai_research": 298, "aic": [308, 309, 310], "aid": [57, 58, 59, 165], "aim": [22, 178, 224, 229, 230, 234, 237, 238, 290], "aio": 15, "aiohttp": 15, "aitsm": [224, 234], "akaik": 313, "akiba": 8, "akiba2019optuna": 8, "al": [2, 15, 17, 84, 86, 122, 125, 161, 162, 163, 187, 192, 199, 202, 223, 224, 234, 235, 291, 297, 310, 320], "alabast": 141, "alarm": [112, 118], "albeit": [226, 230, 237, 239], "aleatori": 310, "alert": [9, 11, 17, 26, 31, 39, 63, 64, 67, 93, 98, 104, 117, 136, 175, 210, 211, 241, 242, 251, 254, 255, 284], "alert_histori": 98, "alert_kei": 98, "alert_manag": [63, 111], "alert_system": 321, "alert_system_observ": 17, "alert_threshold": 321, "alertmanag": [63, 92], "alg_gain_k1": [41, 85, 227, 231], "alg_gain_k2": [85, 227, 231], "algebra": [27, 35, 160, 198], "algo": 177, "algorithm": [2, 8, 9, 10, 12, 13, 15, 17, 19, 20, 24, 27, 31, 35, 37, 38, 39, 42, 44, 45, 47, 48, 50, 51, 52, 55, 58, 59, 61, 62, 64, 65, 69, 71, 72, 73, 79, 80, 82, 83, 86, 87, 93, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 129, 132, 133, 146, 147, 152, 153, 155, 166, 169, 170, 177, 189, 190, 197, 199, 202, 204, 205, 206, 214, 216, 218, 220, 222, 224, 229, 230, 232, 233, 234, 237, 238, 241, 247, 248, 252, 253, 254, 255, 256, 257, 259, 261, 262, 263, 265, 272, 273, 275, 276, 277, 286, 288, 290, 294, 297, 298, 301, 302, 303, 313, 316, 317, 318, 320, 321, 323], "algorithm_fixes_summari": 194, "algorithm_flowchart": [316, 317], "algorithm_map": 99, "algorithm_param": [19, 98], "algorithmic_gain": [98, 251], "algorithmtun": 317, "alia": [38, 51, 55, 56, 61, 80, 103, 105, 115, 116, 117, 226, 239, 274, 275, 276, 282, 290], "alias": [44, 52, 56, 59, 80, 100, 103, 105, 115, 116, 117, 274, 275, 276], "alias_map": 277, "align": [19, 38, 39, 81, 86, 93, 119, 125, 140, 143, 152, 156, 167, 191, 198, 200, 201, 202, 220, 224, 225, 230, 234, 237, 240, 242, 243, 245, 251, 258, 261, 288, 290, 293, 294, 295, 318], "aliv": 114, "alive_ref": 114, "all": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 44, 45, 49, 50, 52, 53, 62, 64, 66, 67, 68, 69, 70, 71, 75, 76, 77, 78, 81, 82, 84, 85, 86, 87, 88, 90, 91, 94, 95, 97, 98, 100, 105, 106, 114, 115, 116, 117, 118, 119, 124, 127, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 166, 167, 169, 170, 171, 175, 177, 183, 185, 187, 190, 193, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 209, 211, 214, 216, 220, 222, 226, 227, 228, 231, 232, 233, 236, 239, 241, 242, 244, 247, 248, 249, 250, 253, 254, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 276, 277, 282, 286, 287, 288, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 306, 309, 310, 313, 315, 320, 322], "all_boundaries_handled_gracefulli": 75, "all_conditions_met": 287, "all_control": [49, 117], "all_degenerate_conditions_handl": 75, "all_factory_creations_success": 75, "all_finit": 216, "all_numer": 117, "all_objectives_satisfi": 75, "all_param": 51, "all_pass": [92, 108], "all_result": [104, 112, 171, 215], "all_solut": 112, "all_stability_conditions_met": 287, "all_stat": [61, 171], "all_test_result": 75, "all_tests_pass": 75, "all_tim": 171, "all_warn": 102, "allclos": [199, 261, 283, 287], "allevi": [82, 199, 222, 226, 233, 239], "alloc": [17, 41, 61, 78, 91, 98, 104, 117, 171, 174, 203, 210, 245], "allow": [5, 15, 17, 22, 26, 27, 32, 40, 56, 58, 61, 62, 65, 67, 73, 77, 79, 84, 86, 91, 92, 98, 114, 117, 120, 144, 145, 148, 154, 159, 167, 170, 177, 185, 196, 204, 205, 208, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 254, 255, 265, 290, 299, 300, 301, 310, 315], "allow_equ": [37, 208], "allow_nan": 209, "allow_pickl": 177, "allow_unknown": [22, 131, 203, 216], "allow_zero": [37, 79, 208], "allowprivilegeescal": 92, "allpreel": 143, "almost": 125, "alon": [177, 255, 290, 310, 313], "along": [31, 37, 75, 97, 152, 156, 163, 191, 201, 209, 225, 226, 232, 239, 240, 287, 288, 289, 290, 317], "alongsid": [68, 103, 160, 178, 226, 239], "alpha": [51, 52, 61, 72, 77, 98, 100, 101, 103, 105, 106, 118, 125, 127, 132, 148, 149, 164, 166, 167, 171, 178, 193, 195, 197, 199, 201, 202, 208, 213, 215, 220, 224, 226, 227, 230, 231, 234, 237, 239, 246, 248, 253, 256, 258, 272, 273, 287, 288, 289, 290, 293, 294, 299, 313, 320], "alpha1": [73, 107, 112], "alpha1_posit": 112, "alpha2": [73, 107, 112], "alpha2_posit": 112, "alpha_": [53, 220, 290, 293], "alpha_1": [81, 191, 245, 261], "alpha_2": [191, 245, 261], "alpha_correct": 313, "alpha_i": 258, "alpha_pow": [98, 99], "alpha_risk": 313, "alpha_valu": 36, "alphabet": [122, 187, 271], "alreadi": [30, 31, 44, 58, 61, 70, 75, 98, 99, 102, 119, 120, 121, 122, 126, 166, 167, 177, 178, 203, 209, 216, 230, 237, 267, 269, 271, 298], "also": [33, 40, 45, 55, 58, 70, 74, 75, 147, 167, 170, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 263, 270, 299, 304, 315], "alt": [30, 31], "altair": 15, "alter": [62, 306], "altern": [8, 12, 16, 17, 77, 81, 84, 89, 98, 101, 103, 119, 120, 132, 140, 159, 162, 169, 178, 188, 202, 216, 222, 226, 229, 233, 238, 239, 271, 275, 276, 287, 290, 309, 310, 313, 320, 321], "although": [223, 224, 230, 234, 235, 237], "altitud": 216, "altogeth": [222, 233], "alwai": [20, 24, 29, 31, 32, 33, 51, 56, 67, 68, 72, 73, 79, 86, 90, 92, 106, 108, 109, 119, 127, 154, 161, 163, 167, 170, 193, 194, 196, 197, 198, 200, 203, 205, 207, 216, 226, 239, 247, 251, 253, 266, 267, 283, 284, 300, 301, 313], "always_run": [37, 39, 282], "am": [89, 111, 254], "amaz": 12, "amazonaw": 91, "ambient": 152, "ambigu": 74, "american": [222, 233, 320], "among": [84, 85, 222, 223, 226, 229, 233, 235, 238, 239, 310], "amort": [135, 177, 297, 299], "amplif": 291, "amplifi": [119, 226, 227, 231, 239, 290, 317], "amplitud": [22, 84, 98, 164, 197, 209, 222, 223, 227, 228, 230, 231, 233, 235, 236, 237, 267, 298], "amsmath": [16, 89, 139, 140, 144, 145, 188], "an": [2, 5, 17, 19, 22, 25, 31, 34, 45, 49, 51, 53, 62, 65, 70, 84, 102, 116, 117, 122, 127, 129, 142, 144, 145, 146, 147, 153, 162, 163, 164, 170, 177, 185, 205, 223, 224, 226, 227, 231, 232, 234, 235, 239, 246, 263, 265, 288, 310], "anal": 93, "analog": 120, "analogu": [222, 233], "analys": [42, 65, 154, 224, 227, 228, 231, 232, 234, 236, 318], "analysi": [2, 4, 8, 9, 13, 14, 15, 17, 24, 27, 28, 30, 31, 33, 35, 36, 48, 51, 52, 54, 61, 69, 78, 79, 82, 83, 85, 86, 90, 93, 101, 102, 103, 113, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 133, 146, 147, 148, 151, 155, 157, 164, 165, 166, 167, 168, 172, 173, 176, 179, 181, 182, 184, 185, 188, 189, 192, 193, 196, 198, 214, 216, 217, 219, 220, 221, 222, 223, 226, 230, 232, 233, 235, 237, 239, 242, 243, 244, 245, 248, 250, 251, 254, 255, 256, 257, 260, 262, 265, 266, 274, 277, 278, 285, 286, 298, 302, 305, 308, 311, 312, 316, 317, 319, 321, 323], "analysis_": 9, "analysis_method": 88, "analysis_period": 63, "analysis_plot": [9, 10], "analysis_result": [11, 98], "analysis_summari": 178, "analysis_typ": 17, "analysis_window": 63, "analysisfailur": 88, "analysisresult": [33, 119], "analysisstatu": 33, "analyt": [13, 63, 102, 119, 138, 139, 142, 162, 200, 202, 206, 218, 222, 233, 242, 275, 280, 310], "analyz": [3, 7, 9, 11, 12, 17, 22, 27, 30, 39, 52, 58, 63, 71, 75, 81, 86, 98, 111, 112, 113, 117, 119, 122, 124, 133, 134, 135, 136, 149, 156, 164, 166, 167, 169, 189, 199, 201, 203, 209, 216, 220, 247, 248, 253, 254, 255, 261, 274, 276, 277, 279, 287, 291, 292, 309, 310, 313, 320, 321], "analyze_ascii_head": 71, "analyze_capacity_trend": 111, "analyze_conditioning_impact": 291, "analyze_control": 321, "analyze_control_bandwidth": 98, "analyze_controller_comparison": 112, "analyze_controller_robust": 274, "analyze_converg": [253, 280], "analyze_coverage_gap": 88, "analyze_coverage_trend": 39, "analyze_cross_refer": 94, "analyze_documentation_coverag": 10, "analyze_frequency_cont": 248, "analyze_hybrid_perform": 81, "analyze_integration_gap": 88, "analyze_jitt": 209, "analyze_mass_sensit": 134, "analyze_monte_carlo": 171, "analyze_objective_rang": 248, "analyze_optimization_histori": 280, "analyze_parameter_sensit": 248, "analyze_partial_coverag": 88, "analyze_perform": 193, "analyze_performance_gap": 88, "analyze_pso_converg": 124, "analyze_result": 169, "analyze_sensit": 320, "analyze_simul": 124, "analyze_system_perform": 63, "analyze_theoretical_gap": 88, "analyze_transit": 86, "analyze_trend": 111, "analyze_uncovered_lin": 39, "analyze_with_fallback": 88, "analyzed_modul": 255, "anchor": [26, 57], "anderson": [309, 310, 313], "andrew": 8, "android": 31, "angl": [1, 27, 28, 35, 45, 51, 55, 61, 62, 72, 73, 74, 75, 78, 82, 84, 92, 98, 103, 108, 117, 118, 119, 120, 124, 129, 131, 133, 134, 135, 136, 146, 149, 150, 152, 158, 160, 163, 164, 166, 170, 177, 200, 201, 204, 205, 206, 209, 219, 220, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 237, 239, 242, 250, 252, 258, 260, 265, 272, 275, 277, 280, 283, 287, 289, 290, 295, 296, 300, 301, 306, 313, 317, 320], "angle1": 317, "angle1_seri": 252, "angle2": 317, "angle_err": 84, "angle_error": [283, 320], "angle_excurs": 86, "angle_limit": 75, "angle_limit_exceed": 277, "angle_noise_std": 74, "angle_seri": 252, "angle_stat": 313, "anglesensor1": 317, "anglesensor2": 317, "angle\u00b2": 68, "angular": [61, 68, 72, 78, 84, 97, 98, 99, 103, 115, 118, 131, 134, 135, 149, 150, 161, 163, 164, 177, 203, 205, 206, 219, 220, 225, 226, 227, 231, 232, 239, 240, 249, 258, 272, 290], "ani": [5, 10, 15, 19, 23, 26, 27, 31, 33, 34, 35, 36, 38, 40, 44, 45, 49, 52, 53, 62, 70, 71, 73, 75, 76, 77, 82, 84, 85, 86, 92, 93, 98, 100, 102, 103, 105, 106, 107, 111, 114, 115, 117, 119, 123, 125, 127, 131, 141, 145, 146, 150, 152, 153, 159, 161, 167, 177, 191, 193, 196, 199, 202, 203, 204, 208, 209, 210, 215, 216, 220, 221, 222, 224, 227, 231, 233, 234, 246, 248, 251, 255, 262, 263, 264, 269, 270, 271, 273, 275, 277, 280, 291, 298, 299, 300, 301, 313], "anim": [1, 8, 9, 13, 27, 30, 31, 64, 90, 127, 137, 138, 139, 144, 153, 157, 159, 189, 202, 265, 266, 270, 271, 316, 317, 321], "animatedcont": 268, "animatedlist": [267, 268, 269, 271], "animationdur": [141, 142], "anneal": 162, "annot": [10, 17, 40, 44, 71, 76, 92, 93, 94, 107, 112, 155, 218, 255, 258, 277, 297, 300], "announc": [5, 23, 145], "annual": [243, 256], "ano": [91, 177], "anomali": [63, 64, 104, 222, 223, 233, 235, 261], "anoth": [17, 170, 222, 224, 225, 233, 234, 240, 285, 310], "anova": [65, 67, 169, 178, 246, 308, 309], "anova_p": 313, "answer": 166, "anthrop": [24, 39, 70, 258, 282, 283, 284, 323], "anti": [44, 55, 81, 193, 224, 234, 244], "anti_windup_act": 193, "anti_windup_gain": 85, "anti_windup_limit": 193, "anticip": 84, "anticipatori": 84, "antithet": [309, 310], "antithetic_vari": 310, "antoin": [8, 17], "anul": 92, "anyth": 232, "anytim": 155, "anywai": 298, "apa": [13, 122], "apach": [2, 8, 15], "api": [1, 4, 6, 9, 10, 13, 14, 18, 19, 22, 24, 25, 26, 27, 28, 31, 32, 42, 46, 64, 65, 67, 68, 84, 86, 89, 92, 93, 100, 116, 118, 122, 126, 129, 137, 138, 139, 142, 146, 156, 160, 161, 162, 163, 164, 166, 167, 168, 170, 178, 189, 194, 212, 214, 217, 219, 242, 243, 250, 257, 262, 263, 266, 274, 277, 298, 303, 305, 309, 310, 311, 313, 319, 321], "api_cli": 4, "api_document": 242, "api_refer": [309, 310, 313], "apivers": [63, 91, 92], "apmonitor": [225, 240], "app": [1, 24, 28, 30, 63, 90, 91, 92, 129, 189, 222, 233, 269, 316, 317], "app_config": 17, "appar": 178, "appear": [5, 31, 32, 33, 40, 124, 126, 141, 142, 144, 145, 146, 147, 160, 163, 164, 225, 226, 227, 231, 232, 239, 240, 300, 315], "append": [31, 35, 37, 38, 39, 49, 51, 52, 61, 65, 72, 75, 76, 77, 78, 84, 85, 86, 88, 98, 102, 104, 105, 106, 107, 108, 114, 115, 116, 117, 119, 128, 132, 133, 134, 135, 136, 143, 148, 149, 150, 151, 166, 167, 169, 170, 171, 178, 193, 199, 201, 203, 209, 210, 214, 220, 228, 236, 253, 254, 255, 258, 276, 277, 279, 282, 283, 287, 291, 297, 298, 300, 313, 320, 321], "appendchild": 143, "appendic": [67, 255], "appendix": [7, 15, 127, 165, 251], "appl": [31, 144, 223, 235], "appli": [2, 10, 12, 15, 17, 19, 25, 26, 31, 32, 33, 35, 49, 51, 61, 64, 65, 67, 68, 71, 72, 73, 74, 76, 77, 78, 79, 81, 84, 85, 86, 91, 92, 93, 94, 98, 101, 103, 108, 113, 115, 116, 117, 119, 127, 134, 135, 136, 143, 146, 150, 157, 160, 161, 162, 163, 164, 167, 185, 187, 193, 194, 199, 202, 205, 210, 213, 216, 220, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 250, 251, 254, 255, 257, 265, 266, 272, 277, 280, 283, 287, 288, 289, 290, 295, 296, 297, 303, 306, 310, 313, 321], "applic": [8, 10, 17, 19, 22, 31, 36, 44, 52, 56, 57, 59, 61, 63, 65, 76, 77, 78, 79, 81, 82, 84, 85, 86, 90, 92, 93, 94, 95, 97, 103, 122, 123, 125, 127, 130, 132, 146, 149, 158, 163, 164, 168, 182, 187, 192, 193, 194, 195, 196, 200, 201, 202, 204, 205, 206, 208, 215, 216, 220, 222, 223, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 239, 242, 245, 246, 250, 253, 256, 257, 259, 283, 284, 287, 293, 295, 298, 299, 301, 309, 313, 316, 317], "application_health": 93, "applied_improv": 255, "apply_control": [63, 77, 78, 81, 85, 210, 321], "apply_deadzon": 136, "apply_graceful_degrad": 255, "apply_overrid": 298, "apply_regular": 290, "apply_safety_guard": [59, 61], "apply_solut": 115, "apply_suppress": 98, "appreci": 2, "approach": [8, 13, 17, 24, 25, 26, 29, 32, 33, 35, 36, 40, 41, 52, 63, 67, 70, 81, 84, 95, 100, 102, 104, 106, 107, 112, 121, 122, 127, 129, 133, 148, 161, 163, 164, 165, 167, 172, 181, 183, 184, 190, 191, 196, 197, 199, 202, 205, 209, 213, 222, 223, 224, 226, 230, 232, 233, 234, 235, 237, 239, 246, 250, 253, 255, 256, 257, 259, 275, 279, 284, 290, 291, 293, 295, 298, 299, 300, 309, 321], "appropri": [3, 17, 19, 20, 23, 41, 55, 61, 72, 75, 77, 80, 81, 94, 102, 107, 112, 114, 115, 118, 119, 122, 125, 131, 147, 148, 154, 159, 162, 166, 178, 191, 197, 202, 205, 206, 224, 227, 230, 231, 232, 234, 237, 242, 247, 249, 252, 253, 255, 257, 282, 287, 294, 295, 303, 310, 313], "appropriate_error_handl": 75, "appropriate_except": 75, "approv": [0, 24, 31, 33, 36, 37, 55, 63, 71, 73, 77, 78, 81, 85, 92, 94, 107, 191, 242, 243, 244, 245, 255, 282, 283, 284, 301, 321], "approx": [53, 120, 191, 193, 195, 198, 200, 201, 202, 221, 225, 226, 239, 240, 246, 287, 290, 291, 293, 296, 297], "approx1": 296, "approxim": [22, 35, 40, 45, 59, 61, 68, 73, 76, 78, 82, 84, 86, 97, 99, 122, 123, 134, 135, 136, 146, 156, 163, 164, 168, 192, 196, 197, 199, 200, 201, 203, 204, 205, 209, 220, 222, 224, 226, 229, 232, 233, 234, 238, 239, 246, 273, 283, 287, 290, 294, 296, 301, 310, 313, 317], "apr": 159, "apso": 202, "apt": [90, 91, 92, 146], "ar": [2, 5, 7, 8, 11, 13, 14, 15, 19, 22, 23, 24, 25, 26, 28, 30, 31, 32, 34, 35, 38, 40, 41, 44, 45, 49, 50, 51, 53, 56, 58, 59, 61, 62, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 86, 87, 90, 94, 97, 98, 101, 104, 105, 106, 112, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 127, 133, 137, 141, 144, 145, 146, 148, 152, 154, 155, 156, 161, 163, 164, 165, 166, 167, 168, 169, 171, 177, 183, 185, 190, 191, 192, 193, 195, 196, 197, 198, 201, 202, 204, 205, 206, 213, 220, 221, 222, 224, 226, 227, 231, 232, 233, 234, 239, 246, 247, 249, 250, 253, 255, 256, 257, 258, 259, 261, 265, 268, 269, 270, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 290, 293, 294, 295, 296, 297, 298, 300, 306, 310, 315], "arang": [29, 35, 52, 118, 178, 253, 280, 291], "arbitrari": [74, 141, 223, 232, 235, 256], "arbitrarili": 290, "arbitrary_types_allow": 73, "arcco": 249, "architect": [73, 93], "architectur": [2, 8, 13, 19, 22, 26, 27, 29, 36, 52, 56, 58, 69, 76, 78, 80, 81, 82, 83, 86, 95, 98, 119, 127, 137, 138, 139, 144, 172, 189, 190, 192, 193, 199, 215, 216, 219, 232, 242, 243, 244, 251, 262, 277, 280, 283, 316, 321, 323], "archiv": [91, 92, 169, 170, 173, 183, 202, 228, 229, 236, 238, 254, 310, 315, 320], "area": [16, 19, 32, 36, 37, 63, 69, 71, 98, 119, 165, 242, 257, 259, 265, 283], "aren": 117, "arg": [10, 12, 39, 51, 53, 55, 57, 58, 59, 61, 63, 79, 86, 91, 98, 102, 105, 106, 114, 115, 116, 119, 125, 200, 201, 204, 214, 216, 220, 246, 254, 277, 283, 284, 287, 291, 300, 301, 316, 321], "argmax": [51, 164, 209, 216], "argmin": [148, 215, 216, 291], "argmin_i": 202, "argpars": [300, 321], "argsort": 291, "argument": [12, 20, 22, 55, 56, 65, 67, 72, 109, 116, 117, 147, 193, 205, 224, 234, 275], "argumentlist": 177, "argumentpars": [300, 321], "argv": 300, "ari": [2, 121, 122, 123], "aria": [1, 28, 30, 31, 139, 145, 156], "aris": [222, 225, 227, 230, 231, 232, 233, 237, 240, 296], "arithmet": 290, "arl": 119, "arl\u2080": 119, "arl\u2081": 119, "arm": [223, 226, 235, 239, 261], "around": [19, 52, 53, 68, 77, 82, 85, 104, 112, 133, 144, 148, 163, 164, 167, 171, 193, 195, 199, 201, 202, 215, 220, 222, 223, 226, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 248, 253, 269, 278, 290, 291, 303], "arr": 44, "arrai": [2, 5, 8, 10, 20, 27, 35, 40, 49, 50, 51, 53, 55, 56, 61, 65, 67, 72, 75, 76, 77, 79, 81, 82, 84, 85, 86, 91, 92, 97, 98, 99, 103, 105, 106, 114, 115, 116, 117, 118, 119, 127, 132, 133, 134, 135, 136, 142, 143, 149, 150, 151, 153, 154, 165, 166, 168, 170, 171, 177, 178, 193, 199, 201, 203, 209, 210, 215, 217, 220, 222, 224, 225, 228, 233, 234, 236, 240, 246, 248, 249, 250, 253, 254, 258, 261, 277, 280, 283, 284, 287, 298, 300, 301, 313, 316, 317, 318, 321], "array_index": 109, "arrow": [30, 64], "art": [12, 57, 58, 59, 189, 227, 228, 231, 236, 268, 290], "artefact": [222, 233, 260], "articl": [2, 8, 17, 121, 122, 123, 125, 187, 222, 224, 228, 229, 233, 234, 236, 238, 256, 257, 259, 291, 298, 320], "artifact": [1, 12, 13, 23, 65, 67, 70, 71, 87, 89, 119, 120, 122, 123, 124, 125, 126, 201, 208, 227, 231, 241, 282, 297, 298], "artifici": [224, 234], "arxiv": [4, 169, 224, 228, 234, 236, 297, 298, 320], "as_complet": [98, 104, 105, 117, 253, 280], "as_vers": 298, "asarrai": [44, 61, 84, 98, 101, 104, 119, 203, 216, 232], "ascii": [24, 25, 31, 32, 57, 58, 59, 97, 187, 190, 218, 242, 244, 255, 268], "ascii_header_encoding_fix": 190, "asciitext": 268, "asctim": [72, 117, 254, 276, 280, 321], "ask": 269, "asm": [197, 205, 230, 237], "asnumpi": 104, "aspect": [19, 28, 77, 78, 81, 112, 116, 125, 162, 163, 165, 166, 183, 192, 193, 197, 209, 224, 234, 255], "aspir": 165, "assembl": [131, 198], "assembli": 317, "assert": [35, 37, 40, 44, 45, 49, 51, 55, 56, 67, 70, 73, 76, 81, 85, 92, 93, 98, 100, 114, 116, 119, 120, 122, 124, 125, 126, 132, 134, 151, 166, 168, 195, 199, 203, 208, 209, 213, 220, 226, 239, 242, 248, 274, 276, 278, 279, 282, 283, 298, 300, 301, 320, 321], "assert_safety_constraint": 37, "assert_stability_condit": 37, "assertionerror": [39, 93, 282, 283, 284], "assess": [7, 14, 23, 36, 38, 40, 42, 43, 45, 55, 58, 59, 63, 67, 75, 88, 92, 98, 103, 107, 108, 115, 119, 122, 125, 147, 165, 167, 176, 191, 209, 222, 223, 230, 232, 233, 235, 237, 241, 246, 247, 250, 253, 261, 265, 280, 292, 293, 308, 309, 310], "assess_deployment_risk": 255, "assess_health": 63, "assess_system_health": 119, "asset": [1, 27, 31, 165, 188, 268], "assign": [44, 61, 67, 142, 218, 291, 297, 298, 299, 300, 310], "assign_prior": 298, "assist": [11, 170], "associ": [15, 224, 225, 234, 240], "assum": [31, 61, 86, 98, 107, 119, 120, 148, 149, 170, 171, 178, 205, 209, 225, 229, 232, 238, 240, 279, 295, 299, 310, 313, 320], "assumpt": [12, 67, 118, 119, 134, 135, 149, 161, 169, 198, 221, 232, 282, 294, 296, 308, 309], "assur": [4, 8, 13, 16, 24, 36, 40, 56, 93, 95, 98, 100, 107, 122, 190, 194, 218, 241, 244, 253, 262, 280, 282, 283, 284, 323], "ast": [298, 299, 300], "astesj_080613": [222, 233], "astrom1995adapt": 123, "astyp": [44, 135], "asymmetr": [86, 201], "asymptot": [36, 37, 77, 78, 86, 107, 122, 125, 127, 166, 191, 192, 193, 196, 197, 199, 205, 206, 218, 232, 249, 287, 294, 299], "async": [1, 8, 15, 27, 28, 31, 143], "asynchron": [8, 141, 143], "asyncio": 8, "atol": [61, 150, 200, 208, 216, 232, 283, 287, 290], "atom": 50, "attach": [51, 55, 56, 61, 82, 164, 199, 220, 222, 226, 227, 231, 232, 233, 239], "attack": 91, "attain": [222, 230, 233, 237], "attempt": [51, 56, 63, 70, 81, 88, 93, 100, 102, 104, 109, 115, 143, 171, 220, 224, 234, 252, 261, 280], "attempt_recoveri": 135, "attempt_safe_recoveri": 261, "attent": [224, 234, 247, 267, 269, 284], "attenu": [226, 229, 238, 239], "attenuation_factor": 75, "attitud": [222, 233], "attr": [61, 63, 80, 109, 115, 117, 210], "attract": [53, 65, 82, 156, 160, 162, 167, 182, 191, 199, 201, 202, 215, 223, 226, 227, 230, 231, 232, 235, 237, 239, 246, 247, 253, 284, 291, 293], "attractor": [132, 156, 168, 202], "attribut": [3, 4, 10, 27, 28, 30, 38, 40, 45, 49, 51, 52, 55, 56, 59, 63, 64, 65, 67, 69, 76, 82, 83, 86, 95, 97, 98, 101, 107, 109, 115, 116, 117, 122, 125, 145, 189, 216, 218, 242, 244, 248, 254, 274, 278, 282, 283, 297, 298, 299, 301], "attributeerror": [20, 72, 115, 117, 216, 278, 300, 301], "attribution_audit_executive_summari": [122, 124, 126], "attribution_coverage_report": 124, "auc": 119, "audibl": [78, 166, 227, 231], "audienc": [2, 31, 67, 97, 127, 171, 177, 232, 254, 282, 297, 323], "audit": [0, 4, 12, 71, 92, 93, 122, 123, 125, 175, 242, 298], "augment": [222, 228, 233, 236, 310], "augmented_dickey_ful": 310, "august": [222, 233], "aurora": [267, 268, 269], "authent": [92, 93, 123], "author": [2, 8, 15, 16, 17, 24, 36, 39, 57, 59, 70, 73, 76, 77, 78, 81, 85, 89, 93, 95, 120, 121, 126, 127, 129, 131, 132, 163, 164, 166, 167, 187, 188, 189, 195, 197, 213, 218, 224, 234, 243, 245, 247, 249, 251, 252, 253, 257, 258, 261, 265, 282, 283, 284, 287, 290, 300, 320, 321, 323], "author_year": [89, 297], "authorit": [62, 69, 122, 125, 309], "auto": [7, 10, 13, 21, 25, 26, 28, 29, 30, 31, 32, 33, 35, 39, 51, 56, 70, 78, 80, 89, 98, 112, 127, 131, 134, 146, 151, 154, 162, 163, 165, 166, 167, 169, 196, 199, 200, 201, 210, 250, 273, 281, 282, 299, 310, 315], "auto_exampl": 188, "auto_migr": 98, "autobackup": 70, "autocomplet": [17, 79, 216], "autocovari": 310, "autodoc": [32, 52, 141], "autodoc_mock_import": [24, 33], "autom": [1, 3, 13, 16, 19, 22, 24, 25, 26, 32, 33, 39, 59, 64, 67, 71, 72, 75, 82, 87, 88, 89, 93, 94, 106, 122, 127, 130, 132, 133, 138, 139, 142, 146, 165, 169, 173, 175, 176, 180, 189, 190, 192, 194, 201, 202, 207, 210, 215, 223, 224, 226, 232, 234, 235, 239, 241, 242, 243, 244, 247, 250, 251, 255, 259, 278, 283, 286, 288, 294, 300, 301, 317, 318, 320, 321], "automat": [1, 13, 17, 22, 27, 28, 29, 30, 31, 34, 35, 38, 39, 41, 49, 50, 52, 53, 55, 56, 57, 58, 61, 62, 63, 67, 72, 77, 78, 80, 89, 90, 94, 98, 100, 103, 105, 106, 110, 115, 117, 118, 119, 120, 122, 123, 127, 129, 131, 132, 135, 139, 141, 144, 145, 146, 149, 150, 153, 156, 159, 161, 163, 164, 165, 166, 167, 168, 170, 185, 189, 192, 193, 194, 196, 197, 200, 203, 205, 211, 213, 214, 215, 216, 218, 221, 222, 223, 226, 227, 230, 231, 232, 233, 235, 237, 239, 242, 251, 253, 255, 257, 261, 265, 267, 269, 271, 273, 274, 276, 277, 281, 282, 284, 287, 290, 293, 299, 306, 318, 320, 321], "automatic_recoveri": 321, "automatica": [77, 85, 122, 169, 205, 230, 237, 297, 298, 320], "automot": [166, 245, 261], "autonom": [36, 156, 218, 222, 233, 313], "autosav": 22, "auxiliari": [82, 205, 206, 224, 234, 279], "avail": [2, 5, 8, 11, 15, 22, 23, 24, 25, 30, 31, 38, 40, 50, 52, 56, 61, 63, 64, 65, 73, 78, 80, 82, 86, 88, 89, 91, 92, 93, 94, 98, 100, 105, 106, 107, 108, 114, 115, 116, 117, 119, 120, 122, 132, 142, 144, 152, 154, 155, 162, 164, 166, 167, 168, 169, 177, 182, 185, 197, 199, 200, 202, 203, 210, 216, 220, 222, 226, 232, 233, 239, 242, 244, 245, 250, 253, 254, 255, 256, 257, 259, 261, 265, 270, 273, 276, 277, 280, 282, 283, 290, 295, 300, 301, 310, 320, 321], "availability_check": 117, "available_control": [38, 63, 73, 115, 117], "available_gb": 254, "available_typ": 275, "avenu": [224, 230, 234, 237], "averag": [10, 40, 53, 57, 59, 61, 68, 92, 93, 98, 104, 107, 114, 117, 118, 119, 120, 133, 135, 136, 164, 166, 170, 182, 191, 197, 200, 201, 209, 214, 216, 220, 222, 230, 232, 233, 237, 242, 245, 252, 253, 254, 255, 293, 297, 299, 313, 317, 320], "average_chattering_index": 209, "average_controller_creation_time_m": 98, "average_convergence_r": 209, "average_cpu_usag": 104, "average_cpu_utilization_perc": 98, "average_creation_time_m": 98, "average_evaluation_tim": 104, "average_execution_tim": 255, "average_fit": 98, "average_fitness_computation_time_m": 98, "average_integration_scor": 98, "average_iteration_tim": 251, "average_memory_usag": 98, "average_memory_usage_perc": 98, "average_response_tim": 93, "average_simulation_time_m": 98, "average_tim": 98, "avg": [65, 98, 107, 117, 195, 200, 202, 209, 214, 245, 297, 308], "avg_compute_tim": 101, "avg_condition_numb": 220, "avg_control_effort": 113, "avg_control_vari": 113, "avg_converg": 247, "avg_cpu": 98, "avg_cpu_perc": 253, "avg_creation_tim": [98, 114], "avg_creation_time_m": 111, "avg_delai": 119, "avg_divers": 247, "avg_evaluation_tim": 98, "avg_execution_tim": 255, "avg_fit": [112, 214], "avg_fitness_tim": 98, "avg_is": 170, "avg_lat": 136, "avg_memori": 98, "avg_position_error": 113, "avg_precision_error": 113, "avg_robustness_error": 113, "avg_simulation_tim": 98, "avg_step_tim": 135, "avg_tim": [98, 114, 116, 117, 248], "avg_time_m": [65, 98], "avg_time_per_cr": 117, "avg_time_per_evalu": 114, "aviat": 310, "avoid": [17, 24, 32, 44, 53, 67, 72, 75, 77, 78, 84, 90, 104, 106, 112, 115, 117, 118, 119, 120, 122, 140, 141, 144, 147, 154, 166, 167, 168, 171, 182, 191, 194, 196, 197, 198, 200, 201, 203, 204, 205, 208, 216, 220, 221, 222, 223, 224, 225, 226, 230, 232, 233, 234, 235, 237, 239, 240, 243, 246, 247, 248, 249, 258, 287, 290, 295, 298, 299, 300, 310, 313], "avr": 202, "aw": [11, 92, 95, 144, 242], "awai": [114, 145, 163, 198, 199, 201, 225, 240], "await": 31, "awar": [1, 24, 33, 53, 55, 56, 84, 156, 180, 188, 193, 246, 249, 250, 253, 282], "awk": 93, "ax": [30, 35, 52, 61, 77, 81, 84, 133, 136, 148, 149, 150, 156, 161, 169, 171, 177, 178, 201, 216, 220, 248, 253, 254, 299, 320], "ax1": [164, 215, 248], "ax2": [164, 215, 248], "ax3": 164, "ax4": 164, "axes3d": 133, "axhlin": [52, 61, 77, 81, 86, 118, 149, 164, 166], "axi": [28, 51, 52, 61, 76, 82, 107, 135, 149, 169, 170, 171, 178, 199, 202, 203, 215, 216, 217, 220, 225, 228, 236, 240, 246, 248, 253, 254, 280, 287, 289, 290, 291, 317, 318], "axvlin": [164, 171], "axvspan": 164, "az": 91, "azur": [11, 92, 95, 242], "azurecr": 91, "a\u00b2": 310, "a\u00b2b": [161, 204], "a\u00b3b": 161, "a\u03b4t": 84, "a\u03c4": 84, "a\u1d62": 310, "a\u1d62x": 310, "a\u2074b": 161, "a\u2075b": 161, "a\u2096p": 310, "b": [10, 12, 13, 24, 25, 26, 27, 29, 30, 31, 35, 40, 44, 53, 59, 61, 77, 78, 79, 81, 84, 85, 86, 89, 95, 103, 109, 128, 135, 138, 141, 142, 144, 148, 149, 161, 163, 164, 167, 168, 170, 171, 182, 189, 191, 192, 193, 194, 196, 197, 198, 201, 202, 203, 204, 205, 215, 216, 220, 221, 223, 225, 226, 227, 230, 231, 232, 235, 237, 239, 240, 248, 252, 253, 254, 258, 274, 278, 279, 280, 287, 288, 289, 294, 295, 300, 310, 313, 315, 317], "b0": [131, 134], "b1": [72, 117, 131, 134, 198, 200, 208, 261], "b1_star": 200, "b2": [72, 117, 131, 134, 198, 208, 261], "b3": [200, 261], "b325fb5": 301, "b3_star": 200, "b4": [200, 261], "b4_star": 200, "b5": [200, 261], "b5_star": 200, "b6": 200, "b6_star": 200, "b7_star": 200, "b_": [39, 53, 58, 225, 240], "b_0": [289, 295], "b_1": [74, 191, 198, 208, 221, 272, 289, 290, 295], "b_2": [74, 191, 198, 208, 221, 272, 289, 295], "b_3": 191, "b_c": [74, 84, 198, 221, 272], "b_control": 287, "b_d": 84, "b_i": 200, "b_max": 290, "b_min": 290, "b_x000b_\u03b8_1": [225, 240], "b_\u03b5": 163, "ba": [205, 228, 236], "back": [12, 19, 31, 35, 72, 77, 85, 98, 104, 109, 145, 177, 185, 196, 202, 215, 224, 226, 227, 228, 231, 234, 236, 239, 249, 254, 275, 276, 287, 313], "backbon": [199, 228, 236], "backend": [8, 17, 27, 124, 146, 155, 316, 323], "backfac": [139, 140, 143], "background": [27, 29, 30, 31, 90, 95, 97, 122, 140, 141, 142, 144, 160, 165, 168, 170, 184, 185, 202, 213, 226, 232, 239, 253, 266, 269, 270, 289, 296], "background_color": 31, "backgroundcolor": 318, "backoff": 116, "backstopj": 142, "backtick": 25, "backup": [14, 31, 93, 98, 102, 117, 118, 170, 173, 175, 182, 185, 242, 251, 254], "backup_": 92, "backup_config": 254, "backup_control": [118, 185], "backup_count": 254, "backup_cr": 108, "backup_dir": [92, 254], "backup_directori": 102, "backup_fil": [92, 98, 102, 117], "backup_nam": [102, 254], "backup_path": [92, 102, 254], "backupcount": 254, "backward": [20, 23, 38, 49, 51, 52, 61, 72, 73, 79, 82, 84, 98, 100, 103, 105, 106, 107, 108, 116, 117, 119, 120, 139, 142, 196, 213, 232, 242, 243, 247, 273, 282, 309], "backward_eul": 61, "backwardeul": 61, "bad": [17, 41, 127, 198, 203, 208, 248, 299], "badg": [1, 23, 29, 31], "badgwel": 84, "balanc": [14, 20, 22, 30, 45, 52, 57, 58, 59, 61, 65, 67, 73, 82, 84, 86, 98, 103, 104, 111, 112, 118, 119, 120, 133, 134, 148, 156, 158, 160, 161, 162, 164, 166, 167, 174, 179, 180, 182, 183, 193, 195, 196, 197, 199, 200, 201, 205, 215, 216, 220, 221, 222, 224, 226, 230, 232, 233, 234, 237, 239, 242, 245, 246, 247, 252, 253, 254, 259, 280, 282, 287, 291, 293, 303, 308], "balance_import": 247, "balanced_perform": 254, "balatro": 268, "ball": [163, 268], "ballpit": 268, "ban": [283, 284], "band": [78, 86, 164, 195, 283], "bandit": 93, "bandwidth": [31, 45, 73, 85, 93, 98, 112, 174, 183, 196, 197, 226, 227, 231, 239, 251, 253, 279, 290, 294, 296], "bandwidth_analysi": 98, "bandwidth_estim": 112, "bandwidth_feas": 112, "bandwidth_ok": 98, "bandwidth_ratio": 98, "banerje": [226, 239], "bar": [28, 52, 65, 67, 90, 95, 127, 129, 145, 153, 178, 202, 215, 216, 246, 248, 253, 254, 290, 291, 293, 297, 298, 299, 315], "bare": [71, 82], "barrier": [176, 193, 222, 226, 232, 233, 239, 247], "barrier_cost": 193, "barrier_penalti": 201, "bartlett": 309, "bartolini": [194, 196], "base": [0, 2, 8, 9, 12, 15, 17, 22, 23, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 38, 47, 49, 51, 52, 55, 56, 58, 59, 62, 64, 65, 69, 73, 75, 76, 77, 79, 81, 82, 83, 84, 85, 87, 88, 91, 93, 95, 97, 98, 102, 103, 105, 106, 112, 115, 116, 117, 119, 120, 122, 123, 125, 127, 132, 133, 134, 135, 139, 146, 150, 152, 156, 158, 161, 165, 166, 167, 168, 170, 178, 180, 181, 185, 189, 190, 191, 192, 195, 196, 199, 201, 202, 203, 204, 205, 206, 209, 212, 213, 214, 217, 223, 227, 229, 230, 231, 232, 235, 237, 238, 242, 243, 245, 246, 247, 249, 250, 253, 255, 256, 257, 259, 262, 263, 265, 266, 268, 269, 275, 277, 279, 280, 282, 283, 285, 286, 288, 291, 292, 294, 298, 299, 303, 306, 310, 320, 322, 323], "base64": [27, 155], "base_bound": 247, "base_config": [9, 72, 73, 98, 114, 131, 276], "base_config_fil": 72, "base_control": [117, 277], "base_control_primit": 25, "base_controller_config": 72, "base_dt": [35, 254], "base_dynam": 135, "base_factori": 248, "base_fit": [112, 201, 202, 248], "base_gain": 72, "base_lambda": 35, "base_optim": 254, "base_param": [72, 112, 134, 191, 283], "base_pso_config": 112, "base_se": 68, "base_thick": 199, "base_threshold": 199, "base_w": 247, "basecontrol": [71, 76, 132, 320, 321], "based_control_design": [222, 233], "based_slid": [222, 233], "basedynam": 135, "basedynamicsmodel": [52, 59, 220], "baseintegr": 61, "baselin": [0, 1, 10, 12, 22, 24, 26, 32, 33, 34, 36, 39, 44, 51, 52, 56, 57, 58, 61, 62, 65, 67, 68, 74, 75, 77, 82, 83, 85, 88, 93, 98, 104, 117, 119, 121, 127, 128, 131, 132, 134, 136, 146, 150, 151, 156, 158, 169, 170, 172, 175, 177, 182, 190, 192, 193, 197, 201, 207, 213, 216, 223, 226, 229, 230, 232, 235, 237, 238, 239, 243, 244, 250, 253, 254, 255, 261, 273, 274, 276, 277, 282, 283, 284, 285, 290, 298, 303, 309, 311, 323], "baseline_class": 167, "baseline_control": [51, 276, 277], "baseline_cost": 51, "baseline_fil": 207, "baseline_hyperparamet": 52, "baseline_kei": 207, "baseline_memori": 117, "baseline_result": [75, 136, 207, 253], "baseline_stat": 119, "baseline_test": 93, "baseline_valu": [52, 93], "basemodel": [73, 278], "baseorchestr": 52, "basesmc": 17, "bash": [10, 13, 14, 19, 22, 23, 24, 30, 39, 40, 65, 67, 73, 87, 88, 89, 90, 91, 93, 111, 116, 117, 118, 122, 127, 129, 143, 145, 147, 164, 165, 167, 169, 193, 194, 207, 253, 255, 284, 300, 301, 304, 320], "basi": [67, 68, 81, 119, 120, 224, 234, 261, 279], "basic": [11, 12, 13, 19, 22, 23, 27, 28, 34, 38, 44, 45, 50, 52, 53, 56, 58, 68, 72, 80, 81, 82, 83, 86, 92, 93, 95, 101, 103, 105, 106, 108, 112, 114, 115, 116, 117, 118, 127, 129, 130, 134, 136, 138, 144, 146, 147, 151, 160, 163, 166, 183, 185, 193, 197, 208, 215, 252, 254, 266, 275, 301, 305, 310, 313, 322], "basic_constraint": 112, "basic_detect": 119, "basic_factory_exampl": 49, "basic_function": 98, "basic_pso_exampl": 248, "basic_pso_optim": 248, "basic_pso_workflow": 215, "basic_simul": 61, "basic_valid": 280, "basicconfig": [49, 117, 185, 208, 215, 276, 280, 321], "basiccontrollerconfig": [9, 10], "basin": [156, 162, 201, 230, 232, 237], "bat": 146, "batch": [8, 9, 10, 11, 17, 22, 24, 32, 33, 38, 44, 45, 51, 52, 53, 54, 55, 56, 58, 63, 64, 76, 81, 82, 102, 103, 105, 106, 107, 108, 110, 117, 127, 128, 129, 130, 146, 148, 150, 178, 182, 184, 189, 193, 197, 203, 208, 210, 217, 220, 222, 223, 224, 233, 234, 235, 248, 253, 254, 259, 274, 276, 278, 280, 283, 284, 293, 297, 298, 317, 320, 321], "batch_control_comput": 63, "batch_count": 171, "batch_data": 61, "batch_experi": 170, "batch_extract": 297, "batch_fitness_evalu": 248, "batch_fitness_funct": 135, "batch_index": [61, 171], "batch_initi": 61, "batch_initial_st": 61, "batch_optimization_": 280, "batch_optimization_workflow": 280, "batch_orchestr": 61, "batch_pso_optim": 321, "batch_result": [61, 117, 135, 280], "batch_results_path": 280, "batch_simulation_guid": 200, "batch_siz": [61, 98, 117, 135, 171, 203], "batch_studi": 128, "batchorchestr": [52, 59, 171], "batchprocess": 317, "batchresultcontain": [59, 171], "batchsimulationstrategi": 17, "batteri": [149, 167], "bau": [35, 122], "bayesian": [202, 222, 229, 233, 238, 250], "bb": [225, 240], "bbox_inch": [253, 254, 280], "bc": [10, 84, 93, 198], "bca": 310, "bd": 84, "bdf": 232, "beam": 268, "bear": [227, 231], "beat": [225, 240], "beatti": [222, 233], "beauti": 31, "beautif": [39, 44, 190, 218, 243, 266], "becam": 135, "becaus": [26, 61, 162, 163, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 287, 306], "beck": 207, "becom": [5, 22, 31, 79, 82, 118, 119, 191, 195, 199, 201, 202, 204, 206, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 240, 253, 254, 285, 287, 290, 293, 294, 295, 310], "been": [18, 22, 23, 40, 52, 64, 92, 95, 98, 107, 119, 122, 127, 146, 177, 192, 199, 212, 218, 222, 223, 225, 226, 229, 230, 233, 235, 237, 238, 239, 240, 241, 244, 251, 281, 287, 290, 295], "befor": [2, 5, 7, 12, 20, 22, 23, 24, 25, 26, 30, 31, 32, 33, 40, 44, 45, 50, 51, 52, 56, 58, 59, 61, 62, 65, 70, 72, 74, 76, 78, 79, 80, 82, 83, 84, 86, 89, 98, 102, 105, 106, 107, 109, 115, 116, 117, 118, 119, 120, 124, 126, 127, 132, 137, 138, 142, 143, 144, 145, 146, 148, 159, 164, 165, 166, 168, 170, 171, 177, 178, 185, 192, 199, 202, 203, 204, 205, 210, 216, 218, 223, 226, 229, 232, 235, 238, 239, 247, 248, 250, 253, 254, 255, 258, 266, 267, 275, 276, 277, 279, 282, 283, 290, 297, 298, 313, 318, 323], "before_deploy": 255, "before_fix": 300, "before_memori": 98, "beforeinstallprompt": 31, "begin": [33, 39, 53, 81, 95, 146, 149, 152, 156, 191, 193, 195, 198, 200, 201, 202, 216, 220, 221, 225, 227, 231, 232, 240, 242, 245, 246, 258, 261, 265, 269, 271, 279, 287, 288, 289, 290, 293, 294, 295, 298, 309], "beginn": [11, 19, 98, 127, 150, 155, 197, 253], "behav": [79, 82, 163, 199, 201, 226, 227, 231, 232, 239], "behavior": [1, 17, 19, 22, 23, 34, 53, 59, 61, 63, 75, 77, 81, 84, 86, 89, 98, 114, 119, 120, 124, 127, 131, 139, 141, 152, 155, 156, 159, 162, 163, 164, 165, 172, 177, 183, 192, 196, 197, 199, 205, 225, 240, 251, 261, 265, 278, 280, 283, 288, 291, 297, 300, 304, 310, 321], "behaviour": [62, 199, 222, 223, 224, 226, 230, 232, 233, 234, 235, 237, 239], "behind": [127, 129, 160, 199, 229, 238], "being": [24, 33, 40, 92, 102, 117, 164, 300], "belfast": [222, 233], "belhocin": [223, 235], "below": [10, 27, 33, 39, 86, 87, 92, 98, 120, 136, 139, 143, 144, 145, 146, 147, 155, 163, 165, 182, 198, 208, 213, 216, 221, 223, 224, 227, 228, 231, 232, 234, 235, 236, 247, 255, 261, 265, 280, 282, 290, 298, 306, 313], "belt": [228, 236], "bemporad": 84, "benchmark": [9, 11, 15, 19, 22, 24, 25, 32, 33, 34, 36, 38, 39, 40, 50, 51, 52, 53, 56, 59, 61, 64, 71, 78, 80, 82, 83, 87, 88, 89, 92, 95, 98, 103, 107, 112, 114, 119, 123, 127, 128, 129, 137, 138, 146, 157, 158, 160, 167, 168, 169, 171, 172, 175, 179, 182, 183, 184, 189, 190, 193, 197, 198, 199, 203, 209, 215, 216, 218, 220, 222, 226, 227, 231, 232, 233, 239, 241, 242, 243, 244, 247, 249, 250, 251, 253, 254, 255, 256, 257, 262, 263, 277, 281, 282, 283, 291, 293, 297, 301, 308, 311, 312, 313, 314, 320, 323], "benchmark_analysis_summari": [65, 67], "benchmark_ast": 297, "benchmark_comparison": 252, "benchmark_control_comput": 76, "benchmark_control_loop_frequ": 93, "benchmark_controller_perform": 92, "benchmark_cr": 76, "benchmark_factori": 254, "benchmark_factory_perform": [116, 277], "benchmark_fail": 254, "benchmark_fitness_funct": 114, "benchmark_func": 209, "benchmark_funct": 209, "benchmark_memory_usag": 93, "benchmark_perform": 98, "benchmark_pso_convergence_tim": 93, "benchmark_pso_perform": 93, "benchmark_regex": 297, "benchmark_report": 283, "benchmark_result": [209, 255], "benchmark_tim": 254, "benchmarkcomparisonfail": 282, "benchmarkconfig": [310, 313], "benchmarkfunct": 209, "benchmarking_framework_technical_guid": 25, "benchmarkresult": 255, "benchmarks_methodologi": [7, 186], "benchmarksuit": [310, 313], "benefici": 167, "benefit": [17, 19, 25, 26, 29, 31, 32, 35, 40, 49, 50, 55, 56, 61, 65, 78, 79, 80, 84, 91, 98, 99, 120, 122, 127, 145, 154, 161, 168, 171, 193, 195, 196, 205, 216, 220, 228, 236, 247, 249, 290, 310, 313, 318], "benjamini": [309, 310], "benosman": 123, "bento": [268, 271], "benuwa": [223, 235], "ben\u00edtez": 310, "bergh": [123, 125, 246, 291], "bergmeir": 310, "berlin": 205, "bernstein": 123, "bessel": 68, "best": [11, 12, 14, 19, 29, 30, 31, 40, 42, 44, 50, 51, 52, 56, 61, 67, 71, 73, 76, 77, 78, 81, 82, 84, 85, 86, 92, 97, 102, 104, 106, 107, 109, 115, 117, 120, 122, 124, 126, 127, 129, 132, 133, 136, 138, 140, 146, 148, 151, 156, 157, 158, 162, 163, 164, 172, 179, 180, 181, 183, 184, 189, 191, 193, 197, 199, 201, 202, 205, 208, 210, 213, 214, 216, 217, 222, 223, 224, 227, 230, 231, 232, 233, 234, 235, 237, 241, 242, 245, 246, 247, 248, 250, 251, 254, 258, 259, 265, 276, 277, 279, 281, 289, 291, 293, 302, 303, 307, 308, 309, 314, 316, 317, 318, 319, 321, 323], "best_case_perform": 248, "best_config": [133, 313], "best_control": [277, 313], "best_cost": [40, 51, 53, 76, 77, 78, 80, 81, 98, 104, 105, 106, 107, 128, 130, 132, 133, 135, 148, 167, 182, 183, 193, 209, 216, 217, 247, 251, 253, 254, 276, 277, 300, 313, 318, 321], "best_data": 313, "best_dist": 313, "best_fit": [49, 52, 61, 98, 107, 116, 117, 202, 214, 248, 283, 310, 313], "best_fit_nam": 313, "best_fitness_achiev": 98, "best_fitness_histori": [98, 202], "best_for_": 112, "best_for_object": 112, "best_for_scenario": 112, "best_gain": [40, 49, 50, 53, 61, 76, 77, 78, 80, 81, 98, 104, 107, 116, 117, 128, 130, 132, 133, 134, 135, 148, 167, 193, 216, 217, 248, 253, 254, 276, 277, 283, 300, 313, 321], "best_idx": 313, "best_model_kei": 313, "best_nam": 277, "best_object": 52, "best_overal": [104, 112, 253], "best_overall_cost": [133, 148], "best_overall_gain": 148, "best_param": 93, "best_particle_except_i": 202, "best_particle_idx": 216, "best_po": [38, 51, 53, 84, 86, 193, 216, 217, 251], "best_posit": [215, 253, 254], "best_result": [63, 148, 215], "best_scor": [104, 313], "best_solut": 112, "best_solution_histori": 112, "best_typ": 106, "beta": [125, 166, 168, 199, 201, 202, 246, 256, 258, 288, 289, 290, 293, 294, 310], "beta_": 53, "better": [6, 17, 35, 51, 52, 53, 56, 61, 65, 68, 71, 77, 78, 79, 84, 98, 106, 112, 128, 131, 133, 135, 141, 146, 148, 149, 158, 159, 162, 163, 164, 166, 167, 168, 169, 170, 171, 182, 183, 193, 195, 196, 197, 200, 201, 202, 205, 215, 216, 217, 223, 224, 227, 229, 231, 234, 235, 237, 238, 249, 251, 253, 265, 274, 276, 277, 283, 290, 291, 293, 299, 303, 308, 310, 321], "better_method": 313, "between": [2, 10, 11, 13, 17, 19, 22, 24, 31, 33, 37, 40, 52, 61, 62, 63, 64, 65, 72, 73, 75, 76, 77, 79, 81, 84, 86, 94, 98, 99, 101, 103, 106, 107, 114, 117, 120, 125, 127, 135, 140, 144, 145, 156, 160, 162, 165, 166, 167, 168, 177, 178, 185, 188, 192, 193, 196, 198, 200, 201, 202, 203, 205, 207, 216, 221, 224, 226, 227, 230, 231, 232, 234, 237, 239, 242, 243, 250, 253, 254, 255, 258, 259, 260, 263, 265, 277, 279, 283, 290, 291, 294, 306, 310, 315, 316, 320, 321], "beyond": [17, 51, 65, 84, 87, 118, 120, 129, 146, 164, 170, 177, 185, 193, 221, 223, 224, 228, 234, 235, 236, 309, 310], "bezier": [140, 143], "bfg": [9, 44, 202, 253], "bg": [67, 267, 269], "bhat": 123, "bi": 246, "bia": [65, 84, 118, 221, 282, 291, 296, 308, 310], "bias_squar": [310, 313], "bias_variance_analysi": [310, 313], "bias_variance_ratio": 313, "bias\u00b2": [308, 310], "bib": [8, 13, 16, 24, 32, 69, 89, 121, 122, 125, 187, 188, 256, 257, 320], "bibliograph": 95, "bibliographi": [8, 11, 13, 15, 16, 24, 33, 89, 121, 123, 126, 160, 188, 189, 197, 225, 257, 262, 320], "bibliography_stat": 257, "bibtex": [2, 4, 13, 15, 95, 124, 125, 129, 187, 189, 256, 257, 320], "bibtex_bibfil": 187, "bibtex_bibliography_head": 187, "bibtex_default_styl": 187, "bibtex_gener": 4, "bibtex_reference_styl": 187, "bibtex_tooltip": 187, "bidirect": [57, 58, 59], "big": 177, "bigg": 290, "bigl": [225, 232, 240], "bigr": [225, 232, 240], "bin": [39, 44, 49, 52, 72, 73, 76, 90, 91, 92, 93, 118, 121, 124, 127, 146, 150, 155, 164, 170, 171, 207, 253, 254, 255, 282, 283, 298], "binari": [15, 61, 298], "binaryseri": 9, "bind": [8, 15, 91, 177, 185], "bio": [127, 129], "biolog": [202, 288], "biped": [222, 233], "bird": [127, 162, 199, 202, 222, 223, 232, 233, 235, 288], "birkh\u00e4us": [123, 163, 192, 194, 197, 204, 205], "bit": [177, 185, 254, 270, 290], "bj\u00f6rn": 123, "bk": 191, "bk_d": 287, "bl": [164, 166], "bl_": 166, "bl_0": 166, "bla": [171, 254], "black": [15, 93, 162, 170, 171, 178, 202], "blank": [26, 31, 33, 299], "blas_info": 254, "blas_opt_info": 254, "blast": 268, "blend": [51, 224, 234], "blind": [190, 268, 297], "blob": 268, "blobcursor": [267, 268], "block": [1, 7, 8, 13, 14, 24, 25, 26, 27, 29, 31, 33, 37, 39, 40, 46, 57, 59, 67, 71, 84, 93, 97, 122, 123, 129, 138, 140, 147, 155, 178, 189, 190, 218, 221, 242, 266, 284, 298, 300, 301, 308, 316, 317, 318], "block_diagram": [316, 317], "block_maxima": 313, "block_siz": 313, "blocker": [65, 67, 144], "blocking_oper": 115, "blockquot": 266, "blocks_per_grid": 104, "blog": [225, 240], "blow": [168, 226, 239], "blue": [52, 98, 145, 149, 163, 169, 178, 190, 227, 228, 229, 231, 236, 238, 253, 263, 321], "blue_green_deploy": 98, "blur": 268, "blurtext": 268, "bmatrix": [198, 200, 220, 221, 225, 232, 240, 246, 279, 287, 288, 289, 290, 293, 294, 295], "bo": [148, 167, 202], "board": 190, "bob": 17, "boca": [205, 257], "bode": 285, "bodi": [14, 161, 221, 232, 290, 298, 300], "bodson": 81, "boilerpl": 17, "bold": [13, 52, 164, 258, 266, 267, 269, 271, 299, 320], "boldsymbol": [76, 225, 240, 246, 279, 290], "bom": 190, "bonferroni": [308, 309, 310], "bonu": [112, 113, 298], "bonus": 112, "bonyadi": 123, "book": [2, 122, 187, 225, 240, 256, 257, 267, 268, 269, 296], "booktitl": [8, 17, 123, 320], "bool": [17, 24, 35, 39, 52, 53, 72, 73, 75, 76, 82, 84, 92, 93, 98, 101, 102, 105, 107, 108, 109, 115, 119, 120, 125, 131, 135, 191, 203, 208, 215, 220, 247, 248, 249, 254, 273, 275, 277, 279, 280, 287, 291, 300, 313, 321], "bool_": 67, "boolean": [29, 30, 31, 72, 76, 98, 109, 112, 143, 154, 249, 250], "boost": 299, "booster": 298, "bootstrap": [118, 120, 127, 178, 246, 308, 310], "bootstrap_95th": 313, "bootstrap_analysi": 310, "bootstrap_ci": 310, "bootstrap_confidence_level": 310, "bootstrap_mean": 313, "bootstrap_median": 313, "bootstrap_prob": 313, "bootstrap_result_class": 149, "bootstrap_sampl": [310, 313], "bootstrap_std": 313, "borda": 309, "borda_scor": 310, "border": [67, 140, 141, 268], "bordercolor": [159, 303, 318], "borderwidth": 318, "boreali": [268, 271], "borlaug": [229, 238], "borrelli": 84, "both": [1, 10, 15, 19, 20, 22, 23, 24, 30, 33, 42, 45, 49, 51, 56, 61, 65, 67, 73, 74, 76, 82, 83, 85, 86, 98, 101, 103, 106, 107, 119, 129, 132, 134, 135, 138, 141, 142, 146, 147, 161, 164, 165, 166, 167, 170, 177, 183, 191, 195, 197, 199, 201, 203, 204, 216, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 240, 246, 247, 249, 257, 265, 268, 270, 271, 285, 290, 291, 293, 295, 306, 310, 313, 318, 321], "bottleneck": [250, 297, 298], "bottom": [31, 84, 86, 159, 163, 229, 238, 310], "boubak": [123, 226, 239], "boubaker2013doubl": 257, "boumedien": [223, 235], "bounc": [140, 142, 143, 202, 215, 268, 271], "bouncecard": [268, 271], "bounci": 139, "bound": [12, 19, 35, 36, 37, 38, 39, 48, 49, 50, 51, 52, 55, 56, 59, 60, 68, 72, 74, 75, 76, 77, 78, 80, 81, 82, 85, 86, 92, 93, 94, 98, 100, 101, 103, 105, 106, 114, 115, 117, 119, 124, 125, 127, 128, 129, 130, 134, 135, 136, 148, 150, 151, 158, 162, 163, 164, 166, 167, 175, 176, 177, 179, 180, 181, 182, 184, 185, 189, 192, 193, 195, 197, 198, 199, 200, 202, 203, 206, 208, 209, 215, 216, 220, 221, 223, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 250, 253, 254, 258, 259, 265, 266, 273, 274, 276, 277, 279, 280, 283, 284, 288, 291, 293, 294, 300, 304, 310, 313, 316, 317, 318, 321], "bound_control": 73, "bound_margin": 248, "bound_pair": 73, "bound_tighten": 112, "boundari": [1, 12, 17, 22, 30, 36, 37, 39, 40, 45, 49, 50, 51, 55, 56, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 93, 97, 98, 99, 100, 105, 113, 116, 117, 118, 119, 120, 123, 124, 125, 132, 133, 136, 150, 153, 158, 160, 164, 165, 166, 167, 168, 170, 176, 179, 181, 182, 189, 192, 196, 197, 199, 200, 201, 202, 204, 215, 218, 222, 223, 224, 229, 232, 233, 234, 235, 238, 242, 245, 247, 250, 258, 261, 265, 272, 273, 274, 275, 276, 279, 287, 288, 289, 291, 293, 294, 298, 301, 313, 317], "boundary_behavior_accept": 75, "boundary_failure_mod": 75, "boundary_handl": 201, "boundary_hit": 215, "boundary_lay": [9, 12, 17, 35, 36, 38, 49, 50, 51, 55, 56, 65, 67, 74, 76, 77, 79, 80, 82, 83, 85, 86, 97, 98, 100, 101, 105, 106, 107, 114, 115, 116, 117, 128, 131, 132, 150, 158, 164, 165, 166, 168, 170, 193, 196, 197, 199, 210, 211, 216, 224, 226, 227, 231, 234, 239, 254, 273, 275, 276, 277, 294, 320, 321], "boundary_layer_bound": 294, "boundary_layer_deriv": 194, "boundary_layer_slop": [72, 78, 196, 273, 275, 276], "boundary_layer_thick": [73, 98, 99], "boundary_layer_width": [92, 313, 321], "boundary_penalti": 113, "boundary_posit": 78, "boundary_respons": 75, "boundary_result": 75, "boundary_scenario": 75, "boundary_thick": [72, 99, 207], "boundaryconditiontestcas": 75, "boundaryconditiontestresult": 75, "boundarylay": 199, "bounded": [191, 195, 208, 284, 287, 294], "bounded_disturb": 37, "bounds_adapt": [132, 133, 201], "bounds_arrai": [98, 107], "bounds_class": [132, 133], "bounds_config": [76, 247, 252], "bounds_correct": 252, "bounds_histori": 112, "bounds_hybrid": 133, "bounds_low": [98, 202, 215], "bounds_map": [51, 98, 101, 109, 274], "bounds_max": 290, "bounds_min": 290, "bounds_optim": 58, "bounds_result": 53, "bounds_set": 253, "bounds_spec": 251, "bounds_sta": [133, 201], "bounds_upp": [98, 202, 215], "bounds_us": [98, 107], "bounds_valid": 58, "bounds_viol": 249, "boundsoptimizationstrategi": [52, 53, 57], "boundsvalid": 252, "boundsvalidationresult": [53, 57, 58, 252], "bouyoucef": [223, 235], "bowl": [30, 163], "box": [19, 28, 29, 36, 65, 67, 84, 162, 169, 178, 202, 270, 293, 309, 310, 320], "box_constraint": 293, "boxplot": [169, 178, 310, 320], "boyd": [8, 84], "br": [53, 161, 162, 163, 164, 167, 259, 269, 294, 316], "brake": [164, 165], "branch": [39, 70, 89, 93, 94, 119, 142, 188, 253, 282], "branch_coverag": 39, "brand": [31, 90], "breach": [25, 93], "break": [5, 10, 23, 24, 33, 35, 38, 53, 75, 98, 104, 106, 112, 117, 118, 119, 127, 133, 139, 146, 161, 197, 202, 209, 216, 229, 238, 247, 274, 278, 297, 320], "breakdown": [2, 39, 55, 57, 58, 65, 84, 86, 122, 164, 167, 177, 190, 202, 215, 220, 232, 241, 250, 298, 299], "breaking_chang": 247, "breakpoint": [28, 31, 94], "breakthrough": [24, 256], "brett": 17, "breviti": [227, 231, 291], "brian": 8, "bridg": [51, 53, 56, 63, 91, 92, 98, 106, 127, 160, 223, 224, 228, 232, 234, 235, 236, 277, 291, 309], "brief": [10, 59, 94, 115, 266], "bring": [154, 228, 236, 306], "brittl": [17, 222, 233], "broad": 71, "broadcast": [17, 27, 44, 203, 217, 246], "broadcast_to": [44, 203, 216], "broader": 17, "broadli": 162, "broke": [142, 298], "broken": [8, 26, 34, 40, 67, 122, 124, 126, 223, 235, 297, 300], "broken_fil": 298, "broken_link": 94, "broomstick": 164, "brows": [31, 95, 144, 232, 269], "browser": [1, 22, 29, 91, 127, 129, 138, 141, 144, 154, 155, 159, 170, 189, 232, 282, 315, 323], "browser_testing_checklist": [137, 139, 141, 142, 143], "bsd": [2, 8, 15], "btn": [140, 141, 142, 143, 144], "bu": [13, 61, 78, 84, 161, 191, 198, 205, 232, 277, 299, 317], "bu_": 232, "bubbl": [159, 268, 271], "bubblemenu": [268, 271], "bucak": 125, "budget": [16, 65, 67, 127, 167, 169, 183, 184, 188, 193, 197, 202, 310], "buffer": [1, 44, 61, 63, 81, 127, 152, 185, 210, 216, 242], "bug": [5, 23, 98, 128, 139, 142, 145, 147, 153, 300, 315], "build": [1, 7, 8, 11, 13, 14, 15, 16, 31, 33, 51, 56, 63, 67, 70, 79, 84, 89, 90, 92, 94, 119, 139, 141, 146, 154, 159, 160, 164, 165, 187, 188, 189, 194, 232, 256, 257, 266, 271, 291], "build_phase2_test": 27, "builder": [29, 91, 127], "buildkit": 91, "buildkit_inline_cach": 91, "built": [2, 13, 22, 25, 27, 49, 64, 65, 72, 76, 90, 96, 101, 107, 109, 129, 132, 185, 192, 210, 247, 248, 250, 257, 265, 268, 270, 277, 278, 318, 320], "bulk": [44, 138, 139, 142], "bullet": 30, "bulletproof": 284, "bump": 23, "bumpless": 37, "burden": 138, "burst": 268, "burton": [78, 123, 205], "busi": [40, 93], "butcher": [61, 200], "button": [1, 8, 27, 28, 29, 30, 31, 90, 139, 143, 144, 150, 153, 155, 265, 270], "bv": 313, "bv_analysi": [310, 313], "bw": 296, "bx": [225, 240], "bxb_": [225, 240], "bxc": [225, 240], "bxx": [225, 240], "by_prior": 298, "by_sourc": 298, "bypass": [70, 94], "byte": [1, 22, 23, 31, 44, 77, 78, 177, 185, 196, 197, 254, 290], "bytes_per_float": 171, "b\u03b81": [225, 240], "b\u03b81b_": [225, 240], "b\u03b81c_": [225, 240], "b\u03b81\u03b8": [225, 240], "b\u03b82": [225, 240], "b\u03b82b_": [225, 240], "b\u03b82c_": [225, 240], "b\u03b82\u03b8": [225, 240], "b\u03b8_1\u03b8": [225, 240], "b\u03b8_2\u03b8": [225, 240], "b\u1e8b": 30, "b\u1e8b\u00b2": 317, "b\u2080": 134, "b\u2081": [134, 198], "b\u2082": [134, 198], "c": [2, 8, 12, 13, 15, 17, 25, 26, 27, 29, 35, 39, 40, 41, 52, 53, 62, 63, 65, 73, 76, 78, 81, 84, 85, 86, 92, 93, 97, 103, 117, 123, 124, 125, 128, 134, 137, 139, 142, 144, 145, 146, 148, 150, 151, 155, 161, 163, 164, 165, 167, 168, 169, 170, 177, 178, 182, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 215, 219, 220, 221, 226, 227, 228, 230, 231, 232, 236, 237, 239, 245, 246, 251, 252, 253, 254, 255, 257, 258, 274, 276, 278, 279, 282, 287, 288, 289, 290, 291, 294, 295, 297, 298, 299, 300, 301, 310, 317, 318, 323], "c0": 220, "c1": [19, 20, 22, 38, 39, 45, 51, 52, 57, 58, 63, 65, 67, 72, 73, 76, 81, 98, 104, 107, 117, 124, 125, 126, 131, 133, 158, 162, 167, 182, 183, 193, 197, 198, 201, 202, 208, 209, 214, 216, 220, 224, 227, 229, 230, 231, 232, 234, 237, 238, 249, 250, 251, 252, 253, 254, 258, 261, 274, 279, 290, 293, 304, 308, 321], "c11": [225, 240], "c12": [198, 225, 240], "c12c_": [225, 240], "c2": [19, 20, 38, 39, 45, 51, 52, 57, 58, 63, 65, 67, 72, 73, 76, 81, 98, 104, 107, 117, 124, 125, 126, 131, 133, 158, 162, 167, 182, 183, 193, 197, 198, 201, 202, 208, 209, 214, 216, 220, 224, 227, 229, 230, 231, 232, 234, 237, 238, 249, 250, 251, 252, 253, 254, 258, 261, 274, 279, 290, 293, 304, 308, 321], "c22": [225, 240], "c23": [225, 240], "c23c": [225, 240], "c3": [124, 125, 261], "c33": [225, 240], "c4": [124, 125, 261], "c5": 261, "c_": [39, 193, 198, 202, 225, 226, 232, 239, 240, 246, 258, 288, 293, 294, 295, 298], "c_0": 198, "c_1": [19, 52, 81, 88, 125, 126, 156, 191, 193, 202, 208, 209, 215, 242, 245, 246, 258, 261, 272, 279, 288, 289, 293, 295, 299], "c_2": [19, 52, 81, 88, 125, 126, 156, 191, 193, 202, 208, 209, 215, 242, 245, 246, 258, 261, 272, 279, 288, 289, 293, 295, 299], "c_3": 299, "c_4": 299, "c_coeff": [225, 240], "c_diag": 258, "c_i": [88, 121, 123, 125, 126, 198, 201, 209, 258, 293, 294, 299], "c_matrix": 258, "c_param": 258, "c_v": 88, "c_x": [258, 293, 294], "c_\u03b8\u2081": 258, "c_\u03b8\u2082": 258, "ca": [161, 222, 233], "cabl": 177, "cach": [1, 13, 16, 27, 28, 30, 38, 41, 44, 53, 63, 72, 81, 84, 85, 86, 89, 90, 91, 92, 98, 103, 105, 107, 112, 115, 117, 141, 142, 144, 153, 156, 157, 159, 170, 188, 193, 197, 198, 203, 213, 219, 248, 265, 275, 280, 297, 298, 315, 317], "cache_control": 111, "cache_data": 90, "cache_entries_remov": 98, "cache_hit": 76, "cache_hit_r": 111, "cache_kei": [106, 117, 280], "cache_matric": 220, "cache_miss": 76, "cache_path": 298, "cache_s": [98, 107, 112], "cache_ttl_second": 111, "cached_control": 117, "cached_matrix_oper": 81, "cachedrespons": 31, "cachefirststrategi": 31, "cacheoptim": 317, "calccost": 316, "calcul": [8, 27, 31, 39, 40, 55, 56, 57, 58, 64, 68, 73, 75, 78, 81, 85, 86, 88, 98, 99, 102, 107, 118, 120, 131, 134, 149, 153, 164, 168, 169, 178, 199, 201, 209, 224, 234, 242, 249, 252, 255, 276, 280, 293, 294, 295, 298, 301, 313, 316, 317, 318], "calculate_compliance_scor": 88, "calculate_confid": 88, "calculate_mass_matrix": 209, "calculate_metr": 318, "calculate_potential_energi": 209, "calculate_production_readi": 301, "calculate_slop": 39, "calculu": [160, 225, 240], "calibr": [118, 261, 306], "call": [20, 22, 27, 34, 38, 40, 49, 52, 56, 61, 65, 85, 93, 98, 100, 103, 106, 111, 115, 116, 117, 119, 132, 135, 153, 155, 167, 171, 175, 193, 194, 198, 199, 203, 204, 210, 211, 216, 220, 222, 224, 232, 233, 234, 242, 248, 274, 302], "call_count": [98, 101], "callabl": [10, 17, 19, 35, 49, 51, 53, 55, 59, 61, 63, 71, 72, 76, 82, 98, 102, 104, 105, 109, 112, 116, 117, 200, 203, 210, 215, 216, 250, 274, 277, 280, 291, 313], "callback": [29, 52, 57, 67, 72, 117, 135, 216, 248, 253, 254, 277], "calle": 79, "calledprocesserror": [169, 178], "caller": [44, 79], "callout": 28, "cambridg": 290, "camera": [1, 31, 129, 152, 156], "can": [5, 15, 20, 22, 25, 26, 27, 29, 30, 32, 49, 50, 51, 53, 56, 61, 67, 70, 72, 73, 74, 78, 81, 82, 84, 86, 88, 93, 94, 98, 103, 104, 106, 112, 114, 115, 116, 117, 119, 121, 122, 124, 132, 137, 138, 139, 140, 141, 144, 146, 147, 154, 156, 159, 161, 162, 163, 165, 166, 167, 168, 185, 191, 193, 196, 197, 199, 201, 202, 204, 208, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 253, 265, 266, 268, 270, 274, 279, 283, 285, 290, 294, 295, 298, 299, 300, 309, 310, 313, 315], "canari": 98, "canary_metr": 98, "canary_success": 98, "cancel": [16, 35, 53, 78, 98, 188, 205, 206, 226, 227, 231, 232, 239, 287, 294], "candid": [12, 30, 35, 45, 53, 58, 61, 64, 81, 82, 83, 88, 98, 129, 162, 167, 182, 191, 192, 193, 199, 202, 205, 206, 209, 211, 222, 223, 224, 230, 232, 233, 234, 235, 237, 248, 284, 288, 289, 294, 299, 309, 318], "candidate_gain": [133, 210], "cannot": [15, 20, 51, 56, 67, 73, 94, 98, 117, 120, 147, 161, 193, 197, 223, 225, 229, 232, 235, 238, 240, 252, 253, 255, 277, 297, 308], "canon": [24, 32, 34, 50, 51, 80, 82, 115, 131, 162, 199, 226, 227, 231, 232, 239, 258, 288, 293, 297], "canonic": 274, "canonicalize_controller_typ": [51, 274], "capabl": [12, 28, 29, 31, 40, 65, 75, 81, 84, 86, 91, 92, 102, 138, 146, 151, 157, 165, 166, 187, 189, 193, 197, 202, 218, 222, 224, 233, 234, 244, 250, 259, 275, 280, 294, 316], "capac": [111, 175, 310], "capacity_data": 111, "capacity_plann": 111, "capit": [273, 299], "caplog": 300, "capsiz": 178, "capthick": 178, "caption": [13, 27, 30, 149, 164, 217], "captur": [1, 22, 27, 29, 84, 117, 134, 155, 166, 177, 178, 182, 194, 200, 205, 220, 221, 222, 226, 233, 239, 255, 261, 282, 290, 295, 299], "capture_output": [39, 92, 169, 178, 253], "card": [8, 29, 30, 64, 257, 259, 268, 286, 316], "cardhead": 269, "cardin": [1, 5], "cardnav": 268, "cardswap": 268, "cardtitl": 269, "care": [59, 65, 81, 86, 120, 145, 166, 191, 197, 205, 221, 226, 229, 230, 237, 238, 239], "carefulli": [33, 164, 168, 201, 223, 225, 232, 235, 240, 287], "carlo": [7, 10, 12, 17, 52, 53, 59, 127, 128, 129, 136, 146, 148, 150, 157, 165, 169, 189, 191, 199, 201, 203, 220, 230, 232, 237, 242, 246, 259, 274, 282, 283, 307, 308, 311, 314, 320, 321], "carousel": 268, "carri": [227, 231], "cart": [13, 22, 35, 41, 53, 55, 61, 62, 72, 73, 74, 75, 82, 83, 84, 86, 98, 103, 117, 121, 124, 127, 129, 131, 133, 134, 135, 136, 146, 150, 152, 161, 163, 164, 165, 166, 167, 169, 170, 177, 182, 189, 197, 199, 216, 219, 220, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 237, 239, 253, 258, 260, 265, 272, 278, 279, 283, 285, 287, 288, 296, 301, 306, 313, 316, 317, 321], "cart_acc": 161, "cart_frict": [51, 74, 216, 220, 225, 240], "cart_gain": [81, 92, 226, 239], "cart_kinet": 295, "cart_lambda": [81, 226, 239], "cart_mass": [51, 53, 61, 68, 73, 74, 199, 208, 216, 220, 225, 240, 253], "cart_p_gain": [41, 92, 226, 239], "cart_p_lambda": [41, 226, 239], "cart_po": [149, 161, 170], "cart_posit": [75, 295], "cart_position_limit": 75, "cart_position_perturb": 75, "cart_stabil": 75, "cart_term": 81, "cart_vel": [149, 161, 170], "cart_veloc": 295, "cart_velocity_limit": 75, "cartesian": [225, 240], "cartpo": 317, "casadi": [115, 257], "cascad": [88, 190, 300], "case": [1, 2, 5, 8, 10, 12, 16, 20, 28, 30, 31, 36, 37, 39, 40, 49, 51, 52, 53, 56, 57, 59, 65, 75, 77, 78, 79, 81, 82, 84, 85, 86, 87, 93, 98, 99, 100, 108, 117, 120, 121, 125, 127, 132, 133, 135, 139, 143, 145, 146, 151, 154, 156, 158, 166, 171, 172, 176, 181, 183, 184, 188, 191, 192, 193, 195, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 213, 216, 217, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 242, 245, 246, 253, 254, 261, 266, 276, 279, 282, 283, 287, 293, 294, 297, 298, 300, 304, 308, 309, 318], "cast": [10, 79, 222, 233], "cat": [91, 94, 122, 128, 298], "catalog": [7, 14, 123, 192, 266], "catalogu": 260, "catastroph": 35, "catch": [22, 26, 31, 33, 40, 45, 73, 81, 114, 131, 140, 141, 254, 261, 300], "categor": [4, 14, 26, 39, 44, 69, 88, 115, 243, 256, 266, 283, 299], "categori": [24, 26, 31, 32, 38, 39, 52, 57, 67, 69, 87, 95, 98, 110, 121, 127, 139, 151, 192, 198, 199, 200, 201, 202, 207, 215, 241, 251, 255, 256, 257, 266, 268, 269, 270, 282, 283, 284, 298, 303, 321], "categorize_modules_by_crit": 88, "categorize_problem": 115, "category_solut": 115, "caught": [216, 224, 234, 300], "caus": [17, 20, 25, 26, 32, 33, 38, 40, 45, 56, 65, 67, 72, 73, 76, 77, 78, 82, 83, 84, 86, 95, 98, 106, 112, 114, 116, 131, 132, 135, 140, 141, 146, 147, 148, 155, 160, 162, 164, 165, 166, 167, 170, 171, 190, 193, 196, 199, 201, 202, 208, 210, 222, 223, 226, 227, 229, 230, 231, 232, 233, 235, 237, 238, 239, 244, 251, 252, 253, 261, 273, 276, 284, 290, 297, 301, 302, 310], "caution": [15, 205, 265], "cautiou": 53, "caveat": 65, "ca\u00b2": 161, "ca\u2075": 161, "cb_kwarg": 254, "cc": [225, 240], "ccccff": [161, 162, 163, 166, 167], "ccffcc": [161, 162, 163, 164, 166, 167], "cci": 88, "cd": [1, 10, 13, 22, 25, 26, 32, 33, 37, 39, 40, 44, 65, 67, 70, 89, 90, 92, 93, 121, 122, 123, 124, 128, 141, 146, 151, 159, 169, 170, 189, 210, 218, 242, 244, 253, 254, 265, 266, 267, 268, 269, 284, 290, 291, 300, 301, 315, 318, 320, 323], "cd_i": 291, "cdc": 81, "cdf": [310, 313], "cdn": [13, 27, 28, 29, 30, 31, 139, 144, 155, 157, 159], "cdot": [53, 58, 75, 81, 107, 152, 156, 191, 193, 195, 198, 200, 201, 202, 209, 215, 216, 217, 220, 232, 245, 246, 279, 287, 289, 290, 293, 294, 295, 297, 298, 299], "ce": [85, 197, 205], "ceil": [178, 313], "cell": [1, 12, 27, 153, 298], "cell_typ": 298, "center": [53, 71, 112, 149, 161, 198, 200, 205, 216, 220, 269, 271, 280, 290, 295], "centr": [45, 74, 221, 222, 224, 227, 231, 232, 233, 234, 272], "central": [17, 52, 55, 61, 63, 64, 68, 76, 80, 84, 86, 104, 127, 162, 174, 192, 199, 202, 203, 216, 222, 233, 243, 248, 254, 277, 280, 286, 288, 313], "central1": 91, "centralis": [224, 234], "centrifug": [134, 135, 161, 199, 205, 220, 222, 225, 232, 233, 240, 258], "centripet": [227, 231, 287, 288, 295], "centroid": [53, 202, 215, 246, 293], "cert": 92, "certain": [74, 162, 191, 202, 205, 222, 225, 226, 233, 239, 240], "certif": [0, 4, 39, 92, 119, 160, 189, 243, 279], "certifi": 156, "cf": 278, "cfg": [68, 216, 278, 313], "cfg_hash": [146, 147, 164, 165], "cfg_name": 313, "cfl": 73, "ch": [226, 239], "chain": [40, 44, 161, 232, 249, 252, 261, 275, 283, 290, 300], "challeng": [17, 30, 35, 36, 58, 59, 67, 82, 98, 113, 114, 127, 131, 146, 164, 199, 201, 222, 226, 230, 232, 233, 237, 239, 280, 290, 309, 318], "challenging_st": 114, "chanc": [178, 313], "chang": [2, 15, 17, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 37, 53, 55, 57, 59, 61, 65, 67, 72, 73, 77, 80, 81, 84, 89, 91, 94, 95, 98, 105, 106, 107, 113, 117, 118, 119, 120, 122, 124, 127, 138, 140, 143, 144, 146, 148, 150, 154, 155, 161, 163, 166, 167, 170, 197, 198, 199, 201, 202, 204, 205, 218, 222, 224, 226, 227, 231, 232, 233, 234, 239, 243, 261, 282, 283, 285, 290, 291, 296, 298, 300, 310, 315], "change_nam": 72, "change_ratio": 73, "change_rul": 72, "change_step": 113, "changelog": [5, 7, 11, 23, 29, 30, 31, 94, 95, 129, 137, 138, 142, 143, 213, 262, 263, 315], "channel": [82, 93, 191, 197, 199, 226, 239, 294], "chaotic": 232, "chapter": [205, 232, 267, 269, 290, 310], "char": 139, "charact": [31, 34, 71, 140, 141, 144, 145, 190, 242, 299], "character": [36, 48, 119, 149, 177, 222, 233, 284, 290], "characteris": [223, 232, 235], "characterist": [45, 50, 59, 61, 68, 75, 78, 82, 83, 97, 98, 118, 120, 123, 125, 127, 132, 146, 162, 164, 183, 184, 191, 192, 193, 199, 202, 204, 205, 206, 209, 210, 222, 227, 231, 233, 246, 249, 250, 253, 259, 275, 279, 280, 283, 284, 287, 291, 293, 294, 313, 321], "characteristic_equ": 293, "characterize_system_baselin": 119, "charg": 15, "charl": [8, 17], "chart": [8, 30, 31, 53, 59, 94, 110, 127, 129, 142, 144, 154, 156, 158, 267, 269, 271, 303], "chart_data": 159, "chartdiv": 28, "chartj": [65, 129, 159, 216, 303], "chartjs_extens": 159, "chat": [293, 294], "chatgpt_analysis_fil": 187, "chatgpt_evaluation_prompt": 16, "chatter": [10, 21, 22, 28, 30, 36, 37, 40, 43, 48, 49, 50, 51, 55, 56, 62, 65, 67, 68, 81, 82, 83, 97, 98, 100, 101, 103, 105, 109, 112, 113, 116, 120, 122, 123, 125, 126, 127, 128, 129, 131, 133, 146, 150, 158, 160, 164, 165, 167, 168, 169, 172, 181, 182, 189, 191, 192, 193, 196, 199, 200, 201, 202, 204, 206, 209, 214, 215, 216, 222, 223, 224, 226, 232, 233, 234, 235, 239, 242, 245, 248, 249, 256, 259, 273, 275, 279, 284, 286, 287, 288, 289, 293, 298, 301, 303, 316, 320, 321], "chattering_bound": 248, "chattering_devi": 209, "chattering_index": [107, 209, 248, 294], "chattering_indic": 166, "chattering_metr": 321, "chattering_minim": 248, "chattering_norm": 201, "chattering_reduct": [98, 109, 113], "chattering_result": 209, "chattering_sever": 209, "chattering_threshold": 35, "chattering_toler": 42, "chatteringanalyz": 321, "chatteringtestresult": 209, "chatteringvalidationresult": 209, "cheap": [222, 233], "cheat": [127, 129, 266], "check": [2, 3, 10, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 31, 34, 35, 38, 39, 40, 42, 46, 49, 50, 52, 55, 56, 57, 58, 59, 62, 64, 65, 67, 68, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 89, 91, 92, 93, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107, 109, 114, 116, 117, 118, 120, 122, 123, 124, 127, 129, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 145, 148, 150, 151, 153, 154, 155, 159, 162, 164, 165, 166, 167, 169, 170, 171, 177, 178, 182, 183, 184, 185, 187, 188, 191, 193, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 209, 210, 213, 215, 216, 219, 220, 224, 226, 234, 239, 242, 243, 244, 245, 250, 253, 255, 256, 257, 260, 261, 265, 267, 268, 270, 271, 273, 275, 276, 277, 279, 280, 282, 283, 284, 287, 290, 291, 298, 299, 301, 310, 313, 315, 317, 321, 323], "check_": 92, "check_alert": 63, "check_alert_threshold": 111, "check_attribut": [121, 122, 124, 126], "check_backward_compat": 98, "check_basic_function": 111, "check_ci_pipelin": 93, "check_cit": [16, 89, 188], "check_computation_regress": 207, "check_configur": 92, "check_conservation_properti": 279, "check_controller_api_vers": 76, "check_controller_depend": 117, "check_controller_function": 92, "check_conv": 167, "check_converg": [52, 57, 104, 112, 171, 202, 215], "check_convergence_qu": 251, "check_convex": 201, "check_depend": 117, "check_dependency_upd": 98, "check_deprecated_config": [49, 72, 80, 98, 102, 103, 105, 106, 114, 116], "check_deprecated_paramet": [98, 102], "check_disk_spac": 92, "check_error_r": 111, "check_func": 92, "check_interv": 321, "check_linear": 84, "check_log_fil": 92, "check_memori": 210, "check_memory_usag": 111, "check_nam": 92, "check_network_connect": 92, "check_numerical_health": 136, "check_output": 315, "check_perform": 111, "check_performance_alert": 98, "check_performance_metr": 92, "check_physical_consist": [9, 10], "check_resource_usag": 104, "check_result": [17, 253], "check_return_stat": 300, "check_return_typ": 81, "check_service_statu": 92, "check_stabl": 199, "check_system_resourc": 92, "check_system_statu": 93, "check_test_data_integr": 93, "check_thread_safeti": 111, "check_untyped_def": 300, "check_unused_cit": 123, "check_variable_scope_in_return": 300, "check_with_tim": 119, "checkbox": [1, 29, 153, 265], "checkconv": 316, "checker": [10, 14, 58, 59, 61, 71, 76, 92, 111, 117, 121, 122, 254], "checklist": [2, 10, 15, 30, 38, 51, 55, 73, 81, 86, 95, 98, 107, 111, 119, 127, 143, 151, 164, 166, 173, 176, 181, 182, 210, 243, 244, 247, 253, 266, 284, 309, 310], "checkmark": 31, "checkout": [10, 39, 142, 151, 253, 282, 283, 300, 315, 320], "checkpoint": [148, 167, 169, 173, 253], "checkpoint_": 253, "checkpoint_callback": 253, "checkpoint_fil": 148, "checkpoint_interv": 148, "checks_perform": 280, "checksum": [22, 185], "cheng": [227, 231], "cherri": 315, "chi": [73, 88, 193, 202, 209, 245, 246, 258, 293], "chief": [191, 232], "child": [297, 300], "children": [267, 297], "chines": [224, 234], "chirp": [45, 221], "chmod": [91, 92, 128, 282, 298], "choic": [29, 42, 61, 67, 84, 99, 156, 162, 163, 168, 170, 191, 196, 197, 202, 222, 223, 226, 229, 233, 235, 238, 239, 257, 258, 290, 310, 313], "choleski": 198, "choos": [31, 79, 118, 127, 146, 148, 158, 161, 163, 166, 191, 201, 202, 205, 225, 227, 229, 230, 231, 232, 237, 238, 240, 265, 266, 268, 287, 291, 303, 310], "choosealicens": 15, "choppi": 144, "chosen": [17, 22, 193, 199, 221, 223, 227, 231, 232, 235, 246, 287, 290], "chown": [91, 92], "chr": [108, 169], "christoffel": [198, 225, 240], "christoph": [8, 123], "chromagrid": 268, "chromat": 268, "chrome": [1, 27, 28, 30, 31, 137, 139, 140, 141, 142, 143, 144, 145, 152, 153, 156, 157, 232, 265, 268, 271], "chromium": [1, 30, 31, 156], "chunk": 171, "chunk_result": 171, "ci": [1, 7, 10, 13, 14, 22, 23, 32, 37, 39, 40, 65, 67, 68, 70, 77, 78, 87, 89, 93, 96, 120, 122, 123, 136, 149, 169, 178, 189, 190, 194, 197, 199, 207, 209, 210, 218, 242, 244, 255, 266, 284, 300, 301, 308, 309, 323], "ci_class": [149, 169], "ci_configur": 93, "ci_error": 178, "ci_hybrid": 169, "ci_level": 313, "ci_low": [136, 178, 313], "ci_result": 68, "ci_robust": 68, "ci_sta": 149, "ci_upp": [136, 178, 313], "ci_width": [68, 310], "cij": [225, 240], "cijc": [225, 240], "cinemat": [129, 152], "circ": 290, "circl": [191, 200, 291], "circular": [71, 78, 81, 117, 168, 268], "circulargalleri": 268, "circulartext": 268, "cit": [45, 55, 62, 74, 221, 272, 285, 296, 306], "citat": [11, 12, 15, 16, 24, 32, 33, 55, 89, 95, 97, 129, 188, 189, 259, 262, 263, 296, 320], "citation_faq": 122, "citation_index": 257, "citation_kei": [125, 299], "citation_map": [121, 122, 125, 126, 187], "citation_pattern": [297, 298], "citation_quick_refer": [121, 122, 124, 125], "citation_report": [122, 123, 126], "citation_system": [24, 25, 33], "citation_system_implement": 187, "citations_academ": 2, "citations_valid": 298, "cite": [0, 3, 8, 12, 13, 32, 69, 89, 121, 124, 125, 126, 129, 169, 187, 224, 225, 232, 234, 256, 257, 258, 288, 293, 294, 295, 298, 299, 309, 320], "citi": [227, 230, 231, 237, 257], "ci\u2080": 97, "cjkc_": [225, 240], "cjme": [224, 234], "cl": [61, 63, 72, 73, 76, 139, 142, 143, 196, 216, 278, 287], "claim": [0, 2, 4, 25, 92, 123, 124, 125, 126, 165, 282, 287, 290, 309, 313, 320], "claim_0001": 298, "claim_0005": 298, "claim_0012": 298, "claim_0042": 298, "claim_0053": 298, "claim_extract": 297, "claim_extraction_guid": 297, "claim_id": 298, "claim_text": 298, "claim_typ": 299, "claimnam": [63, 92], "clamp": [19, 22, 53, 78, 117, 167, 182, 193, 202, 215, 216, 224, 229, 234, 238, 242, 246, 293], "clarifi": [55, 108, 121, 122, 226, 229, 238, 239], "clariti": [17, 23, 57, 59, 61, 79, 87, 97, 98, 165, 190, 220, 258, 318], "class": [14, 19, 24, 25, 27, 30, 31, 33, 35, 36, 37, 38, 39, 40, 44, 45, 52, 57, 59, 67, 73, 75, 77, 78, 81, 82, 84, 85, 86, 88, 92, 93, 94, 95, 98, 100, 102, 105, 106, 114, 115, 117, 118, 119, 120, 125, 127, 131, 132, 134, 140, 141, 142, 143, 144, 151, 155, 193, 196, 199, 201, 204, 205, 209, 210, 211, 214, 216, 218, 220, 222, 224, 226, 227, 231, 232, 233, 234, 239, 249, 253, 254, 257, 262, 269, 275, 276, 277, 279, 282, 283, 289, 290, 298, 299, 301, 302, 310, 313, 318, 320, 321], "class_avail": 117, "class_elem": 39, "class_nam": 61, "classa": 24, "classb": 24, "classdef": 297, "classic": [1, 2, 7, 9, 20, 22, 30, 31, 35, 36, 37, 38, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 62, 63, 64, 68, 69, 71, 72, 73, 77, 79, 81, 82, 83, 84, 85, 86, 87, 92, 97, 98, 100, 101, 105, 106, 113, 114, 115, 117, 120, 121, 122, 126, 127, 129, 130, 131, 133, 134, 135, 136, 146, 147, 149, 150, 151, 152, 159, 160, 161, 162, 165, 167, 170, 171, 177, 178, 181, 189, 192, 193, 198, 199, 200, 202, 204, 208, 215, 216, 217, 218, 222, 223, 232, 233, 235, 242, 243, 244, 248, 256, 258, 259, 265, 272, 273, 274, 276, 277, 282, 283, 284, 288, 290, 293, 294, 296, 300, 301, 303, 308, 309, 310, 316, 317, 320, 322], "classic_smc": [2, 9, 38, 39, 49, 51, 52, 56, 65, 67, 78, 79, 82, 100, 103, 105, 115, 116, 117, 122, 124, 125, 126, 169, 191, 195, 210, 222, 223, 224, 226, 227, 229, 231, 233, 234, 235, 238, 239, 275, 276, 277, 287, 290, 294, 317], "classical_adapt": [49, 51, 72, 98, 100, 101, 103, 105, 106, 109, 273, 275, 276], "classical_bound": [20, 106, 275], "classical_ci": 320, "classical_config": [38, 51, 56, 72, 80, 98, 100, 101, 103, 105, 106, 109, 114, 273, 275, 276, 279], "classical_control": [151, 273, 275, 276], "classical_data": 313, "classical_factori": [275, 276, 280], "classical_gain": [49, 67, 98, 101, 208, 242, 253, 280], "classical_high_mass": 166, "classical_high_r": 253, "classical_info": 51, "classical_opt": 276, "classical_param": [98, 103, 105], "classical_result": [275, 276, 280], "classical_robust": 169, "classical_smc": [7, 19, 20, 21, 22, 28, 30, 34, 38, 40, 42, 50, 51, 52, 53, 55, 56, 61, 63, 65, 67, 73, 75, 76, 78, 82, 88, 91, 92, 93, 98, 100, 101, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 146, 147, 148, 149, 150, 151, 154, 156, 158, 159, 164, 165, 166, 167, 169, 170, 171, 177, 178, 182, 185, 189, 193, 197, 201, 202, 203, 215, 216, 242, 244, 249, 250, 251, 253, 254, 257, 265, 266, 273, 275, 276, 277, 278, 279, 283, 285, 290, 291, 297, 298, 301, 303, 304, 320, 321], "classical_smc_bound": [76, 249, 251], "classical_smc_config": 321, "classical_smc_deprec": 98, "classical_smc_dip": 113, "classical_smc_ful": 124, "classical_smc_gain": 76, "classical_smc_optim": 253, "classical_smc_structur": 294, "classical_smc_technical_guid": [30, 78, 202], "classical_smc_v2": 253, "classical_sta": 98, "classical_sub": [273, 275, 276], "classicalperf": 259, "classicalsmc": [9, 10, 17, 35, 41, 51, 56, 63, 67, 76, 80, 82, 83, 84, 86, 93, 97, 98, 125, 132, 164, 193, 194, 209, 210, 216, 222, 229, 233, 238, 250, 258, 261, 266, 283, 290, 294, 313, 317], "classicalsmcconfig": [17, 38, 50, 51, 72, 73, 80, 98, 100, 101, 105, 107, 109, 114, 116, 131, 132, 192, 199, 204, 216, 251, 273, 276, 277], "classicalsmcconfigmapp": 63, "classicalsmcoutput": [78, 82], "classicalsmcparamet": 109, "classicctrl": 317, "classif": [36, 39, 40, 73, 77, 78, 81, 84, 85, 86, 93, 119, 122, 173, 191, 197, 205, 207, 209, 218, 243, 245, 252, 274, 300, 310, 321], "classifi": 232, "classlist": 140, "classmethod": [16, 17, 61, 63, 76, 188, 196, 278], "classnam": [25, 267, 269, 271], "claud": [3, 8, 11, 12, 14, 20, 24, 27, 28, 29, 30, 31, 57, 59, 71, 120, 121, 122, 123, 124, 125, 147, 152, 153, 154, 155, 157, 165, 190, 255, 258, 268, 269, 282, 283, 284, 323], "claude_tokens_left": 70, "claudecod": 70, "claus": [2, 8, 15, 71, 268, 270], "clean": [13, 17, 24, 26, 31, 32, 63, 70, 71, 82, 90, 92, 98, 100, 103, 107, 114, 116, 117, 127, 132, 136, 142, 143, 148, 151, 159, 220, 242, 245, 250, 254, 275, 297, 300, 301, 320, 321], "cleancss": 142, "cleaned_config": 117, "cleaner": [25, 145], "cleanli": [70, 121], "cleanup": [17, 24, 25, 31, 50, 55, 63, 71, 77, 78, 94, 98, 103, 110, 117, 127, 193, 242, 254, 259], "cleanup_blue_environ": 98, "cleanup_cach": 98, "cleanup_callback": 254, "cleanup_green": 98, "cleanup_old_log": 254, "clear": [0, 11, 12, 13, 17, 19, 21, 25, 26, 27, 28, 29, 31, 41, 51, 58, 59, 63, 65, 71, 79, 81, 90, 98, 102, 106, 111, 115, 117, 120, 125, 127, 137, 138, 142, 143, 144, 145, 148, 153, 154, 155, 159, 166, 167, 169, 170, 190, 194, 199, 210, 211, 220, 242, 243, 248, 265, 266, 275, 297, 315], "clear_cach": [117, 248], "clearanc": 73, "clearcach": 31, "clearcodeblockst": [142, 144, 145], "clearli": [7, 19, 27, 67, 121, 125, 145, 221, 291], "clerc": [2, 53, 58, 88, 123, 162, 199, 209, 245, 247, 251, 293], "clerc2002particl": [2, 257], "clever": 161, "cli": [1, 17, 19, 22, 23, 36, 63, 67, 127, 128, 129, 130, 142, 146, 164, 170, 183, 199, 203, 222, 233, 244, 250, 260, 283, 284, 316, 317], "cli_result": 208, "click": [26, 27, 31, 64, 90, 141, 143, 144, 145, 152, 153, 155, 156, 157, 163, 170, 262, 263, 264, 265, 267, 268], "clickspark": [267, 268], "client": [1, 8, 15, 17, 22, 27, 28, 31, 40, 52, 63, 64, 73, 91, 92, 127, 170, 185, 222, 223, 224, 233, 234, 235, 267, 269, 300], "client_cmd": 177, "client_env": 177, "client_proc": 177, "cliff": 205, "clip": [35, 37, 40, 51, 61, 62, 72, 76, 77, 78, 79, 81, 84, 85, 86, 98, 101, 118, 119, 125, 132, 192, 193, 196, 197, 199, 202, 205, 215, 224, 226, 227, 231, 232, 234, 239, 248, 277, 287, 291], "clipboard": [29, 137, 145], "clock": [61, 92, 174, 202, 290], "clockwis": [164, 198, 225, 240], "clone": [22, 23, 31, 90, 92, 117, 126, 127, 320], "close": [9, 10, 17, 25, 26, 30, 51, 53, 65, 67, 73, 75, 82, 93, 98, 111, 112, 113, 114, 145, 163, 171, 177, 191, 195, 199, 213, 222, 223, 226, 232, 233, 235, 239, 248, 249, 251, 279, 287, 291, 293, 299], "closer": [77, 86, 195], "closest": 115, "cloud": [11, 36, 92, 95, 189, 218, 242, 250, 262, 263, 317], "clouddeploy": 317, "cloudflar": [141, 144], "cloudfront": 144, "clpso": [201, 202], "clue": 299, "cluster": [91, 162, 249, 250, 317], "cluster_config": 63, "clusterip": 92, "clutter": 145, "cm": [201, 265], "cma": [162, 202], "cmap": [171, 201], "cmd": [39, 63, 90, 91, 92, 144, 145, 150, 155, 169, 170, 177, 178, 253], "cn": 146, "co": [24, 39, 61, 70, 86, 92, 134, 135, 152, 161, 164, 170, 193, 197, 198, 200, 209, 220, 221, 225, 227, 231, 240, 246, 258, 282, 283, 284, 293, 294, 295, 296, 323], "coars": [118, 133, 135, 170, 171, 184, 248], "coarse_config": 248, "coarse_factori": 248, "coarse_gain": 133, "coarse_tun": 248, "coarser": [86, 150], "code": [1, 2, 3, 4, 7, 10, 13, 15, 19, 22, 24, 25, 26, 28, 30, 33, 35, 36, 39, 41, 44, 45, 50, 52, 53, 58, 65, 67, 70, 74, 75, 77, 78, 79, 80, 82, 83, 85, 86, 87, 89, 90, 92, 93, 95, 98, 107, 108, 115, 116, 117, 118, 122, 123, 124, 127, 128, 129, 135, 138, 140, 147, 148, 151, 152, 156, 157, 164, 165, 168, 169, 170, 182, 189, 190, 191, 193, 199, 203, 218, 221, 222, 223, 224, 226, 230, 232, 233, 234, 235, 237, 239, 242, 243, 244, 248, 252, 254, 255, 256, 257, 259, 266, 268, 270, 271, 274, 282, 283, 284, 290, 291, 296, 299, 301, 310, 315, 317, 320, 323], "code_claim": 298, "code_claim_extractor": 4, "code_collapse_validation_report": [137, 139, 143], "code_documentation_index": 317, "code_extractor": 297, "code_paths_execut": 37, "code_qu": [40, 301], "code_quality_static_analyz": 71, "code_review_autom": 302, "codebas": [44, 52, 55, 69, 94, 98, 107, 199, 270, 296], "codeblockst": 141, "codecollaps": [141, 142, 144], "codecov": [39, 151, 282, 283, 284], "codeown": [1, 89, 188], "coeff": [35, 193, 291, 308], "coeff_diff": [247, 252], "coeffici": [19, 22, 45, 51, 52, 55, 58, 73, 74, 75, 76, 81, 85, 97, 98, 103, 105, 109, 113, 125, 131, 132, 133, 134, 135, 136, 148, 151, 163, 167, 169, 170, 172, 181, 182, 183, 193, 194, 196, 198, 200, 202, 204, 205, 208, 214, 216, 220, 221, 222, 223, 224, 225, 226, 230, 232, 233, 234, 235, 237, 239, 240, 242, 246, 247, 248, 253, 258, 261, 272, 273, 275, 276, 279, 280, 284, 289, 290, 291, 293, 309, 313], "coefficient_of_vari": 310, "coefficient_vari": 248, "coello": [123, 202, 291], "coetse": [2, 123], "coexist": 61, "cognit": [19, 52, 58, 65, 67, 72, 73, 104, 107, 112, 123, 124, 125, 131, 133, 148, 158, 167, 182, 193, 201, 202, 214, 216, 222, 223, 224, 230, 232, 233, 234, 235, 237, 246, 247, 251, 253, 254, 258, 291, 293, 308, 309, 321], "cognitive_coeff": [65, 72, 291, 318], "cognitive_coeffici": 208, "cognitive_param": 113, "cognitive_paramet": 208, "cognitive_social_bal": 247, "cognitive_term": 215, "cognitive_weight": [214, 250, 253, 254], "cohen": [127, 169, 178, 193, 274, 308, 309, 310, 320], "cohen_d": 321, "cohens_d": [149, 169, 178, 274, 310, 320], "cohens_d_group_0": 310, "coincident": 114, "cointegr": 310, "col": 178, "cold": [84, 173], "colinearli": [225, 240], "collabor": [25, 29, 241, 259, 291], "collaps": [1, 8, 16, 27, 31, 65, 104, 129, 138, 140, 148, 162, 167, 188, 189, 215, 222, 233, 291, 293], "collapseal": 144, "collapsebtn": 143, "collapsedicon": [141, 142], "collect": [10, 17, 40, 59, 61, 63, 64, 67, 78, 81, 93, 98, 107, 114, 117, 124, 129, 136, 144, 162, 168, 190, 193, 202, 209, 211, 218, 222, 225, 232, 233, 240, 242, 243, 245, 251, 254, 255, 257, 259, 261, 266, 270, 274, 278, 280, 282, 283, 284, 285, 288, 291, 295, 297, 308], "collect_capacity_metr": 111, "collect_cycle_metr": 63, "collect_daily_metr": 98, "collect_metr": [93, 111], "collect_module_coverag": 255, "collect_performance_data": 321, "collect_performance_metr": 93, "collett": 8, "collette2013h5pi": 8, "collis": [73, 122, 140], "colon": 297, "color": [1, 28, 30, 31, 52, 61, 67, 77, 81, 86, 90, 118, 139, 140, 142, 144, 147, 149, 156, 157, 159, 164, 165, 166, 169, 171, 178, 254, 267, 318, 321], "colorbar": [171, 201], "colour": 232, "column": [28, 67, 84, 169, 178, 266, 267, 313], "column_stack": [171, 201], "com": [2, 8, 10, 15, 24, 31, 37, 44, 70, 74, 90, 91, 92, 121, 122, 123, 124, 126, 129, 140, 141, 144, 146, 161, 189, 216, 220, 221, 222, 224, 225, 228, 232, 233, 234, 236, 240, 254, 258, 268, 272, 282, 283, 284, 315, 320, 323], "combin": [10, 15, 17, 19, 28, 30, 36, 40, 49, 50, 53, 55, 57, 58, 61, 65, 67, 73, 76, 77, 80, 82, 83, 98, 99, 103, 104, 107, 112, 132, 146, 148, 150, 154, 156, 163, 169, 170, 171, 183, 189, 193, 197, 199, 200, 201, 205, 206, 213, 215, 216, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 246, 248, 249, 250, 253, 261, 267, 271, 272, 276, 278, 287, 291, 294, 309, 313, 321], "combinatori": 162, "combine_stage_result": 104, "combine_weight": [53, 216, 246, 250, 253], "combined_bibliographi": 122, "combined_cost": [61, 167], "combineweight": 9, "come": [145, 153, 154, 167, 168, 170, 200, 224, 226, 234, 239, 270, 308, 310], "comfort": 84, "comm_config": 277, "comma": [30, 45, 72, 265, 318], "command": [10, 12, 19, 21, 22, 24, 26, 31, 39, 45, 62, 65, 67, 76, 87, 91, 92, 93, 108, 118, 122, 123, 127, 129, 146, 169, 185, 190, 199, 223, 224, 232, 234, 235, 243, 244, 250, 253, 254, 261, 265, 270, 306, 316, 317, 322], "commandpacket": 177, "comment": [19, 31, 32, 40, 55, 57, 59, 82, 140, 141, 142, 169, 170, 201, 266, 297, 302, 318], "commerci": [2, 15, 259, 295], "commiss": 177, "commit": [7, 16, 21, 24, 26, 29, 30, 31, 39, 64, 81, 90, 91, 93, 95, 138, 142, 146, 147, 148, 164, 165, 170, 182, 188, 194, 207, 242, 250, 253, 254, 301, 302, 315, 320, 323], "commitmessag": 70, "common": [13, 17, 38, 40, 49, 50, 51, 52, 59, 64, 78, 80, 81, 86, 90, 95, 101, 106, 107, 108, 112, 119, 121, 127, 128, 129, 137, 138, 145, 146, 149, 150, 164, 165, 166, 167, 172, 192, 195, 204, 208, 215, 222, 224, 226, 230, 232, 233, 234, 237, 239, 247, 258, 262, 266, 268, 270, 271, 273, 275, 279, 291, 298, 302, 305, 309], "common_config": 117, "commonli": 232, "commun": [2, 8, 15, 17, 22, 23, 31, 62, 63, 67, 73, 93, 119, 138, 144, 170, 173, 174, 175, 180, 185, 222, 223, 224, 226, 230, 233, 234, 235, 237, 239, 245, 246, 253, 256, 259, 277, 283, 313], "communication_config": 277, "communication_delai": 253, "communication_failur": 277, "communication_interfac": 101, "communication_lat": 131, "communication_safeti": 261, "comp": 254, "comp_kei": 313, "comp_nam": 254, "comp_result": 313, "comp_scor": 254, "comp_tim": 310, "compact": [225, 240, 246], "compani": [254, 259], "companion": 178, "compar": [19, 20, 22, 27, 34, 35, 40, 49, 51, 53, 56, 58, 65, 66, 67, 68, 72, 73, 75, 78, 81, 82, 84, 85, 93, 95, 97, 112, 119, 121, 124, 126, 127, 128, 129, 130, 134, 135, 136, 142, 147, 148, 150, 151, 156, 157, 159, 162, 163, 164, 166, 167, 168, 178, 182, 183, 193, 196, 197, 199, 206, 216, 222, 223, 224, 229, 230, 232, 233, 234, 235, 237, 238, 244, 248, 253, 255, 259, 260, 265, 274, 276, 277, 282, 283, 285, 290, 291, 296, 298, 303, 306, 308, 309, 310, 316, 320, 321, 323], "comparative_controller_studi": 248, "comparative_studi": 259, "compare_all_control": 321, "compare_all_optim": 167, "compare_chatt": 124, "compare_control": [135, 182, 183, 253, 321], "compare_controller_perform": [274, 277], "compare_controllers_statist": 136, "compare_gain": 121, "compare_group": 310, "compare_optimization_result": 253, "compare_pso_result": 124, "compare_run": 320, "compare_staging_to_product": 93, "compare_to": 210, "comparison": [11, 22, 27, 42, 51, 52, 56, 58, 59, 66, 67, 77, 78, 80, 81, 82, 86, 93, 95, 104, 107, 112, 119, 120, 127, 128, 129, 146, 147, 150, 151, 153, 160, 164, 165, 167, 168, 170, 171, 172, 178, 179, 181, 182, 188, 190, 192, 202, 216, 217, 222, 223, 229, 233, 235, 237, 238, 246, 248, 252, 253, 254, 259, 260, 265, 274, 276, 277, 282, 283, 284, 285, 290, 295, 300, 304, 305, 308, 311, 314, 315, 320, 321], "comparison_": 321, "comparison_analysi": 112, "comparison_data": 277, "comparison_report": 321, "comparison_result": [112, 280, 321], "compat": [1, 2, 8, 9, 10, 15, 16, 17, 23, 25, 27, 29, 34, 36, 37, 39, 40, 45, 49, 52, 55, 56, 58, 59, 67, 72, 79, 82, 86, 88, 93, 98, 100, 101, 103, 105, 106, 107, 108, 113, 114, 115, 117, 119, 120, 122, 127, 138, 139, 143, 145, 146, 153, 154, 185, 187, 188, 192, 196, 213, 232, 242, 243, 244, 245, 248, 249, 250, 252, 273, 277, 282, 300, 320, 323], "compatibility_matrix": [9, 278, 321], "compatible_pl": 278, "compens": [26, 35, 62, 81, 82, 84, 85, 103, 124, 146, 166, 174, 180, 185, 199, 222, 224, 226, 230, 233, 234, 237, 239], "compet": [156, 250, 259, 322], "competit": 205, "compil": [2, 15, 17, 27, 38, 53, 81, 91, 103, 135, 146, 153, 155, 171, 193, 198, 203, 217, 219, 225, 229, 238, 240, 242, 248, 250, 297, 298, 301, 316, 317], "complement": [31, 118, 127, 222, 233], "complementar": 30, "complementari": [141, 232, 297, 310], "complet": [1, 2, 8, 9, 10, 13, 15, 18, 19, 20, 21, 22, 23, 32, 34, 37, 38, 39, 42, 46, 48, 49, 53, 54, 60, 64, 65, 70, 71, 73, 75, 76, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 101, 105, 106, 109, 114, 115, 116, 117, 118, 119, 120, 122, 124, 127, 129, 134, 137, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 160, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 187, 189, 190, 197, 199, 200, 201, 202, 203, 209, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 229, 232, 233, 237, 238, 240, 241, 242, 244, 245, 247, 248, 249, 253, 257, 261, 262, 265, 266, 267, 269, 276, 277, 281, 282, 283, 286, 287, 288, 289, 290, 291, 296, 298, 299, 302, 304, 306, 311, 316, 317, 319, 320, 322, 323], "complete_controller_comparison_matrix": 36, "complete_integration_guid": 321, "complete_optimization_result": 321, "complete_pso_optimization_exampl": 98, "complete_research_workflow": 277, "completed_count": 98, "completion_percentag": 255, "complex": [10, 11, 14, 17, 19, 25, 28, 29, 30, 31, 32, 33, 36, 50, 52, 56, 58, 59, 65, 71, 73, 75, 77, 78, 80, 81, 82, 85, 86, 93, 98, 102, 106, 117, 120, 127, 132, 133, 146, 147, 157, 158, 161, 162, 163, 166, 167, 177, 181, 184, 195, 196, 198, 199, 200, 201, 202, 203, 205, 214, 216, 220, 224, 226, 232, 234, 239, 242, 246, 248, 250, 254, 265, 274, 275, 280, 287, 293, 294, 298, 300, 301, 303, 309, 310, 313, 317], "complex_chang": 98, "complex_dip_config": 101, "complex_method": 297, "complex_mpc_control": 61, "complex_param": 98, "compli": 70, "complianc": [2, 13, 17, 23, 30, 31, 36, 38, 55, 56, 67, 68, 73, 88, 93, 103, 119, 175, 176, 188, 193, 194, 218, 228, 236, 241, 242, 244, 245, 249, 250, 255, 301], "compliance_deployment_approv": 255, "compliance_exit": 255, "compliance_percentag": 255, "compliance_pid": 255, "compliance_statu": 255, "compliancevalidationresult": 255, "compliant": [1, 36, 71, 244, 247, 249], "compliant_fil": 255, "complic": [81, 205, 222, 233], "compon": [8, 11, 17, 19, 22, 30, 31, 34, 35, 38, 39, 40, 51, 52, 53, 58, 61, 62, 71, 72, 75, 76, 77, 78, 81, 85, 86, 87, 88, 90, 92, 95, 97, 98, 99, 103, 104, 114, 119, 122, 123, 124, 125, 126, 149, 151, 161, 162, 163, 165, 167, 168, 172, 185, 192, 193, 198, 199, 200, 202, 205, 209, 215, 216, 217, 220, 223, 224, 226, 227, 230, 231, 232, 234, 235, 237, 239, 241, 243, 244, 246, 252, 254, 256, 259, 265, 266, 274, 275, 277, 279, 282, 283, 287, 290, 293, 294, 295, 300, 301, 302, 306, 317, 320, 321], "component_class": 207, "component_health": [254, 321], "component_metr": 39, "component_nam": [17, 209, 254], "component_pattern": 39, "component_scor": 301, "component_statu": 254, "component_status": 254, "componenthealth": 17, "componentnam": [268, 269, 271], "components_index": [267, 269, 271], "compos": [17, 92, 232], "composit": [17, 65, 113, 143, 194, 201, 205, 220, 246, 249, 279, 290, 294], "comprehens": [1, 12, 14, 24, 27, 28, 29, 30, 31, 33, 36, 42, 52, 56, 57, 64, 82, 87, 95, 127, 137, 138, 139, 143, 155, 164, 165, 189, 199, 208, 232, 308, 309, 322], "comprehensive_comparison": 321, "comprehensive_diagnost": 280, "comprehensive_health_check": 98, "comprehensive_report": [75, 255], "comprehensive_safety_test": 93, "comprehensive_system_diagram": 13, "comprehensive_validation_workflow": 280, "comprehensiveconfigurationexampl": 72, "comprehensiveintegrationtest": 321, "comprehensivemathematicalvalid": 209, "comprehensivemathematicalvalidationresult": 209, "comprehensivereport": 255, "comprehensivetestreport": 75, "comprehensivetestresult": 75, "compress": [13, 61, 63, 92, 98, 174, 254], "compressed_nam": 254, "compressionseri": 9, "compris": [62, 226, 227, 231, 232, 239], "compromis": [99, 190, 230, 232, 237, 290], "comput": [2, 10, 12, 15, 17, 19, 26, 27, 29, 30, 35, 37, 38, 39, 40, 41, 42, 44, 45, 50, 52, 53, 54, 55, 57, 58, 59, 62, 64, 66, 67, 69, 72, 73, 75, 76, 79, 81, 82, 83, 85, 86, 87, 92, 93, 94, 97, 98, 103, 105, 107, 114, 117, 118, 120, 123, 124, 125, 127, 129, 132, 134, 135, 146, 148, 149, 150, 151, 154, 158, 160, 161, 162, 164, 165, 167, 169, 170, 171, 172, 174, 177, 178, 179, 181, 182, 183, 184, 185, 192, 196, 199, 201, 202, 205, 209, 212, 213, 214, 217, 218, 219, 221, 222, 223, 224, 227, 231, 232, 233, 234, 235, 242, 245, 246, 247, 248, 253, 254, 255, 256, 258, 259, 261, 265, 266, 274, 275, 277, 280, 282, 283, 285, 286, 293, 294, 295, 298, 300, 301, 306, 313, 316, 317, 318, 320, 321], "computation": [72, 222, 229, 233, 238, 287], "computation_avg": 65, "computation_pass": 65, "computation_result": 75, "computation_tim": [37, 51, 63, 76, 81, 98, 114, 209, 278, 310], "computational_analysi": 310, "computational_complex": 294, "computational_cost": [36, 247], "computational_effici": [65, 67], "computational_perform": 259, "computational_resourc": 42, "computational_trend": 63, "computationerror": 63, "compute_adaptive_threshold": 119, "compute_all_metr": 165, "compute_batch": 92, "compute_boundary_lay": 195, "compute_centrifugal_coriolis_vector_numba": [225, 240], "compute_chattering_index": [82, 83, 166, 248], "compute_cohens_d": 310, "compute_confidence_interv": [136, 274], "compute_constraint_penalti": 249, "compute_control": [9, 10, 12, 17, 20, 22, 36, 37, 38, 40, 41, 50, 52, 55, 56, 59, 61, 63, 65, 67, 76, 77, 78, 82, 83, 84, 85, 86, 92, 93, 94, 97, 98, 103, 105, 107, 108, 113, 114, 115, 117, 118, 119, 125, 127, 132, 136, 150, 151, 193, 199, 208, 210, 211, 216, 221, 224, 226, 232, 234, 239, 242, 244, 248, 250, 254, 274, 276, 277, 282, 283, 284, 290, 301, 302, 313, 320, 321], "compute_control_adapt": 197, "compute_control_batch": 17, "compute_control_class": 197, "compute_control_condit": 279, "compute_control_effort": 136, "compute_control_energi": [81, 112], "compute_control_hybrid": 197, "compute_control_law": 79, "compute_control_performance_metr": [107, 112], "compute_control_returns_non": 300, "compute_control_singl": 63, "compute_control_sta": 197, "compute_controller_gain_matrix": 279, "compute_convergence_bound": 279, "compute_corioli": [193, 203], "compute_cost": [148, 203], "compute_costs_batch": 193, "compute_crowding_dist": 291, "compute_custom_perform": 253, "compute_deriv": [150, 199, 200, 204], "compute_divers": [202, 214], "compute_dynam": [35, 44, 52, 59, 101, 113, 114, 134, 135, 196, 219, 220, 278], "compute_dynamics_rh": 220, "compute_dynamics_test": 101, "compute_effect_size_cohens_d": 313, "compute_energi": 170, "compute_energy_analysi": 220, "compute_equivalent_control": 168, "compute_fit": [104, 107, 201], "compute_gain_penalti": 113, "compute_gain_sensitivity_matrix": 274, "compute_gradi": [79, 193], "compute_grav": [193, 203], "compute_inertia_matrix": 213, "compute_inertia_numba": [225, 240], "compute_integral_squared_error": 248, "compute_integral_time_absolute_error": 248, "compute_is": [82, 83, 112, 136, 149], "compute_ita": [136, 149], "compute_jacobian": 101, "compute_linear": 220, "compute_linearized_dynam": 220, "compute_lyapunov_deriv": [195, 274], "compute_lyapunov_funct": [261, 274], "compute_mass_matrix": [193, 198, 203], "compute_matrices_numba": [225, 227, 231, 240], "compute_mean": 149, "compute_metr": [136, 320], "compute_multi_objective_fit": [98, 104], "compute_overshoot": [53, 112, 136, 171, 248], "compute_pairwise_ttest": 67, "compute_pareto_divers": 248, "compute_pareto_front": [104, 112], "compute_performance_metr": [51, 165], "compute_physics_matric": [81, 287], "compute_reaching_law": 298, "compute_regular": 220, "compute_residu": 119, "compute_rm": [82, 83], "compute_robust_fit": 104, "compute_robustness_margin": 279, "compute_rugged": 201, "compute_settle_tim": 53, "compute_settling_tim": [61, 136, 171, 248], "compute_settling_time_stat": 67, "compute_simplified_dynamics_numba": 220, "compute_sliding_surfac": [75, 77, 79, 97, 125, 168, 191, 194, 209, 255, 258, 283, 294], "compute_sliding_surface_batch": 17, "compute_sliding_surface_numba": 63, "compute_stability_measur": 81, "compute_stability_metr": 220, "compute_statist": 178, "compute_structured_singular_valu": 279, "compute_surface_deriv": [75, 209, 255], "compute_surface_gradi": 168, "compute_switching_control": 199, "compute_switching_funct": 199, "compute_theoretical_far": 119, "compute_tim": [98, 101], "compute_total_energi": [219, 220, 283], "compute_tracking_metr": 81, "compute_trajectory_differ": 283, "compute_validated_fit": 112, "compute_validation_metr": 98, "computed_norm": 119, "con": [53, 84, 215, 290], "concaten": [24, 25, 32, 67, 171, 193, 203, 220, 297, 318], "concentr": [121, 122, 209, 227, 231], "concept": [13, 17, 30, 31, 78, 86, 95, 129, 146, 156, 160, 166, 167, 170, 171, 177, 182, 199, 202, 205, 222, 232, 233, 261, 266, 294, 310], "conceptu": [14, 95, 127, 165], "concern": [3, 15, 17, 57, 63, 80, 81, 107, 121, 122, 126, 127, 166, 192, 197, 199, 220, 242, 250, 275, 283, 298, 313], "concert": 52, "concis": [17, 126, 137, 138, 226, 239], "conclus": [19, 30, 36, 38, 44, 55, 71, 75, 77, 78, 82, 85, 86, 92, 98, 107, 122, 124, 125, 147, 169, 177, 191, 194, 203, 205, 209, 213, 218, 228, 229, 236, 238, 241, 242, 244, 247, 250, 251, 253, 255, 290, 293, 294, 297, 299, 300, 308, 309, 318, 320], "concret": [12, 51, 52, 67, 222, 233, 266], "concurr": [16, 38, 50, 51, 53, 56, 65, 67, 92, 98, 100, 104, 105, 106, 108, 114, 115, 117, 133, 188, 218, 222, 233, 248, 253, 254, 280, 284], "concurrent_cr": 98, "cond": [35, 78, 81, 196, 198, 205, 209, 213, 220, 226, 239, 290], "cond_num": [213, 220, 290], "cond_numb": [78, 287], "cond_threshold": 290, "conda": [254, 320], "condit": [5, 12, 15, 16, 19, 22, 30, 34, 37, 39, 40, 45, 48, 50, 51, 52, 55, 56, 57, 58, 59, 61, 63, 65, 68, 72, 73, 75, 76, 77, 81, 82, 83, 84, 85, 86, 90, 93, 97, 98, 100, 103, 106, 112, 114, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 143, 146, 147, 150, 152, 160, 161, 162, 163, 166, 167, 176, 178, 179, 181, 182, 192, 193, 195, 196, 197, 198, 199, 200, 203, 205, 208, 209, 212, 216, 217, 219, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 242, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 258, 261, 265, 273, 274, 275, 276, 277, 282, 283, 286, 287, 288, 293, 294, 298, 299, 301, 308, 311, 317, 320, 321], "condition": [61, 216], "condition1": [287, 291], "condition1_k1_sufficiently_larg": 287, "condition2": [287, 291], "condition2_k2_sufficiently_larg": 287, "condition3": 287, "condition3_k1_greater_k2": 287, "condition_numb": [61, 75, 81, 209, 220, 279, 287, 291], "condition_threshold": 35, "conditional_approv": 255, "conditional_approval_with_monitor": 255, "conditional_pass": 126, "conditional_value_at_risk": [310, 313], "conditioning_accept": 75, "conditioning_analysi": [75, 291], "conditioning_histori": 35, "conditioning_issu": 75, "conditioning_qu": [75, 209], "conditioning_result": [75, 209], "conditioning_threshold": 209, "conditioningvalidationresult": 209, "conduct": [169, 242, 261, 320], "conductor": 190, "conf": [11, 13, 16, 24, 27, 29, 33, 53, 89, 92, 138, 139, 141, 142, 144, 159, 187, 188, 226, 230, 237, 239], "conf_enhanc": 13, "conf_py_path": 315, "confer": [8, 13, 122, 123, 169, 202, 222, 227, 231, 233, 256, 257, 259, 290, 291, 298, 320], "confid": [12, 26, 40, 44, 45, 53, 56, 58, 65, 67, 68, 75, 93, 95, 97, 118, 120, 127, 129, 136, 147, 148, 162, 169, 171, 178, 189, 190, 208, 209, 216, 232, 244, 246, 255, 259, 275, 282, 283, 284, 298, 300, 308, 309, 312, 320], "confidence_interv": [9, 149, 169, 274, 283, 310, 313, 321], "confidence_interval_95": 248, "confidence_level": [53, 88, 149, 208, 255, 313], "confidence_scor": 255, "config": [8, 9, 12, 15, 16, 19, 20, 21, 22, 34, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 52, 55, 56, 59, 61, 62, 65, 67, 68, 70, 71, 74, 76, 77, 78, 82, 83, 84, 85, 86, 88, 90, 91, 92, 93, 98, 99, 100, 102, 103, 106, 108, 114, 115, 117, 118, 119, 120, 121, 124, 127, 128, 129, 132, 133, 135, 136, 138, 141, 142, 143, 147, 148, 150, 151, 165, 166, 167, 170, 171, 177, 182, 185, 188, 190, 196, 199, 201, 203, 213, 216, 217, 218, 219, 220, 221, 222, 223, 227, 231, 232, 233, 235, 242, 254, 255, 265, 266, 269, 276, 277, 278, 279, 280, 283, 285, 287, 290, 291, 297, 302, 309, 310, 313, 317, 318, 320, 321, 323], "config_": [131, 170, 254], "config_backup": [102, 254], "config_baselin": 131, "config_batch": 117, "config_challeng": 131, "config_change_handl": 72, "config_class": [17, 38, 49, 50, 52, 56, 80, 98, 100, 114, 116, 117, 207, 251, 273, 277], "config_classes_avail": 100, "config_compat": 9, "config_compli": 255, "config_consist": 75, "config_data": [72, 73, 98, 102, 117], "config_develop": 73, "config_dict": [72, 104, 107, 112, 131, 196, 220], "config_dir": 254, "config_emergency_": 254, "config_fil": [72, 73, 108, 117, 131, 254, 321], "config_file_path": [98, 102], "config_gain": [109, 117], "config_hash": 277, "config_health": 247, "config_high_perform": 170, "config_hil": 131, "config_kei": 117, "config_larg": 199, "config_manag": [72, 254], "config_map": 254, "config_migr": 108, "config_minim": 73, "config_mock": 114, "config_modifi": 320, "config_new": 108, "config_obj": [117, 274], "config_object": 116, "config_old": 98, "config_onli": 49, "config_overrid": 131, "config_param": [17, 49, 51, 56, 80, 100, 102, 105, 115, 116, 280], "config_path": [34, 51, 52, 72, 92, 98, 102, 104, 107, 117, 203, 216, 252, 254, 280], "config_pattern": 108, "config_product": 73, "config_provid": 117, "config_resili": 9, "config_result": 208, "config_schema": 247, "config_smal": 199, "config_test": 73, "config_typ": 254, "config_v1_0": 73, "config_valid": [34, 283], "config_validation_specif": 194, "config_vari": 320, "config_yaml": 72, "configclass": [49, 52], "configdict": [17, 51, 52, 105, 116], "configfil": 317, "configloadresult": 252, "configmanag": 72, "configmap": [63, 92], "configmetadata": 131, "configmgmt": 317, "configmgr": 316, "configmigrationresult": 102, "configmodel": 63, "confignamespac": 72, "configschema": [9, 19, 34, 53, 57, 72, 76, 127, 216], "configur": [1, 5, 6, 7, 9, 10, 12, 13, 14, 16, 19, 20, 22, 26, 32, 35, 36, 38, 39, 40, 43, 45, 50, 55, 57, 58, 59, 62, 64, 65, 67, 70, 74, 75, 76, 78, 79, 82, 83, 87, 88, 93, 103, 104, 105, 106, 110, 113, 114, 115, 118, 124, 127, 128, 129, 132, 133, 136, 137, 138, 142, 143, 145, 146, 148, 150, 151, 154, 156, 159, 161, 164, 167, 169, 171, 173, 174, 175, 178, 179, 180, 181, 182, 187, 188, 189, 190, 192, 195, 197, 199, 202, 205, 208, 214, 216, 217, 218, 219, 222, 230, 232, 233, 237, 241, 242, 243, 244, 249, 254, 255, 257, 261, 262, 263, 266, 267, 279, 282, 284, 285, 287, 291, 293, 295, 302, 306, 308, 309, 310, 316, 317, 318, 320, 321, 323], "configuration_chang": 247, "configuration_compli": 255, "configuration_cr": 117, "configuration_error": 252, "configuration_integration_document": [7, 72], "configuration_load": 252, "configuration_migration_mathematical_found": [98, 99], "configuration_repair": 252, "configuration_schema": 50, "configuration_schema_valid": [73, 243], "configuration_system_integr": 321, "configuration_valid": 254, "configuration_validation_work": 75, "configurationbridg": 63, "configurationerror": [63, 73, 107, 112, 170, 277], "configurationfactori": [20, 101, 108, 114], "configurationhotreload": 73, "configurationinterfac": 63, "configurationload": 252, "configurationmigr": 73, "configurationmigrationmanag": 72, "configurationmigrationutil": [98, 102], "configurationmonitor": 247, "configurationrecoveri": 254, "configurationtemplatemanag": 72, "configurationtestsuit": 73, "configurationvalid": [72, 254, 278], "configurationvalidationtestresult": 75, "configure_convergence_criteria": 280, "configvalueerror": [49, 50, 51, 56, 103, 117], "confin": [221, 226, 239], "confirm": [23, 24, 26, 31, 33, 35, 41, 67, 93, 94, 98, 107, 119, 122, 125, 126, 127, 146, 164, 190, 210, 225, 226, 230, 237, 239, 240, 245, 247, 251, 261, 265, 284, 290, 295, 320], "conflat": [3, 290], "conflict": [19, 25, 72, 73, 90, 98, 116, 125, 126, 141, 142, 144, 146, 193, 201, 218, 222, 233, 242, 249], "confluenc": [222, 233], "conform": [222, 233], "conftest": [22, 39, 127, 282, 284], "confus": [108, 117, 147, 258, 300], "congratul": [146, 164, 166, 167, 168, 169], "congress": 246, "conic": 84, "conjug": [78, 205], "connect": [29, 30, 31, 58, 64, 65, 90, 92, 93, 146, 153, 155, 185, 222, 223, 230, 233, 235, 237, 263, 288, 289, 317], "connectionst": 9, "consecut": [24, 25, 32, 118, 119, 120, 185, 222, 223, 233, 235, 246, 285, 290, 291, 292, 306], "consensu": 119, "consequ": [222, 223, 226, 233, 235, 239, 290, 300, 301], "conserv": [3, 39, 53, 65, 67, 72, 78, 82, 86, 98, 109, 112, 113, 118, 119, 165, 166, 170, 177, 183, 185, 197, 199, 201, 205, 209, 215, 216, 217, 222, 225, 226, 229, 233, 238, 239, 240, 247, 249, 253, 254, 257, 273, 275, 279, 282, 283, 284, 287, 295, 308, 309, 310, 317], "conservat": 166, "conservation_properti": 279, "conservation_qu": 209, "conservative_bound": 201, "conservative_classical_config": 72, "conservative_gain": 109, "consid": [14, 19, 23, 26, 32, 53, 55, 85, 102, 104, 111, 118, 119, 120, 124, 127, 142, 149, 150, 157, 162, 178, 185, 191, 195, 197, 199, 200, 206, 209, 213, 222, 224, 226, 232, 233, 234, 239, 246, 249, 254, 280, 290, 293, 294, 298, 299, 306, 308, 310], "consider": [84, 98, 105, 112, 118, 119, 127, 149, 161, 172, 179, 181, 193, 196, 199, 201, 205, 209, 242, 253, 265, 277, 293, 294, 295, 309], "consist": [4, 8, 11, 12, 13, 14, 17, 19, 22, 24, 25, 26, 28, 32, 38, 41, 51, 52, 56, 58, 59, 65, 67, 68, 71, 73, 75, 76, 81, 82, 84, 92, 94, 97, 98, 100, 107, 109, 117, 119, 122, 125, 126, 127, 134, 135, 143, 147, 154, 159, 161, 165, 167, 174, 185, 187, 188, 190, 192, 193, 196, 199, 203, 205, 208, 216, 220, 223, 224, 226, 227, 231, 232, 234, 235, 239, 242, 243, 250, 252, 253, 256, 257, 258, 259, 261, 266, 275, 277, 278, 279, 284, 288, 289, 290, 294, 299, 300, 301, 311, 313, 317, 318], "consistency_analysi": 75, "consistency_result": 75, "consistency_scenario": 75, "consistency_summari": 75, "consol": [31, 92, 140, 141, 142, 143, 144, 145, 153, 155, 156, 159, 214], "console_librari": 92, "consolid": [18, 24, 52, 95, 190, 255], "consolidate_quality_gate_result": 255, "consolidated_quality_gate_report": 255, "const": [30, 31, 140, 141, 142, 143, 267, 269, 271], "constant": [17, 18, 30, 45, 53, 61, 77, 78, 84, 85, 97, 98, 99, 103, 107, 112, 118, 119, 125, 140, 156, 158, 161, 162, 163, 166, 167, 183, 193, 195, 196, 197, 198, 199, 200, 205, 206, 208, 209, 216, 220, 226, 230, 232, 237, 239, 246, 249, 251, 273, 274, 275, 279, 284, 287, 295, 296, 298, 299, 310], "constantli": 84, "constitut": [45, 232], "constr": 73, "constrain": [36, 53, 57, 58, 84, 118, 119, 120, 126, 140, 148, 149, 161, 201, 205, 220, 222, 230, 232, 233, 237, 248, 254, 286, 287, 294, 298], "constrained_config": 280, "constrained_cost": [133, 148], "constrained_factori": 248, "constrained_fitness_funct": 248, "constrained_pso_optim": 248, "constraint": [8, 9, 10, 19, 26, 27, 36, 37, 38, 39, 45, 46, 49, 50, 52, 55, 56, 57, 58, 59, 60, 61, 65, 67, 72, 75, 76, 77, 82, 85, 87, 88, 93, 95, 98, 99, 100, 103, 105, 113, 114, 115, 119, 124, 126, 127, 131, 136, 148, 153, 156, 161, 162, 165, 166, 167, 172, 176, 179, 180, 181, 183, 189, 191, 192, 193, 196, 198, 199, 200, 202, 205, 208, 209, 215, 216, 217, 223, 224, 230, 234, 235, 237, 242, 243, 244, 246, 248, 251, 253, 254, 255, 261, 273, 274, 275, 278, 279, 280, 283, 287, 291, 293, 297, 304, 310, 311, 317, 321], "constraint_analysi": 75, "constraint_detail": 112, "constraint_handl": 247, "constraint_k1_gt_k2": 107, "constraint_margin": 75, "constraint_metr": 9, "constraint_satisfact": 252, "constraint_test_scenario": 75, "constraint_toler": 112, "constraint_typ": 75, "constraint_types_viol": 75, "constraint_viol": 75, "constraintcheck": 317, "constraints_satisfi": 75, "constrict": [52, 73, 88, 123, 193, 199, 209, 215, 245, 246, 251, 256, 258, 293], "constriction_factor": [291, 293], "constriction_pso": 293, "constriction_st": 291, "construct": [42, 45, 52, 53, 57, 65, 79, 86, 101, 102, 127, 152, 169, 199, 213, 220, 224, 225, 234, 240, 290, 299], "constructor": [17, 45, 55, 80, 206, 224, 234, 299], "consult": [13, 15, 119, 129], "consum": [149, 222, 223, 233, 235], "consumpt": [68, 128, 146, 149, 167, 183, 216, 230, 237, 283, 303], "cont": 156, "contact": [2, 93, 122, 144, 254], "contain": [9, 17, 19, 22, 25, 28, 29, 30, 33, 42, 45, 49, 52, 53, 58, 72, 76, 92, 98, 116, 119, 125, 127, 136, 137, 139, 140, 143, 144, 152, 189, 191, 196, 199, 200, 203, 205, 210, 216, 221, 222, 224, 227, 231, 232, 233, 234, 242, 256, 262, 268, 271, 277, 299, 300, 301, 313, 317], "container": [91, 95, 241], "container_id": 91, "container_nam": [63, 91, 92], "containerport": [63, 91, 92], "contamin": [118, 216], "contemporari": 256, "content": [2, 12, 13, 19, 24, 26, 28, 30, 31, 32, 33, 51, 52, 55, 57, 58, 59, 67, 70, 82, 83, 95, 98, 114, 115, 121, 122, 123, 124, 125, 126, 127, 137, 138, 140, 141, 144, 145, 152, 154, 165, 166, 188, 192, 194, 199, 209, 214, 219, 227, 231, 243, 255, 266, 267, 268, 269, 271, 277, 290, 307, 309, 312, 314, 318], "content_typ": 9, "contentedit": 27, "context": [2, 9, 14, 16, 17, 19, 24, 27, 30, 31, 33, 40, 56, 58, 63, 69, 82, 91, 92, 95, 104, 122, 125, 127, 130, 153, 155, 156, 159, 160, 192, 199, 208, 216, 217, 222, 224, 233, 234, 266, 282, 283, 286, 288, 300, 301, 310, 317], "contextlib": [17, 104], "contextmanag": [17, 104, 112], "continu": [22, 29, 30, 31, 36, 37, 40, 44, 49, 52, 58, 61, 62, 63, 64, 65, 67, 72, 73, 75, 78, 82, 86, 87, 88, 92, 93, 98, 99, 100, 103, 107, 109, 115, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 132, 136, 146, 151, 154, 156, 162, 163, 164, 168, 169, 173, 177, 178, 182, 183, 184, 190, 192, 193, 195, 196, 197, 199, 200, 202, 204, 205, 209, 210, 215, 218, 221, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 242, 243, 246, 250, 253, 254, 255, 273, 277, 284, 287, 290, 294, 297, 298, 301, 306, 310, 315, 317, 322], "contour": [1, 30, 156, 163, 316], "contourf": 171, "contract": [1, 5, 10, 38, 40, 53, 58, 61, 63, 67, 74, 79, 98, 192, 194, 242, 300, 301], "contracttest": 278, "contrari": 165, "contrast": [1, 30, 31, 144, 154, 156], "contribut": [0, 1, 2, 22, 32, 45, 53, 95, 98, 121, 129, 138, 189, 201, 216, 222, 223, 225, 232, 233, 235, 240, 255, 257, 259, 262, 263, 286, 293, 298, 299, 304, 310, 320], "contributing_factor": 255, "contributor": [8, 122, 323], "control": [0, 1, 9, 12, 13, 14, 16, 19, 21, 24, 25, 27, 29, 31, 32, 33, 34, 39, 43, 46, 54, 60, 62, 71, 74, 87, 88, 89, 91, 94, 118, 120, 122, 124, 125, 126, 129, 131, 133, 134, 137, 139, 144, 146, 153, 155, 162, 169, 170, 173, 174, 175, 178, 181, 187, 188, 190, 192, 195, 198, 203, 212, 214, 215, 216, 218, 219, 221, 232, 241, 244, 253, 254, 257, 260, 262, 263, 272, 277, 281, 282, 285, 286, 295, 298, 299, 305, 306, 308, 316, 317, 322, 323], "control1": 132, "control2": 132, "control_accuracy_benchmark": [65, 67], "control_accuracy_benchmark_20250928_115739": [65, 67], "control_act": 277, "control_analysi": [9, 260], "control_arrai": [17, 98, 149, 150], "control_bandwidth": 73, "control_bound": 101, "control_cal": 98, "control_chang": 277, "control_characterist": 193, "control_comput": 101, "control_computation_success": [98, 108], "control_computation_tim": 76, "control_consist": 65, "control_cost": [20, 117], "control_cycle_data": 63, "control_data": 63, "control_dict": 193, "control_dimens": [101, 278], "control_effici": 248, "control_effort": [45, 53, 68, 72, 76, 81, 82, 83, 98, 107, 113, 128, 133, 135, 136, 148, 149, 159, 166, 167, 169, 170, 183, 216, 224, 234, 250, 253, 254, 277, 310, 320, 321], "control_effort_ci_95": 321, "control_effort_object": 293, "control_energi": 75, "control_failur": 98, "control_forc": [77, 78, 81, 85, 177, 185], "control_frequ": [93, 209, 321], "control_gain": [196, 208, 261], "control_histori": [35, 63, 278, 321], "control_horizon": 10, "control_impact": 209, "control_input": [44, 52, 79, 119, 171, 203, 220], "control_lat": [255, 321], "control_law_testing_standard": 75, "control_limit": [101, 261], "control_log": 150, "control_loop": 209, "control_loop_data_flow": 63, "control_loop_frequ": 93, "control_magnitud": 98, "control_margin": 75, "control_matrix": 168, "control_metr": 9, "control_object": 75, "control_output": [9, 20, 37, 41, 49, 50, 51, 63, 82, 101, 107, 108, 114, 117, 199, 276, 277, 282, 283, 321], "control_perform": 112, "control_performance_trend": 63, "control_period": 310, "control_primit": [9, 37, 190, 227, 231], "control_primitives_refer": 7, "control_quality_scor": 75, "control_r": [35, 45, 53, 68, 76, 92, 183, 216, 224, 234, 250, 253, 254], "control_rang": 209, "control_result": [98, 277], "control_safety_verifi": 75, "control_satur": [78, 93, 98, 208, 261], "control_saturation_alert": 72, "control_sequ": 136, "control_shap": 98, "control_sign": [93, 191, 209, 261], "control_specialist": 252, "control_system": [93, 209], "control_trend": 63, "control_typ": 168, "control_valu": [20, 40, 49, 61, 75, 82, 98, 108, 113, 114, 115, 117, 276, 277, 300, 301], "control_vari": 113, "controlact": 277, "controlcycledata": 63, "controlfactori": [316, 317], "controlimpactanalysi": 209, "controllability_matrix": 295, "controllability_threshold": [72, 78, 196, 199, 226, 239, 273, 275], "controllaw": 317, "controllawtestorchestr": 75, "controller1": [51, 275], "controller2": [51, 76, 275], "controller3": [51, 275], "controller4": 275, "controller5": 275, "controller6": 275, "controller7": 275, "controller_a": [310, 321], "controller_a_result": 136, "controller_alias": [49, 51, 56, 82, 100, 103, 115], "controller_api_refer": [52, 59, 121], "controller_avail": 117, "controller_b": [310, 321], "controller_b_result": 136, "controller_benchmark": 247, "controller_bound": [73, 247, 252, 283], "controller_c": 310, "controller_cach": [72, 106], "controller_cfg": 131, "controller_class": [38, 56, 63, 65, 76, 98, 117, 277], "controller_cli": [9, 52, 72, 91, 116, 170, 177, 222, 223, 224, 233, 234, 235], "controller_comparison": [28, 136, 149, 216], "controller_comparison_theori": 78, "controller_config": [38, 51, 56, 63, 72, 73, 80, 98, 100, 102, 104, 106, 109, 117, 213, 216, 253], "controller_constraint": 252, "controller_contract": 278, "controller_control": 278, "controller_creation_failur": 98, "controller_creation_r": 111, "controller_creation_tim": 98, "controller_custom": [51, 276], "controller_default": [49, 51, 56, 72, 80, 102, 108, 109, 117, 164, 216, 226, 239, 273, 275], "controller_enum": 277, "controller_error": 247, "controller_factori": [19, 38, 49, 51, 52, 61, 68, 76, 82, 84, 86, 93, 98, 104, 105, 106, 116, 117, 167, 199, 216, 217, 253, 254, 274, 275, 277, 280], "controller_factory_analysi": 38, "controller_factory_config": 278, "controller_factory_integr": 321, "controller_failur": 93, "controller_gain": [37, 51, 56, 72, 80, 98, 100, 117, 150, 274, 313], "controller_health": 63, "controller_in_registri": 117, "controller_info": [38, 49, 52, 56, 82, 98, 100, 103, 114, 117, 277], "controller_instanti": 117, "controller_integration_pattern": 215, "controller_interfac": 9, "controller_ip": [177, 185], "controller_larg": 199, "controller_map": 98, "controller_nam": [40, 73, 82, 98, 151, 242, 248, 277, 301, 320], "controller_object": 81, "controller_output": 63, "controller_param": [49, 51, 56, 63, 80, 109, 209], "controller_paramet": [13, 209], "controller_performance_analysis_20250928_115456": [65, 67], "controller_performance_benchmark": [67, 98, 310], "controller_performance_comparison": 248, "controller_performance_summari": [65, 67], "controller_performance_valid": 41, "controller_pool": [63, 193, 248], "controller_port": [73, 177, 185], "controller_pso_interface_api_document": [19, 76], "controller_rank": [104, 112], "controller_registri": [17, 38, 49, 50, 52, 56, 72, 80, 98, 100, 106, 109, 114, 115, 116, 117, 273, 277, 320], "controller_respons": [75, 321], "controller_result": [98, 112], "controller_scor": 112, "controller_sequ": 61, "controller_smal": 199, "controller_spec": [105, 106, 276, 280], "controller_specific_adjust": 53, "controller_st": [79, 274, 276, 277, 278], "controller_stat": 102, "controller_templ": 72, "controller_template_param": 72, "controller_test": [39, 254], "controller_test_data": 114, "controller_test_repair": 190, "controller_theori": 50, "controller_tun": 101, "controller_typ": [37, 38, 50, 52, 56, 61, 71, 75, 76, 77, 78, 81, 82, 91, 92, 93, 98, 100, 102, 103, 106, 107, 114, 115, 117, 128, 130, 132, 133, 135, 136, 148, 150, 167, 168, 170, 208, 210, 216, 249, 250, 253, 254, 255, 273, 276, 277, 279, 283, 300, 313, 321], "controller_type_map": 280, "controller_type_result": 280, "controller_valid": [247, 252], "controller_wrapp": 51, "controllerbenchmark": 76, "controllerboundsspec": 58, "controllerclass": [49, 52], "controllercli": 116, "controllercodereview": 300, "controllercompar": 321, "controllerconfig": [9, 80, 106, 107, 216], "controllercoveragemonitor": 37, "controllercreationerror": [63, 112], "controllerdeprecationwarn": [98, 102], "controllerdynamicsintegrationtestcas": 75, "controllerdynamicsintegrationtestresult": 75, "controllererror": 63, "controllererrorresult": 63, "controllerfactori": [76, 93, 154, 253, 254], "controllerinstantiationerror": 76, "controllerintegrationvalid": 98, "controllerinterfac": [63, 250, 274, 278], "controllermanag": 210, "controllermetadata": 51, "controllernod": 321, "controlleroutput": [63, 321], "controllerparamet": 209, "controllerplantbridg": 277, "controllerpool": 277, "controllerprotocol": [17, 52, 56, 98, 103, 105, 116], "controllerregistri": 63, "controllers_": 9, "controllers_avail": 111, "controllers_config": 321, "controllers_consist": 75, "controllers_funct": 254, "controllers_process": 102, "controllers_smc": 39, "controllers_to_optim": 280, "controllersconfig": 9, "controllerselector": 321, "controllert": 49, "controllertestfailur": 75, "controllertyp": [276, 277], "controllertypeerror": 277, "controllervalid": [40, 301], "controlloop": 209, "controlobject": 75, "controlobjectivetestcas": 75, "controlobjectivetestresult": 75, "controlobjectivetestsuit": 75, "controloutput": [17, 36, 51, 52, 105, 116], "controlpow": 317, "controlresult": [274, 278], "controls_batch": [17, 171], "controls_s": 171, "controlsaturationerror": 135, "controlsaturationtestcas": 75, "controlsaturationtestresult": 75, "controlsaturationtestsuit": 75, "controlsaturationviol": 75, "controlsignaldirect": 30, "controlsum": 317, "controlsystem": [93, 209], "controlsystemunst": 92, "conv": [52, 58, 193, 195, 279, 291, 293], "conv_veloc": 52, "conveni": [52, 79, 102, 165, 196, 220, 225, 240, 280], "convent": [10, 11, 14, 45, 56, 82, 127, 134, 148, 164, 187, 199, 208, 221, 222, 223, 224, 225, 226, 233, 234, 235, 239, 240, 274, 286, 288, 299, 309, 310], "converg": [2, 9, 12, 19, 20, 30, 35, 36, 37, 39, 40, 45, 51, 52, 54, 55, 56, 59, 60, 61, 64, 65, 67, 69, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 93, 95, 97, 98, 100, 101, 103, 104, 106, 109, 111, 114, 117, 119, 121, 122, 123, 126, 127, 128, 129, 130, 132, 135, 146, 149, 150, 153, 155, 156, 160, 164, 165, 166, 167, 169, 171, 172, 179, 180, 181, 182, 184, 189, 190, 192, 194, 196, 199, 207, 208, 209, 214, 217, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 242, 243, 244, 248, 254, 255, 256, 257, 260, 261, 273, 274, 276, 277, 286, 287, 294, 297, 298, 299, 300, 301, 304, 313, 316, 321, 323], "converged_to_glob": 209, "convergence_accept": 252, "convergence_achiev": 93, "convergence_analysi": [75, 98, 209, 253, 280, 313], "convergence_analyz": 58, "convergence_bonu": 113, "convergence_check": 280, "convergence_condit": 112, "convergence_conditions_met": 98, "convergence_criterion": 293, "convergence_criterion_met": 202, "convergence_detect": 193, "convergence_detector": 112, "convergence_effici": 251, "convergence_estim": [53, 85], "convergence_expon": 279, "convergence_failur": 252, "convergence_focus": [53, 57, 58], "convergence_histori": [53, 193, 278, 280], "convergence_improv": [52, 58], "convergence_it": [53, 61, 254], "convergence_iter": [53, 98, 107, 247, 252, 253, 254], "convergence_metr": 193, "convergence_pati": 104, "convergence_point": 313, "convergence_prob": 53, "convergence_proof": 279, "convergence_properti": 109, "convergence_qu": [36, 252, 253], "convergence_r": [36, 75, 98, 104, 209, 247, 250, 251, 280, 283, 318], "convergence_rate_analysi": [287, 291], "convergence_result": [209, 252, 255], "convergence_scenario": 75, "convergence_spe": [53, 58], "convergence_statist": [216, 318], "convergence_statu": [98, 215], "convergence_threshold": [92, 98, 276, 277, 280], "convergence_tim": [42, 93, 98, 113, 125], "convergence_time_step": 193, "convergence_tol": 216, "convergence_toler": [53, 75, 104, 209, 310, 313], "convergence_trend": 247, "convergence_valid": 255, "convergence_veloc": 52, "convergence_verifi": 279, "convergence_window": 310, "convergenceanalysi": [75, 209], "convergencecriteria": [52, 57, 58], "convergencecriterion": [57, 58], "convergencemetr": [53, 57, 58], "convergencemonitor": 52, "convergenceratetestcas": 75, "convergenceratetestresult": 75, "convergenceratetestsuit": 75, "convergencestatu": [52, 57, 58], "convers": [29, 42, 67, 72, 76, 109, 202, 203, 213, 266, 300, 301], "convert": [14, 17, 26, 27, 40, 44, 49, 55, 65, 67, 72, 76, 84, 98, 101, 107, 109, 115, 117, 149, 150, 155, 196, 205, 213, 224, 226, 234, 239, 249, 254, 272, 290, 293, 300, 301], "convert_legacy_format": 108, "convert_to_json_serializ": 67, "convex": [8, 84, 103, 127, 162, 193, 199, 202, 222, 224, 233, 234, 245, 246], "convex_bound": 201, "convinc": 310, "convolv": [118, 209], "cooki": 144, "cooper": [222, 233, 246], "coordin": [24, 36, 37, 39, 40, 63, 64, 77, 78, 81, 85, 92, 119, 134, 160, 161, 162, 174, 197, 199, 202, 205, 225, 226, 239, 240, 242, 243, 252, 258, 261, 282, 283, 284, 286, 287, 290, 295, 300, 301, 316, 321, 323], "coordinate_prepar": 252, "coordination_protocol": 252, "coordinator_address": 321, "coordinatornod": 321, "cope": [224, 234], "copi": [8, 13, 15, 19, 27, 29, 30, 31, 35, 42, 49, 51, 55, 59, 61, 72, 73, 80, 90, 91, 92, 98, 100, 102, 109, 113, 116, 117, 131, 135, 137, 140, 142, 143, 144, 145, 150, 170, 177, 187, 203, 215, 217, 248, 249, 252, 254, 255, 266, 270, 274, 277, 287, 291, 300, 320], "copy2": [102, 117, 254], "copybtn": [140, 141, 142, 143, 144], "copybutton": [8, 15, 141, 143, 144], "copyleft": [2, 15], "copyright": 15, "cor": [27, 90, 153, 155], "core": [1, 2, 5, 7, 9, 11, 17, 22, 24, 30, 32, 33, 34, 39, 41, 51, 55, 58, 60, 68, 70, 71, 73, 78, 79, 81, 87, 88, 92, 93, 95, 103, 104, 106, 114, 116, 118, 119, 120, 121, 124, 127, 128, 129, 130, 132, 133, 134, 135, 139, 140, 142, 143, 145, 146, 150, 151, 152, 164, 165, 167, 168, 171, 177, 182, 188, 190, 192, 194, 199, 201, 202, 203, 207, 214, 216, 221, 222, 223, 227, 229, 231, 232, 233, 235, 238, 241, 244, 245, 246, 247, 252, 262, 276, 280, 282, 283, 284, 290, 293, 297, 298, 299, 309, 310, 316, 317, 318, 320, 321], "core_data_structur": 25, "core_dynam": 39, "core_interfac": [24, 25, 32, 33], "core_sect": 73, "core_simul": 242, "corioli": [61, 134, 135, 146, 161, 164, 199, 205, 219, 220, 222, 224, 225, 232, 233, 234, 240, 258, 287, 288, 289, 295, 317], "coriolis_centrifug": 168, "coriolis_matrix": 295, "coriolismatrix": 317, "corner": [145, 207, 261], "corollari": 246, "corpu": 299, "corput": 310, "corr": 310, "correct": [0, 2, 3, 13, 20, 21, 22, 30, 31, 35, 38, 40, 44, 49, 50, 51, 53, 56, 57, 58, 59, 64, 65, 67, 68, 70, 71, 75, 80, 86, 93, 97, 98, 100, 102, 105, 106, 108, 114, 115, 116, 117, 122, 124, 125, 126, 127, 131, 132, 134, 136, 146, 155, 159, 164, 171, 182, 187, 191, 192, 195, 199, 200, 213, 218, 225, 240, 242, 243, 251, 252, 255, 269, 273, 275, 283, 287, 290, 297, 298, 300, 306, 308, 309], "corrected_config": 252, "corrected_p_valu": 310, "corrected_signific": 310, "corrected_test": 310, "correctli": [12, 19, 23, 26, 27, 28, 30, 31, 33, 80, 93, 97, 98, 108, 116, 122, 124, 125, 126, 127, 132, 142, 146, 151, 155, 187, 199, 242, 245, 251, 266, 297, 310], "correl": [65, 67, 157, 164, 167, 170, 228, 236, 255, 299, 310], "correspond": [45, 74, 89, 93, 98, 118, 125, 191, 221, 225, 227, 229, 230, 231, 232, 237, 238, 240, 243, 252, 295, 315], "corrupt": [22, 93, 107, 173, 177, 185, 254], "corrupted_result": 254, "cosmet": [25, 26], "cost": [10, 12, 19, 20, 22, 25, 26, 28, 41, 42, 43, 45, 51, 52, 54, 56, 57, 58, 62, 63, 65, 68, 72, 76, 77, 79, 80, 81, 82, 83, 85, 86, 98, 105, 113, 117, 118, 127, 128, 129, 132, 135, 146, 148, 149, 158, 162, 167, 170, 182, 184, 189, 199, 202, 203, 205, 209, 214, 215, 216, 217, 218, 220, 222, 223, 224, 226, 227, 229, 231, 232, 233, 234, 235, 238, 239, 241, 244, 245, 246, 247, 254, 260, 265, 266, 270, 276, 277, 283, 290, 293, 299, 301, 302, 310, 313, 316, 317], "cost_adjust": 53, "cost_analysi": 280, "cost_chang": 148, "cost_custom": 51, "cost_default": 51, "cost_fn": 133, "cost_funct": [45, 52, 68, 72, 76, 128, 133, 135, 148, 167, 170, 216, 250, 253, 254, 279], "cost_histori": [53, 76, 98, 104, 107, 209, 216, 251, 253, 254, 280, 291, 321], "cost_improv": 251, "cost_origin": 53, "cost_reduct": 280, "cost_str": 318, "cost_vari": [209, 247, 252], "cost_weight": [53, 72, 253], "cost_within_rang": 252, "costfunc": 316, "costfunct": [127, 317], "costfunctionconfig": [9, 216], "costfunctionweight": 9, "could": [19, 23, 24, 38, 51, 55, 56, 63, 80, 100, 101, 116, 117, 122, 165, 195, 204, 224, 229, 230, 232, 234, 237, 238, 275, 300], "couldn": [25, 67], "coulomb": [101, 134, 135, 220, 225, 240], "coulombfrictiondynam": 134, "counsel": 15, "count": [1, 2, 5, 10, 11, 14, 16, 24, 25, 26, 32, 33, 38, 39, 49, 50, 52, 53, 56, 58, 59, 60, 61, 65, 67, 68, 69, 72, 77, 78, 81, 85, 91, 93, 94, 98, 100, 101, 102, 103, 105, 106, 109, 112, 115, 116, 117, 123, 127, 133, 135, 142, 147, 148, 155, 167, 170, 171, 178, 183, 184, 188, 197, 198, 200, 201, 202, 214, 224, 234, 250, 253, 254, 256, 257, 267, 268, 273, 283, 291, 297, 298, 299, 309, 318, 321], "counter": [98, 118, 119, 120, 164, 202, 225, 240, 268, 285, 306], "counteract": [146, 224, 227, 231, 234], "counterclockwis": 289, "countup": [267, 268, 269], "coupl": [17, 53, 73, 82, 83, 86, 98, 131, 134, 135, 146, 161, 164, 181, 189, 197, 198, 201, 205, 220, 221, 222, 226, 227, 231, 232, 233, 239, 247, 249, 283, 290], "cours": [192, 229, 238, 290], "cov": [14, 34, 37, 39, 87, 93, 128, 151, 186, 261, 281, 282, 283, 310, 323], "covari": 232, "cover": [5, 11, 12, 16, 19, 37, 39, 49, 51, 52, 56, 57, 59, 83, 90, 95, 119, 124, 125, 127, 130, 133, 137, 138, 146, 165, 188, 192, 199, 208, 209, 214, 219, 224, 232, 234, 241, 251, 252, 253, 254, 287, 294, 300, 307, 308, 310, 314, 319, 320, 323], "coverag": [0, 1, 2, 3, 4, 5, 12, 16, 17, 22, 24, 34, 36, 38, 40, 42, 53, 58, 64, 65, 71, 72, 75, 84, 86, 89, 93, 95, 98, 100, 103, 107, 112, 116, 119, 123, 124, 127, 128, 129, 137, 139, 140, 141, 142, 144, 165, 188, 189, 192, 199, 202, 203, 207, 208, 209, 217, 218, 219, 241, 242, 243, 244, 248, 249, 250, 251, 255, 256, 263, 266, 288, 289, 300, 301, 310, 313, 318, 323], "coverage_": 39, "coverage_analysis_methodologi": [88, 190], "coverage_analysis_methodology_framework": 39, "coverage_area": 255, "coverage_baselin": 39, "coverage_categori": 39, "coverage_confid": 88, "coverage_crit": 39, "coverage_data": [39, 88, 255], "coverage_exit": 255, "coverage_gap_analysi": 88, "coverage_gap_analyz": 39, "coverage_gaps_report": 39, "coverage_improvement_workflow": 39, "coverage_metr": [39, 87], "coverage_modul": 255, "coverage_overal": 39, "coverage_pid": 255, "coverage_quality_gates_runbook": 281, "coverage_quality_report": 39, "coverage_report_gener": 39, "coverage_result": [242, 255], "coverage_safeti": 39, "coverage_summari": 242, "coverage_timeout": 255, "coverage_valid": [39, 87], "coverage_xml": 39, "coveragecollectionfailur": 88, "coveragedata": 255, "coveragegapanalyz": 39, "coveragemetr": [39, 88], "coveragemonitor": 39, "coveragereportgener": 39, "coverageresult": 88, "coveragevalid": 39, "coveragevalidationresult": 255, "coveragewarn": 282, "covered_lin": 39, "cox": 310, "cp": [13, 84, 92, 93, 104, 141, 170, 182, 254, 255, 267, 269, 278], "cp1252": 31, "cprofil": [203, 298], "cpu": [63, 70, 91, 92, 93, 98, 104, 117, 124, 141, 166, 170, 182, 185, 203, 242, 245, 253, 254, 282, 298, 317, 320], "cpu_count": [92, 254, 280], "cpu_limit_perc": 92, "cpu_perc": [92, 98, 104, 111, 253, 254], "cpu_sampl": [98, 253], "cpu_trend": 111, "cpu_usag": [93, 254, 321], "cpu_util": [63, 93, 98, 104, 252, 321], "cpu_valu": 111, "cpufreq": 92, "cpuutil": 317, "cpython": [282, 297], "cq": 317, "crash": [35, 65, 98, 114, 119, 205, 254], "crawl": 290, "crc": [10, 22, 62, 78, 123, 163, 185, 192, 194, 196, 204, 205, 246, 257, 287], "crc32": [177, 185], "crc_failure_threshold": 185, "creat": [6, 8, 14, 15, 16, 20, 23, 25, 26, 29, 34, 38, 40, 41, 44, 52, 55, 56, 58, 59, 65, 67, 68, 70, 73, 75, 76, 77, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 98, 102, 103, 104, 106, 114, 115, 117, 118, 121, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 142, 146, 148, 149, 150, 151, 154, 156, 157, 160, 163, 164, 165, 167, 168, 171, 182, 185, 187, 188, 190, 193, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 209, 210, 215, 216, 220, 229, 237, 238, 241, 248, 249, 252, 253, 254, 255, 269, 273, 277, 282, 283, 290, 291, 297, 300, 303, 313, 320, 321], "create_adaptive_smc_control": [100, 116], "create_all_smc_control": [107, 116, 248], "create_and_validate_dynamics_model": 101, "create_backup": [98, 102], "create_backup_before_migr": 108, "create_batch_simul": 278, "create_benchmark": 220, "create_best_available_control": 49, "create_classical_smc": 76, "create_classical_smc_control": [50, 80, 100, 103, 106, 116, 275], "create_comparison_study_control": 107, "create_control": [20, 37, 40, 50, 52, 55, 59, 61, 71, 72, 76, 77, 78, 80, 81, 82, 84, 86, 92, 93, 98, 100, 102, 103, 104, 106, 108, 109, 112, 114, 115, 117, 127, 128, 135, 150, 151, 154, 168, 171, 182, 193, 202, 203, 210, 215, 216, 224, 234, 242, 250, 253, 254, 273, 276, 277, 279, 283, 297, 300, 301, 320, 321], "create_controller_batch": 117, "create_controller_ensembl": 106, "create_controller_factori": 68, "create_controller_from_config": 93, "create_controller_lazili": 276, "create_controller_legaci": [103, 107, 116], "create_controller_robust": 117, "create_controller_saf": [49, 51], "create_controller_stress_test": 107, "create_controller_thread": [111, 114], "create_controller_with_fallback": 117, "create_controller_with_parameter_recoveri": 98, "create_controller_with_recoveri": 100, "create_controllers_concurr": [50, 106], "create_controllers_from_config": 107, "create_controllers_optim": 105, "create_controllers_parallel": 106, "create_custom_smc": 76, "create_default": [9, 10, 61, 196, 216, 219, 220, 287], "create_default_config": [20, 101, 108, 114], "create_dynamics_model": 101, "create_emergency_backup": 254, "create_enhanced_controller_factori": [51, 280], "create_enhanced_fitness_funct": [51, 280], "create_fallback_config": 274, "create_fallback_configur": 277, "create_from_gain": 80, "create_full_nonlinear_plant_config": 101, "create_hil_control": 277, "create_hil_plant_config": 101, "create_hybrid_control": 81, "create_integr": [59, 61], "create_invalid_config": 207, "create_isolated_control": 117, "create_lightweight": 220, "create_managed_control": 117, "create_minimal_config": [98, 100, 277], "create_model": 277, "create_optimization_object": 277, "create_optimized_control": 117, "create_optimizer_from_config": 283, "create_parameter_sweep": 278, "create_pareto_optim": 277, "create_pid_control": [9, 10], "create_pso_controller_factori": [38, 40, 51, 52, 56, 72, 82, 98, 104, 105, 106, 115, 116, 117, 274], "create_pso_optimized_control": 98, "create_robust_fitness_funct": 104, "create_simplified_plant_config": 101, "create_simulation_engin": 216, "create_singl": 106, "create_smc_for_pso": [20, 49, 50, 51, 56, 82, 98, 103, 114, 127, 128, 133, 134, 135, 150, 151, 167, 216, 217, 248, 274], "create_sta_smc_control": [100, 116], "create_swing_up_control": 86, "create_test_control": 255, "create_validated_config": 274, "create_verification_script": 320, "created_at": [5, 210], "creation": [17, 28, 38, 40, 52, 53, 57, 58, 59, 61, 63, 65, 75, 76, 79, 82, 95, 100, 102, 103, 104, 105, 106, 108, 109, 110, 114, 115, 130, 132, 147, 164, 196, 199, 203, 208, 216, 244, 248, 251, 254, 270, 276, 277, 280, 301, 318], "creation_error": 98, "creation_error_recov": 63, "creation_error_unrecover": 63, "creation_failur": 98, "creation_success": [98, 108], "creation_tim": [76, 98, 107, 114, 115], "creation_time_m": 115, "creativ": 270, "credenti": 90, "credibl": [67, 298], "credit": [30, 95], "crit": [210, 211, 213], "criteria": [1, 5, 7, 10, 12, 20, 25, 26, 37, 49, 52, 59, 60, 65, 79, 86, 98, 104, 105, 106, 111, 112, 119, 122, 123, 124, 125, 126, 127, 147, 158, 165, 179, 180, 182, 192, 199, 210, 218, 222, 229, 233, 238, 241, 242, 243, 246, 247, 250, 253, 255, 276, 279, 280, 283, 284, 285, 290, 291, 292, 293, 306, 309, 310], "criteria_map": 280, "criteria_valu": 255, "criterion": [5, 7, 30, 31, 43, 59, 65, 73, 97, 120, 151, 164, 167, 194, 196, 220, 229, 238, 255, 279, 290, 291, 293, 298, 299, 310, 313], "criterion_evalu": 255, "criterionevalu": 255, "critic": [4, 8, 17, 23, 25, 26, 31, 32, 36, 38, 39, 44, 50, 51, 56, 57, 58, 59, 61, 65, 68, 70, 71, 73, 75, 78, 79, 82, 85, 86, 87, 88, 92, 93, 98, 100, 101, 103, 109, 112, 113, 115, 118, 120, 121, 122, 124, 125, 134, 147, 149, 151, 156, 158, 163, 166, 167, 170, 183, 191, 192, 194, 195, 196, 197, 200, 201, 204, 205, 206, 207, 209, 215, 220, 222, 224, 233, 234, 237, 242, 243, 244, 246, 251, 259, 282, 283, 290, 297, 298, 299, 301, 309, 312, 313, 315, 323], "critical_check": 92, "critical_compli": 255, "critical_compon": [39, 242], "critical_coverag": [39, 255], "critical_failur": [92, 255], "critical_funct": 209, "critical_issu": [75, 207], "critical_matric": 75, "critical_modul": 115, "critical_param": 73, "critical_slop": 39, "critical_trend": 39, "crontab": 254, "cross": [1, 2, 10, 11, 14, 16, 19, 23, 24, 25, 39, 40, 51, 52, 56, 59, 61, 65, 67, 72, 82, 86, 89, 93, 94, 95, 122, 127, 137, 143, 147, 163, 165, 181, 187, 188, 190, 192, 193, 194, 199, 203, 208, 216, 218, 221, 222, 226, 232, 233, 239, 242, 243, 252, 261, 266, 275, 277, 283, 284, 286, 291, 297, 306, 307, 308, 314, 318], "cross_field": [1, 5], "cross_refer": 94, "cross_valid": [9, 10, 310, 313], "crosshair": 268, "crossov": [44, 53, 162, 202, 224, 234], "crossover_prob": 208, "crossref": 4, "crossvalid": [310, 313], "crossvalidationconfig": [310, 313], "crowd": [202, 291], "crowding_dist": 291, "crucial": [119, 204, 222, 226, 227, 231, 233, 239], "cruz": 123, "cryptic": 248, "csl": 122, "csp": 143, "css": [1, 13, 27, 29, 138, 139, 141, 142, 143, 144, 156, 159, 267, 269, 270, 271], "css3": 64, "csv": [8, 28, 45, 52, 59, 62, 67, 74, 127, 150, 169, 221, 317, 318, 320], "csvexport": 317, "ct": [133, 280], "cto": 93, "ctrb": 220, "ctrl": [1, 19, 21, 22, 27, 61, 68, 78, 92, 118, 121, 124, 126, 127, 128, 129, 135, 137, 139, 141, 142, 144, 145, 148, 149, 150, 154, 155, 165, 166, 167, 168, 169, 170, 178, 185, 189, 250, 253, 254, 265, 303, 304], "ctrl1_ise": 68, "ctrl2_ise": 68, "ctrl_config": [73, 131], "ctrl_name": [68, 131, 253], "ctrl_type": [53, 133, 248, 253, 254, 278], "ctrlkei": 144, "ctx": [203, 300], "cu118": 91, "cube": 268, "cubic": [140, 143], "cuda": [104, 146], "cudnn8": 91, "cui": [226, 239], "culprit": 144, "cultur": 71, "cumtim": [203, 298], "cumul": [24, 32, 68, 118, 119, 120, 122, 124, 139, 142, 285], "cup": 246, "cupi": 104, "curat": 298, "curl": [90, 91, 92, 141, 144], "currenc": 243, "current": [0, 2, 4, 5, 14, 19, 21, 22, 23, 31, 32, 35, 36, 37, 44, 52, 53, 55, 56, 62, 65, 67, 70, 72, 73, 75, 76, 77, 78, 81, 82, 84, 86, 91, 92, 94, 97, 98, 102, 103, 104, 107, 116, 117, 118, 120, 121, 122, 127, 135, 143, 144, 145, 146, 147, 150, 162, 164, 165, 167, 178, 182, 186, 187, 190, 194, 196, 200, 202, 204, 207, 210, 214, 220, 227, 228, 231, 232, 236, 241, 253, 254, 259, 261, 265, 266, 267, 274, 278, 282, 283, 284, 285, 290, 291, 293, 297, 298, 301, 304, 306, 308, 310, 313, 315, 318, 321], "current_avg": 98, "current_best": [98, 202], "current_best_cost": 277, "current_best_fit": 53, "current_bound": [112, 247], "current_config": 73, "current_control": [106, 321], "current_coverag": 39, "current_deprec": 72, "current_dir": 117, "current_estim": 37, "current_fit": [104, 112], "current_front": 291, "current_gain": 73, "current_iter": 277, "current_k": 77, "current_mb": 210, "current_memori": [98, 107, 115, 117, 254], "current_metr": 111, "current_path": 72, "current_perform": 247, "current_result": [75, 207], "current_sect": 298, "current_st": [37, 63, 119, 120, 321], "current_start": 98, "current_swarm_s": 167, "current_threshold": 255, "current_tim": 61, "current_valu": 111, "current_vers": [73, 93, 98], "currentheight": 143, "currentus": 146, "curs": [162, 167, 184, 202], "cursor": [267, 268], "curtain": [139, 145], "curv": [19, 30, 119, 143, 156, 157, 163, 193, 202, 268, 310], "curvatur": 290, "curvedloop": 268, "custom": [1, 7, 11, 13, 19, 22, 25, 27, 28, 31, 33, 49, 50, 51, 52, 56, 57, 58, 59, 61, 72, 76, 84, 86, 91, 92, 94, 95, 98, 102, 112, 117, 118, 128, 129, 136, 138, 139, 142, 144, 145, 146, 148, 150, 151, 153, 154, 160, 163, 164, 165, 166, 167, 171, 182, 199, 214, 215, 216, 220, 254, 266, 267, 269, 270, 271, 275, 276, 280, 283, 284, 285, 298, 304, 321], "custom_": 135, "custom_batch_optim": 322, "custom_bound": [112, 253], "custom_classical_config": 321, "custom_config": [51, 91, 128, 170, 177, 185, 280], "custom_constraint": 112, "custom_cost": [148, 167], "custom_cost_funct": [167, 253], "custom_dynam": [134, 135], "custom_enhanc": 13, "custom_fit": 53, "custom_gain": [49, 51, 56, 117, 265], "custom_guard_angular_veloc": 203, "custom_metr": 253, "custom_param": [72, 134], "custom_pso_config": 280, "customconfig": [51, 72], "customiz": 270, "customsmc": 76, "cusum": [118, 119, 120, 285, 306], "cusum_bas": 119, "cusum_en": [118, 119, 120, 285], "cusum_threshold": [118, 119, 120, 285], "cut": [12, 153], "cutoff": [35, 37], "cutoff_d": 254, "cutoff_freq": 136, "cv": [151, 247, 308], "cv_config": 313, "cv_method": [310, 313], "cv_result": 310, "cv_score": 313, "cv_valid": 310, "cvar": [308, 309, 310], "cvar_5": [310, 313], "cvar_\u03b1": 310, "cvxopt": 117, "cvxpy": [15, 51, 55, 56, 82, 115], "cwd": 177, "cx": 317, "cyber": 173, "cybernet": 202, "cycl": [37, 63, 64, 105, 117, 156, 197, 205, 210, 213, 241, 317, 323], "cycle_data": 63, "cyclomat": [93, 242], "cypress": [138, 139, 142], "czf": [92, 169, 320], "c\u1d62": [192, 199, 204, 205, 209, 247, 249, 279], "c\u2081": [36, 40, 51, 73, 81, 97, 98, 162, 192, 196, 201, 202, 204, 205, 215, 242, 249, 252, 253, 274, 279, 301], "c\u2081e\u2081": [99, 192, 194, 204, 249, 251, 274, 279], "c\u2081r\u2081": [97, 191, 251, 316], "c\u2081\u0117\u2081": 204, "c\u2081\u03b8": 204, "c\u2081\u03b8\u2081": 76, "c\u2082": [36, 40, 51, 73, 81, 97, 98, 162, 192, 196, 201, 202, 204, 205, 215, 242, 249, 252, 253, 274, 279, 301], "c\u2082e\u2082": [99, 192, 194, 204, 249, 251, 274, 279], "c\u2082r\u2082": [97, 191, 251, 316], "c\u2082\u0117\u2082": 204, "c\u2082\u03b8": 204, "c\u2082\u03b8\u2082": 76, "d": [8, 13, 24, 25, 35, 39, 40, 43, 44, 53, 62, 70, 71, 73, 77, 78, 81, 82, 84, 86, 88, 91, 92, 93, 97, 102, 108, 111, 127, 134, 146, 147, 156, 161, 162, 163, 164, 168, 169, 170, 177, 178, 185, 187, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 215, 216, 219, 220, 221, 223, 225, 226, 227, 231, 232, 235, 239, 240, 243, 246, 251, 252, 254, 265, 267, 268, 269, 274, 278, 279, 287, 288, 289, 290, 293, 294, 295, 297, 298, 299, 300, 308, 309, 310, 317, 318, 320], "d100": 10, "d101": 10, "d102": 10, "d103": 10, "d3": [28, 30, 31, 262], "d_": [53, 92, 191, 195, 232, 246, 254, 255, 280, 287, 293], "d_actual": 77, "d_m": 246, "d_max": [112, 191, 197, 287], "daemon": [90, 91, 92, 277], "dai": [1, 31, 38, 67, 71, 92, 111, 218, 242, 254, 255], "daili": [13, 88, 92, 98, 127, 129, 242, 245, 254], "daily_coverage_check": 88, "daily_health_report": 254, "daily_mainten": 98, "damag": [15, 166, 196, 249, 261], "damp": [20, 30, 36, 45, 51, 53, 61, 63, 78, 80, 81, 84, 86, 98, 99, 100, 101, 103, 109, 113, 124, 134, 135, 146, 158, 163, 164, 167, 182, 183, 192, 196, 197, 199, 201, 204, 205, 206, 208, 222, 224, 225, 226, 227, 230, 231, 232, 233, 234, 237, 239, 240, 247, 248, 249, 253, 272, 273, 275, 276, 287, 290, 291, 294], "dampen": [229, 238], "damping_cart": [61, 92], "damping_gain": [38, 51, 72, 80, 81, 85, 92, 98, 99, 100, 101, 109, 197, 226, 227, 231, 239, 273, 275, 276], "damping_ok": 249, "damping_pendulum1": 92, "damping_pendulum2": 92, "damping_pole1": 61, "damping_pole2": 61, "damping_ratio": [249, 252], "damping_ratio_bound": 247, "damping_reason": 112, "damping_suffici": 248, "dao": [229, 238], "daq_system": 9, "dark": [1, 13, 27, 28, 29, 31, 90, 137, 139, 144, 154, 156, 232, 266, 267, 268], "darkveil": 268, "darl": [309, 310], "dash": [56, 61, 228, 236], "dashboard": [8, 9, 17, 22, 30, 31, 36, 63, 65, 67, 70, 71, 92, 94, 95, 98, 127, 129, 146, 150, 157, 189, 223, 232, 235, 242, 243, 251, 254, 262], "dashboard_observ": 17, "dask": 317, "data": [1, 8, 10, 12, 15, 17, 19, 22, 25, 27, 30, 31, 35, 39, 40, 45, 53, 56, 57, 58, 59, 61, 68, 71, 72, 80, 81, 87, 88, 90, 92, 93, 95, 102, 104, 108, 111, 115, 117, 127, 128, 129, 140, 144, 145, 146, 148, 150, 153, 155, 156, 157, 166, 167, 169, 170, 173, 175, 183, 201, 216, 218, 221, 222, 223, 224, 229, 232, 233, 234, 235, 238, 242, 249, 250, 253, 254, 255, 257, 259, 268, 277, 282, 283, 285, 291, 298, 303, 308, 309, 317], "data1": 313, "data2": 313, "data_a": [274, 310], "data_avail": 169, "data_b": [274, 310], "data_bu": 278, "data_exchang": [9, 44], "data_log": 9, "data_point": 111, "data_row": 318, "data_structur": 9, "data_typ": 9, "databas": [40, 52, 63, 93, 242, 247, 254], "database_health": 93, "database_isol": 93, "dataclass": [10, 17, 38, 39, 49, 52, 53, 55, 56, 57, 58, 76, 82, 84, 98, 105, 106, 116, 119, 120, 131, 132, 165, 168, 199, 220, 248, 274, 277, 278, 280, 318], "dataexchangebu": 277, "dataflow": 30, "datafram": [51, 53, 56, 67, 149, 169, 170, 178, 318, 320], "datamigrationresult": 102, "dataprotocol": 119, "dataset": [8, 45, 61, 65, 90, 93, 157, 169, 187, 221, 257, 303, 310, 318], "datasheet": 296, "datasourc": 92, "datastream": 9, "date": [9, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 40, 41, 44, 52, 53, 56, 58, 59, 61, 65, 67, 71, 98, 120, 126, 137, 138, 146, 147, 165, 169, 171, 175, 177, 178, 182, 183, 213, 241, 245, 253, 254, 255, 277, 287, 290, 291, 302, 308, 315, 318], "datetim": [39, 93, 102, 108, 254, 255, 280], "david": [8, 270], "davidhdev": 268, "davila2005second": 257, "days_to_keep": 254, "db": [36, 45, 74, 285, 296], "dc": 317, "dd": [225, 240], "ddddot": 200, "dddot": 200, "ddof": 313, "ddot": [13, 152, 191, 198, 200, 219, 220, 225, 226, 227, 231, 232, 239, 240, 258, 287, 289, 290, 294, 295], "ddq": 258, "ddt": [225, 240], "ddthh": 70, "de": [44, 53, 86, 193, 250], "dead": [51, 55, 63, 72, 76, 78, 79, 81, 82, 103, 117, 195, 197, 199, 205, 222, 224, 227, 231, 233, 234, 242, 253, 273, 275, 276, 279, 287, 290, 301], "dead_band": 195, "dead_ref": 117, "dead_zon": [36, 38, 40, 51, 56, 72, 76, 77, 80, 81, 82, 98, 99, 101, 103, 109, 197, 210, 211, 224, 226, 234, 239, 273, 275, 276, 279, 287, 300], "dead_zone_nonneg": 77, "dead_zone_threshold": [79, 82], "dead_zone_valid": 81, "deadband": [86, 118, 119, 120], "deadlin": [59, 61, 84, 88, 136, 209, 216, 245, 317], "deadline_miss": [61, 321], "deadline_miss_r": 321, "deadline_toler": 61, "deadline_viol": 209, "deadlineviol": 209, "deadlock": [50, 51, 56, 98, 115, 116, 117], "deadzon": [127, 130], "deadzone_threshold": 136, "deal": 15, "dealloc": 210, "death": 193, "deb": 291, "deb2001multi": 257, "debt": [10, 242], "debug": [1, 11, 13, 45, 50, 51, 53, 56, 61, 71, 72, 73, 80, 82, 84, 90, 94, 98, 104, 106, 116, 119, 134, 135, 138, 139, 144, 168, 172, 184, 193, 194, 197, 199, 200, 203, 208, 214, 220, 250, 254, 265, 275, 282, 283, 298, 302, 322, 323], "debug_configuration_prior": 117, "debug_controller_cr": 117, "debug_data": 117, "debug_gain_valid": 117, "debug_import_issu": 117, "debug_info": [79, 117], "debug_mod": 321, "debug_pso_factory_cr": 117, "debug_pso_optim": 321, "debug_report": 117, "debug_step_instanti": 117, "debugg": [117, 216, 321], "decad": [226, 239, 257], "decai": [75, 77, 81, 113, 125, 162, 164, 197, 205, 209, 224, 226, 227, 231, 234, 239, 268, 287, 291], "decaycard": 268, "deceler": [163, 164, 291], "decentr": 174, "decid": [62, 306], "decim": 290, "decis": [17, 22, 37, 42, 59, 64, 65, 67, 69, 77, 78, 82, 84, 88, 95, 129, 166, 178, 190, 193, 199, 201, 202, 210, 241, 243, 255, 298, 310, 313], "decision_accuraci": 255, "decision_criteria": 255, "declar": [5, 8, 25, 28, 53, 55, 81, 118, 119, 120, 285, 290, 300, 306], "declin": 39, "decod": [144, 315], "decompos": [205, 226, 239, 310], "decomposit": [78, 205, 213, 226, 228, 236, 239, 290, 310], "decor": [2, 9, 16, 27, 112, 115, 155, 188, 210, 297], "decoupl": [17, 19, 55, 81, 190, 193, 205, 226, 227, 231, 239, 250, 287, 290, 291], "decreas": [35, 53, 73, 78, 86, 98, 99, 111, 118, 119, 120, 124, 125, 126, 146, 158, 162, 163, 164, 167, 170, 183, 193, 195, 201, 202, 205, 210, 214, 216, 223, 224, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 247, 251, 253, 254, 265, 290, 293, 294, 310, 321], "decrement": 291, "decrypt": 268, "decryptedtext": 268, "dedic": [10, 72, 152, 174, 177, 222, 233, 247, 274], "dedup": 298, "dedupl": [24, 143, 297, 298], "deep": [17, 52, 71, 72, 95, 98, 130, 146, 160, 161, 162, 163, 164, 166, 167, 224, 234, 259, 290, 299, 303, 305], "deep_merg": 72, "deep_performance_analysi": 98, "deepcopi": [73, 131], "deeper": [32, 146, 165], "deepli": [162, 297], "def": [10, 12, 19, 20, 24, 30, 31, 35, 37, 38, 39, 40, 41, 42, 44, 50, 52, 56, 65, 67, 71, 73, 75, 76, 77, 81, 82, 83, 84, 85, 86, 88, 92, 93, 94, 97, 98, 100, 102, 103, 105, 106, 114, 115, 117, 118, 119, 120, 125, 127, 131, 132, 133, 134, 135, 136, 148, 149, 150, 151, 166, 167, 170, 171, 178, 183, 188, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 213, 214, 216, 217, 219, 220, 232, 246, 249, 253, 254, 256, 258, 261, 273, 276, 277, 279, 282, 283, 284, 287, 291, 298, 299, 301, 302, 313, 320, 321], "default": [1, 5, 14, 19, 20, 22, 23, 27, 28, 29, 30, 34, 35, 38, 41, 42, 45, 46, 50, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 70, 72, 73, 74, 77, 78, 80, 81, 82, 84, 85, 91, 92, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 114, 115, 116, 117, 118, 119, 120, 124, 127, 142, 143, 144, 146, 148, 152, 159, 164, 170, 177, 178, 182, 185, 188, 193, 196, 200, 202, 203, 205, 213, 214, 216, 220, 222, 224, 226, 227, 230, 231, 232, 233, 234, 237, 239, 247, 248, 254, 265, 267, 268, 269, 271, 272, 275, 277, 278, 280, 285, 290, 293, 297, 298, 301, 303, 306, 315, 321], "default_adapt": 101, "default_bound": 274, "default_config": [113, 254, 280], "default_control": 248, "default_cost_funct": 133, "default_dt": [61, 107], "default_factori": [17, 38, 72, 76, 102, 112, 120, 278], "default_flow_styl": [72, 102, 104, 117, 254], "default_gain": [17, 38, 49, 50, 52, 56, 72, 80, 98, 100, 105, 109, 112, 114, 115, 116, 117, 183, 193, 248, 251, 273, 275, 277, 280], "default_max_forc": 107, "default_param": 207, "default_perform": 248, "default_pso_opt": 101, "default_rng": [224, 234, 291], "default_sta_param": 101, "default_surface_gain": 98, "default_valu": [72, 108, 117], "defaultconfigur": 63, "defaultdict": 102, "defens": [42, 51, 56, 98, 117, 169, 216], "defer": [10, 309], "defici": 220, "defin": [12, 17, 19, 34, 39, 45, 52, 53, 58, 63, 68, 74, 75, 76, 77, 80, 81, 82, 83, 86, 88, 90, 93, 97, 98, 104, 105, 107, 116, 117, 121, 124, 125, 127, 128, 131, 132, 133, 134, 135, 143, 146, 148, 150, 156, 163, 164, 167, 168, 170, 183, 191, 193, 194, 198, 199, 201, 202, 203, 204, 206, 215, 216, 217, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 243, 246, 248, 250, 253, 255, 258, 272, 274, 277, 279, 282, 287, 289, 293, 294, 295, 296, 306, 310, 313, 318, 321], "definit": [10, 12, 14, 35, 36, 39, 45, 51, 52, 53, 54, 55, 56, 59, 65, 67, 74, 78, 79, 81, 89, 91, 105, 107, 112, 119, 125, 130, 133, 161, 163, 164, 165, 176, 179, 181, 188, 192, 193, 196, 197, 198, 201, 205, 206, 214, 220, 221, 226, 232, 239, 243, 247, 249, 258, 261, 279, 287, 288, 293, 294, 295, 297, 298, 317], "deflect": [82, 199, 221, 226, 239], "deform": 232, "deg": [35, 61, 85], "degen": 65, "degener": [53, 75, 86], "degenerate_respons": 75, "degenerate_result": 75, "degenerate_scenario": 75, "degenerateconditiontestcas": 75, "degenerateconditiontestresult": 75, "degeneratescenario": 75, "degrad": [35, 37, 38, 45, 49, 52, 53, 55, 56, 61, 63, 65, 67, 78, 84, 93, 98, 100, 103, 104, 109, 111, 114, 119, 134, 139, 142, 143, 148, 158, 166, 169, 176, 177, 185, 190, 191, 192, 194, 196, 198, 203, 209, 213, 221, 223, 227, 230, 231, 232, 235, 237, 242, 244, 245, 247, 250, 251, 254, 255, 261, 265, 275, 283, 284, 290, 291, 301], "degradation_ev": 255, "degradation_level": [63, 255], "degradation_success_r": 255, "degradationstrategi": 63, "degraded_result": 255, "degradedvalidationresult": 255, "degrading_converg": 247, "degre": [35, 75, 77, 78, 81, 82, 86, 92, 97, 131, 133, 135, 163, 164, 166, 198, 199, 209, 222, 224, 226, 228, 232, 233, 234, 236, 239, 256, 277, 283, 286, 288, 290, 313, 320, 321], "del": [72, 98, 102, 107, 114, 117, 168, 211], "delai": [31, 62, 65, 67, 86, 114, 117, 120, 131, 163, 185, 209, 221, 224, 227, 230, 231, 232, 234, 237, 253, 267, 294], "delaycompress": 92, "deleg": [76, 86, 117, 220], "delet": [70, 92, 94, 142, 144, 210, 254, 282], "deliber": 17, "delimit": [224, 234], "delin": 0, "deliv": [12, 27, 28, 30, 31, 188, 218, 232, 241, 309, 318], "deliver": [10, 14, 29, 30, 31, 143, 165, 241], "deliveri": 177, "delta": [17, 35, 39, 53, 84, 120, 191, 193, 195, 197, 198, 200, 216, 217, 226, 232, 239, 274, 279, 287, 290, 293, 299, 318], "delta_": [53, 191, 193, 226, 239, 293], "delta_mb": 117, "demand": [1, 27, 31, 65, 98, 103, 111, 118, 119, 155, 226, 230, 237, 239, 265, 317], "demo": [1, 12, 31, 55, 61, 72, 129, 152, 153, 154, 268, 269, 270, 271, 291], "demonstr": [12, 13, 26, 29, 30, 36, 49, 51, 53, 56, 58, 59, 61, 63, 67, 72, 86, 98, 107, 117, 152, 153, 154, 155, 156, 157, 158, 159, 171, 190, 219, 220, 222, 224, 226, 227, 229, 231, 233, 234, 238, 239, 256, 257, 276, 277, 278, 283, 290, 300, 303, 313, 318, 321], "demonstrate_configuration_prior": 72, "demonstration_1_basic_usag": 72, "demonstration_2_parameter_overrid": 72, "demonstration_3_validation_and_migr": 72, "demonstration_4_environment_configur": 72, "demonstration_5_pso_integr": 72, "den": [123, 125, 246, 291], "deni": [92, 146], "denom": 53, "denomin": [39, 53, 82, 193], "denot": [193, 225, 227, 230, 231, 237, 240, 279, 287, 291, 293], "densiti": [57, 59, 121, 122, 197, 267], "dep": 177, "departur": 310, "depend": [1, 5, 12, 13, 15, 16, 17, 20, 22, 23, 24, 25, 30, 31, 32, 34, 35, 36, 38, 39, 45, 50, 51, 52, 53, 56, 58, 59, 61, 64, 65, 67, 69, 71, 73, 80, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 98, 100, 103, 105, 115, 116, 118, 119, 121, 126, 128, 134, 143, 144, 146, 150, 151, 152, 161, 162, 164, 166, 169, 170, 172, 181, 182, 187, 188, 189, 190, 197, 198, 199, 200, 201, 202, 205, 209, 210, 213, 218, 220, 221, 222, 223, 225, 227, 231, 232, 233, 235, 240, 241, 242, 245, 246, 253, 254, 262, 268, 270, 273, 275, 279, 282, 283, 284, 291, 293, 295, 300, 317, 320, 321], "dependabot": [89, 188], "dependencies_ok": 111, "depends_on": [63, 91, 92], "deploi": [16, 30, 31, 39, 40, 53, 58, 63, 64, 65, 67, 73, 90, 91, 93, 95, 98, 120, 139, 142, 144, 148, 156, 163, 166, 182, 188, 218, 241, 244, 245, 253, 284, 290, 313], "deploy": [7, 13, 15, 16, 33, 36, 38, 39, 45, 50, 53, 57, 58, 64, 71, 73, 75, 87, 88, 103, 104, 107, 119, 120, 127, 134, 135, 144, 148, 158, 166, 168, 172, 174, 179, 182, 188, 189, 191, 200, 209, 210, 223, 232, 235, 242, 244, 247, 250, 253, 254, 255, 262, 263, 275, 276, 277, 284, 300, 301, 309, 310, 313, 317, 321], "deploy_canari": 98, "deploy_product": 321, "deploy_production_system": 321, "deploy_system": 321, "deploy_to_green": 98, "deploy_with_canari": 98, "deployment_approv": [75, 255], "deployment_condit": 255, "deployment_decis": 255, "deployment_decision_engin": 255, "deployment_decision_rational": 255, "deployment_guid": [7, 11, 242], "deployment_histori": 255, "deployment_impact": 255, "deployment_mathematical_approv": 209, "deployment_performance_approv": 255, "deployment_readi": [40, 301], "deployment_scor": 255, "deployment_validation_checklist": [93, 243], "deploymentcondit": 255, "deploymentdecis": 255, "deploymentdecisionengin": 255, "deploymentvalidationerror": 93, "deprec": [1, 9, 11, 22, 23, 38, 49, 52, 55, 61, 72, 80, 99, 103, 105, 106, 109, 114, 115, 116, 117, 124, 131, 139, 213, 226, 239], "deprecated_config": 114, "deprecated_map": [49, 99, 116, 117], "deprecated_param": 98, "deprecated_parameter_usag": 102, "deprecated_usag": 102, "deprecation_level": 102, "deprecation_map": 102, "deprecation_not": 109, "deprecation_timelin": 102, "deprecation_warn": [72, 111], "deprecationlevel": 98, "deprecationmap": 98, "deprecationwarn": [102, 115, 283, 284], "depth": [67, 82, 170, 202, 215, 297], "dequ": [63, 81], "der": [8, 17, 310], "deriv": [2, 8, 11, 13, 15, 16, 35, 45, 51, 52, 57, 58, 61, 75, 76, 78, 79, 84, 85, 86, 95, 97, 98, 103, 105, 120, 121, 125, 127, 129, 134, 135, 146, 150, 152, 158, 160, 162, 163, 164, 166, 168, 169, 182, 188, 189, 191, 192, 193, 196, 197, 199, 201, 205, 206, 208, 209, 219, 220, 221, 222, 223, 226, 227, 231, 232, 233, 235, 239, 243, 246, 251, 253, 256, 258, 261, 272, 273, 274, 275, 278, 279, 280, 286, 288, 291, 294, 296, 299, 317, 318], "derivative_gain": 208, "derivative_shap": 101, "derrac": 199, "desc": [112, 169], "descend": 163, "descent": [30, 79, 156, 162, 193, 202, 279], "describ": [12, 62, 94, 121, 122, 147, 164, 178, 199, 205, 223, 224, 226, 227, 228, 229, 231, 234, 235, 236, 238, 239, 257, 287, 293, 295, 306, 315], "descript": [10, 13, 17, 19, 20, 24, 25, 26, 33, 49, 52, 53, 55, 56, 57, 58, 59, 64, 67, 71, 72, 73, 74, 77, 78, 80, 82, 83, 85, 90, 92, 94, 98, 100, 105, 106, 111, 112, 114, 116, 117, 120, 121, 122, 127, 131, 134, 140, 159, 165, 168, 170, 178, 208, 219, 224, 225, 226, 234, 239, 240, 254, 255, 256, 258, 266, 273, 275, 278, 280, 288, 289, 297, 300, 308, 315, 317, 320, 321], "descriptor": [123, 126], "deseri": 196, "design": [0, 1, 2, 8, 15, 19, 22, 27, 28, 29, 30, 31, 36, 38, 48, 52, 55, 56, 57, 58, 60, 61, 64, 65, 67, 68, 69, 71, 73, 75, 79, 80, 82, 83, 84, 88, 95, 97, 98, 106, 107, 111, 118, 120, 121, 122, 123, 125, 127, 130, 139, 140, 141, 146, 148, 156, 160, 161, 162, 167, 168, 174, 178, 179, 180, 184, 189, 191, 192, 193, 196, 197, 198, 199, 201, 202, 205, 209, 215, 216, 217, 223, 224, 226, 227, 231, 232, 234, 235, 239, 242, 244, 250, 251, 253, 257, 265, 270, 278, 280, 284, 286, 289, 293, 294, 295, 296, 298, 300, 303, 304, 309, 310, 318], "design_sliding_surfac": 287, "desir": [26, 59, 62, 78, 84, 97, 98, 112, 119, 156, 163, 167, 178, 194, 205, 222, 224, 226, 232, 233, 234, 239, 265, 291, 294, 310, 315, 317], "desired_gain": 107, "desired_st": 164, "desktop": [1, 13, 28, 31, 91, 139, 140, 143, 144, 166, 230, 237], "despit": [65, 77, 81, 119, 124, 126, 161, 163, 166, 178, 197, 205, 222, 229, 232, 233, 238], "destabil": [73, 222, 233], "destabilis": [226, 239], "destin": 44, "destroi": [98, 210], "destructor": [168, 210], "det": [79, 155, 200, 204, 205, 206, 287, 291], "det_m": 79, "det_threshold": 216, "detail": [1, 2, 4, 6, 10, 12, 13, 15, 16, 17, 18, 19, 22, 30, 32, 33, 38, 39, 42, 49, 50, 51, 52, 56, 57, 58, 59, 64, 65, 66, 67, 68, 69, 72, 76, 78, 79, 80, 81, 82, 83, 86, 87, 95, 98, 102, 106, 108, 112, 117, 118, 120, 121, 122, 126, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 146, 156, 160, 164, 170, 171, 185, 188, 192, 193, 194, 197, 198, 200, 201, 202, 203, 208, 212, 216, 220, 223, 224, 228, 232, 234, 235, 236, 241, 243, 251, 253, 254, 256, 257, 259, 262, 264, 266, 270, 273, 277, 280, 281, 282, 283, 285, 286, 287, 288, 289, 294, 298, 300, 309, 316, 317, 320, 321], "detailed_controller_comparison": 321, "detailed_metr": [58, 255], "detect": [1, 4, 7, 8, 11, 12, 14, 16, 17, 19, 22, 24, 25, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 44, 50, 51, 52, 56, 57, 58, 61, 62, 63, 64, 65, 70, 72, 73, 75, 79, 89, 90, 92, 93, 95, 98, 102, 104, 107, 114, 115, 117, 121, 122, 123, 124, 133, 135, 136, 162, 167, 173, 176, 177, 178, 181, 188, 189, 190, 192, 193, 194, 199, 201, 202, 203, 205, 207, 209, 210, 213, 214, 216, 217, 218, 220, 223, 225, 232, 235, 240, 242, 243, 244, 246, 248, 250, 253, 254, 256, 257, 260, 276, 279, 280, 282, 283, 285, 290, 291, 292, 293, 298, 300, 301, 306, 309, 313, 318, 320, 321, 323], "detect_ai_pattern": 12, "detect_memory_leak": 98, "detection_delai": 119, "detection_delay_target": 119, "detection_lat": 119, "detection_r": 119, "detection_tim": 119, "detector": [104, 119], "determin": [17, 19, 53, 67, 79, 98, 101, 109, 111, 123, 125, 163, 196, 197, 205, 206, 209, 222, 224, 225, 226, 233, 234, 239, 240, 253, 255, 280, 288, 291, 294, 310, 312], "determine_controller_transit": 37, "determinist": [19, 34, 58, 65, 89, 107, 119, 150, 170, 188, 193, 199, 202, 203, 222, 224, 233, 234, 246, 247, 251, 265, 283, 293, 310, 317], "deterministic_dynam": 293, "detrend": 310, "dev": [8, 13, 15, 17, 22, 65, 90, 91, 92, 119, 136, 169, 170, 254, 266, 267, 268, 270, 271, 282, 297, 298], "dev_tool": [10, 65, 67, 70, 71, 297], "develop": [2, 4, 8, 9, 13, 15, 17, 19, 24, 29, 36, 37, 39, 40, 44, 45, 49, 52, 56, 59, 71, 72, 73, 82, 89, 93, 94, 95, 98, 129, 130, 132, 134, 137, 139, 141, 144, 145, 146, 151, 154, 158, 162, 167, 169, 188, 189, 190, 198, 200, 203, 207, 208, 210, 211, 216, 219, 220, 222, 223, 224, 228, 229, 232, 233, 234, 235, 236, 238, 242, 243, 253, 255, 258, 259, 261, 265, 266, 278, 284, 288, 289, 293, 294, 297, 298, 300, 304, 315, 317, 321, 322], "development_timelin": 300, "deviat": [5, 19, 43, 53, 61, 62, 65, 74, 82, 84, 95, 117, 119, 120, 128, 129, 131, 146, 149, 164, 167, 169, 170, 177, 185, 199, 222, 224, 226, 232, 233, 234, 239, 246, 259, 265, 285, 296, 310, 313, 318], "devic": [13, 31, 91, 92, 144, 150, 223, 235], "device_driv": 9, "devnul": 315, "devop": [93, 98], "devtool": [31, 142, 144, 155], "df": [51, 53, 65, 97, 149, 169, 170, 178, 254, 318, 320], "df1": 320, "df2": 320, "df_pivot": 169, "df_sort": 51, "dfig": [222, 233], "di": [2, 17], "dia": [228, 229, 236, 238], "diag": [35, 84, 133, 213, 249, 258, 291, 294], "diagnos": [77, 85, 115, 117, 148, 254, 309, 310, 322], "diagnose_adapt": 77, "diagnose_classical_smc": 78, "diagnose_config_valid": 115, "diagnose_control": 321, "diagnose_controller_st": 254, "diagnose_controller_type_error": 115, "diagnose_converg": [133, 201], "diagnose_deprecation_warn": 115, "diagnose_energi": 86, "diagnose_false_alarm": 119, "diagnose_gain_count_error": 115, "diagnose_gain_valu": 115, "diagnose_hybrid_control": 81, "diagnose_import_error": 115, "diagnose_memory_usag": 115, "diagnose_missed_fault": 119, "diagnose_optional_depend": 115, "diagnose_pso_bounds_error": 115, "diagnose_pso_factory_error": 115, "diagnose_pso_issu": 321, "diagnose_sta_health": 85, "diagnose_thread_safety_issu": 115, "diagnosi": [40, 67, 69, 94, 95, 142, 148, 166, 170, 201, 254, 261, 275, 298, 310, 321], "diagnost": [9, 17, 40, 44, 51, 56, 61, 64, 65, 67, 78, 81, 86, 95, 106, 118, 119, 124, 127, 129, 130, 138, 177, 202, 216, 220, 245, 250, 261, 275, 291, 292, 321], "diagnostic_info": 115, "diagnostic_plot": 9, "diagnostic_test": 254, "diagon": [22, 35, 198, 205, 215, 220, 221, 225, 226, 239, 240, 290, 291], "diagram": [8, 13, 27, 29, 30, 31, 53, 56, 58, 61, 64, 74, 127, 130, 137, 138, 161, 163, 215, 232, 264, 269, 297, 316], "dialog": 15, "diamet": 202, "diamond": [8, 84], "diamond2016cvxpi": 8, "diataxi": 138, "dickei": 310, "dict": [10, 17, 36, 38, 39, 40, 44, 49, 52, 53, 55, 61, 71, 73, 75, 76, 77, 78, 82, 85, 86, 92, 94, 98, 100, 102, 103, 105, 107, 114, 117, 127, 151, 167, 191, 194, 196, 203, 208, 209, 210, 211, 215, 216, 220, 255, 274, 275, 277, 279, 280, 287, 291, 298, 300, 301, 313, 321], "dict_config": 114, "dict_to_config": 72, "dictat": [202, 222, 233], "dictionari": [10, 39, 40, 49, 51, 56, 61, 78, 80, 82, 98, 102, 103, 105, 107, 109, 114, 117, 196, 215, 220, 301, 318], "did": [53, 98, 115, 135, 165, 280], "didn": 26, "diff": [1, 35, 44, 70, 77, 85, 137, 148, 151, 162, 166, 171, 177, 195, 202, 210, 215, 247, 280, 287, 300, 313, 320], "differ": [11, 13, 17, 22, 24, 27, 30, 35, 44, 50, 51, 52, 53, 55, 61, 65, 67, 68, 72, 73, 75, 84, 85, 86, 90, 91, 97, 98, 101, 104, 106, 113, 114, 117, 119, 120, 124, 127, 129, 131, 133, 136, 141, 142, 144, 146, 147, 148, 149, 155, 156, 163, 164, 166, 169, 170, 178, 185, 198, 200, 201, 202, 203, 205, 209, 215, 216, 220, 221, 222, 224, 226, 229, 230, 232, 233, 234, 237, 238, 239, 247, 248, 253, 254, 259, 263, 265, 274, 276, 277, 284, 287, 290, 293, 303, 308, 315, 316, 318, 320, 321], "differenti": [9, 17, 35, 44, 53, 57, 58, 78, 84, 85, 103, 121, 122, 123, 160, 162, 167, 193, 195, 196, 199, 200, 202, 204, 205, 206, 222, 223, 230, 232, 233, 235, 237, 250, 283, 287, 290], "difficult": [10, 53, 148, 215, 222, 232, 233], "difficulti": [17, 162, 166, 199, 200, 222, 233], "difflib": 115, "digit": [290, 294, 317], "dijkstra": 17, "dilemma": [222, 230, 233, 237], "dim": [53, 203, 313], "dimens": [38, 51, 52, 55, 56, 59, 75, 76, 88, 94, 95, 98, 101, 104, 107, 119, 161, 162, 167, 171, 193, 194, 201, 202, 203, 215, 216, 242, 246, 249, 250, 258, 278, 279, 291, 293, 301, 303, 310], "dimension": [19, 51, 61, 67, 76, 85, 119, 129, 134, 162, 167, 181, 182, 184, 193, 201, 202, 220, 222, 223, 224, 225, 233, 234, 235, 240, 246, 247, 249, 255, 280, 290, 293, 294, 310], "dimension_d": 202, "dimensionless": [68, 74, 258, 273], "diminish": 158, "din": [226, 227, 231, 239], "dip": [2, 12, 13, 17, 19, 25, 26, 31, 34, 37, 42, 44, 52, 61, 64, 66, 69, 70, 75, 82, 83, 84, 86, 90, 91, 92, 94, 95, 98, 107, 121, 122, 123, 124, 126, 127, 131, 134, 137, 138, 147, 163, 166, 168, 169, 177, 182, 187, 197, 198, 199, 200, 202, 203, 211, 215, 222, 224, 226, 232, 233, 234, 239, 241, 246, 249, 250, 251, 253, 254, 258, 262, 263, 277, 282, 283, 286, 293, 294, 299, 300, 302, 305, 308, 315, 316, 320, 322], "dip_": 32, "dip_block_2007_dip_benchmark": 122, "dip_boubaker_2013_double_inverted_pendulum_benchmark": 295, "dip_config": 131, "dip_controller_classical_gain": 72, "dip_doc": 13, "dip_dur": 131, "dip_dynam": [13, 150], "dip_env": 72, "dip_ful": 61, "dip_full_dynam": 131, "dip_furuta_2003_swing_up_control": 295, "dip_goldstein_2002_classical_mechan": 295, "dip_khalil_2002_nonlinear_system": [187, 225, 299], "dip_lowrank": 61, "dip_od": 232, "dip_param": [80, 100, 101, 128, 131, 134, 135, 136, 150, 164, 166, 169, 170, 274], "dip_parameter_vector": 293, "dip_pso_n_particl": 72, "dip_simulation_dur": 72, "dip_smc_object": 293, "dip_smc_pso": [28, 64, 82, 83, 89, 90, 95, 139, 141, 159, 185, 190, 199, 232, 256, 257, 259, 264, 265, 288, 289, 294], "dip_smc_pso_2025": [2, 122, 129], "dip_spong_2006_robot_modeling_control": 295, "dip_system": [288, 289, 317], "dip_system_diagram": [288, 289, 317], "dipanim": 136, "dipc": 232, "dipconfig": [65, 67], "dipdynam": [17, 51, 71, 80, 100, 101, 275, 276, 283], "dipparam": [53, 131, 134, 224, 234, 250], "dipphysicsmatric": 220, "dir": [33, 80, 90, 91, 92, 109, 117, 255], "direct": [1, 12, 20, 24, 25, 27, 28, 31, 33, 35, 38, 39, 44, 52, 56, 64, 67, 80, 81, 82, 83, 86, 91, 99, 108, 109, 117, 118, 120, 122, 123, 127, 132, 140, 147, 152, 153, 156, 161, 162, 163, 164, 166, 167, 193, 197, 202, 205, 220, 222, 228, 229, 230, 233, 236, 237, 238, 247, 248, 259, 262, 263, 267, 274, 287, 290, 291, 293, 299, 302, 303, 317], "directli": [12, 19, 27, 29, 39, 40, 41, 62, 65, 67, 74, 79, 86, 88, 98, 107, 120, 129, 151, 152, 153, 155, 157, 163, 170, 189, 222, 224, 225, 226, 233, 234, 239, 240, 248, 249, 256, 262, 282, 313], "directori": [13, 17, 22, 24, 25, 26, 34, 44, 53, 57, 69, 70, 92, 94, 108, 115, 117, 128, 129, 137, 138, 141, 144, 146, 150, 154, 164, 170, 187, 188, 189, 190, 199, 208, 221, 224, 234, 255, 259, 265, 271, 297, 299, 321, 323], "disabl": [22, 34, 78, 79, 84, 90, 92, 98, 111, 118, 119, 120, 140, 142, 144, 145, 159, 177, 185, 196, 203, 205, 213, 216, 220, 226, 232, 239, 253, 265, 276, 285, 290, 321], "disadvantag": [120, 197, 199, 205, 232, 248], "disagre": 298, "disallow": 5, "disallow_incomplete_def": 300, "disallow_untyped_def": 300, "disast": [11, 127, 175, 177], "discard": [117, 177, 185], "disciplin": 7, "disclaim": [15, 65], "disclos": [15, 67], "disclosur": [28, 30, 31, 266], "disconnect": [31, 185, 261], "discontinu": [35, 65, 67, 79, 82, 83, 84, 85, 86, 99, 125, 127, 129, 136, 148, 156, 163, 164, 166, 177, 183, 185, 192, 193, 195, 196, 197, 199, 201, 204, 206, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 249, 258, 273, 287, 290, 294], "discourag": [229, 238], "discov": [14, 23, 162, 230, 237], "discover": [6, 7, 19, 138], "discoveri": [8, 80, 88, 92, 104, 202, 243, 310], "discrep": [222, 233, 310], "discret": [9, 35, 55, 59, 61, 73, 77, 82, 85, 93, 98, 146, 162, 164, 191, 196, 200, 201, 202, 205, 213, 223, 227, 231, 232, 235, 258, 273, 279, 286, 291, 294, 310], "discrete_compon": 294, "discrete_control": 61, "discrete_smc": [290, 294], "discrimin": 293, "discuss": [15, 129, 146, 222, 226, 228, 232, 233, 236, 239, 265, 295, 309, 310, 320], "disk": [29, 70, 91, 92, 93, 124, 146, 154, 182, 210, 242, 245, 254], "disk_free_gb": 254, "disk_io": 252, "disk_usag": [92, 93, 254], "dismc": [224, 234], "dismiss": 31, "dismissupd": 31, "dispatch": [17, 59, 94, 203], "displac": [75, 117, 146, 150, 164, 167, 224, 232, 234, 265], "displai": [1, 7, 13, 27, 29, 30, 31, 51, 52, 61, 68, 76, 97, 98, 127, 142, 144, 146, 150, 165, 232, 248, 258, 260, 265, 268, 282, 285, 315], "display_comparison_result": 112, "display_github": 315, "disrupt": 147, "dissip": [86, 156, 170, 200, 220, 225, 240, 317], "dist": [36, 282, 310, 313], "dist_analysi": [310, 313], "dist_nam": 313, "dist_param": 310, "distanc": [45, 74, 78, 98, 112, 140, 163, 193, 202, 215, 220, 221, 232, 272, 291], "distances_to_gbest": 291, "distinct": [17, 26, 78, 98, 201, 205, 222, 233, 259], "distinguish": [12, 40, 121, 145, 297, 313], "distort": 268, "distribut": [7, 8, 14, 15, 17, 19, 27, 36, 63, 65, 68, 77, 78, 81, 85, 97, 118, 120, 127, 135, 155, 157, 169, 170, 171, 178, 182, 185, 193, 205, 209, 218, 223, 224, 225, 230, 232, 234, 235, 237, 240, 242, 243, 245, 249, 250, 256, 259, 261, 282, 283, 284, 290, 298, 300, 308, 312, 317, 320, 322], "distribute_optim": 63, "distributed_control_setup": 321, "distributedcomput": 317, "distributedcontrollermanag": 63, "distributedoptimizationresult": 63, "distribution_analysi": [310, 313], "distribution_fit": [310, 313], "disturb": [12, 36, 37, 45, 50, 53, 61, 62, 65, 67, 75, 77, 78, 81, 82, 85, 86, 90, 95, 98, 99, 103, 108, 109, 113, 114, 123, 125, 129, 132, 134, 146, 150, 152, 156, 161, 163, 164, 166, 167, 168, 170, 182, 183, 191, 193, 195, 199, 201, 202, 203, 206, 220, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 242, 245, 249, 253, 275, 277, 278, 279, 282, 283, 284, 287, 291, 294, 296, 310, 317, 321], "disturbance_amplitud": 112, "disturbance_attenu": 75, "disturbance_magnitud": 134, "disturbance_reject": [101, 112, 248], "disturbance_rejection_adequ": 75, "disturbance_scenario": 75, "disturbance_step": 113, "disturbancerejectiontestcas": 75, "disturbancerejectiontestresult": 75, "disturbed_control": 134, "disturbeddynam": 134, "dither": 268, "div": [53, 140, 141, 142, 143, 144, 267, 269, 271], "dive": [130, 146, 160, 161, 162, 163, 164, 167, 303, 305], "diverg": [37, 53, 78, 86, 126, 127, 128, 151, 164, 166, 167, 182, 191, 193, 205, 216, 222, 224, 230, 232, 233, 234, 237, 245, 247, 251, 254, 261, 290, 293, 308], "divers": [52, 57, 58, 61, 73, 98, 104, 109, 112, 124, 133, 148, 162, 165, 167, 182, 188, 201, 202, 214, 245, 246, 247, 248, 250, 253, 254, 280, 290, 291, 293, 303, 310, 313, 319, 321], "diversifi": 321, "diversity_bonu": 112, "diversity_collaps": 247, "diversity_histori": [98, 104, 201, 214], "diversity_loss_r": 53, "diversity_loss_rate_threshold": 53, "diversity_mainten": 247, "diversity_measur": 293, "diversity_metr": 248, "diversity_norm": 215, "diversity_ratio": 148, "diversity_threshold": 254, "diversity_trend": 98, "diversity_valu": 248, "diversity_weight": 112, "divid": [35, 79, 224, 234, 246], "dividend": 79, "divis": [35, 82, 84, 127, 193, 195, 196, 206, 224, 234, 246, 273, 274, 276, 290], "divisor": 79, "di\u00e1taxi": 127, "dk": [77, 79, 82, 287], "dk_histori": 77, "dkr": 91, "dm": 287, "dn": 91, "do": [12, 15, 39, 44, 51, 56, 74, 92, 94, 111, 122, 123, 127, 128, 132, 144, 148, 164, 166, 167, 225, 230, 237, 240, 253, 254, 298], "doc": [8, 9, 10, 12, 13, 15, 16, 19, 21, 22, 25, 26, 27, 28, 29, 30, 44, 49, 51, 52, 55, 56, 59, 67, 69, 71, 72, 73, 75, 76, 77, 78, 81, 84, 85, 86, 88, 89, 91, 93, 94, 98, 99, 103, 104, 105, 106, 107, 108, 111, 112, 115, 116, 117, 120, 122, 124, 125, 126, 127, 128, 129, 137, 138, 139, 140, 142, 143, 144, 145, 154, 159, 165, 170, 186, 187, 188, 189, 190, 191, 193, 194, 202, 203, 208, 209, 211, 217, 220, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 261, 262, 266, 267, 271, 281, 282, 283, 284, 286, 287, 288, 290, 291, 293, 294, 295, 297, 299, 300, 301, 303, 310, 316, 318, 320, 321, 323], "doc_coverag": 242, "doc_exampl": 14, "dock": [267, 268, 271], "docker": [92, 95, 189, 241, 242, 262, 263], "docker_buildkit": 91, "dockerfil": [90, 92], "dockerignor": 91, "docnam": 89, "docs_audit": 12, "docs_compli": 255, "docs_fast": 96, "docstr": [4, 9, 10, 17, 19, 25, 28, 44, 52, 56, 59, 67, 71, 89, 93, 122, 125, 126, 165, 194, 242, 301, 309], "docstring_norm": 298, "doctest": [13, 55, 140, 141], "doctre": [16, 89, 188], "document": [2, 3, 15, 18, 20, 21, 22, 27, 30, 31, 34, 37, 38, 41, 44, 50, 51, 65, 68, 71, 75, 79, 80, 88, 91, 92, 108, 111, 118, 120, 123, 128, 132, 133, 134, 135, 136, 139, 143, 144, 146, 148, 152, 153, 155, 157, 159, 170, 171, 177, 178, 182, 183, 190, 197, 198, 199, 200, 201, 202, 204, 212, 215, 218, 221, 222, 224, 232, 233, 234, 242, 244, 245, 246, 249, 250, 251, 252, 253, 255, 256, 257, 271, 282, 286, 287, 288, 289, 290, 303, 311], "document_migration_chang": 108, "document_process": 252, "documentation_compli": 255, "documentation_coverage_matrix": 10, "documentation_expert": 252, "documentation_implementation_plan": 10, "documentation_inventory_2025": 11, "documentation_quality_scor": 10, "documentation_system": 7, "docutil": [24, 33, 232, 288], "dodd": 8, "doe": [25, 53, 62, 120, 147, 164, 165, 166, 169, 198, 222, 224, 225, 229, 232, 233, 234, 238, 240, 290, 306, 320], "doesn": [15, 17, 35, 38, 41, 67, 84, 98, 114, 117, 124, 125, 127, 131, 141, 144, 146, 165, 171, 177, 198, 254, 265, 297, 299, 313], "dof": [101, 129, 161, 163, 193, 225, 240, 287], "doi": [0, 2, 4, 8, 13, 15, 17, 24, 32, 78, 124, 125, 126, 169, 187, 188, 205, 256, 257, 297, 298, 320], "dollar": [8, 15], "dollarmath": [16, 89, 188], "dom": [143, 144], "domain": [10, 16, 17, 39, 49, 67, 71, 74, 79, 86, 89, 90, 92, 107, 127, 140, 170, 172, 188, 190, 193, 207, 208, 218, 221, 222, 224, 227, 229, 230, 231, 232, 233, 234, 237, 238, 248, 252, 266, 277, 282, 283, 285, 290, 294, 316], "domcontentload": 143, "dome": 268, "domegalleri": 268, "domin": [53, 57, 65, 67, 68, 77, 84, 85, 112, 135, 148, 162, 167, 172, 177, 193, 197, 201, 202, 205, 206, 209, 215, 220, 230, 237, 249, 290, 291, 293, 310], "dominant_frequ": 209, "dominated_solut": 291, "domination_count": 291, "don": [12, 17, 61, 98, 102, 105, 117, 120, 135, 147, 160, 167, 178, 200, 203, 207, 254, 255, 298], "donat": 270, "done": [30, 39, 44, 67, 98, 123, 128, 141, 148, 162, 163, 166, 167, 211, 253, 254], "dong": [226, 239], "dormand_princ": 61, "dormandprince45": 59, "dot": [13, 71, 74, 75, 81, 88, 97, 107, 125, 152, 156, 191, 193, 195, 198, 199, 200, 201, 202, 209, 216, 220, 221, 224, 225, 226, 227, 231, 232, 234, 239, 240, 242, 245, 246, 256, 258, 261, 268, 272, 279, 287, 288, 289, 290, 294, 295, 296, 298, 299], "dotal": 299, "dotgrid": [267, 268], "doubl": [13, 19, 20, 31, 40, 49, 52, 55, 62, 64, 66, 68, 69, 72, 74, 75, 76, 82, 83, 95, 97, 98, 113, 122, 127, 129, 131, 132, 135, 139, 146, 147, 152, 153, 157, 163, 165, 167, 168, 169, 177, 187, 189, 190, 193, 197, 199, 200, 201, 204, 206, 216, 218, 220, 221, 224, 227, 231, 232, 234, 241, 244, 246, 250, 251, 252, 253, 254, 257, 277, 286, 287, 288, 289, 293, 303, 316, 320], "double_inverted_pendulum": 313, "double_pendulum": [225, 240], "double_scalar": [35, 124], "doubleinvertedpendulum": [78, 84, 86, 130, 150, 151, 168, 203, 232, 274, 275, 313], "doublependulum": 118, "doublependulumparam": 208, "double\u00e2": 296, "doughnut": 159, "dover": 123, "doverpubl": 123, "down": [25, 31, 62, 82, 84, 91, 92, 140, 145, 146, 161, 163, 208, 213, 222, 223, 232, 233, 235, 242, 306], "downgrad": 298, "downhil": 163, "download": [27, 28, 31, 90, 91, 146, 150, 153, 155, 157, 170, 265], "downsampl": [118, 150, 157], "downstream": [300, 301], "downtim": 92, "downward": [148, 163, 222, 232, 233], "dozen": [230, 237], "dp45": 59, "dpi": [52, 61, 90, 136, 149, 169, 171, 177, 178, 215, 216, 248, 253, 254, 280, 320], "dq": 258, "dr": 120, "draft": [74, 221], "drag": [30, 152, 153, 156, 157, 263], "dramat": [29, 85, 98, 120, 290], "draw": [45, 53, 169, 216, 222, 224, 232, 233, 234, 246, 250, 256, 257], "drawback": [58, 205, 222, 227, 231, 233], "drawer": 31, "drawn": [45, 221, 222, 233], "drei": [267, 269, 271], "drift": [35, 65, 72, 73, 79, 93, 99, 103, 107, 112, 118, 119, 120, 166, 179, 188, 200, 209, 210, 219, 220, 225, 240, 243, 245, 249, 261, 273, 275, 276, 279, 285, 290], "drill": [173, 261], "drive": [78, 86, 156, 163, 164, 166, 193, 205, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239], "driven": [12, 22, 34, 39, 52, 57, 58, 80, 107, 116, 127, 137, 138, 151, 207, 209, 222, 223, 224, 227, 231, 233, 234, 235, 242, 266, 275, 283, 284], "driver": [91, 92, 177, 202], "drl": [224, 234], "drop": [22, 62, 92, 182, 222, 229, 230, 233, 237, 238, 247, 261, 290, 318], "dropdown": [1, 29, 30, 150, 153, 154, 170, 265], "dropna": 320, "dropout": [260, 296], "dry": [24, 32, 33, 70, 94, 321], "dry_run": 321, "dryad": 320, "dstate": 150, "dt": [17, 19, 20, 22, 30, 35, 37, 38, 41, 44, 49, 50, 51, 52, 53, 56, 59, 62, 68, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 92, 97, 98, 100, 101, 103, 105, 106, 113, 114, 115, 116, 117, 118, 120, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 146, 149, 150, 152, 156, 158, 161, 163, 164, 165, 166, 167, 168, 170, 171, 177, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 215, 216, 217, 220, 224, 225, 226, 229, 232, 234, 238, 239, 240, 242, 245, 246, 248, 249, 250, 252, 253, 254, 265, 273, 275, 276, 277, 279, 287, 288, 289, 290, 293, 294, 295, 300, 313, 318, 320, 321], "dt1": 161, "dt2": 161, "dt_actual": 177, "dt_control": 72, "dt_max": 135, "dt_mean": 177, "dt_min": 135, "dt_new": 200, "dt_next": [61, 200], "dt_std": 177, "dt_valu": 290, "dth1": 197, "dth2": 197, "dtheta": 168, "dtheta1": [35, 78, 79, 132, 134, 135, 136, 149, 164, 168, 226, 232, 239, 277], "dtheta2": [35, 78, 79, 132, 134, 135, 149, 164, 168, 198, 226, 232, 239, 277], "dtlz2": 193, "dtype": [44, 61, 76, 84, 98, 119, 135, 203, 209, 216, 232, 249, 254, 283, 284, 291, 321], "dt\u00b2": 61, "dt\u00b3": 61, "dt\u2075": 61, "du": [53, 68, 84, 107, 128, 216, 217, 246, 277, 293], "du_dt": [107, 166], "du_norm": 68, "du_rm": 68, "dual": [22, 30, 76, 81, 156, 205, 223, 226, 232, 235, 239, 244], "dubiou": 84, "duck": [10, 61], "due": [17, 58, 65, 67, 70, 79, 98, 118, 147, 161, 162, 164, 166, 177, 193, 197, 201, 202, 205, 209, 222, 226, 227, 230, 231, 232, 233, 237, 239, 246, 247, 249, 253, 283, 290, 294, 295, 300, 310], "dummi": [10, 51, 86, 313], "dump": [39, 67, 72, 93, 102, 104, 117, 133, 148, 159, 165, 216, 253, 254, 280, 282, 298, 303], "duplic": [4, 10, 16, 22, 24, 25, 26, 29, 32, 89, 93, 143, 177, 185, 188, 242, 256, 257, 298], "durabl": [89, 188], "durat": [12, 19, 22, 27, 28, 29, 35, 50, 51, 53, 72, 73, 76, 81, 82, 83, 84, 86, 89, 91, 92, 93, 98, 115, 117, 121, 125, 126, 127, 128, 129, 130, 131, 133, 135, 140, 146, 148, 150, 151, 159, 164, 165, 166, 167, 168, 169, 171, 177, 178, 182, 183, 188, 193, 200, 202, 203, 208, 210, 211, 215, 216, 222, 224, 227, 230, 231, 232, 233, 234, 237, 242, 252, 253, 254, 265, 267, 269, 277, 282, 283, 290, 320, 321], "durbin": 309, "dure": [1, 19, 25, 29, 30, 31, 33, 35, 37, 39, 40, 45, 51, 53, 56, 62, 65, 70, 73, 75, 84, 85, 86, 93, 98, 107, 111, 112, 114, 117, 118, 126, 132, 133, 136, 139, 141, 142, 143, 144, 145, 146, 147, 156, 158, 164, 165, 166, 167, 169, 171, 180, 183, 190, 196, 197, 205, 208, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 238, 239, 240, 244, 247, 250, 253, 254, 259, 260, 265, 273, 275, 280, 282, 290, 291, 297, 298, 300, 303, 310], "during_deploy": 255, "durrat": 216, "dv": [35, 37, 191, 287], "dv_dt": 274, "dwell": 279, "dx": [35, 53, 61, 79, 84, 94, 97, 127, 132, 134, 135, 146, 161, 164, 170, 197, 202, 215, 220, 277, 290], "dx1": 30, "dx2": 30, "dx3": 30, "dx4": 30, "dx_dt": 61, "dxdt": [200, 232], "dyn": [55, 78, 84, 86, 168, 210, 232, 278], "dynam": [1, 8, 9, 11, 12, 13, 17, 18, 19, 22, 24, 30, 32, 33, 34, 37, 38, 39, 49, 50, 52, 55, 56, 58, 62, 65, 67, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 87, 88, 90, 95, 98, 100, 101, 103, 106, 107, 108, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 133, 143, 146, 147, 150, 151, 152, 153, 156, 163, 164, 165, 166, 167, 168, 169, 170, 171, 177, 179, 183, 185, 189, 190, 192, 194, 195, 196, 197, 200, 201, 204, 206, 209, 210, 216, 217, 221, 222, 223, 226, 227, 231, 232, 233, 235, 239, 246, 247, 250, 251, 252, 253, 254, 257, 262, 267, 268, 269, 272, 273, 274, 275, 276, 278, 280, 282, 283, 284, 286, 289, 293, 294, 296, 297, 300, 304, 306, 316, 317, 320, 321, 323], "dynamic_adjust": 247, "dynamic_switch": [49, 72], "dynamicboundsselector": 247, "dynamicconfigurationmanag": 72, "dynamics_deriv": 220, "dynamics_ful": [9, 10, 39, 88, 134, 135, 221, 222, 223, 224, 225, 232, 233, 234, 235, 240, 317], "dynamics_full_type_error": 10, "dynamics_info": 17, "dynamics_interfac": [9, 52, 59, 220], "dynamics_model": [17, 44, 50, 52, 55, 56, 61, 72, 77, 78, 80, 81, 84, 86, 98, 100, 101, 116, 118, 120, 134, 135, 168, 196, 203, 210, 213, 216, 273, 274, 275, 321], "dynamics_models_guid": 198, "dynamics_od": [219, 220], "dynamics_plu": 44, "dynamics_simpl": 134, "dynamics_step": 203, "dynamics_test": 39, "dynamics_typ": 101, "dynamics_type_error": 10, "dynamicsawarecontrol": 17, "dynamicsful": 317, "dynamicsmodel": [52, 59, 127, 196], "dynamicsprotocol": 119, "dynamicsresult": [52, 59], "dynamicssimpl": 317, "dynamicswithmonitor": 35, "d\u00b2": 310, "d\u03b81": [35, 53, 94], "d\u03b82": [35, 53, 94], "d\u03b8\u2081": [127, 132, 135, 146, 149, 150, 164, 166, 170], "d\u03b8\u2082": [127, 132, 135, 146, 149, 150, 164, 166, 170], "d\u03c4": [84, 97], "d\u2096": 310, "e": [2, 5, 8, 22, 26, 32, 35, 38, 39, 40, 45, 49, 50, 51, 53, 56, 61, 62, 65, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 86, 88, 91, 92, 93, 97, 98, 99, 100, 102, 103, 105, 106, 107, 109, 114, 115, 117, 119, 121, 123, 125, 127, 131, 135, 136, 137, 139, 141, 142, 144, 145, 146, 150, 151, 162, 163, 165, 167, 169, 170, 177, 178, 191, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 208, 209, 213, 215, 221, 222, 223, 224, 225, 229, 232, 233, 234, 235, 238, 240, 242, 245, 246, 248, 249, 253, 254, 258, 271, 273, 275, 276, 277, 279, 280, 283, 287, 288, 289, 290, 293, 294, 298, 299, 300, 303, 306, 310, 313, 315, 316, 317, 318, 321], "e0": [219, 220], "e0203667": [227, 231], "e0204095": [226, 239], "e0282522": [226, 239], "e0e0e0": 30, "e1": [72, 76, 112, 125], "e103": 8, "e1_dot": 76, "e1f5f": [316, 317], "e2": [72, 76, 112, 114, 125, 229, 238, 277], "e2_dot": 76, "e3": 125, "e4": 125, "e74c3c": 30, "e8f5e8": [259, 316, 317], "e_": [86, 195, 200, 220, 290, 294, 296], "e_1": [97, 107, 191, 242, 245], "e_2": [97, 107, 191, 242, 245], "e_about_bottom": 86, "e_b": 86, "e_bottom": 86, "e_curr": [86, 220], "e_desir": 86, "e_filt": 86, "e_fin": [219, 220], "e_i": [84, 97, 200], "e_initi": 220, "e_k": 84, "e_kinet": 61, "e_n": 84, "e_potenti": 61, "e_prev": 86, "e_ratio": 86, "e_tot": 61, "e_upright": 86, "e_x": [258, 294], "e_\u03b8\u2081": 258, "e_\u03b8\u2082": 258, "each": [5, 10, 12, 14, 17, 19, 20, 22, 26, 32, 33, 36, 44, 45, 49, 50, 51, 52, 56, 58, 59, 61, 64, 65, 67, 68, 72, 73, 74, 75, 80, 82, 83, 84, 88, 94, 98, 103, 105, 106, 114, 115, 116, 117, 121, 123, 125, 127, 131, 133, 135, 137, 144, 145, 146, 148, 155, 157, 158, 161, 162, 164, 165, 167, 169, 170, 171, 178, 182, 190, 192, 198, 199, 201, 202, 203, 204, 209, 215, 216, 220, 221, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 243, 246, 247, 248, 249, 250, 253, 254, 257, 258, 260, 265, 266, 268, 269, 270, 271, 274, 275, 276, 277, 279, 285, 287, 290, 294, 295, 297, 298, 303, 306, 313, 315, 316, 322], "earli": [17, 19, 45, 50, 52, 57, 58, 59, 61, 65, 73, 76, 79, 91, 98, 104, 124, 133, 162, 167, 170, 171, 182, 188, 193, 199, 202, 213, 217, 222, 224, 229, 230, 232, 233, 234, 237, 238, 246, 247, 250, 253, 276, 280, 291, 292, 298, 318, 321], "earlier": [74, 86, 213, 221, 225, 226, 229, 238, 239, 240, 290, 300], "earlier_divers": 98, "early_plateau": 133, "early_stop": [117, 248, 251], "eas": [112, 139, 143, 197, 199, 303], "easi": [12, 31, 33, 52, 61, 72, 84, 86, 116, 122, 127, 139, 145, 162, 166, 169, 194, 222, 233, 266, 270, 310], "easier": [22, 26, 86, 145, 161, 162, 163, 197, 265, 310], "easiest": 271, "easili": [191, 197, 223, 235, 267], "east": 91, "eberhart": [2, 12, 58, 103, 122, 125, 162, 187, 199, 202, 230, 232, 237, 245, 246, 257, 290, 303, 320], "echo": [10, 39, 44, 70, 73, 90, 93, 123, 185, 207, 253, 255, 298], "eco": 84, "ecolor": 178, "ecosystem": [1, 2, 29, 30, 31, 59, 277], "ecr": 91, "ed": [35, 84, 199, 205, 213, 230, 237, 287, 290, 291, 297, 310], "edg": [1, 8, 10, 12, 16, 20, 27, 28, 30, 31, 37, 39, 40, 56, 65, 75, 87, 93, 98, 100, 125, 137, 139, 140, 141, 142, 143, 144, 145, 153, 156, 157, 172, 176, 188, 192, 199, 205, 207, 208, 213, 232, 242, 261, 265, 282, 297, 300, 306, 309, 310], "edge_case_config_result": 75, "edge_case_result": 75, "edgecasetestsuit": 75, "edgecolor": [170, 171], "edit": [1, 17, 27, 29, 70, 81, 92, 123, 127, 128, 141, 146, 147, 153, 155, 156, 165, 170, 171, 177, 182, 183, 185, 189, 199, 245, 257, 290, 298], "editor": [13, 27], "edu": [146, 222, 225, 233, 240], "educ": [29, 30, 31, 36, 61, 86, 146, 165, 166, 168, 183, 192, 219, 220, 226, 239, 259, 310], "edward": [78, 81, 97, 103, 163, 192, 194, 196, 197, 199, 204, 205, 206, 230, 237, 245, 246, 287, 290, 298, 320], "edwards1998": 13, "edwards1998slid": 257, "eff": [39, 53], "effect": [17, 24, 27, 28, 29, 32, 44, 49, 53, 55, 72, 78, 82, 84, 88, 98, 115, 118, 120, 127, 134, 135, 138, 140, 143, 145, 146, 152, 161, 162, 164, 169, 178, 191, 193, 196, 198, 199, 202, 205, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 233, 234, 235, 237, 239, 240, 241, 242, 247, 253, 255, 258, 259, 267, 268, 269, 274, 279, 283, 287, 288, 290, 294, 300, 308, 320], "effect_s": [169, 178, 274, 310, 313, 321], "effect_size_analysi": 310, "effective_control": 134, "effective_thick": 199, "effectiveness_trend": 255, "efficaci": [222, 233], "effici": [13, 16, 17, 36, 39, 40, 45, 52, 58, 66, 67, 76, 79, 81, 84, 90, 98, 103, 104, 105, 106, 114, 117, 127, 128, 129, 133, 135, 148, 149, 156, 162, 164, 165, 166, 167, 169, 170, 172, 184, 197, 199, 200, 202, 203, 217, 218, 222, 223, 224, 229, 232, 233, 234, 235, 238, 245, 247, 250, 253, 254, 259, 265, 275, 276, 277, 280, 283, 284, 290, 291, 295, 298, 303, 313, 317], "efficiency_cost": 148, "efficiency_scor": 52, "efficientstorag": 317, "effort": [9, 10, 12, 19, 20, 27, 28, 30, 35, 39, 44, 45, 48, 49, 51, 53, 54, 55, 56, 61, 66, 67, 72, 73, 77, 78, 81, 82, 84, 85, 92, 95, 97, 98, 99, 107, 113, 114, 124, 128, 133, 146, 147, 148, 150, 158, 159, 163, 164, 165, 166, 167, 169, 170, 172, 182, 193, 195, 197, 199, 201, 202, 214, 215, 216, 217, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 242, 245, 246, 250, 253, 259, 260, 265, 277, 289, 293, 298, 310, 316, 320, 321], "effort_norm": 201, "effort_valu": 148, "eig": [98, 154], "eigen1": 98, "eigen2": 98, "eigenvalu": [35, 52, 58, 78, 98, 123, 125, 160, 191, 195, 196, 200, 202, 205, 207, 220, 226, 239, 258, 279, 290, 291, 293, 294, 295], "eigenvalue_magnitud": 291, "eight": [229, 238], "eigs_p": 287, "eigval": [35, 220, 291], "eigvalsh": 287, "either": [61, 86, 144, 163, 232, 254], "ekanathan": [228, 236], "ekf_measurement_nois": 120, "ekf_process_nois": 120, "el": 161, "elaps": [61, 117, 170, 193, 203, 220], "elapsed_second": 318, "elapsed_tim": [92, 104, 248], "elast": [92, 224, 234, 268], "elasticsearch": 92, "elasticsearch_host": 92, "elasticslid": 268, "electr": [86, 205, 227, 228, 231, 236, 261, 268, 271, 317], "electricalenergi": 317, "electricalloss": 317, "electricbord": 268, "electro": [10, 205, 257], "electromechan": 123, "electron": [120, 205, 222, 224, 227, 228, 231, 233, 234, 236, 261, 290], "electrotechn": [223, 235], "element": [13, 29, 30, 31, 44, 45, 98, 101, 105, 118, 119, 140, 142, 143, 144, 193, 199, 204, 208, 209, 213, 225, 229, 238, 240, 246, 267, 268, 271, 273, 275, 283, 284, 291, 297, 310, 316], "elementtre": 39, "elev": 70, "elif": [17, 35, 39, 40, 42, 51, 52, 61, 67, 72, 82, 85, 86, 92, 98, 100, 101, 102, 114, 115, 117, 119, 120, 131, 133, 135, 149, 168, 169, 178, 199, 201, 202, 209, 214, 232, 249, 252, 253, 254, 255, 277, 279, 280, 290, 291, 301, 313, 320], "elig": 299, "elimin": [22, 25, 26, 33, 36, 37, 40, 44, 61, 65, 71, 74, 77, 81, 98, 99, 103, 106, 108, 120, 125, 160, 192, 194, 197, 201, 206, 213, 216, 217, 222, 223, 224, 226, 227, 229, 230, 231, 233, 234, 235, 237, 238, 239, 242, 245, 259, 290, 301, 318], "elit": [224, 234], "elitist": 291, "ell_": [227, 231], "ell_1": [227, 231], "ell_2": [227, 231], "els": [17, 31, 35, 38, 39, 40, 42, 49, 51, 53, 56, 61, 72, 73, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 92, 93, 98, 102, 105, 109, 114, 115, 116, 117, 119, 120, 133, 135, 136, 143, 144, 148, 149, 151, 162, 164, 165, 167, 168, 169, 171, 178, 183, 195, 197, 199, 200, 202, 203, 205, 208, 209, 210, 213, 214, 216, 219, 220, 249, 253, 254, 255, 270, 274, 276, 277, 279, 287, 291, 298, 300, 301, 310, 313, 320, 321], "elsewher": 44, "email": [90, 98, 122, 142, 144, 254], "emb": [14, 27, 29, 30, 154, 156, 159], "embarrassingli": 250, "embed": [1, 8, 29, 30, 31, 59, 67, 84, 100, 109, 118, 137, 152, 153, 159, 166, 224, 234, 256, 259, 290, 299], "emelyanov": 256, "emerg": [23, 36, 40, 55, 63, 70, 81, 87, 88, 93, 111, 115, 118, 173, 175, 176, 177, 185, 202, 205, 242, 243, 244, 245, 256, 277, 284, 301], "emergency_backup_": 254, "emergency_factory_reset": 115, "emergency_log": 111, "emergency_record": 111, "emergency_reset": [40, 81, 242, 301], "emergency_respons": 111, "emergency_shutdown": 321, "emergency_statu": 261, "emergency_stop": [93, 185, 261, 277, 321], "emergency_stop_condit": 277, "emergency_stop_en": 321, "emergency_stop_handl": 261, "emergency_stop_response_tim": 93, "emergency_stop_threshold": 92, "emergencyrecoverysystem": 261, "emergencystatusind": 261, "emit": [5, 22], "emoji": [25, 138, 140, 266], "emphas": [53, 68, 107, 113, 117, 118, 119, 128, 148, 149, 162, 167, 170, 202, 215, 310], "emphasi": [84, 113, 229, 230, 237, 238, 255], "emphasis": [45, 230, 232, 237], "empir": [53, 57, 58, 86, 120, 162, 184, 202, 232, 247, 251, 261, 291, 292, 299, 308, 310], "emploi": [82, 83, 195, 222, 224, 229, 230, 232, 233, 234, 237, 238], "empti": [51, 55, 61, 82, 98, 100, 114, 117, 168, 277, 291], "emptyset": 246, "emul": [144, 222, 233], "en": [15, 84, 123, 225, 232, 240, 288, 298, 315], "enabl": [8, 12, 17, 22, 27, 28, 29, 30, 31, 33, 36, 44, 45, 56, 58, 61, 64, 72, 73, 74, 75, 76, 78, 84, 85, 88, 89, 90, 92, 98, 102, 105, 107, 111, 118, 119, 120, 131, 132, 133, 135, 138, 140, 144, 145, 146, 153, 157, 159, 161, 164, 170, 171, 175, 177, 182, 185, 194, 199, 203, 213, 215, 216, 222, 223, 224, 226, 232, 233, 234, 235, 239, 244, 245, 247, 250, 251, 253, 255, 259, 261, 265, 275, 278, 280, 285, 293, 300, 306, 309, 310, 315, 318, 321], "enable_adapt": [131, 132], "enable_adaptive_bound": [275, 276, 280], "enable_adaptive_criteria": 53, "enable_bounds_valid": 53, "enable_cach": [107, 112], "enable_chattering_reduct": 321, "enable_convergence_monitor": 53, "enable_cusum": 119, "enable_early_stop": 104, "enable_equival": [51, 55, 81, 226, 239, 273, 275, 321], "enable_equivalent_control": [49, 72, 116, 117], "enable_fallback": 104, "enable_fast_mod": [216, 219, 220], "enable_fault_recoveri": 120, "enable_gpu_acceler": 104, "enable_gradient_guid": [276, 280], "enable_health_check": 92, "enable_input_valid": 92, "enable_legacy_compat": 107, "enable_log": 135, "enable_mathematical_constraint": 107, "enable_matrix_cach": 220, "enable_metr": 111, "enable_monitor": [61, 98, 104, 107, 216, 219, 220], "enable_nested_cv": 310, "enable_numba": 92, "enable_parallel_evalu": 104, "enable_performance_bound": 107, "enable_performance_predict": 52, "enable_pso_wrapp": 107, "enable_simulation_cach": 104, "enable_stability_check": 107, "enable_statistical_test": 119, "enable_type_safeti": 107, "enable_valid": [61, 220], "enablecor": 90, "encapsul": [10, 17, 61, 65, 222, 224, 233, 234], "encod": [25, 31, 34, 84, 190, 221, 222, 225, 233, 240, 255, 317], "encompass": [222, 233, 250], "encount": [35, 71, 95, 124, 145, 147, 171, 222, 233, 254], "encourag": [22, 112, 167, 193, 202, 205, 224, 226, 230, 232, 234, 237, 239], "encrypt": [93, 175], "end": [11, 20, 22, 24, 31, 33, 34, 38, 39, 40, 44, 53, 56, 57, 58, 59, 61, 76, 81, 84, 88, 93, 98, 103, 119, 124, 127, 129, 136, 137, 138, 140, 145, 146, 149, 152, 155, 156, 161, 162, 163, 164, 166, 167, 168, 177, 191, 195, 198, 199, 200, 201, 202, 203, 220, 221, 224, 227, 231, 232, 234, 242, 243, 245, 246, 250, 252, 253, 258, 259, 261, 277, 278, 279, 282, 283, 287, 288, 289, 290, 291, 293, 294, 295, 297, 298, 299, 314, 316, 317, 318, 323], "end_memori": 254, "end_tim": [59, 61, 76, 115, 116, 117, 209, 254, 280], "end_to_end": 283, "endian": 177, "endif": 72, "endnot": 122, "endors": 15, "endow": 232, "endpoint": [63, 90, 92, 93, 111, 251], "endscript": 92, "endswith": [92, 98, 254], "endtoendworkflowvalid": 199, "energi": [1, 9, 30, 45, 53, 55, 59, 61, 68, 74, 82, 98, 112, 128, 133, 135, 136, 146, 148, 149, 153, 163, 164, 165, 166, 167, 169, 170, 171, 172, 183, 197, 199, 201, 202, 203, 205, 209, 216, 217, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 246, 250, 253, 256, 260, 265, 279, 282, 283, 284, 287, 295, 303, 306, 310, 316, 317], "energy_conserv": 209, "energy_conservation_toler": 209, "energy_cost": 167, "energy_drift": [209, 219, 220], "energy_effici": 112, "energy_efficient_cost": 133, "energy_gain": 82, "energy_limit": [171, 203], "energy_norm": 133, "energy_ratio": 86, "energy_v": 133, "energyconservationresult": 209, "energycontour": 316, "enforc": [4, 5, 7, 10, 16, 17, 20, 22, 27, 38, 40, 45, 46, 52, 53, 58, 61, 63, 67, 70, 87, 89, 93, 94, 98, 100, 125, 126, 133, 167, 177, 188, 191, 196, 206, 216, 220, 223, 224, 226, 227, 230, 231, 234, 235, 237, 239, 242, 243, 244, 245, 246, 247, 250, 251, 260, 261, 284, 293, 294, 300, 301, 317], "enforce_safety_bound": 249, "eng": [223, 235], "engag": [22, 61, 84, 86, 127, 261, 268, 306], "engelbrecht": [123, 246, 291], "engin": [8, 9, 19, 20, 22, 36, 38, 39, 40, 44, 53, 63, 65, 67, 71, 73, 78, 81, 87, 88, 93, 95, 98, 111, 113, 116, 119, 121, 122, 127, 128, 135, 138, 143, 146, 160, 167, 171, 177, 182, 187, 190, 191, 192, 194, 196, 197, 199, 205, 213, 216, 217, 218, 222, 232, 233, 242, 243, 244, 245, 249, 251, 252, 254, 255, 261, 262, 263, 277, 282, 283, 284, 291, 293, 300, 301, 309, 310, 316, 317, 320, 321, 323], "engine_typ": 216, "englewood": 205, "english": [15, 265, 298], "enhanc": [1, 13, 14, 19, 25, 26, 36, 38, 39, 40, 51, 52, 53, 55, 56, 59, 63, 65, 73, 78, 79, 87, 92, 94, 107, 113, 120, 121, 122, 127, 135, 137, 138, 143, 152, 153, 156, 157, 165, 173, 174, 183, 185, 192, 199, 210, 216, 222, 226, 227, 229, 230, 231, 232, 233, 237, 238, 239, 241, 243, 244, 245, 248, 254, 255, 256, 259, 266, 270, 277, 292, 293, 298, 299, 301, 309, 310, 313, 316], "enhanced_convergence_analyz": [9, 53, 57, 58, 291, 292, 318], "enhanced_factory_api_refer": 103, "enhanced_featur": 19, "enhanced_hil": 9, "enhanced_pso_integration_guid": [104, 110, 304], "enhancedconvergenceanalyz": [52, 57, 58, 61], "enhancedfaultdetector": 119, "enhancedpsofactori": [51, 53, 56, 57, 58, 276, 277], "enjoi": 145, "enlarg": [82, 199, 226, 228, 230, 236, 237, 239], "enough": [35, 86, 99, 102, 114, 163, 178, 199, 200, 310, 313], "ensembl": [106, 309], "ensur": [7, 12, 13, 15, 17, 20, 22, 23, 24, 29, 31, 32, 34, 35, 38, 40, 49, 51, 52, 53, 56, 59, 63, 65, 67, 70, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 94, 97, 98, 103, 106, 112, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 133, 134, 135, 138, 143, 144, 145, 146, 147, 148, 153, 156, 159, 163, 164, 166, 169, 170, 171, 177, 179, 182, 183, 185, 187, 190, 191, 192, 193, 194, 196, 199, 200, 201, 204, 205, 206, 216, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 245, 249, 250, 252, 253, 254, 256, 257, 258, 261, 265, 269, 273, 275, 277, 285, 286, 287, 288, 291, 293, 294, 298, 299, 300, 301, 308, 309, 310, 313, 315, 318, 323], "enter": [1, 27, 30, 31, 64, 70, 86, 98, 145, 155, 191, 197, 205, 226, 239, 294, 306], "enter_safe_mod": 93, "enterpris": [36, 38, 40, 52, 56, 82, 89, 95, 98, 102, 218], "enterprisecontrollerfactori": 98, "enthusiast": 12, "entir": [1, 12, 25, 33, 98, 102, 129, 162, 167, 170, 191, 193, 199, 200, 202, 215, 222, 232, 233, 249, 268, 293, 297], "entrap": [222, 233], "entri": [2, 4, 7, 8, 11, 15, 17, 19, 22, 23, 24, 26, 28, 32, 37, 39, 40, 45, 51, 56, 57, 58, 61, 62, 63, 69, 70, 74, 77, 78, 82, 83, 85, 86, 89, 98, 107, 116, 117, 120, 124, 125, 126, 127, 138, 187, 199, 203, 210, 221, 222, 225, 226, 230, 232, 233, 237, 239, 240, 257, 282, 288, 297, 300, 317, 318], "entropi": [227, 228, 229, 231, 236, 238], "entrypoint": 90, "enum": [33, 49, 50, 52, 53, 56, 57, 58, 71, 80, 98, 105, 109, 115, 116, 127, 133, 168, 208, 273, 275, 280], "enumer": [35, 49, 50, 53, 56, 61, 73, 75, 79, 86, 98, 105, 114, 115, 116, 117, 133, 148, 150, 170, 171, 193, 208, 209, 215, 216, 232, 247, 248, 249, 252, 253, 254, 274, 277, 313, 321], "env": [49, 52, 63, 70, 72, 76, 92, 127, 131, 177, 254], "env_config": 72, "env_manag": 72, "env_overrid": 72, "env_var_overrid": 72, "envelop": 261, "environ": [8, 11, 12, 16, 17, 22, 24, 25, 26, 28, 29, 31, 33, 36, 50, 56, 58, 63, 67, 70, 73, 81, 89, 90, 91, 93, 95, 98, 106, 114, 121, 126, 127, 130, 146, 153, 164, 166, 170, 177, 180, 182, 188, 189, 205, 210, 223, 227, 229, 231, 232, 235, 238, 241, 242, 251, 253, 257, 261, 284, 285, 298, 299, 320, 321], "environment": 220, "environmentconfigurationmanag": 72, "environmenterror": 93, "eof": [90, 128, 298], "eom": [161, 228, 232, 236], "ep": [44, 84, 164, 195, 197], "epistem": 310, "eps_ab": 84, "eps_adapt": 195, "eps_dyn": [78, 290], "eps_eff": [82, 83], "eps_rel": 84, "eps_tap": 197, "epsilon": [17, 22, 37, 65, 78, 82, 132, 136, 167, 168, 182, 191, 193, 195, 196, 199, 201, 224, 226, 227, 231, 232, 234, 239, 246, 258, 261, 287, 288, 290, 291, 293, 294], "epsilon0": [78, 195, 290], "epsilon1": [78, 195, 290], "epsilon_": [53, 81, 88, 193, 195, 209, 287, 290, 293], "epsilon_0": 195, "epsilon_1": 195, "epsilon_div": 290, "epsilon_eff": [82, 83, 290], "epsilon_valu": 164, "epub": 13, "eq": [13, 81, 93, 191, 195, 199, 202, 224, 226, 227, 231, 232, 234, 239, 253, 254, 255, 256, 257, 258, 279, 286, 287, 288, 289, 293, 294, 295], "eq_control": 213, "eq_domin": 78, "eq_input": 44, "eq_magnitud": 78, "eq_ratio": [82, 83], "eq_satur": 78, "eq_stat": 44, "eq_threshold": [78, 290], "equal": [35, 57, 59, 84, 88, 107, 119, 148, 178, 229, 232, 237, 238, 287, 290, 291, 309, 310, 313], "equal_var": [68, 149, 169, 178, 274, 313, 320, 321], "equat": [7, 8, 13, 19, 30, 35, 52, 55, 58, 59, 61, 64, 67, 84, 89, 97, 127, 129, 130, 145, 160, 162, 164, 167, 182, 188, 191, 193, 199, 200, 202, 205, 219, 222, 224, 226, 232, 233, 234, 239, 242, 245, 246, 257, 258, 286, 289, 290, 293, 294, 295, 298, 309, 317], "equilibrium": [68, 73, 79, 81, 86, 97, 98, 114, 129, 134, 149, 151, 156, 161, 163, 164, 168, 170, 194, 195, 196, 198, 204, 205, 213, 220, 221, 222, 223, 227, 230, 231, 232, 233, 235, 237, 246, 249, 254, 261, 265, 285, 287, 290, 295, 296, 306, 313, 316, 317], "equilibrium_input": 220, "equilibrium_point": [220, 295], "equilibrium_st": 220, "equip": [166, 285], "equiv": [85, 299], "equival": [17, 22, 49, 51, 61, 63, 81, 82, 83, 87, 97, 99, 103, 107, 118, 163, 168, 183, 191, 196, 197, 199, 201, 202, 204, 205, 208, 213, 222, 224, 225, 227, 231, 232, 233, 234, 240, 249, 258, 273, 274, 275, 279, 287, 289, 290, 294, 317, 321], "equivalent_control": [9, 17, 78, 81, 213, 274, 294], "equivalentcontrol": 213, "equivcontrol": 317, "erich": 17, "err": [61, 84, 200], "errat": 202, "error": [1, 10, 11, 13, 14, 16, 17, 19, 22, 23, 27, 28, 29, 30, 31, 34, 37, 38, 45, 48, 52, 53, 56, 58, 59, 61, 62, 63, 65, 67, 68, 70, 71, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 90, 91, 93, 97, 98, 100, 103, 105, 106, 109, 110, 114, 115, 117, 118, 123, 125, 126, 127, 128, 129, 131, 132, 133, 138, 141, 142, 144, 145, 146, 151, 153, 155, 156, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 177, 178, 182, 183, 187, 188, 190, 192, 193, 194, 196, 198, 199, 201, 203, 206, 207, 209, 210, 212, 213, 215, 216, 217, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 244, 245, 246, 248, 249, 250, 253, 254, 258, 259, 260, 265, 267, 269, 272, 273, 276, 277, 279, 284, 285, 287, 288, 289, 291, 293, 294, 296, 298, 302, 306, 313, 316, 317, 318, 320, 321], "error_arrai": 75, "error_cas": 98, "error_categori": 252, "error_config": 104, "error_context": 104, "error_control": 9, "error_count": 72, "error_detail": [115, 313], "error_handl": [75, 98, 300], "error_handling_config": 104, "error_handling_exampl": 49, "error_handling_summari": 75, "error_info": 252, "error_log": 300, "error_low": 115, "error_messag": [98, 115, 208, 251], "error_metr": 98, "error_msg": [112, 280], "error_norm": 149, "error_propag": 300, "error_r": [63, 93, 98, 111, 321], "error_recovery_r": 252, "error_report": 111, "error_str": 115, "error_thresh": 98, "error_threshold": 98, "error_toler": 254, "error_trajectori": 75, "error_typ": 63, "errorbar": [178, 310], "errorcalc": 317, "errorcomp": 317, "errorhandlingframework": 63, "errorhandlingresult": 252, "ersi": [228, 236], "es6": [28, 157], "es_java_opt": 92, "esac": 254, "esc": 64, "escal": [93, 173, 226, 239], "escap": [24, 27, 30, 31, 33, 162, 193, 202, 247, 290], "eslint": 142, "especi": [17, 252], "essenti": [17, 30, 40, 61, 74, 91, 95, 99, 117, 122, 127, 147, 156, 161, 169, 171, 216, 220, 222, 226, 232, 233, 239, 247, 254, 300, 309, 318], "essential_param": 117, "est": [0, 4, 299], "establish": [19, 25, 26, 39, 67, 71, 75, 98, 119, 122, 127, 166, 175, 190, 192, 205, 218, 224, 230, 234, 237, 243, 245, 249, 256, 258, 261, 275, 289, 294, 299, 300, 309, 310], "establish_performance_baselin": 93, "estim": [9, 10, 11, 17, 27, 29, 31, 35, 36, 37, 38, 39, 40, 44, 45, 49, 51, 53, 56, 59, 61, 62, 63, 65, 67, 68, 69, 72, 73, 76, 82, 83, 88, 98, 100, 101, 103, 109, 112, 118, 122, 123, 124, 125, 127, 147, 150, 161, 165, 166, 167, 168, 169, 177, 178, 189, 191, 192, 193, 195, 197, 200, 201, 204, 205, 209, 220, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 237, 239, 242, 243, 245, 246, 247, 253, 254, 258, 273, 275, 276, 287, 288, 289, 290, 291, 294, 298, 304, 308, 309, 310, 317], "estimate_bound": [98, 99], "estimate_improvement_effort": 88, "estimate_lipschitz_const": [98, 107], "estimate_max_adaptation_r": 98, "estimate_memori": 171, "estimate_min_switching_gain": 98, "estimate_natural_frequ": 220, "estimate_reaching_tim": 283, "estimate_settling_time_chang": 98, "estimate_stability_properti": 98, "estimate_truncation_error": 35, "estimate_uncertainty_bound": 107, "estimated_bandwidth": 112, "estimated_convergence_r": 98, "estimated_convergence_tim": 98, "estimated_coverag": 255, "estimated_effort": [88, 255], "estimated_overshoot": 112, "estimated_pow": 310, "estimated_settling_tim": [98, 112], "estimated_uncertainti": [98, 112], "et": [2, 15, 17, 39, 84, 86, 122, 125, 161, 162, 163, 187, 192, 199, 202, 223, 224, 234, 235, 291, 297, 310, 320], "eta": [75, 81, 125, 126, 191, 195, 199, 209, 245, 257, 258, 287, 288, 289, 290, 293, 294, 298, 310], "eta1": 313, "eta2": 313, "eta_requir": 287, "etc": [2, 25, 30, 40, 50, 51, 53, 55, 56, 61, 63, 71, 86, 90, 91, 92, 94, 104, 107, 115, 116, 122, 127, 128, 142, 143, 144, 145, 154, 155, 168, 170, 177, 185, 188, 211, 221, 222, 233, 253, 254, 285, 309, 310, 313, 315], "etdc": [222, 233], "ether": 268, "ethernet": [177, 185], "etre": 39, "euclidean": [119, 227, 231, 289], "euler": [9, 52, 55, 59, 84, 134, 146, 150, 152, 199, 203, 205, 216, 217, 220, 221, 232, 278, 279, 283, 287, 295], "euler_lagrang": 295, "euler_step": 200, "eval": [53, 65, 129, 143, 164, 167, 193, 198, 200, 216], "eval1": [162, 259], "eval10": 259, "eval2": 162, "eval25": 259, "evalfit": 316, "evals_per_second": 193, "evalu": [16, 19, 20, 36, 38, 45, 49, 50, 52, 55, 56, 57, 58, 59, 61, 62, 64, 72, 74, 76, 81, 82, 83, 84, 86, 88, 95, 98, 103, 107, 114, 117, 120, 127, 135, 146, 148, 162, 166, 167, 171, 182, 198, 199, 200, 201, 202, 203, 210, 211, 215, 216, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 242, 245, 248, 249, 253, 254, 255, 261, 265, 274, 277, 283, 284, 290, 293, 294, 297, 300, 301, 306, 308, 313, 316, 317, 318, 321], "evaluate_actuator_stress": 248, "evaluate_adaptation_perform": 113, "evaluate_alert": 98, "evaluate_basic_perform": 248, "evaluate_canary_metr": 98, "evaluate_chattering_index": 248, "evaluate_comprehensive_perform": 248, "evaluate_control": [51, 98, 116, 148, 210, 300], "evaluate_control_effort": 248, "evaluate_controller_gain": 67, "evaluate_controller_perform": [49, 93, 112, 117, 313], "evaluate_detailed_perform": 248, "evaluate_fit": [201, 202], "evaluate_gain": 107, "evaluate_metr": 98, "evaluate_noise_toler": 248, "evaluate_particles_kernel": 104, "evaluate_perform": [116, 248, 321], "evaluate_popul": 215, "evaluate_robust": 248, "evaluate_robustness_index": 248, "evaluate_scenario_perform": 113, "evaluate_single_particl": [104, 254], "evaluate_single_step": 98, "evaluate_sta_precision_perform": 113, "evaluate_sta_robustness_perform": 113, "evaluate_stabil": 283, "evaluate_swarm_parallel": 98, "evaluate_tracking_error": 248, "evaluation_cach": 248, "evaluation_count": [98, 117, 248], "evaluation_interv": 92, "evaluation_lock": 98, "evaluation_tim": [98, 104, 117], "evaluation_time_histori": 98, "evaluations_per_second": [98, 104], "even": [12, 35, 70, 88, 119, 122, 145, 147, 163, 197, 205, 213, 223, 226, 230, 232, 235, 237, 239, 255, 290, 299], "event": [2, 8, 28, 31, 65, 93, 98, 135, 136, 139, 142, 144, 164, 165, 220, 226, 232, 239, 254, 256, 259, 306, 310], "event_fal": [228, 236], "everi": [17, 22, 24, 57, 63, 70, 81, 111, 121, 145, 147, 148, 149, 150, 167, 169, 208, 211, 248, 253, 254, 270, 290, 296, 300, 315, 320], "everyon": [2, 270], "everyth": [13, 31, 33, 51, 72, 146, 169, 170, 253], "everywher": [163, 195, 196, 201, 205], "evict": 98, "evid": [30, 31, 44, 169, 261, 313], "evidenc": [222, 233], "evol": 162, "evolut": [17, 27, 53, 57, 58, 81, 84, 86, 98, 105, 118, 119, 132, 156, 162, 164, 166, 191, 193, 202, 210, 215, 227, 231, 232, 243, 248, 250, 253, 255, 259, 316], "evolutionari": [9, 44, 123, 197, 199, 202, 205, 222, 223, 230, 233, 235, 237, 246, 257, 290, 291], "evolv": [40, 44, 119, 205, 227, 230, 231, 237, 256, 294], "ex": [70, 124], "exacerb": [230, 237], "exact": [17, 19, 30, 36, 51, 55, 68, 69, 84, 85, 123, 134, 135, 144, 156, 157, 163, 196, 197, 201, 205, 221, 222, 233, 261, 265, 290, 300, 320], "exactli": [13, 38, 45, 51, 53, 56, 57, 58, 72, 79, 80, 84, 85, 98, 101, 107, 117, 170, 191, 193, 196, 197, 199, 204, 205, 208, 225, 240, 268, 270, 273, 290, 297], "examin": [12, 187, 229, 238, 295], "exampl": [1, 8, 9, 10, 13, 16, 19, 20, 22, 23, 24, 25, 26, 28, 29, 33, 35, 37, 38, 39, 40, 41, 42, 46, 50, 52, 56, 62, 65, 67, 69, 70, 71, 73, 75, 81, 83, 86, 89, 92, 93, 94, 95, 98, 105, 106, 115, 118, 119, 120, 125, 127, 129, 131, 133, 134, 137, 138, 140, 144, 145, 146, 147, 148, 149, 163, 164, 165, 166, 167, 170, 187, 188, 189, 196, 197, 198, 199, 201, 202, 204, 209, 210, 211, 214, 217, 221, 222, 225, 226, 228, 230, 233, 236, 237, 239, 240, 242, 246, 249, 253, 254, 257, 259, 261, 265, 268, 270, 277, 279, 283, 287, 290, 291, 293, 301, 302, 304, 305, 307, 316, 318, 319, 320, 322, 323], "example_cod": 298, "exc_info": 300, "exce": [14, 16, 58, 59, 61, 73, 77, 85, 93, 98, 107, 111, 114, 119, 120, 125, 166, 167, 177, 188, 195, 201, 202, 203, 205, 210, 213, 216, 218, 222, 223, 225, 226, 227, 230, 231, 232, 233, 235, 237, 239, 240, 252, 253, 261, 278, 279, 285, 290, 291, 294, 306, 309, 313], "exceed": [7, 40, 57, 59, 68, 112, 116, 117, 119, 143, 144, 154, 170, 203, 218, 254, 277, 282, 291, 306, 308, 310], "excel": [19, 30, 32, 33, 36, 41, 57, 59, 67, 71, 107, 112, 113, 156, 157, 162, 163, 166, 202, 209, 218, 241, 244, 245, 247, 253, 280, 283, 284, 320], "except": [17, 19, 20, 35, 36, 38, 40, 49, 50, 52, 55, 56, 61, 62, 65, 67, 70, 71, 73, 75, 76, 78, 81, 82, 84, 85, 86, 88, 92, 93, 98, 100, 102, 103, 105, 106, 107, 109, 114, 115, 117, 124, 131, 132, 135, 136, 138, 143, 151, 161, 163, 168, 169, 177, 178, 198, 203, 207, 208, 209, 210, 213, 215, 216, 218, 220, 222, 233, 244, 254, 261, 273, 276, 277, 279, 284, 287, 300, 313, 315, 318, 321], "exception": [55, 230, 237], "exception_messag": 75, "exception_occur": 75, "exception_typ": 75, "excess": [49, 68, 72, 73, 76, 78, 84, 92, 98, 112, 116, 117, 127, 133, 164, 167, 182, 197, 201, 203, 205, 207, 208, 222, 226, 227, 230, 231, 233, 237, 239, 248, 249, 254, 273, 291], "excessivecontroleffort": 92, "exchang": [177, 185, 277], "excit": [12, 78, 82, 103, 163, 197, 199, 222, 223, 226, 227, 230, 231, 232, 233, 235, 237, 239, 288, 294], "excl": 284, "exclud": [31, 38, 49, 51, 61, 67, 70, 91, 94, 112, 118, 139, 143, 145, 177, 185, 254, 282, 299, 313], "exclude_lin": 39, "exclus": [39, 70, 139, 144, 208], "excurs": [230, 237, 265], "exec": [91, 92, 94], "execreload": 92, "execstart": [90, 92], "execut": [1, 4, 13, 16, 17, 19, 22, 37, 38, 39, 40, 50, 52, 53, 54, 64, 70, 76, 82, 83, 87, 90, 95, 98, 104, 105, 110, 111, 115, 119, 121, 122, 124, 126, 127, 129, 130, 137, 146, 149, 150, 156, 157, 164, 166, 167, 169, 170, 189, 192, 199, 203, 207, 208, 216, 229, 238, 241, 244, 246, 247, 250, 251, 253, 254, 262, 278, 280, 293, 297, 299, 301, 308, 310, 317, 320, 323], "execute_comprehensive_test": 75, "execute_continuous_improv": 255, "execute_coordinated_optim": 252, "execute_data_recoveri": 93, "execute_full_service_recoveri": 93, "execute_full_test_suit": 75, "execute_independent_quality_g": 255, "execute_load_scenario": 93, "execute_optim": 252, "execute_parallel_task": 252, "execute_parallel_valid": 255, "execute_parameter_sweep": 61, "execute_regression_test": 75, "execute_service_recoveri": 93, "execute_smoke_test": 93, "execute_test_with_coverag": 88, "execute_tests_with_coverag": 88, "execution_count": 154, "execution_tim": [39, 75, 98, 119, 203, 208, 209, 252, 255], "execution_time_analysi": 209, "execution_timestamp": 255, "executionpolici": [70, 146], "executiontim": 317, "executiontimeanalysi": 209, "executive_summari": [75, 255], "executor": [92, 104, 105, 106, 107, 133, 248, 253, 254, 280, 283], "exemplari": [19, 71], "exercis": [127, 164, 165, 166, 167, 222, 233, 261], "exert": 296, "exhaust": [93, 184, 210], "exhibit": [78, 163, 166, 205, 220, 222, 224, 227, 229, 230, 231, 232, 233, 234, 237, 238, 246, 299], "exist": [10, 17, 23, 26, 27, 28, 29, 38, 44, 50, 51, 53, 57, 67, 72, 80, 86, 89, 92, 102, 107, 115, 116, 117, 121, 122, 125, 126, 139, 140, 141, 142, 143, 144, 145, 147, 148, 168, 170, 171, 177, 193, 196, 199, 201, 202, 210, 232, 246, 251, 254, 255, 261, 265, 267, 274, 278, 282, 284, 291, 298, 304, 310, 313, 320], "exist_ok": [53, 102, 169, 178, 254, 298], "existing_simulation_workflow": 107, "exit": [1, 5, 10, 22, 23, 39, 86, 91, 92, 93, 120, 122, 136, 146, 147, 207, 248, 254, 255, 282, 283, 297, 298, 300], "exit_energy_factor": 86, "exit_factor": 86, "exoskeleton": [224, 234], "exp": [53, 75, 79, 84, 86, 125, 164, 193, 209, 249, 287, 291, 293], "expand": [1, 8, 27, 30, 53, 129, 137, 139, 140, 141, 142, 143, 144, 179, 198, 218, 223, 235, 243, 254, 279, 280, 283, 295], "expandal": 144, "expandedicon": [141, 142], "expans": [27, 58, 144, 200, 290, 310], "expect": [5, 7, 14, 19, 27, 28, 30, 31, 33, 34, 35, 38, 40, 44, 49, 50, 52, 59, 63, 65, 67, 72, 75, 76, 77, 82, 83, 88, 92, 98, 101, 107, 108, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 133, 134, 135, 145, 146, 164, 166, 167, 169, 177, 182, 183, 185, 191, 195, 200, 202, 203, 207, 208, 213, 223, 230, 235, 237, 242, 246, 247, 250, 252, 253, 273, 275, 278, 280, 283, 287, 293, 297, 300, 301, 306, 308, 309, 320, 321, 323], "expected_attribut": 63, "expected_behavior": 119, "expected_claim": 298, "expected_converg": 252, "expected_cost_rang": 252, "expected_count": [38, 51, 56, 80, 98, 100, 115, 116, 117, 127], "expected_detection_tim": 119, "expected_dim": 76, "expected_error": 114, "expected_gain": 114, "expected_improv": 255, "expected_length": [108, 136], "expected_norm": 119, "expected_reaching_r": 199, "expected_result": 320, "expected_st": 278, "expected_typ": [63, 247], "expected_valid": 127, "expected_valu": 151, "expected_vers": 93, "expectedtyp": 300, "expens": [14, 52, 65, 72, 76, 81, 85, 90, 104, 105, 106, 115, 117, 133, 154, 162, 167, 197, 202, 203, 222, 226, 229, 230, 232, 233, 237, 238, 239, 248, 250, 291, 310], "experi": [8, 17, 19, 22, 26, 27, 28, 30, 31, 45, 64, 74, 127, 129, 130, 146, 149, 150, 152, 153, 154, 155, 159, 162, 168, 170, 184, 188, 202, 216, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 255, 291, 310], "experienc": [40, 127, 177, 301], "experiment": [8, 28, 30, 31, 45, 61, 65, 67, 95, 125, 127, 128, 146, 153, 154, 155, 165, 170, 178, 223, 227, 228, 229, 231, 232, 235, 236, 238, 256, 257, 259, 265, 295, 308], "experimental_valid": 259, "expert": [11, 19, 24, 36, 39, 40, 55, 56, 57, 58, 63, 64, 65, 67, 71, 73, 77, 78, 81, 85, 92, 93, 95, 98, 129, 189, 190, 218, 222, 233, 241, 242, 245, 247, 249, 251, 252, 253, 261, 282, 283, 284, 287, 290, 298, 300, 301, 309, 318, 320, 321, 323], "expertis": [67, 222, 233, 253], "expir": [1, 31], "explain": [19, 27, 30, 55, 56, 57, 81, 127, 129, 146, 160, 162, 163, 165, 223, 235, 290, 309, 310, 315], "explan": [19, 30, 31, 55, 58, 127, 129, 138, 146, 165, 266, 298], "explanatori": [19, 147, 159, 165], "explicit": [10, 15, 19, 22, 26, 40, 51, 52, 55, 56, 78, 80, 82, 84, 100, 103, 109, 114, 116, 117, 168, 193, 198, 199, 201, 203, 204, 216, 217, 220, 222, 224, 225, 230, 232, 233, 234, 237, 240, 257, 276, 290, 298, 299, 300, 301], "explicit_gain": 114, "explicitli": [17, 45, 56, 70, 82, 84, 91, 103, 109, 125, 165, 210, 224, 225, 226, 230, 234, 237, 239, 240, 275, 300], "explod": [164, 202, 290], "exploit": [52, 65, 67, 73, 104, 112, 113, 123, 124, 133, 158, 160, 161, 167, 182, 193, 199, 214, 216, 224, 232, 234, 246, 247, 251, 253, 280, 291, 293, 308], "explor": [12, 27, 29, 30, 31, 52, 64, 65, 67, 73, 79, 80, 104, 112, 113, 123, 124, 127, 129, 133, 146, 147, 148, 150, 153, 154, 155, 157, 160, 163, 167, 170, 171, 181, 182, 184, 189, 193, 199, 201, 214, 216, 222, 223, 224, 226, 230, 232, 233, 234, 235, 237, 239, 244, 246, 247, 249, 250, 251, 252, 254, 259, 263, 264, 265, 269, 271, 276, 280, 282, 284, 290, 293, 308, 310, 323], "exploration_bound": 201, "exploration_low": 248, "exploration_upp": 248, "exploration_weight": [104, 112], "exploratori": [148, 310], "explos": [58, 162, 167, 199, 202, 215, 245, 246, 250, 291], "expm": 84, "expon": [51, 72, 98, 100, 101, 103, 127, 132, 193, 200, 273, 274, 275, 276, 290, 313], "exponenti": [30, 36, 40, 75, 77, 78, 79, 81, 82, 84, 85, 86, 97, 103, 116, 120, 121, 123, 126, 155, 163, 164, 193, 199, 202, 205, 209, 218, 224, 234, 279, 284, 287, 288, 290, 294, 308, 309, 310], "exponential_fit_valid": 75, "exponential_r": 279, "export": [1, 8, 9, 28, 30, 52, 59, 67, 89, 92, 111, 122, 124, 127, 129, 146, 147, 150, 153, 157, 165, 170, 177, 222, 223, 232, 233, 235, 251, 252, 254, 268, 269, 271, 282, 283, 303, 317, 318, 320, 323], "export_cit": [122, 320], "export_config": 320, "exportallchart": 28, "exportplot": [30, 156], "expos": [38, 51, 65, 67, 79, 90, 91, 92, 222, 223, 226, 233, 235, 239], "expr": 92, "express": [161, 221, 222, 225, 227, 231, 232, 233, 240, 279, 293, 297], "ext": 141, "extend": [26, 29, 39, 59, 63, 67, 75, 77, 82, 89, 92, 93, 98, 102, 104, 108, 117, 127, 159, 169, 192, 199, 204, 205, 222, 223, 224, 228, 233, 234, 235, 236, 244, 249, 256, 265, 272, 280, 282, 283, 284, 297, 300, 310], "extens": [1, 7, 13, 15, 16, 17, 19, 23, 31, 36, 37, 38, 45, 52, 55, 59, 61, 71, 72, 76, 80, 98, 107, 112, 116, 119, 120, 132, 134, 138, 139, 142, 144, 145, 155, 156, 159, 187, 188, 189, 194, 198, 209, 218, 224, 234, 243, 247, 250, 253, 278, 284, 293, 294], "extent": 232, "extern": [8, 13, 17, 19, 24, 25, 28, 31, 32, 34, 53, 62, 64, 74, 75, 76, 91, 93, 134, 156, 159, 192, 198, 210, 211, 216, 222, 223, 225, 229, 233, 235, 238, 240, 261, 265, 278, 283, 294, 295, 306, 317, 320], "external_disturb": [75, 98], "extra": [45, 73, 115, 131, 177, 209], "extra_latency_m": [177, 185], "extract": [0, 17, 38, 41, 49, 51, 53, 56, 57, 58, 71, 72, 75, 76, 77, 78, 79, 81, 82, 84, 86, 92, 98, 101, 102, 106, 107, 109, 113, 114, 117, 149, 150, 167, 168, 169, 170, 177, 193, 199, 204, 209, 210, 216, 217, 220, 224, 234, 250, 254, 255, 273, 274, 276, 277, 278, 280, 287, 290, 291, 300, 313, 320], "extract_all_cit": 297, "extract_all_claim": 298, "extract_doc_exampl": 14, "extract_env_var_overrid": 72, "extract_formal_claim": 299, "extract_from_notebook": 298, "extract_gains_from_config": 274, "extract_pareto_solut": 104, "extract_theorem": 299, "extracted_exampl": 14, "extracted_gain": [72, 116], "extraction_pattern": 72, "extraction_timestamp": 298, "extractor": [14, 298, 299], "extrapol": [35, 200, 313], "extrem": [65, 73, 75, 98, 113, 117, 119, 124, 131, 132, 161, 192, 196, 197, 199, 200, 207, 213, 224, 232, 234, 242, 280, 287, 290, 308, 309, 310], "extreme_gamma_gain": 114, "extreme_ratio": 213, "extreme_scenario": 75, "extreme_st": 98, "extreme_value_analysi": 310, "extremetestscenario": 75, "ey": [10, 35, 78, 198, 213, 220], "e\u00b2": 310, "e\u1d40q": 84, "e\u1d62": 204, "e\u2080": 75, "e\u2081": [76, 97, 99, 103, 194, 204, 253, 274, 279], "e\u2081dt": 99, "e\u2082": [76, 97, 99, 103, 194, 204, 253, 274, 279], "e\u2082dt": 99, "f": [9, 10, 13, 20, 25, 35, 37, 38, 39, 40, 44, 45, 49, 50, 51, 52, 55, 56, 58, 62, 65, 67, 68, 70, 72, 73, 74, 76, 77, 79, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 97, 98, 100, 101, 102, 103, 105, 106, 114, 115, 117, 118, 119, 120, 123, 127, 128, 130, 131, 132, 133, 134, 135, 136, 148, 149, 150, 151, 154, 156, 159, 164, 165, 166, 167, 169, 170, 171, 177, 178, 183, 193, 196, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 213, 214, 216, 217, 219, 220, 221, 225, 226, 227, 229, 231, 232, 238, 239, 240, 245, 246, 248, 249, 253, 254, 255, 261, 273, 276, 277, 279, 282, 283, 288, 290, 291, 293, 294, 296, 298, 300, 301, 303, 308, 310, 312, 315, 317, 320, 321], "f0": 84, "f1": 251, "f12": [141, 142, 144, 145], "f2": 251, "f3": 251, "f39c12": 30, "f3e5f5": [259, 316, 317], "f4": 251, "f64": 177, "f6536eec": 33, "f8f9fa": 30, "f_": [53, 193, 195, 200, 202, 232, 290, 291, 293], "f_1": [191, 193, 202, 291, 293], "f_2": [191, 193, 202, 291, 293], "f_3": [191, 202, 293], "f_4": 293, "f_best": [202, 292], "f_bound": 201, "f_c": 290, "f_cart": 84, "f_center": 201, "f_coulomb": 134, "f_eq": 97, "f_fastest": 84, "f_i": [193, 202, 209, 215, 246, 279, 291, 293], "f_in": 254, "f_interp": 201, "f_j": [193, 202, 209, 291], "f_k": 291, "f_m": [193, 291, 293], "f_max": [77, 78, 84, 85], "f_minu": 84, "f_onewai": [67, 313], "f_out": 254, "f_perturb": 201, "f_plu": 84, "f_stat": 313, "fac": 200, "face": [7, 10, 19, 137, 138, 222, 223, 233, 235], "facebook": 10, "facilit": 12, "facmax": 200, "facmin": 200, "fact": [12, 222, 233], "factor": [19, 51, 52, 58, 61, 69, 73, 78, 86, 88, 93, 97, 102, 103, 118, 119, 123, 166, 193, 199, 200, 206, 209, 213, 215, 216, 222, 224, 226, 233, 234, 239, 245, 246, 250, 251, 255, 256, 258, 259, 273, 289, 290, 291, 293, 298, 310], "factori": [2, 7, 9, 11, 14, 19, 20, 24, 32, 33, 34, 36, 37, 40, 42, 45, 55, 59, 65, 67, 68, 71, 75, 78, 79, 81, 86, 87, 88, 92, 93, 127, 128, 129, 130, 146, 147, 150, 151, 154, 165, 168, 170, 171, 182, 189, 190, 193, 196, 199, 203, 210, 215, 216, 217, 218, 224, 234, 242, 244, 245, 250, 253, 254, 266, 282, 283, 284, 291, 297, 300, 301, 302, 304, 316, 317, 318, 320, 321], "factory_": 9, "factory_api_refer": [98, 105], "factory_cach": 117, "factory_cache_s": 111, "factory_config": [107, 278], "factory_creation_success": 75, "factory_debug": 117, "factory_enable_monitor": 111, "factory_error_handl": 300, "factory_failur": 111, "factory_func": [98, 105, 106, 115], "factory_health_check": 115, "factory_integration_document": 116, "factory_integration_troubleshooting_guid": 117, "factory_integration_user_guid": [98, 106, 110], "factory_issu": 75, "factory_log_level": 111, "factory_max_memory_mb": 111, "factory_methods_refer": 49, "factory_modul": [182, 283, 284, 300], "factory_monitor": 115, "factory_production_mod": 111, "factory_refer": 7, "factory_resili": [9, 44], "factory_result": 75, "factory_system_api_refer": [47, 52, 56, 58, 59], "factory_system_guid": [6, 7], "factory_test_cas": 75, "factory_thread_safeti": [32, 111], "factoryalertmanag": 98, "factorycapacityplann": 111, "factoryconfig": 107, "factoryconfigurationerror": [51, 56, 80, 98], "factoryconfigurationtestsuit": 75, "factoryconsistencytestresult": 75, "factorydebugg": 117, "factoryemergencyrespons": 111, "factoryerror": 277, "factoryhealthcheck": 98, "factorymaintenancemanag": 98, "factoryperformancemonitor": 111, "factoryset": 107, "factorytestcas": 75, "factorytestingpattern": 117, "factoryvalidationpattern": 117, "factual": 12, "fade": [142, 267, 268], "fadecont": [267, 268], "fail": [7, 12, 13, 14, 19, 22, 24, 25, 26, 33, 35, 37, 38, 39, 40, 41, 43, 45, 49, 51, 53, 61, 65, 67, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 86, 87, 88, 90, 92, 93, 98, 100, 102, 104, 105, 106, 114, 115, 117, 119, 122, 124, 126, 127, 136, 141, 165, 169, 177, 178, 190, 193, 199, 201, 203, 206, 207, 209, 213, 215, 216, 217, 220, 222, 223, 225, 226, 230, 232, 233, 235, 237, 239, 240, 242, 246, 248, 253, 261, 265, 273, 276, 277, 279, 282, 285, 290, 298, 300, 301, 308, 309, 320, 321, 323], "fail2ban": 92, "fail_ci_if_error": 39, "failed_all_ti": 88, "failed_check": [93, 98], "failed_compon": 254, "failed_control": 63, "failed_evalu": [98, 104, 275, 276, 280], "failed_g": 39, "failed_migr": 102, "failed_path": 255, "failed_servic": 93, "failed_test": [88, 93, 98], "failed_thread": 65, "failed_valid": 255, "failov": 173, "failur": [14, 16, 22, 24, 25, 26, 32, 33, 35, 38, 40, 45, 49, 50, 51, 53, 56, 61, 63, 65, 67, 78, 81, 84, 86, 89, 92, 93, 95, 98, 100, 102, 103, 104, 106, 111, 114, 115, 116, 119, 147, 151, 173, 185, 188, 192, 193, 194, 203, 207, 213, 216, 218, 220, 222, 224, 226, 230, 232, 233, 234, 237, 239, 241, 242, 245, 246, 247, 250, 261, 274, 275, 276, 278, 280, 282, 290, 298, 300, 301, 310, 323], "failure_count": [98, 220], "failure_data": 280, "failure_log": 255, "failure_mod": 255, "failure_path": 280, "failure_pattern": 255, "failure_r": 220, "failure_reason": 220, "failure_result": [59, 61], "failure_tolerance_manag": 255, "failurethreshold": 92, "failuretolerancemanag": 255, "failuretolerantcoverageanalyz": 88, "fair": [67, 107, 197, 237, 280, 310, 320], "fall": [35, 109, 120, 161, 196, 203, 224, 227, 230, 231, 232, 234, 237, 268, 275, 276, 290], "fallback": [1, 10, 16, 28, 38, 40, 45, 49, 51, 55, 56, 59, 61, 63, 76, 80, 82, 86, 88, 98, 100, 101, 102, 103, 105, 109, 114, 115, 117, 119, 143, 168, 188, 190, 193, 194, 198, 203, 205, 216, 226, 239, 242, 247, 255, 274, 276, 290, 301, 321], "fallback_boundary_lay": 84, "fallback_config": [9, 63, 100], "fallback_control": [61, 63, 115, 203, 216], "fallback_controller_cr": 115, "fallback_data": 255, "fallback_en": 111, "fallback_error": 63, "fallback_gain": 76, "fallback_optimization_strategi": 104, "fallback_param": [38, 51, 56, 80, 100, 277], "fallback_pd_gain": 84, "fallback_prefer": 63, "fallback_result": 255, "fallback_smc_gain": 84, "fallback_strategi": 255, "fallback_to_default_config": 63, "fallback_typ": 117, "fallbackcontrol": 115, "fallbackresult": [9, 10, 255], "fallingtext": 268, "fals": [8, 10, 14, 19, 20, 24, 29, 30, 35, 37, 38, 39, 40, 41, 42, 44, 50, 52, 56, 65, 67, 71, 73, 75, 76, 77, 81, 82, 83, 84, 85, 86, 90, 92, 93, 97, 98, 105, 106, 114, 115, 118, 127, 128, 129, 130, 131, 132, 133, 134, 136, 140, 143, 148, 149, 150, 166, 167, 170, 171, 177, 182, 183, 187, 188, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 213, 214, 216, 218, 220, 226, 239, 242, 246, 249, 253, 254, 257, 261, 265, 266, 267, 269, 277, 279, 282, 283, 287, 290, 293, 301, 302, 308, 318, 320, 322], "false_alarm": 119, "false_alarm_r": 119, "false_optimization_success": 300, "false_posit": 298, "famili": [17, 156, 159, 169, 310], "familiar": [169, 170, 171, 177, 182, 230, 237], "fan": [8, 17], "fantoni": 86, "faq": [138, 298], "far": [14, 73, 84, 119, 164, 167, 170, 205, 226, 239, 290], "farrel": [123, 258], "farsi": 265, "farther": 164, "fast": [10, 11, 13, 14, 29, 34, 41, 42, 49, 53, 61, 65, 72, 79, 81, 84, 86, 89, 91, 96, 98, 109, 114, 116, 117, 127, 132, 133, 134, 135, 140, 143, 146, 148, 149, 154, 161, 162, 163, 164, 166, 167, 170, 171, 183, 193, 197, 198, 199, 200, 202, 203, 205, 214, 216, 219, 220, 224, 226, 227, 230, 231, 232, 234, 237, 239, 248, 254, 266, 273, 276, 284, 287, 290, 293, 294, 298, 317, 318, 323], "fast_adapt_gain": 109, "fast_adaptive_config": 273, "fast_condition_estim": [213, 290], "fast_config": 280, "fast_control_comput": 248, "fast_cost": 133, "fast_dynamics_step": 203, "fast_dynamics_upd": 193, "fast_explor": 254, "fast_fitness_funct": 117, "fast_gain": 148, "fast_non_dominated_sort": 291, "fast_prototyp": 280, "fast_termin": 168, "fast_terminal_smc": 168, "faster": [1, 12, 13, 17, 22, 29, 32, 34, 41, 45, 53, 61, 65, 67, 72, 77, 78, 84, 86, 98, 101, 103, 106, 107, 112, 119, 127, 131, 133, 134, 135, 140, 145, 146, 150, 158, 162, 163, 164, 165, 166, 170, 171, 182, 183, 192, 193, 194, 196, 197, 198, 201, 202, 203, 205, 224, 226, 234, 239, 247, 253, 265, 273, 282, 290, 291, 293, 294, 310], "fastest": [61, 67, 78, 129, 146, 158, 166, 197, 200, 201, 203, 247, 290, 303, 308, 318], "fastli": [141, 144], "fastrespons": 294, "fatal": [1, 5], "father": 2, "fault": [11, 37, 62, 65, 93, 95, 121, 122, 123, 174, 175, 176, 177, 189, 223, 224, 232, 234, 235, 243, 260, 283, 285, 296, 310], "fault_accommodation_control": 119, "fault_condit": 261, "fault_detect": [9, 17, 71, 93, 118, 119, 120, 185, 222, 223, 233, 235, 283, 285, 306, 321], "fault_detection_en": 321, "fault_detector": 185, "fault_inject": [9, 44, 93], "fault_injection_result": 119, "fault_messag": 119, "fault_persist": 119, "fault_scenario": 119, "fault_signatur": 119, "fault_test_matrix": 119, "fault_typ": [119, 185], "fault_vot": 119, "faultdetectionconfig": 119, "faultdetector": 185, "faultinjector": [224, 234], "faultstatusmessag": 119, "faulttolerantcontrol": [118, 119], "faultytermin": 268, "favor": [17, 22, 216, 291], "favour": [228, 230, 236, 237], "fa\u00e7ad": 203, "fdi": [3, 9, 17, 19, 69, 71, 95, 121, 122, 123, 125, 146, 147, 203, 216, 222, 223, 233, 235, 260, 283, 285, 306], "fdi_default_threshold": 120, "fdi_system": [9, 118, 119], "fdi_threshold_calibr": 120, "fdi_threshold_calibration_methodologi": [118, 119, 120], "fdi_threshold_calibration_report": [119, 120], "fdi_threshold_calibration_summari": [119, 120], "fdiconfig": 9, "fdisystem": [118, 120, 223, 235, 306], "fdr": [309, 310], "fdr_bh": 310, "feasibl": [55, 68, 73, 78, 86, 103, 156, 161, 199, 201, 246, 252, 279, 294, 310], "featherston": 290, "featur": [1, 8, 12, 15, 16, 17, 22, 23, 24, 27, 28, 32, 33, 36, 38, 39, 52, 53, 55, 56, 57, 58, 65, 67, 73, 76, 77, 78, 79, 80, 81, 82, 85, 89, 92, 94, 95, 98, 102, 105, 111, 112, 115, 120, 127, 128, 129, 131, 132, 134, 135, 136, 138, 140, 143, 144, 150, 151, 155, 157, 165, 173, 174, 177, 183, 188, 193, 199, 202, 215, 216, 217, 218, 222, 223, 224, 226, 233, 234, 235, 239, 242, 243, 250, 253, 254, 266, 276, 277, 282, 283, 285, 293, 298, 305, 309, 310, 313, 315, 317, 318, 319, 321], "feature_vari": 313, "feb": 159, "feder": 257, "feed": [58, 119, 297, 298], "feedback": [19, 23, 26, 34, 35, 40, 53, 77, 78, 84, 85, 86, 90, 97, 103, 121, 122, 123, 171, 177, 180, 185, 188, 199, 204, 205, 206, 218, 223, 230, 232, 235, 237, 243, 247, 261, 273, 277, 282, 290, 310, 316, 317, 323], "feedforward": [22, 51, 62, 78, 81, 85, 86, 97, 205, 249], "feel": [27, 31, 144], "feinn": 310, "fell": [228, 236], "fenc": [24, 25, 26, 33], "ferrara": [194, 196], "fetch": 31, "few": [53, 114, 115, 131, 151, 162, 167, 202, 229, 230, 237, 238, 247, 309], "fewer": [45, 53, 59, 82, 84, 117, 128, 145, 155, 162, 163, 170, 182, 199, 202, 222, 226, 229, 232, 233, 238, 239, 247, 253, 254, 276, 303, 310], "ff": [225, 240], "ff6b6b": 90, "ffcccc": [161, 162, 163, 164, 166, 167], "fff3e0": [316, 317], "ffffcc": [161, 162, 163, 164, 166, 167], "ffffff": [30, 31, 144], "fi": [10, 39, 44, 92, 93, 207, 253, 254, 255, 298], "fiber": [267, 269, 271], "fictiti": 198, "fidel": [22, 78, 82, 86, 101, 127, 146, 166, 222, 223, 224, 232, 233, 234, 235, 283], "field": [1, 10, 17, 22, 23, 30, 38, 40, 56, 57, 73, 76, 102, 104, 112, 116, 120, 121, 122, 125, 126, 127, 153, 156, 163, 177, 188, 196, 216, 220, 222, 224, 233, 234, 254, 256, 273, 278, 279, 298, 300, 309, 310], "field_migr": 247, "field_nam": 216, "field_ord": 5, "field_valid": 216, "fieldpath": 92, "fieldref": 92, "fig": [52, 61, 77, 81, 124, 133, 136, 148, 149, 150, 164, 169, 171, 177, 178, 201, 215, 216, 248, 253, 254, 288, 289, 317, 320], "fig1": 136, "fig1_ise_comparison": 169, "fig2": 136, "fig2_distribut": 169, "fig3": 136, "fig3_robustness_index": 169, "fig4": 136, "figshar": 320, "figsiz": [52, 61, 77, 81, 86, 118, 136, 148, 149, 150, 164, 167, 169, 171, 177, 178, 193, 201, 202, 215, 216, 248, 253, 254, 280, 320], "figur": [1, 13, 27, 53, 86, 90, 118, 133, 149, 167, 169, 170, 171, 178, 193, 201, 202, 226, 227, 228, 229, 231, 232, 236, 238, 239, 260, 280, 283, 284, 288, 289, 317, 320], "file": [2, 4, 6, 8, 13, 15, 18, 22, 23, 32, 37, 38, 39, 40, 45, 49, 52, 56, 62, 71, 72, 84, 86, 89, 90, 92, 93, 94, 95, 102, 104, 107, 115, 116, 117, 122, 124, 125, 127, 129, 134, 135, 137, 140, 144, 146, 147, 149, 150, 151, 155, 156, 165, 168, 169, 177, 187, 188, 190, 193, 196, 203, 208, 210, 214, 218, 221, 222, 224, 226, 229, 232, 233, 234, 238, 239, 243, 244, 245, 250, 254, 255, 256, 257, 261, 265, 266, 271, 275, 276, 282, 283, 290, 299, 301, 302, 311, 317, 321, 323], "file_access_error": 255, "file_cont": [298, 299], "file_path": [39, 255, 298, 300], "filehandl": [117, 321], "filenam": [39, 221, 254, 298], "filenotfounderror": [53, 170, 177], "filepath": [28, 61], "filesystem": [92, 153], "fill": [98, 161, 162, 163, 164, 166, 167, 169, 232, 259, 310, 316, 317, 318], "fill_between": 164, "filler": 12, "filter": [9, 16, 24, 32, 35, 53, 69, 76, 86, 89, 108, 117, 118, 119, 127, 143, 166, 168, 177, 188, 197, 209, 222, 223, 232, 233, 235, 256, 257, 290, 298, 317, 318], "filtered_kwarg": 117, "filterwarn": [283, 284], "final": [4, 17, 19, 22, 23, 26, 29, 30, 31, 35, 36, 39, 40, 43, 51, 53, 56, 58, 59, 61, 65, 77, 78, 81, 84, 85, 91, 93, 94, 98, 107, 112, 115, 117, 124, 127, 128, 133, 134, 135, 136, 146, 148, 150, 156, 158, 161, 162, 164, 166, 167, 170, 171, 177, 182, 187, 190, 193, 198, 200, 202, 203, 209, 210, 215, 216, 220, 222, 223, 225, 229, 230, 232, 233, 235, 237, 238, 240, 241, 243, 248, 250, 251, 252, 254, 255, 260, 265, 277, 290, 293, 298, 300, 303, 310, 313, 321], "final_angl": 164, "final_best": 148, "final_c1": 214, "final_c2": 214, "final_config": 131, "final_control": [107, 112, 248], "final_cost": [53, 133, 209, 247, 251, 252, 253, 280, 291, 318], "final_cost_pattern": 318, "final_cost_qu": 252, "final_cost_rang": [247, 252], "final_divers": [98, 253], "final_energi": [203, 209, 283], "final_error": [35, 75, 135, 209, 313], "final_gain": [117, 253], "final_histori": 98, "final_inertia": 214, "final_kei": [72, 73], "final_mean": 148, "final_memori": [17, 93, 98, 107, 114, 115, 283], "final_metr": 248, "final_posit": 291, "final_position_error": 113, "final_precision_error": 113, "final_rank": 310, "final_result": [104, 112, 135, 253], "final_st": [61, 171, 283], "final_state_var": 98, "final_surface_rm": 193, "final_swarm": 167, "final_theta1": 171, "final_theta2": 171, "final_valu": [107, 164], "find": [3, 19, 22, 24, 30, 41, 44, 51, 53, 58, 67, 73, 77, 91, 92, 94, 95, 98, 107, 108, 115, 117, 122, 125, 127, 133, 137, 141, 144, 145, 146, 148, 156, 160, 162, 164, 182, 197, 201, 202, 209, 222, 223, 224, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 246, 252, 253, 259, 265, 267, 268, 279, 282, 285, 298, 310, 313, 318, 320], "find_cit": 298, "find_convergence_iter": 98, "find_convergence_tim": 125, "find_reaching_tim": 125, "find_spec": 115, "findal": [39, 297], "finder": 298, "findit": [297, 298, 299, 318], "findstr": [91, 129, 170, 177], "fine": [50, 67, 84, 131, 133, 135, 148, 150, 163, 164, 167, 170, 171, 177, 182, 202, 205, 248, 253], "fine_config": 248, "fine_cost": 133, "fine_factori": 248, "fine_gain": 133, "fine_low": 248, "fine_tun": 248, "fine_upp": 248, "finish": [26, 29, 182, 318], "finit": [12, 30, 35, 37, 40, 42, 44, 45, 49, 52, 55, 56, 62, 63, 65, 69, 72, 74, 75, 77, 79, 81, 82, 84, 86, 88, 93, 95, 97, 98, 100, 101, 103, 108, 115, 116, 117, 119, 120, 121, 122, 123, 126, 127, 128, 132, 146, 156, 164, 166, 183, 189, 191, 192, 193, 199, 204, 208, 209, 216, 218, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 242, 243, 244, 245, 247, 252, 254, 256, 257, 273, 274, 275, 282, 283, 284, 286, 287, 290, 294, 297, 298, 299, 300, 301, 303, 313, 322], "finite_tim": 279, "finite_time_converg": [75, 109, 112, 113, 247, 248, 251, 255], "finite_time_reach": [209, 248], "fire": 31, "firefox": [1, 27, 28, 30, 31, 137, 139, 140, 141, 142, 143, 144, 145, 152, 153, 156, 157, 265], "firewal": [92, 93, 177], "first": [1, 5, 9, 10, 11, 17, 20, 22, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 37, 45, 49, 50, 51, 52, 53, 59, 74, 76, 77, 78, 81, 84, 85, 86, 88, 93, 95, 98, 103, 109, 114, 117, 119, 125, 127, 129, 131, 132, 133, 134, 135, 136, 141, 143, 145, 146, 149, 150, 151, 152, 154, 156, 160, 161, 166, 167, 168, 170, 171, 179, 182, 183, 193, 200, 201, 203, 204, 205, 216, 220, 221, 222, 224, 226, 227, 229, 231, 232, 233, 234, 238, 239, 242, 243, 247, 249, 251, 253, 258, 262, 272, 274, 276, 279, 282, 286, 287, 288, 289, 291, 294, 298, 303, 310, 313, 317, 323], "first_settl": 313, "firstauthor_year_keyword": 257, "fish": [127, 162, 199, 202, 222, 223, 233, 235, 288], "fit": [17, 20, 21, 35, 40, 49, 50, 52, 56, 57, 58, 59, 60, 61, 64, 65, 67, 72, 75, 76, 81, 82, 83, 87, 98, 101, 103, 114, 117, 121, 124, 126, 127, 132, 133, 135, 158, 162, 167, 170, 172, 179, 180, 181, 182, 184, 193, 198, 200, 201, 202, 203, 209, 210, 211, 214, 221, 230, 237, 242, 249, 252, 253, 254, 276, 277, 279, 283, 284, 292, 293, 300, 301, 303, 304, 308, 310, 316, 318, 319, 321], "fit_result": 313, "fitness_computation_tim": 98, "fitness_evalu": [276, 280], "fitness_fn": 61, "fitness_func": 201, "fitness_funct": [20, 49, 50, 61, 81, 82, 83, 98, 104, 116, 132, 201, 215, 300], "fitness_function_design_guid": [201, 215], "fitness_grid": 201, "fitness_histori": [104, 112, 201, 202, 214, 248], "fitness_i": 61, "fitness_improv": 215, "fitness_improvement_r": 98, "fitness_scor": [98, 104, 107], "fitness_sequenti": 203, "fitness_start": 98, "fitness_std": 52, "fitness_tim": 98, "fitness_timeout": [276, 277, 280], "fitness_toler": 52, "fitness_valu": [61, 98, 248, 254], "fitness_vector": 203, "fitness_with_barri": 201, "five": [45, 232], "fix": [5, 14, 22, 23, 34, 38, 42, 51, 52, 53, 56, 58, 59, 65, 67, 69, 70, 71, 74, 77, 79, 80, 82, 83, 84, 86, 89, 90, 91, 92, 93, 115, 117, 120, 123, 128, 131, 132, 138, 139, 141, 142, 143, 144, 146, 147, 165, 166, 167, 171, 177, 179, 188, 190, 198, 199, 200, 201, 203, 205, 210, 213, 218, 220, 224, 226, 232, 234, 239, 242, 244, 245, 246, 249, 251, 252, 273, 277, 280, 282, 285, 289, 290, 291, 298, 302, 306, 309, 310, 317, 320, 321], "fix_common_gain_issu": 117, "fix_common_issu": 94, "fix_configuration_fil": 117, "fix_gain_array_length": 108, "fix_header_spacing_phase10": 25, "fix_missing_paramet": 108, "fix_python_path": 117, "fix_suggest": 252, "fixabl": 94, "fixed_gain": [117, 201], "fixed_step": [9, 52, 59], "fixes_appli": 117, "fixm": [11, 94], "fixtur": [1, 22, 23, 56, 114, 147, 151, 282, 283], "fl": [205, 257, 290], "flag": [1, 5, 12, 22, 23, 24, 31, 44, 56, 62, 76, 115, 122, 144, 147, 159, 165, 203, 215, 220, 222, 223, 225, 226, 233, 235, 239, 240, 282, 298, 309], "flake8": 93, "flanneri": 290, "flat": [67, 71, 156, 171, 193], "flatten": [61, 67, 101, 107, 170, 248], "flaw": [223, 235], "flawlessli": 31, "fledg": 270, "flesch": 12, "flexibl": [17, 27, 28, 29, 52, 73, 82, 84, 98, 100, 109, 111, 133, 201, 203, 208, 216, 222, 223, 226, 227, 231, 232, 233, 235, 239, 248, 309, 310], "flexur": 232, "flight": [51, 182], "flip": 290, "float": [10, 17, 19, 35, 36, 38, 39, 40, 41, 44, 52, 56, 71, 73, 75, 76, 77, 78, 81, 82, 84, 85, 93, 94, 97, 98, 100, 102, 103, 105, 106, 108, 114, 115, 117, 118, 120, 125, 127, 131, 132, 133, 134, 135, 148, 151, 167, 170, 177, 185, 192, 193, 195, 196, 197, 199, 203, 204, 207, 208, 209, 214, 216, 220, 232, 247, 249, 250, 252, 253, 254, 255, 256, 258, 261, 267, 268, 273, 275, 277, 279, 282, 283, 284, 287, 291, 298, 301, 302, 313, 318, 321], "float32": 254, "float64": [10, 17, 49, 51, 67, 101, 105, 135, 171, 203, 209, 216], "floc": 313, "flock": [127, 162, 199, 202, 222, 223, 232, 233, 235, 288], "floor": [84, 197, 213], "flop": [77, 78, 85, 197, 198, 215], "flow": [12, 28, 31, 53, 55, 56, 57, 59, 61, 78, 81, 93, 98, 163, 215, 250, 268, 271, 297, 300, 301, 316], "flowchart": [13, 58, 62, 161, 162, 163, 164, 166, 167, 210, 259, 262, 263, 294, 316, 317], "flowingmenu": [268, 269, 271], "fluctuat": 232, "fluent": 17, "fluff": 12, "fluid": 268, "fluidglass": 268, "flush": 277, "fly": [29, 268], "flyingpost": 268, "fmt": 178, "fnir": [228, 236], "fo": 70, "focu": [9, 10, 16, 23, 26, 28, 30, 31, 37, 39, 42, 53, 71, 122, 137, 139, 145, 154, 162, 192, 205, 228, 236, 253, 268, 298, 300, 323], "focus": [17, 21, 37, 44, 51, 53, 58, 80, 113, 127, 129, 137, 138, 145, 162, 167, 192, 194, 202, 224, 230, 234, 237, 241, 254, 256, 273, 275, 277, 290, 310], "fold": [290, 309], "folder": [15, 74, 268, 269, 271], "folk": [222, 233], "follow": [2, 4, 5, 8, 12, 15, 19, 22, 23, 25, 26, 29, 31, 34, 41, 44, 45, 51, 52, 53, 58, 59, 69, 70, 74, 94, 98, 114, 122, 126, 127, 137, 138, 139, 141, 142, 147, 164, 169, 178, 187, 191, 192, 193, 199, 202, 220, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 241, 249, 256, 257, 268, 270, 273, 279, 283, 293, 294, 295, 299, 309, 316, 318], "font": [13, 31, 144, 159, 169, 267, 269, 271], "font_scal": 169, "fontsiz": [52, 61, 149, 164, 280, 320], "fontweight": [52, 164, 320], "foo": [297, 298], "food": [162, 202], "footer": [30, 232], "footprint": [38, 41, 61, 77, 78, 103, 107, 196, 210, 216, 217, 254, 274, 318], "for_review": [122, 123, 124, 125, 126, 320], "foral": [39, 156, 193, 199, 201, 202, 209, 261, 279, 287, 291, 293], "forbid": 73, "forc": [10, 12, 17, 31, 35, 37, 49, 51, 52, 55, 61, 62, 64, 65, 68, 70, 72, 74, 82, 84, 86, 91, 94, 97, 98, 103, 105, 114, 117, 118, 124, 125, 127, 129, 132, 134, 135, 140, 143, 144, 146, 149, 150, 161, 162, 163, 164, 165, 166, 167, 170, 176, 177, 185, 196, 198, 199, 216, 219, 220, 221, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 242, 248, 249, 253, 254, 258, 260, 262, 263, 265, 272, 273, 277, 279, 283, 284, 287, 288, 289, 290, 291, 295, 296, 298, 301, 306, 316, 317], "force_cleanup": 117, "force_limit": [37, 112], "force_recomput": 220, "force_saturation_check": 112, "foreach": [30, 143], "forecast": 310, "forens": 119, "forget": [101, 205, 226, 239], "forgiv": 86, "fork": [90, 283], "form": [29, 68, 74, 84, 114, 134, 154, 197, 199, 200, 204, 224, 227, 231, 232, 234, 249, 279, 286, 287, 290, 295], "formal": [8, 12, 89, 121, 176, 188, 227, 231, 232, 241, 255, 278, 297, 310, 320], "formal_claim": 298, "formal_claim_extractor": 4, "formal_verification_suit": 279, "formalclaimextractor": 299, "formalextractor": 298, "formalis": [40, 222, 224, 229, 233, 234, 238, 300], "format": [4, 5, 8, 10, 11, 13, 15, 16, 19, 20, 25, 26, 29, 30, 32, 33, 40, 50, 52, 55, 56, 57, 58, 59, 71, 72, 73, 76, 88, 89, 90, 94, 95, 97, 98, 99, 106, 107, 109, 114, 117, 121, 127, 138, 139, 140, 147, 156, 177, 178, 187, 188, 190, 196, 202, 208, 220, 232, 242, 255, 256, 257, 265, 266, 273, 276, 280, 282, 290, 297, 298, 299, 301, 309, 318, 320, 321], "format_exc": [104, 117], "format_typ": [9, 61], "formatt": [8, 254], "formatted_d": 254, "formid": [222, 233], "formul": [19, 52, 55, 57, 69, 77, 81, 98, 120, 125, 126, 127, 134, 191, 192, 199, 202, 205, 213, 221, 222, 232, 233, 287, 288, 293, 295], "formula": [57, 67, 84, 86, 119, 120, 128, 145, 149, 165, 166, 167, 192, 194, 215, 225, 232, 240, 247, 298, 309, 310, 318], "forward": [61, 84, 86, 92, 216, 282, 295, 309, 318], "forward_eul": 61, "forwardeul": [52, 59], "found": [2, 7, 25, 26, 44, 70, 84, 98, 102, 115, 117, 124, 126, 127, 129, 142, 143, 144, 146, 153, 162, 167, 170, 193, 195, 201, 202, 222, 232, 233, 254, 255, 265, 270, 274, 275, 280, 293, 300, 308], "foundat": [2, 15, 17, 19, 26, 30, 31, 40, 42, 48, 52, 58, 59, 64, 65, 69, 71, 76, 83, 100, 105, 109, 120, 121, 127, 132, 133, 134, 152, 160, 162, 163, 164, 166, 167, 168, 169, 170, 189, 197, 198, 200, 201, 205, 209, 213, 214, 215, 216, 219, 230, 232, 237, 242, 243, 247, 250, 257, 262, 265, 288, 289, 290, 292, 295, 297, 298, 300, 309, 310, 317, 318, 320], "four": [2, 28, 45, 52, 82, 103, 166, 197, 199, 200, 203, 216, 222, 226, 227, 231, 232, 233, 239, 270, 290, 297, 303, 313], "fourier": [227, 231], "fourth": [72, 216, 227, 231, 232], "fp": [1, 129, 136, 137, 139, 141, 142, 143, 144, 145, 152, 189], "fpga": [259, 317], "fpr": 120, "frac": [19, 39, 53, 81, 88, 119, 120, 125, 152, 156, 191, 193, 195, 198, 199, 200, 201, 202, 209, 215, 216, 217, 220, 221, 225, 226, 229, 232, 238, 239, 240, 242, 245, 246, 258, 279, 287, 288, 289, 290, 293, 294, 295, 298, 299], "frac12": [225, 240], "fraction": [19, 51, 53, 72, 78, 99, 127, 191, 193, 201, 216, 224, 234, 247, 251, 253, 256, 259, 290, 291, 293, 310, 313], "fragil": 297, "fragile_fitness_funct": 248, "fragment": [14, 58], "frame": [112, 152, 225, 240, 316, 317], "framer": [267, 268, 269], "framework": [0, 12, 15, 17, 19, 20, 33, 36, 38, 40, 52, 64, 66, 69, 71, 75, 82, 83, 84, 86, 91, 95, 98, 100, 107, 109, 119, 127, 131, 135, 138, 139, 147, 149, 160, 164, 165, 167, 169, 189, 190, 192, 193, 194, 199, 203, 215, 216, 217, 218, 223, 227, 231, 232, 235, 241, 242, 244, 250, 253, 256, 257, 259, 277, 281, 283, 284, 286, 288, 292, 301, 302, 305, 308, 313, 314, 318, 320, 322], "framework_vers": [169, 255], "frameworkhealthmonitor": 255, "frameworkhealthreport": 255, "frameworkimprovementengin": 255, "franci": [81, 103, 206, 230, 237, 290], "free": [15, 17, 25, 26, 29, 82, 92, 93, 98, 117, 119, 120, 123, 124, 127, 145, 146, 154, 162, 164, 166, 177, 190, 202, 222, 223, 224, 227, 228, 231, 233, 234, 235, 236, 254, 270, 283, 284, 286, 288, 293, 295], "free_decai": [45, 221], "free_gb": 254, "free_perc": 92, "freedom": [82, 86, 97, 163, 164, 198, 199, 222, 224, 226, 232, 233, 234, 239, 286, 288, 290], "freez": [77, 78, 79, 81, 82, 199, 222, 224, 233, 234, 261, 290], "freita": [228, 229, 236, 238], "french": 298, "freq": [85, 166], "frequenc": [12, 35, 38, 39, 49, 73, 77, 78, 79, 81, 82, 84, 85, 93, 98, 111, 118, 124, 129, 147, 163, 164, 166, 167, 170, 177, 181, 183, 185, 190, 192, 194, 195, 199, 201, 204, 206, 209, 213, 220, 221, 222, 223, 224, 226, 232, 233, 234, 235, 239, 242, 245, 246, 248, 249, 251, 255, 258, 260, 267, 273, 275, 276, 285, 287, 290, 294, 300, 321], "frequency_ok": 249, "frequent": [7, 65, 70, 81, 91, 95, 98, 102, 106, 118, 119, 162, 182, 183, 201, 210, 232, 254], "fresh": [22, 23, 31, 215], "friction": [22, 45, 53, 65, 72, 74, 84, 86, 118, 124, 130, 131, 134, 135, 136, 146, 164, 166, 167, 170, 199, 200, 208, 216, 220, 221, 222, 223, 224, 225, 227, 230, 231, 232, 233, 234, 235, 237, 240, 246, 253, 258, 272, 283, 289, 290, 295, 296, 309, 313, 317], "friction_cart": [53, 68, 253], "friction_coeffici": 208, "friction_forc": 220, "friction_model": [101, 135], "friction_p1": 53, "friction_p2": 53, "friction_param": 283, "friction_uncertainti": 75, "friction_vari": 81, "frictionenhanceddynam": 135, "frictionless": [134, 161, 164, 220], "frictionloss": 317, "fridman": [123, 194, 197, 204, 205], "friedman": 310, "friendli": [1, 8, 13, 20, 28, 29, 30, 31, 41, 64, 82, 98, 122, 127, 132, 139, 145, 153, 156, 188, 223, 235, 253, 265], "fro": 35, "frobeniu": 289, "from": [1, 4, 5, 8, 10, 12, 13, 19, 20, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 44, 45, 50, 52, 53, 55, 56, 58, 61, 63, 65, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 103, 105, 109, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 136, 140, 142, 144, 146, 148, 149, 150, 151, 152, 153, 154, 156, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 177, 178, 181, 182, 185, 187, 190, 192, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 241, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 261, 265, 266, 267, 269, 270, 271, 273, 275, 276, 277, 278, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 299, 300, 301, 306, 313, 315, 317, 319, 320, 321], "from_control": 37, "from_dict": [9, 10, 61, 196], "from_vers": 72, "fromlist": 117, "front": [112, 133, 148, 167, 201, 202, 209, 232, 248, 277, 280, 291, 309, 310, 319], "front_indic": 291, "front_siz": 291, "frontier": [133, 181, 197, 199, 250, 284, 291], "frontmatt": 14, "frozen": [38, 82, 98, 107, 116, 118, 168, 196, 199, 220, 227, 231, 274, 277], "fruit": 10, "fr\u00e9chet": 313, "fsa": 261, "fsal": 200, "fsgroup": 92, "ftsmc": 127, "fuel": 166, "fulfil": 241, "full": [1, 2, 8, 9, 10, 13, 14, 15, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 40, 45, 51, 53, 55, 56, 57, 59, 61, 63, 64, 65, 67, 69, 72, 75, 76, 77, 78, 80, 82, 85, 86, 87, 88, 89, 93, 94, 95, 98, 100, 103, 104, 105, 107, 109, 114, 117, 121, 123, 125, 126, 127, 129, 131, 132, 137, 139, 140, 141, 143, 144, 145, 146, 151, 152, 153, 155, 156, 159, 161, 164, 165, 168, 169, 170, 171, 177, 178, 182, 188, 189, 190, 196, 197, 199, 201, 203, 205, 211, 216, 221, 222, 223, 224, 225, 227, 229, 231, 232, 233, 234, 235, 238, 240, 241, 248, 250, 251, 252, 254, 255, 258, 260, 265, 270, 271, 273, 276, 277, 282, 284, 285, 290, 291, 295, 297, 300, 307, 312, 313, 314, 317, 321, 323], "full_analysi": 88, "full_config": 131, "full_dip": 278, "full_dip_config": 101, "full_dynam": [22, 34, 186, 282, 283], "full_featur": 119, "full_hybrid": [105, 273, 275], "full_matric": [35, 220], "full_messag": 102, "full_nonlinear": 101, "full_nonlinear_config": 101, "full_step_fn": 203, "full_trajectori": 283, "fulldipconfig": 220, "fulldipdynam": [203, 278, 283], "fulldynam": [127, 134, 135], "fuller": 310, "fulli": [10, 19, 24, 26, 27, 28, 31, 38, 39, 40, 51, 56, 59, 64, 67, 82, 102, 114, 127, 141, 145, 147, 152, 161, 193, 198, 218, 223, 228, 235, 236, 242, 244, 247, 250, 252, 255, 274, 284, 300, 301, 309, 317], "fun": 253, "func": [112, 115, 315], "func_nod": 300, "function": [1, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 38, 39, 40, 44, 50, 51, 52, 55, 57, 58, 59, 60, 62, 67, 68, 71, 72, 73, 78, 81, 82, 85, 86, 87, 88, 89, 92, 93, 94, 95, 99, 100, 101, 103, 104, 106, 109, 114, 115, 117, 118, 119, 123, 124, 125, 127, 128, 129, 134, 135, 139, 140, 141, 142, 144, 145, 146, 148, 150, 151, 153, 155, 160, 161, 162, 164, 165, 167, 168, 170, 171, 176, 179, 180, 181, 182, 185, 188, 189, 190, 192, 193, 196, 197, 199, 200, 202, 205, 209, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 241, 243, 244, 250, 253, 254, 255, 256, 257, 258, 261, 266, 268, 269, 271, 272, 273, 274, 276, 277, 282, 284, 293, 294, 295, 298, 299, 301, 304, 307, 309, 310, 313, 316, 317, 318, 321], "function_nam": 209, "function_util": 209, "functionality_failur": 255, "functiondef": [297, 300], "functool": [53, 57, 61, 81, 115, 148, 150, 188], "fund": 320, "fundament": [8, 52, 65, 75, 82, 95, 103, 126, 127, 129, 152, 160, 167, 199, 206, 207, 222, 226, 233, 239, 249, 256, 257, 274, 277, 287, 294, 318, 323], "furnish": 15, "furo": [28, 141, 159, 315], "further": [67, 78, 82, 83, 85, 86, 120, 127, 149, 156, 161, 162, 163, 170, 195, 224, 226, 229, 230, 232, 234, 237, 238, 239, 247, 270, 296, 308, 318], "furthermor": [12, 227, 231], "furuta": [86, 123], "furuta2003sw": 257, "futur": [5, 7, 10, 14, 24, 25, 27, 30, 36, 38, 40, 44, 45, 56, 59, 61, 65, 67, 84, 92, 93, 98, 102, 104, 105, 106, 107, 111, 117, 119, 122, 127, 133, 135, 143, 165, 183, 194, 210, 218, 224, 228, 230, 232, 234, 236, 237, 241, 244, 245, 247, 248, 250, 253, 254, 259, 266, 280, 283, 298, 300, 301, 307, 312, 314, 318, 320], "future_to_control": 280, "future_to_idx": 104, "future_to_index": 98, "future_to_typ": 280, "fuzzi": [229, 238, 268], "fuzzytext": 268, "fwer": 310, "fx_": 232, "f\u2080": 310, "g": [5, 13, 19, 22, 24, 30, 31, 32, 33, 35, 38, 40, 41, 45, 50, 51, 52, 53, 56, 65, 73, 74, 76, 77, 78, 81, 82, 84, 85, 86, 91, 92, 97, 98, 100, 101, 102, 103, 106, 113, 114, 115, 116, 117, 119, 121, 125, 127, 131, 133, 134, 139, 145, 146, 149, 150, 152, 161, 162, 163, 164, 167, 170, 191, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 208, 209, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 245, 246, 248, 249, 250, 252, 253, 254, 258, 271, 272, 273, 275, 277, 279, 280, 287, 288, 289, 290, 293, 294, 295, 298, 299, 300, 306, 309, 310, 313, 315, 316, 317, 320], "g1": [51, 201], "g2": [51, 201, 225, 240], "g2g": [225, 240], "g3": [51, 225, 240], "g3g_": [225, 240], "g_": [201, 202, 215, 221, 290], "g_0": 198, "g_1": [198, 201], "g_2": [198, 201], "g_3": 198, "g_best": [39, 199, 215, 291], "g_best\u2081": 215, "g_d": 191, "g_i": [193, 201, 279, 290], "g_interp": 201, "g_j": [201, 279, 290, 293], "g_lin": 161, "ga": [44, 167, 193, 202], "gaber": [228, 236], "gain": [0, 1, 2, 8, 9, 10, 12, 13, 19, 21, 22, 27, 29, 30, 35, 36, 37, 38, 41, 45, 52, 55, 57, 58, 59, 60, 61, 62, 65, 67, 68, 71, 73, 74, 75, 81, 83, 84, 87, 93, 97, 98, 100, 106, 114, 115, 117, 121, 123, 124, 125, 126, 127, 129, 134, 135, 136, 146, 149, 150, 152, 153, 155, 156, 159, 162, 164, 165, 169, 170, 177, 179, 181, 185, 191, 192, 193, 195, 197, 198, 199, 200, 202, 203, 205, 209, 210, 211, 214, 216, 222, 223, 224, 230, 232, 233, 234, 235, 237, 242, 244, 245, 247, 250, 254, 257, 259, 260, 261, 265, 266, 272, 276, 277, 282, 283, 284, 285, 286, 288, 289, 290, 293, 294, 296, 298, 299, 302, 303, 306, 310, 313, 316, 317, 320, 322], "gain_": 208, "gain_analysi": 280, "gain_arrai": 216, "gain_bound": [35, 50, 51, 80, 98, 101, 277, 287], "gain_count": [17, 38, 49, 50, 52, 56, 82, 98, 100, 101, 106, 114, 115, 116, 117, 273, 280], "gain_descript": 112, "gain_dimens": 250, "gain_info": 112, "gain_leak": 81, "gain_max": 112, "gain_min": 112, "gain_nam": [20, 45, 50, 51, 80, 98, 112, 115, 167, 168, 208], "gain_oscil": 77, "gain_penalti": 113, "gain_ratio": [98, 193], "gain_sampl": 76, "gain_set": [116, 278], "gain_spec": [98, 112], "gain_specif": 168, "gain_trajectori": 166, "gain_util": 77, "gain_valid": [9, 17, 39, 199], "gains1": 199, "gains2": 199, "gains_": 167, "gains_adapt": [19, 167, 189, 303, 321], "gains_adaptive_robust": 321, "gains_analysi": 117, "gains_arrai": [67, 81, 82, 83, 98, 101, 132, 135, 167, 208, 248], "gains_batch": [116, 248], "gains_check": 208, "gains_class": [19, 167, 189, 303, 321], "gains_classical_optim": 321, "gains_count": 280, "gains_custom": 51, "gains_data": 216, "gains_default": 51, "gains_dict": [106, 107, 116, 248], "gains_energi": 167, "gains_ensembl": 106, "gains_fil": 253, "gains_ful": 121, "gains_hybrid": [19, 167, 303, 321], "gains_hybrid_complet": 321, "gains_kei": 248, "gains_matrix": 248, "gains_mean": 253, "gains_optim": 253, "gains_perturb": 201, "gains_provid": [117, 208], "gains_quick": 167, "gains_satisfy_condit": 193, "gains_satur": 81, "gains_seed_": [148, 167], "gains_set": 116, "gains_sta": [167, 189, 321], "gains_sta_optim": 321, "gains_standard": 167, "gains_str": 318, "gains_terminal_optim": 168, "gains_test": 121, "gains_thorough": 167, "gains_track": 167, "gains_tupl": 112, "gains_valid": [276, 280], "gains_well_separ": 112, "gainsarrai": [17, 49, 51, 98, 105], "gainspecif": 168, "gainvalidationerror": [98, 112, 277], "galaxi": [267, 268, 271], "galleri": [27, 96, 188, 268, 309], "gambhir": [227, 231], "gamma": [2, 20, 49, 51, 65, 72, 76, 77, 79, 80, 82, 92, 98, 101, 105, 106, 107, 112, 113, 114, 191, 197, 199, 201, 208, 224, 225, 227, 230, 231, 234, 237, 240, 242, 247, 248, 249, 253, 258, 261, 272, 275, 276, 279, 287, 288, 289, 290, 293, 294, 297, 308, 309, 310], "gamma1": [51, 56, 81, 92, 98, 101, 107, 109, 197, 210, 211, 224, 226, 234, 239, 273, 275, 276, 300, 321], "gamma1994design": 17, "gamma2": [51, 56, 81, 92, 98, 101, 107, 109, 197, 210, 211, 224, 226, 234, 239, 273, 275, 276, 300, 321], "gamma_": [225, 226, 227, 231, 239, 240], "gamma_1": 81, "gamma_2": 81, "gamma_extract": 109, "gamma_in_bound": 112, "gamma_max": [98, 112, 247], "gamma_min": [98, 112, 247], "gamma_reason": 77, "gamma_valu": [81, 101], "gams": [228, 236], "gang": [2, 103, 297], "gap": [1, 71, 87, 88, 119, 127, 139, 141, 143, 144, 145, 165, 185, 190, 223, 228, 232, 235, 236, 245, 255, 298, 300, 308, 309, 313, 320], "gap_analysi": 255, "gapmatrix": 88, "gaps_identifi": 88, "garbag": [17, 78, 98, 114, 117, 168, 242, 245, 254, 259, 282, 283, 297], "garbage_collection_interv": 111, "garc\u00eda": 199, "gate": [7, 16, 24, 36, 71, 86, 88, 89, 95, 98, 100, 107, 241, 242, 243, 250, 251, 281, 284, 301, 308, 322, 323], "gate_nam": 39, "gather": 115, "gather_diagnostic_info": 115, "gaussian": [68, 74, 119, 120, 170, 177, 232, 310], "gb": [64, 92, 98, 107, 146, 254], "gbest": [162, 167, 182, 229, 238, 258], "gbest_cost": 167, "gbp": 92, "gc": [17, 98, 107, 114, 117, 136, 210, 211, 254, 274, 283], "gcc": [90, 91, 92], "gcloud": 91, "gcp": [11, 95], "gcr": 91, "ge": [72, 73, 131, 227, 231], "gear": [227, 231], "geco": 92, "gener": [4, 8, 10, 12, 13, 14, 15, 17, 19, 20, 22, 24, 25, 26, 29, 30, 31, 32, 33, 38, 39, 42, 43, 44, 49, 50, 51, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 75, 76, 81, 82, 87, 88, 89, 90, 92, 93, 94, 97, 98, 102, 105, 111, 114, 117, 118, 119, 120, 123, 126, 132, 134, 146, 147, 150, 152, 153, 154, 157, 160, 161, 162, 164, 165, 167, 169, 170, 171, 176, 188, 190, 191, 192, 193, 194, 199, 202, 203, 205, 207, 209, 216, 218, 220, 221, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 238, 239, 240, 243, 245, 248, 249, 250, 254, 255, 259, 260, 261, 265, 274, 278, 280, 282, 283, 287, 290, 293, 295, 297, 298, 299, 300, 306, 308, 309, 310, 315, 316, 317, 320, 321, 323], "general_compli": 255, "general_compon": 39, "general_coverag": 255, "generalis": [223, 224, 234, 235], "generaliz": 232, "generalization_gap": 310, "generalized_coordin": 295, "generalized_forc": 295, "generate_arxiv_packag": 320, "generate_capacity_recommend": 111, "generate_chartjs_data": 318, "generate_citation_report": 4, "generate_comparison_report": 248, "generate_component_breakdown": 39, "generate_computational_efficiency_chart": 67, "generate_configur": 72, "generate_controller_recommend": 112, "generate_coverage_alert": 39, "generate_coverage_report": 39, "generate_debug_report": 117, "generate_deprecation_report": 102, "generate_executive_summari": 39, "generate_health_report": 321, "generate_hybrid_analysis_report": 321, "generate_icon": 31, "generate_improvement_plan": 39, "generate_integration_report": 321, "generate_linearity_test": 207, "generate_lyapunov_test_st": 255, "generate_master_comparison": 321, "generate_mathematical_recommend": 39, "generate_migration_report": 102, "generate_monotonicity_test": 207, "generate_normal_data": 119, "generate_optimization_report": 98, "generate_overshoot_analysis_chart": 67, "generate_parameter_combin": 61, "generate_partial_success_report": 255, "generate_performance_report": [98, 251, 254, 321], "generate_pso_sensitivity_heatmap": 67, "generate_quality_report": 299, "generate_random_input": 207, "generate_random_uncertainti": 274, "generate_report": [104, 169, 207, 320], "generate_scenario_report": 321, "generate_settling_time_chart": 67, "generate_settling_time_data": 313, "generate_stability_scores_chart": 67, "generate_test_point": 279, "generate_test_state_batch": 248, "generate_tuning_recommend": 247, "generate_validation_test": 207, "generatelyapunovsurfac": 30, "generatevectorfield": 30, "generation_timestamp": 298, "generic_theori": 255, "generic_visit": 297, "genet": [9, 17, 193, 202, 224, 229, 234, 238, 291], "genextrem": 313, "gentl": [81, 217], "gentler": 79, "genuin": [24, 40, 300], "geometr": [30, 35, 49, 163, 201, 216, 220, 284, 290], "geometri": [156, 199, 202, 232], "geq": [39, 120, 193, 195, 199, 201, 208, 220, 287, 290, 293], "german": 298, "get": [1, 7, 11, 17, 20, 22, 31, 32, 38, 39, 40, 42, 51, 52, 59, 64, 68, 72, 73, 76, 78, 82, 83, 86, 90, 91, 92, 94, 98, 100, 101, 102, 103, 105, 106, 112, 114, 115, 117, 118, 122, 130, 132, 133, 135, 136, 138, 148, 150, 151, 158, 164, 166, 168, 170, 189, 196, 199, 202, 208, 216, 218, 220, 242, 244, 248, 253, 254, 255, 262, 263, 267, 270, 271, 275, 276, 277, 279, 291, 298, 301, 305, 313, 315, 320, 321], "get_active_alert": 93, "get_active_controller_count": 117, "get_adaptation_bound": 276, "get_adapted_gain": 17, "get_batch_count": 171, "get_bounds_for_control": 247, "get_branch_coverag": 261, "get_cache_kei": 98, "get_characteristic_length": 220, "get_characteristic_tim": 220, "get_close_match": 115, "get_compon": 216, "get_component_coverag": 39, "get_config": [63, 203, 216], "get_control": [51, 72, 106, 117, 277], "get_control_dimens": 52, "get_controller_bound": [249, 254], "get_controller_class": 63, "get_controller_config": 72, "get_controller_info": 49, "get_controller_migration_guid": [105, 115], "get_controller_param": 210, "get_controller_typ": 321, "get_cpu_usag": 93, "get_current_gain": 67, "get_current_is": 136, "get_current_vers": 93, "get_data_schema": 277, "get_default_bound": [101, 109], "get_default_gain": [50, 52, 56, 80, 98, 100, 105, 106, 109, 115, 116, 117, 248, 274, 275, 276], "get_deprecation_statist": 102, "get_deprecation_warn": 72, "get_disk_usag": 93, "get_docstr": 297, "get_dynamics_model": [203, 216, 224, 234], "get_effective_controllability_threshold": [196, 199], "get_evaluation_statist": 98, "get_expected_gain_count": [51, 56, 117, 274, 275], "get_factory_funct": 116, "get_gain_bounds_for_control": 208, "get_gain_bounds_for_pso": [20, 49, 50, 51, 56, 58, 72, 80, 82, 98, 103, 105, 106, 109, 112, 114, 115, 117, 128, 130, 132, 133, 135, 166, 274, 275, 276, 277, 280], "get_gain_nam": 109, "get_gain_specif": 107, "get_historical_coverag": 255, "get_info": 254, "get_integration_statist": 220, "get_integrator_info": [59, 61], "get_internal_st": 17, "get_linear": 278, "get_linearized_system": 220, "get_log_summari": 254, "get_mass_matrix": 196, "get_memory_usag": [93, 117], "get_merged_config": 72, "get_metrics_summari": 111, "get_migration_statist": 102, "get_monitoring_stat": [61, 220], "get_nominal_physics_param": 283, "get_numerical_paramet": [9, 10], "get_optimization_diagnost": [275, 280], "get_optimization_statist": 98, "get_optimized_pso_bound": 98, "get_or_create_control": 106, "get_performance_stat": 135, "get_performance_summari": 101, "get_physical_paramet": [9, 10], "get_physics_matric": [52, 59, 220], "get_previous_vers": 93, "get_pso_bound": 321, "get_pso_bounds_arrai": 112, "get_pso_config": 248, "get_pso_optimization_bound": 101, "get_random_valid_gain": 112, "get_recommended_population_s": 280, "get_recommended_rang": 208, "get_saturation_stat": 135, "get_sensor_data": 118, "get_stat": [59, 61, 63, 136, 171, 210], "get_state_dimens": 52, "get_statist": [44, 59, 61, 98, 136, 213, 290], "get_step_fn": [59, 61, 203], "get_summari": 253, "get_surface_gain": [196, 199, 276], "get_system_scal": [9, 10], "get_system_st": [77, 78, 81, 85, 321], "get_tim": [59, 61, 171], "get_timing_stat": 61, "get_total_mass": 220, "get_validation_report": 72, "get_xticklabel": 248, "getattr": [41, 49, 52, 63, 68, 72, 73, 76, 78, 80, 98, 101, 103, 109, 115, 117, 168, 207, 247, 254, 274, 278], "getcaches": 31, "getderiv": 30, "getenv": [72, 131], "getitem": [142, 144], "getlogg": [50, 102, 104, 106, 115, 117, 168, 254, 280], "getmtim": 92, "getpid": [98, 114, 115, 117, 210, 211, 253, 254], "getplotlyconfig": 28, "getroot": 39, "getstat": 31, "getthemecolor": 30, "gev": [308, 309], "gev_param": 313, "gf": [98, 107], "gf_install_plugin": 92, "gf_security_admin_password": [63, 92], "gf_security_admin_us": 92, "gfortran": 91, "gg": 232, "ghansah": [223, 235], "ghz": [92, 93], "giampaolo": 8, "giant": 2, "git": [21, 22, 23, 29, 30, 31, 33, 37, 77, 78, 81, 85, 90, 91, 92, 93, 94, 120, 121, 124, 126, 131, 139, 142, 146, 148, 169, 182, 183, 207, 245, 253, 254, 282, 300, 315, 320, 321], "git_repo": 254, "github": [1, 2, 7, 8, 10, 13, 14, 15, 19, 23, 37, 38, 44, 52, 64, 70, 76, 88, 90, 92, 95, 112, 121, 122, 124, 126, 127, 128, 129, 138, 142, 144, 145, 146, 151, 153, 169, 170, 188, 189, 199, 210, 211, 213, 241, 246, 250, 251, 253, 254, 259, 268, 273, 277, 281, 284, 298, 302, 310, 320], "github_issue_4_pso_integration_resolution_report": 19, "github_issue_6_factory_integration_document": 107, "github_repo": 315, "github_us": [188, 315], "github_vers": 315, "gitignor": 70, "gitlab": 320, "give": [35, 117, 191, 205, 225, 240, 249, 253, 287], "given": [17, 19, 37, 51, 52, 58, 65, 73, 84, 97, 103, 105, 107, 112, 116, 119, 120, 199, 207, 209, 216, 220, 225, 226, 229, 238, 239, 240, 246, 252, 261, 274, 279, 283, 284, 290, 310, 313, 321], "glare": 268, "glarehov": 268, "glass": [268, 309, 310], "glassicon": 268, "glasssurfac": 268, "glitch": [268, 271], "glitchi": 140, "glitchspe": 267, "glitchtext": [267, 268, 269, 271], "glob": [254, 255], "global": [12, 13, 16, 17, 19, 22, 34, 51, 53, 61, 65, 67, 70, 84, 86, 92, 97, 98, 112, 113, 117, 122, 124, 127, 133, 148, 160, 165, 167, 182, 184, 188, 191, 193, 199, 200, 201, 209, 215, 216, 218, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 246, 247, 249, 253, 258, 275, 276, 277, 279, 282, 283, 284, 289, 290, 291, 293, 294, 299, 310, 316], "global_best": [182, 183, 191, 202], "global_best_fit": 215, "global_best_idx": 215, "global_best_posit": 215, "global_config": 275, "global_config_path": [275, 280], "global_minimum": 209, "global_se": [19, 22, 34, 53, 72, 193, 224, 234, 254], "globalbestpso": [8, 53, 98, 104, 107, 167, 193, 293], "glossari": [11, 121, 226, 239], "gm": [45, 225, 240, 296], "gm_": [227, 231], "gnu": 15, "go": [31, 88, 89, 127, 146, 149, 188, 190, 243, 270, 271, 315, 320], "goal": [7, 30, 127, 143, 218, 223, 232, 235, 266, 280, 297, 299], "goe": 31, "goebel": 86, "gof": 2, "golai": 35, "golden": [224, 234, 323], "goldstein": 161, "golub": [35, 122, 126, 199, 213, 290], "gommer": 8, "gong": [205, 228, 236], "good": [7, 11, 14, 17, 19, 36, 40, 41, 50, 53, 55, 58, 61, 65, 67, 68, 77, 78, 79, 81, 84, 85, 86, 92, 98, 99, 102, 103, 106, 119, 120, 127, 132, 134, 135, 146, 148, 149, 162, 163, 164, 166, 167, 168, 170, 182, 193, 196, 197, 198, 199, 200, 201, 202, 203, 209, 218, 224, 227, 231, 232, 234, 237, 242, 247, 248, 252, 253, 254, 271, 280, 283, 294, 299, 303, 308, 309, 310], "gooei": 268, "gooeynav": 268, "googl": [10, 56, 94, 298], "gorakhargosh": 8, "got": [20, 40, 49, 50, 51, 56, 73, 76, 82, 98, 100, 101, 106, 115, 116, 117, 127, 203, 208, 251, 300, 321], "gov": [224, 228, 229, 234, 236, 238], "govern": [11, 84, 222, 226, 232, 233, 239, 290], "governor": 92, "gp": 202, "gpl": [2, 8, 15], "gpu": [1, 30, 95, 104, 129, 137, 139, 141, 142, 144, 145, 146, 152, 156, 182, 189, 250, 317], "gpu_accelerated_pso_evalu": 104, "gpu_fit": 104, "gpu_particl": 104, "gpu_simulate_control": 104, "grab": 269, "grace": [28, 35, 37, 38, 49, 52, 53, 56, 63, 67, 75, 76, 78, 80, 98, 100, 103, 104, 109, 114, 117, 118, 119, 139, 143, 176, 177, 185, 188, 190, 192, 194, 196, 203, 216, 242, 244, 250, 255, 261, 274, 275, 278, 280], "grace_period": 216, "graceful_degrad": [111, 119, 321], "graceful_handl": 75, "gracefuldegradationmanag": [63, 255], "gracefulli": [35, 50, 61, 67, 84, 93, 114, 116, 119, 196, 199, 230, 237, 300], "grad": [97, 162, 293], "grade": [19, 36, 38, 40, 45, 52, 56, 61, 63, 64, 65, 67, 82, 92, 95, 98, 102, 189, 193, 197, 200, 203, 205, 210, 216, 217, 218, 219, 220, 244, 250, 283, 286, 287, 291, 321], "gradient": [27, 29, 31, 44, 53, 78, 79, 81, 107, 125, 127, 140, 141, 156, 160, 164, 166, 168, 172, 193, 198, 202, 205, 222, 223, 232, 233, 235, 245, 246, 268, 271, 276, 279, 280, 290, 293], "gradient_bas": [9, 44], "gradient_norm": 79, "gradientblind": 268, "gradienttext": [267, 268, 269, 271], "gradual": [5, 23, 61, 92, 98, 107, 118, 119, 120, 164, 167, 177, 193, 201, 229, 238, 242, 268], "gradualblur": 268, "graduat": [88, 127, 129, 146, 310], "grafana": [63, 92], "grai": [90, 164, 254, 263], "graichen": 86, "grammar": 138, "granger": 8, "grant": [15, 270], "granular": [70, 184], "graph": [13, 28, 30, 31, 40, 58, 64, 81, 84, 86, 88, 92, 161, 162, 163, 167, 170, 215, 251, 252, 262, 263, 274, 278, 282, 300], "graphic": [8, 129, 152, 156, 232], "gratefulli": 2, "gravdahl": [229, 238], "gravit": [53, 73, 74, 131, 134, 161, 164, 198, 205, 221, 222, 232, 233, 258, 272, 289, 295, 317], "gravitational_forc": 295, "gravitationalp": 317, "graviti": [51, 53, 61, 73, 86, 92, 131, 134, 136, 146, 199, 208, 216, 219, 220, 221, 224, 227, 231, 232, 234, 287, 295, 296, 317], "gravityvector": 317, "great": 157, "greater": [51, 73, 112], "greatest": 156, "greatli": [226, 239], "greedi": 299, "greek": [27, 258], "green": [23, 52, 98, 149, 151, 163, 164, 229, 238, 254, 263, 321], "green_env": 98, "gregori": 17, "grep": [25, 26, 41, 44, 92, 94, 122, 123, 125, 141, 166, 170, 177, 182, 185, 213, 283, 320], "grew": 210, "grid": [8, 17, 28, 29, 30, 52, 61, 77, 86, 104, 127, 133, 134, 148, 149, 150, 156, 164, 166, 167, 169, 170, 171, 177, 178, 193, 202, 215, 216, 222, 233, 248, 257, 259, 265, 267, 268, 269, 280, 286, 316, 320], "grid_bound": [228, 236], "grid_dens": [228, 236], "griddistort": 268, "gridmot": 268, "ground": [55, 193, 224, 234, 298, 299, 320], "groundwork": [228, 236], "group": [8, 10, 15, 36, 59, 65, 67, 71, 77, 91, 92, 102, 117, 139, 169, 178, 225, 240, 284, 297, 299, 310, 320], "group1": [310, 313], "group2": [310, 313], "groupbi": [169, 178, 320], "groupdict": 297, "grow": [22, 35, 77, 117, 127, 162, 164, 166, 182, 200, 205, 210, 224, 226, 234, 239, 259, 270, 290, 299], "growth": [41, 45, 84, 85, 90, 93, 107, 117, 119, 131, 132, 166, 205, 224, 226, 234, 239, 242, 251, 259, 273, 282, 283, 284, 287, 290, 298], "gsap": [267, 268, 269], "gt": [72, 73, 131, 298], "gte": 200, "guan": [227, 231], "guarante": [11, 12, 17, 37, 45, 53, 56, 61, 76, 79, 81, 82, 84, 86, 97, 105, 112, 119, 146, 161, 163, 167, 169, 189, 193, 194, 196, 199, 202, 205, 209, 222, 224, 226, 227, 231, 233, 234, 239, 243, 247, 248, 249, 251, 252, 256, 259, 261, 283, 286, 287, 294, 297, 298, 303, 309, 313], "guard": [9, 10, 39, 45, 59, 61, 127, 171, 190, 199, 216, 217, 301, 317], "guess": [51, 84, 225, 240], "gui": 147, "guid": [1, 4, 19, 26, 28, 29, 31, 33, 36, 40, 42, 47, 48, 50, 52, 53, 56, 57, 59, 64, 69, 79, 83, 103, 105, 122, 123, 126, 137, 138, 143, 146, 149, 152, 154, 156, 161, 162, 163, 164, 166, 167, 168, 173, 174, 175, 176, 179, 180, 181, 189, 192, 194, 196, 197, 198, 199, 201, 205, 211, 212, 214, 218, 232, 242, 243, 257, 262, 263, 266, 267, 270, 277, 297, 299, 301, 302, 303, 304, 309, 310, 319], "guidanc": [19, 22, 23, 29, 36, 65, 67, 95, 98, 102, 105, 115, 127, 192, 242, 246, 275, 308], "guidelin": [11, 19, 39, 52, 54, 57, 58, 59, 68, 69, 78, 79, 82, 84, 86, 93, 95, 98, 102, 103, 107, 109, 118, 119, 125, 127, 138, 148, 160, 166, 167, 168, 172, 179, 184, 189, 192, 193, 196, 199, 204, 205, 216, 243, 245, 247, 254, 257, 261, 262, 280, 293, 294, 301, 309], "guido": 297, "guldner": [10, 123, 205, 257], "guler": [223, 235], "gumbel": 313, "guo": [205, 228, 236], "gust": [222, 233], "gutter": [30, 156], "gz": [92, 169, 254, 320], "gzip": [30, 31, 254], "g\u1d62": 251, "g\u2080": 198, "h": [12, 19, 35, 39, 40, 53, 77, 78, 81, 84, 86, 92, 102, 108, 119, 120, 146, 147, 149, 161, 170, 192, 194, 199, 200, 202, 203, 204, 205, 207, 215, 223, 226, 227, 228, 230, 231, 232, 235, 236, 237, 239, 245, 246, 251, 252, 254, 255, 267, 269, 271, 274, 279, 280, 284, 287, 290, 300, 308, 310], "h1": [24, 25, 32, 33, 252, 266, 267, 269], "h11": [225, 240], "h12": [225, 240], "h2": [24, 25, 32, 33, 252, 266], "h3": [24, 25, 32, 33, 252, 266], "h4": [25, 32, 252, 266], "h5": 61, "h5py": [15, 61], "h_": [200, 232, 290], "h_0": 193, "h_1": 198, "h_2": 198, "h_i": 198, "h_stat": 313, "ha": [9, 12, 14, 17, 18, 20, 21, 22, 24, 38, 40, 49, 51, 52, 53, 55, 58, 59, 61, 64, 65, 67, 72, 74, 80, 82, 83, 85, 86, 92, 95, 97, 98, 104, 115, 117, 119, 121, 122, 126, 127, 134, 143, 145, 146, 161, 162, 163, 164, 167, 169, 171, 177, 183, 197, 199, 200, 201, 202, 204, 212, 214, 215, 216, 218, 220, 222, 223, 224, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 244, 248, 251, 256, 269, 274, 275, 276, 281, 290, 295, 298, 299, 301, 310, 320], "habit": 44, "hack": 310, "had": [24, 26, 32, 33, 65], "hadamard": [119, 246, 291], "hairer": [84, 290], "half": [35, 67, 79, 97, 200, 204, 205, 206, 226, 228, 236, 239, 293], "hall": [17, 35, 78, 81, 123, 161, 192, 194, 204, 205, 207, 230, 237, 287, 310], "hallmark": [222, 233], "halt": [224, 232, 234], "halton": [309, 310], "halv": [135, 200, 290], "hamerlain": [223, 235], "hamilton": 198, "hamiltonian": [39, 82, 209], "hammami": [228, 236], "han": [227, 231], "hand": [30, 95, 127, 146, 164, 166, 167, 220, 222, 223, 224, 225, 229, 232, 233, 234, 235, 238, 240, 299, 304, 305], "handl": [1, 5, 12, 16, 19, 22, 25, 27, 28, 29, 31, 35, 36, 37, 38, 40, 46, 52, 53, 55, 56, 58, 59, 60, 61, 65, 67, 68, 71, 73, 75, 77, 78, 81, 82, 83, 85, 86, 89, 90, 93, 98, 100, 103, 105, 106, 110, 114, 115, 117, 119, 120, 124, 127, 132, 142, 143, 148, 161, 162, 163, 164, 165, 167, 168, 169, 172, 173, 177, 179, 180, 181, 184, 188, 189, 192, 193, 197, 199, 200, 201, 202, 205, 208, 212, 213, 215, 216, 217, 218, 220, 223, 224, 230, 232, 234, 235, 237, 242, 244, 246, 248, 253, 254, 255, 259, 261, 271, 273, 276, 277, 278, 279, 280, 283, 284, 290, 291, 293, 294, 296, 297, 298, 301, 303, 304, 318], "handle_controller_error": 63, "handle_controller_failur": 63, "handle_emerg": 111, "handle_factory_failur": 111, "handle_failur": 255, "handle_memory_leak": 111, "handle_performance_degrad": 111, "handle_pso_error": 98, "handle_thread_deadlock": 111, "handle_workflow_error": 252, "handled_error": 98, "handler": [28, 71, 112, 117, 144, 247, 254, 297, 321], "handoff": [55, 82, 243], "hang": [10, 117, 147, 222, 223, 225, 233, 235, 240, 306], "hansen": 213, "happen": [94, 144, 145, 146, 155, 164, 177, 182, 276], "happi": [40, 129, 141, 270], "har": 251, "hara": 261, "hard": [17, 86, 133, 136, 141, 142, 144, 148, 166, 167, 201, 221, 222, 226, 233, 239, 310], "hardcod": [17, 70, 108, 109, 143], "harden": [63, 89, 92, 188, 242], "harder": [134, 162], "hardwar": [8, 9, 30, 31, 36, 40, 59, 61, 62, 64, 67, 68, 72, 73, 74, 84, 86, 91, 93, 95, 116, 119, 125, 128, 131, 134, 135, 142, 143, 144, 145, 146, 150, 156, 161, 163, 167, 168, 169, 175, 189, 195, 196, 197, 203, 218, 223, 227, 228, 230, 231, 232, 235, 236, 237, 242, 243, 244, 245, 247, 249, 250, 253, 259, 261, 262, 273, 276, 277, 283, 295, 299, 309, 310, 313, 317], "hardware_config": 321, "hardware_error": 261, "hardware_interfac": 61, "hardwareaccel": 317, "hardwaresafetysystem": 93, "hark": 310, "harri": [2, 15, 17], "harris2020arrai": [8, 17], "harrison": 123, "has_compute_control": 117, "has_constraint": 215, "has_cont": 29, "has_failur": 255, "has_gain": 117, "has_math": 299, "has_numerical_issu": 209, "has_opt": 76, "has_proof": 299, "has_properti": 76, "has_requir": 76, "has_reset": 117, "has_return": 300, "hasattr": [17, 35, 38, 40, 49, 51, 52, 61, 63, 67, 72, 75, 76, 82, 86, 98, 100, 108, 109, 114, 115, 116, 117, 209, 210, 213, 242, 248, 254, 274, 276, 277, 279, 298, 300, 301], "hash": [24, 29, 45, 70, 98, 146, 154, 164, 165, 169, 188, 315], "hassan": [2, 123], "hassanzadeh": 202, "hasti": 310, "hat": [191, 258, 279, 288, 289, 294], "hatfield": 8, "have": [2, 13, 14, 17, 23, 25, 38, 40, 51, 53, 56, 57, 59, 61, 64, 65, 72, 73, 74, 84, 91, 93, 94, 95, 98, 103, 117, 123, 124, 125, 126, 127, 129, 137, 138, 140, 145, 146, 153, 154, 155, 163, 168, 169, 170, 177, 178, 191, 192, 193, 196, 199, 201, 204, 205, 206, 213, 222, 223, 225, 226, 230, 232, 233, 235, 237, 239, 240, 249, 256, 257, 265, 270, 279, 286, 287, 290, 294, 299, 300, 301, 310, 313], "haz": 270, "hazard": 261, "hdf5": [8, 15, 59, 61], "head": [13, 26, 91, 142, 145, 267, 269, 298], "header": [8, 24, 26, 30, 31, 39, 190, 218, 232, 242, 244, 255, 257, 259, 266, 267, 293, 294, 295, 298], "header_compli": 255, "header_valid": 255, "header_viol": 255, "headercomplianceresult": 255, "headless": [34, 90, 190, 284], "heal": 301, "health": [16, 17, 25, 26, 35, 63, 64, 81, 85, 89, 91, 92, 93, 95, 98, 102, 136, 188, 190, 213, 242, 244, 247, 250, 251, 255, 261, 283, 301, 322], "health_check": [63, 92, 98, 254, 321], "health_check_endpoint": 111, "health_check_interv": [92, 111], "health_handl": 254, "health_histori": 111, "health_log_fil": 254, "health_logg": 254, "health_metr": [93, 255], "health_monitor": [9, 17], "health_ok": 98, "health_percentag": 92, "health_report": 254, "health_report_": 254, "health_scor": [102, 247, 254], "health_statu": [63, 98, 254], "healthcar": [228, 236], "healthcheck": [63, 90, 91, 92], "healthcheckresult": 17, "healthi": [92, 98, 115, 167, 201, 202, 254, 291, 321], "healthmonitoringworkflow": 321, "healthstatu": 17, "heap": [142, 245], "heartbeat": 261, "heat": [223, 227, 231, 235, 317], "heatmap": [1, 28, 30, 153, 156, 171], "heavi": [134, 148, 162, 166, 169, 170, 232, 267, 269, 271, 313, 318], "heavier": [120, 134, 169], "heavili": [19, 61, 68, 81, 118, 164, 165, 167, 222, 233, 253, 254], "heavy_cart": 169, "heavy_pendulum": 169, "hedg": [222, 233, 309, 310], "heer": 8, "height": [65, 129, 140, 143, 144, 156, 159, 163, 164, 198, 216, 225, 240], "held": [45, 61, 77, 221, 226, 239, 309, 310], "hello": [1, 27], "helm": [2, 92, 297], "help": [19, 22, 98, 117, 122, 127, 137, 138, 146, 151, 160, 199, 201, 222, 224, 230, 233, 234, 237, 265, 270, 298, 299, 300, 310, 321, 323], "helper": [22, 29, 39, 51, 55, 56, 86, 127, 130, 136, 309], "helvetica": 159, "hepso": [224, 234], "here": [25, 40, 45, 70, 81, 95, 117, 127, 129, 137, 138, 139, 141, 143, 166, 185, 221, 224, 227, 230, 231, 232, 234, 237, 254, 262, 269, 270, 271, 297, 321], "herebi": 15, "hero": [268, 269], "hessian": 290, "heterogen": 172, "heurist": [65, 67, 73, 232, 250], "hex1": 267, "hex2": 267, "hf_content": 321, "hibi": [226, 239], "hidden": [7, 17, 30, 71, 90, 140, 143, 144, 145, 257, 259, 286, 316], "hide": [27, 29, 31, 52, 141, 154, 156, 163, 224, 229, 234, 238, 300], "hierarch": [11, 19, 38, 61, 63, 98, 100, 102, 123, 181, 190, 229, 238, 247, 263], "hierarchi": [13, 17, 25, 26, 52, 56, 59, 61, 71, 72, 75, 76, 84, 100, 105, 112, 114, 207, 208, 215, 250, 263, 266, 273, 274, 297, 317], "high": [1, 2, 4, 7, 9, 10, 17, 19, 20, 21, 22, 26, 28, 30, 31, 32, 35, 38, 39, 40, 42, 44, 45, 49, 53, 64, 65, 68, 72, 73, 75, 76, 77, 78, 79, 81, 82, 85, 86, 90, 92, 93, 98, 101, 102, 109, 114, 115, 117, 118, 119, 120, 121, 122, 124, 126, 127, 129, 132, 133, 135, 136, 146, 148, 149, 151, 153, 154, 156, 162, 163, 164, 165, 166, 167, 168, 170, 171, 178, 181, 182, 183, 184, 185, 190, 193, 195, 199, 200, 201, 202, 203, 207, 209, 211, 213, 214, 216, 217, 219, 220, 221, 222, 223, 226, 227, 231, 232, 233, 235, 239, 242, 243, 246, 251, 254, 255, 256, 266, 273, 275, 277, 279, 280, 283, 287, 290, 291, 293, 294, 298, 299, 300, 308, 309, 310, 318, 320, 321], "high_energi": 86, "high_energy_st": 75, "high_frequ": 113, "high_frequency_cont": 248, "high_load": 93, "high_mass": 166, "high_performance_mod": 113, "high_performance_pso_integr": 248, "high_risk": 255, "high_veloc": [98, 113, 275, 280], "high_velocity_condit": 75, "high_velocity_initi": 75, "higham": [35, 199, 207, 290], "highcontrollerlat": 92, "highcpuusag": 92, "higher": [2, 31, 53, 62, 65, 67, 74, 77, 78, 79, 81, 82, 83, 84, 85, 86, 98, 101, 103, 113, 114, 118, 119, 120, 121, 122, 124, 132, 134, 146, 163, 164, 165, 166, 167, 170, 183, 185, 187, 192, 193, 197, 199, 201, 202, 206, 207, 216, 222, 223, 224, 226, 227, 229, 230, 231, 233, 234, 235, 237, 238, 239, 253, 256, 257, 273, 280, 290, 294, 297, 298, 299, 306, 310, 313, 318], "higherrorr": 92, "highest": [11, 36, 51, 52, 56, 67, 72, 78, 84, 88, 100, 109, 116, 132, 158, 166, 197, 200, 218, 230, 237, 274, 279, 293, 298, 303, 310], "highli": [82, 83, 122, 127, 167, 189, 193, 194, 201, 205, 222, 223, 232, 233, 235, 270], "highlight": [1, 8, 15, 19, 25, 26, 29, 30, 57, 59, 137, 138, 140, 141, 142, 143, 144, 154, 164, 192, 223, 224, 225, 227, 228, 231, 232, 234, 235, 236, 240, 267, 269, 320], "highmemoryusag": 92, "hil": [8, 9, 10, 11, 19, 22, 44, 46, 52, 54, 59, 61, 62, 63, 67, 72, 73, 74, 84, 91, 92, 93, 95, 101, 114, 116, 119, 131, 146, 147, 150, 166, 189, 202, 203, 216, 218, 222, 223, 224, 228, 230, 233, 234, 235, 236, 237, 242, 245, 250, 253, 261, 266, 277, 283, 309, 322], "hil_client": 116, "hil_config": [128, 253], "hil_constraint": 253, "hil_control": 277, "hil_data": 170, "hil_max_forc": 278, "hil_optim": 253, "hil_result": [170, 177], "hilconfig": [9, 73], "hilcontrol": 277, "hilcontrollercli": 9, "hilfaultdetect": 119, "hilintegrationprotocol": 277, "hilsafetywrapp": 277, "hinder": 17, "hing": [134, 161, 222, 232, 233], "hint": [2, 14, 17, 19, 28, 56, 57, 58, 59, 63, 67, 70, 71, 93, 103, 116, 139, 140, 143, 220, 242, 244, 273, 276, 280, 297, 300], "hist": [61, 77, 78, 85, 118, 170, 171], "histogram": [118, 155, 228, 236], "histor": [7, 10, 19, 53, 81, 88, 98, 127, 173, 228, 229, 236, 238, 242, 247, 249, 252, 255, 284, 300, 310, 315], "histori": [10, 17, 20, 31, 35, 36, 38, 39, 40, 41, 44, 51, 52, 55, 56, 59, 61, 63, 76, 77, 80, 81, 82, 83, 84, 85, 86, 91, 95, 98, 105, 107, 111, 115, 116, 117, 118, 119, 127, 132, 133, 136, 137, 138, 146, 148, 150, 151, 167, 193, 197, 205, 210, 211, 214, 216, 223, 224, 228, 229, 234, 235, 236, 238, 242, 248, 250, 251, 253, 254, 260, 262, 274, 278, 290, 301, 302, 320, 321], "historical_analysi": 88, "historical_baselin": 255, "historical_coverag": 255, "history_analysi": 280, "history_list": 86, "history_storag": 81, "hit": [39, 90, 98, 182, 215], "hit_k_max": 77, "hit_k_min": 77, "hit_rat": 98, "hline": 149, "hnp": 209, "hoc": [178, 222, 233], "hochberg": [309, 310], "hold": [55, 61, 84, 98, 115, 117, 119, 125, 191, 205, 245, 261, 282, 287, 296, 310], "holist": 232, "holm": [309, 310], "holonom": [223, 235], "homaifa": 290, "home": [31, 90, 92, 267], "homepag": 16, "homogen": [169, 199, 203, 205, 249, 308, 309], "homoscedast": [309, 313], "honest": 67, "honesti": 67, "honor": 22, "hook": [7, 16, 25, 26, 29, 30, 31, 39, 59, 61, 81, 89, 188, 193, 194, 207, 250, 282, 300, 301, 323], "hopkin": [35, 290], "horizon": [10, 19, 22, 49, 51, 52, 56, 72, 74, 103, 117, 119, 167, 171, 188, 202, 203, 224, 229, 234, 238, 250, 293, 310], "horizont": [24, 33, 63, 74, 82, 84, 86, 111, 134, 161, 163, 164, 198, 199, 220, 222, 226, 232, 233, 239, 242, 250, 288, 289, 296, 317], "hosm": [224, 234], "host": [11, 16, 72, 91, 92, 116, 131, 139, 170, 188, 270], "hostnam": 92, "hot": [8, 41, 44, 73, 115, 173, 203, 208, 243], "hotfix": [23, 142], "hotspot": 44, "hour": [1, 9, 10, 14, 21, 27, 28, 29, 30, 31, 38, 39, 41, 55, 59, 67, 88, 92, 93, 122, 124, 129, 138, 147, 167, 169, 210, 211, 242, 245, 251, 254, 261, 298, 320], "hourli": [210, 211], "hover": [27, 28, 29, 30, 64, 119, 120, 139, 140, 142, 144, 156, 157, 263, 265, 268], "how": [2, 11, 12, 52, 58, 77, 94, 95, 102, 118, 123, 125, 128, 129, 131, 132, 133, 135, 136, 138, 146, 152, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 185, 186, 189, 201, 205, 210, 222, 225, 226, 227, 231, 232, 233, 239, 240, 265, 275, 290, 298, 303, 309, 310, 313, 315, 320], "howev": [82, 127, 145, 195, 199, 222, 223, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 239, 290, 318], "hp": 278, "hpc": [8, 17], "href": 144, "hsd": 178, "hsl": 269, "hsmc": [224, 234], "htc": 31, "html": [1, 8, 10, 13, 15, 24, 25, 26, 27, 28, 29, 30, 32, 34, 39, 44, 65, 67, 87, 89, 93, 126, 127, 128, 129, 138, 141, 142, 144, 154, 156, 159, 186, 188, 189, 194, 228, 236, 281, 283, 297, 323], "html5": 28, "html_context": 315, "html_css_file": [27, 28, 30, 31, 139, 141, 142], "html_js_file": [27, 28, 30, 31, 139, 141, 142, 144], "html_theme_opt": 315, "htmlcov": [39, 87, 126, 127, 282, 323], "htop": 253, "http": [2, 8, 10, 13, 15, 27, 28, 31, 37, 44, 63, 70, 89, 90, 91, 92, 121, 122, 123, 124, 126, 129, 140, 141, 144, 146, 150, 170, 189, 222, 224, 225, 228, 229, 233, 234, 236, 238, 240, 265, 268, 270, 283, 297, 315, 320, 321], "http_interfac": 9, "httpget": [63, 92], "huang": [77, 205, 224, 227, 230, 231, 234, 237], "hub": [11, 52, 64, 91, 127], "hue": 169, "huge": 200, "human": [12, 49, 52, 98, 131, 229, 238, 261, 273, 298, 299], "humanoid": [222, 233], "hundr": [224, 234], "hunter": [2, 8], "hunter2007matplotlib": 8, "hup": 92, "hurwitz": [72, 78, 97, 125, 163, 192, 196, 199, 205, 206, 208, 248, 249, 273, 274, 275, 279, 287, 290, 291], "hurwitz_1": 78, "hurwitz_2": 78, "hussain": [223, 226, 235, 239], "hx_": 232, "hybrid": [0, 2, 9, 10, 11, 20, 22, 29, 30, 34, 38, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 64, 69, 71, 72, 73, 76, 77, 78, 79, 82, 83, 84, 87, 98, 100, 101, 103, 105, 106, 114, 115, 116, 117, 127, 128, 129, 130, 131, 133, 146, 148, 149, 158, 159, 162, 163, 164, 167, 168, 170, 177, 182, 183, 184, 187, 189, 193, 199, 202, 205, 208, 215, 216, 222, 223, 230, 232, 233, 235, 237, 241, 244, 245, 247, 248, 250, 253, 259, 265, 272, 275, 276, 277, 290, 291, 293, 294, 297, 302, 304, 317, 320, 322], "hybrid_adaptive_sta_smc": [9, 19, 38, 40, 42, 50, 51, 52, 53, 56, 63, 65, 67, 72, 73, 75, 76, 79, 81, 82, 88, 92, 93, 98, 100, 101, 102, 103, 105, 106, 107, 108, 114, 115, 116, 117, 128, 131, 132, 146, 148, 149, 150, 166, 167, 169, 170, 177, 189, 197, 210, 216, 222, 223, 224, 226, 227, 231, 233, 234, 235, 239, 242, 244, 247, 250, 253, 254, 265, 273, 275, 276, 277, 278, 280, 283, 301, 302, 303, 317, 320, 321], "hybrid_adaptive_sta_smc_bound": 76, "hybrid_adaptive_sta_smc_gain": 76, "hybrid_adaptive_sta_smc_technical_guid": 30, "hybrid_analysi": 321, "hybrid_bound": 275, "hybrid_config": [106, 275, 276], "hybrid_control": 276, "hybrid_featur": 253, "hybrid_gain": [242, 253], "hybrid_mod": [51, 72, 98, 100, 101, 103, 105, 106, 109, 115, 273, 275, 276, 279], "hybrid_param": [103, 105], "hybrid_pso_local_search": 253, "hybrid_robust": 169, "hybrid_smc": [28, 30, 159, 280], "hybrid_smc_bound": 249, "hybrid_smc_deprec": 98, "hybrid_smc_fix_technical_document": 40, "hybrid_smc_runtime_fix": 300, "hybrid_smc_technical_guid": [78, 81], "hybrid_sta": [49, 51, 100, 103, 105, 117, 277], "hybridadaptivesmcconfig": 216, "hybridadaptivestasmc": [9, 10, 41, 63, 76, 81, 82, 86, 98, 132, 210, 222, 233, 244, 282, 283, 302, 321], "hybridadaptivestasmcconfig": [38, 51, 277], "hybridcontrol": 55, "hybridctrl": 317, "hybridmod": [49, 51, 56, 80, 98, 100, 101, 103, 105, 106, 109, 273, 275, 276], "hybridperf": 259, "hybridsmc": [86, 317], "hybridsmcconfig": [38, 65, 67, 273, 275, 276], "hybridsmcconfigmapp": 63, "hybridsmcparamet": 109, "hybridstaoutput": [40, 82, 83, 301, 302], "hype": 12, "hyper": [223, 224, 229, 230, 234, 235, 237, 238], "hyper_search": [224, 234], "hyperbol": [22, 78, 163, 192, 196, 206, 222, 223, 224, 226, 230, 232, 233, 234, 235, 237, 239, 273, 289], "hypercub": [202, 309, 310, 313], "hyperlink": [13, 257], "hyperparamet": [8, 15, 30, 52, 56, 64, 127, 153, 167, 216, 222, 233, 250, 251, 253, 308, 309, 310, 320], "hyperparameter_optim": 58, "hyperplan": 78, "hyperspe": 268, "hypersurfac": 205, "hypervolum": 209, "hypothes": [127, 284, 310], "hypothesi": [1, 15, 34, 37, 73, 127, 136, 169, 178, 192, 193, 194, 207, 209, 242, 261, 282, 283, 284, 299, 310, 313, 321], "hypothesis_result": 169, "hypothesis_test": [169, 310], "hypothesis_testing_analysi": 321, "hypothesiswork": 8, "hypothet": 300, "hyst": 195, "hysteresi": [37, 55, 69, 78, 81, 82, 118, 119, 125, 222, 233, 290], "hysteresis_design_spec": [119, 120], "hysteresis_en": [118, 119, 120], "hysteresis_low": [118, 119, 120], "hysteresis_ratio": [78, 195, 290], "hysteresis_upp": [118, 119, 120], "hz": [35, 45, 65, 67, 72, 73, 74, 77, 78, 84, 85, 86, 92, 93, 98, 118, 124, 164, 166, 170, 177, 185, 196, 197, 200, 209, 216, 221, 232, 245, 253, 265, 274, 283, 284, 285, 290, 306], "h\u00b2": 200, "h\u2074": 200, "h\u2075": 200, "h\u2080": [97, 169, 178, 284, 310, 320], "h\u2081": [97, 169, 178, 310, 320], "i": [2, 5, 7, 8, 11, 13, 15, 19, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 44, 46, 48, 49, 50, 52, 53, 54, 55, 56, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 103, 105, 106, 114, 117, 118, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 138, 141, 142, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 162, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 216, 217, 220, 221, 222, 224, 232, 233, 234, 244, 245, 246, 249, 253, 254, 255, 256, 258, 260, 261, 265, 267, 268, 270, 271, 273, 275, 276, 277, 279, 282, 283, 284, 285, 287, 288, 289, 290, 294, 295, 296, 298, 299, 300, 301, 303, 304, 306, 308, 309, 315, 317, 318, 319, 320, 321, 323], "i1": [72, 117, 131, 134, 164, 198, 220], "i1i_": [225, 240], "i2": [72, 117, 131, 134, 164, 198, 220], "i2i_": [225, 240], "i7": [61, 78, 119, 197, 259, 299], "i_": [220, 225, 240], "i_1": [74, 86, 198, 200, 220, 221, 225, 227, 231, 240, 272, 288, 290, 295], "i_2": [74, 86, 198, 200, 220, 221, 225, 227, 231, 240, 272, 288, 290, 295], "i_best": 202, "i_dominates_j": 291, "i_eff1": 161, "i_eff2": 161, "i_i": [220, 298, 299], "i_v": 88, "iae": [45, 74, 97, 223, 229, 235, 238, 260, 285, 306], "ic": [61, 128, 133, 135, 136, 150, 167, 170], "ic_idx": [150, 170], "ic_list": 61, "ic_mean": [135, 136], "ic_std": [135, 136], "icec": 123, "icnn": [123, 162, 257], "icon": [1, 138, 143, 144, 266, 267, 268], "id": [10, 17, 26, 27, 30, 37, 39, 40, 45, 79, 91, 121, 122, 125, 156, 188, 216, 260, 273, 282, 285, 291, 297, 298, 300, 320], "idea": [86, 163, 200, 202, 224, 234, 270], "ideal": [35, 65, 77, 103, 157, 195, 200, 202, 205, 222, 226, 227, 231, 233, 239, 249, 287, 310], "idealis": [223, 235], "ident": [19, 65, 77, 98, 106, 117, 150, 166, 193, 194, 196, 199, 213, 216, 220, 224, 225, 227, 231, 234, 240, 250, 265, 276, 290, 318, 321], "identif": [30, 44, 45, 56, 67, 87, 88, 115, 190, 221, 249, 254, 255, 282, 283, 310], "identifi": [8, 10, 14, 25, 30, 32, 39, 45, 49, 51, 53, 56, 61, 67, 71, 75, 76, 88, 93, 98, 103, 105, 107, 116, 121, 127, 156, 158, 169, 171, 187, 190, 194, 197, 201, 218, 223, 229, 230, 235, 237, 238, 247, 249, 261, 273, 274, 283, 291, 298, 299, 309, 310], "identified_gap": 255, "identify_failed_servic": 93, "identify_gap": 88, "idiom": 17, "idre": [223, 235], "idx": [104, 291], "idxmin": 65, "iec": [243, 261], "ieee": [8, 13, 77, 78, 79, 81, 85, 103, 122, 123, 162, 169, 177, 193, 194, 196, 197, 202, 205, 206, 223, 226, 227, 228, 230, 231, 235, 236, 237, 239, 245, 246, 256, 257, 259, 261, 287, 291, 298, 320], "iet": [230, 237], "ifac": [122, 257], "ifconfig": 177, "iff": [287, 291], "iftikhar": [226, 239], "ignor": [10, 19, 45, 53, 61, 70, 85, 94, 134, 146, 167, 169, 222, 230, 233, 237, 283, 284, 297], "ignorecas": [297, 298], "ii": [221, 230, 232, 237, 248, 250, 290, 291], "iia": 232, "iii": [35, 221, 230, 232, 237], "ij": [191, 198, 201, 225, 240, 290], "ijaseit": [222, 233], "ijc": [85, 206], "ijk": [198, 225, 240], "ijrnc": 122, "ik": [198, 225, 240], "ill": [22, 65, 78, 81, 193, 198, 205, 206, 209, 213, 225, 226, 239, 240], "ill_condit": 209, "illustr": [31, 63, 224, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 260], "iloc": [51, 65, 318], "im": [200, 267, 268, 269], "imag": [1, 13, 27, 31, 63, 92, 144, 153, 268], "imagepullpolici": 92, "imagetrail": 268, "imaginari": 287, "imbal": 193, "imbalanc": [291, 309, 310], "img": 74, "immedi": [7, 12, 19, 24, 30, 33, 38, 45, 59, 61, 71, 79, 88, 90, 91, 98, 107, 111, 117, 118, 127, 139, 142, 147, 153, 199, 216, 241, 242, 244, 250, 253, 254, 256, 276, 280, 299, 300, 309, 322], "immediate_termin": 252, "immers": 153, "immut": [17, 44, 82, 105, 196], "imp": 53, "impact": [7, 9, 15, 23, 25, 27, 29, 30, 31, 35, 39, 40, 44, 45, 52, 56, 61, 65, 67, 69, 71, 72, 84, 86, 88, 93, 94, 98, 106, 108, 122, 127, 147, 156, 165, 171, 177, 180, 184, 190, 192, 193, 199, 201, 209, 210, 218, 221, 222, 233, 245, 249, 255, 259, 290, 298, 299, 309, 320], "impact_assess": 255, "imperfect": 166, "implement": [1, 2, 8, 12, 13, 14, 19, 20, 22, 23, 30, 31, 32, 40, 42, 44, 49, 52, 55, 56, 58, 59, 62, 63, 64, 65, 67, 68, 71, 73, 74, 75, 78, 80, 81, 82, 83, 86, 88, 93, 95, 97, 102, 114, 118, 122, 123, 126, 127, 128, 129, 137, 138, 146, 148, 151, 152, 156, 160, 161, 163, 164, 166, 167, 169, 170, 171, 172, 183, 185, 189, 190, 196, 197, 201, 202, 212, 214, 216, 218, 220, 221, 222, 223, 232, 233, 235, 241, 244, 245, 250, 253, 254, 257, 258, 259, 265, 266, 273, 276, 277, 282, 283, 285, 286, 287, 292, 293, 294, 295, 296, 301, 302, 303, 306, 308, 311, 316, 317, 321, 323], "implementation_report": 16, "implementation_verifi": 279, "implementationtestsuit": 75, "impli": [165, 198, 200, 287, 290], "implic": [120, 161, 197, 200, 201, 208, 226, 239, 293], "implicit": [51, 55, 56, 61, 79, 106, 200, 224, 232, 234, 287, 300, 301], "implicitli": [40, 55, 301], "import": [7, 8, 10, 13, 17, 20, 23, 28, 32, 35, 38, 39, 44, 45, 49, 50, 52, 53, 55, 58, 61, 65, 67, 68, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 90, 92, 93, 94, 97, 98, 100, 101, 102, 103, 105, 106, 107, 109, 113, 114, 115, 118, 119, 120, 122, 127, 128, 130, 131, 132, 133, 134, 135, 136, 143, 144, 146, 148, 149, 150, 151, 154, 158, 159, 161, 164, 165, 166, 168, 169, 170, 171, 177, 178, 182, 185, 193, 198, 201, 202, 203, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 224, 232, 234, 237, 242, 248, 252, 253, 254, 255, 261, 266, 267, 271, 273, 274, 275, 276, 277, 278, 282, 283, 287, 290, 291, 293, 297, 298, 300, 301, 303, 309, 313, 315, 318, 319, 320, 321], "import_modul": 115, "import_object": [24, 33], "import_test": 117, "import_type_analyz": 71, "importance_i": 119, "importance_j": 119, "importerror": [17, 49, 50, 51, 53, 56, 98, 100, 103, 104, 105, 115, 116, 117, 124, 170, 254, 275, 276], "importlib": [29, 115], "impract": [84, 222, 233], "improp": [35, 230, 237], "improv": [5, 10, 12, 19, 22, 23, 25, 35, 36, 40, 43, 44, 51, 52, 56, 58, 59, 61, 63, 65, 67, 70, 71, 77, 78, 82, 83, 84, 87, 88, 103, 104, 105, 107, 108, 112, 115, 118, 119, 121, 123, 124, 126, 127, 128, 129, 133, 136, 137, 138, 139, 148, 149, 158, 159, 162, 164, 165, 166, 167, 168, 169, 170, 173, 182, 183, 189, 190, 192, 193, 195, 197, 199, 201, 202, 205, 210, 214, 216, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 243, 248, 249, 253, 255, 265, 273, 276, 277, 278, 283, 284, 290, 291, 293, 294, 297, 301, 303, 308, 309, 310, 321], "improvement_histori": 255, "improvement_need": 313, "improvement_opportun": 255, "improvement_pct": 214, "improvement_perc": [133, 136], "improvement_prior": 255, "improvement_r": [53, 248, 251, 253], "improvement_ratio": [58, 107, 248, 276, 277], "improvement_recommend": 255, "improvementresult": 255, "impuls": [36, 84, 222, 228, 230, 233, 236, 237], "inaccur": [122, 213], "inadequ": [194, 290], "inappropri": 251, "inc": 8, "incid": [93, 173, 175, 176, 185, 194, 261], "includ": [3, 5, 8, 10, 13, 15, 19, 20, 22, 27, 28, 29, 30, 31, 34, 37, 38, 39, 40, 45, 52, 53, 57, 61, 64, 66, 67, 69, 70, 74, 81, 82, 84, 88, 89, 90, 91, 94, 95, 98, 99, 103, 104, 106, 108, 112, 115, 116, 117, 119, 122, 123, 124, 131, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 152, 164, 166, 170, 171, 177, 185, 193, 195, 203, 204, 205, 208, 213, 216, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 237, 239, 247, 249, 252, 253, 256, 257, 259, 265, 266, 274, 275, 280, 283, 286, 287, 288, 289, 296, 298, 300, 309, 310, 312, 313, 316, 319], "incognito": [142, 144, 145, 155], "incom": [92, 185], "incompat": [15, 17, 24, 32, 33, 38, 51, 65, 67, 108, 135, 318], "incomplet": [65, 86, 98, 117, 119, 237], "incomplete_critical_coverag": 255, "incomplete_module_coverag": 255, "incomplete_safety_critical_coverag": 255, "inconclus": [65, 67, 310], "inconsist": [38, 40, 65, 67, 98, 106, 117, 119, 192, 194, 204, 207, 213, 247], "incorpor": [16, 19, 89, 112, 188, 222, 223, 224, 225, 229, 230, 232, 233, 234, 235, 237, 238, 240, 243, 247, 259], "incorrect": [35, 71, 86, 106, 108, 116, 117, 119, 135, 147, 165, 194, 224, 234, 245, 302], "incorrect_behavior": 255, "incorrectli": [82, 83, 213], "increas": [11, 17, 22, 25, 35, 40, 45, 53, 65, 67, 77, 78, 79, 81, 82, 84, 85, 86, 91, 114, 115, 118, 119, 120, 124, 128, 129, 131, 132, 133, 135, 141, 144, 148, 150, 154, 158, 163, 164, 165, 166, 167, 170, 171, 177, 178, 182, 183, 193, 195, 197, 199, 200, 201, 202, 206, 208, 213, 214, 218, 223, 224, 226, 227, 230, 231, 232, 234, 235, 237, 239, 241, 246, 251, 252, 253, 254, 265, 275, 280, 282, 283, 287, 290, 294, 298, 299, 300, 308, 320, 321], "increment": [13, 16, 25, 31, 32, 89, 98, 119, 188, 248, 265, 282, 291, 297, 298, 309, 310], "incremental_extract": 298, "incrementalevalu": 248, "incur": [230, 237], "indefinit": [86, 205, 210, 222, 226, 233, 239], "indent": [14, 25, 39, 102, 104, 117, 133, 159, 165, 216, 253, 254, 280, 297, 298], "indentationerror": 14, "independ": [17, 44, 45, 61, 68, 93, 97, 105, 120, 122, 145, 161, 162, 163, 182, 190, 197, 201, 202, 215, 225, 226, 232, 239, 240, 248, 261, 278, 282, 284, 291, 309, 310, 313, 320], "independent_quality_g": 255, "indetermin": [225, 240], "index": [2, 7, 11, 13, 16, 24, 25, 28, 29, 31, 32, 33, 43, 51, 53, 59, 61, 64, 68, 69, 77, 78, 81, 82, 85, 87, 91, 95, 102, 107, 109, 118, 126, 127, 128, 129, 138, 141, 142, 143, 146, 149, 150, 166, 169, 178, 188, 191, 199, 201, 202, 203, 209, 215, 217, 219, 222, 224, 225, 227, 230, 231, 233, 234, 237, 240, 242, 243, 254, 257, 258, 259, 266, 267, 271, 282, 286, 288, 289, 290, 293, 294, 318, 320, 321, 323], "indexeddb": [27, 155], "indexerror": 119, "indic": [1, 24, 27, 28, 30, 31, 53, 64, 65, 67, 68, 76, 77, 81, 82, 83, 84, 85, 88, 95, 98, 119, 139, 145, 146, 147, 150, 162, 164, 167, 169, 170, 185, 199, 209, 218, 220, 222, 227, 228, 229, 230, 231, 233, 236, 237, 238, 245, 246, 247, 251, 252, 253, 260, 266, 267, 268, 283, 290, 291, 292, 296, 298, 299, 300, 303, 309, 310, 313, 318], "indicates_fault": 119, "indirectli": [230, 237], "individu": [8, 14, 15, 22, 34, 38, 47, 51, 56, 59, 61, 62, 74, 88, 98, 100, 104, 107, 112, 114, 121, 129, 136, 154, 170, 171, 190, 196, 199, 249, 250, 255, 282, 283, 291, 293, 310, 318, 322, 323], "individual_result": [104, 112], "individualist": 53, "induc": [77, 82, 164, 197, 199, 226, 230, 237, 239, 245], "induct": 299, "industri": [8, 15, 19, 24, 25, 26, 36, 84, 127, 166, 169, 197, 200, 205, 218, 228, 236, 256, 259, 290, 321], "ineffect": 254, "ineffici": [44, 79, 117, 167, 222, 233, 317], "inequ": [84, 191, 287, 291, 293], "inerti": [161, 223, 225, 235, 240], "inertia": [19, 22, 45, 52, 58, 60, 61, 65, 67, 72, 73, 74, 78, 79, 81, 97, 104, 107, 112, 113, 124, 125, 131, 133, 134, 135, 136, 146, 148, 161, 164, 166, 167, 182, 191, 198, 199, 201, 205, 208, 213, 214, 216, 221, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 242, 247, 253, 254, 261, 272, 279, 288, 289, 290, 293, 295, 308, 309, 317, 321], "inertia1": 161, "inertia2": 161, "inertia_decai": 113, "inertia_matrix": [81, 295], "inertia_schedul": 293, "inertia_term": 215, "inertia_uncertainti": 75, "inertia_weight": [65, 72, 92, 113, 208, 214, 247, 250, 253, 254, 291, 318], "inevit": [227, 231], "inf": [35, 49, 51, 56, 59, 61, 73, 75, 76, 79, 86, 97, 98, 114, 115, 117, 119, 133, 134, 136, 148, 167, 177, 203, 208, 209, 213, 214, 216, 242, 250, 253, 254, 273, 277, 279, 287, 291, 300, 310, 313], "inf_stat": 75, "infeas": [148, 163, 201, 229, 238, 290, 293], "infer": [10, 56, 318], "infer_gain_bound": 56, "inferenc": 10, "inferenti": 67, "infin": [79, 81, 300], "infinit": [27, 34, 49, 50, 76, 78, 81, 107, 112, 114, 115, 116, 120, 133, 148, 155, 167, 195, 199, 205, 206, 207, 208, 223, 225, 235, 240, 246, 254, 268, 277, 291], "infinite_gain": 75, "infinitemenu": 268, "infinitescrol": 268, "infinitesim": 290, "influenc": [65, 67, 113, 133, 216, 222, 232, 233, 304], "influenti": 290, "info": [27, 29, 31, 40, 49, 51, 61, 63, 68, 70, 72, 73, 86, 90, 91, 92, 98, 104, 106, 109, 111, 114, 115, 117, 119, 124, 144, 146, 147, 164, 165, 168, 182, 183, 188, 214, 216, 220, 248, 253, 254, 263, 276, 278, 280, 288, 300, 321], "info_arrai": 253, "info_data": 253, "inform": [8, 12, 15, 36, 40, 49, 50, 57, 61, 67, 80, 93, 95, 98, 102, 106, 112, 115, 118, 127, 144, 146, 147, 162, 194, 202, 220, 222, 223, 226, 232, 233, 235, 239, 246, 247, 249, 252, 256, 261, 265, 266, 280, 290, 291, 298, 313, 320, 323], "infrar": 232, "infrastructur": [1, 4, 8, 14, 17, 28, 36, 63, 65, 71, 93, 95, 156, 174, 175, 188, 190, 199, 216, 218, 219, 223, 235, 241, 242, 262, 281, 299, 300, 317], "infti": [125, 191, 193, 199, 200, 201, 202, 208, 246, 279, 287, 290, 291, 293, 294, 299], "inher": [25, 84, 86, 132, 166, 183, 197, 222, 226, 232, 233, 239, 293, 294, 295, 310], "inherit": [17, 25, 33, 56, 61, 79, 140, 159, 199, 220, 226, 230, 237, 239, 247], "ini": [39, 92, 283, 284, 302], "init": [9, 17, 29, 35, 44, 52, 61, 65, 67, 79, 82, 94, 98, 100, 102, 117, 127, 162, 167, 199, 208, 216, 224, 234, 254, 259, 277, 287, 300, 321], "init_b": [44, 216], "init_ev": 167, "initcontrolsign": 30, "initi": [1, 17, 22, 24, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 43, 52, 55, 56, 57, 58, 59, 61, 65, 67, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 90, 92, 98, 100, 102, 103, 104, 105, 111, 114, 115, 116, 117, 119, 124, 125, 126, 127, 128, 129, 131, 132, 142, 143, 146, 147, 148, 150, 151, 152, 155, 156, 158, 161, 162, 163, 166, 167, 177, 178, 179, 180, 181, 182, 184, 185, 188, 190, 193, 195, 197, 198, 199, 202, 203, 204, 205, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 242, 249, 250, 251, 253, 254, 261, 265, 273, 274, 275, 277, 278, 279, 282, 283, 287, 289, 290, 291, 297, 298, 299, 300, 303, 310, 311, 313, 316, 317, 318, 320, 321], "initial_alpha": 166, "initial_angl": 208, "initial_angle_rad": 208, "initial_beta": 166, "initial_bound": 133, "initial_c1": 214, "initial_c2": 214, "initial_condit": [61, 128, 130, 131, 135, 148, 150, 158, 164, 166, 167, 169, 170, 278, 320, 321], "initial_conditions_batch": 17, "initial_config": 247, "initial_cost": [105, 280, 318], "initial_delta": 35, "initial_disturb": 321, "initial_energi": [209, 283], "initial_error": 75, "initial_fit": 107, "initial_gain": [49, 73, 166], "initial_guess": 51, "initial_histori": 61, "initial_inertia": 214, "initial_k": 92, "initial_memori": [17, 93, 98, 107, 114, 115, 283], "initial_posit": 208, "initial_sliding_surfac": [75, 209], "initial_st": [34, 44, 50, 51, 52, 53, 72, 73, 75, 78, 92, 98, 113, 117, 125, 133, 135, 136, 146, 150, 164, 171, 202, 203, 209, 215, 216, 228, 236, 252, 254, 275, 277, 280, 282, 283, 284], "initial_state_var": 61, "initial_swarm": 167, "initial_veloc": 208, "initialcondit": 317, "initialdelaysecond": [63, 92], "initialis": [19, 223, 235, 285, 306], "initialization_gain": 109, "initialize_cach": 117, "initialize_histori": [9, 10, 36, 40, 55, 59, 61, 77, 78, 81, 85, 86, 127, 132, 136, 150, 151, 203, 210, 211, 300, 301, 321], "initialize_st": [9, 10, 36, 55, 59, 61, 63, 77, 78, 81, 85, 86, 203, 211, 242, 300, 301, 321], "initializeplotlychart": 28, "initialst": 30, "initlyapunovsurfac": 30, "initparametersweep": 30, "initphaseportrait": 30, "initslidingsurfac": 30, "initstabilityregion": 30, "initswarm": 316, "inject": [2, 17, 22, 31, 45, 56, 71, 74, 82, 90, 93, 170, 175, 176, 202, 220, 222, 223, 224, 232, 233, 234, 235, 242, 243, 245, 261, 317], "inject_fault": 93, "inject_sensor_bia": 119, "injector": 144, "inlin": [1, 13, 17, 24, 28, 29, 32, 33, 85, 121, 131, 132, 143, 144, 145, 150, 153, 155, 157, 159, 220, 258, 266, 299, 318], "inner": [193, 208, 290, 297, 309, 310], "inner_cv_split": 310, "innerheight": 144, "innerhighlight": 143, "innerhtml": 143, "innerwidth": 144, "innov": [77, 84, 205, 218, 223, 232, 235], "inproceed": [8, 17, 123, 187, 320], "input": [29, 30, 36, 37, 44, 52, 55, 62, 64, 65, 67, 73, 75, 77, 78, 81, 82, 84, 85, 86, 87, 98, 101, 103, 107, 114, 117, 118, 119, 123, 127, 129, 130, 132, 134, 135, 143, 146, 147, 154, 156, 161, 163, 164, 165, 166, 171, 192, 197, 198, 199, 200, 202, 207, 216, 218, 221, 222, 226, 227, 230, 231, 232, 233, 237, 239, 248, 249, 255, 258, 261, 265, 269, 272, 277, 278, 279, 282, 283, 285, 287, 289, 290, 291, 295, 296, 297, 299, 300, 310, 316, 317, 318, 321], "input_data": 207, "input_matrix": 295, "input_valu": 207, "inputmatrix": 317, "insensit": [5, 51, 56, 61, 82, 163, 164, 199, 222, 223, 226, 232, 233, 235, 239], "insert": [4, 28, 117, 143], "insert_cit": 4, "insertbefor": 143, "insertcollapsebutton": 143, "inset": [267, 269, 271], "insid": [77, 79, 82, 83, 91, 146, 163, 191, 195, 205, 208, 223, 224, 226, 227, 231, 234, 235, 239, 272, 273, 275, 291], "insight": [40, 56, 59, 65, 67, 84, 142, 158, 161, 163, 166, 167, 195, 222, 232, 233, 300, 310, 318], "insightsocieti": [222, 233], "inspect": [25, 71, 91, 106, 126, 144, 147, 150, 177, 318], "inspir": [127, 129, 199, 202, 222, 223, 232, 233, 235, 270, 288], "inst": 53, "instability_penalti": [79, 224, 234, 250], "instability_penalty_factor": [19, 53, 193, 216], "instabl": [19, 37, 45, 52, 58, 62, 65, 72, 76, 78, 79, 81, 86, 92, 97, 98, 104, 112, 113, 119, 124, 127, 135, 146, 147, 148, 150, 164, 166, 167, 185, 193, 199, 201, 203, 205, 206, 207, 208, 216, 217, 222, 225, 226, 232, 233, 239, 240, 244, 246, 253, 254, 261, 265, 275, 276, 277, 284, 290, 295, 301, 310, 313], "instal": [1, 10, 12, 13, 15, 22, 27, 31, 34, 39, 49, 51, 53, 56, 59, 80, 84, 89, 90, 91, 92, 93, 95, 115, 116, 117, 122, 126, 127, 129, 139, 144, 150, 151, 153, 155, 164, 189, 254, 262, 263, 267, 268, 282, 283, 300, 320], "install_cmd": 117, "installed_solv": 84, "installed_vers": 254, "instanc": [19, 22, 25, 27, 30, 38, 44, 50, 52, 53, 56, 70, 71, 76, 82, 98, 100, 103, 106, 107, 109, 110, 116, 165, 168, 193, 194, 196, 209, 210, 211, 216, 222, 224, 225, 233, 234, 240, 242, 248, 277, 282, 283], "instant": [27, 29, 30, 31, 86, 143, 153, 154, 155], "instantan": [120, 197, 225, 240], "instanti": [2, 17, 41, 52, 55, 61, 63, 67, 76, 81, 82, 83, 86, 93, 95, 98, 107, 110, 117, 132, 164, 211, 224, 234, 242, 245, 250, 266, 277, 301, 318], "instantiation_pass": 65, "instantli": [31, 145, 153, 154, 155, 189], "instead": [12, 20, 25, 26, 34, 35, 49, 51, 61, 67, 70, 72, 78, 82, 83, 86, 98, 106, 108, 115, 116, 119, 124, 127, 133, 145, 146, 162, 163, 164, 165, 167, 171, 177, 178, 182, 185, 193, 201, 202, 203, 205, 210, 217, 226, 227, 231, 239, 254, 267, 296, 298, 300, 301, 310, 315, 318], "institut": 122, "instruct": [1, 12, 17, 28, 39, 44, 56, 95, 98, 102, 105, 115, 122, 124, 137, 139, 165, 169, 170, 197, 241, 253, 259, 262, 266, 270, 317, 320], "instrument": [226, 239], "insuffici": [10, 20, 40, 65, 73, 84, 86, 91, 98, 107, 164, 201, 215, 247, 249, 282, 290, 313], "insufficient_data": [39, 98, 111, 247], "insufficient_mathematical_valid": 255, "insur": 15, "int": [10, 19, 24, 38, 39, 40, 49, 52, 55, 56, 72, 73, 76, 81, 82, 84, 93, 94, 97, 98, 100, 101, 102, 103, 106, 114, 115, 117, 119, 120, 125, 131, 150, 159, 164, 167, 171, 191, 193, 203, 208, 209, 214, 216, 220, 223, 226, 227, 230, 231, 235, 237, 239, 248, 254, 273, 277, 280, 291, 300, 301, 313, 321], "int_": [191, 198, 200, 229, 230, 232, 237, 238, 287], "int_0": [53, 191, 195, 199, 201, 202, 209, 216, 217, 245, 246, 279, 287, 288, 290, 293, 294], "intact": 147, "integ": [44, 49, 51, 68, 72, 84, 117, 185, 208, 224, 234, 254, 298], "integr": [1, 2, 6, 8, 9, 12, 13, 14, 17, 19, 22, 23, 25, 32, 34, 35, 36, 42, 45, 46, 52, 55, 58, 60, 62, 64, 67, 68, 69, 73, 75, 81, 82, 83, 86, 87, 88, 89, 93, 102, 103, 105, 110, 118, 120, 124, 125, 127, 129, 130, 137, 138, 139, 142, 143, 145, 146, 150, 151, 152, 157, 160, 161, 163, 164, 165, 167, 169, 173, 176, 177, 178, 180, 182, 183, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 201, 205, 207, 208, 210, 211, 212, 213, 215, 216, 217, 219, 220, 223, 225, 226, 227, 231, 232, 235, 239, 240, 241, 242, 244, 246, 247, 249, 252, 253, 254, 255, 258, 259, 266, 270, 272, 285, 286, 287, 291, 293, 294, 295, 297, 301, 302, 304, 316, 317, 320, 323], "integral_": 168, "integral_act": 85, "integral_gain": 208, "integral_st": 193, "integral_usag": 81, "integrate_adaptive_smc": 98, "integrate_classical_smc": 98, "integrate_hybrid_smc": 101, "integrate_result": 252, "integrate_super_twisting_smc": 98, "integrate_system": 283, "integration_check": 252, "integration_compat": 101, "integration_coordin": 252, "integration_guid": [267, 271], "integration_health": [40, 301], "integration_issu": 75, "integration_method": 278, "integration_pso_factory_bridg": [24, 33], "integration_respons": 75, "integration_result": [75, 101, 252], "integration_scenario": 75, "integration_scor": 98, "integration_statu": 101, "integration_success": 75, "integration_test": [39, 242], "integration_with_claude_md": 39, "integrationconfig": 278, "integrationtestresult": 209, "integrationtestscenario": 209, "integrationtestsuit": [75, 321], "integrator_result": 209, "integrator_typ": 61, "integratorfactori": [52, 59], "intel": [61, 78, 119, 197, 259, 299], "intellig": [1, 19, 24, 25, 31, 32, 64, 90, 98, 109, 123, 127, 129, 133, 160, 167, 184, 189, 202, 232, 242, 246, 288], "intend": [119, 300], "intens": [17, 93, 114, 126, 147, 197, 203, 222, 229, 233, 238, 254], "intent": [14, 25, 26, 33, 56, 144, 221, 282, 283], "intention": [53, 57, 123, 145], "interact": [1, 7, 8, 12, 13, 14, 15, 19, 22, 29, 31, 53, 58, 59, 65, 75, 87, 94, 95, 97, 98, 100, 110, 124, 127, 137, 146, 147, 150, 155, 163, 164, 165, 170, 189, 197, 199, 202, 207, 216, 223, 224, 225, 232, 234, 235, 240, 250, 261, 262, 264, 265, 268, 271, 283, 305, 309, 310, 316, 317, 319, 322], "interactive_dashboard": 129, "interactive_migration_wizard": 98, "interchang": 17, "interdepend": 243, "interest": [259, 294], "interf": 117, "interfac": [6, 9, 10, 11, 17, 19, 22, 33, 36, 39, 40, 44, 47, 52, 55, 58, 59, 71, 75, 79, 82, 84, 86, 88, 91, 93, 95, 98, 101, 103, 105, 114, 117, 127, 128, 129, 130, 133, 135, 146, 169, 177, 185, 189, 192, 196, 199, 203, 215, 216, 223, 224, 232, 234, 235, 241, 242, 244, 245, 248, 254, 262, 268, 271, 277, 284, 293, 301, 316, 317, 322], "interface_nam": 278, "interface_valid": 75, "interfaceconfig": 9, "interfacecontract": 278, "interfaceerror": 63, "interfaces_": 9, "interfer": 144, "interior": [84, 291], "interlock": [87, 93], "intermedi": [11, 19, 79, 127, 130, 131, 132, 133, 134, 135, 136, 148, 149, 151, 155, 157, 169, 182, 215, 230, 237, 250, 253, 290], "intermitt": [31, 283], "intermittent_fault": 119, "intern": [8, 10, 17, 19, 31, 44, 45, 51, 52, 53, 56, 58, 61, 62, 63, 65, 67, 74, 76, 77, 78, 80, 81, 82, 86, 92, 94, 98, 103, 105, 116, 119, 121, 123, 127, 132, 138, 202, 204, 205, 210, 221, 222, 224, 226, 227, 229, 230, 231, 233, 234, 237, 238, 239, 257, 259, 272, 274, 287, 290, 291, 297, 320], "internation": 13, "internet": [31, 145, 146, 153, 155, 189, 265], "interoper": [36, 63], "interpol": [55, 196, 318], "interpret": [25, 26, 41, 51, 52, 55, 56, 58, 59, 65, 67, 81, 84, 85, 118, 119, 127, 128, 129, 146, 151, 164, 165, 166, 167, 169, 170, 178, 182, 193, 197, 198, 201, 202, 205, 209, 232, 253, 265, 288, 290, 291, 293, 297, 298, 300, 303, 309, 310, 318, 320], "interpret_cohens_d": 178, "interquartil": 259, "interrog": [93, 94], "interrupt": [53, 93, 261, 320], "interv": [12, 53, 58, 61, 63, 65, 67, 68, 70, 91, 92, 95, 97, 98, 104, 111, 113, 118, 120, 127, 129, 136, 148, 169, 178, 189, 199, 200, 232, 246, 254, 259, 282, 283, 284, 308, 309, 312, 320], "interval_i": 310, "interven": 306, "intervent": [98, 173, 254], "introduc": [5, 17, 22, 26, 62, 74, 77, 82, 102, 113, 195, 197, 199, 200, 201, 202, 206, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 256, 290, 291, 293, 300], "introduced_in_vers": 98, "introduct": [52, 82, 127, 134, 199, 202, 232, 256, 288, 290, 310, 320], "introductori": 165, "introfdm": 55, "introspect": 55, "intrus": 92, "intuit": [160, 161, 162, 164, 168, 222, 233, 310], "inv": [35, 78, 168, 197, 198, 205, 287, 290], "inv_m": 79, "invalid": [5, 20, 24, 25, 29, 33, 35, 38, 40, 44, 45, 49, 50, 51, 53, 56, 58, 61, 72, 73, 75, 76, 80, 84, 85, 86, 93, 94, 98, 103, 105, 106, 109, 114, 115, 116, 117, 119, 127, 132, 134, 136, 154, 161, 168, 170, 196, 199, 202, 209, 216, 248, 252, 254, 273, 274, 275, 276, 277, 280, 282, 300, 301, 318], "invalid_adaptive_gain": 51, "invalid_bound": 252, "invalid_config": [49, 73, 114, 196, 207], "invalid_config_result": 75, "invalid_control": [49, 116], "invalid_fit": 114, "invalid_gain": [51, 114, 199, 275, 276], "invalid_gain_index": 199, "invalid_indic": [199, 252], "invalid_param": 117, "invalid_plan": [1, 5, 22, 23], "invalid_sta_gain": 51, "invalid_typ": [50, 98], "invalidgainserror": 76, "invari": [84, 202, 205, 222, 232, 233, 261, 282, 299], "inventori": [107, 266, 297, 298], "invers": [17, 35, 51, 78, 79, 81, 168, 195, 197, 204, 205, 206, 212, 213, 226, 239, 249, 275, 287, 294], "invert": [13, 19, 20, 31, 35, 40, 49, 52, 55, 62, 64, 66, 69, 72, 74, 75, 76, 82, 83, 95, 97, 99, 113, 122, 127, 129, 131, 132, 135, 146, 147, 152, 153, 163, 168, 169, 177, 187, 189, 190, 196, 197, 199, 200, 202, 204, 206, 216, 218, 220, 221, 224, 227, 231, 232, 234, 241, 244, 246, 250, 251, 252, 253, 254, 257, 277, 286, 287, 288, 289, 293, 296, 303, 313, 316, 320], "invert_matrix": 213, "investig": [25, 32, 67, 68, 107, 115, 119, 142, 147, 164, 213, 227, 231, 259, 283, 298, 308, 313], "invis": [144, 297], "invoc": [170, 260], "invok": 61, "involv": [33, 98, 220, 222, 225, 226, 229, 233, 238, 239, 240, 246, 283, 310], "io": [8, 30, 31, 89, 90, 91, 92, 146, 149, 153, 156, 315], "io_contract": [62, 74], "ioannou": [81, 320], "ionelmc": 8, "iop": [226, 239], "iot": 259, "ip": [73, 91, 92, 177, 185, 298], "ip_address": 73, "ipaddress": 73, "ipykernel": [1, 29], "ipynb": [29, 154, 260, 298], "ipython": [29, 97], "ipywidget": [1, 29, 154], "iqr": [309, 320], "irfan": [226, 239], "iridesc": 268, "irreduc": 310, "is_al": [98, 115], "is_bound": 136, "is_compli": 255, "is_conserv": 209, "is_convex": 201, "is_domin": 112, "is_fallback": 98, "is_finit": 136, "is_numerically_unst": 135, "is_readi": 253, "is_run": [119, 277], "is_satur": 135, "is_stabl": [35, 98], "is_stagn": 253, "is_suffici": 279, "is_valid": [20, 53, 72, 76, 98, 105, 106, 115, 116, 132, 133, 136, 208, 252, 275, 276, 279, 290], "is_valid_control_output": 301, "isbn": [8, 17, 78, 123, 205, 256, 257, 297], "isdarkmod": 30, "isdigit": [73, 300], "ise": [28, 51, 53, 61, 68, 72, 75, 79, 98, 107, 128, 130, 132, 133, 134, 135, 136, 148, 149, 150, 151, 166, 167, 168, 169, 170, 178, 183, 201, 202, 215, 216, 217, 228, 236, 253], "ise_ci": 68, "ise_class": 149, "ise_classical_tri": 149, "ise_manu": 149, "ise_mean": 68, "ise_n": 53, "ise_norm": [68, 133, 201], "ise_result": [134, 135, 150], "ise_sta": 149, "ise_sta_tri": 149, "ise_v": [133, 134], "ise_valu": [135, 136, 148, 151, 228, 236], "ise_vari": 151, "isenabledfor": 51, "isfinit": [35, 38, 40, 51, 61, 72, 76, 81, 82, 86, 98, 100, 101, 107, 108, 114, 115, 116, 117, 134, 199, 203, 205, 216, 242, 248, 254, 277, 283, 291, 300, 301, 321], "isic": [223, 235], "isidori": 81, "isinf": [177, 209], "isinst": [38, 40, 49, 51, 56, 73, 76, 78, 81, 82, 85, 93, 98, 100, 101, 102, 106, 114, 115, 116, 117, 132, 151, 168, 210, 247, 277, 283, 300, 301], "ismc": [224, 234], "isna": 320, "isnan": [93, 177, 209, 300], "isnul": 320, "iso": [5, 70, 243, 245, 261], "isoformat": [93, 280], "isol": [27, 29, 39, 93, 95, 105, 117, 144, 146, 153, 154, 176, 185, 189, 190, 222, 223, 233, 235, 261, 282, 283, 284], "isolated_coverage_analysi": 88, "isolated_coverage_measur": 88, "isolated_fitness_funct": 117, "isolatedcontrollerwrapp": 117, "isort": 94, "isp": 17, "isstal": 31, "issu": [2, 3, 12, 13, 15, 19, 23, 24, 25, 26, 32, 37, 38, 40, 41, 42, 52, 53, 55, 59, 65, 67, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 86, 88, 89, 90, 93, 95, 102, 118, 122, 126, 127, 128, 129, 135, 136, 137, 138, 140, 146, 147, 148, 153, 164, 166, 178, 182, 189, 193, 195, 196, 199, 201, 204, 205, 207, 208, 209, 213, 225, 226, 239, 240, 241, 242, 244, 245, 246, 248, 250, 261, 270, 273, 277, 284, 300, 301, 304, 310, 318, 320], "issubclass": [63, 278], "issue2_compliant_constraint": 249, "issue2_overshoot": 247, "issue2_regress": 251, "issue2_regression_risk": 252, "issue2_statu": 252, "issue_10_ultrathink_resolut": [24, 33], "issue_12_pso_optimization_report": 304, "issue_12_validation_summary_": 21, "issue_compon": 254, "issue_typ": [111, 255], "issues_count": 280, "issues_found": [254, 280], "ita": [75, 95, 97, 107, 127, 128, 129, 135, 136, 148, 150, 166, 167, 169, 170, 248], "itae_manu": 149, "ital": 258, "item": [2, 5, 9, 10, 17, 30, 38, 39, 49, 51, 56, 68, 72, 73, 75, 77, 78, 81, 90, 92, 93, 98, 100, 102, 105, 106, 107, 109, 114, 115, 116, 117, 119, 122, 124, 131, 132, 134, 135, 156, 165, 166, 167, 169, 170, 171, 177, 207, 208, 209, 248, 253, 254, 257, 259, 261, 266, 267, 269, 271, 273, 277, 278, 286, 297, 310, 313, 316, 320, 321], "iter": [10, 14, 19, 20, 21, 22, 28, 33, 35, 39, 41, 43, 51, 52, 57, 59, 60, 61, 65, 67, 72, 73, 76, 77, 78, 81, 84, 85, 91, 93, 94, 97, 98, 107, 117, 120, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 146, 148, 150, 151, 155, 158, 159, 167, 170, 180, 182, 183, 195, 198, 199, 200, 201, 202, 208, 211, 214, 216, 220, 222, 223, 224, 230, 232, 233, 234, 235, 237, 242, 243, 245, 246, 250, 253, 254, 258, 259, 260, 265, 266, 275, 276, 277, 282, 283, 284, 289, 290, 292, 293, 300, 301, 303, 308, 309, 310, 316, 319, 320, 321], "iter_start": 167, "iteration_count": 215, "iteration_histori": 98, "iteration_pattern": 318, "iteration_start_tim": 251, "iteration_tim": [248, 250, 251], "iterations_complet": 280, "iterations_to_90_perc": 318, "iterations_to_95_perc": 318, "iterative_invers": 35, "iters_90": 318, "iters_overrid": [51, 53, 193, 216], "itertool": [27, 155], "its": [12, 17, 22, 45, 65, 74, 106, 202, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 240, 265, 275], "itself": [84, 85, 177, 205, 226, 239], "iv": [230, 232, 237], "i\u2081": [134, 161, 198], "i\u2082": [134, 161, 198], "j": [1, 8, 10, 13, 27, 28, 35, 40, 53, 58, 61, 68, 77, 78, 81, 84, 85, 86, 94, 97, 98, 103, 112, 127, 129, 138, 139, 140, 141, 143, 144, 152, 153, 155, 156, 157, 162, 170, 191, 193, 198, 199, 201, 202, 205, 206, 207, 209, 215, 216, 217, 220, 223, 225, 227, 229, 230, 231, 232, 235, 237, 238, 240, 245, 246, 248, 250, 252, 253, 259, 261, 262, 268, 269, 270, 274, 287, 288, 289, 290, 293, 297, 298, 300, 301, 303, 310, 316, 317, 321], "j_": [53, 58, 193, 195, 201, 209, 216, 232, 246, 261, 290, 293], "j_1": 201, "j_2": 201, "j_3": 201, "j_control": 250, "j_dominates_i": 291, "j_i": [201, 216, 229, 238, 246], "j_input": 84, "j_ise": 250, "j_j": 201, "j_max": 209, "j_rand": 44, "j_rate": 250, "j_robust": 253, "j_slide": 250, "j_state": 84, "j_termin": 84, "j_u": 199, "jacob": 8, "jacobian": [84, 221, 225, 240, 290], "jacqu": [2, 123], "jaim": 123, "jame": [2, 8, 123, 257], "jan": 159, "jane": 320, "jank": 142, "janki": 144, "jar": 140, "jarrod": [8, 17], "java": 103, "javascript": [1, 29, 31, 64, 67, 141, 142, 143, 144, 145, 153, 157, 159], "jcon": 122, "jea": [224, 234], "jean": [2, 123], "jeffrei": 8, "jerk": 84, "ji": 291, "jiang": 123, "jingxin": [123, 257], "jinja2": [11, 72], "jit": [2, 8, 15, 17, 38, 53, 63, 103, 104, 171, 193, 198, 203, 217, 219, 225, 240, 248, 250, 316, 317], "jitcompil": 317, "jitter": [67, 170, 185, 209, 245, 309, 310, 321], "jitter_analys": 209, "jitter_requir": 209, "jitter_std": 209, "jitter_threshold": 209, "jitter_viol": 209, "jitter_violation_prob": 209, "jitteranalysi": 209, "jitterrequir": 209, "jittervalidationresult": 209, "jk": [198, 225, 240], "jmlr": 8, "job": [10, 14, 16, 39, 70, 89, 92, 94, 151, 188, 282, 283, 300], "job_nam": 92, "johan": 123, "john": [8, 17, 35, 81, 290, 320], "johnson": [2, 297], "join": [39, 65, 76, 92, 98, 102, 105, 106, 108, 112, 114, 115, 127, 143, 149, 150, 151, 297], "joint": [53, 74, 82, 83, 134, 161, 196, 204, 225, 226, 227, 231, 239, 240, 272, 273, 296], "joint1": 283, "joint1_frict": [51, 74, 208, 216, 220, 225, 240], "joint2": 283, "joint2_frict": [51, 74, 208, 216, 220, 225, 240], "jointli": [74, 310], "joss": [8, 15], "joul": [61, 230, 237], "journal": [2, 8, 17, 77, 78, 81, 92, 103, 121, 122, 123, 187, 202, 204, 205, 224, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 239, 256, 257, 259, 287, 290, 298, 310], "journalctl": 92, "journei": [24, 33, 263], "jq": [10, 150, 298], "jrss": 310, "jsdelivr": 27, "json": [1, 5, 8, 10, 11, 14, 15, 19, 21, 23, 28, 30, 37, 39, 41, 62, 67, 87, 88, 90, 91, 92, 93, 94, 98, 102, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 133, 141, 142, 144, 146, 147, 148, 149, 150, 156, 157, 159, 165, 166, 167, 168, 169, 170, 178, 182, 183, 187, 189, 190, 196, 216, 242, 250, 253, 254, 255, 265, 280, 282, 297, 301, 303, 304, 317, 318, 320, 321], "jsondecodeerror": 254, "jsonexport": 317, "jsonschema": [1, 15, 22, 23, 254, 298], "jsonseri": 9, "jsrepo": 270, "ju": [229, 238], "juboori": [223, 235], "judgement": [222, 233], "judici": [222, 233], "jump": [24, 25, 32, 77, 86, 148, 167, 202, 205, 224, 226, 234, 239, 263], "jung": [228, 236], "junit": 282, "junitxml": 282, "jupyt": [1, 12, 14, 19, 28, 30, 31, 59, 63, 91, 127, 156, 165, 188, 298, 309, 316, 317], "jupyter_cach": [29, 188], "jupyter_tool": 9, "jupytercelldirect": 29, "jupyternb": 317, "jupyternotebookdirect": 29, "jupyterwidgetdirect": 29, "just": [33, 40, 65, 67, 141, 146, 148, 168, 170, 193, 197, 229, 238, 263, 269, 270, 298], "justif": [10, 53, 56, 84, 98, 112, 120, 195, 205, 226, 239, 242, 249, 251, 257, 290], "justifi": [17, 73, 226, 239, 297, 299, 310, 313], "j\u00fcrgen": [123, 257], "j\u1d62": 97, "j\u2081": 97, "j\u2082": 97, "j\u2099": 97, "k": [2, 8, 12, 14, 17, 20, 22, 35, 36, 40, 45, 49, 50, 51, 53, 55, 56, 57, 58, 61, 73, 76, 78, 79, 80, 81, 82, 84, 86, 93, 97, 98, 100, 101, 103, 105, 106, 108, 113, 115, 117, 118, 119, 120, 123, 128, 131, 132, 133, 144, 146, 148, 149, 151, 152, 156, 161, 163, 164, 166, 167, 168, 170, 182, 186, 192, 193, 195, 196, 197, 198, 199, 201, 202, 204, 206, 208, 215, 216, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 242, 246, 248, 249, 250, 252, 253, 254, 258, 272, 273, 274, 275, 279, 280, 282, 283, 287, 288, 289, 290, 292, 293, 294, 295, 297, 299, 300, 301, 308, 309, 316, 321], "k0": [230, 237], "k1": [17, 20, 28, 30, 35, 38, 41, 45, 49, 50, 51, 53, 55, 56, 57, 58, 61, 65, 67, 76, 77, 78, 81, 82, 84, 85, 86, 92, 98, 100, 101, 103, 105, 106, 113, 114, 115, 127, 128, 131, 132, 133, 148, 152, 156, 158, 164, 166, 167, 168, 171, 181, 182, 183, 193, 196, 197, 199, 200, 201, 202, 204, 208, 210, 211, 215, 216, 224, 226, 230, 234, 237, 239, 248, 249, 250, 251, 253, 273, 275, 276, 277, 279, 280, 287, 290, 321], "k1_adapt": 76, "k1_adapt_r": 76, "k1_best": 171, "k1_bound": 107, "k1_coars": 171, "k1_dot": [81, 197], "k1_fine": 171, "k1_greater_k2": [112, 247], "k1_grid": [171, 201], "k1_histori": 81, "k1_init": [40, 51, 72, 76, 79, 81, 82, 98, 101, 107, 109, 197, 210, 211, 226, 239, 273, 275, 276, 300, 301, 321], "k1_k2_ratio": 101, "k1_max": [40, 81, 98, 112, 197, 226, 239, 242, 252, 301], "k1_max_from_lambda": 252, "k1_min": [98, 112, 252], "k1_min_from_lambda": 252, "k1_new": [40, 81, 197, 242, 301, 302], "k1_posit": 112, "k1_prev": [81, 98, 197], "k1_rang": 201, "k1_raw": 81, "k1_valu": 171, "k1k_": [230, 237], "k1\u00b2": [112, 279], "k1\u03b8": 232, "k2": [17, 20, 28, 30, 35, 38, 41, 45, 49, 50, 51, 53, 55, 56, 57, 58, 61, 65, 67, 76, 77, 78, 81, 82, 84, 85, 86, 92, 98, 100, 101, 103, 105, 106, 113, 114, 115, 128, 131, 132, 133, 148, 156, 158, 164, 166, 167, 168, 171, 181, 182, 183, 193, 196, 197, 199, 200, 201, 202, 204, 208, 210, 211, 215, 216, 224, 226, 227, 230, 231, 234, 237, 239, 248, 249, 250, 251, 253, 273, 275, 276, 277, 279, 280, 287, 290, 321], "k2_adapt": 76, "k2_adapt_r": 76, "k2_best": 171, "k2_bound": 107, "k2_coars": 171, "k2_dot": [81, 197], "k2_fine": 171, "k2_grid": 171, "k2_histori": 81, "k2_init": [40, 51, 72, 76, 79, 81, 82, 98, 101, 107, 109, 197, 210, 211, 226, 239, 273, 275, 276, 300, 301, 321], "k2_max": [40, 81, 98, 112, 197, 226, 239, 242, 301], "k2_max_from_lambda": 252, "k2_min": [98, 112, 287], "k2_min_from_lambda": 252, "k2_min_requir": 287, "k2_new": [40, 81, 197, 242, 301, 302], "k2_posit": 112, "k2_prev": [81, 98, 197], "k2_raw": 81, "k2_valu": 171, "k2k_": [230, 237], "k2\u03b8": 232, "k3": [35, 61, 76, 158, 200], "k4": [35, 61, 158, 200], "k5": [158, 200], "k6": [152, 158, 200], "k7": 200, "k_": [53, 195, 199, 224, 226, 227, 231, 232, 234, 239, 279, 287, 293], "k_0": [227, 231], "k_1": [81, 107, 152, 156, 193, 199, 200, 201, 202, 208, 224, 227, 231, 234, 242, 272, 287, 290], "k_2": [81, 107, 152, 156, 193, 199, 200, 201, 202, 208, 224, 227, 231, 234, 242, 272, 287, 290], "k_3": [152, 200], "k_4": [152, 200], "k_5": 152, "k_6": 152, "k_adapt": [17, 76, 82, 98, 166, 253], "k_bounds_valid": 77, "k_c": [36, 40, 81, 205, 301], "k_current": [17, 77], "k_d": [36, 40, 78, 81, 84, 97, 197, 201, 202, 205, 208, 224, 234, 246, 249, 272, 287, 290, 301], "k_dot": [76, 197], "k_final": [77, 287], "k_fold": 310, "k_gain": [49, 72, 73, 116, 117], "k_grid": 201, "k_histori": [77, 287], "k_i": [200, 208, 249, 287], "k_idx": 252, "k_init": [51, 56, 72, 76, 77, 79, 80, 82, 98, 100, 101, 105, 205, 273, 287], "k_inner": 310, "k_int": [230, 237], "k_integr": 168, "k_margin": 201, "k_max": [17, 51, 56, 72, 76, 77, 80, 81, 98, 100, 101, 103, 105, 106, 112, 205, 224, 226, 234, 239, 252, 273, 275, 276, 279, 287, 293], "k_max_observ": 287, "k_mean": [77, 287], "k_min": [17, 51, 56, 72, 76, 77, 80, 98, 100, 101, 103, 105, 106, 112, 205, 224, 226, 234, 239, 252, 273, 275, 276, 279, 287], "k_min_observ": 287, "k_new": [77, 79, 197, 287], "k_old": 99, "k_outer": 310, "k_p": [84, 208], "k_posit": 112, "k_prev": [79, 197], "k_rang": 201, "k_rate": 216, "k_ratio": 113, "k_st": [230, 237], "k_std": [77, 287], "k_swing": 82, "k_switch": [98, 99, 106], "k_total": 99, "kadam": [226, 239], "kahan": 35, "kahan_sum": 35, "kalman": [222, 223, 232, 233, 235, 317], "kanzow": [230, 237], "kappa": [35, 193, 198, 202, 209, 225, 240, 246, 258, 279, 290], "kappa_": [225, 240, 290], "kappa_origin": 290, "kappa_reg": 290, "karl": 123, "katex": 145, "kaw": 85, "kazemi": [224, 234], "kb": [31, 65, 67, 77, 78, 81, 290, 297], "kc": [63, 197], "kd": [20, 45, 49, 50, 51, 53, 55, 56, 57, 58, 61, 76, 78, 79, 80, 82, 84, 86, 98, 100, 101, 103, 105, 106, 113, 115, 196, 199, 201, 202, 204, 207, 208, 215, 230, 237, 248, 249, 250, 253, 254, 273, 274, 275, 279, 280, 290], "kd_max": 112, "kd_min": 112, "kd_nonneg": 112, "kd_ratio": 98, "kdk_": [230, 237], "ke": 161, "ke_cart": 170, "ke_p1": 170, "ke_p2": 170, "keep": [12, 22, 30, 53, 63, 72, 74, 81, 84, 92, 95, 96, 111, 115, 133, 138, 139, 140, 145, 150, 159, 162, 163, 171, 185, 188, 201, 205, 223, 224, 226, 227, 230, 231, 232, 234, 235, 237, 239, 253, 270, 296, 313, 315], "keep_rec": 119, "kei": [2, 9, 10, 13, 16, 17, 22, 24, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 46, 51, 58, 61, 64, 67, 72, 73, 78, 81, 82, 83, 86, 89, 92, 95, 100, 102, 108, 109, 114, 115, 117, 119, 123, 125, 127, 129, 131, 133, 134, 135, 136, 138, 140, 144, 145, 146, 148, 154, 156, 158, 161, 162, 163, 164, 167, 168, 169, 187, 188, 191, 192, 193, 195, 197, 202, 205, 208, 214, 216, 218, 222, 223, 225, 226, 229, 233, 235, 238, 239, 240, 243, 249, 250, 251, 252, 253, 256, 257, 259, 260, 266, 277, 278, 283, 286, 293, 297, 299, 300, 303, 313, 315, 320], "kennedi": [2, 12, 58, 88, 103, 122, 162, 187, 199, 209, 230, 237, 245, 247, 251, 257, 290, 293, 303, 320], "kennedy1995particl": [2, 32, 257], "kept": 31, "kernel": [17, 29, 104, 154], "key1": [122, 126], "key2": [122, 126], "key3": [122, 126], "key_metr": 252, "key_part": 117, "key_perform": 259, "keyboard": [1, 27, 28, 30, 31, 53, 64, 137, 138, 139, 142, 143, 144, 154, 155, 156, 189], "keyerror": [72, 117], "keyfram": 30, "keyout": 92, "keyword": [24, 32, 69, 108, 115, 116, 117, 256, 298], "kfold": [9, 10], "kg": [53, 72, 73, 74, 86, 131, 134, 135, 164, 169, 170, 198, 220, 221, 225, 229, 238, 240, 258, 272, 289, 290, 295, 313, 317], "khalil": [2, 81, 122, 125, 161, 187, 192, 194, 199, 204, 207, 230, 237, 245, 287, 297], "khalil2002nonlinear": [2, 123], "khan": [227, 230, 231, 237], "khz": [65, 67, 77, 78, 101, 118, 151, 166, 197, 290, 317, 321], "ki": 208, "kibana": 92, "kill": [91, 92, 177, 261], "kim": [228, 236], "kincaid": 12, "kind": [63, 91, 92, 169, 198, 225, 240], "kinemat": 295, "kinet": [86, 134, 170, 199, 209, 220, 232, 295, 317], "kinetic_cart": 220, "kinetic_energi": 209, "kinetic_energy_tot": 295, "kineticenergi": 317, "kishor": [227, 231], "kk": [225, 230, 237, 240], "knob": 167, "know": [17, 102, 146, 163, 253, 268], "knowledg": [8, 77, 82, 98, 133, 146, 151, 162, 194, 197, 199, 202, 204, 222, 226, 227, 231, 233, 239, 243, 290, 293, 310], "known": [32, 36, 56, 67, 78, 82, 84, 103, 118, 119, 122, 129, 132, 147, 148, 163, 166, 167, 193, 197, 201, 202, 206, 213, 222, 223, 226, 232, 233, 235, 239, 254, 261, 265, 284, 290, 297, 298, 302, 310], "known_issu": 321, "kolmogorov": [310, 313], "koyama": 8, "kp": [61, 208], "kpi": [45, 255, 260, 285, 306], "kpss": [309, 310], "kroes": 310, "kruskal": [65, 178, 308, 309], "ks_p": 313, "ks_stat": [310, 313], "ks_statist": [310, 313], "kstest": 313, "kubectl": [91, 92], "kubernet": [92, 95, 242, 317], "kurtosi": [120, 310], "kutta": [69, 199, 216, 224, 227, 231, 232, 234, 246, 295], "kw_p": 313, "kwan": [8, 17], "kwarg": [49, 51, 52, 53, 63, 71, 72, 76, 82, 98, 103, 105, 112, 115, 117, 119, 127, 171, 196, 201, 210, 216, 220, 253, 254, 274, 277, 283, 284, 300, 313, 320, 321], "kyung": [228, 236], "k\u00b2": 310, "k\u00b2\u1d62": [78, 205], "k\u1d62": [78, 98, 205], "k\u1d62\u03b8": 78, "k\u2080": 166, "k\u2081": [1, 36, 40, 51, 76, 77, 78, 81, 85, 97, 98, 103, 105, 129, 146, 148, 152, 163, 164, 166, 167, 168, 170, 183, 196, 197, 201, 202, 205, 206, 215, 222, 233, 249, 253, 273, 274, 275, 279, 301], "k\u2081_init": 36, "k\u2081_max": 205, "k\u2081_min": 252, "k\u2081\u00b2": [99, 103, 206, 247, 249, 252, 274, 279], "k\u2081\u03b8": [77, 78, 205, 206], "k\u2081\u03b8\u2081": [76, 129, 163, 196, 199], "k\u2081\u03bb\u2081\u03b8": [78, 85, 205, 206], "k\u2082": [36, 40, 51, 76, 77, 78, 85, 97, 98, 103, 105, 146, 148, 152, 163, 164, 166, 167, 168, 170, 183, 196, 197, 201, 202, 205, 206, 222, 233, 249, 253, 273, 274, 275, 279, 301], "k\u2082_init": 36, "k\u2082_max": [205, 252], "k\u2082d\u03b8\u2081": 129, "k\u2082sign": [103, 249, 253], "k\u2082\u00b2": 206, "k\u2082\u03b8": [77, 78, 163, 205, 206], "k\u2082\u03b8\u2082": [76, 196, 199], "k\u2082\u03bb\u2082\u03b8": [78, 85, 205, 206], "k\u2083": [36, 152], "k\u2083_init": 36, "k\u2084": 152, "k\u2085": 152, "k\u2086": [1, 129, 152], "k\u2098\u2090\u2093": 316, "l": [10, 35, 49, 70, 76, 78, 81, 84, 85, 86, 93, 94, 97, 98, 107, 112, 114, 116, 121, 123, 134, 141, 144, 146, 147, 161, 163, 168, 170, 183, 194, 195, 196, 197, 198, 199, 202, 204, 205, 206, 209, 213, 215, 220, 223, 227, 229, 231, 232, 235, 238, 246, 249, 251, 252, 253, 254, 279, 282, 287, 288, 290, 295, 299, 310, 313], "l0": 98, "l1": [30, 61, 72, 73, 117, 130, 131, 134, 135, 150, 151, 164, 170, 198, 208, 220, 225, 240, 278, 313], "l100": [125, 126], "l112": 121, "l115": 125, "l130": 121, "l145": [226, 239], "l149": [226, 239], "l150": 125, "l160": [125, 126], "l186": [45, 226, 239], "l195": [45, 226, 239], "l1co": [225, 240], "l1l_": 232, "l1sin": [225, 240], "l1\u03b8": [225, 240], "l2": [30, 61, 72, 73, 117, 119, 130, 131, 134, 135, 150, 151, 164, 170, 198, 208, 220, 278, 313], "l200": 125, "l206": [122, 125, 126], "l27": 45, "l2l_": 232, "l326": [45, 226, 239], "l329": [45, 226, 239], "l348": 216, "l390": 216, "l393": 216, "l40": 45, "l479": 216, "l50": [122, 125, 126], "l71": [122, 125, 126], "l86": 125, "l_": [39, 53, 74, 193, 220, 221, 225, 227, 231, 232, 240, 272, 290], "l_1": [74, 86, 152, 198, 200, 208, 220, 221, 225, 227, 231, 240, 258, 272, 288, 289, 290, 296, 317], "l_1c_1": 295, "l_1co": [225, 240], "l_1l_2": 295, "l_1s_1": 295, "l_2": [74, 86, 152, 198, 200, 208, 220, 221, 227, 231, 258, 272, 288, 289, 296, 317], "l_avg": 86, "l_c1co": [225, 240], "l_c2": [225, 240], "l_c2co": [225, 240], "l_char": 220, "l_cover": 88, "l_estim": [98, 112, 249], "l_f": [273, 275], "l_i": 220, "l_m_inv_norm": 287, "l_max": 166, "l_max\u00b2": 166, "l_min": 73, "l_minv_b": [78, 290], "l_total": 88, "la": [141, 144], "lab": 31, "label": [13, 28, 29, 30, 31, 52, 61, 63, 77, 81, 86, 91, 92, 118, 139, 143, 148, 149, 150, 154, 156, 159, 164, 166, 167, 171, 177, 178, 187, 216, 221, 232, 248, 253, 254, 256, 258, 267, 269, 293, 294, 295, 298, 303, 318, 320, 321], "labelselector": 92, "laboratori": [118, 196, 222, 233], "labori": [222, 233], "labour": [222, 233], "lack": [38, 58, 65, 210, 232], "lag": [84, 144, 161, 227, 228, 231, 236, 290, 310], "lagrang": [134, 199, 205, 220, 221, 232, 287, 295], "lagrangian": [127, 129, 134, 160, 164, 169, 199, 219, 222, 223, 227, 231, 232, 233, 235, 256, 287, 288, 290, 295], "lagrangian_complet": 295, "lagrangian_mechan": [225, 240], "lai": [228, 236], "lam": [2, 8, 15, 17, 279, 297], "lam1": [17, 20, 41, 51, 55, 72, 77, 78, 79, 80, 85, 98, 112, 132, 168, 196, 197, 199, 204, 208, 226, 239, 248, 273, 279], "lam2": [17, 20, 41, 51, 55, 72, 77, 78, 79, 80, 85, 98, 112, 132, 168, 196, 197, 199, 204, 208, 226, 227, 231, 239, 248, 273, 279], "lam2015numba": [8, 17], "lam_min": 279, "lambda": [38, 39, 53, 65, 67, 72, 78, 98, 112, 120, 125, 133, 148, 150, 168, 191, 193, 200, 203, 210, 215, 226, 232, 239, 246, 248, 258, 277, 278, 279, 290, 291, 293, 297, 298, 313, 321], "lambda1": [20, 28, 49, 50, 51, 63, 73, 76, 77, 78, 79, 81, 85, 92, 97, 107, 109, 164, 167, 168, 182, 183, 215, 224, 234, 249, 253, 254, 280, 287, 313], "lambda1_bound": 73, "lambda1_max": 252, "lambda1_min": 252, "lambda1_posit": 112, "lambda2": [20, 28, 49, 50, 51, 63, 73, 76, 77, 78, 79, 81, 85, 92, 97, 107, 109, 164, 167, 168, 182, 183, 215, 224, 234, 249, 253, 254, 280, 287, 313], "lambda2_bound": 73, "lambda2_max": 252, "lambda2_min": 252, "lambda2_posit": 112, "lambda_": [195, 200, 224, 226, 227, 231, 232, 234, 239, 258, 279, 287, 290, 294], "lambda_1": [81, 97, 107, 191, 199, 201, 202, 208, 224, 227, 231, 234, 242, 245, 246, 272, 287, 290], "lambda_2": [81, 97, 107, 191, 199, 201, 202, 208, 224, 227, 231, 234, 242, 245, 246, 272, 287, 290], "lambda_c": [63, 81], "lambda_gain": [49, 72, 116, 117], "lambda_i": [107, 123, 125, 191, 245, 258, 261, 287, 290, 293, 294], "lambda_idx": 252, "lambda_j": 291, "lambda_max": [98, 112, 252, 258, 287], "lambda_min": [98, 112, 252, 258, 287], "lambda_reg": 35, "lambda_valu": 36, "lamc": 197, "lamont": 291, "lan": 150, "land": [193, 208, 262, 263], "landscap": [31, 35, 53, 65, 162, 167, 172, 184, 193, 199, 202, 215, 280, 284, 291, 293, 316], "lane": 22, "langdetect": 298, "langl": 289, "languag": [8, 13, 24, 26, 27, 33, 37, 39, 40, 67, 84, 140, 144, 164, 215, 232, 261, 282, 288, 298, 300], "lanyard": 268, "lanzafam": [197, 205, 230, 237], "lapack": 171, "laplac": 221, "larg": [8, 10, 17, 22, 23, 25, 31, 35, 45, 52, 53, 58, 72, 73, 75, 77, 81, 82, 83, 84, 85, 90, 94, 98, 102, 103, 104, 106, 107, 112, 113, 117, 118, 119, 120, 124, 125, 132, 133, 134, 135, 136, 139, 142, 146, 147, 148, 149, 150, 151, 152, 154, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 183, 193, 195, 196, 197, 198, 199, 201, 202, 203, 208, 210, 213, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 242, 246, 247, 248, 249, 251, 253, 254, 265, 275, 280, 282, 283, 284, 287, 290, 291, 300, 308, 309, 310, 320], "large_angl": [98, 114, 275, 280], "large_angle_perturb": 75, "large_angle_st": 75, "large_cart_displac": 75, "large_disturb": [112, 113], "large_fault": 119, "large_gain": 199, "large_problem": 280, "large_st": 199, "large_valu": 193, "larger": [14, 19, 45, 50, 53, 65, 77, 78, 84, 85, 86, 113, 118, 131, 132, 133, 144, 145, 155, 162, 163, 164, 165, 170, 178, 193, 195, 196, 197, 198, 200, 201, 205, 215, 216, 226, 227, 228, 230, 231, 232, 236, 237, 239, 253, 265, 276, 280, 283, 290, 294, 308, 310], "largest": [24, 65, 213, 230, 237, 270, 290, 299, 310, 318], "lasal": [202, 299], "laser": 268, "laserflow": 268, "last": [2, 3, 8, 10, 12, 15, 17, 33, 35, 46, 48, 51, 52, 53, 54, 60, 61, 64, 70, 77, 78, 79, 80, 82, 84, 86, 91, 92, 93, 94, 95, 98, 103, 104, 107, 111, 115, 118, 120, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 160, 161, 162, 163, 164, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 193, 198, 199, 200, 201, 202, 205, 210, 211, 215, 216, 217, 219, 220, 230, 232, 237, 251, 252, 253, 254, 258, 268, 273, 278, 280, 282, 285, 291, 297, 298, 310, 313, 315, 320, 321, 323], "last_check": [17, 321], "last_cleanup": [210, 211], "last_control": [17, 38, 51, 52, 56, 105, 115, 116, 117, 119, 274, 278, 320], "last_control_tim": 98, "last_error": 98, "last_except": 117, "last_modifi": 131, "last_receiv": [177, 185], "last_sent": 98, "last_state_var": 210, "last_u": [55, 77], "last_viol": 107, "late": [53, 61, 91, 124, 162, 167, 202], "latenc": [9, 54, 59, 61, 64, 65, 67, 84, 92, 93, 119, 127, 174, 175, 180, 185, 203, 209, 216, 222, 223, 230, 232, 233, 235, 237, 242, 245, 255, 317, 321], "latency_budget_m": 158, "latency_compens": 101, "latency_log": 170, "latency_margin": [61, 203, 216], "latency_mean": 170, "latency_monitor": 136, "latency_pass": 92, "latency_std": 170, "latencybound": 317, "latencymonitor": 136, "later": [22, 31, 68, 107, 223, 225, 235, 240, 246, 301], "latest": [1, 8, 10, 22, 31, 39, 63, 70, 91, 92, 128, 142, 145, 151, 282, 283, 300, 315], "latest_metr": 39, "latest_quality_gate_report": 255, "latex": [8, 19, 55, 57, 58, 59, 82, 83, 127, 145, 191, 241, 242, 274, 297, 298, 309, 320], "latin": [202, 309, 310, 313], "latin_hypercub": [310, 313], "latinhypercub": 202, "latitud": 216, "launch": [22, 91, 104, 127, 150, 153, 189, 255, 322], "law": [1, 8, 12, 17, 22, 30, 31, 35, 36, 37, 39, 40, 48, 52, 55, 62, 69, 76, 78, 79, 81, 82, 84, 86, 95, 97, 98, 99, 100, 101, 103, 105, 114, 121, 123, 125, 126, 132, 146, 152, 160, 161, 164, 165, 168, 179, 181, 182, 183, 192, 193, 194, 195, 196, 197, 199, 206, 216, 220, 222, 223, 224, 232, 233, 234, 235, 242, 248, 249, 250, 255, 259, 272, 273, 274, 275, 279, 294, 298, 299, 306, 316, 317, 320, 321], "layer": [1, 12, 16, 17, 22, 24, 30, 36, 37, 38, 40, 45, 49, 50, 51, 55, 56, 63, 65, 67, 68, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 89, 91, 97, 98, 100, 105, 107, 117, 119, 123, 125, 130, 132, 133, 136, 140, 143, 150, 153, 158, 160, 164, 165, 166, 167, 168, 170, 179, 181, 182, 188, 189, 192, 196, 197, 199, 203, 204, 218, 220, 222, 223, 224, 229, 232, 233, 234, 235, 238, 242, 243, 245, 247, 248, 250, 258, 265, 272, 273, 274, 275, 276, 277, 279, 287, 288, 289, 293, 294, 298, 301, 313, 316, 317], "layout": [8, 13, 15, 22, 28, 29, 30, 64, 139, 140, 142, 143, 154, 186, 232, 267, 268, 269, 271], "lazi": [30, 38, 86, 90, 103, 105, 106, 116, 138, 139, 142, 156, 267, 271, 275, 276, 297, 317], "lazycontrollerensembl": 106, "lazyload": 317, "lb": 248, "lbrack": [227, 231, 232], "lc": 310, "lc1": [220, 225, 240], "lc1co": [225, 240], "lc1l_": 232, "lc1sin": [225, 240], "lc1\u03b8": [225, 240], "lc2": [220, 225, 240], "lc2co": [225, 240], "lc2l_": 232, "lc2sin": [225, 240], "lc2\u03b8": [225, 240], "lcccc": 149, "ld_library_path": 282, "ldot": [193, 232, 246, 290, 293], "le": [45, 72, 73, 131, 227, 231, 285], "lead": [24, 65, 73, 78, 93, 112, 129, 160, 195, 204, 205, 206, 223, 226, 227, 231, 232, 235, 239, 249, 284, 310], "leader": [2, 202], "leadership": [40, 218], "leak": [34, 41, 50, 55, 72, 77, 81, 93, 95, 98, 100, 105, 107, 114, 115, 117, 166, 197, 199, 205, 211, 222, 224, 226, 227, 230, 231, 233, 234, 237, 239, 242, 244, 245, 249, 251, 254, 282, 283, 284, 287], "leak_coeffici": 99, "leak_rat": [17, 38, 51, 55, 56, 77, 79, 80, 82, 98, 100, 101, 103, 105, 106, 107, 115, 131, 132, 166, 197, 224, 226, 234, 239, 273, 275, 276], "leak_rate_nonneg": 77, "leakag": [51, 63, 103, 166, 273, 275, 310], "lean": 17, "learn": [2, 8, 12, 19, 30, 36, 44, 53, 59, 64, 67, 77, 86, 95, 98, 128, 129, 131, 132, 133, 134, 135, 136, 146, 155, 157, 161, 162, 163, 164, 166, 167, 168, 169, 172, 173, 181, 197, 201, 202, 218, 226, 229, 230, 232, 237, 238, 239, 242, 249, 255, 256, 259, 266, 291, 293, 300, 310, 318], "learning_algorithm": 255, "learning_curve_analysi": 310, "learning_prob": 202, "least": [5, 20, 22, 23, 45, 53, 56, 91, 98, 121, 199, 204, 205, 226, 239, 275, 285, 291, 293, 308, 310], "leav": [27, 154, 162], "leaveoneout": [9, 10], "lechuga": 123, "lectur": [125, 290], "lee": [227, 228, 229, 231, 236, 238], "left": [53, 84, 97, 134, 140, 141, 144, 152, 156, 161, 163, 164, 193, 195, 198, 200, 201, 202, 204, 205, 206, 216, 217, 220, 221, 224, 225, 226, 227, 231, 232, 234, 239, 240, 246, 265, 288, 290, 293, 295], "leftarrow": [226, 239], "legaci": [10, 17, 19, 38, 52, 59, 72, 79, 80, 95, 98, 100, 102, 103, 105, 106, 107, 108, 109, 116, 120, 196, 247, 273, 275], "legacy_control": [17, 106], "legacy_controller_adapt": 76, "legacy_controller_class": 76, "legacy_dict": 196, "legacy_factori": [9, 10, 52], "legacy_map": 247, "legacy_param": 76, "legacy_visu": 9, "legacycontrollerclass": 76, "legal": [2, 8, 15], "legend": [52, 61, 65, 77, 81, 86, 118, 139, 140, 143, 148, 149, 150, 155, 159, 164, 166, 167, 169, 171, 177, 178, 197, 201, 216, 247, 253, 254, 283, 284, 320], "legendformat": 92, "len": [35, 38, 39, 44, 49, 52, 56, 61, 63, 65, 67, 72, 73, 75, 76, 77, 81, 82, 86, 88, 90, 92, 98, 100, 102, 114, 115, 116, 117, 118, 119, 127, 132, 133, 136, 149, 150, 151, 164, 167, 169, 170, 171, 177, 178, 196, 199, 201, 202, 203, 204, 209, 214, 216, 217, 222, 233, 253, 254, 255, 273, 276, 277, 283, 287, 291, 298, 300, 301, 313, 320, 321], "length": [22, 49, 50, 53, 55, 57, 58, 59, 61, 65, 71, 72, 73, 74, 82, 86, 93, 98, 100, 101, 105, 106, 108, 115, 117, 119, 124, 130, 131, 134, 135, 136, 140, 142, 144, 161, 164, 165, 166, 170, 193, 198, 203, 208, 216, 220, 221, 222, 223, 227, 231, 232, 233, 235, 246, 247, 252, 253, 258, 272, 273, 288, 289, 290, 296, 297, 299, 309, 313, 316, 317, 320], "length_pendulum1": 92, "length_pendulum2": 92, "length_uncertainti": 75, "length_vari": 81, "leonid": 123, "leq": [53, 75, 81, 88, 107, 125, 156, 191, 193, 195, 199, 201, 202, 209, 220, 224, 232, 234, 245, 246, 256, 287, 288, 290, 291, 293, 294, 297, 298, 299], "less": [77, 84, 86, 92, 98, 118, 134, 148, 163, 164, 165, 166, 167, 182, 183, 196, 201, 205, 209, 222, 230, 233, 237, 248, 249, 265, 283, 290, 291, 298], "lesson": [12, 30, 44, 59, 67, 127, 173, 300, 318], "lesssim": 290, "lester": 8, "let": [39, 154, 155, 166, 205, 221, 226, 227, 231, 232, 239, 246, 248, 287], "letter": [27, 258, 268, 290, 291, 320], "letterglitch": 268, "leung": 55, "levant": [2, 81, 85, 86, 103, 121, 122, 125, 126, 187, 194, 197, 199, 204, 205, 206, 226, 230, 237, 239, 287, 290, 297, 298, 299, 303], "levant2003": 299, "levant2003high": [2, 32, 257, 299], "level": [9, 16, 17, 19, 22, 24, 25, 26, 29, 30, 32, 33, 36, 37, 46, 49, 51, 56, 59, 62, 64, 65, 67, 68, 73, 74, 75, 77, 78, 82, 85, 89, 90, 93, 95, 97, 98, 104, 107, 108, 111, 112, 116, 117, 118, 119, 120, 130, 131, 132, 133, 134, 135, 136, 147, 148, 149, 150, 151, 155, 156, 157, 160, 161, 163, 171, 178, 185, 188, 192, 197, 199, 201, 203, 207, 208, 213, 215, 216, 224, 226, 227, 228, 230, 231, 232, 234, 236, 237, 239, 242, 243, 253, 255, 261, 266, 276, 277, 283, 306, 308, 309, 310, 318, 320, 321], "level_result": 247, "levelnam": [72, 117, 254, 276, 280, 300, 321], "leven": [308, 309], "levene_p": 313, "levene_stat": 313, "leverag": [12, 30], "lex": [25, 26], "lexicograph": [172, 297], "lf": [93, 282, 323], "lgpl": 8, "lh": [309, 310, 313], "li": [2, 35, 78, 81, 122, 125, 187, 199, 205, 222, 226, 233, 239, 258, 287, 290, 303, 320], "liabil": 15, "liang": 202, "lib": [8, 63, 90, 91, 92, 282], "liberzon": 86, "libgomp1": 91, "liblapack": [91, 92], "libopenbla": [91, 92], "libopenblas0": 91, "librari": [1, 2, 8, 11, 20, 27, 28, 31, 69, 71, 92, 123, 152, 155, 156, 165, 193, 254, 267, 269, 270, 282, 283, 293, 297], "licens": [17, 69, 70, 95, 129, 189, 259, 262, 266, 268], "lie": [230, 237, 287, 291], "lifecycl": [1, 92, 98, 102, 210, 251], "lifestyl": [267, 268, 269], "lifetime_hour": 210, "light": [129, 134, 152, 166, 169, 223, 235, 266, 268, 269], "light_cart": 169, "light_pendulum": 169, "lighter": [134, 169, 228, 236], "lightli": 232, "lightn": [268, 271], "lightrai": 268, "lightweight": [10, 31, 96, 213, 220, 232], "like": [19, 21, 22, 32, 40, 44, 49, 55, 61, 65, 72, 73, 76, 79, 82, 83, 84, 93, 108, 114, 124, 127, 142, 144, 145, 163, 164, 168, 170, 199, 216, 222, 226, 227, 230, 231, 232, 233, 237, 239, 253, 268, 271, 275, 276, 290, 299, 300, 301, 318], "likelihood": 310, "lilliefor": 310, "lim_": [119, 191, 199, 202, 246, 279, 293, 294], "limb": [224, 234], "limit": [1, 4, 15, 22, 23, 25, 31, 32, 34, 35, 37, 39, 42, 45, 49, 51, 53, 55, 56, 61, 62, 65, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 86, 87, 90, 91, 92, 93, 97, 98, 100, 103, 111, 114, 115, 116, 117, 118, 119, 122, 125, 132, 134, 136, 139, 140, 145, 146, 148, 150, 152, 153, 154, 156, 159, 162, 163, 164, 165, 166, 167, 170, 171, 176, 177, 180, 182, 183, 184, 185, 188, 190, 192, 195, 196, 197, 199, 200, 202, 203, 205, 208, 215, 216, 218, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 240, 242, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 259, 261, 273, 275, 276, 277, 283, 284, 290, 293, 297, 309, 310, 313, 320], "limsup_": 294, "lin": 295, "linalg": [35, 65, 75, 78, 79, 81, 84, 98, 112, 119, 149, 154, 168, 193, 197, 198, 200, 202, 203, 205, 209, 213, 215, 216, 220, 226, 239, 254, 287, 290, 291], "linalg_error": 213, "linalgerror": [35, 65, 78, 168, 198, 209, 220, 290], "line": [1, 9, 10, 22, 24, 25, 26, 27, 29, 30, 32, 36, 37, 39, 40, 45, 53, 61, 65, 67, 70, 71, 77, 78, 81, 82, 85, 86, 93, 98, 112, 118, 119, 120, 121, 122, 125, 126, 127, 129, 138, 139, 140, 141, 142, 143, 144, 146, 153, 154, 156, 159, 163, 164, 170, 177, 182, 190, 192, 193, 197, 198, 199, 200, 201, 202, 203, 205, 208, 215, 216, 220, 223, 224, 226, 228, 232, 234, 235, 236, 239, 254, 261, 265, 268, 269, 275, 276, 277, 282, 283, 290, 297, 298, 299, 301, 302, 303, 313, 316, 317, 323], "line_approx": [121, 122], "line_numb": 37, "linear": [19, 22, 27, 35, 36, 53, 55, 59, 61, 72, 73, 74, 77, 78, 79, 81, 82, 85, 86, 95, 101, 103, 105, 107, 116, 127, 129, 134, 135, 136, 140, 141, 152, 158, 160, 162, 163, 166, 168, 169, 182, 192, 193, 196, 199, 200, 201, 202, 206, 214, 216, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 247, 249, 250, 251, 254, 272, 273, 274, 275, 278, 279, 284, 287, 288, 289, 293, 294, 297, 298, 299, 310, 317], "linear_bound": 249, "linear_control": 61, "linear_drift": 119, "linear_dynam": 61, "linear_matric": 295, "linear_output": 136, "linear_parameter": 294, "linear_sign": 136, "linear_sliding_surfac": 294, "linear_state_spac": 295, "linear_w": 247, "lineardynamicsmodel": [59, 61], "linearis": [45, 221, 285, 296], "linearization_point": 101, "linearize_dynam": 279, "linearized_grav": 295, "linearized_inertia": 295, "linearli": [53, 61, 124, 125, 162, 167, 171, 193, 216, 250, 290, 294, 299], "linearslidingsurfac": [17, 199, 204], "lineno": [26, 29, 154, 210, 215, 298, 300], "liner": [10, 150], "linestyl": [52, 61, 77, 81, 86, 118, 149, 164, 166, 171], "linewidth": [52, 61, 77, 148, 149, 164, 167, 193, 215, 248, 280, 320], "link": [8, 13, 14, 15, 16, 24, 27, 28, 30, 31, 55, 56, 58, 59, 67, 69, 89, 91, 95, 122, 126, 130, 134, 141, 144, 145, 161, 187, 188, 221, 222, 223, 226, 227, 229, 231, 232, 233, 235, 238, 239, 242, 243, 256, 257, 259, 260, 262, 286, 288, 289, 297, 308, 315, 316, 317, 318, 320], "linkag": [5, 223, 235], "linkcheck": 15, "linkcheck_ignor": 89, "linkcode_resolv": [16, 188], "linspac": [120, 134, 135, 164, 171, 193, 195, 199, 201, 228, 236, 287], "lint": [10, 16, 87, 94, 188], "linter": [25, 44], "linux": [91, 124, 144, 145, 146, 147, 150, 153, 164, 170, 177, 282, 284], "liouvil": 200, "lipschitz": [85, 97, 98, 99, 103, 107, 112, 125, 163, 166, 183, 195, 197, 199, 205, 206, 246, 249, 251, 273, 274, 275, 279, 287], "lipschitz_condit": 112, "liquid": [268, 271], "liquidchrom": [268, 271], "liquideth": 268, "liskov": 17, "list": [2, 10, 12, 15, 19, 22, 30, 31, 35, 36, 38, 39, 50, 52, 53, 56, 57, 58, 61, 70, 71, 73, 75, 76, 82, 84, 86, 90, 91, 92, 94, 97, 98, 100, 102, 103, 105, 106, 114, 115, 117, 119, 120, 123, 129, 131, 132, 133, 138, 141, 155, 168, 170, 196, 199, 203, 207, 208, 209, 210, 216, 221, 224, 227, 231, 234, 248, 250, 252, 253, 254, 255, 257, 259, 261, 266, 267, 268, 273, 275, 277, 279, 280, 283, 284, 291, 293, 294, 295, 298, 300, 310, 318, 321], "list_all_control": [49, 51, 56, 117], "list_available_backup": 254, "list_available_control": [38, 50, 52, 56, 80, 98, 100, 105, 106, 115, 116, 117, 275, 276], "list_available_integr": [59, 61], "list_model": 278, "list_of_constraint_viol": 112, "list_of_error": 112, "listdir": 92, "listen": [91, 92, 143, 177, 185], "liter": [72, 79, 116, 140, 141, 196, 273, 274, 275], "literal_block": 25, "literalinclud": 214, "literatur": [0, 17, 55, 97, 103, 169, 192, 199, 221, 224, 232, 234, 255, 256, 257, 258, 298], "live": [1, 12, 13, 29, 30, 31, 59, 89, 93, 137, 141, 150, 154, 156, 157, 170, 189, 211, 248, 266, 277, 316], "livenessprob": [63, 92], "ljung": [309, 310], "ljvmiranda921": [8, 15], "ll": [12, 127, 145, 146, 157, 161, 162, 163, 167, 225, 240, 290], "ll1": 296, "llvm": [8, 17], "lm": [103, 205, 206], "lmb": 168, "ln": [79, 119, 195, 202, 290, 310, 313], "load": [1, 13, 19, 22, 25, 27, 28, 29, 34, 38, 39, 49, 51, 52, 56, 57, 58, 59, 63, 65, 67, 68, 72, 73, 75, 76, 78, 81, 84, 86, 89, 90, 92, 93, 98, 102, 103, 104, 105, 106, 107, 111, 112, 116, 117, 118, 124, 127, 128, 129, 130, 132, 135, 138, 139, 142, 143, 144, 145, 146, 148, 150, 151, 152, 156, 157, 164, 165, 166, 167, 168, 169, 174, 175, 177, 182, 183, 187, 189, 193, 203, 208, 216, 217, 221, 224, 234, 241, 242, 245, 248, 250, 251, 252, 253, 254, 255, 267, 268, 271, 273, 275, 276, 282, 283, 298, 300, 317, 321], "load_and_validate_config": 252, "load_balanc": 321, "load_baselin": 207, "load_config": [22, 49, 51, 52, 56, 61, 63, 68, 72, 73, 76, 78, 80, 81, 84, 86, 93, 103, 105, 106, 116, 117, 127, 128, 130, 131, 132, 133, 134, 135, 148, 150, 151, 193, 203, 216, 217, 224, 234, 248, 254, 273, 275, 276, 283, 320], "load_factory_config": 112, "load_factory_configur": 107, "load_json_saf": 67, "load_metrics_histori": 39, "load_pso_config_from_yaml": 104, "load_pso_histori": 321, "load_scenario": 93, "load_test_config": 73, "load_test_control_system": 93, "load_validated_paramet": 261, "loadbalanc": [63, 91, 92], "loaddatafromfil": 28, "loader": [9, 52], "loadscop": 282, "loadstat": 143, "loan": [35, 84, 122, 126, 199, 213, 290], "loc": [61, 65, 149, 164, 169, 178, 313], "local": [13, 14, 17, 19, 22, 24, 27, 31, 35, 37, 39, 40, 53, 65, 71, 84, 89, 124, 140, 144, 146, 153, 159, 167, 184, 193, 195, 199, 200, 201, 205, 215, 216, 222, 224, 230, 232, 233, 234, 237, 242, 246, 247, 253, 254, 255, 279, 282, 290, 291, 293, 300, 310, 317, 323], "local_object": 253, "local_result": 253, "local_var": 300, "localhost": [13, 63, 72, 90, 91, 92, 116, 131, 144, 150, 170, 265, 321], "localstorag": [1, 27, 29, 137, 139, 140, 142, 144, 145, 153, 154, 155, 156], "locat": [13, 22, 26, 30, 31, 32, 33, 34, 40, 53, 67, 69, 70, 82, 92, 98, 121, 122, 123, 127, 138, 140, 162, 165, 171, 187, 193, 199, 202, 203, 215, 216, 220, 232, 255, 265, 266, 269, 275, 287, 288, 291, 300, 301, 318], "lochan": [223, 235], "lock": [38, 49, 50, 51, 56, 65, 98, 103, 105, 106, 108, 115, 116, 169], "lock_timeout": 111, "lockfreecontrollercach": 117, "log": [1, 9, 12, 13, 17, 25, 26, 27, 28, 35, 38, 40, 43, 45, 49, 50, 51, 52, 57, 61, 62, 63, 64, 65, 67, 68, 71, 72, 73, 74, 75, 79, 86, 89, 92, 93, 94, 98, 102, 104, 106, 115, 117, 118, 119, 127, 139, 144, 146, 148, 150, 162, 164, 165, 166, 167, 168, 169, 170, 173, 175, 177, 178, 182, 183, 185, 188, 193, 194, 201, 202, 205, 208, 209, 214, 221, 226, 230, 237, 239, 242, 243, 244, 245, 248, 249, 250, 251, 253, 260, 261, 275, 276, 280, 285, 290, 291, 297, 298, 301, 302, 306, 309, 310, 313, 315, 321], "log10": [249, 291], "log2": 209, "log_": 53, "log_2": 200, "log_control_cycl": 63, "log_controller_cr": 98, "log_cost": [209, 291], "log_data": 310, "log_dir": 92, "log_directori": 254, "log_dist": 291, "log_error": [75, 205], "log_evalu": [104, 248], "log_fil": [92, 117, 135], "log_fitness_evalu": 98, "log_gain": 249, "log_health_check": 254, "log_info": 67, "log_iter": 248, "log_iteration_statist": 214, "log_level": [63, 91, 92, 104], "log_likelihood": 313, "log_maintenance_result": 98, "log_manag": 254, "log_max": 249, "log_min": 249, "log_optimization_result": 254, "log_optimization_start": 254, "log_path": 92, "log_recovery_step": 93, "log_resource_usag": 98, "log_retention_dai": 92, "log_rot": [92, 321], "log_saturation_ev": 135, "log_simulation_execut": 98, "log_space_pso_bound": 249, "log_warn": 67, "logarithm": [79, 166, 201, 249], "logger": [17, 38, 49, 51, 56, 80, 84, 86, 90, 98, 100, 101, 102, 104, 109, 115, 117, 168, 210, 211, 214, 248, 277, 279, 280, 283, 284, 300], "logger_observ": 17, "logging_level": [73, 278, 321], "logic": [17, 19, 24, 31, 33, 36, 37, 38, 39, 40, 51, 55, 56, 57, 58, 59, 61, 62, 71, 77, 81, 82, 84, 98, 99, 103, 104, 119, 120, 142, 143, 165, 185, 190, 208, 210, 226, 239, 243, 245, 248, 249, 255, 273, 280, 297, 298, 301, 302, 306, 321], "login": [91, 92], "lognorm": [308, 309, 310], "logo": [266, 268], "logoloop": 268, "logpdf": 313, "logrot": 92, "logs_free_perc": 92, "logs_rot": 98, "logs_usag": 92, "logspac": 291, "londh": [227, 231], "long": [19, 27, 35, 36, 39, 61, 67, 71, 73, 81, 84, 86, 90, 94, 98, 111, 115, 117, 118, 119, 138, 145, 146, 147, 148, 150, 151, 155, 166, 167, 168, 170, 183, 200, 218, 229, 230, 237, 238, 242, 247, 251, 254, 265, 282, 283, 309, 310, 313], "long_run": 150, "longer": [84, 92, 120, 134, 164, 165, 167, 170, 177, 193, 201, 207, 221, 225, 240, 251, 253, 275, 280, 290, 321], "longest": 318, "longpath": 282, "loo": 310, "look": [12, 21, 117, 141, 142, 144, 166, 269, 271], "lookahead": 298, "lookbehind": 298, "lookup": [10, 51, 56, 80, 98, 123, 197, 274, 317], "loop": [8, 17, 27, 34, 40, 51, 53, 57, 59, 61, 64, 65, 67, 72, 73, 74, 75, 77, 78, 81, 82, 85, 86, 91, 92, 93, 95, 98, 111, 112, 114, 116, 118, 119, 128, 131, 136, 146, 150, 155, 164, 166, 167, 169, 171, 188, 189, 191, 195, 199, 202, 203, 208, 215, 216, 217, 218, 220, 223, 226, 229, 230, 232, 235, 237, 238, 239, 242, 244, 245, 248, 249, 250, 251, 253, 259, 261, 262, 268, 274, 276, 277, 279, 283, 284, 287, 291, 293, 298, 299, 310, 313, 316, 317], "loos": 17, "looser": 86, "lope": [228, 229, 236, 238], "lorenz": [228, 236], "lose": [33, 35, 162, 215, 225, 227, 231, 240, 290], "loss": [35, 53, 58, 93, 118, 124, 162, 167, 170, 173, 185, 206, 207, 209, 223, 227, 231, 235, 261, 284, 290, 299, 317], "lost": [70, 177, 185], "loud": 164, "love": 12, "low": [10, 17, 25, 30, 37, 38, 39, 42, 49, 53, 55, 59, 61, 63, 65, 67, 68, 72, 73, 77, 78, 79, 81, 82, 84, 85, 86, 93, 98, 104, 111, 112, 114, 115, 118, 119, 120, 122, 124, 126, 127, 129, 130, 132, 133, 134, 135, 136, 140, 146, 148, 149, 162, 163, 164, 165, 166, 167, 171, 183, 184, 185, 191, 193, 197, 199, 200, 201, 202, 203, 205, 209, 210, 214, 216, 224, 227, 228, 229, 230, 231, 234, 236, 237, 238, 242, 245, 246, 247, 249, 251, 253, 254, 255, 280, 287, 290, 291, 293, 294, 298, 299, 306, 308, 309, 321], "low_divers": 98, "low_energi": 86, "low_mass": 166, "low_rank_dip": 278, "lowchatt": 294, "lower": [20, 35, 37, 49, 51, 53, 58, 61, 65, 67, 68, 72, 73, 76, 77, 79, 80, 85, 86, 98, 100, 101, 102, 103, 105, 112, 113, 115, 117, 118, 120, 121, 128, 133, 146, 149, 166, 167, 169, 170, 182, 183, 193, 197, 201, 202, 203, 206, 210, 215, 216, 220, 222, 226, 227, 228, 230, 231, 232, 233, 236, 237, 239, 250, 253, 254, 258, 265, 274, 276, 277, 279, 290, 291, 293, 294, 298, 303, 308, 309, 320], "lower_bound": [20, 49, 50, 51, 53, 58, 72, 76, 82, 98, 103, 105, 112, 113, 114, 115, 116, 117, 182, 248, 253, 276, 280], "lower_threshold": 120, "lowercas": 258, "lowest": [42, 49, 65, 67, 72, 78, 85, 116, 129, 166, 167, 197, 203, 227, 229, 231, 238, 303, 308, 318], "lowpassfilt": 136, "lowrank": [9, 52, 59, 220], "lowrank_step_fn": 203, "lowrankdipconfig": [61, 220], "lowrankdipdynam": [52, 59, 278], "lozano": 86, "lpf": 136, "lqr": [36, 40, 86, 161, 223, 235], "lr": [62, 161, 162, 163, 164, 167, 215, 259, 274, 316, 317], "lru": 98, "lru_cach": [17, 81, 112], "lsof": [91, 177], "lstm": [224, 234], "lstsq": [35, 220], "lt": 73, "lte": [35, 200], "lubric": 118, "luciano": 17, "lum": 123, "lunch": 293, "ly": 28, "lyapunov": [1, 2, 19, 22, 30, 31, 35, 36, 37, 39, 40, 48, 53, 55, 57, 58, 65, 69, 72, 75, 81, 82, 85, 86, 88, 89, 93, 95, 98, 99, 103, 112, 116, 121, 122, 125, 127, 129, 153, 164, 166, 168, 169, 181, 189, 192, 194, 195, 199, 202, 205, 209, 214, 224, 232, 234, 242, 243, 245, 251, 255, 256, 257, 261, 262, 273, 274, 284, 286, 291, 294, 297, 298, 299, 301, 309, 310, 316, 318, 320], "lyapunov_candid": 294, "lyapunov_condit": 255, "lyapunov_deriv": [75, 209, 255, 294], "lyapunov_matrix_p": 287, "lyapunov_result": 75, "lyapunov_st": [112, 255, 286, 298], "lyapunov_stability_analysi": [7, 55, 65, 121, 122, 125, 126, 286, 291, 310, 318], "lyapunov_stability_cit": 256, "lyapunov_switching_term": 294, "lyapunov_valu": 261, "lyapunov_with_control": 294, "lyapunovstabilitytestsuit": 75, "lyapunovstabilityvalid": 209, "lyapunovsurfacedirect": 30, "lyapunovtestpoint": [75, 209], "lyapunovtestresult": 75, "lyapunovvalidationresult": 209, "lynch": 290, "l\u00b2": 134, "l\u2080": 103, "l\u2081": [86, 134, 161, 198, 316, 317], "l\u2081co": [134, 161], "l\u2081cos\u03b8\u2081": 86, "l\u2081sin": 161, "l\u2081\u03b8": [86, 161], "l\u2081\u1e8b\u03b8": 161, "l\u2082": [86, 134, 161, 198, 316, 317], "l\u2082co": [134, 161], "l\u2082cos\u03b8\u2082": 86, "l\u2082\u03b8": 86, "m": [10, 13, 20, 21, 25, 26, 30, 34, 36, 37, 39, 41, 45, 51, 52, 58, 62, 67, 70, 72, 73, 74, 75, 77, 78, 79, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 98, 102, 103, 107, 108, 115, 116, 117, 118, 119, 121, 124, 128, 131, 134, 135, 136, 142, 144, 146, 148, 151, 161, 162, 164, 165, 168, 169, 170, 177, 178, 182, 183, 185, 189, 193, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 215, 216, 219, 220, 221, 223, 225, 226, 230, 232, 235, 237, 239, 240, 245, 246, 252, 253, 254, 255, 258, 259, 265, 267, 268, 271, 272, 280, 282, 283, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 306, 310, 313, 315, 317, 323], "m0": [128, 130, 131, 134, 135, 150, 151, 164, 166, 169, 170, 220], "m1": [30, 35, 72, 117, 130, 131, 134, 135, 150, 151, 164, 169, 170, 198, 208, 220, 225, 240, 278, 290, 313, 320], "m11": 198, "m11m_": [225, 240], "m12": [225, 240], "m12m_": [225, 240], "m1_val": 134, "m1_valu": 134, "m1lc1": [225, 240], "m1m_": 232, "m2": [30, 35, 72, 117, 130, 131, 134, 135, 150, 151, 164, 169, 170, 198, 208, 220, 225, 240, 278, 313, 320], "m2l1": [225, 240], "m2l1lc2": [225, 240], "m2l1lc2co": [225, 240], "m2l1lc2sin": [225, 240], "m2lc2g": [225, 240], "m2lc2\u03b8": [225, 240], "m2m_": 232, "m_": [53, 198, 220, 225, 227, 231, 232, 240, 287, 288, 295], "m_0": [74, 152, 198, 220, 221, 272, 288, 289, 296, 317], "m_1": [53, 74, 86, 152, 198, 208, 220, 221, 225, 227, 231, 240, 258, 272, 288, 289, 290, 317], "m_12": 161, "m_1g": [225, 240, 295], "m_1l_1": 295, "m_1l_c1": [225, 240], "m_1l_c12": [225, 240], "m_2": [53, 74, 86, 152, 198, 208, 220, 221, 225, 227, 231, 240, 258, 272, 288, 289, 290, 317], "m_2g": [225, 240, 295], "m_2gl_1": 295, "m_2l_1": [225, 240, 295], "m_2l_12": [225, 240], "m_2l_12m_2l_1l_c2co": [225, 240], "m_2l_1l_2": 295, "m_2l_1l_c2co": [225, 240], "m_2l_1l_c2sin": [225, 240], "m_2l_2": 295, "m_2l_c22": [225, 240], "m_2l_c2co": [225, 240], "m_2l_c2g": [225, 240], "m_2l_c2x": [225, 240], "m_best": 202, "m_c": [86, 225, 227, 231, 240, 258, 290], "m_c1": 161, "m_c2": 161, "m_cart": 35, "m_condit": 35, "m_cx": [225, 240], "m_dot_approx": 287, "m_eff": 86, "m_exp": 84, "m_i": [88, 220], "m_inv": [35, 168, 197, 198, 205, 213, 287, 290], "m_inv_approx": 35, "m_lin": 161, "m_matrix": 258, "m_p": [45, 74, 285, 296], "m_pert": 287, "m_pinv": [35, 290], "m_reg": [35, 78, 81, 198, 205, 206, 213, 290], "m_reg_inv": 35, "m_total": [86, 161], "m_upright": 198, "mac": [91, 141, 142, 144, 145, 146, 150, 155, 164, 170, 177], "machin": [5, 8, 17, 22, 36, 41, 65, 67, 86, 87, 119, 120, 127, 146, 170, 185, 193, 199, 218, 242, 245, 256, 259, 261, 282, 290], "maciejowski": 84, "maciv": 8, "maciver2019hypothesi": 8, "mackenzi": 207, "maco": [30, 31, 124, 144, 146, 147, 153, 156, 267, 268, 271, 282, 284], "macosx": 146, "macro": 13, "made": [29, 270, 300], "madr": 11, "maf": 136, "magic": [90, 94, 268], "magicbento": [267, 268, 269], "magnet": [205, 224, 228, 234, 236, 267, 268], "magnetlin": 268, "magnifi": 290, "magnitud": [10, 35, 51, 53, 65, 67, 76, 77, 79, 84, 98, 103, 105, 112, 113, 118, 119, 120, 163, 164, 177, 193, 195, 202, 205, 209, 213, 215, 222, 224, 226, 227, 231, 232, 233, 234, 239, 245, 249, 253, 260, 265, 277, 287, 290, 293, 306, 310], "mai": [10, 33, 35, 53, 56, 58, 61, 62, 65, 67, 72, 73, 74, 76, 78, 79, 81, 84, 86, 95, 98, 120, 121, 122, 134, 135, 141, 143, 145, 146, 147, 148, 159, 162, 164, 166, 167, 168, 170, 177, 183, 185, 193, 197, 199, 201, 202, 203, 205, 207, 208, 215, 222, 223, 224, 225, 226, 228, 230, 232, 233, 234, 235, 236, 237, 239, 240, 248, 252, 253, 254, 255, 265, 269, 270, 273, 276, 280, 283, 284, 290, 298, 300, 306, 308, 310, 318], "mail": 254, "main": [7, 8, 21, 22, 24, 25, 27, 28, 30, 39, 43, 44, 46, 49, 51, 52, 57, 58, 59, 61, 69, 70, 71, 72, 76, 77, 78, 80, 82, 83, 86, 89, 90, 92, 94, 95, 98, 100, 101, 107, 112, 117, 121, 122, 123, 124, 125, 126, 127, 128, 138, 146, 147, 153, 155, 164, 165, 167, 169, 170, 177, 187, 188, 190, 201, 202, 212, 215, 220, 222, 223, 225, 233, 235, 240, 243, 248, 253, 254, 262, 263, 266, 267, 268, 269, 270, 271, 281, 286, 288, 290, 291, 298, 299, 310, 313, 315, 317, 318, 321], "main_control": 216, "mainpid": 92, "maintain": [3, 8, 10, 11, 12, 16, 17, 19, 20, 24, 25, 26, 29, 32, 35, 36, 38, 39, 40, 41, 45, 50, 52, 56, 57, 58, 59, 65, 67, 71, 72, 73, 76, 84, 85, 86, 88, 91, 93, 94, 98, 100, 103, 105, 106, 107, 111, 115, 118, 119, 120, 121, 122, 123, 124, 125, 132, 139, 142, 143, 144, 145, 148, 156, 159, 162, 163, 164, 166, 167, 177, 182, 185, 188, 190, 191, 192, 193, 199, 202, 204, 205, 207, 209, 210, 213, 215, 222, 223, 224, 227, 230, 231, 232, 233, 234, 235, 237, 242, 243, 244, 245, 246, 249, 250, 251, 253, 255, 256, 257, 258, 261, 277, 279, 283, 284, 286, 290, 291, 294, 296, 300, 303, 310, 315, 320], "maintain_operation_offlin": 93, "mainten": [2, 19, 33, 36, 39, 53, 57, 58, 59, 89, 93, 122, 129, 139, 143, 188, 192, 194, 197, 205, 241, 242, 245, 247, 251, 261, 293, 315], "maintenance_log": 98, "maintenance_manag": 111, "maintenance_record": 98, "maintenance_typ": 98, "major": [5, 10, 11, 16, 23, 24, 26, 31, 32, 33, 56, 58, 61, 67, 73, 115, 119, 126, 139, 142, 188, 199, 223, 227, 231, 235, 241, 243, 258, 266, 276, 298, 301], "major_interface_chang": 102, "make": [1, 10, 13, 17, 22, 23, 26, 31, 44, 49, 70, 82, 86, 121, 138, 141, 145, 147, 155, 159, 160, 163, 164, 196, 198, 199, 222, 223, 224, 226, 232, 233, 234, 235, 239, 255, 269, 270, 315, 318], "make_deployment_decis": 255, "make_factori": 216, "make_hybrid": [34, 282, 283], "maker": 201, "malform": [25, 45, 318], "malfunct": 173, "man": [17, 202], "manag": [1, 2, 8, 11, 15, 17, 18, 22, 24, 27, 29, 30, 31, 32, 38, 39, 40, 41, 52, 55, 56, 58, 64, 67, 68, 76, 78, 79, 80, 81, 82, 85, 86, 87, 91, 92, 93, 95, 103, 105, 106, 108, 110, 116, 117, 118, 119, 121, 122, 127, 130, 131, 135, 138, 139, 142, 143, 146, 150, 155, 168, 173, 181, 185, 188, 193, 203, 215, 216, 217, 218, 224, 227, 230, 231, 234, 237, 241, 242, 243, 244, 245, 248, 251, 253, 254, 255, 256, 257, 274, 275, 278, 280, 282, 283, 284, 293, 297, 300, 316, 317, 320, 321], "managed_factori": 117, "managed_pso_fit": 117, "managedcontrollerfactori": 117, "mandat": 243, "mandatori": [39, 40, 70, 100, 203, 218, 273, 284, 290, 300], "mani": [10, 13, 17, 22, 33, 49, 79, 98, 114, 117, 121, 122, 134, 145, 162, 164, 170, 197, 210, 222, 224, 225, 229, 233, 234, 238, 240, 248, 309, 310], "manifest": [1, 67, 92, 222, 233], "manifold": [82, 181, 199, 222, 224, 226, 227, 231, 232, 233, 234, 239, 287], "manipul": [144, 153, 177, 222, 223, 224, 225, 227, 231, 232, 233, 234, 235, 240, 290, 318], "mann": [53, 65, 169, 178, 193, 308, 309, 310], "manner": [222, 225, 233, 240], "mannwhitneyu": 313, "manoeuvr": 306, "mantissa": 290, "manual": [1, 13, 14, 25, 29, 30, 31, 32, 44, 55, 56, 58, 71, 73, 87, 93, 94, 107, 115, 119, 127, 147, 148, 149, 154, 164, 165, 166, 167, 170, 173, 177, 182, 199, 201, 202, 203, 222, 223, 224, 229, 233, 234, 235, 238, 242, 265, 267, 275, 290, 293, 299, 300, 315, 318], "manual_intervention_requir": 261, "map": [1, 19, 30, 32, 35, 39, 49, 50, 52, 56, 58, 59, 63, 64, 72, 73, 76, 98, 99, 102, 117, 122, 123, 124, 125, 126, 148, 150, 152, 170, 171, 186, 187, 196, 202, 215, 221, 224, 225, 226, 230, 232, 234, 237, 239, 240, 247, 248, 254, 257, 258, 262, 267, 280, 293, 295, 297, 313], "map_config": 63, "map_config_to_control": 63, "map_roa": [228, 236], "mapper": 63, "mapping_strategi": 63, "mapsto": 293, "mar": 159, "marco": 123, "margin": [3, 36, 37, 41, 45, 53, 65, 67, 73, 74, 77, 78, 79, 81, 98, 103, 107, 112, 120, 124, 133, 140, 141, 144, 148, 160, 166, 167, 172, 176, 179, 183, 193, 197, 200, 201, 209, 214, 216, 232, 242, 248, 249, 250, 251, 252, 253, 259, 260, 261, 279, 280, 284, 285, 287, 290, 293, 296, 306, 309, 310, 313], "mark": [2, 14, 17, 55, 67, 114, 117, 127, 167, 199, 262, 283, 284, 306], "markdown": [8, 10, 14, 16, 24, 25, 26, 27, 28, 30, 32, 33, 58, 67, 89, 94, 121, 138, 147, 169, 188, 266, 297], "markdown_ast": 298, "markdownlint": [16, 188], "marker": [11, 22, 25, 30, 31, 93, 94, 97, 118, 132, 134, 135, 156, 215, 228, 236, 283, 299], "markers": [149, 164, 320], "markup": 188, "marri": [222, 233], "martin": [2, 17, 301], "martin2003agil": 17, "masanori": 8, "mask": [56, 59, 61, 76, 98, 120, 203, 250, 300], "maskabl": [1, 31], "masonri": 268, "mass": [22, 45, 53, 61, 72, 73, 74, 78, 84, 86, 118, 124, 127, 128, 130, 131, 134, 135, 136, 148, 151, 161, 164, 167, 169, 170, 196, 197, 199, 208, 209, 216, 219, 220, 221, 222, 223, 224, 227, 231, 232, 233, 234, 235, 246, 253, 258, 272, 288, 289, 296, 309, 313, 316, 317, 320], "mass_cart": 92, "mass_matrix": [35, 168], "mass_matrix_form": 295, "mass_pendulum1": 92, "mass_pendulum2": 92, "mass_pert": 320, "mass_perturb": 320, "mass_uncertainti": [75, 112, 320], "mass_vari": 81, "massiv": [25, 53, 250], "massmatrix": 317, "massoum": [223, 235], "master": [0, 1, 2, 4, 27, 121, 122, 125, 137, 139, 144, 160, 190], "master_controller_comparison": 321, "masterconfig": 73, "mat": [13, 149, 258, 288, 289, 294, 295], "match": [5, 13, 15, 19, 26, 27, 28, 30, 31, 38, 39, 41, 49, 53, 55, 56, 58, 59, 62, 71, 72, 74, 78, 81, 82, 84, 85, 95, 98, 102, 103, 108, 109, 112, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 132, 135, 139, 142, 143, 144, 151, 159, 163, 165, 166, 168, 177, 183, 185, 187, 191, 199, 200, 206, 208, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 237, 239, 249, 251, 266, 271, 287, 290, 293, 294, 296, 297, 298, 300, 301, 310, 318, 320], "matchexpress": 92, "matchlabel": [63, 91, 92], "matchmedia": 30, "materi": [1, 11, 19, 31, 58, 108, 129, 139, 140, 143, 152, 192, 227, 231, 243, 309], "mateusz": 8, "math": [8, 13, 15, 27, 30, 31, 55, 73, 79, 93, 98, 112, 126, 139, 140, 143, 144, 145, 155, 156, 191, 232, 243, 256, 262, 293, 294, 295, 298], "math_block_pattern": 299, "math_result": 252, "mathbb": [76, 193, 198, 199, 200, 201, 202, 208, 246, 258, 279, 287, 289, 290, 293, 294, 295, 299], "mathbf": [19, 53, 76, 152, 156, 193, 216, 217, 220, 232, 246, 279, 287, 290], "mathcal": [76, 193, 200, 201, 202, 220, 246, 279, 289, 290, 291, 293, 294, 295], "mathemat": [1, 8, 12, 16, 19, 26, 31, 38, 42, 52, 58, 59, 64, 65, 67, 69, 71, 75, 76, 79, 83, 89, 93, 105, 114, 120, 122, 124, 127, 129, 132, 134, 145, 152, 161, 162, 164, 166, 168, 169, 170, 188, 189, 190, 197, 198, 200, 201, 208, 213, 214, 215, 216, 218, 219, 222, 226, 227, 231, 232, 233, 239, 241, 250, 253, 255, 257, 262, 263, 265, 275, 282, 283, 286, 287, 292, 297, 308, 309, 310, 312, 316, 317, 318, 320], "mathematical_algorithm": [40, 301], "mathematical_algorithm_valid": [191, 243], "mathematical_confid": 255, "mathematical_consist": 252, "mathematical_constraint": 98, "mathematical_deployment_threshold": 209, "mathematical_ev": 255, "mathematical_exit": 255, "mathematical_found": [11, 14, 33, 78, 193, 203, 208, 217, 220, 292, 298], "mathematical_interpret": [75, 209, 255], "mathematical_model_fit": 75, "mathematical_pid": 255, "mathematical_properti": [39, 75, 209], "mathematical_properties_verifi": 75, "mathematical_property_verifi": 75, "mathematical_refer": [13, 286], "mathematical_result": 255, "mathematical_rigor_scor": [209, 255], "mathematical_sound": 209, "mathematical_theori": 242, "mathematical_valid": 247, "mathematical_validation_insuffici": 255, "mathematical_validation_procedur": 209, "mathematicalpropertytestsuit": 75, "mathematicalregressiondetector": 207, "mathematicalvalidationreport": 207, "mathematicalvalidationresult": 255, "mathjax": [13, 145], "mathrm": [74, 221, 224, 226, 227, 231, 232, 234, 239, 272, 296], "mathsf": 232, "mathviz": [1, 31, 156], "mathviz_extens": 156, "matlab": [67, 127, 200, 259], "matlab_data": 149, "matplotlib": [1, 2, 15, 24, 27, 30, 34, 39, 53, 57, 59, 61, 77, 81, 86, 90, 92, 117, 118, 124, 128, 133, 134, 135, 146, 147, 148, 149, 150, 153, 154, 164, 166, 167, 169, 170, 171, 177, 178, 187, 188, 189, 193, 201, 202, 215, 216, 248, 253, 254, 280, 284, 290, 310, 313, 316, 320, 323], "matric": [10, 13, 35, 51, 52, 59, 65, 75, 78, 82, 84, 95, 153, 155, 160, 161, 168, 176, 199, 209, 213, 220, 221, 224, 225, 227, 231, 232, 234, 240, 246, 284, 287, 290, 295], "matrix": [8, 10, 13, 15, 26, 34, 39, 41, 42, 53, 56, 58, 61, 65, 66, 67, 72, 75, 76, 78, 79, 81, 84, 88, 103, 119, 123, 134, 135, 138, 142, 155, 157, 160, 163, 164, 166, 168, 190, 191, 195, 196, 199, 204, 205, 206, 209, 212, 219, 222, 224, 225, 226, 227, 231, 232, 233, 234, 239, 240, 241, 243, 249, 258, 273, 274, 275, 276, 278, 279, 282, 283, 284, 286, 288, 294, 295, 301, 313, 317], "matrix_condit": 209, "matrix_gener": 75, "matrix_invert": [213, 220], "matrix_nam": [75, 209], "matrix_rank": 220, "matrix_regular": 81, "matrix_result": 75, "matrix_test_cas": 75, "matrixconditioningresult": [75, 209], "matrixconditioningtestcas": 75, "matrixconditioningtestresult": 75, "matrixinvert": [213, 220, 290], "matrixoper": 209, "matrixoperationresult": 209, "matter": [15, 61, 310], "matur": 87, "mauric": 2, "max": [1, 19, 22, 23, 29, 30, 35, 38, 39, 40, 49, 51, 52, 61, 65, 68, 73, 74, 75, 76, 77, 78, 79, 84, 85, 93, 97, 98, 101, 103, 104, 107, 114, 115, 117, 118, 119, 120, 125, 128, 133, 135, 136, 140, 143, 144, 146, 147, 148, 149, 150, 151, 154, 162, 163, 164, 165, 167, 168, 169, 170, 171, 177, 178, 195, 197, 198, 199, 200, 201, 202, 203, 205, 208, 209, 213, 214, 216, 220, 224, 226, 227, 231, 232, 234, 239, 245, 246, 248, 250, 253, 254, 258, 261, 265, 276, 277, 279, 280, 282, 283, 287, 290, 292, 293, 301, 308, 316, 320, 321], "max_": [68, 97, 193, 246], "max_absolute_drift": 209, "max_acceler": 321, "max_acceptable_cost": 251, "max_acceptable_jitt": 209, "max_allow": 75, "max_angl": [242, 249, 277, 313, 321], "max_angle_devi": 92, "max_angular_respons": 247, "max_angular_veloc": 249, "max_bound": [73, 252], "max_cache_s": 111, "max_cart_po": [49, 84, 103], "max_chang": 277, "max_change_ratio": 73, "max_concurrent_oper": 111, "max_cond": 290, "max_condition_numb": [51, 80, 213, 220], "max_control": [148, 167, 208], "max_control_computation_tim": 114, "max_control_forc": [75, 92], "max_control_input": 209, "max_control_lat": 255, "max_control_magnitud": 101, "max_control_r": 277, "max_control_tim": [76, 253], "max_control_us": 75, "max_controller_inst": 111, "max_cost": [246, 253], "max_creation_tim": 114, "max_creation_time_m": 111, "max_damp": 98, "max_damping_ratio": 247, "max_damping_requir": 98, "max_delta": 35, "max_detection_delai": 119, "max_devi": 107, "max_diff": 320, "max_dt": [35, 73, 191, 254], "max_du": [55, 84], "max_eigenvalue_magnitud": 291, "max_energi": [61, 216], "max_energy_error": 209, "max_eq": 78, "max_error": 113, "max_evalu": 52, "max_evaluation_tim": 98, "max_exampl": 283, "max_execution_tim": 119, "max_execution_time_m": 119, "max_external_disturb": 98, "max_factor": 250, "max_factory_creation_tim": 114, "max_false_alarm_r": 119, "max_forc": [12, 17, 20, 22, 35, 36, 37, 38, 40, 49, 50, 52, 55, 56, 61, 62, 65, 67, 68, 74, 76, 77, 79, 81, 82, 83, 84, 85, 86, 97, 98, 100, 105, 106, 114, 115, 117, 125, 127, 128, 131, 132, 133, 135, 136, 148, 150, 151, 158, 164, 166, 170, 185, 193, 196, 197, 199, 203, 205, 210, 211, 216, 217, 224, 226, 234, 239, 242, 248, 249, 250, 254, 266, 273, 275, 276, 277, 282, 283, 300, 301, 321], "max_force_estim": 112, "max_frequ": 73, "max_gain": 98, "max_history_length": 81, "max_history_s": 63, "max_inst": 277, "max_it": [35, 49, 61, 72, 84, 117, 162, 167, 201, 202, 247, 248, 313], "max_item": [72, 73, 131], "max_iter": [53, 73, 92, 93, 104, 105, 106, 113, 125, 208, 209, 214, 229, 238, 242, 248, 254, 276, 277], "max_iteration_tim": 250, "max_jitt": [209, 321], "max_jump": 195, "max_lat": 92, "max_latency_m": 185, "max_lifetime_hour": 210, "max_log_s": 254, "max_log_size_mb": 254, "max_measured_tim": 209, "max_memory_limit": 37, "max_memory_mb": 254, "max_memory_per_control": 114, "max_meta_evalu": 52, "max_model_uncertainti": 98, "max_multi_obj_iter": 209, "max_nonlinear": 98, "max_optimization_tim": [52, 53], "max_packet_loss": 170, "max_packet_loss_r": 185, "max_prob": 208, "max_pso_iter": 209, "max_rat": [35, 277], "max_recovery_tim": 113, "max_relative_drift": 209, "max_retri": [104, 111, 115, 158, 280], "max_safe_forc": [37, 278], "max_sampl": [310, 313], "max_settling_tim": 93, "max_simulation_step_tim": 255, "max_simulation_tim": 119, "max_siz": [73, 98, 119, 199, 207, 209, 261, 283, 284, 321], "max_stable_gain": 73, "max_stagnation_iter": [52, 276, 280], "max_state_dimens": 119, "max_step": [61, 200, 232], "max_t": 245, "max_theta": [133, 136], "max_theta1": [133, 135], "max_theta2": [133, 135], "max_theta_dev": 84, "max_threshold": 111, "max_tim": [61, 76, 98, 114, 115, 136, 209], "max_total_gain": 247, "max_train_s": 310, "max_val": [61, 73, 98, 109, 208, 247, 249], "max_valu": [73, 82, 193, 199, 207, 261, 283, 284, 321], "max_veloc": [277, 321], "max_work": [92, 98, 104, 105, 106, 107, 133, 248, 253, 254, 280, 283, 313], "maxbyt": 254, "maxdepth": [217, 257, 259, 286, 316], "maxheight": 143, "maxim": [58, 67, 169, 193, 299], "maxima": [226, 239, 308], "maximis": [222, 233], "maximum": [22, 31, 37, 41, 42, 51, 53, 56, 58, 61, 68, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 86, 93, 97, 98, 99, 102, 103, 105, 112, 117, 119, 120, 131, 132, 135, 146, 152, 158, 162, 163, 164, 166, 167, 168, 182, 183, 185, 193, 196, 202, 205, 208, 215, 216, 220, 222, 224, 225, 226, 227, 228, 229, 231, 233, 234, 236, 238, 239, 240, 245, 247, 248, 249, 253, 254, 258, 259, 265, 273, 274, 275, 276, 277, 279, 280, 285, 287, 290, 291, 293, 297, 298, 299, 303, 310, 313], "maximum_angle_displac": 75, "maxit": 316, "maxlen": [63, 81], "maxsiz": [81, 112], "maxsurg": 92, "maxunavail": 92, "mayn": 84, "mb": [11, 17, 31, 36, 61, 81, 92, 93, 98, 107, 114, 115, 117, 146, 147, 171, 182, 210, 211, 250, 251, 253, 254, 259, 297, 299], "mbp": 92, "mc": [225, 240], "mc_analyz": 310, "mc_cv": 313, "mc_result": [310, 313], "mckai": 310, "mcm_": 232, "mcp": [127, 177, 290, 309, 310, 313], "mcse": 8, "md": [1, 6, 10, 12, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 36, 38, 40, 47, 49, 50, 52, 55, 56, 59, 65, 67, 68, 72, 73, 75, 76, 77, 78, 81, 84, 85, 86, 88, 89, 93, 98, 99, 103, 104, 105, 106, 107, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 151, 164, 165, 166, 167, 168, 169, 178, 186, 188, 190, 191, 193, 194, 203, 208, 209, 211, 212, 213, 220, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 261, 266, 267, 268, 269, 271, 281, 282, 283, 284, 287, 288, 291, 296, 297, 298, 299, 300, 304, 310, 313, 315, 319, 320, 321, 323], "md5": 92, "mdpi": [222, 228, 229, 233, 236, 238], "me": 287, "mea": [118, 120], "mean": [12, 22, 35, 53, 57, 61, 65, 67, 68, 76, 77, 97, 98, 104, 107, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 133, 135, 136, 146, 148, 149, 150, 151, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 177, 178, 191, 192, 198, 199, 201, 202, 209, 214, 216, 222, 224, 227, 230, 231, 232, 233, 234, 237, 246, 247, 248, 249, 250, 253, 254, 255, 259, 265, 272, 273, 277, 280, 282, 283, 285, 287, 291, 292, 293, 308, 309, 318, 320, 321], "mean1": 313, "mean2": 313, "mean_ci": 313, "mean_computation_tim": 310, "mean_confidence_interv": 310, "mean_control": 149, "mean_control_tim": 76, "mean_convergence_r": 291, "mean_cost": [53, 148, 167, 246, 253, 291], "mean_diff": [149, 313, 320], "mean_exec_tim": 61, "mean_fit": [52, 215], "mean_is": [135, 136], "mean_memori": 117, "mean_perform": [191, 248, 283], "mean_residu": 119, "mean_scor": 313, "mean_settl": [61, 313], "mean_square_converg": 293, "mean_step_s": 61, "mean_tim": [61, 76, 115, 117, 136, 209, 310, 313], "meaning": [73, 94, 99, 133, 167, 201, 230, 237, 313], "meaningfulli": 255, "measur": [1, 22, 39, 44, 45, 53, 54, 61, 62, 65, 67, 68, 71, 74, 79, 81, 84, 86, 95, 98, 107, 115, 117, 120, 122, 149, 161, 166, 171, 177, 178, 179, 183, 185, 193, 198, 199, 200, 201, 202, 203, 205, 208, 209, 218, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 242, 243, 246, 250, 253, 254, 260, 261, 273, 280, 282, 283, 289, 290, 293, 294, 295, 297, 299, 301, 303, 306, 309, 316, 317], "measure_comput": 65, "measure_computation_tim": 310, "measure_control_frequ": 93, "measure_cpu_util": 93, "measure_instanti": 65, "measure_memory_usag": [93, 310], "measure_optimization_tim": 93, "measure_response_tim": 93, "measure_simulation_memori": 44, "measured_convergence_r": 75, "measured_lat": 255, "measured_tim": [209, 255], "measuredout": 317, "measurement_cas": 119, "measurement_dur": 93, "measurement_func": 93, "measurement_nois": 321, "mechan": [10, 19, 31, 36, 38, 39, 40, 49, 50, 52, 58, 60, 65, 78, 82, 84, 86, 88, 92, 98, 100, 103, 109, 120, 131, 146, 160, 163, 173, 174, 175, 193, 199, 200, 202, 205, 207, 219, 222, 224, 226, 227, 231, 232, 233, 234, 239, 242, 244, 245, 247, 250, 253, 255, 256, 257, 261, 277, 278, 284, 287, 290, 292, 301, 321], "mechatron": [197, 205, 230, 237], "media": [8, 16, 17, 30, 89, 143, 144, 156, 188], "median": [22, 65, 67, 111, 119, 120, 151, 259, 290, 308], "median_ci": 313, "median_scor": 313, "medic": 310, "medium": [4, 10, 26, 28, 30, 31, 36, 37, 38, 39, 40, 44, 53, 55, 65, 67, 75, 77, 78, 81, 82, 85, 108, 111, 117, 122, 124, 127, 129, 132, 146, 148, 149, 162, 163, 165, 166, 169, 171, 178, 193, 197, 201, 203, 218, 219, 220, 242, 252, 253, 255, 287, 291, 298, 299, 308, 309, 310, 320], "medium_angl": 113, "medium_problem": 280, "medium_risk": 255, "meet": [41, 50, 57, 59, 67, 75, 87, 92, 93, 98, 107, 114, 119, 131, 141, 147, 149, 158, 175, 183, 197, 209, 218, 229, 232, 238, 245, 251, 253, 255, 301, 308], "mehmood": [224, 234], "mem": 171, "mem_aft": 117, "mem_befor": 117, "mem_monitor": 136, "member": [44, 202, 318], "memoiz": 297, "memor": [145, 310, 313], "memori": [8, 9, 11, 17, 27, 34, 36, 37, 38, 40, 42, 44, 45, 50, 53, 54, 55, 58, 59, 61, 63, 65, 73, 77, 78, 81, 90, 92, 93, 95, 98, 103, 105, 106, 107, 110, 114, 115, 117, 118, 135, 136, 139, 140, 141, 142, 143, 150, 153, 155, 166, 168, 182, 192, 193, 194, 195, 196, 197, 200, 217, 218, 220, 241, 242, 244, 245, 246, 247, 249, 250, 251, 253, 254, 259, 265, 275, 276, 277, 282, 283, 284, 290, 291, 293, 297, 299, 309, 310, 317, 318], "memory_after_mb": 98, "memory_before_mb": 98, "memory_callback": 254, "memory_cleanup": 98, "memory_efficient_pso": [9, 248, 254], "memory_footprint": 81, "memory_freed_mb": 98, "memory_gb": 254, "memory_growth": [93, 283], "memory_increas": [98, 107, 115], "memory_info": [17, 93, 98, 104, 107, 114, 115, 117, 210, 211, 251, 253, 254, 274, 283], "memory_leak": [111, 114], "memory_leak_tests_pass": 100, "memory_limit_mb": [92, 247], "memory_management_pattern": [55, 211], "memory_mb": [98, 117, 210, 211, 251, 254], "memory_measur": 115, "memory_monitor": [9, 17, 72, 254], "memory_per_control": [114, 274], "memory_perc": [92, 111], "memory_pool": 9, "memory_profil": 44, "memory_releas": 107, "memory_sampl": [98, 107, 253, 254], "memory_st": 98, "memory_threshold_mb": 111, "memory_track": [17, 37], "memory_trend": [111, 253], "memory_usag": [37, 63, 76, 93, 98, 117, 250, 251, 254, 321], "memory_usage_analysi": 107, "memory_usage_mb": [107, 111, 247], "memory_valu": 111, "memoryefficientcontrol": 63, "memoryefficientpso": [215, 254], "memoryerror": [91, 171, 254], "memoryless": 168, "memorymonitor": [117, 136, 211], "memorytrack": 37, "memoryusag": 317, "mendelei": [122, 320], "meng": [77, 205, 230, 237], "mental": 59, "mention": [12, 19, 165, 298], "menu": [150, 170, 268, 269, 271], "mere": [62, 222, 227, 231, 233, 285, 306], "merg": [1, 15, 56, 70, 72, 89, 94, 127, 144, 224, 234, 253, 280, 297, 298], "merge_claim": [4, 297, 298], "merge_config": 131, "merge_with_degrad": 255, "merged_config": 72, "merger": 298, "mermaid": [8, 13, 27, 40, 58, 64, 81, 86, 127, 141, 164, 166, 167, 215, 262, 263, 294, 300, 316], "mesh": 63, "meshgrid": [171, 201], "messag": [1, 5, 8, 9, 22, 23, 27, 28, 31, 33, 38, 40, 49, 50, 51, 56, 61, 65, 72, 76, 79, 80, 81, 94, 98, 106, 108, 115, 117, 140, 141, 142, 144, 145, 146, 147, 154, 170, 174, 199, 210, 250, 251, 254, 265, 273, 276, 280, 302, 313, 321], "message_part": 102, "message_queu": [9, 44], "messagemetadata": 9, "messagepackseri": 9, "messagetyp": 9, "messina": [197, 205, 230, 237], "met": [8, 21, 24, 25, 39, 43, 45, 53, 57, 58, 59, 65, 67, 73, 75, 86, 93, 94, 107, 119, 120, 125, 126, 136, 147, 218, 243, 245, 247, 252, 284], "meta": [31, 52, 57, 58, 172, 177, 188, 224, 232, 234, 250], "meta_optim": 52, "metabal": 268, "metadata": [1, 5, 8, 10, 13, 14, 19, 20, 22, 29, 37, 38, 39, 40, 41, 42, 44, 45, 50, 52, 56, 59, 65, 67, 71, 73, 75, 76, 77, 81, 82, 83, 84, 85, 86, 91, 92, 93, 97, 98, 105, 106, 115, 118, 119, 120, 122, 127, 130, 131, 132, 133, 134, 148, 149, 166, 167, 170, 171, 177, 182, 183, 187, 188, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 213, 214, 216, 220, 242, 246, 249, 253, 254, 257, 261, 265, 266, 277, 279, 283, 290, 291, 293, 299, 301, 302, 308, 318, 320, 322], "metaheurist": [199, 202, 222, 230, 232, 233, 237, 288], "metal": [152, 268], "metallicpaint": 268, "metapackag": 29, "meter": [73, 75], "method": [8, 12, 14, 19, 22, 24, 30, 32, 35, 37, 39, 40, 41, 45, 50, 51, 52, 53, 54, 56, 57, 59, 63, 65, 67, 68, 70, 71, 76, 78, 82, 83, 86, 93, 94, 95, 98, 102, 106, 107, 109, 114, 117, 120, 121, 122, 123, 127, 149, 150, 152, 161, 167, 168, 169, 171, 172, 177, 178, 182, 183, 187, 192, 193, 195, 196, 198, 202, 203, 204, 205, 209, 216, 217, 218, 219, 222, 223, 226, 230, 232, 233, 235, 237, 239, 242, 245, 248, 249, 250, 251, 253, 254, 256, 261, 275, 278, 282, 283, 286, 291, 294, 298, 301, 302, 308, 314, 317, 318, 320], "method1": 310, "method2": 310, "method_": 278, "method_data": 310, "method_nam": [37, 63, 278, 310], "method_rank": 310, "method_spec": 278, "methodologi": [0, 2, 4, 19, 52, 57, 58, 66, 67, 95, 118, 122, 123, 127, 152, 169, 179, 181, 190, 194, 205, 226, 232, 239, 241, 243, 256, 274, 287, 291, 294, 308, 313, 314, 318, 320], "metric": [1, 2, 4, 9, 10, 13, 17, 19, 20, 25, 26, 28, 33, 36, 38, 40, 44, 45, 48, 50, 51, 52, 54, 56, 59, 61, 64, 65, 66, 69, 71, 75, 78, 82, 83, 84, 87, 88, 89, 90, 92, 93, 95, 98, 101, 105, 106, 107, 119, 120, 127, 128, 129, 132, 133, 134, 135, 138, 143, 146, 148, 150, 151, 153, 156, 157, 158, 164, 166, 167, 168, 169, 171, 172, 175, 177, 178, 181, 182, 183, 184, 188, 192, 193, 194, 197, 198, 199, 202, 209, 214, 216, 217, 218, 220, 223, 227, 229, 230, 231, 232, 235, 237, 238, 241, 242, 244, 246, 247, 250, 251, 253, 254, 255, 259, 261, 269, 274, 277, 279, 282, 283, 285, 287, 291, 293, 297, 298, 300, 308, 311, 316, 317, 320], "metric_nam": [93, 107, 111], "metrics_": 9, "metrics_collect": 98, "metrics_collector": [9, 63], "metrics_collector_deadlock_fre": 9, "metrics_collector_fix": 9, "metrics_collector_threadsaf": 9, "metrics_comparison": 149, "metrics_ctrl1": 68, "metrics_ctrl2": 68, "metrics_data": 149, "metrics_fil": 39, "metrics_histori": [39, 52], "metrics_interv": 111, "metrics_path": 92, "metrics_per_tri": 68, "metrics_robust": 68, "metrics_stability_metr": [24, 25, 33], "metrics_t": 149, "metrics_to_compar": 310, "metricscollector": 63, "meurer": 8, "meurer2017sympi": 8, "mexico": [227, 230, 231, 237], "meyarivan": 291, "mg": 200, "mgh": 317, "mgmt": 250, "michalewicz": 123, "micro": [13, 227, 231], "microbenchmark": 22, "microsecond": 317, "microservic": 63, "mid": [31, 162, 167, 200, 201, 202], "middl": [124, 162, 200, 229, 238], "midpoint": [61, 113, 200], "might": [34, 229, 238], "migrat": [5, 23, 38, 39, 49, 52, 61, 72, 80, 95, 103, 105, 106, 107, 114, 115, 116, 117, 192, 196, 213, 242, 243, 252], "migrate_1_0_to_2_0": 73, "migrate_2_0_to_2_1": 73, "migrate_adaptive_smc_manu": 98, "migrate_adaptive_smc_parameters_mathemat": 99, "migrate_classical_smc_manu": 98, "migrate_classical_smc_parameters_mathemat": 99, "migrate_config": 73, "migrate_configur": 72, "migrate_configuration_data": 102, "migrate_configuration_fil": [98, 102], "migrate_hybrid_smc_manu": 98, "migrate_hybrid_smc_parameters_mathemat": 98, "migrate_legacy_config": 196, "migrate_nest": 72, "migrate_project_configur": 108, "migrate_sta_smc_manu": 98, "migrate_sta_smc_parameters_mathemat": 99, "migrated_config": [72, 73, 98, 99, 102, 105, 106, 114, 252], "migrated_control": 108, "migrated_fil": [102, 108], "migrated_param": [72, 102, 116], "migration_act": 102, "migration_appli": 102, "migration_by_control": 102, "migration_detail": 102, "migration_func": 73, "migration_guid": [98, 115], "migration_health_scor": 102, "migration_histori": 102, "migration_kei": 72, "migration_log": 108, "migration_manag": 72, "migration_path": [73, 247], "migration_record": 102, "migration_result": [102, 108], "migration_rul": 72, "migration_success": 98, "migration_suit": 99, "migration_summari": [98, 102], "migration_warn": 252, "migrationresult": 102, "migrationvalidationsuit": 98, "mij": [225, 240], "mik": [225, 240], "mild": [196, 246, 265, 290], "mileston": [24, 28, 40, 269, 300], "mileva": [228, 236], "millisecond": [65, 76, 98, 140, 200], "millman": [8, 17], "mills2009control": 257, "mimic": 288, "min": [10, 19, 22, 28, 29, 35, 38, 40, 43, 53, 55, 65, 72, 73, 74, 76, 78, 79, 81, 98, 103, 111, 115, 117, 119, 120, 122, 124, 125, 127, 129, 131, 133, 136, 139, 142, 144, 147, 148, 149, 151, 154, 162, 169, 171, 178, 191, 193, 195, 198, 199, 200, 201, 202, 204, 208, 209, 210, 214, 216, 226, 227, 229, 231, 238, 239, 245, 246, 248, 254, 258, 261, 267, 269, 271, 279, 280, 283, 287, 290, 293, 294, 298, 301, 308, 316, 318], "min_": [193, 201, 246, 291, 293], "min_bound": [73, 247, 252], "min_control_r": 92, "min_cost": 291, "min_damping_ratio": 247, "min_delta": 35, "min_diversity_threshold": 52, "min_dt": [35, 73], "min_dwell_tim": [98, 279], "min_factor": 250, "min_gain": 112, "min_i": 202, "min_improv": 248, "min_item": [72, 73, 131], "min_k": 72, "min_k1": 98, "min_k2": 98, "min_margin": 279, "min_norm": [82, 193], "min_prob": 208, "min_pso_success_r": 209, "min_real_part": 287, "min_ref": 298, "min_refer": 298, "min_reg": 220, "min_regular": [51, 80, 213, 220, 290], "min_sampl": [310, 313], "min_sample_s": 53, "min_siz": [73, 119, 199, 207, 209, 261, 283, 284, 321], "min_step": 61, "min_surface_gain": 112, "min_throughput": 92, "min_tim": [61, 76, 115, 136], "min_val": [61, 73, 98, 109, 208, 247, 249], "min_valu": [73, 82, 193, 199, 207, 261, 283, 284, 321], "min_vers": 254, "mindmap": [64, 262, 263], "mine": 8, "mini": 31, "minifi": [30, 139, 142], "minim": [10, 12, 15, 16, 17, 25, 26, 31, 35, 36, 37, 38, 41, 51, 53, 56, 58, 63, 67, 68, 70, 72, 76, 77, 78, 79, 80, 81, 84, 85, 86, 89, 91, 98, 100, 110, 114, 115, 117, 118, 119, 120, 122, 127, 132, 133, 139, 141, 146, 148, 164, 165, 166, 167, 172, 174, 182, 183, 185, 188, 193, 196, 197, 200, 201, 202, 205, 208, 209, 210, 213, 214, 216, 217, 218, 220, 227, 230, 231, 232, 237, 242, 248, 252, 253, 254, 255, 259, 268, 270, 271, 273, 275, 276, 277, 278, 280, 282, 289, 290, 291, 293, 297, 306, 310, 313, 317, 318], "minima": [53, 65, 167, 193, 201, 202, 222, 224, 230, 233, 234, 237, 290, 291], "minimal_config": [100, 109, 277], "minimal_settling_time_cost": 148, "minimalist": 267, "minimap": 142, "minimis": [45, 62, 74, 223, 224, 226, 230, 232, 234, 235, 237, 239], "minimum": [14, 30, 31, 37, 44, 51, 53, 59, 61, 72, 73, 74, 77, 79, 84, 86, 87, 92, 98, 103, 105, 112, 113, 117, 124, 127, 133, 141, 144, 145, 156, 158, 167, 171, 182, 183, 193, 195, 196, 199, 201, 202, 208, 209, 216, 222, 233, 245, 247, 250, 254, 255, 258, 273, 275, 276, 278, 279, 280, 287, 290, 294, 321], "minimum_phase_system": [222, 233], "minimum_support": 247, "minitem": 5, "minor": [5, 19, 23, 27, 32, 38, 55, 65, 73, 115, 121, 122, 124, 125, 126, 139, 142, 143, 147, 201, 218, 252, 254, 309, 310, 313], "minor_parameter_renam": 102, "minu": 198, "minut": [7, 9, 11, 16, 24, 25, 26, 29, 33, 35, 44, 55, 67, 70, 77, 78, 81, 86, 89, 92, 93, 94, 98, 122, 127, 129, 144, 146, 147, 148, 164, 166, 167, 168, 169, 170, 188, 193, 201, 202, 215, 255, 266, 271, 282, 298, 308, 320, 321], "minv_b": 78, "minv_rh": 78, "miranda": [2, 8, 15], "miranda2018pyswarm": 8, "mirror": [10, 12, 71, 74, 146, 222, 233], "mirzae": [224, 234], "misc": 25, "miscellan": [10, 26], "mislead": 300, "mismatch": [24, 38, 65, 67, 86, 98, 106, 115, 117, 119, 124, 127, 134, 135, 146, 164, 166, 170, 177, 228, 236, 252, 259, 278, 282, 283, 290, 301, 318], "misra": [245, 261], "miss": [1, 2, 5, 10, 14, 16, 20, 22, 26, 29, 37, 38, 39, 40, 45, 49, 50, 51, 53, 58, 61, 63, 65, 67, 71, 72, 73, 76, 80, 82, 83, 84, 86, 87, 88, 89, 94, 98, 100, 103, 105, 106, 107, 114, 115, 116, 118, 119, 124, 136, 143, 144, 147, 177, 185, 188, 194, 196, 204, 208, 216, 218, 244, 245, 254, 265, 275, 278, 282, 283, 298, 299, 301, 302, 310, 313, 318, 320, 323], "miss_count": 136, "miss_rat": 44, "missing_bound": 73, "missing_doc": 10, "missing_lin": 39, "missing_opt": 117, "missing_requir": 117, "missing_str": 39, "missingok": 92, "mission": [36, 39, 71, 88, 241], "misspel": 117, "misus": [82, 221], "mit": [2, 70, 207, 266, 268, 270], "mitig": [10, 48, 65, 67, 78, 86, 123, 160, 164, 195, 197, 205, 218, 222, 223, 224, 225, 229, 232, 233, 234, 235, 238, 240, 241, 243, 245, 251, 255, 256, 284, 286, 287, 288, 289, 297], "mitigation_strategi": 255, "mitigationstrategi": 255, "mix": [14, 53, 67, 71, 107, 192, 199, 269, 271, 300], "mk": 13, "mkdir": [53, 90, 92, 102, 169, 178, 254, 255, 269, 298], "mkl": 254, "ml": [218, 249], "mm": [70, 225, 240, 317], "mn": 291, "mo": 70, "mo_pso": 253, "mobayen": [202, 227, 231], "mobil": [1, 13, 27, 28, 29, 30, 31, 64, 137, 139, 140, 142, 143, 144, 153, 154, 156, 159, 269], "mock": [17, 24, 34, 76, 93, 102, 114], "mock_services_run": 93, "mockconfig": 76, "modal": [30, 53, 65, 67, 119, 162, 245], "modbu": [8, 15], "mode": [1, 9, 10, 11, 12, 13, 16, 19, 20, 24, 27, 28, 29, 31, 32, 33, 35, 37, 38, 40, 45, 49, 52, 55, 56, 62, 64, 66, 72, 75, 82, 83, 88, 89, 90, 95, 96, 98, 101, 105, 106, 109, 111, 115, 116, 118, 119, 122, 125, 127, 129, 130, 131, 132, 135, 137, 139, 142, 144, 145, 146, 147, 152, 153, 154, 155, 159, 164, 167, 170, 183, 187, 188, 189, 190, 192, 194, 195, 197, 198, 200, 202, 203, 204, 207, 213, 216, 218, 220, 223, 232, 235, 241, 242, 244, 246, 247, 251, 252, 253, 254, 257, 259, 261, 265, 267, 277, 282, 284, 286, 287, 295, 296, 298, 300, 303, 320], "mode_control_scheme_for_the_robot_manipul": [222, 233], "mode_enum": 101, "mode_histori": 86, "mode_hysteresi": 98, "mode_map": 98, "mode_numer": 86, "mode_st": 112, "model": [8, 9, 10, 17, 18, 22, 26, 39, 40, 45, 49, 50, 52, 53, 55, 56, 62, 63, 64, 69, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 85, 86, 87, 95, 97, 98, 99, 100, 103, 105, 109, 113, 114, 116, 117, 119, 121, 123, 127, 128, 129, 130, 146, 147, 150, 151, 160, 161, 163, 164, 165, 168, 169, 170, 171, 184, 187, 189, 190, 196, 199, 200, 209, 216, 217, 218, 223, 224, 226, 232, 234, 235, 239, 241, 244, 246, 249, 250, 253, 256, 257, 259, 260, 261, 268, 273, 274, 275, 276, 277, 282, 283, 286, 287, 290, 291, 294, 295, 301, 306, 308, 309, 316, 317, 320, 323], "model_": 313, "model_0_vs_model_3": 308, "model_1_vs_model_3": 308, "model_3": 308, "model_class": 278, "model_comparison": 313, "model_dump": [72, 80, 109, 114, 117], "model_fit_qu": 75, "model_idx": 313, "model_kei": 313, "model_nam": [134, 310], "model_rank": 313, "model_typ": 101, "model_uncertainti": 98, "model_valid": 216, "modelfreesmc2018": 55, "models_guid": [18, 26], "modelview": 268, "moder": [7, 22, 35, 36, 53, 61, 65, 67, 68, 77, 78, 79, 81, 84, 85, 86, 98, 118, 119, 129, 132, 134, 135, 146, 148, 162, 164, 166, 182, 183, 191, 193, 196, 197, 198, 199, 200, 201, 202, 205, 209, 210, 213, 215, 219, 220, 227, 228, 230, 231, 236, 237, 246, 253, 265, 283, 290, 291, 293, 303, 309, 310, 313, 318], "modern": [2, 8, 13, 14, 17, 28, 31, 50, 61, 70, 71, 107, 143, 145, 146, 152, 153, 157, 205, 222, 225, 233, 240, 257, 258, 270, 275, 290, 297], "modern_control": 106, "modernrobot": [225, 240], "modif": [15, 27, 31, 51, 72, 73, 98, 120, 127, 177, 222, 233, 250, 257], "modifi": [15, 16, 17, 29, 31, 32, 33, 41, 49, 51, 53, 57, 59, 92, 115, 117, 120, 122, 123, 127, 131, 134, 138, 144, 146, 147, 152, 155, 165, 167, 170, 182, 188, 191, 195, 201, 202, 222, 223, 226, 227, 231, 233, 235, 239, 246, 253, 265, 282, 293, 297, 298, 300, 320], "modified_modul": 282, "modified_param": 134, "modul": [11, 16, 17, 19, 24, 26, 32, 33, 34, 39, 49, 55, 61, 65, 67, 71, 79, 80, 81, 86, 88, 93, 94, 95, 97, 103, 115, 116, 124, 128, 129, 131, 132, 133, 134, 135, 136, 146, 151, 155, 170, 171, 177, 182, 185, 188, 194, 197, 198, 199, 200, 201, 214, 217, 218, 219, 220, 223, 224, 228, 229, 230, 232, 234, 235, 236, 237, 238, 242, 254, 255, 257, 261, 262, 265, 266, 282, 283, 285, 288, 298, 306, 310, 317, 323], "modular": [17, 63, 67, 71, 78, 80, 81, 88, 103, 119, 172, 192, 199, 220, 222, 224, 233, 234, 244, 247, 250, 278, 318], "modularadaptivesmc": [9, 10, 17, 38, 50, 277], "modularclassicalsmc": [9, 10, 38, 50, 71, 98, 100, 116, 199, 251, 273, 277], "modularhybridsmc": [9, 10, 38, 50, 51, 277, 300], "modularsupertwistingsmc": [9, 10, 38, 50, 251, 277], "module_nam": [10, 115, 117, 282], "module_path": [39, 88], "modulenotfounderror": [34, 115, 117, 254, 323], "modulo": 246, "moler": 84, "moment": [72, 232, 295], "momentum": [53, 162, 202, 215, 222, 233, 279, 291], "monitor": [1, 2, 8, 9, 10, 11, 13, 15, 16, 17, 20, 23, 25, 26, 31, 32, 35, 36, 38, 40, 45, 50, 52, 58, 63, 65, 67, 70, 72, 73, 79, 81, 82, 83, 86, 87, 88, 89, 93, 95, 101, 102, 103, 107, 115, 117, 119, 120, 127, 129, 130, 132, 138, 146, 150, 166, 167, 169, 171, 174, 175, 176, 177, 185, 188, 190, 193, 202, 203, 205, 210, 212, 213, 214, 216, 218, 222, 223, 225, 233, 235, 240, 241, 242, 243, 244, 246, 247, 248, 255, 259, 275, 277, 282, 284, 291, 292, 300, 306, 309, 310, 322], "monitor_adaptive_smc": 77, "monitor_and_valid": 21, "monitor_canari": 98, "monitor_classical_smc": [82, 83], "monitor_control_loop": 63, "monitor_deploy": 98, "monitor_dur": 98, "monitor_factory_oper": 115, "monitor_framework_health": 255, "monitor_green_environ": 98, "monitor_hybrid_control": 81, "monitor_iter": 251, "monitor_lyapunov_funct": 261, "monitor_memory_usag": 254, "monitor_optimization_run": 247, "monitor_pso_perform": 98, "monitor_roundoff_error": 35, "monitor_sta_perform": 85, "monitor_stat": 136, "monitor_thread": 277, "monitored_fitness_funct": 248, "monitoring___init__": 64, "monitoring_act": 98, "monitoring_config": [63, 98, 104], "monitoring_histori": 63, "monitoring_loop": 111, "monitoring_requir": 255, "monitoring_system": 321, "monitoring_system_integr": 321, "monitoringreport": 63, "monkeypatch": 38, "monkeytyp": 10, "monolith": [17, 192, 199], "monoton": [35, 39, 86, 124, 192, 199, 201, 284, 290, 310], "mont": [7, 10, 12, 17, 52, 53, 59, 127, 128, 129, 136, 146, 148, 150, 157, 165, 169, 189, 191, 199, 201, 203, 220, 230, 232, 237, 242, 246, 259, 274, 282, 283, 307, 308, 311, 314, 320, 321], "monte_carlo": [9, 17, 169, 308, 320], "monte_carlo_distribut": 171, "monte_carlo_false_alarm_test": 119, "monte_carlo_quick_test": 127, "monte_carlo_result": [136, 169], "monte_carlo_results_a": 136, "monte_carlo_results_b": 136, "monte_carlo_run": [228, 236, 321], "monte_carlo_simul": 313, "monte_carlo_valid": [191, 310, 313], "montecarloanalyz": [310, 313, 321], "montecarloconfig": [310, 313], "montecarlostrategi": 17, "month": [93, 218, 242, 253, 257], "monthli": [89, 243, 245, 255], "moo": 201, "moor": [35, 205, 226, 239], "mopso": [123, 201, 202], "morari": 84, "more": [7, 9, 10, 13, 19, 22, 26, 33, 35, 39, 45, 53, 55, 59, 64, 65, 68, 77, 78, 84, 85, 86, 92, 98, 103, 106, 113, 115, 117, 118, 131, 133, 134, 145, 146, 147, 149, 157, 162, 163, 164, 165, 166, 167, 168, 169, 170, 177, 178, 182, 183, 193, 195, 196, 197, 200, 201, 202, 203, 205, 215, 216, 222, 223, 224, 225, 226, 230, 232, 233, 234, 235, 237, 239, 240, 247, 248, 251, 253, 254, 262, 265, 275, 276, 280, 283, 287, 290, 298, 309, 313], "moreno": [2, 81, 85, 103, 121, 125, 188, 199, 205, 206, 287, 301], "moreno2012strict": [32, 257], "morenoosorio": 55, "morenoosorio2012": [45, 55], "moreov": [222, 232, 233], "morgado": [228, 229, 236, 238], "morn": 170, "morphism": 268, "morteza": [224, 234], "mosquito": 8, "most": [14, 15, 20, 25, 40, 44, 49, 55, 61, 65, 75, 82, 83, 91, 95, 99, 102, 108, 115, 129, 132, 143, 146, 148, 158, 159, 162, 164, 166, 177, 196, 197, 200, 201, 226, 239, 254, 258, 266, 269, 270, 271, 290, 291, 303, 309, 310, 315, 322], "most_used_deprecated_param": 102, "mostli": [7, 10, 14, 71], "motion": [1, 28, 30, 31, 61, 84, 103, 118, 127, 129, 130, 136, 139, 145, 146, 152, 156, 160, 162, 164, 197, 199, 205, 219, 222, 224, 232, 233, 234, 258, 265, 267, 268, 269, 288, 295, 316, 317], "motiv": [82, 120, 199, 202, 223, 224, 228, 232, 234, 235, 236, 265, 279, 294, 320], "motor": [205, 224, 225, 228, 234, 236, 240, 249, 290, 317], "moulai": 123, "mount": [222, 232, 233, 296], "mountpath": [63, 92], "mous": [64, 153, 156], "movabl": [161, 189, 227, 231], "move": [10, 39, 72, 82, 83, 85, 86, 94, 98, 118, 134, 136, 146, 161, 162, 163, 164, 165, 167, 198, 199, 201, 209, 214, 220, 225, 226, 229, 232, 238, 239, 240, 261, 288, 289, 290, 296, 300, 317], "movement": [148, 157, 202], "movie_gener": 9, "moving_mean": 118, "moving_std": 118, "movingaveragefilt": 136, "mozilla": 15, "mp": [148, 150, 254], "mp4": 136, "mpc": [8, 9, 10, 12, 15, 17, 36, 38, 40, 49, 50, 52, 56, 61, 72, 80, 82, 103, 115, 117, 128, 218, 223, 235, 242, 244, 250, 266, 310], "mpc_avail": 116, "mpc_control": [9, 10, 38, 50, 51, 52, 56, 72, 84, 100, 103, 105, 116, 117, 223, 224, 234, 235, 265], "mpc_factory_for_pso": 84, "mpc_param": 103, "mpc_technical_guid": 84, "mpc_wrapper": 84, "mpcconfig": [9, 10, 51, 116], "mpccontrol": [50, 51, 84, 86, 116, 117, 223, 235], "mpcweight": [9, 10, 55, 84], "mpi": [250, 317], "mpl": [2, 15], "mpl_toolkit": 133, "mplbackend": [34, 124, 146, 282, 283, 284, 323], "mplot3d": 133, "mq": [225, 240], "mr": 75, "mse": 313, "mspace": [227, 231, 232], "mthr": [225, 240], "mtime": 92, "mu": [119, 120, 191, 201, 279, 287, 290, 313], "mu_0": 201, "mu_a": 193, "mu_b": 193, "mu_c": 135, "mu_coulomb": 134, "mu_j": 293, "mu_k": 120, "much": [98, 148, 163, 164, 165, 167, 197, 201, 208, 230, 232, 237, 290, 310], "mudasar": [224, 234], "muhammad": [223, 235], "multi": [1, 9, 13, 16, 19, 20, 22, 25, 28, 29, 30, 36, 37, 38, 39, 40, 51, 52, 56, 57, 58, 59, 60, 65, 67, 68, 70, 71, 75, 81, 82, 83, 86, 88, 89, 90, 92, 97, 98, 102, 104, 106, 107, 112, 116, 119, 123, 127, 129, 130, 148, 153, 154, 161, 162, 167, 171, 172, 179, 180, 181, 182, 184, 188, 189, 190, 193, 197, 199, 202, 203, 205, 209, 215, 216, 218, 222, 228, 229, 230, 233, 236, 237, 238, 241, 242, 244, 245, 246, 247, 249, 250, 252, 254, 255, 256, 257, 259, 261, 275, 277, 283, 284, 286, 288, 290, 292, 294, 297, 298, 304, 317, 318, 319, 322], "multi_controller_comparison_exampl": 112, "multi_controller_optim": 248, "multi_link_robot_r1_m3": [222, 233], "multi_obj_optim": 209, "multi_object": [52, 58, 247, 253], "multi_objective_config": 280, "multi_objective_cost": [133, 167], "multi_objective_fit": [112, 248], "multi_objective_optim": 321, "multi_objective_pso": [9, 44, 183, 248, 321], "multi_objective_pso_optim": [98, 112, 248], "multi_result": 215, "multi_stage_pso_optim": 248, "multi_start_pso": [148, 215], "multi_thread_r": 92, "multi_thread_tim": 92, "multibodi": [225, 240], "multicontrollerconsistencytestcas": 75, "multicontrollerconsistencytestresult": 75, "multidimension": [58, 162, 199, 202, 246, 291], "multilin": [24, 297, 299], "multimod": [162, 193, 202, 215, 293], "multiobject": 291, "multiobjective_problem": 293, "multiobjectivepso": [215, 248], "multiobjectivepsointegr": 277, "multiobjectivepsooptim": 209, "multiobjectivepsotun": 321, "multiobjectivetestproblem": 209, "multiobjectivetestresult": 209, "multiobjectivevalidationresult": 209, "multipl": [13, 17, 20, 22, 24, 25, 27, 28, 29, 30, 31, 32, 34, 37, 51, 52, 53, 55, 57, 58, 59, 62, 63, 65, 67, 69, 70, 71, 76, 78, 80, 83, 88, 95, 98, 100, 103, 104, 105, 106, 107, 109, 112, 114, 117, 119, 120, 122, 123, 127, 128, 133, 134, 135, 136, 140, 142, 145, 150, 151, 153, 155, 157, 162, 167, 169, 171, 178, 179, 182, 185, 187, 189, 193, 194, 197, 198, 199, 201, 202, 203, 209, 215, 216, 221, 223, 224, 230, 232, 234, 235, 237, 248, 249, 250, 253, 254, 255, 256, 257, 265, 271, 275, 277, 278, 283, 284, 287, 290, 291, 293, 297, 300, 303, 308, 315, 317, 318, 319, 321], "multiple_comparisons_correct": 310, "multipli": [35, 45, 53, 93, 118, 213, 225, 227, 231, 240, 272, 312], "multiprocess": [27, 148, 150, 155, 170, 202, 203, 215, 254, 280, 297, 317], "multisin": [45, 221], "multistag": 91, "multiswarm_upd": 293, "murrai": 310, "must": [3, 5, 8, 12, 13, 15, 17, 20, 22, 24, 35, 40, 44, 45, 49, 50, 52, 53, 56, 59, 62, 63, 67, 70, 73, 75, 76, 77, 78, 79, 82, 85, 86, 87, 93, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 114, 115, 116, 117, 119, 120, 125, 127, 128, 129, 131, 132, 133, 143, 146, 161, 163, 165, 166, 167, 170, 177, 183, 193, 196, 199, 201, 202, 203, 204, 205, 206, 208, 209, 216, 220, 221, 222, 223, 224, 227, 231, 232, 233, 234, 235, 249, 254, 255, 273, 275, 276, 277, 278, 279, 282, 283, 284, 285, 287, 290, 291, 293, 294, 297, 299, 300, 301, 308, 323], "mutabl": [65, 106, 117], "mutant": [44, 53], "mutat": [44, 51, 53, 162, 193, 202, 321], "mutation_r": 208, "mutationobserv": 143, "mutmut": 261, "mutual": 70, "mv": 92, "my": [30, 91, 122, 127, 140, 141, 142, 143, 303, 310], "my_config": [50, 128, 150], "my_control": 151, "my_controller_config": 108, "my_custom": 61, "my_custom_control": 132, "my_hil": 177, "my_novel_control": 320, "my_plan": 22, "my_result": 303, "my_smc_project": 108, "mycontrol": [61, 151], "mycustomcontrol": 127, "mycustomintegr": 61, "mydynam": [61, 86], "mypi": [10, 17, 40, 61, 81, 93, 301, 302], "myregistri": 91, "myresourcegroup": 91, "myst": [8, 13, 15, 16, 24, 25, 26, 33, 89, 121, 126, 141, 188, 232, 288], "m\u00b2": [72, 74, 131, 134, 164, 198, 220, 225, 240, 272], "m\u03b1": 310, "m\u1d40m": 205, "m\u2080": [134, 161, 198, 316, 317], "m\u2080\u1e8b\u00b2": 134, "m\u2081": [86, 134, 161, 198, 316, 317], "m\u2081g": 161, "m\u2081gl\u2081": 86, "m\u2081gl\u2081co": [134, 161], "m\u2081gl\u2081cos\u03b8\u2081": 86, "m\u2081l\u2081": 161, "m\u2081l\u2081\u00b2": [134, 161, 198], "m\u2082": [86, 134, 161, 198, 316, 317], "m\u2082g": [86, 134, 161], "m\u2082l\u2081": 161, "m\u2082l\u2081l\u2082": 161, "m\u2082l\u2081\u00b2": 161, "m\u2082l\u2082": 161, "m\u2082l\u2082\u00b2": [134, 161, 198], "n": [10, 12, 17, 24, 29, 35, 39, 41, 44, 49, 51, 52, 55, 57, 62, 65, 67, 68, 72, 74, 76, 77, 81, 82, 83, 85, 86, 90, 92, 97, 98, 103, 105, 107, 115, 117, 119, 120, 122, 127, 131, 132, 134, 135, 146, 147, 148, 149, 150, 151, 154, 161, 162, 164, 165, 166, 167, 168, 169, 177, 182, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 207, 208, 209, 213, 215, 216, 220, 223, 225, 227, 231, 232, 235, 240, 246, 247, 249, 252, 254, 258, 259, 260, 265, 272, 273, 277, 279, 281, 282, 283, 284, 286, 288, 289, 290, 293, 294, 295, 296, 298, 299, 300, 301, 308, 309, 310, 316, 317, 318, 320, 321], "n1": [164, 277, 313], "n2": [98, 164, 277, 313], "n3": [98, 164, 277, 313], "n4": [98, 164, 277, 313], "n5": [98, 164, 313], "n6": [98, 164, 313], "n7": 313, "n8": 313, "n95": [149, 320], "n_": [53, 216, 217, 232, 290], "n_a": 193, "n_b": 193, "n_block": 313, "n_bootstrap": 313, "n_c": [201, 279], "n_chunk": 171, "n_classic": 67, "n_combin": 171, "n_constr": 201, "n_dim": [215, 249], "n_dimens": [98, 202, 215, 248], "n_draw": 246, "n_eval": [53, 68, 199, 216, 224, 234, 253], "n_evalu": 114, "n_exce": 313, "n_expect": 133, "n_front": 291, "n_gain": [17, 20, 38, 49, 50, 52, 55, 56, 72, 76, 82, 86, 97, 98, 101, 103, 114, 115, 117, 168, 248, 274, 280, 321], "n_gen": 201, "n_hyperparameter_config": 310, "n_i": [246, 291], "n_iter": [17, 53, 76, 80, 92, 117, 250, 253, 254, 278, 279, 283, 290], "n_j": 291, "n_job": 283, "n_monte_carlo": 290, "n_obj": 201, "n_object": 248, "n_ops_per_thread": 65, "n_param": [61, 258], "n_paramet": 148, "n_particl": [19, 49, 52, 65, 67, 72, 73, 76, 77, 78, 80, 81, 84, 92, 98, 105, 106, 107, 117, 128, 130, 131, 132, 133, 146, 148, 158, 162, 167, 170, 199, 201, 202, 203, 208, 216, 224, 234, 246, 248, 249, 250, 251, 253, 254, 265, 278, 279, 283, 290, 291, 293, 300, 321], "n_particles_overrid": [51, 53, 193, 216], "n_point": 201, "n_popul": 201, "n_process": 254, "n_repetit": [310, 313], "n_req": 313, "n_resampl": 149, "n_restart": [148, 254], "n_run": [76, 136, 203, 215, 228, 236, 321], "n_sampl": [17, 63, 65, 112, 135, 201, 274, 278, 310, 313], "n_scenario": 313, "n_simul": 17, "n_solut": 248, "n_split": 310, "n_sta": 67, "n_state": [135, 248, 274], "n_step": [17, 61, 113, 136, 216, 287, 313], "n_success": 313, "n_successful_simul": 313, "n_thread": [65, 98, 104], "n_timestep": 135, "n_trial": [53, 61, 119, 135, 136, 149, 169, 171, 178, 191, 248, 283, 291, 310, 313], "n_trials_per_ev": 52, "n_trials_per_evalu": 52, "n_u": [216, 217], "n_uncertainty_draw": 250, "n_validation_tri": 53, "n_var": 201, "n_worker": 63, "nabla": [97, 156, 279, 293], "nadjust": 53, "nall": [92, 169], "name": [2, 10, 11, 13, 15, 20, 22, 24, 26, 29, 31, 34, 37, 39, 40, 44, 45, 49, 50, 51, 52, 56, 57, 62, 72, 73, 74, 75, 76, 82, 90, 91, 92, 93, 94, 98, 100, 102, 105, 106, 107, 108, 109, 114, 115, 116, 117, 122, 124, 126, 132, 135, 141, 147, 151, 154, 165, 166, 168, 169, 170, 171, 177, 187, 190, 196, 201, 203, 208, 209, 215, 216, 220, 224, 232, 234, 248, 251, 254, 257, 259, 261, 269, 273, 274, 275, 276, 278, 280, 282, 283, 285, 288, 293, 294, 295, 297, 301, 302, 313, 320, 321, 323], "name1": 313, "name2": 313, "namedtemporaryfil": 282, "namedtupl": [59, 61, 82, 220], "namespac": [92, 224, 234, 297], "nan": [22, 35, 49, 50, 51, 56, 59, 61, 65, 67, 75, 76, 78, 79, 81, 86, 98, 107, 114, 115, 116, 127, 134, 136, 177, 199, 203, 207, 208, 209, 213, 216, 224, 225, 234, 240, 242, 250, 254, 273, 277, 287, 290, 300, 318, 320], "nan_stat": 75, "nanalyz": 98, "nano": 92, "narendra2005st": 257, "narr": [32, 154], "narrow": [53, 78, 86, 133, 145, 148, 167, 170, 193, 197, 201, 248, 273, 275, 280, 290, 310, 313], "narrow_bound": 133, "naseva": [228, 236], "nat": 177, "nativ": [1, 17, 27, 28, 30, 31, 41, 122, 153, 154, 155, 171, 189], "natur": [8, 12, 17, 25, 26, 73, 79, 84, 98, 112, 161, 162, 163, 164, 192, 197, 201, 202, 204, 220, 222, 224, 230, 232, 233, 234, 237, 249, 251, 287, 288, 290, 294], "natural_freq": 249, "nautomat": 53, "nav": 31, "navig": [1, 11, 13, 19, 24, 26, 28, 30, 31, 32, 52, 57, 58, 59, 64, 69, 70, 72, 121, 125, 127, 138, 139, 143, 144, 145, 146, 154, 156, 192, 193, 201, 263, 266, 268, 269, 290, 315, 316, 317, 321], "nb": [63, 298], "nbaselin": 52, "nbatch": 280, "nbconvert": [1, 29], "nbest": [148, 215], "nbformat": 298, "nbootstrap": 149, "nbsphinx": [1, 14, 29, 30, 156], "nbsphinx_allow_error": 29, "nbsphinx_execut": 29, "nbsphinx_kernel_nam": 29, "nbsphinx_timeout": 29, "ncall": 298, "ncbi": [224, 228, 229, 234, 236, 238], "ncheck": 117, "ncohen": 178, "ncompar": 51, "nconfigur": 280, "nconstraint": 112, "ncontrol": [53, 164, 193, 280], "nconverg": 193, "ncp": 313, "ncreat": 51, "ncritic": 92, "ndarrai": [10, 19, 20, 35, 36, 38, 40, 41, 44, 52, 56, 71, 75, 76, 78, 82, 83, 84, 86, 94, 97, 98, 100, 101, 103, 105, 107, 114, 117, 119, 125, 127, 135, 196, 199, 203, 204, 209, 214, 216, 218, 220, 232, 242, 244, 246, 249, 252, 258, 275, 277, 291, 301, 313, 321], "ndata": 177, "ndemonstr": 72, "ndeprec": 72, "ndim": [41, 44, 78, 98, 199, 248], "ne": [39, 207, 254], "near_bound": 77, "near_surfac": 85, "nearest": 261, "nearli": [35, 151, 193, 205, 226, 227, 231, 239, 290], "nears": [224, 234], "necess": [44, 222, 233], "necessari": [44, 53, 91, 92, 108, 227, 230, 231, 237, 252, 287, 298], "necessarili": 193, "need": [10, 17, 22, 23, 26, 30, 31, 32, 33, 36, 38, 41, 44, 49, 51, 56, 58, 59, 61, 63, 65, 67, 71, 72, 77, 80, 81, 86, 89, 90, 92, 95, 98, 101, 104, 105, 111, 115, 116, 117, 121, 122, 125, 126, 127, 132, 133, 139, 141, 143, 145, 147, 151, 161, 162, 163, 165, 166, 171, 177, 183, 185, 187, 195, 197, 199, 200, 202, 205, 208, 216, 222, 224, 226, 227, 229, 230, 231, 232, 233, 234, 237, 238, 239, 242, 247, 252, 261, 265, 266, 268, 270, 272, 275, 276, 282, 284, 287, 290, 298, 308, 309, 310, 315, 321, 323], "needs_improv": 247, "needs_manual_review": 298, "neffect": 149, "neg": [20, 22, 45, 49, 50, 51, 72, 73, 76, 77, 79, 86, 98, 106, 114, 115, 116, 119, 125, 127, 131, 133, 163, 164, 170, 193, 196, 198, 199, 204, 205, 206, 208, 220, 227, 231, 248, 249, 251, 255, 258, 261, 273, 276, 279, 287, 290, 291, 298, 310, 313], "negative_dt": 75, "neglect": [161, 198, 221, 225, 228, 236, 240], "neglig": [50, 53, 65, 70, 118, 120, 178, 193, 197, 201, 208, 225, 240, 249, 290, 299, 309, 310, 313, 320], "neighbor": 246, "neighborhood": [79, 197, 205, 221, 246, 284], "neighbour": [223, 232, 235], "neighbourhood": [226, 239], "neither": 164, "nelder_mead": 9, "nenviron": 72, "neq": [75, 88, 156, 191, 198, 199, 201, 209, 245, 258, 261, 287, 299], "nest": [10, 24, 25, 33, 56, 65, 67, 94, 115, 117, 131, 150, 216, 310], "net": [2, 17, 27, 92, 222, 224, 233, 234, 290], "netstat": [91, 177, 185], "network": [1, 9, 10, 22, 27, 28, 34, 44, 62, 70, 90, 91, 92, 93, 119, 123, 128, 131, 150, 153, 155, 159, 170, 173, 174, 175, 202, 223, 230, 232, 235, 237, 242, 245, 256, 257, 259, 261, 290, 291], "network_connect": [93, 321], "network_interrupt": 93, "network_timeout": 185, "networkfirststrategi": 31, "networkrespons": 31, "neue": 159, "neumann": 258, "neural": [91, 123, 202, 227, 230, 231, 237, 242, 257, 259, 290, 291], "never": [24, 29, 33, 56, 61, 70, 77, 85, 86, 145, 167, 197, 205, 210, 282, 300, 301, 313], "nevertheless": [229, 238], "new": [1, 2, 5, 7, 8, 13, 15, 17, 20, 22, 24, 25, 26, 29, 30, 31, 32, 34, 36, 37, 42, 50, 52, 53, 56, 61, 63, 64, 65, 67, 70, 72, 73, 76, 80, 89, 90, 91, 95, 99, 103, 104, 106, 107, 108, 115, 116, 117, 120, 123, 127, 137, 139, 143, 145, 157, 162, 167, 168, 188, 189, 192, 193, 194, 196, 197, 199, 200, 202, 203, 205, 210, 213, 215, 218, 224, 232, 234, 248, 250, 256, 257, 258, 265, 266, 277, 278, 290, 297, 298, 300, 304, 306, 309, 320, 321], "new_adapt": 98, "new_adaptation_r": 98, "new_adaptive_config": 108, "new_bandwidth": 98, "new_baselin": [282, 283, 323], "new_class": 98, "new_classical_config": 108, "new_config": [73, 98], "new_config_data": 73, "new_control": [52, 56, 73, 321], "new_controller_config": 52, "new_controller_templ": 321, "new_ctrl": 51, "new_featur": [151, 315], "new_function": 282, "new_gain": [73, 98], "new_hybrid_config": 108, "new_k": 77, "new_kei": 72, "new_low": 112, "new_memori": 254, "new_nam": 98, "new_obj": 72, "new_object": 44, "new_optimization_workflow": 107, "new_param": [72, 98, 102, 116, 117], "new_paramet": 102, "new_path": 72, "new_percentag": 39, "new_required_paramet": 72, "new_settl": 98, "new_settling_tim": 98, "new_sta": 98, "new_sta_config": 108, "new_statu": 17, "new_time_in_slid": 77, "new_upp": 112, "new_valu": [41, 73], "new_vers": 98, "new_w": 247, "new_z": 85, "newcontrol": [51, 56], "newcontrollerconfig": 51, "newcontrollertempl": 321, "newer": [22, 146], "newkei": 92, "newlin": [94, 298, 318], "newsmcalgorithm": 194, "newsmcconfig": 194, "newton": [10, 94, 161, 185, 196, 258, 273, 275], "nexist": [201, 202, 209, 291, 293], "next": [2, 5, 7, 8, 10, 13, 15, 17, 21, 22, 23, 30, 38, 39, 51, 55, 59, 61, 64, 65, 73, 77, 78, 79, 80, 81, 84, 85, 92, 93, 95, 98, 108, 117, 120, 127, 139, 146, 147, 151, 161, 162, 163, 164, 165, 166, 167, 168, 178, 187, 188, 197, 199, 202, 205, 215, 218, 225, 240, 242, 245, 247, 261, 268, 287, 290, 291, 294, 295, 298, 299, 300, 301, 309, 321], "next_front": 291, "next_header_level": 24, "next_review_d": 255, "next_stat": [61, 63, 220, 278], "nextsibl": 143, "nfail": [108, 151], "nfinal": 117, "nginx": [90, 92], "nguyen": [223, 229, 235, 238], "nhypothesi": 178, "ni": 294, "nice": 145, "nich": [31, 202], "nightli": [14, 16, 89, 250], "nih": [224, 228, 229, 234, 236, 238], "nineteen": 84, "niniti": 51, "nise": 151, "nj": 205, "njit": [9, 10, 41, 85, 220], "nkei": 164, "nlm": [224, 228, 229, 234, 236, 238], "nmean": 148, "nmigrat": [72, 108], "nn": [225, 240], "no_converg": 321, "no_current_valid": 255, "no_dynamic_valid": 255, "no_false_alarm": 119, "no_implementation_valid": 255, "no_improvement_count": 202, "nobakht": [228, 236], "noced": 84, "node": [92, 174, 263, 264, 297, 298, 300, 321], "node_": 321, "node_id": 321, "nodetyp": 297, "nodevisitor": 297, "nohighlight": [139, 140, 141, 144], "nois": [22, 35, 36, 45, 62, 74, 77, 78, 79, 86, 99, 103, 112, 118, 120, 131, 136, 150, 162, 166, 170, 179, 183, 193, 194, 201, 202, 205, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 253, 259, 261, 268, 273, 282, 283, 290, 291, 294, 296, 310, 317], "noise_level": 112, "noise_std": 68, "noise_toler": 248, "noisefilt": 317, "noisi": [86, 118, 148, 162, 166, 177, 183, 201, 202, 232], "noisier": 118, "nomenclatur": 232, "nomin": [45, 68, 74, 77, 78, 93, 124, 127, 133, 135, 163, 169, 182, 191, 193, 205, 206, 216, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 247, 251, 253, 274, 285, 287, 290, 306, 310, 313, 321], "nominal_control": 274, "nominal_gain": [35, 274], "nominal_mass": 166, "nominal_perform": 75, "nominal_phase_margin": 209, "non": [1, 5, 11, 22, 24, 25, 26, 27, 31, 32, 33, 40, 45, 49, 51, 56, 61, 65, 68, 70, 72, 77, 78, 79, 84, 85, 86, 91, 98, 100, 107, 114, 119, 120, 122, 124, 127, 131, 133, 142, 147, 150, 155, 162, 166, 169, 170, 178, 190, 192, 195, 196, 199, 201, 202, 204, 205, 206, 208, 216, 218, 220, 222, 223, 224, 225, 227, 231, 232, 233, 234, 235, 240, 242, 245, 248, 254, 261, 273, 279, 284, 290, 291, 297, 298, 299, 301, 308, 309, 317], "nonconvex": 202, "none": [15, 19, 24, 31, 35, 36, 38, 39, 40, 50, 52, 53, 56, 61, 63, 65, 67, 70, 71, 72, 73, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 92, 93, 94, 97, 98, 100, 103, 106, 107, 114, 115, 117, 119, 120, 122, 129, 131, 132, 133, 143, 144, 148, 166, 168, 171, 178, 188, 191, 196, 199, 203, 204, 208, 209, 210, 211, 214, 216, 218, 220, 242, 248, 253, 254, 273, 277, 291, 297, 299, 301, 302, 310, 313, 315, 320, 321], "nonetheless": [230, 237], "nonetyp": [40, 300], "nonewprivileg": 92, "nonexistent_control": [51, 56], "nonlinear": [2, 22, 34, 35, 61, 63, 64, 65, 67, 72, 78, 82, 83, 86, 98, 101, 127, 129, 131, 146, 152, 161, 163, 164, 166, 187, 189, 192, 194, 198, 199, 201, 202, 203, 204, 207, 220, 221, 224, 226, 227, 231, 232, 234, 239, 245, 249, 257, 265, 279, 282, 283, 286, 287, 288, 290, 295, 303, 310, 316, 317, 320], "nonlinear_state_spac": [294, 295], "nonloc": 248, "nonneg_damp": 78, "nonparametr": 199, "nonsingular": [224, 234], "nonstiff": 290, "nonzero_requir": 207, "nopasswd": 92, "noprofil": 70, "noptim": [51, 52, 248, 280], "nopython": [17, 63, 193, 198, 203, 248], "nor": 164, "norepli": [24, 39, 70, 258, 282, 283, 284, 323], "norm": [13, 35, 75, 78, 79, 98, 112, 118, 119, 149, 170, 193, 200, 202, 209, 215, 216, 222, 223, 227, 231, 233, 235, 250, 254, 283, 285, 287, 291, 306, 313], "norm_du": 19, "norm_is": 19, "norm_sigma": 19, "norm_u": 19, "normal": [16, 25, 40, 44, 51, 52, 56, 57, 58, 61, 65, 67, 68, 72, 76, 79, 80, 81, 86, 90, 100, 103, 107, 109, 111, 113, 114, 115, 117, 118, 127, 133, 135, 136, 146, 148, 149, 163, 164, 167, 169, 171, 172, 178, 187, 188, 193, 195, 201, 208, 213, 215, 216, 224, 234, 248, 254, 261, 274, 282, 284, 291, 298, 300, 301, 303, 308], "normal_load": 93, "normal_oper": 119, "normalis": [19, 45, 53, 224, 230, 232, 234, 237], "normality_ok": 313, "normality_p_valu": 248, "normality_reject": 310, "normality_test": [310, 313], "normalize_parameter_typ": 109, "normalized_gain": 113, "normalized_metr": 107, "normalized_metric\u1d62": 310, "normalized_rang": 290, "northwestern": [225, 240, 290], "nosec": 44, "not_applic": 98, "not_includ": 24, "not_start": [53, 104], "notabl": [95, 139, 222, 233], "notat": [11, 12, 13, 16, 19, 55, 57, 58, 71, 89, 122, 124, 127, 188, 192, 208, 242, 243, 246, 286, 288, 295, 297, 309, 318], "notation_and_convent": 286, "notation_guid": [125, 126, 257], "note": [0, 2, 4, 5, 8, 10, 12, 15, 17, 18, 23, 24, 25, 26, 30, 31, 32, 44, 51, 52, 55, 56, 58, 59, 61, 65, 69, 74, 76, 77, 79, 83, 84, 86, 95, 98, 107, 118, 120, 121, 122, 123, 125, 127, 132, 140, 142, 145, 146, 155, 156, 161, 163, 164, 165, 170, 171, 177, 182, 192, 198, 210, 212, 213, 214, 216, 223, 225, 235, 240, 253, 266, 270, 277, 281, 284, 285, 290, 294, 295, 296, 297, 298, 299, 301, 304, 308, 310, 313, 315, 319, 320], "notebook": [1, 12, 14, 19, 27, 30, 31, 59, 127, 156, 165, 223, 235, 260, 298, 309, 316, 317], "notebook_path": 298, "noth": 270, "notic": [5, 15, 65, 70, 146, 163, 164, 225, 226, 239, 240, 263, 310, 315], "notif": [1, 17, 31, 72, 98, 242, 261], "notifempti": 92, "notifi": [17, 31, 72, 111], "notify_hardwar": 185, "notimplementederror": [39, 321], "notin": 261, "notransl": [140, 141], "novel": [12, 127, 129, 168, 169, 224, 234, 320], "novel_control": 320, "novelcontrol": 320, "novemb": [273, 277, 280], "now": [1, 12, 17, 22, 24, 25, 26, 27, 29, 31, 39, 40, 64, 73, 84, 92, 93, 95, 102, 108, 138, 146, 154, 165, 166, 167, 168, 177, 193, 194, 221, 242, 254, 255, 275, 280, 297, 300, 301], "np": [10, 19, 20, 29, 35, 36, 37, 38, 39, 40, 41, 44, 50, 52, 55, 56, 65, 67, 71, 73, 75, 76, 77, 78, 81, 82, 84, 85, 86, 92, 93, 94, 97, 98, 100, 103, 105, 107, 108, 114, 115, 117, 118, 119, 120, 125, 127, 128, 132, 133, 134, 135, 136, 148, 149, 150, 151, 154, 155, 164, 166, 167, 169, 170, 171, 177, 178, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 213, 214, 216, 217, 219, 220, 224, 226, 232, 234, 239, 242, 246, 249, 253, 254, 255, 256, 258, 261, 275, 277, 280, 283, 287, 290, 300, 301, 303, 310, 313, 318, 320, 321], "nperform": [52, 98, 276, 277], "nplot": [61, 178], "npm": [31, 139, 267, 268, 269, 271], "npower": 178, "nproce": 98, "nproduct": 92, "npt": 10, "npy": [53, 253], "npython": 115, "npz": 177, "nqualiti": 52, "nrecommend": 53, "nrestart": 148, "nresult": 178, "nrobust": 151, "nrun": [52, 178], "nscenario": [112, 169], "nsga": [248, 250, 291], "nsga2": 201, "nspeed": 52, "nsta": [149, 276], "nsuccess": 208, "ntest": [51, 115], "ntime": 177, "ntnu": [222, 233], "nto": 117, "nu": [84, 225, 240], "nuclear": 144, "nul": 70, "null": [78, 90, 92, 118, 120, 142, 144, 169, 193, 254, 298, 310, 313, 318, 320, 321], "nullifi": 210, "num_fd": 111, "num_jitter_measur": 209, "num_pso_tri": 209, "num_run": 320, "num_step": 73, "num_thread": 111, "num_timing_measur": 209, "num_var": 201, "num_work": 61, "numba": [2, 15, 17, 22, 24, 38, 53, 55, 63, 92, 103, 104, 117, 135, 146, 171, 189, 193, 195, 198, 200, 203, 217, 219, 242, 248, 250, 254, 259, 301, 316, 317], "numba_cach": 92, "numba_cache_dir": 92, "numba_num_thread": [92, 254], "numba_util": 317, "numbautil": 317, "number": [1, 8, 10, 12, 13, 17, 19, 20, 22, 23, 27, 29, 31, 39, 45, 49, 50, 52, 53, 56, 57, 58, 59, 61, 62, 65, 67, 68, 69, 73, 76, 79, 82, 95, 97, 98, 100, 105, 106, 108, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 131, 132, 133, 136, 138, 140, 151, 154, 159, 160, 162, 164, 166, 167, 168, 170, 177, 185, 187, 193, 196, 198, 200, 205, 208, 209, 212, 213, 214, 216, 220, 222, 223, 224, 225, 226, 229, 232, 233, 234, 235, 238, 239, 240, 246, 248, 250, 253, 254, 256, 258, 266, 268, 273, 275, 279, 282, 283, 284, 286, 287, 288, 289, 293, 297, 298, 308, 309, 310, 321], "numbered_cit": 297, "numer": [2, 7, 8, 15, 17, 22, 26, 29, 36, 39, 44, 45, 49, 51, 52, 55, 56, 57, 58, 62, 64, 65, 67, 72, 73, 75, 76, 78, 81, 82, 86, 92, 93, 98, 100, 101, 103, 104, 105, 106, 112, 114, 115, 116, 117, 121, 122, 123, 124, 126, 127, 135, 136, 146, 147, 154, 164, 168, 172, 187, 189, 192, 196, 198, 201, 203, 205, 206, 208, 216, 219, 221, 224, 225, 227, 230, 231, 232, 234, 237, 240, 242, 243, 244, 245, 248, 250, 251, 255, 256, 265, 273, 275, 276, 277, 282, 285, 286, 291, 295, 300, 301, 309, 317, 318, 320], "numeric_param": 117, "numerical_accuraci": 209, "numerical_analysi": 75, "numerical_drift": 279, "numerical_integration_guid": 200, "numerical_integration_theori": [193, 220], "numerical_method": 216, "numerical_precision_context": 75, "numerical_result": 255, "numerical_robust": [75, 282, 283, 284], "numerical_st": [9, 61, 63, 75, 82, 98, 101, 193, 207, 209, 212, 282, 283, 284, 290, 321], "numerical_stability_document": 291, "numerical_stability_guid": 212, "numerical_stability_method": [7, 55, 59, 65, 122, 126, 286, 318], "numerical_stability_performance_report": [65, 67], "numerical_stability_safe_oper": 212, "numerical_toler": 75, "numerical_valid": 255, "numericalderiv": 35, "numericalhealthmonitor": 35, "numericalinstabilityerror": [22, 146, 170, 213, 290], "numericalintegr": 209, "numerically_st": 209, "numericalprecisionscenarioresult": 75, "numericalprecisiontestcas": 75, "numericalprecisiontestresult": 75, "numericalprecisiontestsuit": 75, "numericalstabilitymonitor": [213, 220, 290], "numericalstabilityresult": 209, "numericalstabilityvalid": 209, "numerictyp": 82, "numpi": [1, 2, 10, 15, 17, 19, 22, 24, 27, 29, 30, 31, 35, 39, 40, 41, 42, 49, 50, 52, 53, 55, 56, 61, 63, 65, 67, 68, 71, 72, 73, 76, 82, 83, 89, 91, 92, 94, 98, 101, 103, 107, 114, 115, 116, 117, 118, 123, 124, 128, 129, 132, 133, 134, 135, 146, 147, 148, 149, 150, 151, 153, 154, 156, 164, 165, 166, 167, 168, 169, 170, 171, 177, 178, 187, 188, 189, 193, 203, 209, 210, 215, 216, 217, 218, 220, 224, 230, 234, 237, 242, 244, 248, 250, 253, 254, 259, 277, 278, 280, 286, 301, 303, 313, 316, 317, 318, 320, 321], "numpy_vers": 115, "numpydoc": 10, "numref": 13, "nvalid": [61, 98, 117, 280], "nverifi": 51, "nvidia": 91, "nvisual": 52, "nvme": 92, "nwarn": 53, "nwelch": [149, 320], "nx": 84, "ny": 205, "nyquist": [73, 196], "nyquist_dt": 73, "nyquist_limit": 98, "n\u00b2": [84, 162, 320, 321], "n\u00b3": [78, 84, 85, 86, 197], "n\u00f8rsett": [84, 290], "n\u2081": [97, 310], "n\u2082": [97, 310], "n\u2096": 310, "o": [8, 10, 17, 27, 35, 41, 53, 61, 67, 70, 72, 74, 77, 78, 81, 84, 85, 86, 90, 92, 93, 97, 98, 114, 115, 117, 118, 119, 124, 131, 142, 144, 145, 148, 155, 161, 162, 166, 170, 177, 182, 193, 195, 196, 197, 199, 200, 205, 210, 211, 215, 216, 220, 228, 230, 236, 237, 245, 246, 247, 250, 252, 253, 254, 280, 282, 283, 284, 290, 291, 293, 298, 299, 309, 310, 320], "oat": 310, "obei": [226, 239], "obj": [72, 76, 84, 112, 277, 294, 301], "obj_i": 112, "obj_j": 112, "obj_m": 291, "obj_nam": 112, "obj_rang": 291, "obj_scor": 112, "obj_weight": 112, "object": [5, 9, 16, 19, 20, 22, 24, 25, 26, 30, 31, 32, 33, 36, 38, 40, 44, 45, 49, 50, 51, 52, 55, 56, 57, 58, 60, 65, 68, 71, 72, 75, 76, 77, 80, 82, 83, 84, 86, 97, 98, 103, 105, 109, 111, 112, 113, 115, 117, 123, 124, 125, 127, 130, 132, 134, 138, 142, 143, 148, 156, 161, 163, 164, 167, 168, 171, 172, 173, 180, 181, 182, 188, 189, 193, 196, 197, 199, 202, 205, 208, 209, 215, 216, 222, 224, 227, 230, 231, 232, 233, 234, 237, 241, 242, 244, 246, 247, 249, 250, 254, 256, 257, 259, 265, 273, 274, 275, 277, 280, 284, 287, 288, 289, 294, 297, 301, 304, 309, 310, 317, 319, 322], "objective_approach_for_non": [222, 233], "objective_func": [215, 248], "objective_funct": [209, 215, 277, 293], "objective_function_smc": 215, "objective_margin": 75, "objective_nam": 248, "objective_perform": 112, "objective_rang": 248, "objective_scor": 112, "objective_test_scenario": 75, "objective_weight": [201, 202], "objectivefunc": 317, "objectives_met": 75, "objectives_valu": 277, "objectives_zdt1": 291, "objectiveverificationresult": 75, "objects_collect": 98, "obscur": 178, "observ": [2, 12, 17, 62, 63, 65, 72, 77, 81, 111, 120, 123, 146, 148, 150, 152, 162, 163, 164, 165, 166, 168, 174, 177, 182, 187, 192, 194, 197, 199, 202, 204, 205, 222, 224, 227, 229, 231, 232, 233, 234, 238, 249, 257, 259, 265, 288, 295, 300, 303, 310, 317, 318, 321], "observablecontrol": 17, "obtain": [15, 53, 65, 93, 222, 224, 230, 232, 233, 234, 237, 299, 310], "obviou": [44, 101, 119, 170, 178, 310], "occasion": [65, 228, 236], "occur": [17, 62, 68, 86, 166, 196, 225, 226, 229, 232, 238, 239, 240, 249, 294, 300, 306], "occurr": [17, 165], "octob": [12, 28, 64, 128, 130, 131, 132, 133, 134, 135, 136, 148, 149, 150, 151, 160, 161, 162, 163, 170, 189, 216, 220], "od": [2, 8, 69, 84, 150, 156, 187, 200, 220, 230, 237, 256, 290, 317], "odot": [19, 193, 246], "off": [1, 17, 22, 35, 36, 52, 55, 59, 61, 65, 77, 78, 84, 86, 92, 120, 127, 148, 156, 164, 165, 166, 167, 169, 182, 183, 184, 192, 193, 195, 196, 201, 202, 205, 206, 209, 216, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 233, 235, 237, 238, 239, 240, 246, 250, 253, 260, 265, 280, 284, 290, 293, 294, 297, 298, 310, 313], "offend": 71, "offer": [67, 84, 209, 222, 223, 224, 226, 232, 233, 234, 235, 239], "offic": [191, 261], "offici": [12, 84, 159, 267, 268, 271], "offlin": [1, 27, 62, 126, 189, 232], "offset": [118, 133, 135, 310], "often": [67, 91, 118, 170, 222, 226, 233, 239, 246, 253, 298], "ohiolink": [222, 233], "ohta": 8, "ok": [25, 26, 31, 51, 92, 111, 119, 120, 124, 144, 146, 148, 163, 164, 182, 254, 260, 267, 268, 271, 285, 306, 323], "okstatethesis2013": 55, "old": [14, 15, 17, 20, 31, 65, 67, 70, 72, 73, 80, 92, 98, 99, 105, 106, 108, 117, 141, 144, 145, 196, 213, 254, 265, 275, 290], "old_adapt": 98, "old_adaptation_r": 98, "old_adaptive_config": [99, 108], "old_bandwidth": 98, "old_class": 98, "old_classical_config": [99, 108], "old_config": [72, 73, 98, 105, 106], "old_control": [73, 210], "old_data": 63, "old_gain": 98, "old_handl": 112, "old_hybrid_config": [99, 108], "old_nam": 98, "old_param": [72, 98, 102, 116, 117], "old_paramet": [98, 102], "old_path": 72, "old_settl": 98, "old_settling_tim": 98, "old_sta": 98, "old_sta_config": [99, 108], "old_valu": [73, 102], "older": [63, 98, 145, 146, 196], "older_fit": [104, 112], "oldest": 98, "oldest_kei": 98, "oliph": 8, "omega": [201, 202, 215, 258, 291, 293, 310], "omega1": [30, 258, 287], "omega2": [30, 258, 287], "omega_": [201, 202, 215, 294, 296], "omega_0": 290, "omega_c": 290, "omega_i": 202, "omega_max": 202, "omega_min": 202, "omega_n": [112, 220], "omega_n1": 73, "omega_n2": 73, "omega_valu": 36, "omit": [22, 39, 74, 166], "omnibu": [308, 309], "omp": 254, "omp_num_thread": 92, "on_health_chang": 17, "on_sliding_surfac": 75, "onboard": [25, 266], "onc": [17, 52, 61, 86, 89, 97, 116, 117, 119, 120, 163, 164, 191, 194, 198, 199, 203, 204, 205, 222, 223, 225, 226, 232, 233, 235, 239, 240, 248, 249, 276, 288, 297, 299, 310], "one": [5, 10, 17, 22, 23, 32, 33, 45, 53, 58, 61, 70, 98, 104, 107, 118, 132, 133, 144, 145, 150, 157, 161, 163, 164, 166, 170, 177, 198, 205, 220, 221, 222, 226, 227, 228, 231, 232, 233, 236, 239, 265, 266, 275, 277, 278, 290, 291, 293, 306, 308, 309, 310], "one_sampl": 310, "onelin": 70, "ones": [17, 34, 49, 76, 98, 118, 145, 209, 210, 232, 249, 254, 300, 321], "ongo": [24, 93, 122, 243], "onli": [1, 8, 10, 12, 14, 15, 17, 19, 22, 23, 24, 28, 29, 30, 31, 34, 38, 40, 44, 45, 51, 52, 55, 56, 59, 61, 65, 67, 70, 75, 79, 80, 81, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 98, 100, 103, 105, 106, 111, 116, 117, 119, 120, 127, 128, 131, 132, 134, 144, 145, 146, 148, 153, 154, 155, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 170, 182, 186, 189, 196, 197, 198, 199, 201, 202, 203, 204, 205, 211, 216, 218, 220, 222, 226, 227, 230, 231, 232, 233, 237, 239, 243, 245, 248, 249, 254, 261, 266, 275, 276, 281, 285, 287, 290, 295, 297, 298, 299, 300, 306, 308, 310, 315, 323], "onlin": [1, 13, 20, 22, 31, 36, 40, 49, 50, 51, 62, 64, 77, 80, 82, 84, 98, 99, 101, 103, 107, 122, 131, 132, 146, 159, 163, 177, 183, 189, 197, 199, 201, 205, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 249, 250, 253, 265, 270, 290, 301, 309, 321], "online_learn": 321, "onlogon": 70, "onto": [82, 163, 199, 222, 223, 226, 230, 232, 233, 235, 237, 239, 279], "oom": 210, "oop": 59, "op": [17, 41, 81, 84, 92, 197, 278], "op1": 221, "opac": [140, 141, 143, 144, 267, 269], "open": [2, 15, 17, 22, 27, 28, 30, 31, 36, 39, 51, 53, 72, 73, 92, 98, 102, 104, 107, 117, 124, 126, 127, 128, 129, 131, 133, 141, 142, 144, 145, 148, 149, 150, 153, 155, 159, 165, 166, 167, 168, 169, 170, 171, 183, 208, 216, 220, 232, 252, 253, 254, 255, 257, 259, 265, 270, 271, 280, 282, 298, 300, 303, 315, 323], "open_fil": 111, "openbla": 254, "openblas_num_thread": 92, "opengraph": [16, 89, 188], "openmp": 254, "openrav": 257, "opensourc": 15, "openssl": 92, "oper": [1, 8, 17, 19, 22, 27, 29, 31, 33, 34, 37, 38, 40, 41, 44, 45, 52, 53, 55, 62, 64, 65, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 88, 90, 93, 98, 99, 105, 106, 108, 115, 117, 118, 127, 144, 145, 146, 147, 154, 155, 158, 162, 168, 169, 171, 175, 177, 181, 182, 185, 190, 193, 197, 198, 199, 202, 203, 204, 205, 207, 209, 211, 214, 217, 222, 223, 224, 226, 228, 229, 233, 234, 235, 236, 238, 239, 241, 242, 244, 246, 247, 248, 249, 250, 252, 253, 254, 273, 275, 276, 279, 294, 296, 300, 301, 310, 316, 317, 318], "operation": 251, "operation_nam": [104, 117, 209], "operation_result": 209, "operational_limit": 119, "operational_monitor": 251, "opportun": [19, 38, 53, 55, 58, 120, 121, 122, 218, 255, 297], "oppos": [86, 225, 240], "opposit": [86, 310], "opt": [93, 278], "opt_config": 73, "opt_result": 98, "optim": [0, 1, 6, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 26, 27, 30, 31, 32, 33, 38, 39, 41, 45, 46, 48, 54, 55, 59, 66, 67, 68, 72, 73, 75, 78, 79, 82, 83, 86, 87, 88, 89, 90, 91, 93, 95, 98, 99, 106, 108, 110, 114, 115, 117, 119, 120, 122, 125, 129, 131, 134, 138, 139, 142, 146, 147, 149, 150, 152, 153, 154, 155, 157, 160, 162, 163, 164, 165, 166, 169, 174, 177, 185, 187, 188, 190, 192, 194, 195, 196, 198, 200, 204, 205, 206, 207, 208, 210, 218, 219, 223, 230, 232, 235, 237, 241, 242, 244, 255, 257, 261, 262, 263, 266, 273, 277, 282, 286, 287, 294, 295, 297, 298, 302, 305, 309, 313, 316, 317, 319, 320, 322, 323], "optima": [160, 184, 223, 235, 246, 247], "optimal_c1": 247, "optimal_c2": 247, "optimal_control": [61, 76], "optimal_cost": [278, 279], "optimal_gain": [38, 76, 114, 278, 279], "optimal_inaccur": 84, "optimal_param": 84, "optimal_persist": 119, "optimal_pso_config": 133, "optimal_rang": 247, "optimal_stabilizer_gain": 86, "optimal_valu": 247, "optimalcontrol": 317, "optimaldesign": 294, "optimalparam": 317, "optimis": [19, 38, 45, 51, 52, 57, 58, 61, 74, 84, 86, 199, 216, 217, 222, 223, 232, 233, 235, 275], "optimist": 310, "optimization_": 9, "optimization_benchmark_fix": 190, "optimization_bound": [93, 98], "optimization_callback": 253, "optimization_comparison": 253, "optimization_config": [113, 280], "optimization_configur": 280, "optimization_cost": 280, "optimization_duration_second": 280, "optimization_execut": 252, "optimization_failur": 252, "optimization_go": 280, "optimization_health": 98, "optimization_histori": [52, 98, 104, 107], "optimization_info": 253, "optimization_iter": 216, "optimization_landscape_analysi": 202, "optimization_metadata": 278, "optimization_module_api_refer": [7, 52, 58, 59, 121], "optimization_object": 104, "optimization_param": 133, "optimization_pipeline_summari": 53, "optimization_qu": 252, "optimization_report": [53, 98, 253], "optimization_result": [53, 98, 254, 259, 276, 277, 283], "optimization_run": 254, "optimization_simul": 304, "optimization_start_tim": 104, "optimization_stat": 280, "optimization_success": 254, "optimization_summari": 98, "optimization_task": 252, "optimization_theori": 39, "optimization_tim": [53, 93, 247, 254, 276, 280], "optimization_time_second": 247, "optimization_timestamp": 280, "optimization_tip": 253, "optimization_typ": 113, "optimizationmonitor": 277, "optimizationobject": [52, 57, 58], "optimizationproblem": 215, "optimizationprofil": 253, "optimizationprogress": 248, "optimizationrequest": 252, "optimizationresult": [53, 57, 58, 215, 277], "optimizationresultsrecoveri": [25, 254], "optimize_adaptive_smc": [275, 276, 277], "optimize_all_control": [253, 321], "optimize_bounds_for_control": [52, 53, 57], "optimize_chattering_focus": 21, "optimize_chattering_reduct": 304, "optimize_classical_smc": [275, 276, 277, 283], "optimize_control": [51, 56, 133, 253, 276, 277], "optimize_controller_comprehens": 277, "optimize_controller_cr": 116, "optimize_controller_gain": 49, "optimize_controller_with_pso": [112, 313], "optimize_custom_control": 76, "optimize_fdi_perform": 119, "optimize_gain": [94, 279], "optimize_hyperparamet": [52, 57, 58], "optimize_pareto_front": 321, "optimize_simulation_perform": 254, "optimize_single_control": [112, 280], "optimize_smc_controller_pso": 104, "optimize_smc_with_factori": 107, "optimize_sta_smc": [275, 276, 277], "optimize_stag": 104, "optimize_with_adapt": 112, "optimize_with_cach": 280, "optimize_with_config": [253, 254], "optimize_with_memory_manag": 254, "optimized_bound": 58, "optimized_classical_custom": 182, "optimized_classical_gain": 167, "optimized_classical_result": 167, "optimized_control": [51, 53, 76, 98, 105, 107, 133, 276, 277], "optimized_cost": 51, "optimized_gain": [17, 49, 51, 53, 56, 91, 98, 105, 106, 107, 116, 128, 133, 148, 150, 167, 170, 182, 183, 248, 251, 253, 280, 283, 321], "optimized_gains_class": 216, "optimized_gains_classical_smc": 53, "optimized_gains_classical_smc_phase53": 182, "optimized_gains_sta_smc_phase53": 183, "optimized_hybrid_gain": 301, "optimized_pso_workflow": 248, "optimized_result": [170, 253], "optimized_sta_config": 273, "optimized_sta_gain": 183, "optimized_threshold": 255, "optimized_valu": 52, "optimizedcontrollerfactori": 117, "optimizedpsoconfig": 254, "optimizedpsoworkflow": 117, "optimum": [125, 162, 193, 201, 202, 246, 247, 282, 283, 284, 290, 293], "option": [1, 7, 10, 13, 19, 22, 24, 25, 27, 29, 32, 34, 36, 38, 39, 45, 50, 51, 52, 53, 55, 56, 59, 61, 62, 63, 67, 68, 71, 73, 76, 77, 78, 80, 82, 83, 84, 85, 86, 89, 94, 95, 98, 99, 100, 103, 105, 107, 113, 115, 117, 118, 119, 120, 122, 126, 127, 129, 131, 132, 133, 137, 138, 139, 141, 144, 145, 146, 147, 148, 150, 154, 155, 160, 167, 171, 185, 188, 193, 195, 196, 199, 202, 203, 205, 210, 211, 216, 220, 223, 224, 226, 227, 231, 232, 234, 235, 239, 250, 265, 269, 270, 273, 274, 275, 277, 280, 283, 285, 290, 293, 298, 299, 300, 306, 308, 309, 315, 321], "option_spec": 30, "optional_cit": 299, "optional_colon": 299, "optional_dep": 115, "optional_method": 76, "optional_packag": [98, 117], "optional_param": 109, "optional_titl": 299, "options_overrid": [53, 193, 216], "optuna": [15, 24, 283, 284], "orang": [52, 164, 169, 178, 227, 229, 231, 238, 254, 263], "orb": 268, "orbit": [1, 30, 129, 152, 153, 156, 200], "orchestr": [9, 24, 36, 39, 40, 52, 58, 63, 64, 65, 67, 75, 77, 78, 81, 85, 92, 95, 127, 135, 199, 213, 216, 224, 234, 241, 242, 244, 245, 250, 252, 261, 282, 284, 300, 301, 309, 310, 313, 316, 321, 323], "orchestrationresult": 252, "orchestrator_execut": 61, "orcid": 320, "ord": [61, 82], "order": [1, 2, 10, 22, 36, 40, 45, 49, 51, 52, 53, 55, 58, 59, 62, 63, 72, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 91, 93, 97, 98, 100, 103, 109, 116, 117, 121, 122, 125, 132, 146, 161, 163, 172, 177, 183, 185, 187, 191, 192, 194, 196, 197, 198, 199, 201, 206, 207, 208, 216, 217, 220, 221, 222, 223, 226, 227, 231, 232, 233, 235, 239, 246, 249, 251, 253, 256, 257, 259, 274, 287, 294, 296, 297, 298, 303, 309, 310], "ordin": 310, "ordinari": [84, 200, 228, 232, 236, 290], "org": [8, 13, 15, 17, 44, 84, 91, 123, 146, 169, 222, 224, 225, 228, 233, 234, 236, 240, 297, 315, 320], "organ": [6, 11, 13, 19, 22, 32, 44, 57, 58, 59, 61, 69, 79, 93, 94, 95, 98, 114, 123, 131, 151, 165, 169, 170, 187, 190, 202, 207, 232, 242, 247, 256, 257, 265, 266, 271, 284], "organis": [226, 239], "organiz": 218, "orient": [31, 52, 80, 95, 127, 128, 129, 146, 149, 170, 189, 297], "orig_low": 112, "orig_upp": 112, "origin": [0, 2, 7, 15, 16, 17, 21, 24, 31, 39, 53, 57, 61, 65, 69, 70, 72, 74, 78, 79, 94, 102, 107, 108, 121, 122, 125, 127, 155, 169, 187, 188, 191, 195, 197, 202, 205, 213, 225, 226, 230, 232, 237, 239, 240, 249, 251, 256, 257, 266, 289, 290, 294, 295, 298, 299, 306, 309, 315, 317, 320], "original_bound": 112, "original_compute_control": 300, "original_config": 108, "original_error": 63, "original_fil": [102, 108], "original_lambda1_max": 252, "original_lambda2_max": 252, "orlov": [125, 226, 239], "orphan": 14, "orthogon": 35, "oscil": [35, 40, 53, 72, 76, 78, 81, 82, 84, 85, 86, 99, 118, 119, 120, 125, 129, 146, 152, 162, 163, 164, 165, 166, 167, 170, 183, 193, 195, 199, 201, 202, 216, 222, 223, 226, 227, 230, 231, 232, 233, 235, 237, 239, 246, 253, 287, 290, 291, 303, 321], "oscillatori": [78, 81, 148, 164, 166, 167, 205, 226, 239, 290, 313], "osman": [223, 235], "osorio": [2, 81, 85, 121, 125, 199, 205, 206, 287], "osqp": 84, "osu1444243591": [222, 233], "other": [8, 17, 19, 20, 24, 25, 32, 33, 41, 44, 45, 51, 53, 61, 65, 67, 72, 74, 76, 85, 88, 89, 98, 109, 117, 127, 135, 138, 142, 144, 145, 146, 147, 149, 150, 161, 162, 167, 170, 201, 202, 210, 222, 223, 224, 225, 227, 229, 231, 232, 233, 234, 235, 237, 238, 240, 243, 258, 273, 301, 309, 310, 313], "otherwis": [19, 49, 76, 81, 88, 104, 105, 108, 112, 191, 193, 205, 224, 234, 245, 246, 261, 290, 291, 293, 298], "our": [12, 15, 41, 146, 222, 225, 226, 232, 233, 239, 240, 256, 258, 270, 298], "out": [3, 19, 27, 32, 35, 40, 45, 53, 62, 92, 98, 112, 115, 117, 120, 135, 140, 141, 142, 147, 177, 185, 201, 208, 221, 222, 233, 251, 254, 263, 266, 268, 270, 291, 302, 309, 310], "out_of_bounds_gain": 114, "out_of_scop": 300, "outag": 173, "outcom": [31, 76, 88, 127, 165, 237, 255, 259, 280, 310], "outdat": [65, 117, 125], "outdated_data": 255, "outer": [193, 297, 309, 310], "outgo": 92, "outlier": [120, 178, 224, 228, 234, 236, 310, 320], "outlin": [30, 31, 145, 202, 229, 230, 237, 238], "outlook": 247, "outperform": [160, 291, 320], "output": [5, 10, 12, 13, 17, 19, 21, 22, 23, 26, 28, 29, 30, 31, 32, 34, 40, 51, 52, 56, 57, 61, 62, 63, 65, 67, 69, 70, 76, 77, 78, 81, 82, 84, 85, 86, 87, 88, 91, 92, 97, 98, 101, 102, 103, 105, 106, 107, 108, 114, 116, 118, 121, 122, 124, 125, 126, 127, 136, 143, 144, 146, 154, 155, 159, 163, 164, 166, 167, 168, 169, 170, 171, 177, 178, 182, 183, 185, 187, 188, 192, 194, 195, 199, 202, 203, 204, 205, 206, 221, 222, 224, 226, 230, 233, 234, 237, 239, 241, 242, 249, 252, 253, 254, 255, 261, 275, 276, 278, 280, 282, 283, 284, 287, 291, 296, 297, 301, 302, 309, 310, 317, 318, 320, 321], "output_dir": 53, "output_equ": 295, "output_fil": [72, 102, 117, 321], "output_path": [102, 104, 280], "output_valu": 207, "outputeq": 317, "outsid": [24, 26, 33, 40, 45, 61, 70, 73, 76, 77, 78, 91, 107, 109, 114, 117, 163, 165, 195, 199, 205, 208, 223, 224, 226, 227, 228, 231, 234, 235, 236, 239, 242, 251, 253, 254, 260, 261, 273, 287, 290, 294, 301], "outstand": [55, 165, 242, 284], "over": [12, 17, 19, 22, 24, 31, 35, 39, 43, 45, 51, 53, 59, 61, 64, 65, 67, 70, 74, 77, 78, 84, 87, 92, 93, 98, 107, 112, 118, 119, 120, 121, 124, 126, 133, 146, 148, 156, 157, 162, 163, 164, 166, 167, 177, 185, 191, 193, 195, 200, 201, 202, 213, 216, 220, 222, 223, 224, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 248, 251, 255, 259, 261, 263, 265, 284, 285, 290, 291, 293, 310, 313, 319, 321], "overal": [7, 9, 14, 15, 19, 24, 25, 26, 37, 38, 39, 42, 50, 57, 59, 67, 86, 88, 92, 93, 98, 102, 108, 111, 112, 113, 115, 118, 119, 120, 124, 125, 127, 129, 132, 146, 151, 162, 163, 165, 166, 185, 190, 194, 197, 199, 201, 208, 209, 215, 218, 242, 243, 245, 253, 254, 255, 259, 266, 280, 283, 290, 298, 303, 308, 310, 318, 321], "overall_chattering_accept": 209, "overall_compliance_scor": 255, "overall_condit": 209, "overall_conditioning_accept": 75, "overall_consist": 75, "overall_convergence_rate_verifi": 75, "overall_convergence_valid": 209, "overall_coverag": [39, 242, 255], "overall_disturbance_reject": 75, "overall_health": 255, "overall_healthi": 321, "overall_integration_success": 75, "overall_numerical_st": 75, "overall_objectives_met": 75, "overall_pass": [39, 251, 252], "overall_precis": 298, "overall_rank": 112, "overall_reach": [75, 209], "overall_risk": 255, "overall_risk_level": 255, "overall_risk_scor": 255, "overall_robust": 75, "overall_slop": 39, "overall_st": [209, 255], "overall_statu": [92, 98, 254, 280], "overall_success": [252, 254], "overall_system": 39, "overall_test_statu": 75, "overall_timing_accept": 209, "overall_trend": 39, "overall_type_hint_coverag": 10, "overall_valid": 209, "overarch": [223, 235], "overcom": [30, 53, 59, 72, 103, 109, 112, 166, 222, 223, 233, 235, 290, 291], "overdamp": [78, 163, 204, 205, 249], "overfit": [167, 309, 313], "overflow": [35, 79, 84, 124, 193, 195, 246], "overhead": [17, 22, 27, 30, 36, 41, 44, 49, 50, 58, 61, 65, 67, 72, 73, 76, 84, 98, 103, 106, 107, 110, 117, 118, 135, 162, 166, 171, 177, 179, 193, 196, 199, 200, 202, 215, 216, 220, 228, 236, 248, 249, 275, 278, 297], "overkil": 197, "overlai": [1, 30, 31, 153, 156, 157, 227, 231, 268], "overlap": [17, 73, 141, 144, 169], "overli": [53, 205, 226, 239, 248], "overpen": 53, "overrid": [19, 34, 49, 51, 52, 56, 72, 80, 86, 112, 117, 127, 129, 130, 135, 143, 146, 148, 150, 165, 166, 167, 169, 170, 203, 216, 247, 267, 269, 274, 275, 276, 298], "overridden": [72, 112, 117], "override_config": 131, "override_gain": [49, 51], "oversampl": [73, 290], "overshoot": [9, 28, 30, 36, 45, 48, 53, 54, 59, 61, 65, 66, 67, 72, 74, 75, 77, 78, 81, 84, 86, 95, 97, 98, 121, 124, 127, 128, 129, 133, 136, 146, 147, 148, 149, 150, 159, 162, 164, 166, 167, 169, 170, 171, 172, 182, 183, 193, 197, 205, 214, 228, 229, 230, 236, 237, 238, 248, 253, 259, 260, 273, 274, 275, 276, 277, 280, 283, 285, 296, 306, 310, 316, 321], "overshoot_analysi": [65, 67], "overshoot_ci_95": 321, "overshoot_compli": 252, "overshoot_limit": 112, "overshoot_met": 75, "overshoot_ok": 249, "overshoot_pct": 164, "overshoot_penalti": [167, 248], "overshoot_perc": 252, "overshoot_percentag": 247, "overshoot_requir": 75, "overshoot_result": 252, "oversight": [190, 218, 284], "overview": [6, 11, 19, 22, 26, 27, 29, 30, 32, 56, 57, 58, 59, 64, 67, 92, 121, 129, 157, 162, 164, 167, 193, 202, 215, 259, 266, 286, 313, 316], "overwrit": [102, 298], "overwritten": [61, 216], "own": [44, 103, 106, 122, 138, 146, 162, 164, 166, 167, 185, 202, 222, 223, 232, 233, 235, 291, 303], "owner": [7, 10, 14], "ownership": [1, 92], "p": [8, 19, 39, 53, 61, 62, 65, 67, 68, 81, 84, 88, 90, 91, 92, 120, 123, 132, 133, 136, 145, 149, 163, 169, 178, 193, 200, 201, 202, 204, 208, 209, 213, 226, 227, 230, 231, 232, 237, 239, 246, 247, 248, 249, 250, 252, 254, 255, 258, 261, 277, 279, 284, 287, 288, 289, 290, 293, 294, 297, 299, 308, 309, 320], "p0": 121, "p05": 171, "p1": [9, 10, 58, 121, 161, 261], "p1_acc": 161, "p1_po": 161, "p1_vel": 161, "p2": [9, 10, 58, 121, 161, 261], "p200000003289": 123, "p200000003484": 123, "p2_acc": 161, "p2_po": 161, "p2_vel": 161, "p3": [9, 58, 261], "p4": 261, "p4a": 58, "p4b": 58, "p5": 261, "p95": [65, 119, 120, 171, 277], "p95_creation_time_m": 98, "p95_time": [76, 98], "p95_time_m": 65, "p99": [118, 119, 120], "p99_creation_time_m": 98, "p99_time": [76, 98], "p_": [53, 58, 191, 193, 202, 215, 216, 217, 226, 229, 232, 238, 239, 245, 246, 261, 279, 291], "p_best": [199, 215, 291], "p_best_cost": 291, "p_best_i": 215, "p_best\u2081": 215, "p_control": 317, "p_eigenvalu": 287, "p_fail": 217, "p_friction": 317, "p_i": [191, 202, 261], "p_in": 317, "p_positive_definit": 287, "p_v": 88, "p_val": 313, "p_valu": [68, 104, 112, 136, 149, 169, 178, 274, 310, 313, 320, 321], "pac": 269, "pack": [177, 185], "packag": [1, 11, 15, 22, 27, 31, 39, 40, 91, 93, 107, 115, 117, 139, 146, 147, 153, 154, 155, 169, 187, 215, 223, 235, 254, 269, 302], "packet": [22, 62, 170], "pad": [71, 108, 117, 140, 142, 144, 145], "page": [1, 8, 13, 16, 17, 64, 69, 83, 95, 122, 123, 126, 129, 137, 138, 139, 142, 143, 144, 153, 154, 157, 187, 188, 214, 232, 256, 257, 262, 263, 266, 267, 268, 270, 271, 288, 289, 315, 320], "pagerduti": 98, "pai": 270, "paid": [49, 248], "paint": [143, 268], "pair": [120, 193, 201, 232, 290, 291, 309, 310, 313], "paired_test": 313, "pairwis": [65, 67, 98, 308, 309, 310, 321], "pairwise_comparison": 313, "pairwise_ttest": [65, 67], "pan": [1, 27, 28, 30, 129, 152, 153, 156, 157, 265, 316], "panda": [15, 24, 51, 53, 56, 65, 149, 169, 170, 178, 254, 259, 320], "panel": [27, 36, 57, 59, 92, 142, 155], "pannabl": 150, "paper": [0, 2, 13, 30, 84, 125, 169, 170, 178, 187, 202, 205, 222, 224, 233, 234, 256, 257, 258, 259, 296, 297, 298, 320], "paprocki": 8, "paradigm": 84, "parallel": [4, 9, 13, 17, 38, 52, 53, 58, 59, 64, 81, 91, 93, 98, 105, 106, 107, 110, 116, 117, 127, 129, 135, 150, 151, 162, 167, 171, 174, 197, 200, 202, 203, 215, 216, 217, 220, 224, 229, 232, 234, 238, 242, 246, 248, 250, 252, 253, 254, 280, 282, 283, 293, 297, 298, 310, 317, 320], "parallel_batch": 170, "parallel_controller_creation_saf": 117, "parallel_effici": 98, "parallel_evalu": [113, 247, 293], "parallel_execut": [93, 280], "parallel_fitness_evalu": [104, 116, 215, 254], "parallel_multi_objective_pso": 248, "parallel_optim": [253, 254], "parallel_process": [92, 313], "parallel_result": 252, "parallelexecut": 317, "parallelis": [223, 235], "paralleliz": [182, 202, 293, 310], "parallelorchestr": [52, 59, 203], "parallelpsoevalu": 98, "parallelpsooptim": 254, "param": [49, 51, 55, 63, 73, 77, 78, 79, 81, 84, 93, 98, 100, 102, 103, 106, 107, 109, 114, 115, 116, 117, 124, 131, 134, 135, 136, 150, 170, 193, 197, 198, 201, 203, 228, 236, 278, 283, 313, 320], "param1": [30, 156, 208], "param2": [30, 156], "param_distribut": 17, "param_grid": 61, "param_nam": [72, 102, 207, 247], "param_path": 73, "param_spac": 215, "param_valu": [102, 201], "paramet": [1, 8, 9, 10, 11, 12, 13, 17, 18, 19, 22, 27, 29, 30, 31, 34, 37, 38, 39, 40, 41, 42, 45, 46, 52, 55, 58, 59, 60, 62, 64, 65, 67, 68, 69, 71, 74, 75, 78, 79, 82, 83, 90, 92, 93, 94, 95, 97, 103, 105, 114, 115, 116, 118, 121, 122, 123, 125, 126, 127, 129, 138, 143, 146, 150, 152, 153, 158, 160, 167, 169, 175, 178, 182, 185, 189, 190, 191, 192, 193, 195, 199, 203, 204, 206, 209, 210, 213, 214, 218, 219, 220, 221, 222, 223, 226, 227, 231, 232, 233, 235, 239, 242, 243, 244, 245, 246, 250, 254, 256, 257, 266, 272, 276, 277, 282, 283, 284, 285, 286, 287, 294, 295, 300, 301, 303, 304, 307, 308, 309, 311, 316, 317, 319, 320, 322], "parameter": [294, 300], "parameter_adjust": 252, "parameter_bound": [39, 73, 93, 261], "parameter_bounds_check": 111, "parameter_chang": 113, "parameter_change_test": 113, "parameter_combin": [253, 278], "parameter_constraint": 293, "parameter_converg": 248, "parameter_count": [98, 247], "parameter_distribut": 313, "parameter_drift": 119, "parameter_error": 261, "parameter_estim": [9, 17, 37], "parameter_inst": 247, "parameter_map": 72, "parameter_nam": [208, 247], "parameter_path": 73, "parameter_rang": [278, 291], "parameter_resolut": 117, "parameter_restructur": 102, "parameter_sensit": [112, 248], "parameter_sensitivity_analysi": 291, "parameter_set": [72, 75], "parameter_spac": [28, 36, 215], "parameter_spec": 207, "parameter_sweep": 17, "parameter_sweep_heatmap": 171, "parameter_uncertainti": [42, 75, 112, 321], "parameter_valid": [9, 39, 79, 199, 261], "parameter_vari": [75, 112, 169], "parameter_variation_r": 98, "parameter_viol": [275, 276, 280], "parameterboundsind": 261, "parameterresolutionerror": 98, "parameters_check": 98, "parameters_migr": 102, "parameters_remov": 102, "parameterspac": 215, "parametersweepdirect": 30, "parametersweepstrategi": 17, "parameteruncertainti": 75, "parametervalid": [76, 98, 114], "parametr": [65, 68, 71, 99, 103, 114, 127, 178, 199, 204, 216, 222, 223, 233, 235, 273, 287, 294, 308, 309], "paramount": 120, "params_list": [216, 250], "params_new": 79, "paraphras": 122, "parent": [14, 117, 134, 144, 169, 254, 297, 298], "parentnod": 143, "pareto": [9, 36, 40, 53, 57, 104, 112, 133, 148, 167, 172, 181, 193, 197, 199, 202, 209, 248, 249, 250, 277, 280, 284, 291, 293, 304, 309, 310, 319], "pareto_analysi": 248, "pareto_cost": 148, "pareto_domin": 293, "pareto_front": [104, 112, 133, 201, 209, 291, 321], "pareto_histori": 209, "pareto_object": 277, "pareto_optim": 133, "pareto_result": 209, "pareto_set": [201, 293], "pareto_solut": [104, 112, 148, 167, 248, 253], "pareto_valid": 209, "paretofrontpso": 253, "pariti": 203, "park": 290, "pars": [8, 15, 24, 26, 28, 32, 33, 39, 56, 67, 70, 71, 72, 73, 91, 109, 143, 178, 185, 208, 252, 254, 298, 300], "parsabl": 299, "parse_arg": [300, 321], "parse_control_accuraci": 67, "parse_controller_perform": 67, "parse_log_fil": 318, "parse_markdown": 298, "parse_missing_lin": 39, "parse_numerical_st": 67, "parse_performance_benchmark": 65, "parse_pso_log": 318, "parse_pso_sensit": 67, "parse_with_cach": 298, "parseabl": 297, "parseint": 269, "parser": [8, 15, 65, 122, 141, 232, 288, 300, 321], "part": [0, 4, 39, 45, 72, 73, 79, 80, 127, 202, 204, 225, 240, 249, 251, 254, 287, 309, 310, 313], "part_arr": 44, "parti": 71, "partial": [14, 24, 25, 26, 32, 33, 40, 52, 57, 59, 61, 67, 86, 88, 97, 127, 139, 140, 143, 145, 147, 148, 150, 165, 190, 191, 198, 199, 200, 209, 218, 220, 221, 225, 240, 255, 279, 288, 289, 290, 293, 295, 301], "partial_analysi": 88, "partial_complet": 255, "partial_coverag": 255, "partial_coverage_analysi": 255, "partial_path": 255, "partial_success_accuraci": 255, "partial_success_ev": 255, "partial_valid": 255, "partialsuccessreport": 255, "particip": [31, 163], "particl": [2, 8, 12, 19, 20, 22, 27, 28, 38, 43, 44, 45, 49, 52, 53, 56, 58, 59, 60, 61, 64, 65, 69, 73, 76, 78, 82, 83, 95, 97, 98, 103, 107, 115, 117, 123, 124, 127, 129, 131, 133, 146, 153, 157, 158, 159, 160, 162, 183, 187, 189, 198, 199, 200, 201, 203, 214, 216, 217, 223, 224, 232, 234, 235, 242, 245, 249, 253, 254, 257, 259, 267, 268, 271, 274, 279, 284, 286, 289, 290, 292, 303, 304, 316, 317, 318, 321], "particle_divers": 251, "particle_gain": [51, 115], "particle_i": 202, "particle_idx": [191, 215], "particle_index": 98, "particle_p": 61, "particle_posit": 53, "particles_per_second": 254, "particles_per_work": 63, "particleswarmoptim": 215, "particular": [224, 225, 234, 240], "particularli": [127, 222, 223, 229, 232, 233, 235, 238, 251], "partit": [291, 310], "parvat": [226, 239], "pass": [7, 9, 12, 14, 16, 17, 20, 22, 23, 25, 26, 29, 35, 36, 38, 39, 40, 41, 43, 49, 51, 52, 57, 58, 59, 64, 65, 67, 72, 73, 75, 76, 80, 81, 84, 86, 87, 88, 92, 98, 103, 106, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 134, 136, 137, 151, 158, 171, 175, 177, 183, 188, 190, 192, 196, 199, 207, 208, 209, 210, 220, 242, 243, 244, 245, 247, 250, 251, 253, 254, 255, 261, 275, 277, 282, 284, 285, 290, 298, 299, 300, 309, 313, 320, 321, 323], "pass_filenam": [37, 39, 282], "pass_rat": 75, "passed_check": 92, "passed_test": [75, 98], "passing_coverag": 88, "passing_test": 88, "passiv": [86, 123, 153, 227, 230, 231, 237], "password": [91, 92, 93], "passwordauthent": 92, "past": [13, 19, 144, 205, 266, 271, 300, 310], "pasteabl": 13, "patch": [5, 23, 44, 73, 114, 120, 139, 142, 190, 255], "patent": 15, "path": [1, 12, 16, 19, 24, 26, 28, 29, 31, 33, 38, 39, 40, 44, 50, 53, 57, 59, 61, 63, 70, 71, 72, 73, 76, 81, 87, 88, 89, 90, 91, 92, 93, 94, 103, 107, 115, 116, 117, 120, 124, 128, 129, 146, 147, 148, 150, 151, 152, 154, 156, 159, 169, 170, 171, 177, 178, 188, 190, 195, 216, 222, 233, 242, 245, 253, 254, 261, 265, 266, 269, 275, 276, 282, 298, 300, 301, 317, 320], "path_part": 73, "path_reli": 255, "path_weight": 255, "pathlib": [39, 53, 72, 108, 117, 169, 178, 253, 254, 297, 298, 320], "patholog": 297, "pathreli": 255, "pathreliabilityreport": 255, "patienc": [26, 53, 98, 104, 117, 248, 280], "patient": [146, 155], "pattern": [2, 10, 11, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 38, 39, 40, 42, 52, 58, 64, 69, 70, 75, 76, 78, 79, 82, 88, 93, 95, 100, 102, 103, 105, 106, 108, 109, 113, 115, 117, 118, 126, 127, 138, 139, 146, 150, 164, 166, 167, 172, 177, 182, 187, 188, 192, 202, 208, 212, 221, 242, 250, 255, 268, 271, 277, 283, 300, 301, 308, 309, 310, 318, 323], "pattern_nam": 297, "patterns_to_check": 301, "pauli": 8, "paus": [28, 152, 157, 253], "pauseanim": 28, "pave": [228, 236], "pawar": [227, 231], "payload": [166, 177, 185, 223, 235], "paywal": [122, 123], "pbest": [162, 167, 182, 258], "pbest_cost": 167, "pbest_cost_i": [229, 238], "pbest_i": [229, 238], "pbr": [1, 152], "pct": 35, "pd": [51, 53, 55, 61, 65, 84, 149, 169, 170, 177, 178, 216, 224, 226, 227, 231, 234, 239, 254, 318, 320], "pd_fallback": 61, "pdb": 94, "pdf": [8, 13, 144, 149, 150, 169, 188, 222, 224, 232, 233, 234, 317, 320, 321], "pdoc": 10, "pe": [161, 317], "pe_p1": 170, "pe_p2": 170, "peak": [61, 85, 93, 98, 117, 124, 128, 129, 148, 149, 150, 162, 164, 165, 166, 167, 170, 197, 209, 245, 247, 250, 251, 252, 253, 259, 265, 274, 297, 299, 310, 317, 318], "peak_angl": 164, "peak_control": [149, 164], "peak_idx": 164, "peak_load": 93, "peak_memori": [114, 117], "peak_memory_mb": 253, "peak_memory_usag": [98, 104, 251, 252], "peak_memory_usage_perc": 98, "peak_overshoot": 61, "peak_simul": 81, "peak_valu": [164, 252], "pearl": [222, 233], "pearson": [123, 309, 310], "pedagog": 165, "peek": 142, "peel": 268, "peer": [0, 2, 4, 11, 12, 122, 298], "peerj": 8, "pem": 92, "pen": 293, "penal": [61, 68, 84, 113, 133, 149, 167, 172, 193, 229, 238, 251, 253, 254], "penalis": [19, 222, 224, 230, 232, 233, 234, 237], "penalized_fit": 202, "penalized_object": 293, "penalti": [19, 20, 41, 45, 52, 58, 61, 65, 67, 68, 72, 79, 84, 97, 98, 102, 104, 107, 112, 114, 124, 133, 148, 162, 167, 172, 182, 183, 193, 202, 215, 216, 217, 222, 224, 229, 230, 232, 233, 234, 237, 238, 246, 247, 248, 249, 253, 254, 275, 277, 279, 293], "penalty_based_cost": 133, "penalty_k1_k2": 201, "penalty_valu": 80, "penalty_weight": 201, "pend": [26, 27, 29, 30, 31, 92, 171, 187, 245, 280], "pend1": [316, 317], "pend1_kinet": 295, "pend1_kinetic_expand": 295, "pend1_posit": 295, "pend1_veloc": 295, "pend2": [316, 317], "pend2_kinet": 295, "pend2_kinetic_expand": 295, "pend2_posit": 295, "pend2_veloc": 295, "pendingdeprecationwarn": [283, 284], "pendula": [82, 199, 226, 239], "pendulum": [1, 13, 19, 20, 27, 30, 31, 35, 40, 45, 49, 51, 52, 55, 62, 64, 66, 68, 69, 72, 74, 75, 76, 82, 83, 95, 97, 98, 103, 105, 109, 113, 118, 119, 122, 124, 127, 129, 131, 132, 135, 136, 146, 147, 149, 150, 155, 163, 166, 167, 168, 169, 170, 177, 182, 183, 187, 189, 190, 194, 197, 199, 200, 201, 202, 203, 204, 206, 216, 218, 220, 221, 224, 227, 231, 232, 234, 241, 244, 246, 250, 251, 252, 253, 254, 257, 259, 260, 262, 265, 272, 277, 286, 287, 288, 293, 296, 301, 303, 306, 313, 316, 320], "pendulum1_com": [53, 74, 216, 220, 225, 240], "pendulum1_inertia": [74, 216, 220, 225, 240], "pendulum1_length": [51, 53, 68, 74, 199, 208, 216, 220, 225, 240, 253], "pendulum1_mass": [51, 53, 68, 74, 199, 208, 216, 220, 225, 240, 253], "pendulum2_com": [53, 74, 216, 220, 225, 240], "pendulum2_inertia": [74, 216, 220, 225, 240], "pendulum2_length": [51, 53, 68, 74, 199, 208, 216, 220, 225, 240, 253], "pendulum2_mass": [51, 53, 68, 74, 199, 216, 220, 225, 240, 253], "pendulum_dynam": 209, "pendulum_length_1": 73, "pendulum_length_2": 73, "pendulum_mass_1": 73, "pendulum_mass_2": 73, "pendulum_term": 81, "penetr": [11, 92], "penros": [35, 205, 226, 239], "pep": [2, 67, 93, 242, 297], "per": [1, 10, 14, 16, 17, 19, 20, 22, 27, 29, 30, 33, 38, 39, 41, 44, 49, 50, 52, 56, 58, 59, 61, 65, 67, 77, 78, 84, 86, 89, 98, 103, 107, 110, 114, 115, 117, 118, 119, 120, 121, 122, 123, 129, 143, 145, 152, 153, 154, 155, 158, 165, 167, 169, 171, 178, 182, 188, 192, 198, 199, 200, 203, 208, 211, 214, 216, 217, 221, 224, 234, 247, 248, 249, 250, 251, 252, 253, 254, 257, 261, 266, 274, 276, 282, 283, 284, 290, 291, 293, 297, 299, 300, 308, 317, 320], "percal": 298, "percent": [92, 98, 104, 111, 216], "percentag": [39, 45, 53, 58, 59, 65, 88, 98, 107, 135, 136, 142, 164, 165, 166, 190, 215, 216, 223, 235, 246, 249, 255, 256, 257, 266], "percentil": [53, 65, 76, 118, 119, 120, 135, 149, 170, 171, 209, 248, 277, 290, 308], "percentile_95": [135, 310, 313], "percentile_95_ci": 313, "perci": 142, "perciv": 17, "perf": [36, 53, 98, 167, 254, 280, 282], "perf_analysi": 277, "perf_count": [37, 61, 65, 76, 78, 98, 115, 119, 203, 209, 220, 277, 278, 297], "perf_report": 98, "perf_stat": 135, "perf_tim": 254, "perfect": [15, 19, 24, 40, 67, 81, 92, 125, 127, 129, 151, 155, 157, 162, 170, 177, 197, 205, 218, 222, 233, 241, 242, 244, 284, 294, 299, 300, 320], "perfectli": [25, 26, 30, 31, 35, 145, 205, 218], "perform": [1, 2, 7, 9, 11, 13, 15, 16, 17, 19, 22, 23, 26, 29, 35, 38, 42, 45, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 64, 71, 72, 73, 74, 75, 79, 80, 82, 83, 87, 88, 89, 95, 100, 101, 103, 105, 109, 115, 118, 122, 124, 127, 128, 129, 130, 132, 137, 138, 144, 145, 146, 148, 150, 158, 163, 164, 165, 168, 169, 172, 174, 175, 178, 179, 180, 181, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 205, 207, 209, 214, 218, 219, 222, 223, 226, 227, 231, 232, 233, 235, 239, 241, 242, 243, 244, 251, 254, 255, 256, 260, 262, 269, 271, 273, 277, 279, 282, 283, 285, 290, 291, 293, 294, 297, 300, 301, 304, 305, 308, 311, 314, 316, 317, 320, 322, 323], "perform_anova_test": 67, "perform_health_check": 98, "performance_accept": 277, "performance_analysi": [112, 255, 259, 276, 277], "performance_arrai": 248, "performance_bas": 321, "performance_benchmark": [50, 252, 310], "performance_bottleneck": 251, "performance_chang": 98, "performance_chart": [67, 129], "performance_comparison": [178, 310], "performance_config": [273, 275], "performance_constraints_met": 100, "performance_cost": [148, 167], "performance_dashboard": 67, "performance_data": [159, 255, 310, 321], "performance_databas": 247, "performance_degrad": [75, 111, 255], "performance_degradation_estim": 209, "performance_distribution_norm": 248, "performance_driven": [53, 57, 58], "performance_exit": 255, "performance_histori": [247, 255, 321], "performance_impact": [63, 247], "performance_improv": 58, "performance_index": [191, 283], "performance_log": [92, 111, 321], "performance_metr": [37, 63, 75, 98, 103, 106, 191, 207, 247, 248, 253, 254, 255, 277], "performance_monitor": [101, 216, 252, 321], "performance_object": 98, "performance_objectives_achiev": 75, "performance_optimized_workflow": 280, "performance_outlook": 247, "performance_pid": 255, "performance_preserv": 98, "performance_prior": 42, "performance_report": [98, 282], "performance_result": [248, 252, 255, 280], "performance_robust": [24, 25, 33], "performance_sampl": [248, 283], "performance_scor": [50, 255], "performance_stat": 98, "performance_statu": 98, "performance_summari": [75, 253], "performance_test": 242, "performance_threshold": 98, "performance_track": [9, 17, 72], "performance_valid": [101, 247], "performance_window": 321, "performanceanalysisreport": 63, "performanceanalyz": [25, 63, 98], "performancebenchmark": 93, "performancemetr": [63, 75, 76, 165], "performancemonitor": [52, 59, 130, 136, 216], "performancemonitoredcontrol": 76, "performanceoptimizedcontrol": 63, "performancetestsuit": 75, "performancevalidationresult": 255, "period": [19, 45, 61, 62, 70, 74, 90, 91, 92, 98, 111, 117, 119, 136, 148, 197, 202, 209, 210, 211, 215, 216, 220, 248, 251, 294, 313], "periodic_dropout": 119, "periodsecond": [63, 92], "permalink": [16, 89, 188], "perman": [169, 205, 224, 228, 234, 236, 282], "permiss": [2, 15, 16, 70, 89, 92, 93, 144, 146, 188, 203, 216, 282], "permissivecontrollerconfig": 9, "permit": [8, 15, 45, 223, 230, 235, 237, 261], "permitrootlogin": 92, "permut": 310, "perruquetti": 123, "persian": 265, "persist": [1, 27, 29, 63, 64, 77, 91, 92, 98, 103, 118, 119, 120, 129, 137, 139, 140, 142, 144, 154, 164, 166, 168, 189, 205, 216, 242, 253, 285, 288, 294, 306], "persistence_count": [118, 119, 120, 306], "persistence_filt": 119, "persistentvolumeclaim": [63, 92], "person": [12, 15, 17, 39, 44, 53, 65, 67, 97, 113, 133, 162, 167, 182, 191, 193, 202, 215, 216, 232, 246, 247, 253, 258, 270, 279, 289, 291, 293, 316], "personal_best": [191, 202], "personal_best_fit": 215, "personal_best_object": 44, "personal_best_posit": [44, 215], "personnel": [93, 254], "perspect": [17, 67, 86, 152, 222, 233], "pert": 320, "perturb": [17, 44, 53, 55, 59, 61, 68, 74, 75, 84, 98, 107, 127, 128, 132, 146, 147, 150, 161, 164, 166, 167, 170, 171, 183, 191, 199, 201, 202, 216, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 248, 254, 274, 277, 285, 287, 290, 299, 310, 313, 320], "perturbed_control": 274, "perturbed_gain": [248, 274], "perturbed_param": [191, 283], "perturbed_result": 75, "perturbed_system": 75, "pettersen": [229, 238], "pg_restor": 93, "ph": 191, "phadk": [227, 231], "pham": [229, 238], "phase": [1, 5, 8, 38, 45, 46, 48, 51, 54, 60, 66, 71, 74, 81, 84, 86, 90, 94, 95, 102, 103, 104, 107, 121, 122, 124, 125, 127, 136, 137, 150, 152, 153, 154, 155, 157, 162, 164, 166, 167, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 191, 193, 199, 200, 205, 209, 216, 218, 220, 222, 224, 228, 233, 234, 236, 242, 243, 246, 249, 250, 253, 260, 285, 290, 291, 296, 299, 305, 308, 316], "phase1": 164, "phase2": [164, 298], "phase3": 164, "phase5_setup_complet": 139, "phase6_completion_summari": 138, "phase_1_2_vs_1_3_valid": 10, "phase_3_1_completion_report": [65, 67, 318], "phase_3_2_completion_report": 67, "phase_3_3_completion_report": 309, "phase_4_2_completion_report": 56, "phase_4_3_completion_report": 57, "phase_4_3_progress_report": 57, "phase_4_4_completion_report": 59, "phase_6_1_completion_report": 7, "phase_6_2_completion_report": 14, "phase_delay_std": 209, "phase_margin_degrad": 209, "phase_portrait": 149, "phaseportraitdirect": 30, "phasespac": 316, "phenomena": [222, 227, 231, 233], "phenomenon": [222, 223, 233, 235, 294], "phi": [19, 73, 88, 156, 191, 202, 209, 245, 246, 251, 252, 258, 279, 289, 290, 293, 313], "phi_i": 279, "philosophi": [17, 28, 86, 98, 193, 199, 222, 233], "phone": 31, "photo": 74, "php": [222, 225, 233, 240], "phrase": 12, "phy": 53, "physic": [1, 9, 17, 18, 22, 26, 30, 34, 35, 39, 49, 51, 52, 55, 56, 58, 59, 64, 75, 78, 80, 84, 86, 87, 92, 98, 100, 101, 103, 112, 117, 118, 127, 129, 130, 131, 132, 133, 135, 136, 146, 148, 149, 150, 153, 160, 163, 165, 166, 167, 168, 169, 170, 177, 180, 185, 189, 198, 199, 201, 202, 203, 208, 209, 215, 217, 219, 221, 222, 223, 224, 226, 230, 232, 233, 234, 235, 237, 239, 248, 249, 261, 274, 275, 282, 283, 287, 288, 290, 291, 293, 311, 316, 320], "physical_constraint": 112, "physical_mean": 109, "physical_realiz": 98, "physical_valid": 39, "physics_bas": [53, 57, 58], "physics_cfg": [34, 216, 282, 283], "physics_config": 73, "physics_constrained_bound": 133, "physics_matric": 9, "physics_param": [56, 78, 198, 209, 282], "physics_uncertainti": [45, 53, 68, 199, 216, 222, 223, 224, 233, 234, 235, 253], "physicsconfig": [9, 72, 73, 216], "physicsparamet": 209, "physicsuncertaintyschema": [9, 216], "pi": [35, 61, 73, 75, 84, 86, 98, 134, 164, 171, 193, 203, 209, 225, 232, 240, 246, 249, 277, 290, 293], "pick": [118, 269, 299, 315], "pickl": [1, 29, 148, 154, 298], "pickleseri": 9, "pid": [177, 202, 208, 222, 223, 233, 235], "pidcontrol": 208, "pie": 159, "piec": [226, 239], "piecewis": [61, 77, 78, 84, 195, 196, 205, 284], "pika": 15, "pill": [268, 271], "pillar": 286, "pillnav": [268, 271], "pin": [2, 8, 15, 16, 91, 170, 188, 232, 320], "pinch": [30, 156], "pink": 263, "pinnacl": 36, "pinv": [35, 198, 205, 226, 239], "pioneer": 2, "pip": [10, 13, 16, 22, 27, 29, 34, 39, 51, 84, 89, 90, 91, 92, 115, 116, 117, 121, 124, 126, 129, 144, 146, 150, 151, 155, 169, 188, 189, 254, 265, 282, 283, 290, 300, 320], "pip3": [90, 92], "pipelin": [4, 13, 26, 37, 38, 39, 40, 53, 57, 58, 59, 67, 73, 80, 127, 178, 187, 189, 208, 218, 242, 243, 244, 252, 254, 275, 280, 281, 283, 284, 297, 299, 301, 317, 318], "pit": 268, "pitfal": [52, 167, 222, 233, 247, 309], "pitrou": [8, 17], "pivot": [74, 164, 232, 272], "pivot_t": 169, "pixel": [159, 267, 268], "pixelblast": 268, "pixelcard": 268, "pixeltrail": 268, "pixeltransit": [267, 268], "pkg": 254, "pkg_resourc": [283, 284], "pkg_version": 254, "pkill": 254, "pkl": 148, "place": [23, 41, 44, 74, 82, 83, 93, 163, 193, 230, 232, 237, 245, 260, 297, 310], "placehold": [27, 28, 38, 51, 116, 169, 171, 178, 254, 266, 313, 318], "placement": [19, 24, 33, 98, 112, 142, 143, 161, 168, 205, 279, 291], "plagiar": 122, "plai": [28, 157], "plain": [15, 24, 33], "plan": [1, 5, 7, 8, 22, 23, 24, 25, 31, 33, 36, 38, 39, 52, 58, 71, 88, 98, 102, 105, 111, 127, 138, 152, 165, 169, 170, 183, 210, 218, 242, 250, 253, 261, 266, 290, 305, 307, 309, 312, 314, 317], "planar": [223, 225, 235, 240], "plane": [97, 197, 200, 204, 205, 206, 225, 226, 232, 239, 240, 293], "planner": 111, "plant": [8, 9, 10, 13, 17, 20, 22, 26, 33, 49, 50, 51, 52, 53, 59, 62, 63, 65, 67, 73, 74, 78, 82, 84, 86, 87, 91, 93, 95, 98, 100, 105, 108, 113, 114, 116, 118, 121, 127, 128, 129, 130, 131, 135, 146, 147, 150, 151, 160, 161, 163, 164, 165, 168, 170, 171, 174, 177, 185, 190, 193, 196, 198, 199, 203, 216, 217, 222, 223, 224, 226, 227, 231, 233, 234, 235, 239, 262, 274, 275, 276, 277, 285, 287, 290, 296, 316, 317], "plant_address": 73, "plant_config": [20, 38, 49, 51, 98, 105, 108, 114, 116, 117, 248, 274, 277], "plant_config_or_model": [49, 51], "plant_config_typ": 98, "plant_configur": 114, "plant_control": 278, "plant_dt": 131, "plant_ip": [177, 185], "plant_model": [277, 279], "plant_model_config": 277, "plant_model_contract": 278, "plant_param": 98, "plant_port": [73, 91, 177, 185], "plant_respons": 63, "plant_serv": [9, 10, 52, 72, 91, 119, 170, 177, 185, 222, 223, 224, 233, 234, 235], "plant_server_config": 119, "plant_stat": 278, "plant_typ": [114, 278], "plantdyn": 317, "planteq": 317, "plantmodelinterfac": 278, "plantmodelregistri": 277, "plantserv": [9, 10, 61, 119, 185], "plantuml": 8, "plasma": 268, "plateau": [104, 112, 124, 133, 148, 167, 170, 193, 202, 229, 230, 237, 238, 290, 303, 310, 318, 321], "plateau_start": 133, "platform": [1, 27, 36, 67, 90, 92, 115, 124, 134, 147, 161, 165, 189, 222, 233, 259, 262, 263, 282, 284], "plausibl": [148, 168], "playanim": 28, "playback": 28, "playwright": [1, 138, 139, 142], "pleas": [2, 22, 46, 48, 54, 60, 121, 129, 155, 172, 173, 174, 175, 176, 179, 180, 181, 184, 254, 256, 270], "plestan": [2, 123, 199], "plo": [224, 226, 227, 231, 234, 239], "ploson": [224, 234], "plot": [1, 8, 12, 15, 17, 19, 21, 22, 27, 28, 30, 31, 52, 59, 65, 67, 71, 77, 81, 82, 86, 90, 91, 118, 121, 126, 127, 129, 133, 134, 135, 146, 148, 149, 153, 155, 156, 164, 165, 166, 167, 168, 169, 170, 171, 177, 178, 182, 183, 185, 188, 189, 193, 201, 215, 216, 222, 226, 227, 228, 229, 231, 233, 236, 238, 239, 248, 253, 254, 265, 280, 285, 290, 303, 309, 310, 316, 317, 320, 321], "plot_adaptation_evolut": 321, "plot_adaptation_histori": 77, "plot_adaptive_gain": 124, "plot_control_sign": 136, "plot_controller_comparison": 136, "plot_converg": 215, "plot_convergence_histori": 248, "plot_fast_pso_demo": 11, "plot_fast_smc_demo": 11, "plot_performance_comparison": 248, "plot_phase_portrait": 136, "plot_result": [135, 136, 169], "plot_sliding_surfac": 136, "plot_state_trajectori": 136, "plot_surfac": 201, "plot_typ": 136, "plotdata": 30, "plotexport": 317, "plotli": [1, 15, 29, 30, 31, 154, 156], "plotly_extens": 28, "plotlyintegr": 28, "plotter": 153, "plt": [39, 52, 61, 77, 81, 86, 118, 133, 134, 135, 136, 148, 149, 150, 153, 155, 164, 166, 167, 169, 170, 171, 177, 178, 193, 201, 202, 215, 216, 248, 253, 254, 280, 283, 284, 310, 313, 320], "plu": [165, 224, 234, 298], "plugin": [15, 56, 76, 159, 189, 250], "plymouth": [222, 233], "pm": [45, 120, 202, 225, 228, 229, 236, 238, 240, 261, 278, 287, 290, 296], "pm150": 62, "pmc": [224, 228, 229, 234, 236, 238], "pmc10450744": [224, 234], "pmc11230067": [228, 236], "pmc11466434": [224, 234], "pmc3274283": [228, 236], "pmc4239867": [228, 236], "pmc7516836": [228, 229, 236, 238], "pmc8151801": [228, 236], "pmc9539940": [229, 238], "pmsm": [224, 234], "png": [1, 27, 30, 31, 52, 61, 90, 124, 136, 149, 150, 155, 156, 169, 171, 177, 178, 215, 216, 248, 253, 254, 280, 288, 289, 317, 320], "po": [182, 198, 200, 215, 216, 249, 318], "pod": 92, "pod_nam": 92, "pod_namespac": 92, "podaffinityterm": 92, "podantiaffin": 92, "point": [1, 7, 12, 17, 19, 22, 28, 30, 35, 44, 52, 58, 59, 61, 63, 67, 68, 70, 75, 84, 97, 102, 107, 116, 117, 118, 119, 125, 127, 138, 152, 156, 157, 159, 163, 166, 171, 173, 177, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 207, 209, 218, 220, 222, 223, 226, 232, 233, 235, 239, 241, 242, 243, 245, 252, 261, 265, 278, 279, 282, 283, 284, 296, 297, 300, 308, 310, 316, 317, 318], "pointer": 297, "pointradiu": 318, "poisson": 155, "polararea": 159, "pole": [61, 78, 98, 112, 161, 168, 204, 205, 220, 279, 291, 293, 295], "pole1_length": 61, "pole1_mass": 61, "pole2_length": 61, "pole2_mass": 61, "poles_damp": 287, "poles_margin": 287, "poli": 162, "polici": [1, 22, 23, 39, 70, 105, 138, 146, 224, 234, 242, 284], "polish": [26, 29, 55], "polit": 31, "polyakov": 123, "polycarp": [123, 258], "polyfit": [35, 75, 209, 247, 253, 291], "polynomi": [35, 97, 123, 125, 177, 192, 204, 205, 206, 249, 279, 287, 291, 294], "polyv": 75, "pool": [38, 52, 59, 98, 103, 104, 105, 106, 117, 148, 150, 170, 193, 202, 210, 215, 248, 277, 313], "pool_kei": 117, "pool_siz": 193, "pooled_factori": 248, "pooled_std": [149, 169, 178, 274, 313, 320], "poor": [35, 65, 67, 68, 77, 78, 85, 98, 102, 117, 144, 147, 149, 158, 162, 167, 170, 182, 197, 201, 202, 209, 215, 222, 230, 233, 237, 247, 251, 254, 275, 279, 280, 290, 297, 303, 308, 310], "poor_converg": 247, "poorer": [222, 233], "poorli": [166, 222, 227, 230, 231, 233, 237, 254, 290, 310], "pop": [35, 72, 116, 117, 196, 297, 308], "pop_siz": [201, 313], "popen": 177, "popul": [3, 44, 52, 57, 58, 61, 65, 67, 98, 127, 162, 199, 202, 208, 215, 222, 223, 224, 230, 232, 233, 234, 235, 237, 242, 245, 248, 253, 254, 259, 275, 276, 280, 288, 291, 308, 309, 310], "popular": [200, 222, 232, 233, 262, 266], "population_divers": [52, 104, 248], "population_guidelin": 280, "population_s": [208, 215, 276, 277], "populationbasedoptim": 215, "port": [63, 72, 73, 90, 92, 116, 128, 131, 150, 170, 177, 185, 321], "portabl": 32, "portion": 232, "portrait": [1, 27, 30, 31, 81, 136, 150, 153, 155, 163, 205, 232, 316], "pos_def": 287, "pos_histori": 53, "pose": 213, "posit": [12, 20, 22, 33, 35, 38, 39, 40, 41, 44, 45, 49, 50, 52, 55, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 88, 97, 98, 100, 101, 102, 103, 105, 106, 113, 114, 115, 116, 117, 118, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 140, 141, 146, 148, 157, 158, 159, 161, 162, 163, 164, 167, 170, 176, 177, 179, 181, 182, 183, 185, 192, 193, 195, 196, 199, 201, 202, 203, 204, 205, 206, 208, 209, 215, 216, 218, 219, 220, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 237, 239, 245, 246, 247, 249, 250, 253, 255, 258, 260, 261, 265, 267, 272, 273, 274, 275, 276, 277, 279, 285, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301, 306, 313, 316, 317], "position_error": 113, "position_limit": [75, 101], "position_new": 215, "position_noise_std": 74, "position\u00b2": 68, "positive_definit": [251, 287], "positive_gain": [77, 78, 81, 247], "positive_requir": 207, "posix": [16, 188], "possensor": [316, 317], "possess": 232, "possibl": [10, 44, 53, 61, 81, 86, 103, 106, 115, 121, 167, 171, 177, 202, 203, 226, 239, 293, 298, 310], "possibli": 254, "post": [3, 17, 19, 23, 45, 53, 63, 67, 107, 108, 112, 113, 119, 120, 164, 173, 177, 178, 183, 203, 213, 222, 233, 249, 253, 277, 301, 309, 311], "post_change_avg": 113, "post_change_error": 113, "post_deployment_verif": 251, "post_init": [51, 80, 104, 107, 112, 199], "post_valid": 108, "poster": 268, "posteriori": 232, "postgr": 93, "postgresql": 93, "postmessag": 31, "postoptimizationvalid": 252, "postrot": 92, "potenti": [35, 49, 65, 67, 70, 73, 77, 86, 108, 112, 134, 144, 146, 166, 170, 183, 193, 195, 199, 200, 205, 209, 220, 222, 224, 232, 233, 234, 237, 255, 295, 297, 300, 317, 318], "potential_energi": [209, 295], "potentialenergi": 317, "power": [4, 12, 22, 27, 29, 30, 31, 51, 67, 68, 72, 97, 98, 103, 105, 127, 145, 149, 153, 154, 155, 163, 167, 169, 173, 176, 178, 185, 193, 197, 205, 224, 227, 231, 232, 234, 253, 274, 275, 283, 298, 306, 308, 312, 317, 320], "power_adequ": 310, "power_analysi": 310, "power_exp": 99, "power_expon": [51, 56, 72, 98, 100, 101, 103, 105, 106, 115, 273, 274, 275, 276], "power_spectrum": 209, "powershel": [14, 70, 146, 177], "pp": [226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 257, 278, 290], "ppf": [119, 178, 310, 313], "ppnftsm": [224, 234], "ppo": [224, 234], "pr": [7, 14, 16, 24, 89, 94, 95, 189, 315], "practic": [11, 14, 19, 29, 31, 42, 49, 50, 51, 52, 56, 61, 65, 67, 71, 73, 75, 76, 82, 85, 92, 99, 102, 103, 104, 106, 109, 112, 115, 117, 118, 119, 122, 125, 127, 136, 138, 146, 151, 160, 162, 164, 166, 172, 179, 180, 181, 184, 189, 196, 202, 204, 208, 209, 210, 213, 215, 227, 230, 231, 232, 237, 241, 242, 246, 247, 248, 254, 255, 277, 280, 281, 286, 287, 290, 291, 293, 294, 297, 300, 307, 308, 320, 322, 323], "practition": [67, 222, 223, 226, 233, 235, 239, 318], "pragma": 39, "prang": 63, "prasad2014doubl": 257, "prasanna": [226, 239], "pratap": 291, "pre": [7, 16, 22, 24, 25, 26, 27, 29, 30, 39, 49, 51, 56, 76, 78, 80, 81, 82, 88, 89, 93, 98, 106, 107, 112, 115, 117, 119, 120, 122, 127, 140, 141, 142, 143, 144, 150, 151, 154, 156, 163, 170, 176, 182, 183, 188, 194, 197, 199, 203, 207, 210, 218, 224, 226, 234, 239, 242, 247, 248, 253, 277, 283, 290, 295, 301, 302, 309, 317, 322, 323], "pre_change_avg": 113, "pre_change_error": 113, "pre_deployment_check": 98, "pre_deployment_valid": 251, "pre_factory_reset": 254, "pre_restor": 254, "pre_valid": 108, "prec": [291, 293], "precach": 31, "preced": [72, 131, 232], "preceq": 198, "precis": [12, 35, 36, 39, 53, 59, 72, 73, 75, 79, 81, 85, 103, 109, 113, 117, 118, 125, 166, 167, 192, 193, 199, 201, 205, 209, 213, 222, 227, 230, 231, 232, 233, 237, 249, 253, 254, 273, 280, 282, 283, 284, 286, 297, 299, 309, 310, 313, 317, 318, 320], "precision_config": 75, "precision_configur": 75, "precision_cost": 113, "precision_error": 113, "precision_gain": 109, "precision_loss": 75, "precision_loss_bit": 209, "precision_optim": 254, "precision_report": 298, "precision_requirements_met": 75, "precision_result": 75, "precision_scenario": 75, "precision_test_cas": 75, "precision_threshold": 113, "precision_track": 113, "preclud": [222, 233], "precomput": [61, 164, 317], "precondit": [285, 306], "predefin": [72, 154, 232], "predict": [10, 17, 24, 36, 49, 50, 52, 56, 58, 61, 82, 83, 86, 95, 103, 105, 111, 116, 119, 120, 125, 146, 163, 197, 198, 200, 222, 223, 224, 229, 230, 232, 233, 234, 235, 237, 238, 244, 250, 259, 265, 283, 290, 298, 306, 313], "predict_fn": 310, "predicted_iterations_remain": 52, "predicted_log_error": 75, "predicted_overshoot": 249, "prediction_funct": 310, "prediction_horizon": 10, "prediction_window": 53, "predictor": 310, "preelement": [140, 143], "prefer": [24, 28, 30, 31, 32, 49, 61, 63, 65, 67, 68, 79, 84, 91, 98, 102, 106, 123, 143, 145, 156, 163, 177, 183, 196, 222, 227, 231, 232, 233, 250, 253, 268, 275, 276, 290, 298, 313], "preferred_typ": [49, 117], "preferredduringschedulingignoredduringexecut": 92, "prefix": [24, 32, 71, 72, 146], "preliminari": [178, 220, 232, 290], "preload": [27, 155, 164], "preload_config": 117, "prematur": [53, 65, 73, 86, 133, 148, 167, 182, 193, 201, 202, 209, 214, 232, 245, 247, 253, 280, 284, 290, 291, 293], "premature_converg": [53, 209, 321], "premature_convergence_detect": 52, "premature_convergence_threshold": 209, "prentic": [17, 35, 78, 81, 123, 161, 192, 194, 204, 205, 207, 230, 237, 287, 310], "prep_result": 252, "prepar": [4, 31, 51, 56, 57, 58, 95, 98, 134, 149, 170, 178, 216, 253, 255, 278, 280, 300, 301, 309, 313], "preparation_fail": 252, "preparechartdata": 28, "preprint": [169, 224, 228, 234, 236], "prerequisit": [22, 127, 130, 146, 148, 149, 150, 151, 164, 166, 167, 168, 169, 171, 177, 182, 198, 200, 201, 202, 215, 266, 309, 313], "prescrib": [232, 256], "presenc": [86, 222, 223, 228, 233, 235, 236, 255, 293, 299], "present": [5, 11, 13, 15, 22, 24, 25, 26, 30, 31, 34, 40, 56, 57, 58, 71, 81, 82, 98, 117, 131, 166, 168, 178, 199, 223, 225, 226, 227, 230, 231, 235, 237, 239, 240, 256, 259, 266, 269, 298, 299, 300, 310], "preserv": [12, 24, 32, 33, 37, 51, 58, 61, 78, 86, 116, 120, 145, 162, 170, 195, 196, 200, 226, 227, 230, 231, 232, 237, 239, 251, 284, 290, 291, 293, 297], "preset": [31, 139, 142, 150], "press": [10, 35, 78, 123, 144, 145, 155, 163, 192, 194, 196, 204, 205, 207, 246, 257, 287, 290], "pressur": 268, "pretti": 170, "prev": 84, "prev_header_level": 24, "prev_k": 77, "prev_mod": 86, "prev_posit": 79, "prevent": [10, 16, 17, 22, 26, 27, 32, 33, 37, 39, 49, 50, 51, 53, 55, 56, 65, 68, 72, 73, 76, 77, 78, 81, 82, 84, 85, 88, 90, 92, 93, 95, 98, 100, 103, 107, 112, 115, 117, 118, 119, 120, 125, 131, 132, 133, 140, 147, 166, 167, 173, 179, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 213, 215, 216, 220, 222, 224, 225, 226, 227, 230, 231, 233, 234, 237, 239, 240, 242, 245, 246, 248, 249, 251, 252, 261, 273, 274, 275, 276, 279, 280, 287, 290, 291, 293, 301, 310], "preventdefault": 144, "preview": [24, 32, 33, 84, 94, 139, 142, 144, 188], "previou": [59, 77, 84, 85, 93, 98, 107, 112, 119, 142, 162, 168, 169, 170, 204, 215, 232, 241, 277, 291, 301], "previous": [150, 226, 239], "previous_control": 113, "previous_state_var": 63, "prim": [63, 130], "primari": [2, 8, 22, 24, 30, 31, 39, 40, 41, 44, 50, 51, 52, 64, 75, 76, 78, 82, 83, 86, 89, 90, 98, 100, 103, 109, 113, 116, 118, 121, 122, 127, 128, 133, 135, 140, 142, 148, 167, 188, 190, 192, 201, 202, 205, 212, 216, 218, 222, 233, 241, 250, 253, 255, 258, 261, 267, 277, 281, 283, 310], "primarili": [71, 232], "primary_control": 118, "primary_error": 100, "primary_fdi": 119, "primary_metr": 310, "prime": 310, "primer": 310, "primit": [80, 127, 129, 130], "princeton": 310, "principl": [2, 11, 17, 19, 22, 49, 51, 63, 78, 80, 85, 86, 88, 98, 116, 119, 129, 160, 161, 163, 164, 167, 168, 169, 184, 193, 202, 205, 222, 227, 228, 231, 232, 233, 236, 242, 249, 279, 286, 288, 289, 294, 297, 299, 317, 320], "print": [1, 10, 19, 20, 28, 29, 30, 31, 35, 39, 49, 50, 51, 52, 56, 58, 61, 65, 68, 72, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 92, 93, 97, 98, 104, 105, 106, 115, 116, 117, 118, 119, 122, 124, 126, 128, 130, 131, 132, 133, 134, 135, 136, 139, 144, 146, 147, 148, 149, 150, 151, 154, 164, 165, 166, 167, 168, 169, 170, 171, 177, 178, 182, 183, 193, 194, 201, 202, 203, 208, 210, 211, 213, 215, 216, 217, 219, 220, 232, 248, 249, 253, 254, 255, 273, 276, 277, 290, 298, 300, 310, 313, 320, 321, 323], "print_exc": [72, 117], "print_optimization_summari": 98, "print_stat": 203, "print_summari": [117, 254], "printabl": 126, "printout": 145, "prior": [77, 82, 133, 197, 199, 226, 227, 231, 239, 299], "priori": [197, 205, 226, 227, 230, 231, 232, 237, 239], "priorit": [10, 26, 39, 65, 78, 84, 87, 88, 133, 142, 147, 181, 229, 238, 298], "prioriti": [4, 9, 10, 26, 38, 39, 51, 52, 55, 56, 61, 67, 71, 77, 78, 82, 100, 103, 109, 111, 114, 116, 117, 126, 127, 129, 164, 165, 166, 177, 183, 185, 218, 222, 233, 255, 274, 297, 298, 299, 309], "prioritis": [224, 234], "prioritize_coverage_task": 39, "prioritize_improv": 88, "priority_act": 88, "priority_ord": 39, "priority_overrid": 298, "prism": 268, "prismat": 268, "prismaticburst": 268, "privaci": [90, 142, 144], "privat": [15, 94, 142, 144, 155], "prize": 232, "prng": [19, 53, 193, 216], "pro": [53, 64, 215, 268, 290], "proactiv": [111, 115, 254], "prob": [84, 313], "prob_ci": 313, "prob_exce": 310, "prob_exceed_empir": 313, "prob_exceed_fit": 313, "prob_within": 313, "probabilist": [249, 309, 310, 313], "probabl": [53, 119, 125, 201, 208, 209, 232, 245, 251, 255, 291, 293, 310, 313], "problem": [9, 17, 19, 20, 26, 32, 38, 40, 67, 78, 82, 83, 85, 86, 95, 98, 103, 107, 108, 115, 116, 123, 124, 125, 126, 127, 128, 146, 147, 148, 154, 162, 163, 165, 170, 184, 189, 191, 193, 194, 196, 199, 201, 202, 204, 206, 209, 216, 224, 226, 232, 234, 239, 242, 247, 249, 251, 253, 254, 257, 275, 283, 290, 293, 315, 322], "problem_dimens": 133, "problemat": [23, 35, 67, 89, 197, 255, 300, 301], "proc": [162, 222, 223, 226, 230, 233, 235, 237, 239, 257], "proce": [65, 93, 98, 126, 136, 164, 205, 225, 226, 239, 240, 298, 318], "procedur": [1, 19, 27, 59, 75, 87, 88, 95, 111, 119, 127, 137, 138, 143, 144, 165, 175, 190, 192, 222, 225, 230, 232, 233, 237, 240, 241, 242, 243, 245, 251, 274, 284, 302, 314, 316, 322], "proceed": [8, 17, 70, 122, 123, 202, 222, 227, 231, 233, 257, 290, 291, 320], "process": [8, 10, 13, 17, 19, 22, 23, 24, 25, 29, 32, 33, 38, 44, 45, 53, 54, 56, 57, 58, 64, 67, 72, 91, 93, 98, 102, 103, 107, 108, 109, 114, 115, 117, 119, 120, 121, 127, 128, 129, 130, 136, 143, 146, 149, 150, 161, 163, 164, 167, 168, 171, 173, 177, 182, 183, 185, 187, 195, 197, 199, 202, 203, 210, 211, 215, 216, 222, 232, 233, 251, 253, 254, 277, 283, 284, 290, 291, 297, 298, 299, 300, 301, 311, 317, 318, 320, 321], "process_cpu_seconds_tot": 92, "process_resident_memory_byt": 92, "process_virtual_memory_max_byt": 92, "processor": [9, 93, 167, 245, 293], "processpoolexecutor": [133, 248, 254], "procfil": 90, "prod": 92, "prod_": 201, "produc": [22, 32, 51, 53, 65, 76, 79, 114, 115, 118, 119, 161, 165, 166, 199, 205, 223, 224, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 251, 254, 259, 260, 285, 289, 290, 300, 313, 318], "product": [0, 15, 19, 30, 31, 33, 36, 37, 38, 39, 45, 50, 52, 53, 55, 58, 61, 64, 72, 73, 76, 77, 78, 82, 85, 86, 87, 88, 90, 94, 103, 104, 119, 120, 122, 123, 127, 128, 137, 138, 139, 143, 145, 156, 161, 167, 170, 172, 179, 180, 181, 182, 189, 191, 193, 198, 199, 200, 208, 210, 213, 214, 216, 220, 221, 225, 240, 246, 247, 250, 252, 253, 254, 255, 262, 263, 265, 266, 273, 276, 280, 291, 300, 310, 313, 318], "production_config": [98, 242, 276, 280], "production_control": 276, "production_data": 280, "production_deployment_guid": [11, 98, 111], "production_documentation_summari": 243, "production_grad": 280, "production_optimization_pipelin": 280, "production_performance_benchmark": 92, "production_readi": [9, 111, 208, 280], "production_readiness_check": [88, 98], "production_readiness_compon": 40, "production_readiness_framework": [243, 245], "production_valid": 321, "productionfactorydeploy": 98, "productionhealthcheck": 92, "productionmanag": 321, "productionmemorymonitor": 210, "profession": [1, 19, 24, 26, 27, 29, 31, 32, 33, 61, 71, 97, 143, 153, 157], "professor": 31, "profil": [8, 11, 44, 53, 54, 65, 76, 78, 81, 84, 93, 115, 117, 122, 127, 142, 170, 193, 194, 199, 207, 210, 245, 251, 253, 254, 265, 268, 282, 283, 298, 317], "profile_classical_smc": 78, "profile_controller_cr": 117, "profile_factory_perform": 115, "profile_pso_iter": 254, "profile_result": 115, "profile_simul": 136, "profilecard": 268, "profiling_callback": 253, "profoundli": [229, 238], "program": [8, 17, 44, 98, 117, 144, 168, 201, 227, 231, 290], "programm": 261, "programmat": [22, 51, 118, 122, 127, 129, 130, 146, 165, 203, 221, 253], "progress": [1, 10, 11, 16, 19, 24, 27, 28, 30, 52, 53, 55, 57, 67, 70, 88, 90, 98, 104, 127, 133, 143, 146, 150, 167, 182, 187, 188, 189, 214, 216, 224, 234, 247, 254, 265, 266, 271, 275, 277, 283, 284, 290, 303, 309, 318], "progress_callback": [135, 248], "progress_histori": 248, "progress_queu": 277, "proj": 279, "project": [1, 12, 13, 19, 22, 23, 24, 25, 26, 31, 34, 36, 43, 44, 52, 64, 69, 70, 71, 75, 82, 83, 89, 91, 94, 97, 103, 108, 123, 124, 125, 126, 127, 128, 129, 133, 139, 146, 147, 150, 151, 154, 164, 165, 166, 168, 169, 170, 177, 185, 187, 188, 190, 199, 201, 223, 226, 227, 231, 232, 235, 239, 243, 245, 254, 256, 257, 258, 259, 262, 263, 265, 270, 271, 279, 288, 290, 293, 294, 297, 298, 299, 309, 315, 323], "project_directori": 108, "project_path": 108, "project_root": [117, 128], "projectconfig": 72, "prom": 92, "prometheu": 63, "prometheus_cli": 98, "promin": [19, 67, 265], "promis": [31, 104, 112, 162, 165, 202, 232, 259, 290], "promot": [53, 65, 148, 193, 202, 232, 246, 247], "prompt": [31, 70, 146], "promptli": 122, "prone": [290, 291], "proof": [12, 16, 19, 36, 52, 53, 77, 78, 82, 85, 86, 88, 89, 93, 95, 106, 119, 120, 121, 122, 123, 125, 127, 160, 161, 166, 169, 188, 193, 199, 202, 205, 206, 207, 224, 226, 234, 239, 241, 245, 246, 251, 261, 286, 288, 293, 294, 297, 298], "proof_block": 299, "proof_pattern": 299, "proof_text": 299, "prop": [76, 266, 269, 270, 271], "prop_max": 252, "prop_min": 252, "prop_nam": 278, "propag": [22, 40, 61, 81, 88, 93, 141, 144, 161, 190, 216, 225, 240, 252, 255, 261, 282, 283, 300, 301], "propagated_bound": 252, "proper": [1, 3, 8, 12, 13, 15, 17, 19, 23, 24, 25, 26, 32, 33, 38, 40, 65, 67, 71, 81, 86, 98, 106, 115, 121, 122, 159, 162, 187, 188, 193, 195, 222, 233, 237, 242, 245, 246, 255, 275, 287, 300], "properli": [0, 8, 25, 26, 29, 30, 38, 40, 70, 71, 73, 86, 93, 97, 114, 115, 117, 122, 138, 164, 191, 194, 227, 230, 231, 237, 251, 265, 275, 287, 298, 300, 301, 320], "properti": [1, 8, 10, 13, 15, 16, 17, 23, 31, 34, 36, 38, 39, 51, 52, 53, 56, 58, 59, 63, 67, 73, 75, 76, 78, 80, 84, 85, 86, 88, 93, 98, 99, 101, 103, 105, 107, 114, 116, 124, 131, 134, 135, 140, 163, 164, 165, 168, 176, 188, 190, 192, 193, 196, 197, 198, 199, 200, 201, 205, 210, 216, 222, 223, 226, 232, 233, 235, 239, 242, 243, 246, 248, 250, 254, 255, 276, 278, 279, 283, 294, 295, 298, 310, 317, 323], "property_": 278, "property_bas": [114, 282, 283, 284], "property_nam": 207, "property_test": [39, 242], "property_verif": 75, "propertybasedconfigurationtest": 73, "proport": [45, 51, 55, 59, 76, 78, 86, 99, 105, 115, 163, 164, 182, 183, 195, 197, 202, 205, 216, 222, 225, 226, 227, 229, 230, 231, 232, 233, 237, 238, 239, 240, 253, 272, 273, 275, 276, 287, 298], "proportion": [53, 166, 224, 226, 234, 239, 272], "proportional_gain": 208, "propos": [58, 98, 191, 222, 223, 224, 229, 232, 233, 234, 235, 238, 277, 290], "proprietari": [2, 15], "propto": [193, 290], "prost": [222, 233], "protect": [1, 15, 16, 17, 38, 49, 52, 79, 82, 84, 89, 90, 93, 98, 103, 105, 106, 116, 188, 193, 242, 247, 249, 255, 261, 273, 275, 276, 278, 290], "protecthom": 92, "protectsystem": 92, "proto": 92, "protocol": [2, 9, 10, 17, 19, 36, 51, 52, 59, 63, 65, 71, 75, 82, 91, 92, 95, 103, 105, 107, 116, 173, 174, 176, 181, 182, 199, 222, 233, 241, 243, 247, 249, 252, 254, 262, 277, 309, 313, 314, 317], "prototyp": [30, 31, 53, 61, 65, 67, 78, 81, 101, 127, 128, 129, 132, 133, 134, 135, 146, 148, 156, 162, 163, 166, 170, 183, 216, 219, 220, 265, 318], "provabl": 246, "prove": [30, 156, 160, 163, 205], "proven": [36, 65, 93, 95, 146, 147, 164, 165, 167, 191, 201, 213, 218, 224, 234, 242, 243, 245, 254, 256, 259, 261, 287, 297, 299], "provenancefilt": 9, "provid": [6, 8, 15, 17, 19, 20, 22, 26, 29, 30, 31, 34, 36, 40, 45, 52, 53, 58, 62, 64, 66, 67, 69, 70, 71, 75, 77, 81, 82, 83, 84, 85, 86, 88, 89, 94, 95, 96, 97, 98, 106, 108, 111, 115, 120, 125, 127, 129, 131, 132, 133, 134, 135, 136, 138, 141, 146, 154, 156, 159, 160, 163, 167, 169, 170, 177, 183, 185, 190, 195, 197, 198, 199, 203, 204, 205, 209, 215, 216, 220, 221, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 241, 247, 250, 253, 255, 256, 258, 261, 265, 270, 277, 287, 288, 289, 290, 292, 303, 305, 308, 309, 310, 313, 316, 322], "provided_gain": 115, "provided_param": 117, "provis": [63, 92], "proxi": [91, 92, 123], "proxim": [121, 122, 126, 224, 234, 268], "proxy_add_x_forwarded_for": 92, "proxy_pass": 92, "proxy_set_head": 92, "ps1": [70, 146], "pseudo": [35, 53, 148, 198, 205, 212, 220, 226, 239], "pseudocod": [202, 228, 232, 236], "psf": [2, 8, 15], "pso": [6, 9, 12, 13, 21, 25, 26, 27, 30, 31, 37, 44, 45, 46, 52, 54, 55, 58, 62, 65, 66, 67, 68, 70, 74, 79, 82, 83, 86, 90, 91, 94, 95, 106, 108, 110, 114, 115, 122, 131, 134, 137, 138, 147, 149, 152, 153, 154, 155, 156, 163, 164, 165, 166, 169, 171, 177, 185, 187, 190, 197, 198, 200, 201, 203, 205, 209, 216, 218, 219, 220, 232, 241, 244, 255, 256, 257, 259, 260, 262, 263, 285, 286, 294, 296, 299, 301, 302, 305, 308, 309, 315, 316, 317, 320, 322, 323], "pso_": 32, "pso_adaptive_smc": 318, "pso_adaptive_smc_converg": [216, 318], "pso_advanc": 215, "pso_algorithm_found": [52, 55, 58, 65, 121, 126, 286, 318], "pso_algorithm_mathematical_found": [19, 246], "pso_algorithm_theori": 292, "pso_batch_simul": 61, "pso_bound": [77, 78, 81, 85, 103, 112, 252], "pso_bounds_optim": [9, 53, 57, 58], "pso_bounds_valid": [9, 26, 53, 55, 57, 58, 290, 291], "pso_cfg": [216, 254], "pso_checkpoint": 148, "pso_class": 318, "pso_classical_smc": 28, "pso_classical_smc_converg": [216, 318], "pso_clerc_2002_particle_swarm": [69, 293], "pso_coello_2007_evolutionary_algorithm": [257, 293], "pso_comparison": [216, 318], "pso_compat": 17, "pso_compatibleadapt": 76, "pso_compatiblelegacycontrol": 76, "pso_config": [49, 72, 73, 98, 107, 113, 117, 202, 215, 248, 251, 252, 254, 276, 277, 313, 321], "pso_configuration_schema_document": [19, 247], "pso_conserv": 215, "pso_control": 114, "pso_controllererror": 76, "pso_controllerinterfac": 76, "pso_converg": [28, 53, 215, 255], "pso_convergence_analysi": [280, 286], "pso_convergence_bas": 53, "pso_convergence_histori": 248, "pso_convergence_monitor": 52, "pso_convergence_risk": 252, "pso_convergencedetector": 104, "pso_core_algorithm_guid": 202, "pso_cost": [148, 150, 167], "pso_coverage_analysi": 190, "pso_cv_predictor": [309, 313], "pso_data": 167, "pso_deb_2001_fast_elitist": 293, "pso_documentation_validation_report": 19, "pso_en": 321, "pso_engin": [252, 254], "pso_engine_oper": 254, "pso_error": 98, "pso_execut": 252, "pso_exploit": 215, "pso_explor": 215, "pso_factori": [276, 277], "pso_factory_api_refer": 112, "pso_factory_bridg": [9, 51, 53, 55, 56, 57, 58, 106, 276, 277, 291], "pso_factory_integration_pattern": 248, "pso_fit": 98, "pso_fitness_funct": [49, 112], "pso_fitness_receives_str": 300, "pso_fitness_with_valid": 112, "pso_ful": 124, "pso_funct": 114, "pso_gain_bounds_mathematical_found": [3, 19, 249], "pso_gopal_2019_stability_analysi": [125, 293], "pso_gradient_hybrid": 293, "pso_handl": 254, "pso_health_report": 254, "pso_histori": [148, 167, 321], "pso_hybrid_adaptive_sta_smc": 318, "pso_hybrid_adaptive_sta_smc_converg": [216, 318], "pso_hyperparameter_optim": [9, 10, 52, 57, 58], "pso_integr": [9, 40, 98, 301], "pso_integration_exampl": 49, "pso_integration_guid": [7, 19], "pso_integration_success": 98, "pso_integration_system_architectur": [19, 250], "pso_integration_technical_specif": [3, 19, 251], "pso_integrationtestsuit": 251, "pso_interfac": [104, 113], "pso_iter": 193, "pso_jiang_2007_stochast": 293, "pso_kennedy_1995_particle_swarm_optim": [32, 69, 187, 257, 293], "pso_kennedy_eberhart_1995_pso_origin": [122, 123], "pso_log": 167, "pso_log_fil": 254, "pso_logg": 254, "pso_max": 251, "pso_metr": [98, 104], "pso_min": 251, "pso_monitor": 248, "pso_nigatu_2024_convergence_constrict": [125, 293], "pso_object": 286, "pso_opt": 98, "pso_optim": [2, 9, 17, 19, 24, 32, 33, 38, 39, 45, 50, 51, 52, 53, 56, 57, 58, 76, 77, 78, 80, 81, 84, 86, 88, 92, 98, 101, 104, 105, 106, 116, 117, 124, 125, 128, 148, 167, 190, 191, 193, 209, 216, 217, 222, 223, 224, 229, 233, 234, 235, 238, 248, 251, 253, 254, 275, 300, 317, 318, 320, 321], "pso_optimization_complet": [11, 19, 121, 125, 286, 288, 294, 295, 304, 310], "pso_optimization_integr": 321, "pso_optimization_workflow_specif": [19, 252], "pso_optimization_workflow_user_guid": [19, 253], "pso_optimizationconfig": 104, "pso_optimized_control": 310, "pso_param": [98, 202], "pso_paramet": 253, "pso_parameter_sensit": 247, "pso_perfect_cost": 300, "pso_performance_dashboard": 254, "pso_performance_matrix": 36, "pso_performance_optimization_report": [65, 67], "pso_performancemonitor": 251, "pso_position_upd": 293, "pso_productionmonitor": 104, "pso_qualityg": 251, "pso_quick": 124, "pso_result": [209, 253], "pso_scal": 293, "pso_schmitt_2015_convergence_analysi": [125, 293], "pso_sensitivity_heatmap": [65, 67], "pso_sensitivity_paramet": [65, 67], "pso_shi_eberhart_1998_modified_pso": 123, "pso_sta_smc": 318, "pso_sta_smc_converg": 318, "pso_stat": 247, "pso_step": 148, "pso_swarm": 313, "pso_templ": 72, "pso_template_param": 72, "pso_test": 39, "pso_test_result": 98, "pso_trelea_2003_converg": [125, 293], "pso_troubleshooting_maintenance_manu": [19, 25, 254], "pso_tun": [76, 253, 254], "pso_v1": 76, "pso_v2": 76, "pso_van_den_bergh_2001_analysi": [125, 293], "pso_van_den_bergh_2006_trajectori": 293, "pso_velocity_upd": [288, 293], "pso_with_checkpoint": 148, "pso_wolpert_1997_no_free_lunch": 293, "pso_work": 114, "pso_workfloworchestr": 252, "pso_wrapp": 98, "pso_zhang_2015_comprehensive_survei": [257, 293], "psobenchmarkresult": 209, "psobenchmarksuit": 112, "psobound": [9, 251], "psoboundsoptim": [53, 57, 58], "psoboundsvalid": [26, 53, 57, 58, 290], "psoboundswithcontrol": 9, "psoconfig": [9, 73, 107, 131, 208, 216], "psoconfigvalid": 251, "psocontrollerwrapp": [17, 20, 49, 50, 52, 56, 82, 98, 101, 103, 248, 274], "psoconvergencedetector": 112, "psoconvergencevalid": 209, "psoconvergencevalidationresult": 209, "psodebugg": 321, "psofactoryconfig": [98, 276, 277], "psofactoryerror": 112, "psofactoryintegr": 277, "psofactoryinterfac": 98, "psohealthcheck": 254, "psohyperparamet": [57, 58], "psohyperparameteroptim": [52, 57, 58], "psologmanag": 254, "psooptim": [93, 209, 279, 317], "psooptimizationfailur": 92, "psooptimizedfactori": 279, "psoparametertyp": [57, 58], "psoperformancedashboard": 254, "psoperformancemonitor": 98, "psoprogressmonitor": 98, "psoswarm": 313, "psotun": [19, 38, 45, 49, 50, 51, 52, 56, 58, 61, 76, 77, 78, 80, 81, 84, 86, 92, 98, 105, 106, 116, 117, 127, 128, 129, 130, 132, 134, 135, 146, 148, 167, 170, 199, 217, 224, 234, 253, 254, 258, 275, 283, 300, 319, 321], "psutil": [15, 17, 45, 92, 93, 98, 104, 107, 114, 115, 117, 210, 211, 251, 253, 254, 274, 282, 283], "pt": 58, "public": [0, 4, 9, 11, 17, 19, 25, 26, 28, 30, 31, 49, 53, 55, 57, 71, 93, 94, 95, 122, 123, 124, 126, 129, 133, 134, 135, 146, 148, 149, 156, 161, 162, 164, 165, 166, 167, 168, 169, 171, 178, 197, 198, 200, 222, 224, 233, 234, 256, 259, 265, 283, 298, 309, 310, 317], "publication_readiness_report": 122, "publicli": [169, 270], "publish": [8, 15, 23, 121, 122, 123, 124, 126, 169, 187, 189, 226, 239, 257, 277, 290, 298, 320], "published_gain": 124, "pull": [2, 32, 70, 77, 89, 94, 137, 142, 162, 202, 215, 222, 226, 233, 239, 267, 268, 287, 323], "pull_request": [10, 39, 151, 282, 283, 300], "puls": [28, 224, 234], "pump": [86, 222, 233], "pure": [17, 22, 30, 35, 44, 64, 85, 99, 132, 143, 148, 162, 164, 193, 194, 203, 225, 226, 239, 240, 276, 280, 297], "pureadmin": [222, 233], "purg": [141, 144], "purpl": [149, 263, 321], "purpos": [2, 3, 8, 15, 17, 19, 24, 28, 30, 31, 32, 33, 50, 53, 55, 56, 77, 78, 81, 82, 84, 85, 94, 120, 121, 126, 127, 131, 132, 133, 134, 135, 136, 159, 164, 165, 166, 168, 170, 183, 187, 196, 197, 199, 201, 205, 213, 216, 220, 232, 258, 265, 266, 273, 282, 283, 291, 298, 310], "pursu": [224, 234, 309, 310], "pursuit": [222, 233], "push": [21, 23, 29, 30, 31, 33, 39, 70, 89, 90, 91, 138, 142, 151, 164, 169, 182, 183, 198, 222, 233, 282, 283, 297, 300, 315], "put": [31, 98, 277], "pvc": [63, 92], "pwa": [1, 27, 28], "pwd": [91, 150, 164], "px": 143, "py": [1, 2, 4, 5, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 25, 26, 27, 35, 37, 39, 40, 41, 42, 52, 53, 57, 58, 65, 71, 73, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 107, 114, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 138, 139, 141, 142, 144, 148, 150, 152, 156, 159, 164, 165, 166, 167, 168, 169, 170, 171, 177, 178, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 199, 203, 210, 211, 212, 214, 216, 220, 221, 222, 223, 224, 226, 227, 229, 231, 232, 233, 234, 235, 238, 239, 244, 251, 253, 254, 255, 260, 261, 265, 266, 271, 280, 282, 284, 285, 287, 290, 292, 294, 297, 299, 301, 302, 303, 304, 306, 316, 317, 318, 320, 322, 323], "py_compil": 297, "pyc": 91, "pycqa": 10, "pydant": [10, 15, 24, 32, 33, 38, 46, 49, 52, 63, 73, 80, 92, 98, 107, 109, 114, 116, 117, 131, 170, 189, 216, 217, 242, 243, 275, 278, 317], "pydantic_config": 114, "pydantic_set": [24, 33], "pydata": [8, 15], "pydocstyl": [10, 93], "pygment": [15, 154], "pylint": 93, "pyment": 10, "pymodbu": 15, "pymoo": 201, "pyobject": [26, 215], "pyodid": [1, 29, 30, 31, 153, 154, 155, 156], "pyodide_extens": 27, "pypi": 146, "pyplot": [39, 53, 61, 77, 81, 86, 118, 133, 134, 135, 148, 149, 150, 164, 166, 167, 169, 170, 171, 177, 178, 193, 201, 202, 215, 216, 248, 253, 254, 280, 310, 313, 320], "pyqt5": 124, "pyramid": 114, "pyre": 10, "pyright": 61, "pyswarm": [2, 15, 20, 24, 53, 92, 98, 104, 107, 128, 146, 147, 167, 182, 183, 193, 214, 230, 237, 242, 253, 254, 258, 291, 293, 318], "pyswarms_inertia_schedul": 293, "pyswarms_velocity_clamp": 293, "pytest": [1, 9, 10, 14, 15, 20, 22, 23, 34, 37, 39, 41, 44, 51, 52, 55, 59, 73, 76, 87, 89, 91, 93, 94, 98, 114, 116, 122, 124, 127, 128, 132, 146, 168, 182, 186, 189, 190, 193, 199, 208, 210, 211, 261, 281, 282, 283, 298, 300, 320, 321], "pytest_benchmark": [283, 284], "pytest_cach": 91, "pytest_testing_workflow": [281, 323], "pytestbenchmarkwarn": [283, 284], "python": [1, 2, 5, 7, 8, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 44, 50, 52, 58, 67, 68, 69, 71, 73, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 111, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 135, 140, 141, 142, 143, 145, 152, 154, 156, 157, 164, 165, 166, 167, 170, 171, 177, 182, 183, 185, 186, 187, 188, 189, 191, 193, 196, 199, 202, 205, 209, 214, 216, 217, 218, 226, 227, 229, 231, 232, 238, 239, 242, 244, 245, 246, 253, 254, 256, 257, 259, 260, 265, 266, 279, 282, 284, 285, 290, 291, 293, 299, 301, 303, 304, 309, 315, 318, 320, 321, 323], "python3": [29, 49, 52, 72, 76, 90, 91, 92, 146, 254], "python_fil": 255, "python_vers": [93, 115, 169, 300], "pythonhashse": 17, "pythonpath": [34, 90, 92, 115, 127, 177, 254], "pytorch": 91, "pytyp": 10, "pyyaml": [15, 92, 98, 117, 146, 147, 254], "pyzmq": 15, "p\u1d62": [97, 162, 191, 251, 316], "p\u2081": 249, "p\u2082": 249, "p\u2c7c": 310, "q": [10, 13, 22, 23, 44, 61, 77, 78, 84, 85, 86, 92, 93, 94, 103, 127, 132, 134, 160, 161, 186, 195, 197, 199, 200, 205, 206, 207, 209, 210, 213, 220, 225, 226, 227, 230, 231, 232, 237, 239, 240, 252, 258, 279, 284, 287, 288, 289, 290, 291, 294, 295, 298, 317], "q1": [36, 65, 121, 166, 197, 320], "q10": 122, "q11": 122, "q12": 122, "q13": 122, "q14": 122, "q15": 122, "q16": 122, "q17": 122, "q18": 122, "q19": 122, "q1dot": [225, 240], "q2": [36, 166, 197], "q20": 122, "q2dot": [225, 240], "q3": [36, 65, 166, 197, 320], "q4": [36, 166, 197], "q5": 197, "q8": 122, "q9": 122, "q_": [53, 58, 225, 232, 240], "q_dot": [41, 78, 209], "q_dot_copi": 41, "q_i": [198, 220, 225, 240, 288, 295], "q_j": 198, "q_k": 198, "q_theta": [49, 51, 72, 84, 103], "q_thetadot": 84, "q_x": [49, 51, 72, 84, 103], "q_xdot": 84, "q_\u03b8": 84, "q_\u1e8b": 84, "qa": [64, 73, 93], "qanber": [223, 235], "qd": 193, "qdd": [193, 203], "qdot": 86, "qed_symbol": 299, "qh": 290, "qi": [225, 240], "qin": 84, "qiq_": [225, 240], "qj": [225, 240], "qk": [225, 240], "qmc": 202, "qp": [55, 82], "qpso": 202, "qq": [309, 310], "qquad": [221, 225, 240], "qr": 31, "qu": [134, 161], "quad": [39, 53, 81, 120, 125, 156, 191, 193, 198, 199, 200, 201, 202, 208, 209, 220, 221, 224, 225, 227, 231, 232, 234, 240, 242, 258, 261, 279, 287, 290, 293, 294, 295, 297, 299], "quad_form": 84, "quadcopt": [224, 234], "quadrat": [30, 35, 36, 107, 128, 149, 162, 167, 201, 202, 209, 223, 229, 235, 238, 287], "quadratic_funct": 209, "quadrotor": [224, 234], "qualit": [10, 61, 229, 238], "qualiti": [2, 4, 7, 12, 16, 19, 27, 30, 33, 36, 40, 52, 56, 65, 68, 69, 75, 88, 89, 95, 98, 100, 102, 107, 112, 113, 120, 122, 127, 133, 134, 146, 147, 149, 156, 158, 162, 165, 167, 169, 171, 172, 178, 182, 184, 187, 197, 199, 200, 202, 209, 220, 241, 242, 244, 250, 251, 253, 254, 262, 265, 266, 280, 281, 291, 292, 297, 298, 300, 301, 308, 310, 317, 322, 323], "quality_check": 280, "quality_g": [87, 255], "quality_gate_fail": 252, "quality_gate_independence_framework": [190, 255], "quality_gate_result": 252, "quality_improv": 52, "quality_report_sampl": 298, "quality_report_schema": [297, 298], "qualitycheck": 251, "qualitygateintegr": 255, "qualitygateresult": [251, 255], "quantif": [97, 201, 209, 308, 309, 316], "quantifi": [12, 67, 166, 167, 169, 209, 230, 232, 237, 290, 313], "quantil": [97, 119, 320], "quantis": [62, 74, 228, 230, 236, 237], "quantit": [10, 39, 84, 146, 164, 197, 242, 251, 259, 279, 287, 291, 294, 299, 318], "quantiti": [45, 79, 258, 310], "quantiz": 62, "quantization_angl": [62, 74], "quantization_posit": [62, 74], "quantum": [202, 218], "quarterli": [15, 17, 243], "quasi": 310, "quaternari": 261, "qub": [222, 233], "queen": [222, 233], "queri": [30, 52, 56, 70, 143, 156, 275], "queryselector": [140, 142, 143, 144, 156], "queryselectoral": [143, 144], "quest": 31, "question": [2, 8, 12, 13, 15, 126, 127, 129, 166, 222, 233, 256, 266, 290, 298, 310, 313], "queu": 8, "queue": [4, 277], "quick": [11, 13, 15, 23, 27, 28, 31, 34, 40, 52, 64, 69, 78, 96, 106, 108, 122, 130, 133, 138, 146, 154, 162, 166, 167, 192, 202, 208, 217, 229, 238, 254, 257, 262, 263, 270, 275, 276, 280, 292, 308, 310, 322], "quick_diagnosi": 117, "quick_gain": [128, 148], "quick_health_check": 98, "quick_migrate_configur": 108, "quick_pso_check": 254, "quick_refer": [7, 33, 129], "quick_result": 253, "quick_start": [267, 269], "quicker": 22, "quickli": [74, 95, 98, 118, 127, 145, 146, 147, 182, 197, 200, 201, 205, 222, 223, 226, 230, 232, 233, 235, 237, 239, 254, 291, 303, 310], "quickstart": [7, 64, 95, 148, 171], "quiet": 92, "quot": [25, 122, 297], "quota": [142, 143, 144], "qx": [225, 240], "q\u03b81": [225, 240], "q\u03b82": [225, 240], "q\u1d40": 84, "q\u1d62": [134, 161], "q\u2081": 161, "q\u2082": 161, "q\u2083": 161, "r": [8, 10, 13, 19, 22, 24, 34, 35, 39, 41, 58, 61, 62, 73, 75, 76, 77, 81, 84, 86, 89, 90, 91, 92, 93, 97, 98, 102, 103, 104, 107, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 131, 133, 136, 141, 142, 144, 146, 148, 149, 150, 151, 162, 164, 167, 168, 170, 183, 189, 193, 197, 198, 199, 200, 201, 202, 205, 208, 209, 213, 215, 226, 227, 230, 231, 237, 239, 245, 246, 248, 252, 253, 254, 255, 258, 265, 279, 280, 282, 283, 285, 287, 289, 290, 293, 294, 295, 297, 298, 299, 300, 301, 303, 306, 310, 318, 320], "r1": [53, 150, 167, 182, 215, 229, 238, 258, 261, 291], "r158": 152, "r2": [53, 150, 167, 182, 215, 229, 238, 258, 261, 291], "r3": [53, 261], "r4": 261, "r5": 261, "r_": [53, 58, 119, 202, 232], "r_1": [53, 191, 193, 202, 215, 245, 258, 279, 288, 293], "r_2": [53, 191, 193, 202, 215, 245, 258, 279, 288, 293], "r_i": 193, "r_k": [119, 120], "r_select": 119, "r_squar": 75, "r_u": [49, 51, 72, 84, 103], "r_unweight": 119, "r_weight": 119, "rabbitmq": [8, 15], "race": [51, 56, 70, 98, 100, 106, 107, 111, 117, 143, 253, 283], "rackaucka": [228, 236], "rad": [12, 28, 51, 61, 62, 68, 72, 74, 75, 77, 78, 84, 85, 86, 98, 118, 124, 131, 134, 135, 136, 146, 147, 149, 150, 152, 158, 161, 164, 165, 166, 177, 197, 198, 200, 216, 219, 220, 221, 224, 225, 227, 229, 230, 231, 232, 234, 237, 238, 240, 242, 247, 249, 251, 252, 253, 258, 265, 272, 277, 289, 290, 295, 296, 306, 320, 321], "radar": [28, 65, 67, 129, 153, 303], "radau": 232, "radial": [224, 234, 287], "radian": [68, 72, 92, 152, 209, 232, 313, 320], "radiu": [200, 245, 267], "rad\u00b2": [228, 236], "raf": [139, 143], "rahman": [226, 239], "rai": 268, "raichl": [230, 237], "rail": [152, 198, 232], "rais": [22, 35, 38, 39, 40, 44, 45, 49, 50, 51, 53, 55, 56, 57, 58, 59, 61, 62, 72, 73, 76, 78, 79, 81, 82, 86, 92, 93, 94, 98, 100, 103, 105, 106, 108, 114, 115, 116, 117, 119, 127, 131, 132, 133, 151, 191, 196, 198, 199, 203, 204, 208, 210, 216, 227, 231, 248, 273, 275, 276, 277, 280, 283, 284, 290, 300, 301, 313, 321], "ralf": 8, "ralph": 17, "ram": [27, 61, 91, 92, 93, 124, 135, 153, 210, 242, 251, 259, 265, 299], "ramalho": 17, "ran": [127, 230, 237, 290], "rand": 154, "randint": 76, "randn": [51, 61, 72, 107, 117, 201, 203, 213, 248, 313], "random": [17, 19, 22, 27, 34, 49, 51, 53, 58, 61, 65, 67, 68, 72, 76, 97, 107, 112, 116, 117, 119, 120, 124, 126, 129, 135, 136, 146, 150, 154, 164, 167, 169, 170, 178, 182, 193, 199, 201, 202, 203, 213, 215, 216, 224, 230, 232, 234, 237, 242, 246, 248, 250, 251, 253, 258, 259, 261, 274, 279, 283, 290, 293, 308, 309, 316, 320, 321], "random_input": 261, "random_particl": 202, "random_se": [17, 310, 313], "random_seed_track": 169, "random_st": [310, 313], "random_uniform_0": 321, "randomis": [224, 228, 234, 236], "randomise_phys": 68, "randomli": [182, 222, 223, 229, 233, 235, 238], "rang": [17, 19, 20, 30, 35, 37, 38, 39, 40, 44, 50, 51, 53, 57, 58, 59, 61, 62, 65, 67, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 92, 93, 98, 105, 106, 107, 109, 114, 115, 116, 117, 118, 119, 124, 127, 128, 132, 133, 134, 136, 140, 144, 148, 149, 150, 156, 162, 164, 167, 169, 170, 171, 178, 183, 193, 196, 199, 201, 202, 203, 205, 209, 210, 211, 213, 215, 216, 217, 220, 222, 223, 224, 225, 230, 232, 233, 234, 235, 237, 240, 245, 248, 249, 251, 253, 254, 257, 259, 261, 265, 273, 275, 276, 277, 279, 280, 283, 284, 287, 288, 290, 293, 294, 298, 299, 308, 317, 318, 320], "range1": [30, 156], "range2": [30, 156], "range_valid": [9, 199, 247], "range_width": 112, "rangl": 289, "rank": [35, 45, 53, 59, 61, 63, 67, 82, 104, 107, 112, 130, 161, 165, 166, 167, 171, 203, 204, 205, 225, 237, 240, 246, 277, 290, 295, 308, 317], "rank_controllers_by_object": [104, 112], "ranking_analysi": 310, "rapid": [22, 36, 40, 53, 56, 65, 67, 78, 81, 82, 86, 101, 119, 120, 127, 158, 163, 164, 166, 183, 199, 200, 219, 220, 222, 223, 226, 227, 229, 230, 231, 233, 235, 237, 238, 239, 254, 265, 303, 318], "rapid_test": 101, "rapidli": [35, 61, 77, 164, 198, 222, 227, 229, 231, 233, 238, 254, 290], "rare": [31, 65, 77, 84, 91, 200, 266, 282, 310], "raster": 156, "rastrigin": [193, 246, 293], "rastrigin_funct": 293, "ratchet": 81, "rate": [4, 7, 14, 16, 19, 20, 30, 35, 37, 38, 39, 40, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 62, 65, 67, 68, 71, 72, 73, 74, 75, 76, 77, 81, 82, 86, 88, 89, 90, 92, 93, 100, 101, 103, 105, 115, 118, 123, 125, 127, 131, 132, 133, 143, 146, 162, 163, 165, 166, 167, 168, 170, 171, 177, 179, 183, 188, 191, 193, 194, 195, 196, 197, 199, 201, 202, 208, 209, 213, 214, 216, 217, 220, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 237, 239, 242, 245, 246, 247, 248, 249, 250, 253, 255, 256, 259, 261, 272, 273, 275, 276, 277, 279, 284, 287, 288, 290, 293, 294, 300, 301, 303, 309, 310, 317], "rate_limit": [81, 131, 132], "rate_pass": 92, "rate_specification_met": 75, "rate_test_result": 75, "rather": [17, 22, 71, 85, 205, 222, 225, 226, 232, 233, 239, 240, 291, 300], "ratio": [7, 11, 14, 30, 57, 59, 65, 72, 73, 76, 84, 86, 98, 107, 113, 119, 148, 166, 183, 192, 193, 195, 198, 199, 200, 204, 213, 214, 247, 249, 254, 273, 276, 280, 287, 290, 309, 310, 313], "ratio_lambda": 73, "rational": [44, 51, 52, 55, 56, 57, 65, 78, 86, 119, 120, 163, 165, 166, 169, 193, 197, 200, 201, 218, 258, 290, 291, 297, 298, 299, 303], "ratnaweera": 123, "raton": [205, 257], "rave": [222, 233], "ravel": 171, "raw": [45, 53, 65, 67, 156, 169, 221, 252, 257, 285, 320], "raw_config": [102, 252], "raw_metr": 98, "rawl": 84, "rawmatch": 143, "rayleigh": [225, 240], "razali": 310, "rb": [148, 254, 298], "rbf": [224, 234], "rbfnna": [224, 234], "rbrack": [227, 231, 232], "rc": 55, "rcond": [35, 220], "rcparam": 169, "re": [10, 21, 22, 24, 27, 30, 35, 51, 53, 56, 57, 58, 59, 65, 67, 70, 79, 80, 84, 86, 93, 94, 102, 114, 115, 117, 120, 127, 128, 129, 145, 146, 148, 150, 153, 162, 164, 167, 178, 183, 200, 201, 202, 223, 227, 230, 231, 235, 237, 243, 245, 253, 261, 267, 268, 271, 282, 290, 293, 297, 298, 299, 300, 320, 323], "reach": [12, 24, 25, 30, 39, 40, 48, 53, 72, 75, 77, 78, 79, 81, 82, 85, 86, 97, 122, 123, 125, 129, 145, 149, 160, 161, 162, 163, 164, 167, 168, 170, 182, 191, 192, 193, 196, 197, 199, 208, 209, 215, 222, 223, 224, 226, 232, 233, 234, 235, 239, 245, 248, 249, 255, 265, 273, 274, 275, 279, 283, 288, 291, 294, 298, 299, 301, 306, 313, 316, 318], "reachability_condition_satisfi": [75, 209], "reachability_percentag": 209, "reachability_result": 209, "reachability_scenario": 75, "reachability_valid": 75, "reachabilityscenario": 75, "reachabilitytestcas": 75, "reachabilitytestresult": [75, 209], "reachabilityvalidationresult": 209, "reachabl": [75, 92, 103, 107, 112, 176, 196, 205, 209, 249, 251, 282, 283, 284], "reached_sliding_surfac": 75, "reaching_condit": [209, 248, 288, 294], "reaching_paramet": 75, "reaching_r": 209, "reaching_rate_viol": 209, "reaching_result": 75, "reaching_term": 75, "reaching_tim": [75, 125, 209], "reaching_time_bound": 294, "reachinglaw": 316, "reachingrateviol": 209, "react": [230, 237, 270], "reactbit": [266, 267, 268, 270, 271], "reaction": 161, "reactiv": 84, "read": [8, 13, 16, 27, 44, 61, 65, 82, 83, 89, 98, 105, 117, 121, 126, 127, 145, 153, 155, 161, 162, 163, 164, 187, 188, 224, 232, 234, 255, 265, 269, 271, 296, 298, 300, 323], "read_csv": [65, 169, 178, 320], "read_text": 298, "readabl": [5, 12, 22, 25, 26, 41, 49, 52, 67, 87, 90, 92, 98, 131, 137, 142, 144, 159, 189, 248, 273, 282, 297], "reader": [1, 28, 30, 31, 142, 145, 154, 156, 298], "readi": [0, 13, 14, 16, 19, 29, 30, 31, 33, 36, 38, 39, 44, 45, 52, 53, 55, 58, 61, 63, 64, 65, 76, 77, 78, 85, 86, 87, 88, 94, 95, 98, 101, 103, 104, 112, 121, 122, 124, 126, 127, 137, 138, 143, 145, 146, 149, 153, 155, 156, 164, 167, 175, 177, 181, 188, 189, 191, 203, 208, 213, 214, 216, 220, 247, 250, 251, 252, 253, 254, 262, 266, 269, 270, 271, 274, 276, 277, 283, 300, 309, 310, 313, 317, 318, 320], "readili": 58, "readinessprob": [63, 92], "readm": [1, 2, 7, 11, 15, 21, 22, 23, 26, 32, 33, 98, 121, 122, 123, 124, 125, 126, 129, 137, 138, 147, 169, 185, 265, 266, 268, 269, 271, 296, 320], "readonli": [27, 63, 92], "readonlyrootfilesystem": 92, "readthedoc": [8, 16, 24, 89, 146, 188], "readwritemani": 92, "readwritepath": 92, "real": [1, 8, 22, 23, 24, 28, 29, 30, 33, 36, 38, 40, 41, 45, 50, 52, 54, 57, 58, 59, 63, 64, 65, 67, 70, 72, 76, 77, 78, 81, 82, 86, 88, 90, 92, 93, 95, 98, 100, 101, 103, 104, 107, 114, 123, 127, 129, 130, 133, 135, 136, 146, 149, 150, 152, 153, 157, 158, 163, 166, 167, 168, 169, 170, 173, 174, 178, 180, 185, 189, 190, 196, 198, 199, 200, 203, 204, 205, 209, 213, 216, 217, 218, 220, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 247, 248, 250, 251, 255, 256, 259, 265, 275, 277, 278, 283, 287, 290, 292, 293, 294, 300, 301, 309, 313, 316, 317, 318, 322], "real_system_prep": 101, "real_tim": [9, 59, 61, 209, 216], "real_time_compat": 101, "real_time_constraint": 101, "real_time_constraint_viol": 255, "real_time_constraints_satisfi": 209, "real_time_control": 321, "real_time_factor": 61, "real_time_integr": 321, "real_time_metr": 321, "real_time_mod": 278, "real_time_optimization_integr": 277, "real_time_pso_optim": 248, "real_time_result": 280, "real_time_step": 278, "real_time_sync": [9, 44], "real_time_valid": 253, "realism": 22, "realist": [19, 56, 57, 68, 119, 127, 129, 131, 149, 152, 153, 154, 164, 165, 185, 196, 223, 235, 253, 273, 313], "realiti": [25, 190, 224, 228, 234, 236], "realiz": [17, 98, 166, 218, 249, 293], "realtime_perform": 321, "realtime_result": 255, "realtime_valid": 255, "realtimeconstraintvalid": 209, "realtimecontrol": 321, "realtimefdi": 119, "realtimemonitor": 321, "realtimeorchestr": [59, 61, 203], "realtimesimulationbridg": 278, "realtimetest": 255, "realtimevalidationresult": [209, 255], "rearrang": [163, 225, 240, 263], "reason": [7, 20, 44, 51, 61, 65, 73, 76, 77, 98, 101, 103, 108, 111, 113, 114, 117, 119, 122, 124, 131, 136, 147, 151, 165, 166, 167, 182, 198, 199, 201, 208, 209, 215, 229, 238, 242, 247, 249, 251, 253, 273, 280, 283, 290, 298, 299], "reasonable_ratio": 81, "reassign": 61, "reassur": 127, "reback2020panda": 8, "rebuild": [1, 13, 25, 28, 29, 31, 63, 91, 138, 139, 141, 142, 144, 153, 154, 159, 315], "rebuilt": 142, "rec": [53, 254], "recal": [297, 298, 299], "recalcul": [143, 287], "recalibr": 158, "recap": [86, 167], "reced": 250, "receiv": [64, 80, 81, 119, 177, 185, 224, 225, 234, 240, 270, 300, 306], "receive_measur": 119, "recenc": 298, "recent": [2, 19, 35, 39, 41, 55, 63, 70, 82, 83, 92, 104, 111, 112, 119, 120, 169, 187, 197, 202, 205, 224, 232, 234, 254, 256, 258, 298, 321], "recent_check": 111, "recent_cost": [98, 253], "recent_data": [63, 111], "recent_divers": [98, 104], "recent_execut": 255, "recent_fit": [104, 112, 215], "recent_improv": [201, 248, 253, 254], "recent_metr": 39, "recent_perform": 247, "recent_report": 63, "recent_std": 201, "recenter_high_thresh": 41, "recentr": [227, 231], "rechart": 269, "recip": [127, 128, 129, 130, 146, 170, 290], "reciproc": 79, "reclassifi": 5, "recogn": [50, 61, 108, 116, 270, 275], "recognis": [226, 239], "recognit": [17, 26], "recommend": [3, 8, 13, 14, 15, 19, 22, 27, 28, 30, 36, 38, 39, 50, 52, 55, 56, 59, 63, 64, 65, 68, 71, 75, 77, 78, 79, 81, 82, 86, 87, 88, 92, 95, 98, 101, 102, 107, 112, 115, 117, 118, 119, 120, 122, 123, 124, 127, 132, 133, 134, 137, 141, 144, 146, 152, 153, 157, 158, 162, 165, 168, 170, 171, 177, 191, 193, 196, 198, 199, 205, 208, 213, 215, 216, 220, 232, 241, 242, 244, 245, 247, 248, 251, 254, 255, 265, 275, 280, 290, 293, 300, 301, 303, 308, 310], "recommend_threshold": 119, "recommendations_count": 280, "recommended_lambda1": 73, "recommended_lambda2": 73, "recommended_pso_config": 201, "recommended_s": 280, "recommended_sample_s": 310, "recommended_solut": 248, "recommended_threshold": 119, "recomput": [85, 198, 220], "recompute_sliding_surfac": 79, "reconfigur": [118, 247], "reconsid": 313, "reconstruct": [35, 300], "record": [39, 68, 86, 98, 102, 117, 119, 137, 142, 144, 167, 183, 220, 221, 223, 224, 228, 230, 234, 235, 236, 237, 248, 260, 285, 300, 306, 310, 313], "record_coverage_run": 39, "record_invers": 220, "record_measur": 117, "recov": [25, 93, 226, 230, 237, 239, 254], "recover_from_fault": 93, "recoveri": [9, 11, 25, 36, 37, 38, 40, 45, 51, 53, 56, 63, 65, 76, 84, 88, 100, 105, 109, 114, 115, 118, 120, 127, 135, 174, 175, 177, 194, 203, 208, 212, 218, 223, 235, 242, 243, 244, 245, 255, 275, 276, 277, 284, 301], "recovery_act": 63, "recovery_dir": 92, "recovery_error": 100, "recovery_persist": 120, "recovery_recommend": 255, "recovery_result": 252, "recovery_step": 93, "recovery_strategi": 252, "recovery_success": 255, "recovery_tim": 75, "recovery_time_statist": 255, "recoveryerror": 93, "recoveryresult": 252, "recoverystatu": 261, "recreat": [117, 210, 248], "recurs": [49, 67, 116, 117, 232, 255], "recv": 177, "recv_timeout_": 177, "recvfrom": 185, "red": [52, 90, 141, 142, 144, 149, 151, 163, 164, 166, 171, 215, 228, 236, 254, 309, 321], "redesign": 313, "redirect": [6, 7, 18, 47, 92, 123, 311, 319], "redistribut": 15, "reduc": [1, 7, 10, 13, 22, 25, 28, 30, 31, 34, 36, 37, 40, 45, 50, 53, 58, 61, 65, 67, 77, 78, 79, 81, 82, 84, 85, 86, 91, 98, 99, 103, 106, 115, 117, 118, 119, 122, 124, 128, 129, 132, 133, 134, 135, 136, 138, 139, 145, 146, 148, 150, 152, 153, 155, 156, 158, 163, 164, 166, 167, 170, 171, 177, 178, 182, 183, 185, 193, 195, 196, 197, 199, 200, 201, 202, 206, 213, 216, 217, 220, 222, 223, 224, 226, 227, 229, 231, 232, 233, 234, 235, 238, 239, 245, 247, 251, 253, 254, 261, 265, 273, 275, 276, 277, 279, 280, 287, 290, 294, 301, 310, 313, 317, 318, 320, 321], "reduce_gain": 118, "reduced_accuraci": 255, "reduced_gain": 185, "reduced_overshoot_config": 275, "reduct": [10, 21, 22, 24, 25, 32, 33, 35, 36, 37, 40, 44, 51, 53, 55, 56, 61, 65, 71, 72, 78, 82, 83, 97, 98, 99, 100, 101, 103, 105, 109, 112, 113, 116, 119, 124, 126, 131, 132, 146, 158, 163, 164, 166, 167, 168, 172, 181, 183, 189, 192, 193, 195, 196, 199, 200, 204, 205, 206, 216, 217, 220, 222, 223, 224, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 242, 247, 249, 251, 253, 259, 273, 275, 280, 290, 294, 301, 309, 310, 318, 320], "reduction_factor": 247, "redund": [12, 44, 79, 104, 290, 295], "reentrant": [50, 51, 56, 103, 105], "reentri": 86, "reentry_angle_tol": 86, "reentry_angle_toler": 86, "ref": [16, 17, 24, 32, 69, 78, 89, 107, 114, 117, 119, 142, 168, 187, 188, 191, 199, 201, 210, 229, 238, 246, 257, 290, 297, 315], "ref_fn": 84, "refactor": [26, 45, 65, 71, 151, 282, 298], "refer": [0, 1, 4, 5, 6, 13, 14, 15, 16, 18, 19, 24, 25, 29, 30, 31, 32, 33, 35, 42, 56, 59, 60, 62, 64, 65, 67, 68, 74, 75, 78, 80, 83, 89, 97, 108, 114, 116, 117, 118, 120, 122, 124, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 148, 149, 150, 151, 156, 158, 160, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 179, 180, 181, 184, 185, 187, 188, 189, 192, 194, 196, 200, 201, 202, 205, 207, 214, 217, 223, 228, 229, 230, 232, 235, 236, 237, 238, 241, 242, 243, 246, 256, 262, 263, 265, 266, 277, 281, 285, 286, 293, 294, 295, 305, 306, 310, 311, 313, 316, 317, 318, 320, 321], "referenc": [19, 25, 26, 45, 51, 55, 56, 59, 121, 122, 141, 188, 290, 296, 309], "reference_model": 119, "reference_point": 209, "reference_solut": 209, "reference_trajectori": [75, 84], "reference_valu": 201, "refgen": [316, 317], "refin": [30, 33, 35, 53, 58, 63, 71, 127, 150, 162, 167, 171, 181, 182, 183, 184, 193, 199, 201, 215, 221, 224, 228, 229, 234, 236, 238, 246, 249, 256, 290, 291], "refined_bound": 133, "refined_result": 253, "reflect": [2, 19, 23, 91, 119, 154, 165, 202, 215, 221, 222, 225, 229, 230, 232, 233, 237, 238, 240, 242, 247, 253, 291, 315], "reflow": 143, "reformat": 25, "refresh": [31, 141, 142, 143, 144, 210], "refs_enhanc": 13, "refsign": 317, "reftraj": [316, 317], "reftrajectori": 317, "refus": 185, "reg": [193, 220, 246, 290], "reg_alpha": [220, 290], "reg_lambda": 35, "reg_scal": [213, 290], "regard": 221, "regardless": [56, 163, 216, 253], "regener": [31, 32, 298], "regex": [24, 32, 33, 73, 188, 298], "regex_impl": 297, "regex_pattern_refer": 297, "regim": [169, 201, 232, 283, 296, 310], "region": [1, 30, 52, 75, 84, 86, 91, 104, 112, 131, 133, 153, 157, 160, 162, 163, 164, 166, 167, 171, 181, 182, 191, 193, 195, 199, 202, 209, 218, 221, 224, 230, 232, 234, 237, 246, 279, 284, 290, 291, 293], "regist": [17, 29, 34, 49, 51, 56, 61, 63, 72, 76, 132, 146, 216, 278, 320], "register_compon": 216, "register_control": [56, 63, 76], "register_integr": [59, 61], "register_observ": [17, 72], "registr": [1, 30, 36, 38, 56, 76, 95, 116, 216, 244, 251, 278], "registri": [9, 10, 38, 44, 49, 52, 56, 59, 63, 72, 80, 91, 100, 103, 105, 109, 112, 114, 115, 116, 117, 273, 275, 278], "registry_bound": 251, "registry_info": 98, "registry_s": 115, "regress": [1, 10, 12, 22, 26, 32, 33, 39, 45, 63, 67, 75, 87, 88, 138, 139, 151, 175, 188, 190, 192, 194, 207, 242, 243, 245, 249, 250, 251, 255, 258, 261, 282, 283, 284, 291, 294, 298, 301, 310, 323], "regression_analysi": [75, 255], "regression_report": 75, "regression_testing_pass": 75, "regressions_detect": 75, "regressiontestingframework": 75, "regressiontestresult": 75, "regressor": 191, "regul": [36, 51, 84, 86, 107, 146, 164, 222, 223, 224, 229, 232, 233, 234, 235, 238, 280], "regular": [17, 22, 35, 51, 53, 55, 56, 59, 65, 67, 70, 72, 78, 81, 85, 89, 93, 98, 99, 100, 101, 103, 105, 106, 111, 123, 160, 172, 192, 193, 196, 198, 205, 206, 212, 216, 219, 243, 246, 253, 273, 274, 275, 276, 286, 297, 301, 310, 313], "regularis": [225, 226, 239, 240], "regularization_alpha": [51, 80, 213, 220], "regularization_count": 220, "regularization_paramet": 99, "regularization_r": [213, 220, 290], "regularized_invers": 35, "regularli": 167, "regulatori": [93, 176], "rehman": [227, 231], "reilli": [8, 17], "reinforc": [226, 229, 230, 232, 237, 238, 239, 259], "reiniti": 293, "reinstal": [124, 146, 150], "reject": [1, 5, 35, 36, 37, 50, 61, 65, 67, 75, 76, 77, 78, 79, 80, 85, 86, 97, 98, 112, 113, 123, 126, 131, 146, 156, 163, 164, 168, 177, 178, 183, 185, 191, 193, 195, 197, 199, 200, 205, 207, 208, 216, 222, 223, 224, 227, 230, 231, 233, 234, 235, 237, 242, 255, 265, 282, 283, 284, 287, 294, 299, 308, 310], "rejected_step": 61, "rejection_analysi": 75, "rejection_result": 75, "rejection_summari": 75, "rel": [5, 22, 26, 35, 45, 53, 55, 57, 59, 61, 65, 72, 73, 81, 84, 86, 94, 98, 119, 141, 154, 159, 163, 166, 170, 197, 200, 205, 209, 216, 222, 225, 226, 227, 230, 231, 232, 233, 237, 239, 240, 247, 251, 252, 256, 267, 269, 271, 290, 291, 310], "rel_ang": 81, "rel_dot": 81, "relat": [0, 4, 10, 17, 19, 25, 27, 28, 50, 51, 52, 56, 58, 65, 67, 79, 80, 84, 86, 95, 118, 122, 123, 127, 130, 131, 132, 133, 134, 135, 136, 139, 142, 164, 166, 167, 168, 170, 187, 197, 205, 217, 224, 225, 226, 232, 234, 239, 240, 243, 252, 255, 257, 261, 273, 280, 282, 291, 297, 310, 313], "relationship": [17, 52, 55, 56, 58, 59, 72, 98, 99, 112, 114, 200, 232, 251, 252, 253, 259, 263, 291, 297, 310, 316], "relative_chang": 171, "relative_energy_error": 209, "relative_improvement_threshold": 52, "relative_toler": 208, "relax": [84, 86, 120, 201, 276, 280, 290], "releas": [1, 5, 19, 25, 40, 55, 56, 78, 95, 107, 112, 117, 137, 138, 142, 143, 169, 182, 183, 213, 258, 266, 307, 312, 314], "relev": [57, 59, 125, 137, 138, 224, 234, 296, 298], "relevance_scor": 298, "reli": [106, 165, 197, 222, 226, 230, 232, 233, 237, 239], "reliability_metr": 252, "reliabl": [12, 16, 27, 36, 38, 40, 63, 65, 67, 89, 90, 98, 105, 106, 115, 119, 143, 166, 185, 188, 194, 199, 200, 202, 214, 222, 223, 226, 230, 232, 233, 235, 237, 239, 242, 243, 247, 250, 252, 253, 254, 255, 273, 278, 279, 280, 284, 300, 308, 313], "relianc": 201, "reload": [1, 8, 13, 31, 73, 90, 92, 115, 131, 137, 139, 141, 142, 144, 145, 243], "reload_config": 73, "rem": 70, "remain": [35, 38, 44, 45, 52, 59, 71, 73, 75, 77, 78, 84, 85, 86, 93, 97, 98, 105, 115, 119, 122, 145, 148, 150, 151, 164, 166, 177, 182, 194, 196, 200, 201, 204, 205, 216, 221, 222, 224, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 244, 249, 251, 285, 294, 300, 306], "remaining_phase_margin": 209, "remap": [24, 32], "remark": [222, 233, 298], "remedi": [232, 255], "rememb": [137, 232], "remind": 56, "remot": [30, 31, 185, 223, 235, 259], "remote_addr": 92, "remotesign": 146, "remov": [12, 22, 24, 25, 27, 28, 33, 55, 70, 71, 72, 73, 75, 91, 94, 98, 105, 106, 114, 117, 118, 120, 127, 139, 141, 148, 159, 202, 226, 227, 231, 239, 253, 254, 291, 298, 310], "removal_vers": 102, "remove_unnecessary_copies_bulk": 44, "removed_control": 73, "removed_in_vers": 98, "renam": [94, 98], "render": [1, 8, 15, 25, 26, 27, 28, 29, 30, 31, 65, 67, 72, 97, 129, 140, 143, 153, 154, 155, 156, 157, 159, 187, 188, 265, 297, 299, 301], "renderbasicchart": 28, "rendercontrolsign": 30, "renderlyapunovsurfac": 30, "renderparametersweep": 30, "renderphaseportrait": 30, "renderslidingsurfac": 30, "renderstabilityregion": 30, "renown": [222, 233], "rentrop": [230, 237], "reopen": 145, "reoptimize_control": [224, 234, 260], "reorder": 185, "repair": [190, 247], "repeat": [1, 22, 31, 35, 38, 40, 45, 53, 64, 65, 67, 84, 90, 98, 117, 196, 198, 199, 205, 208, 213, 216, 217, 220, 222, 224, 225, 233, 234, 240, 250, 290, 300, 310], "repeatedli": [222, 230, 232, 233, 237], "repetit": [24, 308, 309, 310], "replac": [20, 24, 25, 31, 32, 33, 39, 51, 67, 71, 72, 92, 98, 100, 107, 115, 127, 144, 156, 163, 165, 177, 178, 187, 196, 200, 204, 217, 222, 223, 226, 227, 229, 231, 232, 233, 235, 238, 239, 247, 251, 266, 269, 274, 280, 287, 294, 300, 310, 313], "replacement_guidelin": 12, "replic": [67, 169, 173, 203, 298], "replica": [63, 91, 92], "repo": [10, 37, 39, 40, 70, 90, 91, 282, 298, 300], "repo_root": 177, "repo_valid": [1, 5, 22, 23], "report": [1, 10, 12, 13, 22, 24, 32, 34, 35, 37, 40, 41, 53, 61, 63, 65, 68, 72, 75, 87, 88, 89, 93, 98, 102, 104, 108, 117, 119, 121, 122, 123, 124, 126, 127, 128, 136, 137, 138, 142, 148, 170, 176, 186, 190, 197, 207, 218, 223, 224, 227, 228, 230, 231, 232, 234, 235, 236, 237, 241, 248, 253, 254, 256, 257, 262, 280, 281, 283, 298, 299, 300, 302, 306, 313, 317, 320, 321, 323], "report_fil": 254, "report_gener": 9, "report_metadata": 298, "report_numerical_inst": 207, "report_path": 53, "report_stability_viol": 207, "report_timestamp": 102, "reports___init__": [24, 33], "repositori": [8, 22, 23, 25, 30, 31, 37, 64, 77, 78, 81, 85, 90, 92, 93, 95, 126, 127, 138, 141, 142, 144, 145, 147, 170, 182, 183, 185, 188, 243, 245, 254, 259, 293, 296, 300, 320, 321], "repr": 98, "repres": [12, 16, 19, 24, 36, 38, 40, 71, 76, 82, 83, 84, 107, 121, 156, 182, 191, 192, 198, 200, 205, 206, 209, 220, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 238, 239, 240, 246, 263, 274, 293, 300, 310, 321], "represent": [98, 127, 161, 163, 221, 225, 240, 249, 278, 287, 290, 297, 299, 316], "reproduc": [2, 9, 10, 16, 17, 22, 24, 31, 45, 53, 54, 58, 61, 64, 67, 76, 80, 89, 94, 107, 119, 120, 122, 127, 128, 144, 146, 148, 150, 154, 164, 165, 178, 179, 180, 184, 188, 190, 193, 216, 222, 223, 224, 225, 229, 233, 234, 235, 238, 240, 247, 250, 251, 253, 257, 265, 290, 291, 293, 298, 309, 310, 313, 318], "reproducibility_": 9, "reproduct": [122, 259, 320], "reproduction_guid": [122, 259, 320], "repuls": 162, "req": [31, 92], "request": [2, 16, 27, 31, 32, 63, 72, 89, 91, 92, 94, 98, 102, 120, 122, 127, 137, 142, 155, 177, 252, 270, 274, 323], "request_uri": 92, "requestanimationfram": [139, 140], "requir": [1, 5, 13, 14, 16, 17, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 44, 45, 49, 50, 52, 53, 59, 63, 68, 70, 71, 72, 73, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 97, 98, 100, 101, 103, 105, 106, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 127, 129, 131, 133, 134, 136, 137, 138, 139, 142, 146, 149, 150, 151, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 177, 178, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 196, 197, 199, 200, 201, 202, 208, 209, 210, 213, 216, 218, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 241, 242, 243, 246, 248, 253, 254, 255, 256, 259, 271, 273, 275, 276, 277, 278, 282, 283, 287, 291, 293, 294, 295, 297, 298, 299, 300, 303, 308, 309, 317, 318, 320, 322], "require_finit": [79, 208], "require_in_rang": [37, 199], "require_posit": [37, 79, 206, 208], "require_prob": 208, "required_act": 255, "required_additional_coverag": 39, "required_attr": [115, 117], "required_attribut": [117, 300], "required_confid": [309, 313], "required_control": [73, 107], "required_convergence_r": 75, "required_count": 106, "required_default": 108, "required_field": [72, 254], "required_kei": 114, "required_method": [63, 76], "required_metr": 93, "required_miss": [1, 5], "required_n": 178, "required_packag": [98, 117, 254], "required_param": [17, 49, 50, 52, 72, 80, 98, 100, 109, 114, 115, 116, 117, 273], "required_properti": 76, "required_r": 209, "required_reaching_r": [75, 209], "required_sect": [92, 117, 247, 254], "rerun": [90, 170], "resampl": 310, "research": [0, 1, 7, 8, 11, 15, 16, 19, 30, 32, 36, 53, 61, 65, 67, 69, 72, 80, 81, 82, 84, 89, 95, 98, 105, 106, 107, 111, 112, 122, 128, 129, 130, 131, 132, 134, 135, 146, 148, 149, 154, 160, 161, 163, 164, 165, 167, 168, 171, 177, 182, 183, 188, 189, 192, 194, 198, 200, 202, 205, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 230, 231, 233, 235, 236, 237, 239, 257, 259, 273, 275, 276, 277, 282, 283, 286, 287, 291, 299, 310, 313, 317, 318, 321, 323], "research_config": [275, 280], "research_hybrid_config": 273, "research_pipelin": 4, "research_qu": 280, "research_queu": 298, "researchg": [222, 224, 233, 234], "researchplan": 95, "researchplanspec": [82, 95, 189], "researchport": [222, 233], "reserv": [45, 61, 63, 91, 92, 144, 197, 258], "reset": [17, 24, 27, 28, 36, 38, 40, 51, 52, 55, 56, 61, 63, 64, 82, 83, 86, 98, 105, 115, 116, 117, 119, 120, 136, 152, 155, 157, 205, 210, 211, 215, 224, 234, 242, 244, 254, 301, 302], "reset_adapt": 17, "reset_index": [169, 318], "reset_monitor": 61, "reset_performance_stat": 98, "reset_st": 117, "reset_statist": 61, "resetallzoom": 28, "resetview": 30, "reshap": [44, 61, 84, 98, 107, 171, 248, 313], "residu": [35, 95, 123, 146, 164, 197, 222, 223, 232, 233, 235, 260, 285, 306, 310], "residual_gener": 9, "residual_norm": [118, 119, 120], "residual_st": [118, 119, 120], "residual_stat": 119, "residual_threshold": [118, 119, 120, 306], "residual_weight": [118, 119, 120], "resili": [93, 194, 222, 223, 233, 235, 241, 274, 278], "resist": 202, "resiz": 28, "resolut": [4, 16, 19, 20, 30, 31, 38, 40, 51, 52, 53, 55, 56, 62, 63, 65, 67, 71, 74, 76, 80, 90, 100, 101, 107, 116, 117, 118, 119, 120, 126, 153, 156, 165, 171, 184, 188, 213, 241, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 273, 274, 277, 280, 301, 317, 320], "resolution_tim": 111, "resolv": [21, 24, 29, 32, 38, 39, 40, 41, 51, 52, 56, 65, 67, 71, 72, 76, 80, 95, 98, 103, 107, 115, 117, 125, 126, 187, 190, 210, 218, 232, 242, 243, 244, 245, 249, 250, 253, 258, 261, 273, 274, 277, 290, 301, 318], "resolve_configur": 274, "resolve_dynamics_model": 274, "resolved_gain": [56, 114, 117], "resolved_param": 117, "resort": [77, 78, 84, 115, 220, 226, 239], "resourc": [10, 13, 15, 22, 31, 36, 39, 40, 55, 63, 64, 78, 84, 92, 93, 95, 98, 103, 104, 116, 117, 118, 122, 127, 138, 166, 170, 174, 175, 182, 184, 192, 210, 218, 225, 240, 242, 250, 254, 283, 284, 304, 308, 310, 320], "resource_metr": 98, "resource_util": 252, "respect": [70, 76, 156, 183, 201, 203, 224, 226, 227, 230, 231, 232, 234, 237, 239, 242, 249, 269, 288, 289, 309, 310, 317], "respond": [93, 146, 147, 199, 245], "respons": [1, 8, 12, 13, 17, 27, 28, 29, 30, 31, 37, 51, 53, 62, 64, 65, 67, 71, 75, 78, 80, 81, 84, 86, 90, 92, 93, 103, 109, 111, 112, 118, 119, 129, 132, 137, 139, 142, 143, 145, 146, 149, 150, 153, 154, 156, 159, 163, 164, 166, 168, 173, 175, 176, 177, 183, 192, 196, 199, 201, 204, 205, 216, 220, 222, 226, 229, 230, 233, 237, 238, 239, 243, 249, 251, 252, 255, 260, 265, 269, 290, 294, 303, 306, 310, 316, 317], "response_tim": 93, "rest": [93, 119, 140, 168, 269, 271, 286], "restart": [53, 63, 90, 91, 92, 93, 111, 144, 148, 162, 201, 202, 210, 245, 247, 253, 254, 261, 293], "restart_control_loop": 261, "restart_fract": [247, 254], "restart_indic": 247, "restart_particl": [247, 253], "restart_result": 93, "restart_servic": 93, "restartsec": 92, "restat": 122, "restor": [26, 31, 70, 88, 93, 98, 108, 119, 152, 155, 173, 190, 245, 254, 295, 300], "restore_application_data": 93, "restore_config_vers": 254, "restore_configuration_fil": 93, "restore_database_from_backup": 93, "restore_factory_vers": 98, "restore_from_backup": 108, "restrict": [15, 27, 119, 153, 200, 226, 239, 247], "restructur": [25, 73, 199], "restructured_config": 98, "result": [1, 8, 9, 12, 13, 17, 19, 22, 24, 30, 31, 32, 35, 36, 38, 39, 42, 50, 51, 52, 54, 56, 57, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 79, 82, 83, 84, 86, 87, 88, 90, 92, 93, 97, 98, 102, 105, 106, 114, 115, 116, 117, 119, 122, 124, 125, 127, 129, 130, 131, 132, 138, 143, 146, 148, 151, 154, 155, 156, 157, 161, 162, 163, 164, 166, 167, 182, 184, 190, 191, 192, 197, 200, 201, 202, 203, 209, 210, 211, 213, 215, 216, 217, 219, 220, 222, 223, 224, 226, 232, 233, 234, 235, 239, 242, 244, 247, 248, 249, 251, 253, 254, 256, 257, 261, 265, 276, 277, 279, 282, 283, 286, 287, 288, 293, 294, 297, 300, 301, 303, 308, 316, 319, 322], "result1": 207, "result2": [162, 207], "result3": 162, "result_adapt": 136, "result_adjust": 53, "result_class": 136, "result_combin": 207, "result_confid": 255, "result_contain": 171, "result_fil": [150, 169, 170, 253, 254], "result_larg": 199, "result_origin": 53, "result_smal": 199, "result_sta": 136, "result_tri": 53, "result_valid": 252, "resultcontain": [52, 59], "results_": [128, 149, 150, 167, 170], "results_a": 274, "results_adapt": [166, 170], "results_b": 274, "results_batch": 171, "results_class": [149, 166, 168, 170], "results_classical_trial_": 149, "results_comparison": 134, "results_dict": 136, "results_dir": [169, 178, 254, 255], "results_hybrid": [166, 170], "results_m": 128, "results_manag": 9, "results_reproduc": 320, "results_seed_": 254, "results_sta": [149, 166, 170], "results_sta_trial_": 149, "results_termin": 168, "results_visu": [316, 317], "results_yyyymmdd_hhmm": 170, "resum": [62, 148, 253, 320], "retain": [40, 165, 222, 223, 224, 226, 232, 233, 234, 235, 239, 242, 300], "retent": [13, 70, 173, 242, 291], "retri": [63, 70, 91, 92, 104, 115, 116, 117, 139, 142, 143, 144, 200, 254, 280], "retriev": [20, 51, 52, 58, 63, 98, 115, 208, 216], "retry_delai": 111, "retry_en": 252, "retry_recommend": 252, "rettab": [228, 236], "retun": [132, 222, 233], "return": [9, 10, 12, 19, 20, 24, 30, 31, 35, 38, 39, 41, 42, 44, 50, 52, 55, 56, 57, 58, 59, 61, 65, 67, 72, 73, 75, 76, 77, 82, 83, 84, 85, 86, 88, 92, 93, 94, 97, 98, 100, 102, 103, 105, 106, 114, 115, 117, 118, 119, 120, 125, 127, 131, 132, 133, 134, 135, 136, 140, 142, 143, 144, 148, 149, 150, 151, 158, 162, 164, 166, 167, 170, 171, 178, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 214, 216, 217, 218, 219, 220, 223, 225, 226, 229, 232, 235, 238, 239, 240, 244, 245, 246, 249, 250, 253, 254, 256, 258, 261, 268, 269, 271, 276, 277, 279, 283, 284, 287, 290, 291, 298, 301, 302, 306, 307, 308, 309, 310, 316, 320, 321], "return_100": 310, "return_detail": 112, "return_level": [310, 313], "return_metadata": 101, "return_period": 313, "return_typ": 278, "return_valu": 114, "returncod": 253, "reus": [2, 30, 31, 103, 105, 106, 117, 156, 193, 210, 248, 275, 290, 299], "reusabl": [25, 26, 67, 159, 266, 270, 297, 318], "rev": [10, 70, 91], "reveal": [40, 147, 156, 227, 228, 230, 231, 236, 237, 259, 268, 291], "revers": [24, 39, 86, 92, 102, 177, 215, 227, 231], "revert": [23, 142], "review": [0, 2, 4, 10, 11, 12, 13, 14, 15, 17, 19, 23, 44, 51, 55, 63, 73, 77, 78, 79, 80, 81, 85, 87, 89, 92, 93, 98, 102, 119, 124, 137, 142, 144, 164, 169, 170, 171, 187, 191, 192, 195, 197, 205, 213, 222, 223, 224, 227, 228, 229, 231, 233, 234, 235, 236, 238, 241, 247, 249, 251, 252, 256, 258, 270, 280, 282, 283, 284, 290, 299, 309, 321, 323], "revis": [126, 226, 239], "revolutionari": [1, 12, 27, 129, 152, 153, 155], "rewrit": [225, 240], "rewritten": 270, "reza": [224, 234], "rf": [90, 91, 92, 154], "rfc": 298, "rfid": [228, 236], "rgb": [67, 159, 303, 318], "rgba": [67, 140, 142, 144, 318], "rglob": 108, "rh": [41, 78, 232, 290], "rhif2012": 55, "rho": [53, 125, 195, 202, 246, 258, 279, 287, 291, 293, 294], "ri": 122, "riaz": [224, 234], "ribbon": 268, "rich": [165, 188, 220, 222, 223, 225, 233, 235, 240], "richard": 17, "richardson": [35, 200], "right": [15, 31, 53, 61, 84, 95, 119, 120, 127, 134, 140, 144, 145, 146, 152, 156, 157, 161, 163, 164, 169, 193, 195, 198, 200, 201, 202, 216, 217, 220, 221, 224, 225, 226, 227, 231, 232, 234, 239, 240, 246, 265, 288, 289, 290, 293, 295, 317], "rightarrow": [76, 191, 193, 232, 246, 293, 294], "rightward": 289, "rigid": [198, 221, 232, 290, 296], "rigor": [12, 19, 55, 67, 73, 75, 76, 98, 106, 112, 118, 127, 160, 169, 192, 194, 198, 199, 204, 205, 222, 224, 225, 233, 234, 240, 241, 242, 245, 247, 249, 251, 252, 255, 283, 284, 286, 287, 293, 298, 299, 300, 308, 309, 313], "rigor_scor": 209, "ring": 246, "rippl": 268, "ripplegrid": 268, "rise": [75, 159, 310], "rise_tim": [75, 159], "rise_time_met": 75, "rise_time_requir": 75, "risk": [10, 24, 38, 39, 53, 65, 71, 86, 88, 93, 120, 122, 147, 162, 166, 176, 178, 193, 199, 202, 207, 214, 218, 232, 241, 242, 243, 247, 252, 255, 261, 290, 291, 298, 308, 318], "risk_analysi": [310, 313], "risk_assess": 255, "risk_factor": 255, "risk_level": [255, 313], "riskassess": 255, "riskassessmentengin": 255, "riskfactor": 255, "riski": 162, "risklevel": 255, "riter": 277, "rk": [59, 61], "rk2": 61, "rk23": 203, "rk4": [35, 59, 61, 146, 150, 199, 203, 209, 216, 217, 232, 278, 282, 283, 284, 290], "rk45": [8, 150, 199, 203, 216, 217, 219, 220, 232, 283], "rk45_adaptive_step": 200, "rk4_step": [35, 200], "rk4integr": [209, 216], "rk5": 290, "rl": [70, 224, 234], "rlock": [17, 38, 51, 52, 56, 80, 98, 100, 105, 116, 117], "rm": [70, 77, 78, 81, 85, 90, 91, 92, 95, 107, 127, 136, 146, 147, 149, 154, 164, 193, 197, 216, 245, 254, 260, 265, 310], "rmem_max": 92, "rms_control": [136, 149, 164], "rms_u": 68, "rms_u_norm": 68, "rmse": [12, 97, 227, 230, 231, 237, 310], "rn": 125, "rng": [17, 19, 44, 53, 61, 68, 76, 203, 216, 224, 234, 291], "ro": [63, 92, 149, 164], "roa": 232, "roadmap": [0, 4, 11, 36, 38, 71, 95, 120, 127, 187, 190, 250, 266], "robert": [2, 17], "robodk": [225, 240], "robot": [161, 166, 198, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 256, 257, 320], "robust": [9, 10, 11, 12, 13, 16, 19, 20, 22, 25, 36, 38, 39, 40, 50, 51, 52, 54, 55, 56, 57, 58, 63, 65, 67, 69, 72, 74, 75, 76, 81, 82, 83, 85, 86, 88, 92, 93, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 111, 113, 115, 117, 119, 120, 123, 124, 125, 127, 128, 129, 132, 146, 148, 149, 151, 156, 158, 160, 162, 164, 167, 168, 170, 171, 172, 177, 178, 179, 181, 182, 183, 184, 185, 189, 190, 191, 192, 199, 200, 202, 204, 206, 207, 214, 215, 216, 217, 218, 220, 223, 224, 227, 230, 231, 232, 234, 235, 237, 242, 243, 244, 245, 246, 247, 249, 250, 253, 261, 265, 273, 277, 279, 282, 283, 285, 286, 287, 293, 294, 297, 300, 301, 303, 313, 320, 323], "robust_adaptive_config": 273, "robust_config": 280, "robust_controller_cr": [105, 115], "robust_controller_factori": 76, "robust_cost": [133, 253], "robust_factori": 117, "robust_fit": 104, "robust_fitness_funct": [49, 117, 248], "robust_gain": [133, 253], "robust_invers": 35, "robust_magnitud": 78, "robust_perform": 75, "robust_performance_maintain": 75, "robust_pso_fitness_funct": 112, "robust_pso_optim": [104, 280], "robust_ratio": [82, 83], "robust_result": 280, "robustfactoryintegr": 117, "robustli": 232, "robustlinearalgebra": 35, "robustness_analysi": [75, 112, 279], "robustness_bound": 287, "robustness_comparison": 310, "robustness_cost": 113, "robustness_error": 113, "robustness_improv": 52, "robustness_index": 248, "robustness_margin": [75, 248], "robustness_metr": [248, 310], "robustness_object": 293, "robustness_prob": 274, "robustness_properti": 255, "robustness_rank": 310, "robustness_result": 75, "robustness_scenario": 75, "robustness_scor": [248, 253, 283, 310], "robustness_studi": 127, "robustness_study_arch": 169, "robustness_summari": [75, 169], "robustness_test": [101, 113, 150], "robustness_verifi": 279, "robustnessanalyz": 25, "robustnessscenarioresult": 75, "robustnesstestcas": 75, "robustnesstestresult": 75, "robustnesstestsuit": 75, "roc": 119, "rod": [161, 198, 220], "roi": [11, 55, 77, 226, 239], "role": [17, 30, 31, 58, 69, 93, 108, 164, 196, 201, 229, 232, 238, 241, 288], "role_unknown": [232, 288], "roll": [98, 163, 210, 268, 318], "rollback": [23, 33, 70, 98, 102, 138, 174, 175, 241, 243, 253], "rollback_canari": 98, "rollback_data": 98, "rollback_deploy": 98, "rollback_plan": 255, "rollback_trigg": 255, "rollinggalleri": 268, "rollingupd": 92, "rollout": [23, 92, 98, 242], "room": 31, "root": [11, 22, 26, 31, 32, 33, 34, 35, 38, 39, 40, 65, 67, 70, 77, 78, 79, 82, 83, 85, 91, 92, 95, 97, 108, 128, 129, 146, 147, 150, 151, 163, 164, 165, 170, 190, 193, 197, 204, 205, 206, 222, 224, 226, 227, 230, 231, 232, 233, 234, 237, 239, 244, 246, 251, 254, 261, 265, 272, 293, 297, 301, 302, 310, 323], "rosen": 291, "rosenbrock": [193, 246, 291], "rossum": [2, 297], "rot": 198, "rotari": [202, 224, 232, 234], "rotat": [1, 30, 92, 98, 129, 134, 152, 153, 156, 163, 164, 169, 178, 198, 223, 225, 226, 227, 231, 235, 239, 240, 242, 248, 251, 253, 254, 268, 295], "rotate_log": 98, "rotatingfilehandl": 254, "rotatingtext": 268, "rough": [53, 98, 112, 152, 201], "roughli": [228, 236], "round": [22, 35, 61, 84, 98, 169, 177, 178, 185, 205, 209, 224, 226, 234, 239, 245, 248], "rounded_gain": 98, "roundoff": 290, "roundoff_error": 209, "rout": [111, 177], "routh": 291, "routin": [223, 224, 229, 232, 234, 235, 238, 306], "row": [30, 67, 84, 149, 257, 259, 293, 294, 295], "rpo": 173, "rsa": 92, "rss": [17, 93, 98, 107, 114, 115, 117, 210, 211, 251, 253, 254, 274, 283], "rst": [13, 28, 32, 65, 97, 129, 132, 134, 135, 164, 187, 216, 232, 288], "rt": 278, "rt_control": 321, "rtd": [15, 141, 188], "rto": 173, "rtol": [61, 150, 199, 200, 208, 216, 219, 220, 232, 283, 287, 290], "ru": 70, "rubric": [58, 59, 187], "ruff": [10, 25, 67, 94], "rug": 201, "ruikang": [224, 234], "rule": [1, 12, 19, 23, 24, 29, 33, 44, 46, 49, 50, 52, 56, 57, 58, 82, 84, 89, 92, 93, 98, 100, 103, 107, 115, 119, 120, 144, 148, 161, 163, 177, 192, 197, 199, 200, 202, 207, 229, 238, 243, 252, 274, 291, 298, 309, 310], "rule_fil": 92, "run": [1, 4, 9, 10, 11, 12, 13, 14, 17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 37, 38, 39, 44, 50, 51, 52, 57, 58, 59, 62, 65, 67, 68, 72, 75, 76, 77, 81, 82, 83, 84, 87, 88, 90, 92, 93, 94, 95, 96, 98, 107, 114, 116, 118, 119, 122, 127, 129, 130, 131, 132, 133, 134, 136, 138, 139, 141, 142, 144, 146, 147, 148, 149, 152, 153, 154, 156, 157, 158, 162, 164, 166, 168, 171, 178, 180, 182, 191, 192, 193, 200, 201, 202, 203, 207, 209, 213, 215, 216, 217, 222, 223, 224, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 242, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 265, 266, 270, 276, 277, 279, 284, 285, 291, 293, 297, 298, 299, 300, 304, 306, 308, 309, 315, 316, 322], "run1": 150, "run2": 150, "run_5s_simul": 44, "run_all_demonstr": 72, "run_batch_simul": [17, 133, 135], "run_classical_smc_simul": 78, "run_client": 170, "run_complete_integration_test": 321, "run_comprehensive_check": 254, "run_comprehensive_health_check": 92, "run_crossfield_test": 23, "run_experi": 320, "run_extended_simul": 93, "run_fault_scenario": 119, "run_full_integration_suit": 98, "run_full_valid": [98, 298], "run_func": [148, 150], "run_hil_fault_detect": 119, "run_hybrid_simul": 81, "run_load_test": 93, "run_migration_test_suit": 98, "run_model_comparison": 285, "run_monitored_pso_optim": 104, "run_monitored_simul": 104, "run_monte_carlo": 169, "run_monte_carlo_pso_analysi": 283, "run_multi_objective_pso": 248, "run_optim": 117, "run_pend": 111, "run_pre_deployment_check": 321, "run_production_loop": 321, "run_pso_optim": [17, 107], "run_pso_tri": 148, "run_pso_with_alpha": 167, "run_quality_check": 94, "run_quality_g": 87, "run_reproduct": 320, "run_safety_test": 321, "run_serv": 170, "run_simul": [44, 52, 59, 81, 82, 83, 98, 107, 116, 136, 150, 159, 170, 191, 199, 229, 238, 252, 310, 321], "run_simulation_with_control": [104, 107], "run_simulation_with_diagnost": 321, "run_simulation_with_error_handl": 112, "run_simulation_with_monitor": 321, "run_single_iteration_with_tim": 209, "run_single_simul": 150, "run_single_tri": 320, "run_test": [22, 121, 124, 125, 126, 128, 129, 151, 186], "run_test_categori": 321, "run_trial": 68, "run_validation_path": 255, "run_vectorized_simul": 278, "run_with_monitor": 321, "runasnonroot": 92, "runasus": 92, "runawai": [226, 239, 242], "runbook": [93, 175], "rung": [69, 199, 216, 224, 227, 231, 232, 234, 246, 295], "runge_kutta": 9, "runge_kutta_4": 61, "rungekutta2": [59, 61], "rungekutta4": [59, 61], "runnabl": [1, 8, 10, 14, 19, 20, 27, 37, 38, 39, 40, 41, 42, 44, 50, 52, 56, 65, 67, 71, 73, 75, 76, 77, 81, 82, 83, 84, 85, 86, 92, 93, 96, 97, 98, 105, 106, 115, 118, 119, 120, 127, 130, 131, 132, 133, 134, 148, 149, 164, 166, 167, 170, 171, 182, 183, 187, 188, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 213, 214, 216, 220, 242, 246, 249, 253, 254, 257, 261, 265, 266, 277, 279, 283, 290, 291, 293, 299, 301, 302, 308, 309, 318, 322], "runner": [22, 50, 52, 61, 67, 87, 107, 116, 128, 130, 131, 132, 133, 134, 135, 136, 150, 151, 153, 155, 199, 215, 216, 217, 224, 234, 252, 316, 317], "runner_accur": 135, "runner_ful": 134, "runner_simpl": 134, "runsim": 316, "runtim": [1, 10, 14, 17, 27, 28, 31, 42, 56, 65, 76, 77, 78, 82, 83, 84, 85, 86, 91, 98, 100, 112, 117, 124, 176, 196, 216, 221, 241, 243, 244, 245, 247, 283, 284, 297, 302, 311, 320], "runtime_safety_check": 261, "runtime_st": [40, 301], "runtimeconfigvalid": 73, "runtimeerror": [22, 35, 49, 91, 98, 115, 116, 117, 275, 282, 301], "runtimewarn": [35, 119, 124, 284], "russel": [2, 123, 257], "rw": 144, "r\u00f6ck": [86, 227, 230, 231, 237], "r\u2081": [97, 162, 202, 215, 279], "r\u2082": [97, 162, 202, 215, 279], "s0": [75, 125, 209, 287], "s1": [30, 198, 199, 201, 225, 240], "s10033": [224, 234], "s12": [198, 225, 240], "s2": [30, 198, 199, 225, 240], "s41586": [8, 15, 17], "s41592": [8, 15], "s41598": [224, 234], "s44147": [224, 234], "s_": [53, 81, 119, 120, 191, 201, 232, 245, 261, 288, 290, 295, 297, 299], "s_0": [119, 193, 290], "s_1": [288, 295], "s_2": [288, 295], "s_combin": 199, "s_d": 310, "s_dot": [75, 81, 125, 204, 209], "s_eq": 249, "s_histori": 81, "s_i": [88, 201, 290, 291, 293, 310], "s_inv": [35, 290], "s_j": 201, "s_k": [119, 120, 290], "s_matrix": 258, "s_origin": 199, "s_scale": 199, "s_t": 201, "s_traj": 287, "s_trajectori": 287, "s_valu": [81, 199], "s_vec": 258, "s_zoom": 164, "sacrif": [222, 229, 233, 238], "sacrific": [53, 253, 297], "safari": [1, 27, 28, 30, 31, 137, 139, 140, 141, 142, 143, 144, 145, 152, 153, 156, 157, 265], "safe": [2, 8, 15, 33, 35, 37, 38, 40, 41, 45, 52, 53, 56, 57, 58, 61, 62, 65, 67, 68, 73, 75, 81, 82, 84, 86, 93, 95, 98, 106, 108, 109, 114, 117, 118, 119, 131, 132, 146, 158, 185, 187, 189, 193, 195, 198, 199, 205, 210, 212, 216, 217, 219, 220, 224, 226, 232, 234, 239, 242, 243, 245, 247, 248, 249, 255, 260, 261, 275, 276, 277, 280, 284, 285, 301, 306, 310, 318], "safe_controller_cr": [51, 106, 277], "safe_create_control": 117, "safe_divid": [82, 193], "safe_equilibrium": 118, "safe_exp": [82, 193], "safe_fallback": 84, "safe_gain": 249, "safe_invers": 35, "safe_invert_mass_matrix": 198, "safe_load": [63, 73, 92, 98, 102, 104, 107, 117, 131, 169, 252, 254], "safe_log": 79, "safe_mod": 185, "safe_mode_control": 118, "safe_norm": [82, 193], "safe_oper": [9, 82, 193, 212], "safe_param": 261, "safe_reciproc": 79, "safe_shutdown_sequ": 119, "safe_solv": 35, "safe_sqrt": [82, 193], "safeguard": [27, 86, 199, 205, 225, 240], "safer": 86, "safeti": [9, 17, 22, 36, 38, 39, 40, 44, 45, 50, 51, 52, 53, 55, 56, 68, 71, 75, 76, 78, 80, 81, 82, 84, 87, 88, 92, 95, 100, 101, 102, 105, 106, 108, 114, 115, 116, 118, 120, 127, 132, 146, 148, 151, 158, 166, 167, 168, 171, 175, 177, 180, 183, 193, 199, 200, 205, 208, 209, 213, 216, 217, 218, 220, 224, 234, 241, 242, 244, 247, 248, 253, 255, 260, 275, 277, 282, 283, 300, 301, 308, 309, 317, 318, 321], "safety_act": 185, "safety_check": 321, "safety_config": 277, "safety_constraints_satisfi": 75, "safety_coverag": 39, "safety_crit": [39, 75, 242, 255], "safety_critical_chang": 102, "safety_critical_compli": 255, "safety_critical_coverag": 255, "safety_critical_coverage_fail": 255, "safety_critical_coverage_report": 190, "safety_critical_ev": 255, "safety_critical_requirements_met": 75, "safety_en": 278, "safety_factor": 61, "safety_guard": [9, 39, 61, 171, 203, 317], "safety_limit": [101, 242, 247, 252, 277, 321], "safety_margin": [98, 103], "safety_mod": 321, "safety_modul": 261, "safety_monitor": 101, "safety_requir": 119, "safety_requirements_met": 75, "safety_statu": 261, "safety_system": [93, 321], "safety_system_integr": 321, "safety_system_statu": 321, "safety_system_validation_protocol": [243, 261], "safety_test": [93, 321], "safety_threshold": 313, "safety_valid": 247, "safety_validation_protocol": 93, "safety_viol": [37, 247, 249, 252], "safetyboundsenforc": 249, "safetycompon": 261, "safetycriticaltestsuit": 75, "safetydashboard": 261, "safetyguard": 317, "safetyintegrationtest": 261, "safetylevel": 261, "safetymanag": 119, "safetyvalid": 321, "safetyvalidationerror": 93, "safetyviolationerror": 61, "saha": [226, 239], "sai": [127, 267, 269, 271], "saidi": [223, 235], "sale": 159, "saleem": [226, 239], "salib": 201, "saltelli": [201, 310], "same": [5, 10, 15, 17, 24, 25, 26, 30, 31, 33, 51, 56, 61, 65, 67, 76, 77, 80, 84, 85, 86, 93, 98, 103, 112, 114, 117, 119, 123, 124, 127, 132, 134, 135, 140, 143, 150, 154, 156, 162, 166, 167, 170, 177, 197, 203, 205, 209, 220, 224, 225, 226, 227, 230, 231, 234, 237, 239, 240, 249, 250, 253, 265, 275, 277, 279, 285, 290, 310, 313, 318, 320], "sampl": [17, 24, 33, 45, 51, 56, 61, 62, 65, 67, 68, 71, 73, 74, 76, 81, 97, 98, 100, 101, 103, 108, 111, 112, 118, 120, 127, 135, 149, 150, 159, 162, 165, 166, 169, 171, 177, 182, 184, 191, 193, 195, 201, 202, 205, 216, 222, 224, 227, 230, 231, 232, 233, 234, 237, 246, 253, 254, 274, 279, 282, 283, 285, 294, 298, 299, 306, 308, 312, 317, 320, 321], "sample_gain": 76, "sample_initial_st": [228, 236], "sample_perform": 253, "sample_physics_uniform": [228, 236], "sample_s": [111, 298], "sampler": 202, "sampling_method": [310, 313], "sampling_r": 101, "sampling_tim": [98, 101], "samplingr": 317, "samsung": 31, "san": 159, "sandbox": 153, "sanit": [28, 61, 93, 127, 146, 164, 165, 218, 220], "saniti": [184, 208], "sanitize_input": 136, "sanitize_st": 61, "sano": 8, "sarah": 123, "sastri": [81, 205, 227, 230, 231, 237], "sat": [36, 76, 78, 79, 81, 85, 98, 156, 163, 191, 195, 197, 205, 206, 224, 226, 227, 229, 231, 232, 234, 238, 239, 279, 287, 289, 290, 294], "sat_": 76, "sat_limit": 72, "sat_monitor": 136, "sat_sigma": [78, 290], "sat_soft_width": [51, 55, 56, 81, 226, 239, 273, 275], "sat_valu": 195, "satisfact": [75, 84, 107, 156, 209, 218, 242, 275, 279], "satisfi": [52, 53, 65, 72, 97, 98, 99, 103, 112, 119, 124, 125, 126, 134, 148, 150, 163, 166, 183, 191, 193, 194, 196, 199, 201, 202, 204, 205, 206, 208, 209, 226, 232, 239, 245, 249, 251, 252, 253, 273, 274, 275, 277, 278, 283, 284, 285, 287, 290, 291, 293, 294, 299, 313], "satterthwait": 97, "satur": [9, 22, 35, 37, 39, 45, 49, 51, 53, 55, 56, 59, 61, 62, 63, 65, 67, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 88, 93, 97, 98, 100, 101, 115, 116, 118, 125, 127, 130, 131, 133, 135, 146, 148, 151, 156, 161, 162, 163, 164, 165, 166, 168, 182, 183, 185, 191, 192, 194, 196, 197, 199, 201, 203, 205, 206, 208, 216, 221, 222, 223, 224, 227, 229, 231, 232, 233, 234, 235, 238, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 272, 273, 275, 279, 287, 289, 290, 296, 306, 310], "saturate_adapt": 195, "saturate_control_sign": 261, "saturate_linear": 78, "saturate_tanh": 78, "saturate_with_hysteresi": 195, "saturated_count": 136, "saturation_analysi": 75, "saturation_appli": 101, "saturation_limit": [73, 99], "saturation_percentag": [133, 136], "saturation_ratio": 248, "saturation_test_result": 75, "saturation_viol": 75, "saturationind": 261, "saturationmonitor": 136, "satz": 298, "save": [1, 8, 19, 22, 29, 30, 39, 44, 52, 57, 61, 63, 68, 70, 72, 91, 102, 104, 117, 121, 124, 127, 129, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 155, 156, 166, 167, 168, 177, 178, 182, 183, 189, 193, 216, 232, 250, 253, 254, 265, 267, 280, 282, 283, 290, 297, 298, 301, 303, 304, 320, 321, 323], "save_adaptation_data": 321, "save_checkpoint": 253, "save_config": 72, "save_config_vers": 254, "save_intermediate_result": 104, "save_metrics_histori": 39, "save_optimization_histori": 104, "save_optimization_result": 321, "save_path": 136, "save_performance_baselin": 93, "save_pso_config_to_yaml": 104, "save_report": 254, "savefig": [52, 61, 136, 149, 169, 171, 177, 178, 215, 216, 248, 253, 254, 280, 283, 284, 320], "savemat": 149, "savest": 141, "savitzki": 35, "saw": [228, 236], "sb": 317, "sc": [70, 84], "scalabl": [16, 36, 45, 54, 63, 98, 103, 107, 175, 182, 184, 218, 245, 250, 293, 298, 310, 317, 320], "scalar": [53, 61, 78, 79, 84, 86, 98, 105, 161, 200, 201, 203, 216, 220, 222, 225, 227, 230, 231, 233, 237, 240, 258, 279, 287, 293], "scale": [19, 29, 30, 31, 45, 52, 58, 63, 65, 67, 73, 78, 81, 84, 86, 91, 92, 103, 104, 107, 111, 127, 148, 149, 156, 159, 167, 169, 171, 178, 182, 193, 195, 196, 197, 199, 200, 201, 202, 206, 213, 215, 216, 218, 226, 232, 239, 242, 247, 248, 249, 250, 265, 272, 283, 291, 298, 299, 303, 310, 313], "scale_factor": [213, 249], "scaling_factor": 35, "scaling_governor": 92, "scan": [12, 14, 31, 33, 91, 93, 98, 122, 254, 284, 298], "scan_for_result": 254, "scanner": 117, "scannererror": 117, "scatter": [27, 133, 153, 159, 192, 215, 253, 254], "scenario": [1, 16, 20, 30, 31, 36, 39, 40, 49, 53, 54, 56, 59, 65, 68, 75, 77, 78, 81, 85, 93, 98, 102, 107, 108, 112, 113, 114, 117, 119, 127, 133, 134, 135, 150, 156, 161, 163, 165, 167, 171, 176, 178, 179, 181, 182, 188, 192, 209, 216, 228, 229, 236, 238, 242, 248, 254, 265, 274, 277, 282, 285, 293, 298, 308, 309, 321], "scenario1": [148, 310], "scenario2": [148, 310], "scenario3": [148, 310], "scenario_cost": 113, "scenario_dim": 313, "scenario_nam": [112, 113, 114, 169], "scenario_perform": 112, "scenario_result": [75, 112], "scenario_scor": 112, "scenario_viol": 75, "scenario_weight": 113, "scenarios_config": 169, "scenarios_fil": 169, "scene": 152, "schedul": [19, 23, 35, 53, 65, 67, 93, 102, 111, 143, 147, 174, 199, 209, 216, 226, 239, 241, 247, 253, 254, 259, 291, 293, 298], "schedule_mainten": 111, "schema": [1, 7, 9, 19, 22, 23, 34, 38, 50, 52, 63, 93, 95, 98, 110, 127, 130, 132, 134, 158, 170, 189, 192, 194, 199, 213, 216, 217, 218, 232, 242, 243, 244, 245, 250, 252, 254, 297, 299], "schema_class": 73, "schema_extra": 278, "schema_valid": [63, 254], "schema_vers": [1, 5, 22, 247], "schema_version_enforc": 22, "schemat": 232, "scheme": [28, 30, 31, 35, 67, 92, 222, 223, 227, 229, 230, 231, 232, 233, 235, 237, 238, 269, 295, 318], "schmitt": 120, "scholar": [4, 298], "school": [127, 162, 199, 202, 222, 223, 233, 235, 288], "schtask": 70, "scienc": [8, 78, 169, 202, 205, 224, 228, 234, 236, 246, 290, 291, 310], "scientif": [2, 16, 17, 19, 22, 61, 63, 67, 69, 89, 98, 106, 116, 146, 169, 193, 198, 199, 218, 224, 234, 242, 250, 256, 282, 283, 290, 298, 299, 310, 318, 323], "scientist": [282, 310, 323], "scipi": [2, 15, 17, 24, 27, 53, 67, 68, 84, 89, 92, 98, 104, 112, 117, 119, 124, 128, 146, 149, 150, 153, 154, 155, 169, 178, 187, 188, 200, 202, 219, 220, 230, 232, 237, 242, 248, 253, 254, 259, 274, 287, 290, 291, 310, 313, 316, 317, 320, 321], "scm": 146, "scope": [16, 24, 31, 34, 38, 40, 59, 70, 71, 81, 121, 122, 146, 188, 192, 224, 232, 234, 246, 253, 254, 266, 282, 283, 298, 302], "scope_stack": 297, "score": [10, 19, 24, 31, 38, 39, 40, 44, 52, 55, 58, 59, 67, 68, 71, 88, 92, 93, 98, 102, 112, 119, 191, 199, 209, 213, 243, 244, 247, 248, 254, 255, 283, 298, 301, 308, 309, 321], "score1": 310, "score2": 310, "score_success_correl": 255, "scorecard": 67, "scrambl": [268, 271], "scrambledtext": [268, 271], "scrape_config": 92, "scrape_interv": 92, "scratch": [127, 129, 168], "screen": [1, 28, 30, 31, 142, 145, 154, 156, 267, 269, 271, 310], "screencast": 309, "screenshot": [1, 45, 59, 74, 137, 138, 142, 144, 145, 147, 150, 165], "script": [4, 10, 11, 12, 14, 16, 21, 22, 25, 26, 31, 40, 55, 65, 70, 73, 87, 88, 89, 93, 94, 98, 108, 117, 120, 121, 122, 123, 127, 128, 130, 138, 142, 146, 159, 164, 165, 169, 170, 177, 182, 183, 188, 192, 194, 221, 223, 224, 229, 234, 235, 238, 243, 253, 255, 259, 260, 265, 282, 285, 287, 291, 299, 302, 304, 309, 313, 322, 323], "scroll": [30, 145, 152, 156, 263, 268], "scrollfloat": 268, "scrollrev": 268, "scrollstack": 268, "scrollveloc": 268, "se": [178, 317], "seaborn": [169, 320], "seamless": [12, 30, 31, 156], "seamlessli": [12, 61, 67, 116, 145, 156, 185, 269, 270, 306], "search": [4, 13, 17, 19, 24, 25, 30, 32, 36, 41, 45, 51, 53, 55, 56, 57, 58, 65, 70, 73, 74, 77, 78, 81, 98, 102, 117, 122, 125, 130, 133, 144, 148, 156, 167, 170, 171, 193, 199, 215, 216, 220, 222, 223, 224, 232, 233, 234, 235, 243, 246, 247, 251, 253, 254, 280, 290, 293, 299, 313, 315, 317, 318, 320], "search_ratio": 73, "search_spac": 293, "sec": [98, 198, 200, 215, 297, 298, 317], "second": [7, 8, 12, 14, 17, 22, 27, 28, 31, 34, 49, 50, 51, 53, 55, 56, 58, 61, 67, 70, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 92, 93, 94, 97, 98, 99, 103, 105, 107, 109, 115, 116, 117, 119, 124, 125, 126, 131, 132, 133, 134, 135, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 160, 161, 163, 164, 166, 167, 170, 171, 177, 178, 182, 183, 191, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 265, 272, 273, 274, 275, 276, 282, 283, 287, 289, 290, 293, 294, 295, 297, 299, 308, 310, 318, 320, 321, 323], "secondari": [30, 53, 90, 98, 113, 119, 148, 161, 167, 169, 188, 255, 261], "secondary_fdi": 119, "section": [1, 8, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27, 28, 29, 30, 32, 33, 42, 45, 51, 52, 56, 58, 61, 66, 67, 72, 73, 74, 82, 83, 86, 92, 96, 97, 98, 117, 119, 131, 132, 134, 135, 137, 138, 144, 145, 147, 153, 154, 160, 164, 165, 166, 167, 170, 187, 199, 208, 214, 223, 224, 227, 231, 232, 234, 235, 241, 243, 247, 260, 262, 263, 264, 266, 268, 269, 277, 287, 288, 289, 290, 298, 302, 305, 308, 322, 323], "secur": [16, 27, 36, 89, 98, 139, 175, 218, 242, 284, 315], "secure_password": 63, "secure_password_change_m": 92, "security_report": 93, "security_scan": 98, "securitycontext": 92, "sed": [92, 254], "see": [0, 2, 4, 6, 8, 10, 12, 13, 15, 17, 18, 21, 22, 33, 34, 41, 47, 51, 53, 55, 58, 62, 64, 65, 67, 74, 77, 78, 79, 80, 82, 83, 89, 91, 98, 118, 121, 122, 124, 125, 127, 129, 132, 138, 140, 141, 142, 143, 144, 147, 152, 155, 156, 157, 161, 163, 164, 166, 167, 170, 186, 189, 193, 197, 212, 214, 220, 221, 225, 226, 229, 238, 239, 240, 241, 259, 264, 266, 269, 270, 276, 281, 286, 288, 289, 290, 291, 296, 297, 299, 304, 308, 310, 311, 315, 316, 319, 320, 321, 323], "seeber": 125, "seed": [9, 17, 19, 22, 34, 43, 45, 51, 52, 58, 61, 72, 76, 80, 89, 94, 124, 126, 127, 128, 129, 146, 148, 150, 164, 165, 169, 170, 178, 188, 199, 203, 215, 216, 217, 224, 229, 234, 238, 247, 251, 253, 254, 265, 291, 293, 300, 309, 310, 313, 318, 320, 321], "seed_gener": 169, "seem": 122, "seemann": [2, 17], "seemann2011depend": 17, "seemingli": [40, 300], "seen": [166, 202], "segment": 177, "segreg": [17, 71], "seibert": [8, 17], "select": [1, 2, 22, 24, 25, 29, 30, 31, 32, 35, 37, 42, 45, 50, 52, 55, 57, 58, 59, 60, 64, 65, 67, 69, 70, 74, 78, 86, 88, 90, 103, 106, 109, 118, 119, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 144, 146, 148, 150, 153, 156, 157, 160, 167, 168, 169, 170, 174, 179, 181, 184, 192, 193, 196, 199, 205, 206, 213, 215, 216, 221, 222, 223, 224, 226, 230, 232, 233, 234, 235, 237, 239, 246, 247, 249, 251, 253, 256, 259, 266, 273, 275, 280, 286, 293, 298, 304, 306, 308, 309, 316, 317, 322], "select_best_control": [106, 321], "select_best_overall_solut": [104, 112], "select_best_tradeoff_solut": 248, "select_learning_exemplar": 202, "select_smc_control": 42, "select_solut": 253, "selected_backup": 254, "selected_solut": 253, "selective_coverage_collect": 88, "selector": [1, 22, 59, 63, 91, 92, 138, 139, 144, 186, 265, 321], "self": [10, 19, 35, 36, 37, 38, 39, 40, 41, 44, 45, 52, 55, 56, 67, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 92, 93, 94, 97, 98, 102, 103, 105, 106, 107, 114, 115, 117, 118, 119, 120, 123, 125, 127, 131, 132, 134, 135, 147, 151, 162, 166, 193, 196, 197, 199, 201, 202, 203, 204, 205, 208, 209, 210, 211, 214, 216, 218, 220, 226, 232, 239, 242, 246, 249, 253, 254, 256, 258, 261, 273, 275, 277, 279, 290, 298, 299, 301, 302, 313, 320, 321], "sell": 15, "sem": [149, 178, 320], "semant": [1, 4, 5, 13, 30, 31, 44, 73, 98, 138, 139, 156, 159, 187, 188, 298, 299], "semi": [55, 56, 224, 226, 234, 239, 260], "semi_implicit": [226, 239], "semilogi": [167, 193, 202, 215], "semin": [0, 205, 256], "semver": [5, 23], "send": [98, 119, 177, 185, 223, 224, 234, 235, 254], "send_fault_statu": 119, "send_notif": 98, "sendto": 185, "seneviratn": [223, 235], "senior": 218, "sens": [49, 316, 317], "sensibl": [30, 80, 115, 131, 167, 196], "sensit": [11, 17, 30, 36, 52, 57, 58, 65, 67, 68, 77, 78, 93, 103, 117, 118, 127, 129, 130, 132, 146, 156, 157, 166, 167, 171, 172, 175, 181, 183, 189, 191, 193, 194, 197, 199, 202, 204, 209, 228, 229, 230, 232, 236, 237, 238, 245, 246, 247, 259, 260, 261, 265, 268, 274, 283, 284, 291, 293, 297, 303, 310, 313, 316], "sensitivity_analysi": [260, 293, 310, 313], "sensitivity_matrix": 274, "sensitivity_method": [310, 313], "sensitivity_result": 68, "sensitivityanalysisstrategi": 17, "sensor": [9, 22, 45, 62, 63, 74, 77, 93, 95, 112, 131, 170, 183, 194, 199, 205, 209, 221, 222, 223, 224, 227, 230, 231, 232, 233, 234, 235, 237, 253, 259, 260, 290, 294, 296, 316], "sensor_bia": 119, "sensor_data_qu": 321, "sensor_failur": [93, 185], "sensor_interfac": 63, "sensor_lat": [209, 216], "sensor_nois": [81, 170], "sensor_noise_std": [74, 131, 177, 185, 253], "sensor_read": 208, "sensor_valid": 261, "sensorsconfig": 9, "sentenc": [10, 12, 266], "seo": [13, 16, 31, 89, 188], "separ": [3, 16, 17, 24, 25, 26, 27, 28, 30, 32, 33, 45, 63, 71, 72, 80, 81, 86, 91, 98, 99, 103, 106, 107, 109, 111, 120, 127, 149, 166, 174, 188, 190, 193, 205, 220, 222, 224, 226, 229, 233, 234, 238, 239, 242, 250, 265, 275, 282, 287, 290, 297, 309, 318], "separation_principl": 112, "septemb": [19, 103, 104, 107, 112], "seq_orchestr": 61, "sequenc": [22, 53, 61, 62, 72, 73, 84, 87, 119, 161, 168, 177, 185, 216, 224, 232, 234, 243, 300, 306, 309, 310, 322], "sequence_gap_threshold": 185, "sequence_num": [177, 185], "sequencediagram": [31, 163], "sequenti": [9, 24, 52, 53, 59, 84, 117, 133, 135, 150, 171, 181, 184, 193, 202, 203, 215, 216, 217, 253, 254, 280, 309, 310, 321], "sequential_evalu": 193, "sequentialorchestr": [59, 61, 203], "seri": [1, 11, 28, 30, 81, 82, 90, 118, 119, 128, 129, 146, 153, 156, 157, 160, 170, 199, 226, 232, 239, 287, 288, 289, 309, 315, 317, 318], "serial": [9, 10, 28, 38, 67, 174, 194, 196, 227, 231, 232, 242], "serial_devic": 9, "serializ": [67, 196], "serif": [159, 169], "serious": 2, "serv": [13, 31, 63, 192, 198, 222, 233, 277, 288, 295], "server": [1, 8, 11, 13, 22, 29, 30, 52, 63, 64, 73, 90, 91, 92, 127, 144, 145, 150, 154, 156, 170, 174, 185, 189, 210, 222, 223, 233, 235, 320], "server_nam": 92, "server_run": 210, "servic": [1, 27, 63, 90, 92, 93, 130, 155], "session": [1, 29, 34, 56, 57, 59, 70, 93, 98, 117, 124, 139, 155, 169, 170, 253, 254, 265], "session_st": [30, 31, 90], "set": [12, 15, 17, 18, 19, 22, 25, 27, 31, 34, 37, 39, 45, 46, 49, 53, 56, 58, 61, 62, 64, 65, 70, 73, 74, 76, 78, 84, 86, 91, 92, 93, 95, 98, 102, 103, 105, 107, 112, 114, 115, 117, 119, 120, 124, 125, 127, 129, 131, 138, 142, 143, 144, 145, 146, 148, 151, 152, 154, 156, 159, 162, 163, 164, 166, 167, 169, 170, 177, 182, 187, 188, 193, 195, 196, 200, 201, 202, 204, 205, 206, 216, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 245, 248, 250, 254, 255, 261, 273, 275, 278, 283, 285, 287, 290, 291, 293, 294, 298, 299, 300, 304, 310, 313, 315, 316, 317, 318, 321, 323], "set_allow_unknown_config": 22, "set_best": 167, "set_context": 169, "set_dynam": [17, 55], "set_gain": 193, "set_global_se": 17, "set_index": 170, "set_num_thread": 92, "set_refer": [55, 84], "set_simplified_inertia": 220, "set_styl": 169, "set_threshold": 93, "set_titl": [52, 61, 81, 148, 149, 164, 169, 178, 215, 248, 253, 254, 320], "set_wind_model": 220, "set_xlabel": [52, 61, 77, 81, 133, 148, 149, 150, 164, 169, 171, 177, 178, 201, 215, 216, 248, 253, 320], "set_xlim": 164, "set_xtick": [52, 178, 253], "set_xticklabel": [52, 169, 178, 253], "set_ylabel": [52, 61, 77, 81, 133, 148, 149, 150, 164, 169, 171, 177, 178, 201, 215, 216, 248, 253, 254, 320], "set_ylim": 164, "set_yscal": [52, 148], "set_ytick": 254, "set_yticklabel": 254, "set_zlabel": [133, 201], "setattr": [72, 210, 320], "setbound": 316, "setdefault": [77, 78, 85, 98, 283, 284], "seterr": 92, "setformatt": 254, "sethi": 297, "setitem": [141, 143], "setlevel": [50, 106, 254], "setp": 248, "setpoint": [45, 128, 129, 146, 149, 170], "setter": [36, 55, 67], "settimeout": 143, "settl": [12, 30, 36, 45, 48, 51, 53, 54, 56, 59, 61, 65, 66, 67, 68, 74, 75, 77, 78, 81, 84, 85, 86, 97, 98, 103, 112, 121, 124, 126, 127, 128, 129, 133, 134, 135, 136, 146, 147, 148, 150, 151, 164, 166, 167, 169, 170, 171, 172, 182, 183, 197, 198, 199, 205, 214, 216, 223, 229, 235, 238, 253, 259, 260, 265, 285, 290, 293, 296, 306, 308, 309, 310, 316, 320, 321], "settle_tim": 53, "settled_idx": [164, 320], "settled_mask": 61, "settling_analysi": 98, "settling_error": 63, "settling_idx": [61, 164], "settling_ok": 98, "settling_ratio": 98, "settling_stat": 313, "settling_threshold": 313, "settling_tim": [9, 28, 51, 61, 72, 75, 93, 98, 107, 112, 128, 133, 134, 135, 136, 148, 149, 150, 151, 159, 164, 166, 167, 169, 170, 171, 178, 216, 248, 253, 274, 277, 283, 310, 313, 320, 321], "settling_time_bound": 279, "settling_time_ci_95": 321, "settling_time_comparison": [67, 129], "settling_time_cost": 133, "settling_time_idx": 61, "settling_time_met": 75, "settling_time_requir": [75, 98], "settling_time_statist": [65, 67], "settling_times_grid": 171, "setup": [11, 13, 28, 30, 31, 35, 39, 50, 55, 61, 72, 90, 93, 95, 107, 113, 114, 117, 118, 127, 129, 130, 133, 137, 138, 146, 151, 154, 171, 173, 196, 203, 216, 220, 222, 232, 233, 242, 248, 250, 254, 261, 262, 266, 269, 276, 280, 282, 283, 300, 308, 311, 315, 320, 322], "setup_adaptive_smc_pso_optim": 113, "setup_classical_smc_pso_optim": 113, "setup_green_environ": 98, "setup_method": [114, 261], "setup_super_twisting_smc_pso_optim": 113, "set\u00e2": 296, "sever": [5, 22, 25, 35, 45, 86, 90, 92, 95, 98, 107, 119, 121, 122, 124, 126, 207, 209, 216, 218, 222, 223, 224, 226, 228, 229, 232, 233, 234, 235, 236, 238, 239, 253, 255, 256, 257, 259, 290, 300, 301, 306, 308], "sf": 317, "sgn": [12, 193, 226, 227, 229, 231, 238, 239], "sgn_sigma": 85, "sh": [39, 88, 90, 128, 253, 255, 298, 320], "sha256": 169, "shadcn": [269, 270], "shadow": [1, 129, 152], "shape": [10, 17, 35, 44, 53, 61, 63, 76, 84, 86, 97, 98, 114, 134, 135, 155, 163, 171, 172, 177, 183, 193, 194, 195, 198, 199, 201, 209, 216, 220, 226, 239, 246, 248, 249, 254, 258, 268, 278, 283, 284, 290, 291, 321], "shapeblur": 268, "shapiro": [120, 178, 248, 308, 309, 310], "shapiro_wilk": [310, 313], "share": [17, 27, 63, 65, 90, 92, 98, 103, 106, 117, 162, 169, 171, 196, 200, 202, 232, 247, 249, 265, 282], "sharifi": [228, 236], "sharp": [35, 132, 193, 228, 236], "sharper": 164, "sheet": [127, 129, 266], "shendg": [227, 231], "shi": [10, 125, 202, 205, 232, 246, 257, 290, 291], "shift": [45, 78, 84, 122, 137, 139, 140, 141, 142, 143, 144, 145, 198, 205, 216, 226, 227, 231, 239, 318], "shiftkei": 144, "shimmerbutton": 268, "shini": [268, 271], "shinytext": [267, 268, 269], "shiriaev": 86, "short": [34, 36, 44, 51, 73, 76, 86, 91, 93, 98, 114, 117, 139, 140, 144, 145, 167, 170, 177, 188, 194, 211, 242, 254, 282, 283, 323], "short_nam": 31, "shortag": 86, "shortcut": [1, 27, 31, 137, 138, 139, 142, 144, 155], "shorter": [12, 72, 84, 131, 134, 229, 238, 276], "shortfal": [308, 310], "shorthand": 295, "shotaro": 8, "should": [10, 12, 17, 22, 23, 25, 34, 40, 56, 67, 70, 73, 78, 84, 86, 89, 91, 92, 93, 94, 98, 101, 112, 114, 115, 117, 119, 124, 125, 127, 131, 137, 141, 142, 144, 145, 147, 148, 150, 151, 164, 166, 167, 168, 170, 195, 196, 199, 200, 206, 208, 209, 210, 213, 221, 224, 226, 228, 229, 230, 234, 236, 237, 238, 239, 254, 266, 269, 283, 287, 298, 300, 320], "should_recr": 210, "should_remove_transit": 24, "should_switch": [86, 321], "should_termin": 98, "shoulder": 2, "shouldhavecollapsebutton": 143, "shouldn": [17, 73], "shouldskipblock": 140, "show": [1, 10, 12, 21, 23, 24, 25, 28, 29, 30, 31, 32, 35, 39, 56, 57, 59, 61, 64, 70, 71, 86, 98, 117, 118, 124, 125, 127, 129, 133, 134, 135, 136, 141, 142, 144, 145, 146, 148, 149, 150, 153, 154, 155, 156, 163, 164, 166, 167, 168, 170, 171, 177, 193, 202, 210, 215, 216, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 248, 251, 253, 254, 260, 261, 263, 265, 266, 280, 282, 283, 284, 293, 294, 308, 310, 316, 318, 320, 321], "show_miss": 39, "showcas": 153, "showloc": 282, "shown": [13, 14, 19, 140, 146, 165, 195, 196, 222, 226, 227, 228, 229, 231, 232, 233, 236, 238, 239, 257, 288, 289, 317], "shrink": 200, "shtessel": [163, 187, 192, 194, 197, 199, 204, 205], "shuffl": [268, 310], "shutdown": [98, 118, 119, 173, 177, 210, 245, 261, 306], "shutil": [102, 117, 254], "si": [201, 204, 221, 225, 240, 272, 287, 296], "siam": [35, 122, 207, 290, 310], "sibl": [139, 143], "side": [1, 27, 28, 30, 53, 146, 152, 153, 154, 157, 164, 178, 220, 225, 232, 240, 310, 313], "sidebar": [64, 90, 95, 142, 265], "sig_test": 310, "sigalrm": 112, "sight": 167, "sigkdd": 8, "sigma": [37, 41, 53, 55, 77, 81, 82, 83, 85, 107, 120, 191, 193, 195, 197, 216, 217, 224, 226, 227, 229, 231, 232, 234, 238, 239, 246, 253, 261, 272, 279, 288, 290, 293, 310, 313], "sigma_": [53, 195, 261, 290], "sigma_0": 195, "sigma_a": 193, "sigma_act": 79, "sigma_b": [19, 193, 216, 250], "sigma_batch": [193, 216, 217, 254], "sigma_fin": 85, "sigma_histori": [77, 85], "sigma_i": 290, "sigma_insid": 195, "sigma_k": [53, 120], "sigma_max": 290, "sigma_n": 53, "sigma_prev": 79, "sigma_test": 195, "sigma_v": 85, "sigmoid": [98, 101, 223, 235], "sign": [17, 30, 35, 36, 40, 51, 72, 76, 77, 78, 82, 85, 86, 90, 97, 98, 99, 103, 105, 106, 116, 125, 127, 132, 134, 135, 156, 162, 163, 164, 166, 167, 168, 183, 192, 193, 195, 196, 197, 199, 201, 204, 205, 208, 223, 224, 225, 226, 227, 231, 232, 234, 235, 239, 240, 242, 245, 246, 249, 251, 253, 256, 258, 273, 274, 275, 277, 279, 287, 288, 290, 294, 299, 301, 317], "sign_chang": 77, "sign_output": 136, "signal": [1, 8, 30, 36, 52, 62, 64, 68, 74, 77, 78, 79, 81, 82, 85, 86, 93, 103, 107, 112, 118, 126, 127, 136, 146, 149, 150, 153, 163, 166, 167, 170, 177, 182, 183, 185, 196, 197, 201, 205, 209, 222, 223, 224, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 239, 243, 245, 248, 275, 277, 285, 290, 294, 299, 316], "signatur": [19, 49, 52, 53, 55, 56, 57, 59, 61, 94, 98, 103, 118, 119, 127, 199, 278, 307], "signific": [14, 15, 17, 38, 41, 53, 57, 58, 65, 67, 68, 72, 84, 97, 98, 104, 107, 112, 114, 117, 120, 127, 133, 136, 149, 166, 169, 171, 178, 183, 184, 193, 197, 199, 205, 209, 222, 224, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 248, 259, 274, 282, 283, 284, 290, 308, 309, 320, 321], "significance_level": [169, 310, 313], "significant_improv": [248, 313], "significant_pair": 313, "significantli": [36, 59, 65, 67, 68, 84, 104, 115, 147, 167, 169, 182, 223, 224, 227, 229, 231, 234, 235, 237, 238, 256, 301, 308, 310, 321], "signum": [112, 192, 229, 238], "sil": [243, 261], "silent": [35, 45, 70, 127], "silk": 268, "sim": [22, 35, 53, 61, 73, 120, 182, 191, 193, 201, 202, 216, 224, 229, 234, 238, 246, 252, 253, 278, 290, 291, 293, 320], "sim_001": 61, "sim_cfg": [131, 216], "sim_config": [73, 112, 116], "sim_dur": 265, "sim_param": [133, 135], "sim_result": [112, 159, 208, 252], "sim_runn": 53, "sim_set": 131, "sim_start": 98, "sim_tim": [44, 61, 98, 167, 193, 203, 216, 217, 250, 254, 275, 280, 283, 290], "simcontext": 317, "simd": [17, 41, 197, 317], "similar": [26, 29, 40, 53, 55, 59, 61, 65, 76, 78, 93, 112, 124, 163, 164, 165, 166, 167, 168, 183, 201, 210, 220, 224, 226, 230, 234, 237, 239, 253, 283, 290, 291, 298, 300, 310], "similarli": [53, 84, 223, 235, 252], "simpl": [17, 28, 29, 30, 35, 42, 49, 51, 53, 61, 72, 77, 81, 82, 83, 84, 86, 90, 92, 98, 102, 107, 111, 112, 114, 115, 117, 132, 140, 146, 155, 157, 158, 161, 162, 163, 166, 177, 183, 184, 193, 195, 196, 197, 200, 202, 205, 209, 215, 216, 220, 222, 225, 226, 232, 233, 239, 240, 248, 254, 269, 275, 278, 291, 300, 310, 317, 318, 321], "simple_fitness_funct": [107, 114, 248], "simple_gain": 116, "simple_renam": 98, "simpler": [15, 17, 77, 85, 153, 155, 177, 197, 205, 226, 239, 310], "simplest": [51, 157, 170, 197, 202, 227, 231, 290, 303, 310], "simpli": [62, 267, 268, 269, 271], "simplic": [36, 67, 77, 78, 129, 162, 166, 168, 183, 202, 276, 287, 303], "simplif": [161, 205], "simplifi": [1, 9, 12, 20, 22, 30, 31, 34, 49, 52, 56, 59, 62, 63, 64, 72, 73, 76, 82, 98, 103, 108, 113, 114, 117, 118, 122, 124, 127, 128, 129, 131, 133, 146, 147, 150, 152, 153, 154, 155, 162, 164, 165, 167, 168, 170, 171, 199, 203, 216, 221, 222, 223, 224, 225, 226, 229, 232, 233, 234, 235, 238, 239, 240, 246, 247, 248, 249, 251, 260, 265, 276, 282, 283, 287, 290, 293, 298, 313, 318], "simplified_dip": 277, "simplified_dip_config": 101, "simplified_dynam": 283, "simplified_matric": 220, "simplified_plant_config": 101, "simplified_trajectori": 283, "simplifieddipconfig": [20, 216, 219, 287], "simplifieddipdynam": [65, 67, 101, 113, 114, 216, 219, 275, 276, 278, 287, 290], "simplifieddipphysicsmatric": 220, "simplifieddynam": [35, 127, 134, 135, 320], "simplifiedphysicscomput": 220, "simplist": [228, 236], "simrunn": [316, 317], "simul": [1, 8, 9, 10, 11, 12, 16, 17, 18, 19, 21, 22, 27, 28, 33, 34, 38, 39, 44, 46, 50, 51, 53, 54, 55, 56, 62, 65, 67, 72, 73, 74, 75, 76, 81, 82, 83, 86, 87, 88, 89, 90, 92, 93, 95, 98, 101, 103, 113, 114, 115, 116, 117, 118, 122, 125, 127, 129, 131, 133, 134, 136, 148, 149, 151, 152, 153, 155, 162, 163, 166, 168, 169, 174, 178, 180, 182, 183, 184, 190, 193, 197, 198, 199, 200, 201, 202, 208, 209, 213, 215, 218, 219, 221, 223, 224, 232, 234, 235, 242, 244, 245, 246, 248, 249, 251, 253, 254, 255, 257, 259, 260, 261, 262, 263, 266, 274, 275, 276, 277, 279, 282, 283, 284, 285, 287, 291, 293, 295, 304, 308, 313, 316, 317, 322], "simulate_adaptive_gain_evolut": 287, "simulate_and_evalu": [51, 253, 279], "simulate_and_measure_overshoot": 251, "simulate_and_verify_perform": 252, "simulate_control": 310, "simulate_control_scenario": 274, "simulate_controller_tri": 313, "simulate_fault_detect": 119, "simulate_high_cpu": 93, "simulate_long_term_st": 279, "simulate_reaching_phas": 283, "simulate_scenario": 209, "simulate_stability_check": 313, "simulate_system": 283, "simulate_system_batch": [53, 193, 217, 250, 254], "simulate_to_sliding_surfac": 209, "simulate_trajectori": 51, "simulate_with_adaptive_timestep": 254, "simulate_with_control_histori": 209, "simulate_with_dynam": 151, "simulate_with_gain": 183, "simulatesystem": 30, "simulation_": 9, "simulation_001": 61, "simulation_architecture_guid": 203, "simulation_benchmark": 310, "simulation_bridg": 9, "simulation_config": [73, 98, 107, 278], "simulation_config_dev": 200, "simulation_config_prod": 200, "simulation_config_pso": 200, "simulation_context": [9, 39, 61, 135, 203, 216, 224, 234, 317], "simulation_data": 119, "simulation_dur": [34, 53, 167, 208], "simulation_engin": [254, 321], "simulation_engine_api_refer": 59, "simulation_engine_confus": 300, "simulation_engine_integr": 321, "simulation_execution_tim": 98, "simulation_failur": 98, "simulation_fn": 17, "simulation_funct": [310, 313], "simulation_histori": 61, "simulation_length": 118, "simulation_loop": [79, 136], "simulation_perform": 255, "simulation_result": [104, 107, 136, 149, 252, 277], "simulation_result_valid": 313, "simulation_runn": [9, 17, 39, 44, 50, 52, 53, 84, 88, 116, 128, 135, 147, 150, 151, 190, 203, 216, 224, 229, 234, 238, 252, 317, 320, 321], "simulation_step": 250, "simulation_tim": [77, 78, 81, 85, 98, 113, 114, 117, 209, 250, 255], "simulation_time_step": 321, "simulation_timeout": 104, "simulation_work": 254, "simulationcach": 98, "simulationconfig": [9, 72, 73, 130, 131, 208, 216], "simulationengin": 216, "simulationerror": [76, 112], "simulationresult": 277, "simulationrunn": [17, 35, 50, 52, 53, 84, 116, 127, 128, 129, 130, 131, 132, 133, 146, 150, 151, 170, 252, 320], "simulationstrategi": 17, "simulationvalidationresult": 252, "simultan": [17, 52, 53, 88, 104, 112, 156, 167, 171, 189, 190, 193, 197, 200, 202, 203, 205, 216, 222, 223, 224, 232, 233, 234, 235, 248, 250, 303], "sin": [30, 61, 73, 77, 84, 134, 135, 152, 161, 164, 197, 198, 209, 220, 221, 225, 227, 231, 240, 249, 287, 294, 295, 296], "sinc": [5, 15, 191, 205, 222, 232, 233, 287, 297, 298, 299], "sine": [1, 27, 28, 225, 240], "sine_5n_1hz": 321, "singl": [8, 17, 24, 32, 41, 51, 52, 56, 59, 63, 65, 67, 75, 80, 84, 91, 92, 93, 98, 101, 104, 116, 120, 127, 129, 133, 140, 143, 148, 161, 164, 167, 170, 171, 182, 183, 192, 193, 195, 199, 200, 201, 203, 205, 213, 215, 216, 218, 220, 222, 223, 224, 226, 232, 233, 234, 235, 239, 241, 242, 245, 247, 251, 253, 254, 256, 257, 259, 277, 280, 283, 284, 291, 293, 296, 297, 309, 310, 320], "single_quot": 297, "single_result": 104, "single_thread_r": 92, "single_thread_tim": 92, "singleton": [17, 117], "singular": [61, 65, 72, 78, 134, 155, 161, 168, 205, 213, 220, 224, 225, 232, 234, 240, 273, 275, 276, 279, 290, 295, 310], "singularity_cond_threshold": [216, 225, 226, 239, 240], "singularity_epsilon": 168, "sinusoid": [84, 134, 222, 228, 230, 233, 236, 237], "siso": 221, "site": [31, 92, 122, 129, 137, 140, 141, 144, 173, 262, 263, 264, 268], "sitemap": [16, 31, 89, 188, 262, 263], "siu": [8, 17], "six": [45, 62, 74, 127, 164, 196, 200, 221, 225, 230, 232, 237, 240], "size": [11, 13, 20, 22, 30, 35, 49, 52, 58, 59, 60, 62, 67, 68, 72, 74, 77, 84, 90, 91, 98, 104, 118, 120, 124, 127, 128, 131, 135, 142, 144, 145, 147, 148, 153, 155, 159, 164, 167, 169, 170, 171, 177, 182, 183, 185, 193, 200, 201, 202, 203, 205, 210, 215, 216, 223, 224, 229, 232, 234, 235, 238, 242, 246, 253, 254, 265, 267, 274, 280, 282, 283, 291, 293, 298, 299, 308, 312, 320], "size_saved_mb": 98, "sketch": [86, 120, 122, 125, 161, 205, 246, 251, 287], "skew": [68, 119, 120, 161, 225, 240, 287, 310, 313], "skew_matrix": 287, "skew_symmetr": 287, "skew_symmetry_error": 287, "skid": [224, 234], "skim": 145, "skip": [14, 31, 39, 49, 73, 75, 98, 114, 122, 126, 140, 145, 147, 151, 203, 209, 254, 282, 298], "skip_cov": 39, "skip_wait": 31, "skipif": 55, "skipwait": 31, "sklearn": 10, "skoge": [222, 233], "sla": 98, "sla_met": 98, "sla_result": 98, "slack": [98, 254], "slash": [182, 282], "slatkin": 17, "slatkin2019effect": 17, "sleep": [92, 111, 114, 115, 116, 177, 254, 277, 320], "slender": 232, "slew": [19, 45, 53, 55, 68, 82, 222, 232, 233, 250], "slice": [44, 201], "slide": [1, 10, 12, 13, 19, 20, 24, 27, 30, 31, 32, 35, 37, 38, 40, 45, 49, 52, 55, 62, 63, 64, 66, 75, 82, 83, 84, 87, 88, 95, 98, 101, 105, 106, 109, 113, 115, 116, 119, 120, 122, 124, 126, 127, 129, 130, 131, 132, 135, 136, 142, 145, 146, 147, 152, 153, 155, 159, 164, 165, 167, 183, 187, 189, 190, 192, 195, 197, 198, 200, 202, 216, 217, 218, 223, 232, 235, 241, 242, 244, 246, 247, 248, 252, 253, 254, 257, 259, 265, 272, 277, 282, 284, 286, 295, 298, 299, 300, 303, 306, 310, 316, 317, 320], "slider": [1, 29, 30, 129, 150, 152, 153, 156, 170, 222, 233, 265, 268], "sliding_energi": 253, "sliding_gain": 36, "sliding_surfac": [9, 17, 37, 40, 75, 77, 78, 79, 81, 125, 132, 136, 168, 190, 193, 194, 209, 213, 255, 258, 274, 278, 300, 301], "sliding_surface_analysi": 194, "sliding_surface_definit": 294, "sliding_surface_deriv": 294, "sliding_surface_design": [287, 291], "sliding_surface_dynam": 294, "sliding_surface_gain": 251, "sliding_surface_matrix": [258, 294], "sliding_surface_reach": 255, "sliding_surface_toler": [75, 209, 255], "slidingcalc": 317, "slidingsurfac": [199, 316, 317], "slidingsurfacedirect": 30, "slidingsurfacereachabilitytestsuit": 75, "slidingsurfacereachabilityvalid": 209, "sliding\u00e2": 296, "slight": 164, "slightli": [65, 77, 79, 84, 101, 120, 124, 132, 140, 163, 164, 168, 193, 197, 200, 227, 230, 231, 237, 247, 249, 251, 253, 276, 310], "slim": [90, 91, 92], "slope": [39, 45, 53, 75, 77, 78, 82, 85, 109, 113, 195, 196, 199, 200, 205, 206, 272, 273, 275, 290, 291], "slotin": [2, 35, 78, 81, 122, 125, 187, 188, 199, 205, 223, 227, 230, 231, 235, 237, 258, 287, 299, 303, 320], "slotine1991appli": [2, 24, 32], "slow": [14, 53, 61, 65, 73, 78, 81, 82, 86, 90, 93, 98, 107, 109, 114, 115, 116, 118, 119, 120, 127, 128, 134, 140, 144, 146, 148, 149, 150, 155, 162, 164, 166, 167, 170, 182, 193, 197, 200, 202, 203, 205, 207, 214, 216, 224, 226, 230, 232, 234, 237, 239, 247, 248, 251, 253, 254, 282, 283, 284, 285, 290, 291, 293, 310, 323], "slow_adapt_gain": 109, "slow_converg": 321, "slow_cost": 133, "slow_test": 282, "slow_test_nam": 283, "slowdown": 300, "slower": [41, 61, 65, 67, 77, 78, 79, 84, 86, 98, 113, 118, 120, 124, 132, 133, 134, 135, 140, 142, 146, 151, 158, 162, 163, 166, 183, 193, 202, 205, 216, 226, 229, 230, 237, 238, 239, 247, 251, 265, 290, 291, 293, 297, 298, 299], "slowest": [27, 65, 67, 166, 282, 318], "slowli": [77, 118, 197, 226, 230, 237, 239], "sluggish": [140, 199, 222, 233], "sm": [98, 193], "sma": 232, "small": [13, 17, 30, 35, 53, 61, 65, 67, 72, 73, 74, 75, 76, 77, 79, 84, 86, 98, 103, 107, 108, 114, 117, 118, 119, 120, 131, 132, 134, 135, 144, 145, 146, 148, 149, 150, 162, 163, 164, 166, 167, 168, 169, 170, 171, 178, 191, 193, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 208, 209, 215, 216, 220, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 237, 239, 248, 253, 254, 255, 265, 271, 273, 275, 276, 277, 280, 282, 283, 285, 287, 290, 291, 296, 300, 308, 309, 310, 320, 321], "small_angl": 86, "small_angle_perturb": 75, "small_angle_st": 75, "small_disturb": [98, 112, 113, 114, 275, 280], "small_disturbance_st": 109, "small_gain": 199, "small_problem": 280, "small_stat": 199, "smaller": [45, 53, 65, 74, 77, 78, 84, 86, 91, 99, 117, 131, 132, 134, 135, 155, 163, 164, 170, 195, 200, 201, 205, 206, 208, 224, 227, 230, 231, 232, 234, 237, 253, 254, 265, 276, 290], "smallest": [158, 195, 227, 231, 290], "smart": [133, 154], "smc": [1, 2, 6, 8, 9, 10, 12, 13, 17, 19, 22, 25, 26, 27, 31, 32, 37, 38, 41, 42, 44, 45, 46, 47, 48, 49, 52, 62, 64, 66, 68, 69, 70, 74, 75, 77, 79, 83, 85, 90, 91, 94, 95, 98, 103, 105, 106, 115, 121, 122, 126, 127, 131, 136, 137, 138, 147, 149, 152, 153, 159, 160, 162, 164, 171, 177, 180, 187, 190, 198, 200, 203, 204, 211, 213, 214, 216, 217, 220, 232, 241, 243, 244, 250, 254, 256, 257, 258, 259, 262, 263, 272, 276, 277, 286, 293, 294, 296, 298, 299, 302, 305, 308, 309, 310, 315, 316, 317, 320, 322], "smc_": [32, 92], "smc_adapt": 72, "smc_alert": 92, "smc_algorithms_hybrid_switching_log": [24, 33], "smc_bucak_2020": 126, "smc_bucak_2020_analysis_robot": [121, 125, 294], "smc_burton_1986_continu": 294, "smc_classic": [49, 51, 72, 82, 100, 103, 105, 117, 275, 276, 277, 313], "smc_complete_theori": [77, 78], "smc_config": [72, 73], "smc_control": 232, "smc_control_computation_duration_second": 92, "smc_control_effort_rm": 92, "smc_controller_errors_tot": 92, "smc_controller_typ": 255, "smc_cruz_zavala_2018_uniform_sta": 121, "smc_edardar_2015": 126, "smc_edardar_2015_hysteresis_compens": [121, 125, 294], "smc_edwards_spurgeon_1998": 122, "smc_edwards_spurgeon_1998_sliding_mode_control": [123, 294], "smc_factori": [9, 10, 52, 80, 100, 114, 168, 190], "smc_farrell_2006": 126, "smc_farrell_2006_adaptive_approxim": [125, 294], "smc_gain_spec": [20, 50, 51, 56, 82, 98, 112, 248], "smc_khalil": 126, "smc_khalil_lecture32_sliding_mod": 294, "smc_khalil_lecture33_sliding_mod": [125, 294], "smc_krstic_1995_nonlinear_adapt": [257, 294], "smc_kunusch_2012_pem_fuel_cel": 294, "smc_levant": 122, "smc_levant_2003": [123, 125, 126], "smc_levant_2003_higher_order_introduct": [122, 125, 294], "smc_levant_2003_higher_order_sliding_mod": [121, 122, 123], "smc_levant_2003_higher_order_smc": [32, 187, 256, 257, 294, 299], "smc_moreno_2008": 126, "smc_moreno_2008_lyapunov_sta": [122, 125, 294], "smc_moreno_2012_strict_lyapunov": [32, 256, 257, 294], "smc_moreno_2012_strict_lyapunov_sta": [121, 123], "smc_orlov_2018": 126, "smc_orlov_2018_analysis_tool": [125, 294], "smc_parameter_vector": 293, "smc_pendulum_angle_error": 92, "smc_plestan_2010_adaptive_methodologi": 294, "smc_pso_optimization_failures_tot": 92, "smc_roy_2020_adaptive_unbound": 294, "smc_sahamijoo_2016_chattering_attenu": 294, "smc_seeber_2017": 126, "smc_seeber_2017_sta_parameter_set": [122, 125, 294], "smc_shtessel_2014_sliding_mode_control": 123, "smc_shtessel_2014_sliding_mode_control_and_observ": [187, 257, 294], "smc_slavik_2001_delai": 294, "smc_slotine_li_1991": [122, 126], "smc_slotine_li_1991_applied_nonlinear_control": [89, 123, 125, 187, 257, 294, 299], "smc_sta": 72, "smc_system_stability_metr": 92, "smc_theori": 320, "smc_theory_complet": [11, 121, 122, 125, 126, 286, 293, 295, 298, 310], "smc_type": [20, 50, 51, 52, 56, 72, 82, 98, 103, 105, 106, 112, 115, 117, 132, 274, 275, 280], "smc_utkin_1992_sliding_mod": [32, 69], "smc_utkin_1993_sliding_mode_control_design": 294, "smc_utkin_2009": 122, "smc_utkin_2009_sliding_mode_control": 123, "smc_utkin_2013_sliding_mode_control": 187, "smc_v1": [49, 51, 82, 100, 103, 105, 117, 275, 276, 277], "smcconfig": [20, 51, 56, 80, 98, 105, 112, 114, 116, 168], "smccontrol": [75, 209], "smccontrollerdown": 92, "smccontrollertyp": 208, "smcdesign": 55, "smcfactori": [20, 51, 56, 80, 98, 112, 114], "smcgainspec": [45, 50, 51, 80, 107, 112], "smcgainvalid": 199, "smcinterfac": 36, "smcmultiobject": 201, "smcprotocol": [82, 98], "smctype": [20, 36, 38, 40, 50, 52, 56, 72, 82, 98, 103, 105, 106, 114, 115, 117, 127, 128, 130, 133, 134, 135, 150, 151, 166, 167, 168, 216, 217, 274, 275, 276, 277, 280], "smi": 91, "smirnov": [310, 313], "smith": [8, 228, 236, 310, 320], "smith2024adapt": 320, "smoke": [23, 34, 70, 98, 122, 126, 251], "smoke_test": 93, "smoke_test_green": 98, "smooth": [1, 13, 27, 29, 35, 42, 51, 53, 68, 72, 77, 78, 79, 81, 84, 85, 86, 98, 100, 101, 103, 105, 106, 107, 112, 126, 129, 130, 132, 136, 139, 140, 142, 144, 146, 152, 162, 163, 164, 165, 166, 167, 168, 181, 183, 189, 191, 192, 193, 195, 196, 197, 201, 202, 205, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 245, 246, 259, 273, 275, 276, 280, 287, 289, 290, 293], "smooth_deadzon": 136, "smooth_output": 136, "smooth_satur": 35, "smooth_sign": [79, 82, 136], "smooth_switch": [51, 72, 77, 80, 98, 99, 100, 101, 105, 109, 226, 239, 273, 275, 276], "smoother": [22, 27, 45, 53, 77, 78, 79, 86, 155, 163, 164, 165, 182, 183, 205, 226, 230, 232, 237, 239, 290, 294], "smoothest": [85, 146, 166], "smoothli": [30, 142, 145, 163, 167, 230, 237], "smoothness_object": 293, "sn": [169, 320], "snake_cas": 187, "snap": 143, "snapshot": [44, 142], "snapshot1": 210, "snapshot2": 210, "snippet": [19, 128, 138, 144, 145, 225, 240, 266, 297, 298], "snr": 194, "so": [15, 17, 141, 163, 167, 223, 226, 227, 231, 232, 235, 239, 270, 271, 310, 313], "sobol": [201, 290, 309, 310, 313], "social": [16, 19, 52, 58, 65, 67, 72, 73, 89, 104, 107, 112, 113, 123, 124, 125, 127, 131, 133, 148, 158, 182, 188, 199, 201, 202, 214, 216, 222, 223, 224, 230, 232, 233, 234, 235, 237, 246, 247, 251, 253, 254, 258, 288, 291, 308, 309, 321], "social_coeff": [65, 72, 291, 318], "social_coeffici": 208, "social_param": 113, "social_term": 215, "social_weight": [214, 250, 253, 254], "societi": [8, 257], "sock": 185, "sock_dgram": [177, 185], "socket": [177, 185], "soft": [51, 133, 136, 148, 187, 226, 239, 250, 273, 275], "soft_numpy_2024_fundamental_packag": 187, "soft_sat": 136, "soft_satur": 136, "soft_stop": 203, "soften": [223, 235], "softwar": [12, 13, 15, 64, 74, 92, 93, 95, 121, 122, 123, 129, 177, 185, 187, 189, 191, 223, 225, 230, 232, 235, 237, 240, 245, 249, 253, 257, 259, 295, 297, 301, 310, 316, 317, 320], "sol": [148, 219, 220, 232], "sole": [51, 225, 240], "solid": [2, 17, 71, 107, 140, 141, 228, 236, 242, 243, 250], "solut": [15, 17, 20, 21, 26, 30, 31, 32, 34, 35, 38, 40, 52, 67, 70, 77, 78, 80, 81, 85, 86, 91, 94, 95, 98, 104, 106, 107, 108, 112, 116, 117, 118, 119, 124, 125, 127, 131, 132, 133, 134, 135, 137, 138, 142, 145, 146, 147, 148, 153, 154, 155, 156, 162, 164, 166, 167, 170, 171, 177, 178, 182, 183, 184, 191, 193, 195, 196, 200, 201, 202, 204, 205, 206, 210, 211, 213, 220, 222, 223, 226, 230, 232, 233, 235, 237, 239, 248, 249, 250, 251, 253, 254, 273, 275, 282, 283, 291, 293, 297, 309, 315, 318, 321], "solution_i": 112, "solution_j": 112, "solution_qu": [53, 58], "solv": [25, 35, 78, 82, 98, 103, 115, 150, 163, 168, 193, 198, 200, 203, 205, 206, 220, 225, 226, 232, 239, 240, 246, 290, 291, 294, 295, 310], "solvabl": [222, 233], "solve_ivp": [150, 200, 219, 220, 232, 290], "solve_linear_system": [220, 290], "solver": [2, 8, 69, 82, 150, 224, 227, 231, 232, 234, 290], "solver_error": 84, "some": [19, 45, 72, 75, 77, 98, 99, 114, 124, 127, 143, 144, 162, 164, 165, 166, 201, 205, 209, 226, 228, 229, 230, 236, 237, 238, 239, 253, 254, 258, 287, 294, 296, 299, 301, 310], "somehow": 145, "someth": 147, "sometim": [155, 221, 270], "son": 81, "soon": [139, 153, 154, 167, 168, 170, 308], "sop": 175, "sophist": [38, 56, 82, 83, 95, 165, 224, 234, 250, 274, 284, 322], "sort": [39, 51, 56, 71, 93, 98, 102, 112, 203, 254, 277, 291, 313, 318], "sort_kei": 117, "sort_valu": [51, 53, 318], "sortabl": [67, 122, 297], "sorted_compon": 39, "sorted_indic": 291, "sound": [12, 35, 53, 75, 98, 121, 195, 222, 233, 243], "soundness_assess": 209, "sourc": [0, 2, 3, 13, 15, 16, 19, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36, 39, 44, 51, 52, 56, 59, 65, 67, 71, 74, 77, 78, 80, 85, 86, 89, 91, 94, 95, 98, 100, 103, 116, 117, 118, 122, 124, 128, 129, 138, 146, 162, 164, 170, 177, 188, 202, 216, 220, 222, 224, 233, 234, 248, 256, 257, 258, 259, 266, 268, 299, 317, 318, 320], "source_branch": 315, "source_cod": 297, "source_directori": 315, "source_repositori": 315, "soviet": 256, "sp": 278, "space": [1, 17, 19, 24, 26, 29, 30, 31, 33, 36, 37, 53, 56, 57, 58, 61, 67, 73, 76, 77, 78, 81, 89, 90, 91, 92, 93, 117, 119, 124, 127, 133, 139, 141, 142, 143, 144, 146, 148, 153, 161, 162, 163, 166, 167, 170, 182, 184, 191, 199, 200, 202, 205, 209, 215, 216, 221, 222, 223, 224, 230, 232, 233, 234, 235, 237, 246, 247, 251, 253, 254, 258, 267, 268, 271, 278, 279, 280, 282, 284, 286, 287, 290, 293, 294, 297, 310, 313, 316, 317, 318], "span": [24, 143, 249, 256, 267, 290, 297], "sparingli": [10, 94, 266], "spark": 268, "spawn": [170, 177, 232], "speak": 12, "spec": [20, 45, 51, 63, 68, 82, 91, 92, 93, 105, 106, 113, 115, 168, 207, 251, 278, 280], "special": [9, 10, 15, 17, 19, 34, 49, 51, 52, 61, 67, 82, 86, 89, 98, 99, 100, 103, 104, 128, 129, 137, 141, 156, 159, 166, 179, 181, 190, 200, 220, 247, 251, 258, 274, 275, 297, 309], "special_featur": 113, "specialist": [24, 36, 39, 40, 44, 77, 78, 81, 85, 120, 190, 191, 218, 222, 233, 241, 244, 245, 247, 249, 252, 261, 283, 284, 300, 301, 321], "specif": [2, 10, 19, 22, 23, 24, 26, 32, 33, 34, 36, 38, 39, 45, 46, 47, 50, 52, 54, 56, 58, 59, 60, 61, 64, 65, 68, 70, 71, 72, 73, 75, 78, 82, 83, 84, 87, 88, 89, 90, 93, 94, 95, 100, 101, 103, 105, 106, 114, 115, 117, 121, 122, 125, 127, 128, 129, 130, 131, 141, 142, 144, 145, 146, 148, 149, 150, 151, 154, 158, 167, 170, 171, 172, 175, 179, 182, 185, 187, 188, 189, 192, 194, 199, 207, 208, 210, 216, 222, 226, 232, 233, 239, 242, 243, 246, 248, 253, 254, 255, 256, 265, 266, 271, 273, 276, 277, 280, 282, 283, 295, 298, 300, 306, 307, 309, 310, 315, 318], "specifi": [12, 19, 45, 50, 52, 55, 56, 59, 67, 72, 73, 74, 75, 78, 80, 86, 97, 106, 115, 116, 117, 131, 132, 170, 190, 193, 196, 199, 200, 216, 222, 223, 224, 225, 226, 232, 233, 234, 235, 239, 240, 254, 259, 275, 278, 279, 283, 285, 290, 291, 313], "spectra": [227, 231], "spectral": 197, "spectroscopi": 232, "spectrum": [57, 226, 239, 290], "speed": [1, 8, 22, 27, 28, 30, 36, 53, 61, 65, 76, 78, 85, 86, 91, 98, 99, 103, 112, 117, 128, 129, 131, 132, 133, 134, 135, 140, 146, 148, 149, 153, 155, 156, 157, 162, 163, 164, 165, 166, 167, 168, 169, 179, 183, 193, 197, 198, 200, 202, 216, 220, 222, 224, 226, 232, 233, 234, 239, 246, 248, 251, 253, 254, 259, 260, 267, 276, 283, 284, 297, 310], "speedup": [17, 29, 41, 52, 61, 65, 84, 85, 92, 104, 127, 193, 194, 198, 202, 203, 215, 216, 217, 220, 249, 259, 290, 293, 297, 299, 317], "spell": [50, 94, 115, 138], "spent": 10, "sphere": [193, 246, 293], "sphere_funct": 293, "sphinx": [1, 10, 13, 14, 15, 52, 64, 95, 96, 122, 138, 139, 142, 144, 156, 159, 187, 189, 194], "sphinx_100_percent_completion_report": [25, 33], "sphinx_build": 25, "sphinx_build_mod": [89, 188], "sphinx_build_phase10_fin": 25, "sphinx_build_phase11_fin": 26, "sphinx_phase3_completion_report": 28, "sphinx_phase5_completion_report": 30, "sphinx_phase8_summari": [24, 33], "sphinx_proof": 188, "sphinx_rtd_them": 8, "sphinx_sitemap": 188, "sphinx_togglebutton": 188, "sphinxcontrib": [13, 141, 187], "sphinxdirect": 30, "sphinxext": [16, 188], "spike": [78, 119, 120, 146, 164, 201], "spin": 30, "spinner": [27, 265], "spiral": [197, 205], "splash": [31, 268], "splashcursor": 268, "split": [9, 10, 25, 33, 39, 63, 72, 73, 84, 98, 99, 117, 169, 171, 227, 231, 254, 268, 297, 298, 299, 308, 309, 310, 318], "splittext": 268, "spof": 241, "spong": [86, 161], "sponsor": 270, "spot": [122, 190, 201, 203], "spotlight": 268, "spotlightcard": [268, 269], "spread": [53, 162, 169, 202, 228, 236], "spreadsheet": 52, "spring": [267, 268, 269], "springer": [78, 82, 83, 103, 163, 192, 194, 196, 204, 205, 206, 207, 246, 287, 290, 291, 310], "springeropen": [224, 234], "sprint": [10, 11, 309], "spurgeon": [78, 81, 163, 192, 194, 196, 199, 204, 205, 206, 230, 237, 246, 287, 290, 298, 320], "spuriou": 310, "sql": 93, "sqrt": [19, 30, 53, 73, 76, 79, 81, 85, 88, 98, 107, 112, 125, 149, 164, 169, 178, 191, 193, 197, 199, 200, 202, 209, 216, 220, 224, 226, 227, 231, 234, 239, 245, 246, 249, 258, 274, 287, 290, 293, 294, 299, 313, 320], "squar": [19, 45, 51, 53, 61, 68, 72, 75, 79, 85, 97, 107, 129, 133, 135, 146, 164, 167, 169, 178, 182, 193, 197, 205, 216, 217, 222, 224, 225, 226, 227, 230, 231, 232, 233, 234, 237, 239, 240, 246, 250, 251, 265, 268, 272, 285, 287, 291, 293, 310, 320], "squared_sum": 193, "squash": 70, "sr": 75, "src": [2, 10, 19, 20, 22, 24, 26, 31, 32, 33, 34, 37, 39, 40, 41, 49, 52, 53, 56, 57, 58, 65, 67, 68, 71, 72, 73, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 90, 91, 92, 93, 94, 98, 100, 101, 102, 103, 105, 106, 108, 109, 113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 142, 144, 147, 148, 150, 151, 152, 154, 164, 165, 167, 168, 169, 170, 171, 177, 182, 185, 186, 190, 191, 193, 199, 203, 210, 211, 212, 214, 216, 217, 220, 221, 222, 223, 227, 229, 231, 232, 233, 235, 238, 244, 248, 251, 252, 253, 254, 255, 260, 261, 266, 267, 268, 269, 271, 273, 276, 277, 281, 282, 283, 284, 285, 287, 290, 292, 294, 296, 297, 301, 302, 306, 313, 317, 318, 319, 320, 321, 323], "srinivasan": 123, "srp": 17, "ss": [70, 195, 290, 296], "ssd": [92, 223, 235], "ssh": [92, 146], "sshd": 92, "sshd_config": 92, "ssl_certif": 92, "ssl_certificate_kei": 92, "ssl_cipher": 92, "ssl_protocol": 92, "ssr": 267, "st": [8, 17, 73, 90, 199, 201, 207, 209, 261, 321], "st_mtime": 254, "st_size": 254, "sta": [0, 10, 22, 30, 36, 37, 38, 40, 45, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 63, 71, 73, 76, 77, 78, 79, 81, 82, 83, 86, 87, 92, 98, 99, 100, 101, 103, 105, 106, 113, 114, 116, 117, 122, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 146, 147, 149, 156, 158, 159, 167, 170, 177, 178, 180, 182, 189, 191, 193, 195, 199, 205, 206, 208, 216, 218, 222, 223, 230, 232, 233, 235, 237, 242, 244, 245, 248, 253, 259, 261, 273, 275, 276, 277, 279, 287, 290, 291, 294, 297, 298, 316, 317, 320, 322], "sta_adapt": [49, 72, 105, 273, 275], "sta_baselin": 166, "sta_bound": [106, 252, 275], "sta_chatt": 166, "sta_config": [106, 273, 275, 276], "sta_constraint_weight": 113, "sta_control": [106, 273, 275, 276], "sta_factori": [275, 276, 280], "sta_fitness_funct": 113, "sta_gain": [67, 208, 242, 253, 280], "sta_integrator_st": 132, "sta_opt": 276, "sta_param": [98, 103, 105], "sta_penalti": 113, "sta_result": [275, 276, 280], "sta_smc": [2, 9, 10, 21, 22, 28, 30, 38, 39, 40, 42, 50, 51, 52, 53, 56, 63, 65, 67, 72, 73, 75, 76, 79, 82, 85, 86, 88, 91, 92, 93, 98, 100, 101, 102, 103, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 128, 131, 132, 146, 147, 149, 150, 154, 156, 166, 167, 170, 177, 178, 183, 185, 189, 191, 195, 197, 210, 216, 221, 223, 224, 226, 227, 231, 234, 235, 239, 242, 244, 249, 250, 253, 254, 265, 273, 276, 277, 278, 279, 285, 287, 298, 301, 317, 321], "sta_smc_bound": [76, 251], "sta_smc_bounds_issue2": 249, "sta_smc_cost_funct": 183, "sta_smc_deprec": 98, "sta_smc_dip": 113, "sta_smc_gain": 76, "sta_smc_issue2_compliant_bound": 249, "sta_smc_optim": 253, "sta_smc_technical_guid": [30, 85], "sta_specific_param": 109, "stab": [193, 232], "stabil": [1, 2, 7, 8, 9, 12, 17, 19, 20, 22, 26, 30, 31, 32, 36, 38, 39, 40, 45, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 64, 67, 68, 71, 74, 75, 76, 78, 81, 82, 84, 85, 88, 92, 93, 95, 97, 100, 101, 103, 105, 113, 114, 115, 116, 118, 120, 121, 122, 124, 126, 127, 129, 131, 133, 134, 135, 146, 147, 148, 150, 151, 152, 153, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 177, 179, 181, 182, 185, 189, 190, 192, 196, 197, 198, 199, 205, 209, 214, 215, 216, 217, 218, 219, 222, 223, 224, 230, 232, 233, 234, 235, 237, 241, 243, 244, 247, 248, 252, 253, 254, 255, 256, 257, 259, 262, 263, 266, 273, 274, 275, 276, 277, 282, 285, 286, 289, 293, 295, 297, 298, 299, 300, 301, 303, 306, 309, 316, 317, 318, 320, 321, 323], "stabilis": [223, 224, 227, 228, 230, 231, 232, 234, 235, 236, 237, 296, 306], "stability_achiev": [93, 191], "stability_analysi": [9, 53, 98, 209], "stability_bonu": 112, "stability_certif": 279, "stability_condit": 293, "stability_condition_phi": 291, "stability_condition_w": 291, "stability_config": [273, 275], "stability_constraint": [109, 248, 293], "stability_count": 274, "stability_focused_weight": 253, "stability_impact": 209, "stability_maintain": 75, "stability_margin": [81, 93, 98, 112, 250, 253, 261, 283, 287], "stability_metr": [9, 193], "stability_monitor": [93, 261], "stability_msg": 251, "stability_pass": 65, "stability_percentag": [75, 209], "stability_properti": 112, "stability_r": 313, "stability_ratio": 99, "stability_region": 209, "stability_req": 251, "stability_requir": 251, "stability_result": [98, 209, 255], "stability_satisfi": 75, "stability_scor": [65, 67, 129], "stability_test": 255, "stability_trend": 63, "stability_valid": [251, 255], "stability_verifi": 279, "stability_viol": [75, 209, 249, 255], "stabilitycertif": 279, "stabilityind": 261, "stabilityregiondirect": 30, "stabilityresult": 98, "stabilitytestscenario": 75, "stabilityvalid": 98, "stabilityvalidationresult": 255, "stabilityviol": [75, 209], "stabilize_mod": 86, "stabilizer_far": 86, "stabilizer_gain": 86, "stabilizer_near": 86, "stabilizer_typ": 86, "stabilizing_control": 86, "stabl": [5, 20, 24, 30, 31, 35, 36, 37, 38, 39, 40, 44, 53, 61, 72, 75, 77, 78, 79, 81, 86, 93, 97, 98, 99, 103, 109, 111, 119, 121, 123, 124, 125, 127, 134, 135, 153, 160, 162, 164, 166, 167, 177, 187, 194, 197, 199, 200, 201, 202, 204, 205, 208, 209, 215, 216, 218, 222, 226, 229, 232, 233, 238, 239, 242, 244, 245, 246, 247, 249, 257, 273, 276, 279, 280, 287, 290, 291, 293, 294, 295, 299, 303, 310, 313, 315], "stable_gain": 199, "stable_point": [75, 209], "stable_stat": 313, "stack": [13, 27, 28, 30, 31, 40, 84, 92, 146, 222, 225, 233, 240, 245, 250, 268, 269, 297, 300, 316], "stackexchang": [222, 233], "stacklevel": 102, "stactrl": 317, "stag": [53, 246, 290, 293], "stage": [25, 34, 37, 38, 39, 70, 73, 84, 88, 104, 112, 167, 179, 181, 184, 200, 210, 222, 233, 243, 248, 250, 261, 282, 290], "stage1_fit": 248, "stage1_gain": 248, "stage2_fit": 248, "stage2_gain": 248, "stage_config": [104, 112], "stage_idx": [104, 112], "stage_result": [104, 112], "staged_system_restart": 261, "stagger": [115, 268], "staggeredmenu": 268, "stagnant": 291, "stagnat": [52, 57, 58, 61, 65, 98, 124, 201, 202, 215, 232, 246, 253, 254, 276, 280, 290, 291, 292, 293, 318], "stagnation_count": [98, 104, 112], "stagnation_iter": [253, 318], "stagnation_limit": 202, "stagnation_period": 98, "stagnation_scor": 53, "stagnation_threshold": [53, 98, 254], "stagnation_window": 53, "stai": [1, 86, 144, 145, 146, 149, 163, 164, 167, 170, 232, 265, 313, 320], "stake": 178, "stakehold": [93, 243, 265, 310], "stale": [31, 70, 177, 185], "stamp": 45, "stand": [222, 233, 270], "standalon": [1, 22, 27, 31, 67, 92, 165, 177], "standard": [10, 12, 13, 17, 19, 24, 27, 30, 33, 34, 35, 36, 37, 38, 42, 43, 50, 52, 53, 56, 61, 63, 66, 67, 72, 74, 76, 80, 84, 86, 88, 92, 98, 100, 101, 104, 105, 106, 113, 114, 117, 118, 119, 120, 122, 123, 127, 128, 131, 133, 134, 136, 139, 140, 148, 155, 162, 165, 167, 168, 169, 170, 171, 172, 177, 178, 181, 182, 185, 187, 189, 190, 193, 196, 198, 199, 200, 201, 202, 209, 213, 218, 220, 221, 224, 225, 226, 230, 232, 234, 237, 239, 240, 241, 242, 244, 246, 247, 248, 250, 252, 253, 255, 256, 257, 258, 262, 263, 267, 269, 270, 276, 277, 279, 281, 282, 293, 295, 299, 301, 302, 308, 309, 316, 318, 320, 321, 322], "standard_cost": 253, "standard_gain": 148, "standarderror": 92, "standardoutput": 92, "standardresultcontain": [52, 59], "standbi": [64, 173], "stanlei": [8, 17], "staoutput": [82, 85], "staperf": 259, "star": [259, 266, 268], "starbord": 268, "start": [1, 7, 9, 10, 11, 13, 14, 22, 24, 25, 26, 27, 28, 31, 32, 37, 39, 44, 50, 51, 52, 53, 59, 61, 64, 65, 67, 76, 78, 84, 92, 93, 102, 103, 104, 105, 106, 114, 115, 118, 119, 122, 124, 136, 138, 139, 140, 142, 143, 144, 149, 150, 151, 158, 161, 163, 164, 166, 167, 171, 185, 192, 195, 197, 199, 200, 201, 202, 203, 205, 210, 215, 220, 226, 228, 232, 236, 239, 242, 247, 255, 262, 263, 267, 269, 277, 291, 293, 294, 297, 305, 316, 322], "start_application_servic": 93, "start_continuous_monitor": 321, "start_it": 148, "start_memori": 254, "start_monitor": [98, 277, 321], "start_optim": 104, "start_performance_monitor": 135, "start_period": 92, "start_profil": 253, "start_tim": [37, 59, 61, 76, 92, 93, 98, 101, 107, 114, 115, 116, 117, 119, 209, 248, 253, 254, 265, 276, 278, 280], "start_url": 31, "startswith": [39, 72, 80, 102, 109, 117, 298, 315], "startup": [73, 86, 117, 155, 177, 275, 296], "stash": 70, "stasmc": [63, 67, 76, 125, 210, 250], "stasmcconfig": [38, 51, 73, 80, 216, 251, 277], "stasmcconfigmapp": 63, "stat": [44, 53, 58, 61, 67, 68, 90, 92, 98, 104, 119, 135, 136, 149, 169, 171, 178, 202, 210, 213, 220, 222, 233, 248, 254, 267, 269, 271, 274, 276, 280, 283, 290, 310, 313, 320, 321], "stat_result": 310, "stat_suit": 310, "state": [0, 1, 9, 12, 13, 15, 17, 19, 20, 22, 27, 28, 29, 30, 31, 32, 36, 37, 38, 40, 41, 48, 50, 52, 53, 55, 56, 58, 59, 62, 64, 65, 67, 68, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 88, 89, 92, 94, 97, 98, 99, 103, 105, 106, 107, 114, 115, 117, 118, 123, 124, 125, 126, 127, 129, 130, 132, 137, 138, 139, 140, 142, 143, 144, 146, 148, 151, 152, 153, 156, 159, 160, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 176, 177, 182, 183, 185, 189, 193, 196, 198, 200, 202, 203, 204, 206, 208, 209, 210, 211, 213, 215, 216, 217, 221, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 242, 245, 247, 248, 249, 250, 252, 254, 255, 259, 260, 261, 265, 267, 269, 272, 274, 277, 282, 283, 284, 285, 286, 287, 290, 293, 294, 296, 299, 301, 302, 303, 306, 310, 311, 313, 316, 317, 320, 321], "state0": [219, 220], "state1": 199, "state2": 199, "state_arrai": [150, 207], "state_bottom": 86, "state_bound": [61, 171, 203], "state_bounds_check": 321, "state_constraint": 75, "state_copi": 41, "state_cost": [20, 117], "state_curr": 220, "state_deriv": [61, 101, 113, 114, 219, 220, 278, 290], "state_dim": [61, 171, 203, 248], "state_dimens": [101, 278], "state_dot": [51, 134, 135, 199, 204], "state_error": [45, 53, 68, 76, 216, 224, 234, 250, 253, 254, 277], "state_fin": 151, "state_ful": 254, "state_half1": 254, "state_half2": 254, "state_histori": [35, 63], "state_initi": 220, "state_log": 150, "state_modifi": 41, "state_nam": [98, 171], "state_norm": [40, 81, 205, 242, 301], "state_pert": 287, "state_plu": 44, "state_point": 75, "state_sampl": 76, "state_spac": 9, "state_trajectori": [136, 149], "state_tupl": 81, "state_upright": 86, "state_valid": [9, 146, 147, 164, 165, 190], "state_valu": 321, "state_var": [10, 20, 36, 37, 40, 41, 55, 61, 63, 77, 78, 79, 81, 82, 84, 85, 86, 98, 107, 127, 132, 136, 150, 151, 166, 210, 211, 216, 301, 302, 321], "state_vector": [37, 278, 295], "stateconstraint": 75, "stateconstrainttestcas": 75, "stateconstrainttestresult": 75, "stateconstrainttestsuit": 75, "stateconstraintviol": 75, "stateeq": 317, "statefeedback": 317, "statefulcontrol": 61, "stateless": [55, 78, 82, 98, 105, 132, 195, 210, 211], "statement": [1, 3, 5, 12, 17, 56, 59, 82, 83, 94, 95, 121, 126, 151, 188, 199, 218, 232, 244, 245, 288, 298, 299, 301, 302, 310], "stateout": [316, 317], "statepacket": 177, "statepoint": 75, "states_3": 61, "states_batch": [17, 203, 248], "states_dev": 203, "states_i": 61, "states_prod": 203, "states_s": 171, "stateupd": 317, "statevec": 317, "statevector": [17, 51, 52, 98, 105, 113, 116, 317], "static": [10, 17, 27, 28, 30, 31, 55, 58, 67, 71, 77, 78, 81, 85, 88, 93, 107, 117, 118, 122, 153, 157, 188, 242, 255, 290, 297, 301], "static_analysi": [88, 255], "static_config": 92, "static_coverage_estim": 88, "static_mathematical_analysi": 255, "static_plot": 9, "static_result": 255, "staticmethod": [17, 35, 40, 76, 98, 117, 168, 188, 251, 254, 278, 297, 301], "stationar": [119, 310], "stationari": [120, 198, 310], "stationarity_test": 310, "statist": [1, 2, 8, 9, 10, 12, 14, 15, 16, 19, 26, 27, 44, 53, 54, 58, 59, 61, 66, 71, 75, 76, 77, 92, 95, 98, 102, 111, 114, 115, 118, 127, 129, 135, 148, 157, 169, 170, 176, 184, 188, 189, 191, 199, 208, 209, 214, 216, 220, 228, 230, 236, 237, 245, 246, 248, 251, 253, 254, 257, 259, 265, 274, 276, 280, 282, 283, 291, 292, 293, 298, 307, 308, 311, 314, 321, 323], "statistical_analysi": 169, "statistical_benchmark": 9, "statistical_benchmarks_v2": [9, 68], "statistical_comparison": 321, "statistical_confidence_level": 53, "statistical_performance_analysi": 321, "statistical_plot": 9, "statistical_reference_t": [309, 313], "statistical_significance_test": 310, "statistical_summari": 313, "statistical_test": [9, 310, 313], "statistical_validation_of_pso_result": 248, "statisticaltestconfig": [310, 313], "statisticaltestsuit": [310, 313], "stats_data": 178, "stats_df": 178, "stats_is": 178, "stats_text": 280, "statsmodel": 178, "statu": [1, 2, 10, 12, 13, 15, 17, 23, 27, 29, 30, 32, 33, 36, 38, 39, 41, 43, 51, 52, 58, 61, 62, 65, 76, 77, 78, 81, 84, 85, 86, 89, 92, 95, 98, 99, 102, 103, 104, 108, 111, 112, 118, 120, 121, 122, 124, 125, 126, 127, 137, 138, 145, 152, 154, 156, 167, 171, 177, 178, 182, 183, 188, 189, 190, 192, 197, 198, 199, 200, 201, 202, 205, 209, 210, 213, 215, 216, 220, 241, 244, 249, 250, 251, 260, 261, 266, 275, 280, 283, 285, 287, 290, 291, 297, 299, 300, 301, 305, 306, 307, 308, 309, 312, 314, 315, 318, 321], "status": 254, "status_cod": 92, "status_color": 254, "status_icon": 321, "status_info": 254, "std": [53, 65, 67, 76, 77, 85, 111, 115, 117, 118, 119, 128, 133, 135, 136, 148, 149, 150, 151, 162, 166, 167, 169, 170, 171, 177, 178, 191, 193, 199, 201, 209, 215, 248, 253, 277, 280, 283, 287, 291, 308, 310, 318, 320, 321], "std1": 313, "std2": 313, "std_computation_tim": 310, "std_convergence_r": 291, "std_cost": [53, 253, 291], "std_dev": [199, 283], "std_fit": 215, "std_ise": 135, "std_perform": [191, 248, 283], "std_residu": 119, "std_score": 313, "std_settl": 313, "std_time": [61, 76, 115, 117, 136, 209, 310], "std_time_m": 65, "stddev": [22, 151], "stderr": [1, 27, 282, 315], "stdev": [111, 115], "stdin": 91, "stdout": [1, 27, 39, 92, 154, 155, 253, 282], "steadi": [22, 35, 36, 45, 48, 53, 55, 65, 67, 75, 77, 78, 81, 82, 84, 85, 99, 103, 113, 124, 146, 147, 156, 159, 163, 164, 165, 166, 167, 172, 183, 193, 196, 199, 206, 221, 222, 223, 227, 231, 233, 235, 242, 259, 290, 303, 310, 320], "steadili": 170, "steady_st": 9, "steady_state_error": [75, 159, 164, 274, 277, 320], "steady_state_error_met": 75, "steady_state_error_requir": 75, "steady_state_region": 164, "steady_state_valu": 252, "steady\u00e2": 296, "steep": [79, 232], "steeper": [79, 227, 231], "steepli": [230, 237], "steer": [224, 225, 234, 240], "stellato": 84, "stem": [67, 102, 222, 233, 254], "step": [1, 7, 9, 10, 12, 13, 19, 22, 30, 35, 36, 38, 39, 40, 44, 45, 52, 53, 55, 59, 62, 64, 65, 68, 73, 74, 75, 77, 79, 80, 84, 86, 88, 93, 95, 98, 103, 105, 107, 113, 114, 115, 117, 118, 120, 127, 128, 129, 137, 144, 151, 161, 162, 164, 165, 166, 187, 188, 191, 193, 197, 199, 202, 208, 209, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 242, 247, 248, 249, 252, 254, 255, 258, 260, 261, 262, 265, 266, 267, 268, 276, 277, 282, 283, 284, 285, 287, 291, 294, 295, 299, 300, 301, 305, 306, 309, 310, 313, 316, 320], "step1": 117, "step2": 117, "step3": 117, "step4": 117, "step_01": 221, "step_02": 221, "step_1": 300, "step_10n": 321, "step_2": 300, "step_3": 300, "step_4": 300, "step_5": 300, "step_6": 300, "step_batch": 17, "step_cost": 193, "step_count": 61, "step_direct": 193, "step_fn": 61, "step_idx": [61, 216], "step_po": 193, "step_rk4_numba": [227, 231], "step_siz": 79, "step_valid": 45, "stephen": 8, "stepper": [267, 268, 269], "steps_complet": 208, "steven": 8, "stick": 183, "sticker": 268, "stickerpeel": 268, "stiction": [225, 240], "stiff": [35, 61, 69, 76, 187, 198, 200, 216, 232, 290, 295], "stiffen": 232, "stiffness_matrix": 295, "still": [20, 21, 32, 33, 50, 53, 102, 106, 107, 114, 115, 117, 140, 141, 143, 145, 148, 163, 164, 165, 177, 197, 200, 210, 224, 226, 227, 229, 230, 231, 232, 234, 237, 238, 239, 254, 275], "stmt": 124, "stochast": [17, 61, 124, 125, 162, 167, 182, 201, 202, 222, 223, 233, 235, 246, 279, 293, 310], "stop": [9, 10, 34, 37, 45, 52, 57, 58, 61, 63, 65, 75, 91, 92, 93, 98, 104, 118, 120, 144, 151, 152, 162, 167, 171, 175, 176, 177, 182, 185, 199, 202, 209, 217, 228, 229, 236, 238, 243, 245, 247, 248, 251, 253, 254, 276, 277, 284, 291, 292, 299, 310, 318, 323], "stop_application_servic": 93, "stop_condit": 203, "stop_fn": [61, 171, 203, 216], "stop_monitor": [98, 277], "storag": [1, 17, 29, 59, 61, 63, 78, 81, 92, 93, 98, 118, 119, 141, 143, 150, 242, 245, 249, 282, 290, 291, 297, 299, 317, 318], "storageclassnam": 92, "storagekei": 141, "store": [1, 27, 44, 45, 53, 61, 64, 65, 67, 68, 70, 93, 98, 112, 113, 117, 123, 143, 145, 150, 154, 168, 202, 210, 224, 225, 234, 240, 254, 266, 282, 285, 293, 297, 298, 299, 321], "store_histori": 254, "store_tru": 321, "str": [10, 19, 35, 39, 40, 44, 50, 52, 53, 56, 61, 65, 71, 73, 75, 76, 80, 82, 86, 88, 92, 93, 94, 98, 100, 102, 103, 105, 107, 114, 115, 117, 131, 168, 169, 177, 178, 191, 194, 203, 208, 209, 215, 216, 220, 232, 249, 254, 273, 275, 277, 279, 298, 300, 301, 313, 321], "straight": 200, "straightforward": [82, 83, 248, 303], "strateg": [0, 4, 39, 58], "strategi": [2, 9, 16, 17, 26, 36, 39, 40, 44, 48, 52, 53, 59, 60, 71, 73, 76, 82, 83, 86, 89, 92, 98, 101, 104, 105, 117, 118, 120, 127, 148, 160, 166, 167, 168, 169, 172, 173, 174, 176, 179, 180, 181, 184, 188, 189, 192, 193, 197, 198, 199, 203, 205, 207, 209, 212, 213, 215, 218, 222, 223, 224, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 248, 251, 255, 259, 261, 282, 283, 286, 288, 289, 291, 297, 300, 304, 317, 321], "strategy_typ": 255, "strategy_us": 255, "stratif": 298, "stratifi": [178, 298, 299, 309, 310], "stratifiedkfold": [9, 10], "stream": [9, 210], "streamhandl": [117, 321], "streamlin": [80, 98, 106, 108], "streamlit": [11, 22, 24, 36, 63, 91, 92, 95, 117, 127, 129, 146, 150, 164, 189, 203, 222, 223, 232, 233, 235, 241, 244, 262, 316, 317, 321], "streamlit_app": [8, 17, 22, 90, 91, 92, 128, 129, 130, 146, 150, 170, 189, 222, 223, 233, 235, 265, 317, 321], "streamlit_deploy": 11, "strength": [19, 53, 55, 63, 65, 67, 71, 77, 85, 126, 127, 146, 165, 202, 230, 237, 250, 267], "stress": [41, 45, 84, 86, 93, 98, 107, 117, 163, 170, 175, 210, 211, 216, 242, 265, 303], "stress_load": 93, "stress_test_factori": 117, "stress_test_optim": 93, "strftime": [39, 102, 108, 254, 280], "strict": [1, 5, 10, 22, 40, 73, 80, 85, 86, 92, 93, 103, 112, 120, 125, 131, 143, 148, 194, 196, 199, 203, 204, 205, 206, 208, 216, 220, 229, 238, 244, 256, 257, 275, 280, 283, 284, 287, 291, 293, 294, 300], "strict_mod": 111, "strict_valid": 98, "stricter": [275, 276], "strictli": [22, 45, 77, 199, 205, 206, 208, 270, 287, 290], "strictmodel": 9, "string": [5, 25, 39, 40, 49, 51, 55, 56, 70, 72, 81, 82, 98, 105, 107, 115, 116, 117, 132, 140, 142, 144, 159, 248, 277, 280, 297, 298, 300], "stringent": 310, "stringifi": [141, 142, 144], "strip": [39, 51, 72, 92, 98, 100, 117, 274, 315], "strong": [15, 35, 59, 84, 93, 113, 121, 122, 126, 164, 169, 193, 199, 210, 215, 221, 222, 224, 227, 231, 232, 233, 234, 275, 310, 313], "stronger": [77, 86, 167, 168, 182, 183, 193], "strongli": [24, 65, 82, 199, 223, 226, 235, 239, 246], "strptime": 254, "struct": [177, 185], "structlog": 98, "structur": [7, 8, 11, 13, 14, 17, 22, 24, 25, 26, 29, 30, 31, 32, 33, 38, 39, 40, 45, 49, 52, 55, 56, 58, 59, 61, 63, 65, 67, 78, 80, 81, 82, 86, 92, 99, 100, 102, 108, 112, 114, 115, 116, 117, 121, 127, 130, 142, 147, 163, 166, 187, 188, 190, 191, 193, 199, 201, 205, 207, 208, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 245, 246, 249, 250, 252, 254, 262, 263, 269, 275, 279, 284, 290, 293, 294, 297, 301, 302, 307, 309, 310, 318, 320], "structure_chang": 72, "structured_log": 111, "struggl": [82, 199, 226, 227, 231, 239], "stub": [10, 307, 312, 314], "stuck": [118, 148, 162, 167, 170, 202, 224, 234, 275, 290], "student": [31, 127, 129, 146, 156, 160, 310], "studi": [19, 31, 36, 52, 79, 80, 123, 127, 128, 129, 145, 146, 149, 150, 166, 167, 170, 171, 197, 199, 219, 220, 224, 226, 227, 229, 230, 231, 232, 234, 237, 238, 239, 246, 248, 256, 257, 265, 267, 268, 290, 291, 293, 304, 309], "stun": [269, 271], "stutter": 144, "style": [1, 4, 8, 10, 13, 25, 26, 49, 56, 67, 69, 71, 89, 93, 94, 127, 138, 143, 144, 154, 155, 161, 162, 163, 164, 165, 166, 167, 169, 187, 224, 234, 244, 248, 257, 259, 267, 297, 316, 317], "stylelint": 142, "st\u00f6rmer": 200, "st\u1d62": 310, "su": 92, "sub": [24, 33, 38, 49, 51, 56, 72, 76, 82, 98, 100, 101, 103, 105, 114, 119, 222, 223, 224, 233, 234, 235, 247, 250, 257, 262, 273, 275, 276, 279, 293, 298], "sub_configur": 109, "sub_controller_gain": 98, "sub_gain": 98, "subclass": [51, 61], "subdirectori": 170, "subgraph": [161, 162, 163, 164, 167, 252, 259, 278, 316, 317], "subhead": 33, "subject": [15, 84, 103, 123, 222, 224, 227, 229, 231, 233, 234, 238, 246, 293, 310, 317], "sublicens": 15, "sublinear": 162, "submiss": 2, "submit": [91, 92, 98, 104, 105, 106, 107, 133, 137, 142, 169, 253, 259, 270, 280, 283], "subnorm": 193, "suboptim": [53, 57, 84, 114, 117, 158, 167, 237, 290], "suboptimal_gain": 114, "subordin": 190, "subplot": [27, 28, 52, 57, 61, 77, 81, 86, 118, 146, 148, 149, 150, 155, 157, 164, 169, 171, 177, 178, 215, 216, 229, 238, 248, 253, 254, 280, 320], "subproblem": 246, "subprocess": [27, 39, 92, 147, 150, 155, 169, 170, 177, 178, 253, 254, 315], "subproject": 266, "subsampl": 63, "subsampled_old": 63, "subscrib": 277, "subscript": [74, 122, 258], "subsect": [24, 33, 225, 240, 266], "subsequ": [10, 17, 27, 28, 31, 61, 62, 132, 135, 141, 153, 155, 157, 193, 203, 216, 222, 223, 233, 235, 291], "subset": [221, 294], "subsid": [77, 205, 226, 239], "substanti": [58, 228, 229, 236, 238, 309, 310, 313], "substep": 152, "substitut": [17, 72, 77, 78, 161, 191, 205, 225, 240, 287, 294], "substr": 5, "subsystem": [59, 199, 204, 261, 279], "subtitl": 31, "subtl": [90, 140, 222, 233], "subtot": [57, 59], "subtract": [35, 224, 225, 234, 240, 290], "succ": 299, "succe": [138, 164, 201, 283], "succeed": [27, 30, 61, 138, 220], "success": [1, 7, 10, 30, 31, 33, 37, 39, 49, 50, 51, 53, 59, 61, 65, 70, 75, 76, 77, 84, 86, 89, 90, 93, 99, 102, 104, 113, 114, 115, 117, 124, 127, 141, 143, 154, 165, 171, 191, 193, 201, 202, 203, 208, 209, 219, 220, 222, 226, 230, 232, 233, 237, 239, 241, 244, 245, 246, 247, 250, 251, 253, 254, 255, 259, 261, 265, 276, 277, 283, 284, 290, 300, 301, 306, 309, 313], "success_count": [98, 203, 254], "success_criteria": [5, 255], "success_r": [53, 65, 93, 98, 102, 104, 115, 117, 191, 208, 209, 228, 236, 252, 255, 276, 280], "success_result": [59, 61], "successful_control": 98, "successful_evalu": 98, "successful_integr": 98, "successful_migr": 102, "successful_optim": 254, "successful_path": 255, "successful_thread": 65, "successful_valid": 255, "successfulli": [19, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 38, 39, 40, 51, 64, 70, 72, 76, 88, 93, 95, 98, 106, 107, 115, 116, 117, 124, 127, 138, 148, 156, 175, 182, 224, 234, 241, 242, 245, 246, 250, 251, 253, 254, 255, 259, 261, 276, 277, 297, 300, 321, 323], "sudden": [77, 78, 81], "sudo": [90, 92, 93, 146], "sudoer": 92, "suffer": [223, 224, 226, 230, 232, 234, 235, 237, 239, 294], "suffici": [30, 31, 41, 57, 61, 67, 68, 72, 76, 85, 86, 107, 112, 134, 158, 162, 191, 197, 201, 205, 222, 233, 247, 248, 251, 255, 279, 280, 284, 290, 310], "suffix": [102, 122, 254, 282], "suggest": [13, 55, 65, 115, 121, 127, 129, 147, 153, 200, 230, 232, 237, 256, 280, 301, 318, 320, 321], "suggested_adapt": 247, "suggested_head": 255, "suit": [1, 10, 12, 22, 23, 37, 38, 39, 44, 64, 75, 76, 79, 80, 87, 93, 95, 107, 114, 119, 120, 122, 127, 128, 129, 138, 139, 141, 146, 151, 165, 182, 194, 199, 209, 222, 223, 224, 232, 233, 234, 235, 241, 250, 251, 254, 261, 282, 290, 297, 309, 310, 313, 318, 321, 323], "suitabl": [13, 19, 61, 63, 65, 67, 84, 86, 134, 166, 197, 200, 202, 224, 232, 234, 255, 265, 310, 321], "suite_nam": 75, "suite_result": [75, 98], "sullivan": 310, "sum": [20, 35, 39, 45, 51, 53, 61, 72, 75, 77, 78, 81, 92, 97, 98, 102, 104, 107, 115, 117, 118, 119, 120, 133, 135, 149, 162, 163, 167, 170, 172, 199, 200, 202, 203, 208, 209, 215, 216, 217, 222, 228, 232, 233, 236, 248, 254, 255, 258, 277, 280, 285, 287, 291, 293, 301, 310, 313, 317, 318, 320], "sum1": 316, "sum_": [53, 193, 195, 198, 200, 201, 202, 209, 215, 225, 227, 231, 232, 240, 246, 279, 290, 291, 293, 298, 299], "sum_i": 290, "sum_k": 198, "summar": [125, 232], "summari": [2, 15, 16, 19, 38, 39, 45, 51, 53, 76, 83, 94, 98, 102, 106, 108, 115, 117, 119, 120, 121, 122, 124, 127, 135, 149, 164, 166, 167, 168, 192, 199, 202, 207, 208, 214, 216, 232, 241, 244, 246, 248, 250, 251, 253, 254, 257, 260, 280, 282, 298, 301, 308, 310, 320], "summaris": [223, 225, 226, 227, 228, 229, 231, 235, 236, 238, 239, 240], "summary_t": 169, "summat": [35, 97], "sun": [81, 226, 239, 320], "sundai": 111, "sup_x": 310, "super": [2, 10, 20, 22, 36, 37, 38, 40, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 61, 62, 63, 64, 69, 71, 72, 73, 74, 76, 79, 82, 83, 84, 86, 98, 100, 101, 102, 103, 105, 106, 109, 113, 115, 116, 121, 122, 123, 124, 126, 127, 128, 129, 131, 134, 135, 146, 149, 160, 164, 167, 168, 169, 177, 189, 195, 197, 199, 202, 205, 208, 210, 215, 218, 221, 222, 223, 228, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 247, 253, 254, 256, 257, 259, 265, 272, 274, 275, 276, 280, 284, 286, 288, 290, 291, 293, 294, 297, 299, 303, 308, 309, 317, 318, 320], "super_twist": [9, 20, 36, 37, 49, 50, 51, 58, 71, 82, 98, 100, 103, 105, 106, 115, 116, 117, 132, 133, 135, 168, 193, 207, 208, 248, 273, 275, 276, 277, 313], "super_twisting_control": 256, "superior": [81, 84, 85, 129, 197, 222, 224, 233, 234, 303, 321], "superl": 12, "superposit": 161, "supertwist": [82, 98, 294, 317], "supertwisting_condit": 294, "supertwisting_control": [256, 294], "supertwisting_data": 313, "supertwisting_law": [257, 286], "supertwisting_lyapunov": 294, "supertwistingalgorithm": 193, "supertwistingsmc": [9, 10, 41, 51, 80, 82, 85, 86, 98, 132, 257, 283, 298], "supertwistingsmcconfig": [72, 273, 275, 276], "supertwistingsmcparamet": 109, "supervis": 190, "supervisor": [62, 306], "supervisori": [62, 306], "super\u00e2": 296, "supplementari": 309, "suppli": [22, 55, 232], "support": [1, 8, 13, 14, 15, 16, 19, 28, 29, 31, 34, 36, 37, 38, 49, 52, 53, 56, 57, 58, 61, 63, 64, 70, 73, 75, 77, 78, 79, 80, 81, 82, 84, 92, 93, 95, 98, 100, 104, 106, 108, 115, 117, 119, 122, 127, 130, 131, 132, 133, 134, 138, 144, 152, 154, 155, 168, 182, 187, 188, 189, 194, 195, 196, 197, 203, 209, 216, 218, 222, 223, 224, 226, 230, 233, 234, 235, 237, 239, 241, 242, 247, 248, 250, 255, 266, 268, 270, 271, 273, 274, 275, 278, 282, 284, 293, 297, 298, 299, 306, 309, 310, 313, 317, 318], "supported_control": 63, "supported_controller_typ": 75, "supports_dynam": [17, 38, 49, 50, 52, 80, 98, 100, 114, 116, 273], "supports_jacobian": 101, "supports_linear": 101, "suppress": [24, 33, 78, 98, 172, 178, 205, 222, 223, 226, 227, 229, 231, 233, 235, 238, 239], "suppress_warn": [24, 33], "suppressed_alert": 98, "suppression_rul": 98, "suptitl": 254, "sure": [125, 155, 166, 269], "surf": 201, "surf_gain_k1": [41, 227, 231], "surf_gain_k2": 41, "surf_lam1": [41, 227, 231], "surf_lam2": 41, "surfac": [1, 10, 12, 17, 20, 27, 30, 31, 35, 36, 37, 38, 40, 45, 48, 51, 53, 55, 63, 65, 68, 73, 75, 76, 82, 83, 84, 87, 88, 91, 97, 98, 100, 101, 103, 105, 106, 113, 121, 122, 123, 124, 126, 127, 129, 132, 136, 146, 152, 153, 160, 164, 165, 166, 167, 170, 183, 192, 193, 195, 196, 197, 199, 201, 202, 208, 209, 216, 222, 223, 224, 227, 231, 232, 233, 234, 235, 242, 245, 246, 247, 248, 253, 255, 257, 268, 272, 273, 274, 275, 276, 279, 280, 282, 283, 284, 289, 291, 293, 294, 298, 299, 300, 316, 317, 318, 321], "surface1": 199, "surface2": 199, "surface_bandwidth": 112, "surface_coeffici": 251, "surface_consistency_check": 98, "surface_coupl": 98, "surface_deriv": [75, 199, 209, 255], "surface_dist": [81, 82, 83], "surface_eig": 98, "surface_eigenvalu": 98, "surface_gain": [38, 49, 72, 98, 101, 116, 117, 251], "surface_gain_joint1": 208, "surface_gains_adequ": 112, "surface_histori": 193, "surface_st": 248, "surface_time_const": 72, "surface_valu": [37, 193, 199, 207, 283], "surpass": [222, 233], "surpris": 44, "surprisingli": 237, "surrog": [229, 238], "surround": 24, "survei": [84, 123, 223, 235, 257, 290, 291], "surviv": 190, "suryawanshi": [227, 231], "suscept": [222, 233], "sustain": [39, 68, 93, 118], "sv": 213, "sv_ratio": [213, 290], "svd": [35, 65, 123, 212, 213], "svd_pseudo_invers": 35, "svg": [1, 30, 31, 64, 156, 317], "sw": [191, 199, 226, 239, 258, 279, 287, 288, 289, 294], "sw_activ": 31, "swap": [17, 201, 268], "swappabl": 61, "swappi": 92, "swarm": [2, 8, 9, 12, 19, 20, 22, 27, 28, 38, 45, 49, 52, 56, 58, 60, 64, 65, 69, 72, 73, 76, 83, 95, 97, 98, 116, 117, 123, 124, 127, 128, 129, 131, 146, 153, 157, 159, 160, 170, 183, 187, 189, 191, 199, 201, 214, 216, 217, 223, 224, 232, 234, 235, 242, 245, 246, 249, 250, 252, 253, 254, 257, 282, 283, 284, 286, 288, 289, 290, 303, 304, 316, 319], "swarm_fitness_std": 53, "swarm_mean_fit": 53, "swarm_posit": [52, 98, 193, 202], "swarm_siz": [53, 61, 98, 266, 291], "swarm_size_rul": 293, "swarm_stat": 251, "swarmstat": 251, "sweep": [1, 17, 30, 61, 127, 148, 153, 157, 166, 184, 189, 203, 265, 278, 290, 317], "sweet": 201, "swim": 202, "swing": [55, 62, 82, 123, 134, 161, 222, 223, 224, 225, 228, 229, 230, 233, 234, 235, 236, 237, 238, 240, 256, 257, 265, 290, 306], "swing_mod": 86, "swing_up": 86, "swing_up_factory_for_pso": 86, "swing_up_param": 86, "swing_up_smc": [9, 10, 86, 222, 223, 224, 233, 234, 235, 250, 265], "swing_up_smc_technical_guid": 86, "swingupsmc": [9, 10, 86, 222, 223, 233, 235], "swing\u00e2": 296, "swipe": 64, "switch": [1, 10, 17, 20, 22, 30, 35, 36, 37, 38, 45, 51, 53, 55, 56, 58, 61, 65, 68, 73, 79, 80, 82, 83, 85, 86, 88, 92, 97, 98, 100, 101, 103, 105, 106, 113, 118, 124, 125, 126, 129, 132, 133, 145, 146, 153, 156, 158, 163, 164, 166, 167, 168, 170, 179, 181, 182, 183, 185, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 208, 213, 222, 223, 224, 227, 231, 232, 233, 234, 235, 248, 257, 265, 272, 273, 274, 275, 276, 280, 284, 287, 288, 289, 291, 293, 294, 299, 306, 317, 321], "switch_angle_tol": 86, "switch_angle_toler": 86, "switch_cent": 199, "switch_energy_factor": 86, "switch_factor": 86, "switch_funct": [98, 99, 105, 106, 115], "switch_left": 199, "switch_method": [51, 56, 72, 78, 85, 98, 99, 100, 101, 103, 105, 106, 115, 116, 168, 196, 199, 273, 274, 275, 276, 290], "switch_neg": 199, "switch_po": 199, "switch_right": 199, "switch_sign": 79, "switch_threshold": 98, "switch_tim": [9, 10, 55, 86], "switch_to_backup_sensor": 93, "switch_traffic_to_blu": 98, "switch_traffic_to_green": 98, "switch_valu": 199, "switchcontrol": 317, "switching_adequ": 78, "switching_control": [274, 294], "switching_cooldown": 321, "switching_criteria": 98, "switching_funct": [9, 17, 168, 190, 193], "switching_function_typ": [98, 99], "switching_gain": [49, 72, 80, 92, 116, 117, 251], "switching_gain_adequ": 112, "switching_log": [9, 37], "switching_magnitud": 98, "switching_st": 112, "switching_threshold": 321, "switchingfunct": 17, "sx": 317, "sy": [28, 39, 92, 115, 117, 136, 150, 151, 300], "symbol": [8, 13, 15, 53, 77, 78, 82, 83, 85, 125, 126, 134, 160, 170, 192, 198, 202, 221, 225, 226, 239, 240, 257, 258, 273, 286, 288, 289, 295, 296], "symmetr": [67, 86, 133, 136, 161, 198, 205, 220, 225, 226, 239, 240, 287, 290, 313], "symmetri": [201, 287], "symmetry_error": 287, "sympi": 15, "symplect": [200, 282, 284], "symptom": [40, 77, 78, 81, 84, 85, 86, 98, 118, 119, 127, 148, 164, 165, 166, 167, 170, 171, 177, 178, 182, 183, 290, 321], "sync": [22, 31, 174, 180, 315], "synchron": [19, 30, 31, 37, 52, 61, 70, 106, 119, 157, 174, 177, 185, 205, 224, 228, 234, 236, 265], "syndrom": 202, "synerg": 232, "synergi": [30, 31, 156], "syntact": [51, 53, 56, 57, 58, 59, 147], "syntax": [1, 8, 13, 15, 17, 19, 24, 26, 29, 33, 34, 56, 58, 59, 73, 84, 89, 92, 94, 117, 127, 137, 154, 159, 170, 252, 254, 298], "syntax_valid": [247, 254], "syntaxerror": 298, "synthes": [222, 233], "synthesi": [12, 123, 222, 230, 232, 233, 237], "synthesis": [224, 234], "synthet": [65, 67, 310, 313, 318], "sysctl": 92, "syslogidentifi": 92, "system": [2, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 34, 37, 38, 39, 40, 54, 55, 65, 67, 69, 71, 74, 75, 76, 79, 88, 90, 91, 94, 95, 97, 125, 127, 128, 129, 131, 135, 138, 139, 144, 145, 149, 150, 156, 160, 165, 166, 167, 168, 169, 170, 177, 179, 180, 185, 189, 190, 192, 195, 196, 198, 202, 204, 206, 210, 212, 214, 215, 216, 217, 219, 224, 226, 232, 234, 239, 241, 244, 246, 249, 251, 253, 257, 260, 262, 265, 268, 271, 282, 285, 286, 296, 298, 299, 300, 301, 302, 306, 313, 316, 320, 322, 323], "system_bandwidth": [98, 112], "system_confid": 255, "system_config": 72, "system_damag": 261, "system_diagram": 316, "system_dynamics_complet": [11, 121, 286, 293], "system_health": 254, "system_health_assess": [93, 107], "system_health_report": 190, "system_inertia": 73, "system_inst": 255, "system_param": 295, "system_resourc": 254, "system_st": [261, 273, 277], "system_templ": 72, "system_template_param": 72, "system_vers": 253, "systemat": [10, 24, 25, 26, 32, 33, 37, 40, 44, 58, 71, 75, 84, 88, 95, 106, 108, 119, 125, 126, 161, 181, 190, 199, 205, 209, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 243, 253, 254, 261, 265, 282, 291, 293, 310], "systemconfid": 255, "systemconfig": 73, "systemctl": [90, 92, 93], "systemd": [90, 92], "systemhealthmonitor": 321, "systemintegrationtestsuit": 75, "systemmonitor": [63, 93], "systemst": 277, "s\u00b2": [53, 73, 77, 78, 85, 97, 98, 103, 131, 134, 136, 163, 164, 198, 199, 204, 205, 206, 249, 251, 258, 272, 279, 284, 289, 295, 321], "s\u1d40\u1e61": 249, "s\u1d62": 310, "s\u1e61": [204, 249], "s\u1e63": 196, "s\u1e8b_ref": 317, "s\u2080": 209, "s\u2081": [36, 201, 204, 249], "s\u2081\u00b2": [97, 310], "s\u2082": [36, 204, 249], "s\u2082\u00b2": [97, 310], "s\u2083": 36, "s\u2096": 310, "t": [12, 15, 17, 19, 25, 26, 30, 35, 36, 38, 39, 41, 44, 50, 53, 61, 62, 65, 67, 68, 73, 75, 76, 78, 79, 81, 84, 85, 86, 90, 91, 92, 94, 97, 98, 99, 102, 103, 105, 107, 114, 115, 117, 118, 120, 124, 125, 127, 128, 129, 131, 134, 135, 136, 141, 142, 144, 146, 150, 152, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 177, 178, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 213, 215, 216, 217, 220, 223, 226, 227, 231, 232, 235, 239, 245, 246, 249, 250, 253, 254, 258, 260, 261, 265, 270, 272, 273, 274, 275, 279, 284, 285, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 308, 309, 312, 315, 316, 317, 320, 321], "t0": [30, 61, 65, 78, 84, 203], "t1": [65, 161, 225, 240], "t2": 161, "t2t": [225, 240], "t_": [45, 53, 62, 74, 81, 97, 191, 193, 195, 198, 199, 200, 202, 215, 216, 225, 226, 232, 239, 240, 245, 246, 261, 279, 285, 288, 290, 293, 294, 296, 299, 310], "t_0": [200, 295], "t_1": [198, 225, 240, 295], "t_2": [198, 225, 240, 295], "t_95": [78, 197, 205], "t_arr": [59, 61, 216], "t_arrai": 86, "t_c": 198, "t_char": 220, "t_cold": 84, "t_converg": 99, "t_critic": 178, "t_final": 277, "t_i": [88, 209], "t_k": [279, 290], "t_max": [201, 202], "t_n": [52, 200, 290], "t_now": 216, "t_p": 313, "t_peak": 249, "t_r": 287, "t_r_bound": 287, "t_reach": [39, 85, 197, 204, 205, 209, 283], "t_sim": 313, "t_span": [150, 219, 220, 232], "t_stat": [68, 149, 169, 178, 274, 313, 320, 321], "t_statist": [136, 274, 321], "t_steadi": 164, "t_switch": 86, "t_test_zero_mean": 310, "t_v": 88, "t_val": [61, 291], "t_warm": 84, "tab": [13, 22, 30, 31, 64, 139, 141, 142, 144, 145, 159, 169], "tabl": [2, 13, 26, 27, 29, 30, 51, 52, 56, 57, 58, 59, 67, 82, 83, 95, 98, 127, 141, 143, 144, 169, 178, 199, 214, 219, 225, 226, 227, 229, 231, 237, 238, 239, 240, 241, 257, 259, 266, 272, 277, 293, 294, 295, 308, 309, 317], "tableau": [61, 200], "tablet": [28, 31], "tabul": 8, "tabular": 149, "tac": [85, 122, 123, 206, 297], "tackl": 33, "tag": [5, 14, 23, 31, 91, 122, 127, 139, 169, 182, 183, 188, 320], "tail": [70, 120, 169, 228, 236, 310, 313], "tail_valu": 313, "tailor": 214, "tailwind": [267, 269, 270, 271], "take": [2, 26, 49, 92, 94, 97, 98, 114, 117, 127, 131, 142, 145, 146, 150, 167, 169, 182, 183, 191, 197, 202, 207, 211, 225, 240, 254, 270, 295, 299, 308], "take_snapshot": 210, "takeawai": [82, 161, 162, 163, 166, 167, 168, 169, 202, 205, 214, 253, 313], "taken": [39, 45, 74, 221, 261], "takeru": 8, "takuya": 8, "tan": [77, 205, 230, 237], "tangent": [22, 78, 163, 192, 196, 200, 206, 222, 223, 224, 226, 230, 232, 233, 234, 235, 237, 239, 273, 289], "tanh": [17, 35, 37, 51, 55, 72, 77, 78, 82, 85, 98, 99, 100, 101, 103, 105, 106, 116, 136, 146, 163, 164, 166, 168, 192, 193, 195, 196, 197, 199, 205, 206, 223, 226, 227, 231, 232, 235, 239, 248, 273, 274, 275, 276, 287, 289], "tao": [77, 81, 205, 230, 237], "tap": [144, 145], "taper": [55, 63, 81, 197, 205], "taper_ep": 55, "taper_factor": 81, "tar": [92, 169, 320], "target": [0, 1, 2, 4, 21, 23, 24, 26, 27, 30, 31, 32, 33, 36, 39, 40, 43, 44, 45, 46, 48, 50, 53, 54, 60, 64, 65, 73, 75, 76, 86, 88, 90, 93, 94, 97, 102, 105, 106, 114, 115, 119, 127, 135, 139, 142, 143, 144, 145, 146, 152, 163, 164, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 184, 189, 194, 209, 242, 246, 247, 249, 252, 253, 254, 255, 261, 266, 268, 273, 277, 282, 283, 290, 291, 293, 297, 299, 300, 301, 308, 309, 310, 320, 323], "target_90": 318, "target_coverage_lin": 39, "target_far": 119, "target_frequ": 93, "target_percentil": 313, "target_st": [73, 75, 117, 118, 209, 252], "target_tim": 37, "target_valu": 164, "target_vari": 313, "target_vers": 73, "target_zeta_max": 252, "target_zeta_min": 252, "targetcursor": 268, "targetport": [63, 91, 92], "task": [5, 22, 39, 89, 91, 95, 98, 122, 124, 128, 129, 134, 146, 149, 156, 170, 187, 189, 190, 203, 204, 222, 224, 229, 233, 234, 238, 253, 262, 280, 310], "task1_citation_bibliography_system": 187, "task_func": 98, "task_nam": 98, "taskkil": 177, "taskset": 177, "tau": [53, 81, 120, 193, 200, 208, 246, 290], "tau_": 246, "tau_k": 120, "taylor": [81, 103, 206, 230, 237, 290], "tb": [13, 34, 44, 84, 86, 93, 151, 161, 164, 167, 194, 259, 278, 282, 283, 316, 317, 323], "tbd": [9, 29, 87, 221, 297, 304], "tc": [75, 225, 240], "tcp": [44, 63, 91, 92, 174, 177], "tcp4": 91, "tcp_interfac": 9, "tcp_socket": 101, "tcst": [169, 320], "td": [40, 81, 161, 162, 163, 166, 167, 170, 215, 251, 252, 274, 294, 300, 316], "tdd": 282, "teach": [12, 146, 165, 192, 226, 239], "teal": 263, "team": [2, 7, 8, 10, 12, 14, 35, 36, 70, 73, 91, 92, 93, 94, 98, 131, 137, 138, 139, 191, 210, 218, 242, 243, 244, 258, 261, 315, 318, 320], "tech": 269, "technic": [0, 1, 2, 14, 19, 29, 36, 38, 47, 48, 56, 57, 58, 59, 63, 64, 67, 71, 73, 79, 80, 83, 92, 93, 97, 122, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 145, 146, 160, 166, 167, 179, 181, 189, 190, 191, 197, 198, 199, 205, 218, 232, 241, 242, 244, 253, 256, 257, 261, 266, 281, 282, 283, 284, 298, 302, 318, 321, 323], "techniqu": [12, 35, 36, 55, 69, 123, 127, 138, 146, 160, 163, 164, 167, 169, 172, 174, 181, 193, 205, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 246, 254, 257, 293, 294, 297, 304, 309, 310, 314, 320], "technologi": [2, 13, 64, 78, 84, 156, 187, 194, 196, 197, 205, 222, 226, 233, 239, 320], "technometr": 310, "techrxiv": 320, "tediou": [223, 235], "tedrak": 86, "tee": [25, 27, 90, 92], "telemetri": [55, 86], "tell": [12, 268, 269], "telnet": 185, "temp_config": 73, "temp_config_fil": 282, "temperatur": 166, "tempfil": 282, "templat": [10, 11, 14, 19, 30, 32, 56, 59, 63, 72, 91, 92, 112, 127, 178, 194, 207, 215, 242, 253, 301, 316, 321], "template_manag": 72, "tempor": [119, 216, 261, 309, 310, 317], "temporari": [23, 24, 34, 46, 48, 54, 60, 61, 70, 73, 172, 173, 174, 175, 176, 179, 180, 181, 184, 282], "temporarili": [202, 224, 234, 254], "ten": [222, 229, 233, 238, 306], "tend": [228, 236], "tendon": [224, 234], "tens": 266, "tension": [159, 318], "term": [11, 15, 17, 19, 22, 35, 36, 37, 39, 45, 53, 55, 67, 76, 78, 81, 86, 87, 99, 111, 121, 125, 127, 132, 134, 135, 138, 146, 147, 151, 161, 163, 164, 166, 167, 183, 191, 193, 195, 196, 197, 199, 200, 201, 202, 204, 205, 215, 218, 219, 220, 221, 222, 224, 225, 226, 227, 231, 232, 233, 234, 239, 240, 242, 247, 249, 251, 253, 254, 258, 266, 272, 273, 275, 279, 282, 283, 287, 290, 291, 294, 295, 298, 300, 309, 310, 313, 323], "term1": [78, 168], "term2": [78, 168], "termin": [22, 39, 59, 61, 84, 98, 124, 126, 127, 129, 132, 158, 159, 164, 165, 170, 201, 202, 215, 216, 229, 232, 238, 246, 247, 250, 268, 280, 282, 290, 291, 293, 303, 323], "terminal_smc": [132, 159, 168, 303], "terminal_smc_bound": 168, "terminal_smc_config": 132, "terminal_term": 132, "terminal_term1": 168, "terminal_term2": 168, "terminalsmc": [132, 168], "terminalsmcoutput": 168, "termination_reason": 98, "terminologi": [12, 122], "terrain": 201, "terser": 142, "tertiari": [113, 119, 261], "tertiary_fdi": 119, "test": [1, 5, 10, 11, 12, 15, 16, 17, 19, 21, 22, 23, 24, 25, 33, 35, 36, 38, 39, 40, 42, 46, 49, 50, 51, 52, 53, 54, 58, 59, 63, 66, 67, 71, 72, 74, 77, 78, 79, 80, 81, 82, 85, 86, 87, 89, 91, 94, 100, 102, 103, 104, 109, 112, 113, 115, 116, 117, 118, 120, 122, 123, 127, 129, 132, 134, 135, 136, 139, 140, 144, 145, 148, 152, 157, 159, 160, 161, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 178, 181, 183, 184, 185, 187, 188, 192, 195, 196, 198, 200, 201, 203, 210, 211, 213, 215, 218, 220, 226, 228, 229, 230, 232, 236, 237, 238, 239, 241, 242, 243, 244, 247, 248, 249, 250, 251, 253, 254, 255, 260, 262, 263, 265, 266, 269, 273, 274, 276, 277, 279, 287, 290, 291, 293, 297, 298, 301, 302, 307, 308, 314, 320], "test_": 167, "test_acceleration_coeffici": 39, "test_acceleration_limit": 93, "test_adaptation_law_converg": 37, "test_adaptive_smc": 151, "test_adaptive_smc_exact_5_gain": 56, "test_adaptive_smc_gamma_valid": 114, "test_adaptive_threshold_monoton": 119, "test_algorithm_comparison": 193, "test_all_control": 117, "test_analysi": [120, 186, 283], "test_api_docs_link_to_exampl": 7, "test_api_endpoint": 93, "test_app": [34, 283], "test_application_health": 93, "test_artifact": [14, 94, 299], "test_autom": [9, 10], "test_automatic_correct": 56, "test_backup": 70, "test_bas": 93, "test_basic_controller_oper": 93, "test_basic_function": 93, "test_batch_controller_comparison": 56, "test_benchmark": [34, 42, 127, 128, 281, 283], "test_bound": 254, "test_boundary_condit": [39, 75, 195, 261], "test_boundary_handl": 39, "test_boundary_lay": 199, "test_boundary_layer_advanc": 37, "test_boundary_layer_asymptotic_behavior": 199, "test_boundary_layer_bounded_output": 207, "test_boundary_layer_continu": [195, 199], "test_boundary_layer_monoton": 199, "test_boundary_layer_monotonicity_all_method": 199, "test_boundary_layer_valid": 199, "test_bounds_low": 53, "test_bounds_upp": 53, "test_bounds_validation_enforc": 251, "test_cart": 167, "test_cas": [49, 75, 98, 310], "test_categori": 321, "test_chattering_mitig": 39, "test_classical_smc": [34, 124, 125, 128, 151, 182, 282, 323], "test_classical_smc_benchmark": 151, "test_classical_smc_gain_valid": 56, "test_classical_smc_perform": 284, "test_cleanup": 168, "test_cli_determin": [224, 234], "test_closed_loop_simul": 114, "test_code_exampl": 14, "test_complete_optimization_workflow": 283, "test_complete_simul": 282, "test_compon": 261, "test_component_compat": 321, "test_computation_precision_consist": 199, "test_computation_time_bound": 37, "test_compute_control": [132, 151, 282], "test_compute_control_never_returns_non": 300, "test_compute_control_return_typ": 300, "test_concurrent_factory_oper": 107, "test_condit": [75, 252, 279, 321], "test_config": [34, 35, 73, 93, 101, 251, 282, 287, 301, 323], "test_config_integr": 116, "test_config_parameter_extract": 56, "test_config_priority_resolut": 56, "test_config_valid": 199, "test_configuration_integr": 93, "test_configuration_load": 93, "test_configuration_migr": 73, "test_configuration_migration_valid": 114, "test_configuration_parameter_extract": 114, "test_configuration_property_all_positive_gain": 207, "test_configuration_valid": 75, "test_control": [17, 20, 34, 37, 39, 41, 101, 114, 115, 121, 122, 124, 125, 127, 128, 132, 168, 182, 189, 194, 199, 281, 282, 283, 300, 320, 323], "test_control_bounded": 39, "test_control_comput": 168, "test_control_computation_perform": 114, "test_control_computation_st": 321, "test_control_law_comput": 39, "test_control_law_decomposit": 199, "test_control_objectives_achiev": 75, "test_control_satur": [151, 168], "test_control_saturation_safeti": 75, "test_control_signal_satur": 93, "test_controller_boundedness_properti": 284, "test_controller_cr": 116, "test_controller_creation_success": 114, "test_controller_dynamics_integr": 75, "test_controller_factori": [20, 114], "test_controller_factory_consist": 75, "test_controller_factory_integr": [76, 93, 251], "test_controller_initi": 321, "test_controller_interface_compli": 301, "test_controller_interoper": 321, "test_controller_output_bound": 283, "test_controller_parameter_valid": 208, "test_controller_perform": [114, 127], "test_controller_plant_compat": 114, "test_controller_registry_complet": 114, "test_controller_return_typ": [40, 300], "test_controller_robustness_monte_carlo": 283, "test_controller_st": [109, 116, 282], "test_controller_transition_st": 37, "test_controller_type_alias": 56, "test_converg": 124, "test_convergence_analysi": 114, "test_convergence_criteria": 39, "test_convergence_valid": 37, "test_cor": [34, 124, 128, 151, 226, 239, 282, 283], "test_count": 39, "test_coverag": 75, "test_coverage_complet": 75, "test_creat": 115, "test_create_controller_invalid_gain": 56, "test_create_controller_invalid_typ": 56, "test_create_controller_with_config": 56, "test_create_controller_with_custom_gain": 56, "test_create_controller_with_default": 56, "test_create_smc_for_pso": 56, "test_critical_docs_not_orphan": 7, "test_cross_refer": 94, "test_cross_reference_statistics_summari": 7, "test_custom_configuration_overrid": 56, "test_data_avail": 93, "test_database_connect": 93, "test_database_health": 93, "test_degenerate_condit": 75, "test_degraded_mode_oper": 37, "test_deprecation_handl": 114, "test_distribut": 242, "test_disturbance_reject": [75, 248], "test_document": [14, 94], "test_dur": [75, 93], "test_dynam": [124, 151, 300, 321], "test_dynamics_integr": 39, "test_dynamics_model_cr": 56, "test_e2": 93, "test_emergency_mechan": 37, "test_emergency_stop_activ": 37, "test_emergency_stop_button": 93, "test_emergency_stop_integr": 261, "test_emergency_stop_respons": 93, "test_encoding_fix": 190, "test_end_to_end": 127, "test_end_to_end_valid": 199, "test_energy_conserv": 39, "test_equilibrium": 151, "test_equilibrium_point": 39, "test_equivalent_control": 207, "test_error": 101, "test_error_recovery_mechan": 114, "test_example_1_basic_usag": 56, "test_example_2_pso_optim": 56, "test_example_3_batch_comparison": 56, "test_example_4_custom_overrid": 56, "test_example_5_error_handl": 56, "test_examples_coverage_adequ": 14, "test_examples_distributed_across_doc": 14, "test_execut": 282, "test_execution_guid": [24, 33, 282], "test_execution_ord": 75, "test_exponential_convergence_r": 75, "test_external_links_docu": 7, "test_factori": [80, 254], "test_factory_configuration_error": 56, "test_factory_creation_perform": 114, "test_factory_exampl": 52, "test_factory_perform": 114, "test_factory_plant_integr": 114, "test_factory_registry_consist": 38, "test_failure_report": 124, "test_fallback_configur": 56, "test_fault_detect": 285, "test_fault_detection_chain": 261, "test_fault_detection_respons": 37, "test_fault_detection_system": 93, "test_fault_inject": 261, "test_fault_injection_scenario": 93, "test_fault_persist": 119, "test_fault_toler": 93, "test_fdi": 285, "test_fdi_infrastructur": 120, "test_fil": 282, "test_finite_time_converg": [39, 121, 125], "test_finite_time_reach": [75, 124], "test_fixed_threshold_oper": 120, "test_floating_point_consist": 199, "test_full_simul": [124, 151], "test_full_simulation_benchmark": 151, "test_full_vs_simplified_dynam": 283, "test_funct": [93, 255, 291], "test_gain": [49, 72, 98, 114, 115, 116, 117, 148, 254, 276], "test_gain_constraint": 114, "test_gain_count_mismatch": 56, "test_gain_valid": [39, 116, 151], "test_gain_validation_error": 114, "test_get_default_gain": 56, "test_get_gain_bounds_for_pso": 56, "test_global_best_track": 39, "test_graceful_degrad": [56, 119], "test_ground_truth_recal": 298, "test_hardware_requir": 93, "test_hardware_safety_integr": 93, "test_hil": 283, "test_hurwitz_stability_check": 199, "test_hybrid_controller_return_typ": 81, "test_hybrid_smc": 151, "test_hybrid_smc_sub_configuration_valid": 114, "test_id": 285, "test_implement": 278, "test_inertia_weight_bound": 39, "test_infrastructure_document": 283, "test_infrastructure_validation_report": [24, 33, 284], "test_initi": [124, 132, 151], "test_initialization_invalid_expon": 168, "test_initialization_invalid_gain_count": 168, "test_initialization_valid_gain": 168, "test_input": 207, "test_integr": [41, 44, 124, 127, 199, 207, 210, 211, 213, 281, 282, 283, 300], "test_integration_energy_conserv": 284, "test_invalid_configur": 73, "test_invalid_controller_typ": 116, "test_invalid_gain_count": 151, "test_invalid_type_str": 56, "test_larg": 167, "test_linear": 207, "test_linearization_accuraci": 39, "test_link_coverage_adequ": 7, "test_linkcod": [16, 89, 188], "test_list_available_control": 56, "test_long_term_st": 35, "test_lyapunov": [226, 239], "test_lyapunov_decreas": 195, "test_lyapunov_decrease_sta": [226, 239], "test_lyapunov_function_properti": 199, "test_lyapunov_stability_comprehens": 75, "test_lyapunov_stability_condit": 37, "test_lyapunov_stability_properti": [209, 261], "test_mass_matrix_condit": 35, "test_mathematical_constraint": 73, "test_matric": 213, "test_matrix": 75, "test_matrix_condit": [35, 75], "test_matrix_regular": 213, "test_memory_effici": 114, "test_memory_leak_detect": 211, "test_memory_manag": [41, 44, 210, 211], "test_memory_regress": 42, "test_memory_resource_deep": [210, 211], "test_memory_usage_bound": 37, "test_memory_usage_valid": 114, "test_modular_adaptive_smc": 207, "test_modular_control": 207, "test_momentum_conserv": 39, "test_monitor": 261, "test_monitoring_integr": 93, "test_monitoring_system": 93, "test_monoton": 207, "test_mpc_unavailable_import_error": 56, "test_multi_controller_consist": 75, "test_multi_mode_coordin": 37, "test_multiple_controller_coordin": 114, "test_my_control": 127, "test_nam": [93, 99, 207, 255], "test_negative_surface_gains_reject": 199, "test_network_connect": 93, "test_new_control": 52, "test_new_controller_cr": 51, "test_new_featur": [151, 282], "test_new_function": 282, "test_no_broken_internal_link": 7, "test_no_chatt": 35, "test_nominal_oper": 261, "test_non_finite_gain": 56, "test_non_positive_gain": 56, "test_nonzero_valid": 207, "test_novel_control": 320, "test_novel_controller_initi": 320, "test_novel_controller_st": 320, "test_numerical_integration_energy_conserv": 209, "test_numerical_precision_st": 75, "test_numerical_st": [35, 39, 98, 213], "test_numerical_stability_deep": 213, "test_numerical_stability_extreme_valu": 199, "test_numerical_stability_large_valu": 199, "test_numerical_stability_small_valu": 199, "test_optim": [124, 128, 151, 193, 224, 234, 282, 283, 323], "test_optimization_performance_distribut": 283, "test_optimization_workflow": 282, "test_orchestr": 75, "test_parallel_cap": 93, "test_parallel_pso_optim": 283, "test_parameter_bound": 39, "test_parameter_boundary_detect": 93, "test_parameter_boundary_enforc": 93, "test_parameter_bounded": 37, "test_parameter_bounds_valid": 114, "test_parameter_count": 98, "test_parameter_estimation_complet": 37, "test_parameter_resolution_hierarchi": 114, "test_parameter_uncertainty_robust": 75, "test_parameter_valid": [114, 282], "test_particl": [76, 254], "test_particle_dynam": 39, "test_pass": 115, "test_performance_preserv": 98, "test_performance_regress": 251, "test_performance_signific": 274, "test_phys": 323, "test_physical_realiz": 98, "test_plant": 44, "test_plant_parameter_sensit": 114, "test_point": 279, "test_position_limit": 93, "test_positive_gain_requir": 199, "test_positive_valid": 207, "test_problem": 209, "test_property_bas": [23, 34], "test_property_based_safeti": 261, "test_property_based_smc": 207, "test_pso_control": 282, "test_pso_controller_cr": 114, "test_pso_controller_factori": 56, "test_pso_controller_interface_compli": 76, "test_pso_controller_optim": 283, "test_pso_convergence_monte_carlo": [283, 284], "test_pso_convergence_properti": [73, 209], "test_pso_evaluation_benchmark": 114, "test_pso_gain_bound": 114, "test_pso_gain_valid": 114, "test_pso_hybrid_integr": 300, "test_pso_hybrid_integration_no_error": 300, "test_pso_integr": [93, 114, 116, 321], "test_pso_integration_workflow": 20, "test_pso_optim": [39, 124, 151], "test_pso_optimization_compat": 116, "test_pso_optimization_converg": 251, "test_pso_optimization_integr": 76, "test_pso_optimization_perform": 283, "test_pso_optimization_simul": 114, "test_pso_optimization_workflow": 56, "test_pso_thread_safeti": 114, "test_pso_wrapper_compute_control": 56, "test_pso_wrapper_validate_gain": 56, "test_ratio": [310, 313], "test_reaching_law_satisfact": 199, "test_real_time_constraint": 114, "test_realistic_paramet": 39, "test_reset_function": 39, "test_reset_return_typ": 300, "test_result": [75, 98, 117, 209, 242, 254, 255, 278, 321], "test_return_typ": 300, "test_rk45_energy_conserv": 283, "test_robustness_analysi": 114, "test_robustness_to_mass_vari": 151, "test_runnable_example_execut": 14, "test_runtime_valid": 73, "test_safeti": [93, 261], "test_safety_critical_fault_detect": 119, "test_safety_interlock": 93, "test_satur": 132, "test_saturation_boundary_condit": 261, "test_saturation_limit": 39, "test_saturation_property_bas": 261, "test_scenario": [75, 98, 108, 112, 114, 117, 209, 274, 275, 277, 313, 321], "test_scor": 310, "test_second_order_sliding_converg": [122, 125], "test_simul": [39, 44], "test_simulation_integr": 107, "test_simulation_memory_overhead": 44, "test_simulation_memory_usag": 283, "test_simulation_runn": [151, 282], "test_simulation_workflow": 39, "test_siz": 310, "test_sliding_mode_reach": 283, "test_sliding_surfac": [124, 207, 282], "test_sliding_surface_comput": [168, 283], "test_sliding_surface_finite_output": 207, "test_sliding_surface_gain_sensit": 199, "test_sliding_surface_homogen": 199, "test_sliding_surface_linear": 199, "test_sliding_surface_linearity_properti": 199, "test_sliding_surface_reach": 284, "test_sliding_surface_st": 125, "test_smal": 167, "test_smc_8hour_continuous_oper": 210, "test_smc_memory_leak_detect": 210, "test_smc_stability_properti": 73, "test_sta_smc": [121, 122, 124, 125, 151], "test_sta_smc_k1_k2_constraint": 56, "test_stability_lyapunov": 39, "test_stability_monitoring_system": 93, "test_stability_preserv": 98, "test_stability_properti": [37, 114], "test_stability_valid": 37, "test_stability_with_uncertainti": 274, "test_stat": [20, 40, 49, 51, 76, 93, 98, 108, 114, 115, 117, 248, 254, 255, 274, 276, 277, 278, 300, 301], "test_state_constraint_satisfact": 75, "test_statist": [75, 310], "test_statistical_properti": 283, "test_statistical_significance_test": 193, "test_structure_optimization_report": 190, "test_suit": [75, 88, 321], "test_suite_result": 75, "test_super_twisting_k1_k2_relationship": 114, "test_super_twisting_smc": 207, "test_switching_funct": 207, "test_switching_gain_valid": 199, "test_switching_integr": 37, "test_switching_logic_complet": 37, "test_switching_logic_valid": 37, "test_symplectic_integr": 39, "test_system_startup": 93, "test_target": 93, "test_terminal_smc": [132, 168], "test_termination_condit": 39, "test_thread_safe_concurrent_cr": 56, "test_thread_safeti": 114, "test_thread_safety_bas": 114, "test_tim": 254, "test_timestamp": 98, "test_tutorials_link_to_api": 7, "test_typ": [255, 310, 313], "test_type_norm": 56, "test_uncertainty_robust": 251, "test_util": [79, 199, 282, 283], "test_valid_configur": 73, "test_valid_gain_valid": 114, "test_validation_framework": 199, "test_validation_methodologi": 194, "test_vector_sim": 151, "test_veloc": 167, "test_velocity_clamp": 39, "test_velocity_limit": 93, "test_weighted_residual_correct": 119, "test_with_fixtur": 151, "test_workflow": 93, "test_zero_surface_gains_reject": 199, "testabl": [2, 17, 220], "testadaptivestabilityvalid": 37, "testalgorithmcomparison": 193, "testb": [166, 222, 233], "testclassicalsmc": 151, "testclassicalsmcconfigvalid": 199, "testcod": 55, "testconfig": 251, "testconfigurationvalidationcoverag": 199, "testcontrollerfactorycor": 114, "testcoveragestandard": 39, "testemergencystopmechan": 37, "tester": 117, "testexecutionfailur": 88, "testfactoryexampl": 56, "testfactoryplantintegr": 114, "testfailur": 88, "testhybridswitchingintegr": 37, "testing_coverag": [40, 301], "testing_framework_technical_guid": 281, "testing_procedur": [137, 139, 141, 142, 143, 144], "testmemoryusag": 211, "testmycontrol": 151, "testnewcontrol": 321, "testnumericalaccuraci": 199, "testparametervalid": 114, "testpropertybasedsmc": 207, "testpsointegr": [20, 114], "testrealtimeconstraint": 37, "testrealtimeperform": 114, "testresult": 255, "testreturntyp": 300, "tests_fail": 151, "tests_pass": 151, "testsafetycompon": 261, "testscenario": 209, "teststatist": 75, "testsuit": 88, "testsuitefailur": 75, "testsuiteresult": 75, "testsystemlevelmathemat": 199, "testterminalsmc": 168, "teukolski": 290, "tex": 149, "text": [1, 13, 15, 24, 25, 26, 29, 30, 31, 32, 33, 39, 45, 53, 57, 62, 74, 76, 81, 82, 84, 88, 89, 90, 92, 95, 97, 107, 119, 120, 140, 144, 145, 154, 156, 159, 165, 178, 187, 191, 193, 195, 198, 200, 201, 202, 205, 208, 209, 216, 220, 221, 222, 224, 225, 227, 230, 231, 232, 233, 234, 237, 240, 242, 245, 246, 253, 257, 258, 261, 262, 263, 264, 266, 269, 270, 279, 280, 285, 287, 288, 289, 290, 293, 294, 295, 296, 298, 306, 318], "text_until_delimit": 299, "textanim": [267, 268, 269, 271], "textbf": 299, "textbook": [122, 123, 187, 298], "textcont": 140, "textcursor": 268, "textpressur": 268, "texttrail": 268, "texttyp": [267, 268, 271], "textur": 268, "tf": 30, "tfrac": 232, "tfrac12": [226, 239], "th1": [41, 81, 85, 197, 228, 236], "th1dot": [41, 81, 85], "th2": [41, 81, 85, 197, 228, 236], "th2dot": [41, 81, 85], "than": [15, 17, 22, 27, 33, 35, 41, 45, 49, 50, 51, 56, 59, 61, 65, 67, 68, 71, 73, 77, 78, 82, 84, 85, 92, 98, 107, 112, 115, 118, 124, 127, 133, 134, 145, 149, 162, 163, 164, 166, 167, 171, 177, 197, 198, 199, 200, 202, 203, 208, 209, 216, 222, 225, 226, 227, 231, 232, 233, 239, 240, 253, 283, 290, 291, 293, 297, 298, 300, 308, 309, 310, 318, 320], "thank": 270, "thei": [3, 17, 45, 58, 74, 94, 114, 137, 165, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 252, 291], "them": [17, 51, 53, 98, 165, 166, 222, 224, 225, 232, 233, 234, 240, 260, 298, 313], "theme": [1, 13, 15, 27, 28, 30, 31, 137, 138, 139, 140, 142, 144, 156, 159, 267], "theme_color": 31, "themselv": [133, 222, 233], "theorem": [16, 52, 57, 58, 68, 69, 85, 89, 119, 120, 124, 162, 188, 191, 200, 202, 205, 220, 249, 251, 287, 293, 294, 320], "theorem_pattern": [298, 299], "theorem_verification_guid": [122, 123, 124], "theoret": [2, 3, 10, 13, 19, 35, 44, 53, 55, 58, 59, 64, 65, 73, 75, 78, 79, 82, 88, 95, 98, 103, 119, 120, 121, 122, 125, 126, 160, 162, 163, 167, 170, 184, 190, 193, 194, 196, 197, 200, 204, 205, 215, 224, 226, 232, 234, 239, 242, 243, 248, 250, 251, 255, 256, 257, 259, 261, 277, 284, 287, 290, 293, 294, 296, 298, 310, 323], "theoretical_bound": [75, 125], "theoretical_convergence_tim": 193, "theoretical_far": 119, "theoretical_literature_valid": 255, "theoretical_onli": 255, "theoretical_properties_verifi": 209, "theoretical_reaching_tim": 209, "theoretical_sound": 255, "theoretical_st": 291, "theoretical_valid": 255, "theori": [1, 13, 16, 17, 19, 27, 31, 32, 49, 50, 52, 56, 58, 59, 61, 64, 65, 67, 72, 78, 80, 83, 89, 95, 103, 106, 112, 116, 120, 122, 125, 126, 129, 132, 133, 134, 146, 152, 155, 166, 167, 168, 169, 170, 187, 188, 189, 190, 191, 196, 198, 201, 204, 214, 215, 216, 217, 218, 220, 222, 223, 224, 230, 232, 233, 234, 235, 237, 242, 243, 246, 248, 251, 255, 257, 262, 263, 265, 274, 275, 277, 280, 284, 286, 287, 288, 291, 298, 304, 310, 318, 320], "theorist": 192, "theory_max": 251, "theory_min": 251, "therebi": [222, 227, 231, 232, 233], "therefor": [191, 205, 221, 222, 225, 227, 231, 232, 233, 240], "thermal": [176, 317], "thesadeq": [2, 37, 44, 70, 89, 91, 92, 121, 122, 124, 126, 129, 146, 189, 315, 320], "theta": [74, 76, 81, 136, 152, 171, 191, 198, 199, 200, 201, 204, 209, 220, 221, 224, 225, 226, 227, 231, 232, 234, 239, 240, 246, 258, 272, 279, 287, 288, 289, 290, 293, 294, 296, 299], "theta0": 208, "theta1": [10, 17, 35, 41, 61, 63, 73, 75, 76, 77, 78, 79, 97, 132, 134, 135, 136, 149, 150, 158, 159, 164, 168, 170, 171, 177, 185, 198, 199, 204, 213, 220, 226, 232, 239, 258, 261, 277, 287, 320], "theta1_0": [131, 135], "theta1_0_dot": [131, 135], "theta1_arrai": 303, "theta1_ddot": 204, "theta1_dot": [10, 17, 41, 61, 63, 73, 75, 76, 77, 170, 185, 199, 203, 204, 220], "theta1_dot_gain": 73, "theta1_integr": 76, "theta1_sampl": 171, "theta1_steadi": 164, "theta1_valu": 135, "theta1dot": [41, 171, 177], "theta2": [10, 17, 35, 41, 61, 63, 73, 75, 76, 77, 78, 79, 97, 132, 134, 135, 149, 150, 158, 164, 168, 170, 171, 177, 185, 198, 199, 204, 213, 220, 226, 232, 239, 258, 261, 277, 287, 320], "theta2_0": [131, 135], "theta2_0_dot": [131, 135], "theta2_ddot": 204, "theta2_dot": [10, 17, 41, 61, 63, 73, 76, 77, 170, 185, 199, 203, 204, 220], "theta2_dot_gain": 73, "theta2_integr": 76, "theta2dot": [41, 171, 177], "theta_": [191, 193, 224, 226, 227, 231, 232, 234, 239, 290], "theta_0": 208, "theta_1": [74, 81, 126, 152, 191, 198, 199, 200, 201, 220, 221, 225, 227, 231, 240, 246, 258, 272, 287, 288, 289, 290, 293, 294, 295, 296, 299, 306, 316], "theta_2": [74, 81, 152, 191, 198, 199, 200, 201, 220, 221, 225, 227, 231, 240, 246, 258, 272, 287, 288, 289, 290, 293, 294, 295, 296, 299, 306, 316], "theta_bound": 136, "theta_dot": 209, "theta_hat": [191, 258], "theta_i": [97, 193, 220, 287, 293], "theta_j": 291, "theta_max": [61, 191], "theta_min": [61, 191], "theta_rang": [228, 236], "theta_scal": 133, "theta_tild": 258, "theta_tru": 258, "thi": [5, 10, 12, 14, 18, 19, 20, 21, 22, 26, 28, 30, 31, 33, 34, 40, 42, 44, 45, 51, 52, 53, 58, 61, 64, 65, 66, 67, 69, 70, 74, 75, 76, 78, 81, 82, 83, 84, 86, 88, 89, 90, 94, 95, 96, 97, 124, 125, 126, 127, 128, 137, 138, 139, 142, 143, 146, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 167, 170, 171, 177, 188, 189, 195, 198, 199, 201, 204, 206, 212, 214, 215, 220, 221, 223, 224, 226, 227, 231, 232, 234, 235, 239, 241, 245, 246, 247, 249, 250, 252, 253, 256, 258, 260, 261, 263, 267, 268, 269, 272, 273, 275, 277, 285, 286, 287, 288, 289, 290, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 312, 314, 315, 318, 322, 323], "thick": [12, 30, 35, 51, 65, 72, 73, 78, 97, 103, 105, 107, 116, 132, 158, 163, 166, 168, 179, 181, 192, 195, 196, 199, 204, 206, 258, 273, 275, 279, 289, 293, 294, 298], "thicker": [163, 196], "thin": [163, 222, 223, 233, 235], "think": 147, "thinner": [163, 167, 196], "third": [71, 72, 221, 230, 232, 237, 294], "third_party_licens": 15, "thm": 298, "thorough": [55, 58, 72, 121, 122, 128, 148, 162, 165, 167, 170, 207, 250, 300], "thorough_gain": [128, 148], "thoroughli": [73, 137, 141, 194], "those": [51, 232, 285], "though": [163, 205, 226, 239], "thought": [2, 17], "thousand": [193, 220, 248], "thread": [9, 27, 38, 52, 53, 56, 59, 67, 71, 81, 82, 92, 93, 95, 106, 108, 114, 115, 153, 155, 203, 216, 218, 241, 245, 247, 248, 250, 251, 254, 268, 277, 283], "thread_content": 111, "thread_count": [111, 113], "thread_deadlock": 111, "thread_execution_time_": 111, "thread_id": [105, 114], "thread_pool": 98, "thread_safe_cr": 106, "thread_safe_fitness_funct": 117, "thread_safeti": [9, 98], "thread_safety_pass": 65, "thread_safety_test": 65, "thread_safety_tests_pass": 100, "threading_lay": 254, "threadpoolexecutor": [92, 98, 104, 105, 106, 107, 117, 253, 280, 283], "threads_per_block": 104, "three": [1, 7, 22, 31, 34, 53, 56, 59, 61, 78, 119, 120, 129, 152, 153, 154, 159, 161, 164, 193, 201, 203, 220, 222, 227, 231, 232, 233, 243, 267, 269, 286, 288, 291, 310, 313], "threshold": [1, 10, 14, 16, 17, 22, 26, 35, 37, 44, 45, 51, 53, 55, 58, 61, 69, 70, 72, 73, 78, 82, 86, 87, 88, 92, 94, 98, 103, 105, 113, 114, 117, 118, 125, 136, 158, 162, 164, 165, 167, 170, 171, 181, 188, 193, 195, 196, 199, 203, 205, 206, 208, 210, 213, 216, 220, 222, 223, 225, 226, 227, 231, 233, 235, 239, 240, 247, 248, 250, 251, 255, 280, 282, 283, 284, 285, 290, 298, 306, 308, 309, 310, 312, 318], "threshold_adapt": [9, 17], "threshold_bas": 119, "threshold_factor": [118, 119, 120, 285], "threshold_high": [202, 214], "threshold_low": [202, 214], "threshold_mb": [17, 136, 210, 211], "threshold_optim": 255, "threshold_viol": 39, "thresholdoptim": 255, "thresholdoptimizationresult": 255, "throttl": 111, "through": [12, 17, 22, 24, 32, 33, 35, 40, 53, 58, 61, 64, 75, 82, 88, 93, 95, 109, 112, 117, 119, 127, 146, 189, 191, 192, 193, 197, 204, 222, 223, 224, 225, 226, 232, 233, 234, 235, 239, 240, 245, 249, 252, 253, 254, 259, 261, 270, 273, 278, 286, 287, 290, 293, 294, 295, 300, 301], "throughout": [2, 19, 25, 26, 28, 33, 37, 40, 63, 65, 75, 97, 108, 121, 146, 147, 153, 156, 160, 167, 182, 190, 192, 222, 224, 233, 234, 243, 250, 251, 256, 284, 286, 288, 289, 290, 303], "throughput": [17, 19, 22, 45, 52, 53, 54, 92, 193, 216, 222, 232, 233, 274, 283, 284, 297, 299, 317], "throughput_pass": 92, "throughputreq": 317, "throw": 203, "thu": [84, 224, 227, 230, 231, 234, 237, 287, 306], "thumb": [84, 98, 148], "th\u00e9or\u00e8m": 298, "ti": [65, 310], "tibshirani": 310, "tick_param": [253, 254], "tier": [39, 80, 88, 243, 255, 290, 298], "tier_analysi": 255, "tier_compli": 255, "tight": [17, 61, 84, 85, 86, 98, 113, 162, 193, 197, 215, 253, 254, 280], "tight_layout": [52, 61, 77, 81, 86, 118, 149, 150, 164, 169, 171, 177, 178, 215, 216, 248, 253, 254, 280, 320], "tighten": [84, 86, 104, 112, 182, 183, 232, 247, 253], "tightening_factor": 112, "tighter": [78, 84, 86, 112, 113, 290], "tightli": [17, 178], "tikhonov": [35, 55, 78, 205, 206, 213, 220], "tild": [191, 246, 258, 279, 287, 288, 289, 290, 291, 294], "tile": [171, 203], "tilt": [134, 161, 164, 165, 268, 271], "tiltdegre": 267, "tiltedcard": [267, 268, 269, 271], "time": [1, 7, 8, 10, 12, 14, 16, 22, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 38, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 63, 64, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 88, 90, 92, 93, 95, 97, 98, 100, 103, 105, 110, 114, 115, 117, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 143, 144, 145, 146, 148, 150, 151, 152, 154, 155, 157, 162, 164, 166, 167, 169, 170, 171, 172, 173, 174, 180, 182, 183, 184, 185, 188, 189, 190, 192, 193, 198, 199, 200, 201, 202, 203, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 242, 243, 244, 247, 248, 250, 254, 255, 256, 257, 258, 259, 260, 265, 270, 275, 276, 277, 278, 282, 283, 285, 286, 289, 292, 293, 294, 295, 296, 300, 301, 306, 308, 309, 316, 317, 318, 320, 322], "time_arrai": [150, 193, 303], "time_const": 208, "time_domain": 9, "time_in_slid": [55, 77], "time_log": 150, "time_norm": 133, "time_per_iter": 254, "time_scal": 73, "time_seri": [252, 310], "time_span": 209, "time_step": 208, "time_thresh": 98, "time_threshold": 98, "time_to_converg": 75, "time_v": 133, "time_weighted_error": 107, "timedelta": 254, "timefram": 323, "timelin": [5, 36, 37, 39, 65, 67, 102, 105, 122, 164, 218, 255, 298], "timeout": [1, 14, 16, 22, 23, 24, 26, 27, 29, 32, 33, 38, 49, 50, 52, 56, 62, 63, 72, 73, 82, 91, 92, 93, 98, 103, 104, 105, 106, 112, 114, 115, 116, 147, 164, 177, 188, 208, 245, 248, 255, 275, 276, 277], "timeout_context": [104, 112, 255], "timeout_handl": 112, "timeout_second": [98, 247], "timeouterror": [58, 98, 104, 105, 112, 115, 248, 255], "timeoutsecond": 92, "timer": [61, 177], "times10": [74, 221], "times_arrai": 209, "times_s": 171, "timeseriesdata": 317, "timeseriessplit": [9, 10], "timestamp": [5, 37, 39, 44, 63, 70, 93, 98, 102, 108, 117, 119, 170, 174, 185, 253, 254, 255, 278, 280, 318], "timestep": [49, 61, 72, 77, 78, 84, 85, 86, 98, 112, 116, 118, 120, 124, 127, 128, 129, 131, 132, 134, 136, 146, 150, 164, 168, 185, 193, 196, 199, 201, 203, 208, 215, 216, 273, 275, 277, 278, 279], "timing_analysi": 209, "timing_measur": 209, "timing_requir": 209, "timing_result": 300, "timingrequir": 209, "tini": [200, 232, 310], "tip": [1, 31, 64, 78, 82, 83, 95, 127, 129, 134, 150, 152, 161, 164, 202, 220, 232, 262, 263, 268], "tire": [224, 234], "titl": [2, 5, 8, 17, 24, 27, 28, 32, 33, 39, 53, 65, 92, 118, 121, 122, 123, 126, 127, 129, 133, 134, 135, 143, 148, 159, 166, 167, 170, 171, 187, 193, 201, 202, 216, 254, 257, 266, 267, 269, 271, 280, 303, 320], "tk": 146, "tkinter": 146, "tldrlegal": 15, "tlsv1": 92, "tmp": [91, 92], "tn": 70, "to_control": 37, "to_controller_param": 98, "to_csv": [149, 169, 178, 320], "to_dict": [9, 10, 165, 196], "to_markdown": 170, "to_str": [51, 53], "to_vers": 72, "toast": 31, "toc": 24, "toctre": [24, 25, 26, 32, 52, 64, 95, 127], "todai": [257, 310], "todo": [11, 94, 321], "togeth": [17, 45, 139, 141, 192, 232, 283], "toggl": [1, 29, 30, 140, 143, 144, 145, 154, 156, 163, 224, 234, 269], "togglebutton": [8, 15, 16, 188], "token": [67, 188, 309], "tokhi": [230, 237], "tol": [35, 53, 193, 200, 290], "toler": [35, 36, 39, 40, 53, 55, 61, 62, 65, 75, 84, 86, 93, 98, 107, 113, 118, 119, 120, 123, 162, 166, 174, 193, 200, 201, 202, 205, 207, 208, 209, 215, 216, 218, 220, 222, 223, 224, 226, 232, 233, 234, 235, 239, 246, 253, 254, 255, 259, 261, 265, 279, 282, 283, 284, 287, 290, 310, 320, 321], "tolerance_effect": 255, "tolerance_tun": 255, "toleranceeffectivenessreport": 255, "tolerancetun": 255, "tolist": [72, 98, 104, 107, 109, 116, 117, 119, 133, 159, 209, 216, 277, 287, 291, 303], "tomarchio": [197, 205, 230, 237], "toml": [39, 90, 282], "tone": [12, 13, 266], "too": [32, 35, 36, 44, 53, 65, 72, 73, 77, 84, 85, 86, 98, 112, 113, 114, 115, 116, 117, 124, 128, 131, 132, 140, 144, 146, 148, 151, 155, 162, 163, 164, 166, 167, 170, 182, 183, 193, 199, 200, 201, 205, 227, 231, 232, 247, 251, 253, 254, 273, 276, 283, 290, 310], "took": [170, 232, 254, 318], "tool": [1, 2, 4, 7, 10, 12, 14, 15, 24, 31, 33, 39, 40, 59, 71, 76, 78, 81, 86, 91, 93, 95, 102, 122, 127, 129, 130, 140, 145, 146, 149, 165, 166, 170, 185, 187, 189, 190, 222, 223, 233, 235, 254, 256, 257, 262, 266, 274, 284, 297, 300, 315, 316, 317, 318, 321], "toolbar": [144, 157], "toolbox": [187, 259], "toolchain": 232, "toolkit": [8, 117, 257], "tools_vers": 298, "tooltip": [30, 64, 140, 157, 265], "top": [14, 31, 44, 46, 71, 84, 95, 126, 139, 140, 144, 145, 157, 221, 224, 225, 227, 231, 232, 234, 240, 265, 266, 269, 290, 296, 297, 308], "topic": [2, 11, 12, 13, 82, 95, 121, 125, 126, 127, 146, 164, 165, 166, 167, 168, 169, 170, 172, 187, 193, 199, 257, 277], "topic_authoryear_shorttitl": 187, "toplevel": 70, "topologi": [156, 162, 174, 246], "topologykei": 92, "torch": 91, "torchaudio": 91, "torchvis": 91, "torqu": [84, 161, 176, 221, 223, 225, 232, 235, 240, 258], "tos": 138, "toshihiko": 8, "total": [1, 2, 4, 8, 9, 10, 14, 17, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 39, 43, 44, 55, 56, 61, 65, 67, 71, 76, 77, 78, 82, 84, 92, 98, 107, 108, 115, 117, 118, 119, 120, 121, 122, 124, 126, 127, 133, 135, 136, 139, 141, 143, 146, 147, 149, 153, 155, 156, 158, 161, 163, 164, 165, 167, 169, 170, 177, 182, 192, 194, 197, 199, 200, 201, 202, 203, 209, 214, 216, 218, 220, 225, 226, 227, 230, 231, 237, 239, 240, 242, 248, 249, 251, 253, 254, 255, 256, 257, 268, 270, 276, 280, 283, 284, 288, 290, 295, 297, 298, 299, 302, 310, 313, 320], "total_byt": 171, "total_cal": 101, "total_check": [92, 280], "total_claim": 298, "total_claims_extract": 298, "total_compute_tim": 101, "total_constraint_viol": 75, "total_control": 199, "total_controllers_test": 98, "total_cost": [20, 51, 113, 117, 133, 248, 277, 313], "total_coverag": 88, "total_debug_sess": 117, "total_energi": [61, 86, 203, 209, 220], "total_error": 98, "total_error_count": 98, "total_ev": 98, "total_evalu": [63, 98], "total_evaluation_tim": 98, "total_fil": 255, "total_growth": 117, "total_improv": 318, "total_inject": 119, "total_iter": [98, 253], "total_jitter_std": 209, "total_lat": 209, "total_lin": 39, "total_mass": 220, "total_mb": 171, "total_migr": 102, "total_optim": 250, "total_optimization_tim": [98, 251], "total_overhead": 300, "total_per_step": 81, "total_perform": 313, "total_point": 209, "total_request": 98, "total_scor": [98, 112, 301], "total_second": [280, 318], "total_test": [75, 98, 115, 254], "total_test_point": [75, 209], "total_thread": 65, "total_tim": [61, 98, 104, 114, 115, 117, 135, 248, 253], "total_time_pattern": 318, "total_time_sec": 298, "total_time_second": 318, "total_util": 209, "total_viol": [75, 207], "total_warn": 98, "total_weight": [209, 254, 255, 277], "total_workflow": 252, "tottim": 298, "touch": [1, 29, 30, 31, 64, 139, 144, 145, 153, 156], "toward": [39, 45, 77, 86, 120, 162, 163, 164, 199, 202, 205, 215, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 270, 291, 293, 306], "tp": 298, "tqdm": 127, "tr": 70, "trace": [27, 28, 38, 40, 118, 152, 250, 260, 282, 298], "traceabl": [190, 266], "traceback": [72, 104, 117, 282, 300, 323], "tracemalloc": 210, "track": [1, 9, 10, 15, 16, 17, 20, 21, 24, 30, 33, 35, 37, 40, 44, 45, 52, 55, 59, 62, 63, 64, 65, 67, 68, 72, 73, 74, 77, 78, 79, 81, 82, 85, 86, 87, 98, 99, 102, 103, 107, 114, 117, 118, 124, 125, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 146, 148, 149, 153, 156, 161, 163, 164, 166, 167, 169, 170, 177, 182, 183, 188, 192, 193, 194, 196, 199, 201, 202, 203, 206, 210, 211, 213, 214, 216, 218, 220, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 244, 245, 248, 249, 250, 265, 273, 275, 279, 285, 287, 288, 289, 290, 291, 293, 294, 296, 297, 303, 306, 310, 313, 316, 317, 319, 320], "track_converg": 133, "track_execut": 37, "tracker": [211, 269, 297], "tracking_error": [35, 81, 82, 83, 248, 273, 294], "tracking_object": 293, "tracking_perform": [248, 321], "tractabl": [84, 163], "trade": [22, 36, 55, 59, 61, 65, 77, 78, 84, 86, 120, 127, 148, 156, 164, 165, 166, 167, 169, 182, 183, 184, 192, 193, 195, 196, 201, 202, 205, 206, 216, 220, 222, 223, 226, 227, 229, 230, 231, 233, 235, 237, 238, 239, 246, 250, 253, 260, 265, 284, 290, 293, 294, 297, 298, 310, 313], "tradeoff": [58, 120, 127, 129, 156, 158, 163, 166, 294, 303, 309, 310], "tradit": [49, 51, 76, 83, 127, 163, 196, 222, 233, 262, 263, 303], "tradition": [222, 223, 233, 235], "traffic": [70, 98], "trail": [1, 94, 129, 152, 175, 268], "train": [31, 108, 111, 175, 202, 243, 261, 308, 309], "train_inn": 310, "train_out": 310, "train_scor": 310, "train_siz": 310, "training_scenario": 313, "training_scor": 310, "traj": [228, 236], "trajectori": [1, 19, 30, 31, 35, 37, 45, 51, 53, 55, 56, 59, 61, 62, 68, 75, 86, 97, 98, 125, 128, 132, 135, 136, 146, 147, 150, 153, 156, 163, 164, 166, 170, 177, 184, 193, 202, 203, 209, 213, 215, 216, 220, 222, 223, 224, 226, 230, 232, 233, 234, 235, 237, 239, 246, 250, 254, 260, 265, 275, 283, 287, 290, 291, 293, 294, 309, 310, 316, 317], "trajectory_analysi": 75, "trajectory_data": 253, "tran": [162, 198], "transact": [77, 78, 103, 123, 194, 196, 197, 202, 205, 226, 228, 230, 236, 237, 239, 246, 287, 290, 291, 320], "transfer": [37, 86, 104, 172, 181, 194, 221, 224, 234], "transform": [13, 27, 28, 30, 31, 39, 64, 72, 98, 134, 139, 140, 143, 153, 157, 178, 218, 224, 227, 231, 232, 234, 249, 255, 290, 291, 310], "transform_gains_from_log": 249, "transform_nest": 72, "transient": [36, 37, 65, 67, 68, 77, 78, 81, 84, 86, 103, 119, 120, 146, 149, 164, 166, 196, 197, 205, 222, 224, 226, 228, 233, 234, 236, 239, 249, 251, 273, 290, 303], "transit": [35, 37, 55, 73, 79, 86, 93, 98, 103, 106, 107, 112, 119, 120, 124, 136, 141, 142, 143, 162, 163, 164, 181, 193, 202, 222, 226, 227, 231, 233, 239, 245, 246, 247, 260, 261, 267, 268, 271], "transition_smooth": 98, "translat": [50, 122, 162, 172, 198, 202, 224, 232, 234, 249, 295, 298], "translate_to_english": 298, "translatez": [139, 140, 143], "transmiss": 74, "transpar": [28, 67, 140, 144, 203, 216, 267, 269], "transport": 221, "transvers": 86, "trap": [31, 162, 201, 202], "trapz": [107, 202, 215, 228, 236, 320], "travel": 31, "travers": [93, 120, 299], "travi": 8, "treat": [24, 33, 229, 232, 238, 283, 284, 298], "treatment": [19, 205, 243, 246, 257, 310], "tree": [39, 42, 59, 86, 121, 129, 138, 166, 298, 300, 309, 310], "trefethen": [35, 122, 126], "trelea": [123, 125, 258, 290, 291, 320], "trend": [24, 39, 63, 87, 88, 98, 111, 118, 148, 167, 243, 247, 255, 280, 310], "tri": 276, "trial": [12, 44, 52, 57, 58, 59, 61, 68, 119, 127, 128, 148, 149, 169, 171, 183, 191, 199, 209, 221, 222, 223, 233, 235, 248, 283, 284, 290, 291, 308, 309, 320], "trial_0_stat": 171, "trial_0_tim": 171, "trial_result": 209, "trial_runn": 9, "trial_se": 68, "triangl": 140, "trick": 84, "trig": 198, "trigger": [29, 31, 37, 39, 61, 67, 70, 79, 81, 86, 89, 94, 111, 112, 114, 118, 119, 143, 154, 171, 182, 188, 201, 203, 213, 242, 243, 247, 256, 259, 261, 268, 284, 290, 297, 298, 315], "trigger_emergency_respons": 261, "trigger_nam": 247, "trigonometr": [134, 135, 161, 198, 222, 225, 233, 240, 294, 295, 317], "trim": [61, 140], "trip": [177, 185, 245], "tripathi": 123, "tripl": [25, 225, 240, 297], "triple_singl": 297, "triplet": 52, "tripped_at": [119, 120], "trivial": [67, 84, 145, 232, 299], "troubleshoot": [13, 19, 27, 29, 40, 50, 53, 59, 78, 80, 81, 82, 83, 86, 89, 95, 111, 118, 119, 127, 128, 129, 137, 138, 139, 143, 145, 146, 148, 164, 165, 166, 167, 178, 182, 210, 242, 266, 275, 300], "troubleshooting_guid": [98, 115], "true": [14, 17, 24, 28, 30, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 55, 61, 68, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 88, 90, 92, 93, 98, 100, 105, 107, 108, 109, 114, 115, 116, 117, 118, 119, 120, 124, 127, 131, 132, 133, 134, 135, 136, 139, 140, 148, 149, 150, 159, 162, 164, 167, 168, 169, 171, 177, 178, 185, 187, 191, 193, 198, 199, 200, 202, 203, 205, 207, 208, 209, 210, 213, 215, 216, 219, 220, 226, 228, 236, 237, 239, 248, 249, 253, 254, 255, 258, 267, 269, 274, 276, 277, 279, 282, 283, 284, 285, 287, 290, 298, 299, 300, 310, 313, 315, 318, 320, 321], "true_divid": 35, "true_pareto_front": 209, "truefocu": 268, "truli": [222, 230, 233, 237, 313], "truncat": [35, 61, 84, 108, 117, 119, 203, 209, 290], "truncation_error": 209, "trust": [67, 167, 207, 232], "truth": [298, 299, 320], "try": [14, 17, 20, 28, 31, 35, 38, 49, 50, 51, 56, 61, 65, 67, 71, 73, 75, 76, 78, 80, 84, 85, 86, 88, 92, 93, 98, 100, 102, 105, 106, 107, 109, 114, 115, 117, 124, 129, 131, 133, 135, 136, 141, 143, 144, 145, 146, 148, 151, 152, 153, 155, 157, 163, 164, 166, 167, 168, 169, 170, 177, 178, 198, 203, 208, 209, 210, 213, 215, 216, 220, 232, 254, 265, 269, 273, 276, 277, 279, 287, 288, 300, 313, 315, 318, 321], "tsc": 261, "tsdb": 92, "tsinghua": 146, "tsmc": [127, 224, 234], "tsx": [267, 268, 269, 271], "tt": [225, 240], "tt_solve_pow": 178, "ttest": 310, "ttest_ind": [68, 104, 112, 149, 169, 178, 274, 313, 320, 321], "ttest_pow": 178, "tukei": 178, "tuna": 146, "tunabl": [55, 82, 83, 86, 120, 166, 226, 239, 321], "tune": [2, 8, 9, 10, 12, 15, 17, 19, 20, 22, 31, 40, 45, 50, 52, 55, 56, 58, 60, 62, 64, 65, 67, 68, 69, 74, 81, 82, 83, 86, 90, 93, 98, 103, 106, 109, 118, 119, 122, 123, 125, 127, 128, 129, 130, 132, 146, 147, 149, 150, 152, 153, 155, 156, 158, 160, 162, 163, 164, 168, 169, 170, 180, 181, 182, 185, 189, 190, 191, 193, 197, 199, 202, 205, 209, 214, 216, 218, 220, 222, 223, 225, 227, 231, 232, 233, 235, 240, 242, 245, 247, 251, 252, 253, 254, 256, 259, 266, 274, 275, 283, 286, 288, 290, 294, 296, 303, 306, 308, 309, 316, 317, 320], "tune_persistence_count": 119, "tune_pso_hyperparamet": 133, "tuned_gain": [121, 146, 147, 170, 189], "tuned_sta_gain": 22, "tuner": [19, 38, 45, 49, 50, 51, 52, 56, 57, 59, 61, 62, 74, 77, 78, 80, 81, 82, 84, 86, 92, 98, 105, 106, 116, 117, 128, 130, 132, 133, 134, 135, 148, 167, 180, 199, 216, 217, 222, 223, 224, 230, 233, 234, 235, 237, 248, 251, 254, 275, 285, 300, 319, 321], "tuner_adjust": 53, "tuner_coars": 133, "tuner_fast": 133, "tuner_fin": 133, "tuner_origin": 53, "tuner_standard": 133, "tuner_thorough": 133, "tuning_method": 169, "tupl": [10, 35, 39, 40, 41, 49, 51, 52, 53, 55, 58, 63, 71, 72, 76, 78, 80, 82, 83, 84, 86, 92, 94, 98, 99, 102, 103, 105, 106, 114, 117, 133, 167, 168, 196, 203, 209, 215, 216, 220, 249, 250, 252, 274, 277, 279, 280, 291, 301, 302, 321], "turn": [74, 222, 224, 227, 231, 233, 234], "turnaround": 23, "tutori": [13, 19, 28, 29, 30, 31, 52, 53, 59, 64, 128, 132, 133, 134, 135, 137, 138, 145, 146, 148, 149, 150, 151, 155, 157, 158, 160, 161, 162, 163, 170, 171, 177, 179, 181, 182, 183, 189, 199, 215, 242, 262, 263, 309, 315], "tw": 270, "twist": [2, 10, 20, 22, 36, 37, 38, 40, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 62, 63, 64, 69, 71, 72, 73, 74, 76, 79, 82, 83, 84, 86, 98, 100, 101, 102, 103, 105, 106, 109, 113, 115, 116, 121, 122, 123, 124, 126, 127, 128, 129, 131, 146, 149, 160, 164, 167, 168, 169, 177, 189, 195, 197, 199, 202, 205, 208, 210, 215, 218, 221, 222, 223, 228, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 247, 253, 256, 257, 259, 265, 272, 274, 275, 276, 280, 284, 286, 288, 290, 291, 293, 294, 296, 297, 299, 303, 308, 309, 317, 318], "twisting_algorithm": [9, 37, 193], "twisting_gain_k2": 208, "two": [22, 24, 35, 45, 55, 68, 72, 78, 80, 82, 84, 98, 129, 131, 136, 143, 145, 146, 164, 165, 169, 178, 185, 189, 193, 199, 200, 201, 222, 224, 226, 227, 231, 232, 233, 234, 239, 254, 265, 288, 289, 290, 294, 296, 309, 310, 313, 317, 321], "txt": [1, 10, 13, 15, 16, 22, 29, 34, 39, 53, 70, 89, 90, 91, 92, 93, 115, 116, 121, 124, 126, 128, 146, 147, 150, 151, 169, 170, 188, 189, 265, 282, 283, 300, 320], "type": [1, 2, 5, 8, 14, 15, 19, 22, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 46, 47, 52, 56, 57, 58, 59, 66, 67, 71, 75, 77, 78, 81, 82, 84, 85, 86, 87, 90, 91, 92, 93, 95, 106, 114, 115, 117, 118, 119, 120, 123, 127, 129, 131, 133, 135, 140, 143, 145, 146, 147, 149, 153, 154, 155, 156, 163, 164, 166, 168, 169, 170, 182, 183, 185, 187, 189, 199, 207, 210, 216, 217, 218, 222, 233, 242, 243, 244, 245, 248, 250, 251, 253, 254, 255, 257, 259, 265, 266, 275, 276, 277, 279, 286, 290, 291, 297, 298, 301, 303, 309, 310, 313, 316, 317, 320, 321], "type_check": [10, 168, 247], "type_compli": 255, "type_mark": 299, "type_mismatch": [1, 5], "typeddict": 10, "typeerror": [20, 72, 76, 98, 116, 117, 275, 277, 278, 300, 301], "typeguard": 301, "typeof": 30, "typesafetyvalid": 63, "typescript": 269, "typeset": 13, "typevar": [49, 71], "typewrit": [267, 268, 271], "typic": [26, 53, 55, 58, 61, 70, 73, 76, 77, 78, 82, 84, 85, 92, 97, 98, 99, 105, 107, 113, 118, 119, 120, 127, 129, 134, 149, 150, 161, 163, 164, 165, 166, 167, 183, 191, 193, 194, 196, 197, 200, 201, 202, 204, 205, 208, 213, 215, 216, 217, 220, 222, 226, 230, 232, 233, 237, 239, 246, 250, 253, 257, 258, 263, 265, 268, 273, 275, 289, 290, 291, 293, 294, 295, 297, 300, 310, 315, 316], "typo": [94, 115, 116, 117, 131, 164, 216, 315], "typographi": [13, 29, 90, 268, 271], "t\u1d62": 209, "t\u2080": [161, 308], "t\u2081": [161, 198, 308], "t\u2082": [161, 198, 308], "u": [10, 12, 15, 17, 30, 35, 36, 39, 40, 44, 45, 49, 51, 53, 55, 59, 61, 62, 65, 68, 76, 77, 78, 81, 82, 84, 85, 86, 91, 92, 93, 97, 98, 99, 103, 105, 108, 114, 115, 116, 117, 118, 120, 123, 125, 128, 132, 134, 135, 146, 149, 150, 152, 156, 161, 163, 164, 165, 166, 167, 168, 170, 177, 178, 183, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 209, 213, 216, 217, 219, 220, 221, 224, 225, 226, 227, 230, 231, 232, 234, 237, 239, 240, 242, 245, 246, 249, 250, 253, 254, 258, 261, 265, 272, 273, 274, 275, 276, 277, 279, 284, 287, 288, 289, 290, 293, 294, 295, 299, 301, 308, 309, 310, 316, 317], "u0": 84, "u1": [30, 51, 76, 125, 163, 193, 200, 258], "u1_continu": 193, "u2": [30, 51, 163, 193, 200, 258], "u2_dot": 76, "u2_integr": [76, 193], "u2dt": [230, 237], "u3": [51, 200], "u32": 177, "u4": 200, "u_": [53, 81, 84, 156, 191, 195, 199, 201, 209, 224, 226, 227, 231, 232, 234, 239, 258, 261, 279, 287, 288, 289, 294, 295], "u_1": [156, 193, 242, 258, 288, 294], "u_2": [193, 258, 288, 294], "u_a": 193, "u_adapt": [98, 103, 249, 273], "u_arr": [59, 61, 216], "u_arr_list": 61, "u_at_": 164, "u_avg": 209, "u_b": [19, 53, 193, 216, 250], "u_batch": [193, 203, 216, 217, 254], "u_bound": 209, "u_c": [197, 205], "u_cart": 41, "u_class": [249, 273], "u_cmd": 84, "u_cont": 85, "u_continu": 125, "u_curr": 61, "u_d": [103, 197, 199], "u_damp": 79, "u_deriv": [196, 199], "u_di": 85, "u_eq": [36, 40, 82, 83, 84, 97, 98, 99, 103, 105, 168, 196, 197, 199, 205, 206, 213, 232, 249, 258, 301, 317], "u_equival": 199, "u_held": 61, "u_histori": 86, "u_i": [205, 227, 231, 246, 279], "u_int": [36, 40, 55, 81, 82, 197, 205, 210, 211, 224, 226, 234, 239, 301], "u_int_histori": 81, "u_int_max": [40, 81, 205, 226, 239, 301], "u_int_new": [40, 81, 301, 302], "u_int_prev": [98, 197], "u_integr": 76, "u_k": [53, 84, 119, 195, 201, 216, 279, 290], "u_k\u00b2": 84, "u_last": 84, "u_limit": [61, 277], "u_max": [39, 61, 68, 84, 97, 103, 177, 193, 203, 208, 216, 217, 249, 250, 254, 284], "u_n": [52, 53, 99, 290], "u_nomin": 274, "u_optim": 84, "u_p": 313, "u_perturb": 274, "u_prev": [84, 118], "u_proport": 79, "u_raw": 85, "u_rm": 216, "u_robust": [82, 83, 224, 234, 290], "u_saf": 277, "u_sat": [40, 81, 85, 98, 205, 242, 301, 302], "u_satur": [37, 78, 196, 199], "u_sign": 164, "u_sta": [98, 103, 273], "u_stab": 86, "u_stat": 313, "u_sw": [45, 77, 86, 97, 98, 103, 197, 199, 249, 258, 317], "u_switch": [17, 79, 82, 196, 199, 204], "u_tot": [37, 40, 78, 193], "u_unsatur": 199, "u_val": 61, "u_zoom": 164, "ub": 248, "ubiquit": [222, 233], "ubuntu": [1, 10, 39, 90, 151, 282, 283, 300, 315], "ubuntu22": 91, "udp": [22, 44, 174, 177, 185, 222, 223, 230, 233, 235, 237], "udp_interfac": 9, "udp_interface_deadlock_fre": 9, "udp_interface_threadsaf": 9, "ueq": 81, "ufw": 92, "ui": [1, 8, 17, 27, 30, 31, 36, 90, 91, 92, 128, 138, 139, 142, 150, 153, 155, 170, 244, 268, 269, 271, 283, 284], "uint32_t": 177, "uk": [222, 233], "ullah": [223, 235], "ullman": 297, "ultim": [24, 36, 39, 40, 63, 77, 78, 81, 85, 92, 191, 195, 213, 222, 233, 241, 242, 244, 245, 261, 282, 284, 287, 294, 300, 301, 321, 323], "ultimate_bound": 195, "ultra": 41, "ultrathink": 24, "umax": 197, "umbrella": 282, "uml": 8, "un": [65, 170], "unabl": [35, 91, 171], "unaccept": [67, 93], "unactu": [225, 240], "unaffect": 120, "unauthent": 91, "unauthor": 243, "unavail": [16, 49, 50, 51, 55, 56, 78, 84, 86, 105, 116, 117, 119, 188, 222, 233], "unavailablempcconfig": [9, 10, 116], "unbalanc": [98, 247, 251, 252], "unbalanced_coeffici": 252, "unbias": [309, 310], "unbound": [35, 78, 84, 107, 127, 131, 132, 162, 166, 205, 210, 224, 226, 234, 239, 273, 287], "unbounded": 287, "uncach": 31, "uncertain": [13, 50, 77, 123, 129, 132, 146, 166, 191, 205, 221, 226, 227, 230, 231, 232, 237, 239, 246, 253, 259, 265, 288, 290, 310], "uncertain_system": 294, "uncertainti": [17, 19, 22, 36, 40, 45, 53, 57, 65, 67, 72, 74, 75, 76, 77, 81, 82, 83, 84, 86, 95, 97, 98, 99, 103, 107, 109, 112, 113, 126, 127, 129, 132, 163, 164, 167, 169, 171, 182, 183, 189, 191, 197, 199, 204, 206, 214, 216, 217, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 242, 246, 249, 253, 258, 273, 274, 275, 277, 282, 283, 284, 287, 293, 294, 301, 303, 308, 309, 320, 322], "uncertainty_analysi": 253, "uncertainty_bound": [72, 98, 112, 274], "uncertainty_level": 68, "uncertainty_model": 279, "uncertaintyestim": 17, "unchang": [61, 86, 107, 164, 249, 290, 297, 300, 306], "uncit": [122, 123, 298], "unclear": [98, 106], "uncontrol": [78, 205, 226, 239], "uncov": [37, 39], "uncovered_lin": 39, "undeclar": [1, 5], "under": [12, 22, 37, 39, 45, 52, 63, 74, 75, 76, 85, 87, 92, 93, 95, 103, 107, 111, 125, 127, 146, 152, 162, 169, 171, 190, 191, 193, 194, 196, 202, 204, 205, 206, 207, 216, 222, 224, 226, 227, 229, 231, 232, 233, 234, 238, 239, 244, 245, 246, 249, 260, 261, 266, 270, 279, 282, 283, 284, 285, 287, 288, 293, 294, 299, 304, 306, 309, 320, 323], "underactu": [82, 86, 122, 123, 129, 146, 160, 161, 164, 198, 199, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239], "underbrac": 299, "underdamp": [78, 204, 205, 249, 251], "underestim": [10, 290], "underfit": [308, 310], "underflow": [84, 193, 195, 246], "undergo": 256, "underli": [40, 67, 98, 256, 293, 300], "undermin": 298, "underperform": [230, 237], "underpin": 277, "underpow": [310, 313], "underscor": [228, 236, 258], "understand": [2, 3, 30, 95, 98, 117, 127, 129, 130, 138, 146, 156, 158, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 182, 201, 232, 253, 256, 265, 297, 299, 316], "understood": [82, 83, 132, 163, 166, 197, 200, 205], "undesir": [222, 223, 233, 235], "undetect": 300, "undocu": [56, 57, 58, 59, 138], "unequ": [68, 169, 178, 274, 308, 309, 320], "uneven": 61, "unexpect": [7, 40, 49, 51, 95, 98, 112, 115, 116, 117, 144, 225, 240, 301], "unexpectedli": 252, "unfair": 237, "unfold": [129, 152], "unforc": 220, "unforeseen": [222, 233], "unhandl": [70, 297], "unhealthi": 98, "unicod": [25, 31, 34, 140, 141], "unif": 98, "unifi": [6, 30, 52, 55, 59, 61, 65, 67, 82, 83, 98, 105, 135, 156, 185, 192, 194, 199, 203, 204, 215, 216, 222, 233, 248, 250, 251, 258, 274, 275, 278, 297, 318], "unified_config": 9, "uniform": [14, 49, 61, 68, 112, 116, 117, 120, 123, 135, 149, 164, 178, 198, 199, 202, 215, 216, 220, 224, 232, 234, 249, 274, 290, 310, 313, 320], "uniformli": [53, 74, 228, 232, 236], "unimod": [162, 193, 202, 246, 293], "uninstal": 146, "union": [19, 38, 51, 52, 53, 61, 71, 73, 76, 82, 98, 100, 101, 102, 103, 105, 112, 168, 208, 216, 220, 250, 256, 274, 275, 278, 301], "uniqu": [1, 2, 5, 27, 30, 55, 56, 122, 146, 169, 178, 220, 272, 298, 320], "unison": 290, "unit": [1, 8, 16, 17, 22, 34, 38, 39, 40, 51, 62, 63, 64, 65, 68, 74, 77, 78, 85, 90, 92, 93, 95, 97, 100, 103, 114, 116, 127, 129, 134, 168, 172, 185, 188, 191, 193, 198, 199, 208, 224, 228, 232, 234, 236, 242, 243, 245, 249, 250, 258, 265, 273, 284, 288, 289, 291, 295, 296, 300, 303, 309, 310, 318, 323], "unit_gradi": 79, "unit_test": [39, 242], "unittest": [114, 282], "univers": [31, 35, 38, 52, 56, 67, 123, 222, 232, 233, 259, 284, 290], "unknown": [1, 5, 17, 36, 39, 49, 50, 51, 56, 63, 73, 76, 77, 80, 81, 82, 98, 103, 105, 115, 117, 127, 132, 146, 163, 166, 168, 205, 216, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 254, 255, 256, 275, 277, 279, 288, 294, 310, 313], "unknown_field": [1, 5], "unless": [12, 63, 65, 78, 91, 92, 114, 230, 232, 237, 306], "unlik": [17, 77, 84, 145, 163, 205, 222, 233], "unlimit": 117, "unlink": 282, "unlinkeddoc": 7, "unmatch": [84, 142, 143, 144, 163, 199, 205, 224, 226, 234, 239], "unmatchedpr": 143, "unmeasur": 62, "unminifi": 141, "unmodel": [45, 74, 78, 82, 84, 163, 197, 199, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 274, 290, 294, 296], "unnecessari": [16, 17, 41, 61, 71, 91, 116, 154, 188, 216, 217, 223, 226, 235, 239], "unnecessarili": [86, 255], "unnorm": 53, "unpack": [56, 77, 79, 81, 85, 185, 221, 296], "unpredict": [200, 223, 235], "unprivileg": 91, "unreach": 300, "unrealist": [35, 72, 98, 165, 230, 237], "unreason": 136, "unrecogn": [98, 147], "unreleas": 1, "unreli": [31, 201], "unresolv": 245, "unrespons": 254, "unsaf": [193, 224, 234, 241, 249], "unsatur": [85, 201], "unseed": [19, 53], "unseen": [310, 313], "unsign": 185, "unsrt": 187, "unstabl": [19, 30, 35, 53, 73, 76, 97, 98, 114, 129, 134, 135, 158, 160, 161, 164, 166, 167, 170, 177, 178, 182, 183, 189, 193, 196, 198, 201, 202, 203, 220, 222, 224, 232, 233, 234, 250, 251, 252, 253, 254, 275, 293, 295, 313, 317, 321], "unstable_optim": 247, "unstag": 70, "unstructur": 318, "unsubstanti": 12, "unsuccess": 232, "unsupport": [63, 102, 112, 117, 315], "untest": 37, "until": [10, 15, 35, 46, 48, 53, 54, 60, 64, 67, 86, 146, 163, 164, 172, 173, 174, 175, 176, 179, 180, 181, 184, 221, 222, 226, 232, 233, 239, 243, 306], "untrack": 70, "unus": [52, 57, 61, 71, 86, 123, 168, 254], "unusu": 45, "unverifi": 298, "unweight": 232, "up": [22, 25, 31, 53, 55, 58, 62, 67, 77, 81, 82, 84, 89, 91, 92, 95, 98, 103, 105, 107, 114, 117, 123, 127, 131, 134, 136, 140, 143, 145, 146, 148, 151, 154, 155, 161, 163, 171, 175, 178, 188, 200, 222, 223, 224, 226, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 242, 254, 255, 256, 257, 259, 265, 268, 282, 283, 290, 296, 300, 304, 306, 309, 315, 317, 321], "up_and_stabilization_of_a_rotary_inverted_pendulum": [224, 234], "upcom": 102, "upcoming_remov": 102, "updat": [1, 2, 4, 5, 8, 10, 12, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 31, 32, 33, 35, 36, 38, 39, 40, 46, 48, 51, 52, 54, 56, 57, 59, 60, 61, 64, 65, 67, 68, 70, 72, 73, 76, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 101, 102, 103, 105, 107, 115, 116, 117, 119, 120, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 154, 160, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 205, 207, 210, 211, 214, 216, 217, 219, 220, 222, 223, 224, 226, 232, 233, 234, 235, 239, 242, 243, 245, 246, 248, 250, 252, 253, 254, 257, 258, 261, 265, 268, 269, 273, 274, 275, 277, 278, 279, 282, 283, 284, 287, 288, 293, 297, 298, 300, 301, 310, 313, 315, 316, 318, 320, 321, 323], "update_adaptive_gain": 77, "update_adaptive_paramet": 214, "update_baselin": 207, "update_config_with_gain": 21, "update_configur": 93, "update_controller_config": 72, "update_estim": 37, "update_g": 162, "update_gain": 35, "update_gbest": 167, "update_histori": 63, "update_inertia": 125, "update_math_refer": 194, "update_p": 162, "update_param": [228, 236], "update_paramet": [104, 191], "update_pbest": 167, "update_po": 167, "update_posit": 215, "update_progress": [98, 277], "update_r": 72, "update_safety_statu": 261, "update_statu": 17, "update_traffic_split": 98, "update_v": 162, "update_vel": 167, "update_veloc": [191, 215], "update_x": 162, "updateapp": 31, "updated_config": [73, 93], "updated_histori": [10, 61], "updated_param": 102, "updated_st": 61, "updated_state_var": 10, "updategain": 29, "updateglob": 316, "updateperson": 316, "updateposit": 316, "updateveloc": 316, "updateviacach": 31, "upgrad": [5, 23, 32, 61, 98, 124, 146, 197, 275, 282, 298, 313], "upload": [1, 23, 39, 89, 90, 141, 144, 151, 169, 282, 283, 320], "upon": [192, 232, 255, 256, 257, 306], "upper": [20, 35, 37, 49, 51, 53, 58, 59, 61, 65, 72, 76, 80, 98, 99, 101, 103, 105, 113, 115, 117, 118, 151, 166, 167, 183, 196, 202, 203, 216, 220, 224, 226, 232, 234, 239, 249, 250, 251, 253, 254, 274, 276, 277, 279, 280, 283, 288, 291, 293, 310, 313], "upper_bound": [20, 49, 50, 51, 53, 58, 72, 76, 82, 98, 103, 105, 112, 113, 114, 115, 116, 117, 182, 248, 253, 276, 280], "upper_threshold": 120, "uppercas": 258, "upright": [73, 74, 76, 84, 86, 97, 121, 134, 135, 146, 161, 164, 177, 182, 194, 198, 204, 205, 213, 216, 219, 220, 221, 222, 223, 224, 225, 227, 230, 231, 232, 233, 234, 235, 237, 240, 285, 287, 295, 296, 306, 313], "upsid": 208, "uptim": [218, 254, 261, 321], "upward": [78, 205, 226, 232, 239, 289, 317], "uq": 309, "urgent": 142, "url": [2, 8, 16, 22, 31, 89, 90, 91, 124, 125, 126, 129, 144, 146, 187, 188, 256, 257], "us": [1, 2, 5, 7, 10, 11, 12, 13, 14, 19, 20, 21, 22, 24, 26, 27, 28, 32, 33, 34, 35, 38, 39, 40, 42, 44, 50, 52, 53, 55, 56, 58, 59, 61, 62, 64, 65, 68, 69, 70, 71, 73, 74, 77, 78, 81, 82, 83, 85, 88, 90, 92, 94, 95, 97, 98, 100, 101, 105, 106, 109, 114, 115, 119, 120, 124, 125, 126, 127, 129, 131, 134, 135, 138, 142, 143, 144, 146, 147, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 177, 182, 184, 185, 186, 187, 188, 189, 191, 192, 195, 196, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 211, 214, 215, 216, 220, 221, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 239, 246, 249, 250, 254, 255, 256, 257, 258, 259, 260, 261, 266, 270, 272, 273, 275, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 298, 300, 303, 305, 308, 309, 315, 318, 320, 322], "usabl": [19, 36, 57, 58, 59, 84, 98, 243, 255, 309], "usag": [1, 2, 4, 8, 10, 12, 14, 15, 19, 20, 22, 24, 26, 28, 29, 31, 32, 33, 36, 37, 40, 45, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 68, 71, 72, 79, 80, 81, 83, 86, 90, 91, 92, 93, 95, 103, 104, 105, 106, 107, 114, 115, 117, 118, 119, 127, 129, 134, 136, 138, 142, 143, 144, 146, 151, 154, 164, 165, 166, 170, 171, 182, 184, 187, 192, 193, 194, 196, 197, 200, 208, 211, 215, 216, 217, 242, 244, 245, 247, 248, 250, 251, 253, 254, 259, 260, 265, 266, 271, 273, 274, 275, 277, 280, 282, 283, 287, 291, 299, 301, 307, 310, 317, 318, 319, 323], "usage_penalti": 102, "usai": [194, 196], "use_adaptive_regular": [51, 80, 213], "use_cas": 101, "use_ekf": 120, "use_equival": [49, 55, 72, 116, 117, 226, 239], "use_exact_discret": 84, "use_fix": 213, "use_fixed_regular": 213, "use_full_dynam": [61, 72, 128, 129, 131, 134, 135, 148, 150, 167, 170, 171, 203, 216, 224, 234], "use_integr": 168, "use_mann_whitney_u": 310, "use_paired_test": 310, "use_relative_surfac": [81, 205, 226, 239, 321], "use_robust_evalu": [275, 276, 277], "use_simplified_inertia": 220, "used_var": 300, "user": [1, 8, 10, 17, 19, 23, 29, 30, 31, 33, 36, 40, 44, 51, 52, 53, 56, 61, 70, 90, 91, 92, 93, 97, 115, 128, 131, 136, 137, 139, 141, 142, 143, 144, 146, 148, 149, 150, 151, 154, 155, 156, 164, 165, 167, 189, 196, 203, 218, 222, 223, 226, 232, 233, 235, 239, 242, 243, 250, 262, 263, 266, 268, 277, 290, 297, 305, 310, 316], "user_guid": 242, "user_input": 136, "user_nam": 253, "useradd": [91, 92], "userag": 144, "userland": 91, "usermod": 92, "usernam": [70, 91], "userwarn": [146, 147, 164, 165, 283, 284], "using_default_gain": 117, "usr": [49, 52, 72, 76, 92, 127, 150, 254, 282], "usual": [70, 232], "utc": 89, "utf": [25, 34, 190, 255, 315], "util": [2, 8, 9, 12, 19, 22, 30, 31, 33, 39, 56, 58, 59, 61, 63, 65, 67, 71, 76, 78, 80, 82, 85, 87, 88, 92, 93, 95, 98, 100, 102, 104, 108, 115, 127, 128, 129, 130, 135, 146, 164, 168, 170, 171, 175, 177, 182, 185, 190, 192, 193, 196, 199, 209, 210, 212, 216, 218, 226, 227, 231, 232, 239, 242, 245, 260, 261, 262, 266, 269, 282, 283, 284, 290, 297, 298, 309, 317, 321], "utilis": [224, 234], "utilization_bound": 209, "utkin": [2, 10, 12, 55, 78, 82, 83, 86, 97, 103, 122, 163, 169, 187, 188, 192, 194, 196, 197, 199, 204, 205, 206, 207, 227, 228, 230, 231, 236, 237, 245, 246, 256, 257, 287, 290, 303, 320], "utkin1992": 298, "utkin1992slid": 2, "utkin1999slid": [32, 257], "utkin2013slid": 32, "uu": 232, "uvicorn": 92, "ux": [27, 36, 138, 141], "u\u00b2": [53, 84, 107, 217], "u\u00b2dt": [230, 237], "u\u2080": 84, "u\u2081": [76, 84, 97, 103, 125, 163, 273, 275], "u\u2082": [76, 97, 103, 163, 183, 253, 273, 275], "v": [1, 7, 8, 10, 12, 16, 17, 19, 20, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 44, 49, 52, 55, 58, 59, 61, 65, 67, 70, 72, 73, 75, 77, 78, 79, 82, 83, 84, 85, 86, 88, 89, 91, 93, 94, 97, 98, 99, 103, 108, 112, 113, 117, 118, 119, 122, 123, 124, 125, 127, 128, 133, 143, 144, 148, 150, 151, 156, 159, 160, 161, 164, 165, 166, 167, 168, 169, 171, 174, 179, 182, 189, 192, 193, 194, 195, 196, 199, 200, 201, 203, 204, 205, 206, 209, 210, 211, 213, 215, 216, 220, 226, 227, 228, 230, 231, 232, 236, 237, 239, 242, 245, 246, 247, 249, 253, 254, 255, 256, 258, 260, 261, 274, 276, 279, 281, 282, 283, 284, 287, 288, 289, 290, 293, 294, 295, 298, 299, 300, 308, 309, 310, 315, 316, 317, 320, 323], "v0": [27, 287], "v1": [1, 10, 63, 72, 91, 92, 98, 121, 129, 137, 138, 145, 151, 169, 182, 183, 197, 205, 213, 315, 320], "v1_to_v2": 72, "v2": [28, 72, 92, 98, 108, 109, 151, 177, 182, 241, 253], "v2_to_v3": 72, "v3": [10, 39, 72, 98, 282, 283, 300], "v4": [39, 67, 282, 283, 300], "v8": 25, "v_": [53, 191, 202, 225, 232, 240, 245, 246, 279, 287, 290, 293], "v_0": 198, "v_1": [191, 198, 225, 240], "v_2": [191, 198, 225, 240], "v_a": 279, "v_clamp": 251, "v_cognit": 291, "v_dot": [195, 209, 258], "v_func": 35, "v_graviti": 317, "v_i": [202, 215, 229, 238, 290, 292], "v_inertia": 291, "v_max": [39, 162, 202, 215, 247], "v_min": [202, 247], "v_new": 162, "v_old": 162, "v_p": 279, "v_reach": 249, "v_slide": 249, "v_social": 291, "v_valu": 35, "vadim": [2, 123, 257], "vagu": 298, "val": [53, 61, 278], "val_result": 98, "valid": [0, 2, 9, 10, 11, 13, 15, 16, 24, 27, 32, 33, 34, 36, 38, 44, 46, 52, 60, 64, 66, 68, 71, 75, 78, 79, 81, 82, 86, 87, 89, 106, 110, 117, 118, 122, 123, 125, 127, 128, 129, 135, 137, 138, 139, 140, 141, 143, 146, 149, 150, 159, 160, 161, 163, 164, 166, 167, 169, 172, 173, 179, 180, 181, 184, 185, 187, 188, 189, 193, 197, 198, 200, 201, 205, 210, 215, 216, 217, 221, 223, 226, 232, 235, 239, 241, 244, 248, 253, 254, 257, 259, 262, 263, 265, 266, 276, 277, 286, 292, 295, 297, 301, 302, 304, 317, 318, 321, 322, 323], "valid_adaptive_gain": 114, "valid_classical_gain": 114, "valid_config": 114, "valid_config_result": 75, "valid_control": [73, 98], "valid_error": 75, "valid_fit": 313, "valid_gain": [114, 116, 199], "valid_gain_rang": 37, "valid_gain_set": 114, "valid_idx": 291, "valid_indic": 75, "valid_mask": [80, 98, 249], "valid_mod": 72, "valid_nam": 117, "valid_param": 98, "valid_particl": 49, "valid_plan": [1, 5, 22, 23], "valid_reaching_condit": 287, "valid_result": 254, "valid_sta_gain": 51, "valid_state_spac": 37, "valid_tim": 75, "valid_typ": 104, "validate_": 255, "validate_acceleration_coeffici": 73, "validate_adaptive_paramet": 77, "validate_adaptive_smc_converg": 98, "validate_adaptive_smc_paramet": 279, "validate_adaptive_smc_properti": 248, "validate_against_expect": 165, "validate_alerting_configur": 93, "validate_all_configur": 273, "validate_all_mathematical_properti": 209, "validate_all_paramet": 261, "validate_and_clean_config": 117, "validate_and_propagate_bound": 252, "validate_and_refine_result": 104, "validate_and_summar": 21, "validate_assign": 73, "validate_backup_integr": 93, "validate_backward_compat": 73, "validate_before_cr": 115, "validate_bibliographi": 4, "validate_bound": [53, 57, 58, 133, 290], "validate_bounds_consist": 251, "validate_chattering_characterist": 209, "validate_cit": [121, 122, 123, 124, 125, 126, 320], "validate_classical_paramet": 78, "validate_classical_smc_gain": 279, "validate_classical_smc_properti": 248, "validate_classical_smc_st": 98, "validate_cli_access": 208, "validate_config": [34, 254], "validate_configur": [56, 72, 98, 100, 107, 117, 274], "validate_configuration_before_cr": 51, "validate_configuration_schema": 93, "validate_configuration_syntax": 108, "validate_configuration_system": 208, "validate_control": [53, 151, 252], "validate_control_output": [40, 63, 301], "validate_controller_configur": 73, "validate_controller_gain": 136, "validate_controller_integr": 98, "validate_controller_interfac": 63, "validate_controller_paramet": [106, 117, 261], "validate_controller_perform": 283, "validate_controller_plant_compat": 101, "validate_controller_return": 301, "validate_controller_st": 251, "validate_controller_typ": 117, "validate_coverage_threshold": 88, "validate_custom_dynam": 134, "validate_data": 320, "validate_document": 128, "validate_emergency_recoveri": 254, "validate_factory_system": 93, "validate_false_alarm_r": 119, "validate_gain": [38, 49, 52, 55, 56, 72, 76, 77, 78, 85, 98, 101, 103, 106, 112, 117, 208, 253, 321], "validate_gain_bound": 251, "validate_gain_ratio": 254, "validate_gain_structur": 98, "validate_gain_vector": 76, "validate_getting_start": 127, "validate_hurwitz_condit": 279, "validate_hybrid_paramet": 81, "validate_hybrid_smc_configur": 279, "validate_implement": 278, "validate_inertia_weight": 73, "validate_initial_gains_bound": 73, "validate_initial_st": 72, "validate_input": 277, "validate_insert": 4, "validate_integr": 252, "validate_integration_config": 278, "validate_integration_workflow": 88, "validate_ip_address": 73, "validate_length_ratio": 73, "validate_lyapunov_st": [35, 209, 248, 274], "validate_lyapunov_stability_condit": 98, "validate_lyapunov_stability_constraint": 73, "validate_mass_matrix": 287, "validate_mass_matrix_properti": 287, "validate_mass_ratio": 73, "validate_mathematical_constraint": [73, 98, 112], "validate_mathematical_properti": 194, "validate_matrix_condit": 209, "validate_memory_usag": 274, "validate_migrated_configur": [98, 102], "validate_multi_objective_pso": 209, "validate_numerical_implement": 279, "validate_numerical_integration_st": 209, "validate_numerical_st": [73, 191, 290], "validate_optimization_bound": 73, "validate_optimization_configur": 73, "validate_optimization_controller_compat": 73, "validate_optimization_result": [104, 251, 252], "validate_optimized_control": [107, 253], "validate_optimized_gain": 167, "validate_param": 127, "validate_paramet": [93, 125], "validate_parameter_bound": [73, 261], "validate_parameter_interdepend": 73, "validate_parameter_rang": [98, 114], "validate_parameter_upd": 73, "validate_perform": 98, "validate_performance_benchmark": 88, "validate_performance_bound": 107, "validate_performance_requir": 73, "validate_physics_controller_compat": 73, "validate_physics_param": [131, 135, 136], "validate_port_conflict": 73, "validate_precis": 298, "validate_production_config": 321, "validate_production_environ": 93, "validate_production_readi": 92, "validate_pso_algorithm_param": 247, "validate_pso_configur": 104, "validate_pso_convergence_constraint": 73, "validate_pso_convergence_properti": [107, 209], "validate_pso_dynam": 291, "validate_pso_integr": 92, "validate_pso_optimized_control": 248, "validate_pso_particl": 51, "validate_quality_g": 39, "validate_reaching_condit": 279, "validate_reaching_time_bound": 287, "validate_real_time_constraint": 209, "validate_realtime_constraint": 73, "validate_refer": 298, "validate_return_stat": [40, 300], "validate_rollback_success": 93, "validate_safety_constraint": [37, 73], "validate_safety_system": 321, "validate_sampling_tim": 73, "validate_saturation_safeti": 73, "validate_service_health": 93, "validate_simulation_config": [35, 112], "validate_simulation_dur": 73, "validate_simulation_execut": 208, "validate_simulation_result": 112, "validate_simulation_system_compat": 73, "validate_sliding_surface_reach": 209, "validate_smc_gain": [20, 51, 52, 56, 58, 73, 82, 98, 105, 109, 112, 114, 115, 116, 117, 132, 133, 208, 248, 275, 276], "validate_smc_stability_realtim": 249, "validate_st": [35, 52, 59, 130, 136, 220, 278], "validate_sta_damp": 249, "validate_sta_gain": [85, 107], "validate_sta_smc_finite_time_converg": 98, "validate_sta_smc_properti": 248, "validate_sta_stability_condit": 73, "validate_stability_condit": [37, 208], "validate_staging_environ": 93, "validate_state_bound": 261, "validate_state_input": 98, "validate_state_vector": 73, "validate_super_twisting_gain": [279, 287], "validate_surface_gain": 279, "validate_swarm": 249, "validate_system_health": 93, "validate_system_integr": 261, "validate_test_databas": 93, "validate_test_environ": 93, "validate_theoretical_properti": 88, "validate_timing_jitter_and_lat": 209, "validate_transition_safeti": 37, "validate_tutorial_01": 165, "validate_tutorial_01_experi": 165, "validate_version_compat": 73, "validate_yaml_configur": 117, "validated_compute_control": 300, "validated_gain": [106, 208, 283], "validated_ref": 298, "validated_result": 104, "validation_": 148, "validation_benchmark": [24, 25, 33, 310], "validation_cach": [73, 117], "validation_chain": 252, "validation_confid": 255, "validation_config": 98, "validation_cost": [51, 53], "validation_criteria": 252, "validation_cross_valid": 310, "validation_detail": 112, "validation_en": [98, 101], "validation_error": [72, 280], "validation_exampl": 310, "validation_failur": 98, "validation_framework_guid": 208, "validation_funct": 98, "validation_issu": 102, "validation_level": 247, "validation_metr": 98, "validation_monte_carlo": 310, "validation_orchestr": 255, "validation_pass": 108, "validation_path_detail": 255, "validation_plot": 290, "validation_pso_bounds_valid": [24, 25, 26, 33], "validation_report": [280, 321], "validation_result": [53, 88, 92, 98, 99, 101, 104, 106, 107, 147, 209, 248, 254, 255, 276, 277, 279], "validation_rul": [72, 247], "validation_scenario": 114, "validation_scenario1": 148, "validation_scenario2": 148, "validation_scenario3": 148, "validation_scor": 283, "validation_script": [287, 290, 291], "validation_stat": [248, 276, 280], "validation_statist": [275, 280], "validation_statistical_test": 310, "validation_statu": [209, 280], "validation_step": 5, "validation_success": 58, "validation_warn": 72, "validation_workflow": [309, 310, 313], "validationerror": [34, 63, 73, 107, 115, 216, 254, 274, 298, 323], "validationgapmatrix": 88, "validationorchestr": 255, "validationreport": [247, 252], "validationresult": [76, 88, 102, 209, 247, 251, 252], "validator_method": 247, "validator_nam": 209, "vallei": [193, 290], "valu": [3, 19, 22, 26, 29, 30, 31, 35, 36, 37, 39, 40, 44, 45, 46, 49, 50, 52, 55, 56, 59, 61, 62, 65, 67, 68, 73, 74, 75, 76, 77, 78, 81, 82, 84, 85, 86, 92, 93, 97, 98, 100, 103, 105, 106, 107, 109, 114, 115, 117, 118, 122, 124, 126, 127, 134, 135, 136, 140, 144, 146, 148, 149, 154, 156, 157, 159, 162, 164, 165, 166, 167, 168, 169, 170, 171, 177, 178, 182, 185, 192, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 209, 210, 213, 214, 216, 218, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 242, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 258, 265, 269, 272, 273, 275, 276, 277, 279, 282, 283, 285, 287, 289, 290, 293, 294, 295, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 312, 320], "value_at_risk": [310, 313], "value_transform": 72, "valueerror": [20, 34, 35, 38, 40, 44, 45, 49, 50, 51, 53, 56, 58, 61, 63, 72, 73, 76, 79, 81, 82, 86, 94, 98, 100, 103, 105, 106, 108, 114, 115, 117, 119, 127, 131, 133, 136, 151, 191, 196, 198, 199, 203, 204, 208, 216, 248, 273, 275, 276, 277, 280, 301, 313, 321], "valuefrom": 92, "values_finit": 81, "van": [2, 8, 17, 35, 84, 122, 123, 125, 126, 199, 213, 246, 290, 291, 297, 310], "vanderpla": 8, "vanderplas2018altair": 8, "vanilla": [143, 271], "vanish": [163, 225, 240], "var": [53, 63, 72, 77, 90, 91, 92, 169, 193, 201, 209, 246, 247, 252, 269, 274, 290, 300, 308, 309, 320], "var_10": 313, "var_5": [310, 313], "var_\u03b1": 310, "varepsilon": [224, 226, 229, 234, 238, 239, 272], "vari": [36, 45, 61, 68, 74, 77, 81, 84, 103, 107, 119, 120, 122, 129, 132, 134, 151, 163, 166, 171, 172, 177, 194, 197, 200, 201, 204, 205, 214, 222, 223, 228, 233, 235, 236, 249, 258, 260, 273, 277, 287, 290, 293, 310, 322], "variabl": [10, 17, 30, 35, 40, 45, 53, 61, 63, 65, 67, 68, 70, 72, 75, 77, 78, 81, 84, 90, 97, 98, 117, 120, 124, 126, 127, 130, 131, 146, 150, 164, 165, 167, 170, 188, 193, 197, 198, 200, 201, 202, 205, 206, 209, 215, 216, 217, 221, 222, 223, 224, 226, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 249, 250, 272, 279, 282, 290, 294, 302, 313, 320, 321], "variableproxim": 268, "varianc": [1, 53, 58, 65, 68, 97, 118, 119, 128, 148, 167, 169, 178, 193, 201, 228, 236, 247, 252, 274, 290, 308, 310, 320], "variant": [12, 19, 22, 27, 38, 45, 47, 63, 64, 71, 74, 78, 82, 85, 98, 127, 130, 132, 146, 162, 163, 167, 168, 177, 191, 192, 194, 197, 199, 200, 201, 202, 216, 218, 222, 224, 228, 229, 232, 233, 234, 236, 238, 244, 247, 250, 251, 253, 257, 259, 265, 266, 267, 270, 277, 278, 284, 287, 293, 294, 303, 304, 309, 313, 318, 320], "variat": [17, 45, 51, 72, 74, 77, 78, 81, 82, 98, 103, 113, 114, 124, 127, 132, 134, 146, 151, 163, 167, 169, 178, 191, 194, 199, 201, 216, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 240, 250, 274, 283, 284, 309, 321], "variou": [32, 35, 37, 49, 75, 83, 114, 222, 233, 248, 254, 265, 288, 300, 302], "varphi": 193, "var\u2080": 310, "vastli": [65, 200, 232], "vdc": 310, "vdot": [246, 293], "ve": [146, 164], "vec": [13, 126, 198, 199, 256, 258, 278, 288, 289, 293, 294, 295], "vector": [1, 2, 8, 13, 17, 19, 20, 22, 30, 31, 35, 38, 41, 44, 49, 52, 53, 55, 56, 57, 58, 59, 63, 65, 72, 73, 74, 81, 82, 84, 98, 101, 103, 105, 119, 127, 134, 135, 136, 146, 147, 152, 153, 156, 161, 163, 164, 165, 171, 177, 191, 193, 196, 197, 200, 204, 205, 206, 215, 217, 221, 222, 223, 224, 225, 227, 230, 231, 232, 233, 234, 235, 237, 240, 248, 249, 253, 254, 258, 273, 274, 278, 285, 287, 290, 293, 294, 295, 296, 301, 313, 317, 320], "vector_sim": [9, 17, 22, 44, 52, 53, 88, 130, 133, 135, 171, 203, 216, 217, 224, 234, 251, 254, 317], "vectoris": [19, 53, 222, 224, 233, 234], "vectorized_adapt": 81, "vectorized_evalu": 193, "vectorized_fitness_evalu": 248, "vectorized_pso": 248, "vectorizedboundsvalid": 249, "vectorizedop": 317, "vectorizedpso": 248, "vectorsim": 317, "vectorsimulationintegr": 278, "vehicl": [222, 224, 233, 234, 313], "veil": 268, "vel": 161, "veldhuizen": 291, "velikova": [228, 236], "veloc": [12, 19, 35, 39, 41, 45, 52, 57, 58, 60, 61, 72, 73, 74, 75, 76, 77, 78, 79, 81, 84, 85, 86, 97, 98, 99, 103, 118, 127, 131, 134, 135, 136, 146, 149, 150, 158, 160, 161, 163, 164, 168, 170, 176, 177, 182, 183, 192, 193, 194, 196, 198, 201, 202, 203, 204, 205, 206, 208, 209, 215, 216, 219, 220, 221, 223, 224, 225, 226, 227, 230, 231, 232, 234, 235, 237, 239, 240, 245, 246, 247, 253, 254, 255, 258, 265, 268, 272, 274, 275, 277, 279, 280, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 306, 316, 317], "velocity_bound": 136, "velocity_clamp": [19, 53, 201, 215, 216, 250, 253, 254, 291, 293], "velocity_limit": [75, 101], "velocity_limit_exceed": 277, "velocity_magnitud": 291, "velocity_new": [202, 215], "velocity_norm": [40, 81, 205, 242, 301], "velocity_old": 202, "velocity_rang": 215, "velocity_vec": 258, "velsensor": 316, "venu": [122, 259], "venv": [39, 121, 124, 146, 164], "verbos": [12, 59, 61, 76, 84, 91, 92, 94, 98, 104, 107, 124, 126, 127, 185, 250, 254, 282, 298], "verdict": 242, "veri": [15, 31, 35, 36, 55, 65, 72, 75, 77, 78, 79, 81, 82, 84, 85, 86, 98, 104, 112, 114, 119, 120, 122, 134, 139, 140, 143, 144, 145, 146, 147, 148, 150, 151, 162, 164, 166, 167, 168, 170, 177, 195, 196, 197, 199, 200, 202, 206, 213, 219, 220, 227, 230, 231, 232, 237, 242, 245, 247, 254, 265, 280, 282, 290, 293, 309, 310], "verif": [0, 2, 3, 8, 24, 31, 34, 37, 39, 56, 58, 75, 88, 93, 95, 97, 98, 99, 100, 103, 119, 122, 123, 156, 166, 170, 172, 173, 176, 179, 180, 181, 184, 189, 192, 218, 225, 240, 242, 243, 244, 245, 251, 253, 255, 257, 260, 282, 290, 298, 299, 304, 320, 321], "verifi": [2, 3, 12, 13, 19, 22, 23, 25, 27, 28, 30, 31, 34, 35, 40, 44, 50, 51, 53, 56, 57, 58, 59, 65, 75, 76, 78, 81, 84, 85, 86, 88, 89, 91, 92, 93, 94, 97, 98, 112, 114, 115, 116, 117, 118, 120, 124, 127, 128, 129, 135, 137, 138, 142, 143, 144, 147, 148, 150, 153, 155, 156, 158, 159, 164, 166, 169, 170, 171, 175, 177, 178, 182, 183, 185, 187, 190, 192, 194, 195, 200, 204, 206, 207, 209, 210, 213, 216, 223, 224, 225, 230, 234, 235, 237, 240, 241, 242, 243, 245, 247, 248, 249, 251, 253, 254, 255, 256, 259, 261, 265, 269, 274, 275, 276, 280, 282, 283, 285, 287, 290, 291, 295, 298, 300, 309, 310, 315, 321], "verification_checklist": [121, 124], "verification_result": 279, "verificationconfig": 9, "verify_al": [121, 122, 124, 125, 126], "verify_backup": 98, "verify_controller_st": 98, "verify_convergence_properti": 279, "verify_data_integr": 93, "verify_depend": 98, "verify_fault_resolv": 261, "verify_hardware_statu": 261, "verify_issue2_compli": 249, "verify_lyapunov_st": [107, 279], "verify_mock_servic": 93, "verify_network_configur": 93, "verify_production_depend": 98, "verify_pso_factori": 117, "verify_result": 320, "verify_robustness_margin": 279, "verify_rollback_success": 93, "verify_safety_branch_coverag": 261, "verify_theorem_accuraci": 125, "verlag": [78, 82, 83, 192, 194, 196, 204, 205, 206, 207, 246, 287, 290], "verlet": 200, "version": [1, 2, 8, 11, 12, 15, 16, 17, 19, 22, 23, 24, 27, 30, 31, 32, 33, 34, 39, 51, 52, 61, 63, 64, 65, 67, 70, 72, 76, 77, 79, 80, 82, 83, 84, 85, 90, 91, 92, 94, 95, 98, 102, 103, 105, 112, 115, 117, 120, 121, 122, 126, 127, 129, 137, 141, 144, 145, 148, 151, 154, 156, 165, 169, 170, 171, 173, 177, 178, 182, 183, 188, 189, 192, 196, 197, 198, 199, 200, 201, 202, 205, 210, 215, 216, 217, 219, 220, 225, 232, 240, 241, 242, 245, 249, 252, 253, 254, 261, 262, 266, 277, 284, 287, 290, 291, 297, 298, 299, 301, 310, 313, 318, 320, 322], "versu": [228, 229, 236, 238, 283], "vertic": [30, 61, 129, 145, 161, 163, 164, 198, 227, 231, 232, 250, 289, 295, 317], "verticalalign": 280, "very_low": 255, "vetterl": 290, "vfs_cache_pressur": 92, "via": [1, 5, 17, 26, 27, 30, 31, 32, 35, 36, 38, 41, 45, 50, 51, 52, 53, 55, 56, 58, 61, 65, 67, 68, 70, 77, 78, 79, 81, 85, 86, 90, 95, 98, 105, 109, 120, 121, 123, 124, 125, 127, 132, 139, 145, 147, 152, 156, 159, 161, 166, 168, 170, 177, 182, 185, 188, 191, 196, 199, 201, 205, 211, 213, 216, 220, 222, 223, 224, 225, 226, 230, 232, 233, 234, 235, 237, 239, 240, 245, 249, 253, 265, 274, 282, 284, 285, 286, 287, 290, 291, 293, 300, 301, 308, 315, 318, 321], "viabil": [222, 233], "viabl": 98, "vibrant": 90, "vibrat": [222, 223, 227, 231, 233, 235], "video": [13, 19, 28, 29, 30, 31, 137, 144, 309], "vidyasagar": 123, "view": [1, 22, 26, 27, 30, 31, 42, 59, 61, 64, 69, 70, 91, 92, 127, 151, 152, 156, 157, 163, 164, 203, 217, 222, 232, 233, 270, 315, 320], "viewer": 268, "viewport": [31, 144, 145], "vii": 290, "violat": [1, 5, 33, 35, 37, 38, 39, 40, 50, 51, 53, 56, 61, 71, 73, 75, 76, 80, 84, 93, 95, 98, 103, 112, 118, 119, 120, 136, 148, 158, 161, 162, 166, 167, 172, 178, 193, 196, 201, 202, 203, 204, 207, 208, 209, 210, 215, 230, 237, 245, 248, 249, 250, 255, 274, 275, 276, 279, 280, 290, 291, 293, 301, 310], "violation_count": 118, "violation_magnitud": [75, 209], "violation_r": [119, 201], "violation_region": 209, "violation_text": 112, "violation_typ": 37, "violin": 169, "violinplot": [169, 310], "viridi": [171, 201], "virtanen": [2, 15], "virtanen2020scipi": 8, "virtual": [93, 121, 126, 146, 163, 164, 298], "virtual_env": 93, "virtual_memori": [92, 98, 104, 111, 254], "viscou": [45, 74, 101, 134, 135, 198, 220, 221, 225, 232, 240, 272], "visibl": [7, 30, 31, 88, 124, 127, 139, 140, 143, 144, 145, 148, 163, 164, 167, 190, 228, 236], "vision": 218, "visit": [1, 90, 145, 157, 271], "visit_": 297, "visit_classdef": 297, "visit_functiondef": 297, "visit_modul": 297, "visitor": 297, "visual": [1, 2, 7, 8, 9, 10, 13, 15, 19, 22, 27, 28, 31, 52, 59, 63, 64, 71, 81, 87, 88, 92, 95, 104, 118, 126, 127, 133, 135, 137, 138, 139, 140, 142, 144, 145, 146, 147, 150, 158, 162, 163, 164, 165, 166, 167, 169, 170, 172, 178, 184, 201, 215, 216, 222, 233, 253, 263, 288, 289, 290, 299, 303, 309, 313], "visualis": [223, 232, 235], "visualization_tutori": 316, "visualizationdata": 317, "vital": 142, "vive": 31, "viz": [8, 15, 30, 31, 156], "vl": 232, "vlissid": [2, 297], "vm": 92, "voic": [12, 266], "void": [31, 143], "vol": [226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 257, 290], "volatil": 148, "voltag": [222, 233, 317], "volum": [8, 11, 17, 36, 63, 92, 123, 200, 201, 257, 320], "volumemount": [63, 92], "von": 258, "vote": 119, "vpn": 177, "vr": [28, 30, 31], "vt": [35, 290], "vu": [223, 235], "vue": 270, "vuej": 270, "vulner": [91, 93, 242], "vv": [151, 225, 240], "vx": 23, "v\u1d62": [162, 191, 251, 310, 316], "v\u1d62\u1d57": 97, "v\u1d62\u2c7c": 310, "v\u2080": 198, "v\u2081": [161, 215], "v\u2081\u00b2": 86, "v\u2081\u2082": 310, "v\u2082": 161, "v\u2082\u00b2": 86, "v\u2c7c": 310, "w": [10, 17, 19, 24, 35, 39, 52, 57, 65, 67, 72, 73, 78, 81, 84, 86, 92, 97, 98, 102, 104, 107, 117, 119, 124, 125, 126, 131, 133, 148, 149, 158, 159, 161, 162, 165, 167, 168, 169, 182, 183, 187, 188, 193, 199, 205, 208, 209, 216, 222, 224, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 242, 245, 246, 247, 251, 253, 254, 257, 258, 261, 277, 279, 280, 282, 287, 288, 289, 290, 293, 298, 303, 308, 310, 316, 321], "w1": [81, 112, 167], "w2": [81, 112, 167], "w3": [81, 167], "w4": 167, "w_": [53, 125, 193, 216, 229, 232, 238, 246, 288, 289, 293], "w_1": [53, 58, 88, 201, 202, 216, 217, 245, 246, 293], "w_2": [53, 58, 88, 201, 202, 216, 217, 245, 246, 293], "w_3": [53, 58, 88, 201, 202, 216, 217, 245, 246, 293], "w_4": [53, 88, 201, 216, 217, 246], "w_control_effort": 310, "w_e": [288, 289], "w_end": [247, 250, 251], "w_energi": 133, "w_i": [119, 201, 293, 298, 299], "w_ise": 133, "w_j": 119, "w_k": 119, "w_max": [112, 125, 162, 253], "w_mean": 253, "w_min": [112, 125, 162], "w_overshoot": 310, "w_schedul": [19, 53, 199, 216, 250, 253, 254, 291, 293], "w_settl": 310, "w_start": [247, 250, 251], "w_time": 133, "w_u": [193, 288, 289], "w_val": 193, "w_valu": 193, "wa": [24, 26, 32, 40, 55, 70, 82, 83, 118, 127, 138, 146, 164, 202, 204, 227, 229, 230, 231, 232, 237, 238, 249, 282, 299, 301], "wah": 310, "wai": [17, 22, 34, 67, 84, 163, 177, 189, 201, 225, 226, 227, 228, 231, 232, 236, 239, 240, 266, 275, 277, 308], "wait": [21, 27, 31, 67, 86, 98, 114, 139, 141, 142, 143, 144, 153, 155, 216, 255, 265, 287, 310], "walk": [86, 290, 298, 300], "walkthrough": [11, 19, 132, 150], "wall": [61, 202, 290], "walli": [65, 178, 308, 309], "walt": [8, 17], "wang": [224, 226, 227, 231, 234, 239, 290, 291], "wang2011experiment": 257, "wanner": [84, 290], "want": [2, 17, 30, 34, 92, 127, 145, 163, 165, 167, 268, 269], "wantedbi": [90, 92], "warm": [84, 171, 173], "warm_start": 84, "warmup": [115, 117], "warn": [1, 17, 19, 22, 23, 27, 29, 30, 31, 34, 35, 38, 39, 40, 44, 49, 50, 51, 53, 57, 65, 72, 73, 76, 77, 81, 82, 83, 84, 85, 86, 92, 94, 98, 100, 101, 104, 105, 106, 114, 115, 117, 118, 119, 124, 127, 133, 135, 136, 138, 141, 144, 146, 148, 164, 165, 166, 167, 168, 170, 177, 183, 187, 188, 191, 193, 196, 201, 205, 207, 208, 210, 211, 213, 215, 216, 226, 239, 242, 245, 248, 254, 261, 274, 275, 276, 277, 279, 280, 283, 284, 288, 290, 298, 300, 310, 313, 321], "warn_redundant_cast": 300, "warn_return_ani": 300, "warn_unused_config": 300, "warn_unused_ignor": 300, "warner": 98, "warning_count": 72, "warning_list": 102, "warnings_count": 102, "warnings_issu": 102, "warranti": 15, "was_regular": 220, "wasm": [27, 28, 29, 30, 31, 153, 154, 155], "wasn": 300, "wast": [163, 197, 208, 216, 232, 298], "watch": [8, 26, 64, 90, 129, 150, 152, 153, 163], "watchdog": [15, 177], "watchdog_timeout": 321, "watson": 309, "wave": [1, 27, 28, 267, 268, 271], "wb": [148, 254, 298], "wc": 213, "wcag": [1, 30, 31], "wcet": 209, "wcet_estim": 209, "we": [12, 17, 72, 117, 121, 161, 163, 165, 167, 191, 204, 205, 206, 221, 222, 225, 227, 229, 230, 231, 232, 233, 237, 238, 240, 270, 287, 290, 291, 293, 294, 295, 298, 299, 310], "weak": [2, 65, 67, 77, 86, 114, 117, 201, 215, 313], "weak_ref": [114, 117], "weakli": 310, "weakref": [17, 55, 78, 114, 117, 168], "wear": [68, 78, 82, 85, 118, 146, 149, 163, 164, 166, 197, 199, 222, 223, 226, 227, 231, 233, 235, 239, 253, 310], "web": [1, 13, 17, 22, 28, 70, 90, 91, 92, 117, 127, 128, 129, 142, 146, 153, 155, 169, 189, 232, 241, 257, 265, 267, 269, 270, 271, 316, 317, 322], "webapp": 317, "webassembli": [1, 27, 153, 155], "webgl": [1, 129, 152, 153, 189], "webhook": 315, "webkit": 1, "websit": 156, "websocket": 44, "websocket_interfac": 9, "webxr": [28, 30], "week": [0, 4, 37, 38, 65, 67, 71, 79, 80, 84, 86, 127, 199, 217, 219, 266, 270, 299], "weekli": [25, 26, 39, 87, 88, 93, 98, 241, 245, 298], "weekly_mainten": 98, "weekly_quality_assess": 88, "weibul": 313, "weight": [10, 19, 45, 49, 51, 52, 55, 56, 57, 58, 60, 61, 65, 67, 68, 72, 73, 75, 76, 81, 82, 83, 88, 92, 97, 103, 104, 107, 112, 113, 118, 120, 124, 125, 128, 131, 133, 135, 148, 149, 167, 170, 172, 179, 182, 183, 191, 199, 200, 208, 209, 214, 216, 222, 223, 224, 225, 226, 230, 232, 233, 234, 235, 237, 239, 240, 242, 243, 247, 249, 253, 254, 255, 260, 261, 272, 275, 277, 279, 287, 289, 290, 291, 293, 298, 299, 306, 308, 309, 321], "weight_adjust": 255, "weight_combin": 133, "weight_param": [49, 51], "weightadjust": 255, "weighted_coverag": 255, "weighted_residu": 119, "weighted_scor": 209, "weighted_success": 255, "weighted_sum": [9, 293], "weip": 123, "welch": [53, 65, 67, 68, 97, 169, 178, 209, 274, 308, 309, 310, 320, 321], "welcom": [12, 122, 127, 146, 160, 189], "well": [11, 17, 19, 30, 35, 36, 38, 44, 55, 59, 63, 65, 71, 82, 83, 86, 114, 120, 124, 125, 132, 139, 143, 146, 163, 164, 165, 166, 167, 197, 198, 200, 201, 202, 205, 216, 222, 223, 224, 226, 230, 233, 234, 235, 237, 239, 242, 246, 250, 259, 279, 284, 287, 290, 297, 299, 303, 310, 313, 318], "went": [30, 275, 313], "were": [7, 33, 58, 65, 114, 127, 169, 210, 221, 225, 227, 229, 231, 232, 238, 240, 300], "weslei": [161, 207, 297], "western": 256, "what": [17, 22, 44, 94, 95, 98, 116, 117, 127, 149, 157, 164, 165, 166, 177, 182, 225, 240, 253, 270, 275, 297, 298, 309, 310, 320], "wheel": [91, 156], "when": [1, 2, 5, 15, 16, 19, 21, 22, 24, 32, 35, 36, 40, 44, 51, 53, 57, 59, 61, 67, 70, 72, 74, 76, 77, 78, 79, 81, 82, 84, 85, 86, 88, 90, 95, 97, 98, 102, 103, 105, 106, 112, 114, 118, 119, 120, 122, 124, 125, 127, 128, 134, 135, 139, 144, 145, 147, 149, 150, 156, 160, 161, 163, 164, 166, 167, 168, 169, 178, 184, 185, 188, 191, 193, 194, 195, 196, 197, 199, 202, 203, 206, 213, 216, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 240, 245, 246, 247, 255, 256, 257, 258, 261, 265, 271, 275, 276, 277, 279, 285, 287, 290, 293, 294, 296, 299, 306, 309, 310, 315, 320], "whenev": [205, 206], "where": [5, 8, 10, 22, 32, 35, 39, 41, 53, 55, 57, 58, 59, 61, 68, 73, 76, 77, 78, 79, 81, 84, 85, 86, 93, 97, 98, 99, 103, 118, 119, 120, 122, 124, 125, 127, 132, 134, 136, 137, 146, 149, 152, 156, 161, 162, 163, 164, 168, 169, 183, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 209, 213, 215, 216, 219, 220, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 237, 239, 245, 246, 247, 249, 250, 253, 256, 261, 268, 273, 274, 275, 287, 290, 293, 294, 295, 296, 298, 299, 301, 310, 313, 320], "wherea": [45, 225, 227, 230, 231, 232, 237, 240], "whether": [22, 52, 58, 61, 62, 101, 102, 127, 228, 230, 236, 237, 273, 306], "which": [20, 22, 44, 61, 62, 77, 117, 124, 127, 145, 146, 165, 166, 167, 178, 197, 200, 202, 205, 220, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 263, 269, 273, 276, 285, 287, 290, 301, 313, 315], "while": [10, 17, 29, 32, 36, 40, 44, 59, 70, 72, 74, 75, 76, 78, 84, 85, 86, 88, 93, 98, 106, 111, 115, 117, 119, 127, 136, 142, 164, 177, 185, 193, 209, 210, 211, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 239, 240, 245, 249, 250, 253, 254, 255, 265, 276, 277, 278, 279, 286, 290, 291, 293, 294, 297, 300, 304, 310, 320], "white": [74, 90, 232, 267], "whitegrid": 169, "whitespac": [94, 298, 318], "whitnei": [53, 65, 169, 178, 193, 308, 309, 310], "whl": 91, "who": [146, 165], "whom": 15, "whose": 232, "why": [7, 12, 15, 17, 21, 25, 41, 55, 65, 81, 85, 94, 117, 127, 129, 143, 160, 162, 164, 166, 201, 223, 232, 235, 297, 298, 300, 308], "wide": [22, 39, 53, 78, 86, 98, 133, 148, 167, 197, 199, 200, 201, 202, 222, 223, 226, 232, 233, 235, 239, 243, 248, 249, 273, 278, 284, 290, 310, 313], "wide_bound": 133, "widehat": 232, "widen": [77, 81, 85, 86, 128, 129, 133, 148, 167, 170, 232], "wider": [77, 86, 128, 158, 164, 165, 166, 170, 182, 273, 275], "widget": [1, 31, 153], "width": [22, 28, 30, 45, 51, 52, 71, 74, 77, 79, 85, 86, 144, 156, 159, 164, 182, 197, 205, 206, 224, 226, 227, 229, 231, 234, 238, 239, 253, 272, 273, 275, 287, 290, 295, 308, 309, 310], "wifi": [31, 177, 185], "wiki": [225, 240], "wikipedia": [225, 240], "wilcoxon": [246, 309], "wildli": [167, 170, 201], "wilei": [81, 161, 310], "wilk": [120, 178, 308, 309, 310], "will_be_remov": 117, "willbeatti": [222, 233], "win": [26, 193], "win32": 124, "wind": [55, 220, 222, 224, 226, 233, 234, 239], "wind_funct": 220, "wind_veloc": 220, "window": [16, 25, 28, 30, 31, 43, 53, 70, 88, 91, 98, 103, 118, 119, 120, 121, 124, 141, 142, 144, 145, 146, 147, 153, 164, 165, 170, 171, 177, 182, 188, 190, 202, 209, 282, 284, 285, 306, 310], "window_s": [35, 39, 118, 119, 120, 136, 209, 253, 280, 285], "windup": [55, 77, 78, 79, 81, 193, 205, 244], "winner": 310, "wire": [177, 185, 310], "wise": [119, 127, 154, 193, 226, 239, 246, 291, 310], "with_suffix": 117, "within": [8, 20, 24, 29, 36, 45, 50, 53, 59, 61, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 84, 92, 93, 98, 112, 113, 114, 115, 119, 124, 125, 126, 127, 132, 133, 135, 136, 143, 146, 148, 149, 154, 164, 175, 177, 182, 183, 190, 191, 196, 197, 198, 199, 204, 205, 206, 209, 216, 220, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 245, 246, 250, 252, 253, 254, 259, 265, 273, 277, 283, 284, 285, 290, 294, 297, 298, 306, 310, 313, 315, 320, 323], "within_bound": [81, 98], "within_boundari": 78, "within_satur": 98, "within_toler": 107, "without": [12, 14, 15, 17, 23, 25, 26, 27, 28, 30, 31, 35, 41, 44, 49, 51, 53, 59, 61, 65, 67, 70, 73, 76, 77, 79, 80, 94, 98, 106, 114, 119, 120, 121, 124, 138, 141, 142, 143, 145, 154, 162, 163, 164, 168, 182, 183, 189, 190, 195, 196, 197, 198, 199, 202, 204, 205, 210, 213, 222, 223, 224, 226, 227, 229, 230, 231, 233, 234, 235, 237, 238, 239, 246, 247, 265, 274, 275, 276, 278, 282, 283, 290, 291, 293, 298, 300, 303, 318, 321], "wittenmark": 320, "wizard": 98, "wmem_max": 92, "won": [94, 129, 142, 144, 145, 265], "word": [2, 25, 65, 67, 198, 200, 201, 202, 215, 309, 320], "work": [0, 1, 2, 12, 13, 15, 17, 19, 20, 23, 30, 31, 34, 35, 38, 40, 44, 52, 56, 61, 65, 86, 91, 92, 93, 106, 107, 108, 114, 115, 117, 122, 127, 128, 129, 137, 138, 139, 140, 141, 142, 144, 146, 150, 153, 157, 160, 162, 163, 167, 177, 185, 189, 202, 208, 210, 222, 228, 230, 232, 233, 236, 237, 251, 254, 256, 257, 265, 266, 270, 271, 276, 277, 283, 286, 296, 298, 300, 301, 310, 313, 320, 321], "workaround": [56, 65, 67, 144, 145], "workdir": [90, 91, 92], "worker": [1, 28, 61, 63, 65, 91, 106, 114, 153, 155, 282], "worker_id": [63, 114], "worker_result": 63, "worker_task": 63, "worker_thread": 105, "workeroptimizationtask": 63, "workflow": [1, 4, 10, 13, 17, 19, 23, 29, 30, 37, 38, 39, 45, 51, 52, 56, 58, 59, 60, 61, 64, 66, 67, 70, 76, 78, 81, 82, 86, 87, 88, 89, 93, 95, 100, 103, 105, 106, 107, 108, 114, 116, 117, 129, 132, 133, 146, 149, 150, 151, 154, 158, 159, 163, 164, 165, 166, 168, 172, 173, 174, 175, 176, 179, 180, 181, 184, 185, 189, 190, 199, 216, 217, 242, 245, 250, 255, 261, 262, 263, 266, 274, 276, 281, 297, 302, 305, 309, 311, 313, 316, 318, 319], "workflow_manag": 252, "workflow_result": 280, "workflowerrorhandl": 252, "workingdirectori": [90, 92], "workload": [22, 61, 203, 298], "workshop": [8, 17, 227, 231], "workspac": [249, 287], "world": [1, 12, 27, 30, 31, 42, 45, 57, 59, 64, 65, 67, 123, 127, 129, 152, 166, 185, 189, 197, 218, 222, 223, 228, 230, 233, 235, 236, 237, 241, 242, 246, 259, 293, 309], "wornyo": [223, 235], "worri": 160, "wors": [177, 196, 197, 202, 230, 237, 310], "worst": [49, 53, 65, 67, 71, 119, 133, 181, 197, 209, 214, 216, 222, 224, 226, 229, 230, 233, 234, 237, 238, 239, 246, 248, 253, 254, 279, 287, 308, 309], "worst_cas": 133, "worst_case_condit": 75, "worst_case_perform": 248, "worst_case_scenario": 253, "worst_case_st": 75, "worst_case_tim": 310, "worst_fit": 214, "worth": [12, 309, 310, 313], "would": [14, 17, 25, 26, 32, 44, 59, 73, 92, 111, 120, 147, 165, 171, 199, 205, 229, 230, 237, 238, 277, 309, 310, 313], "wrap": [17, 19, 51, 53, 56, 58, 76, 80, 84, 86, 98, 101, 115, 117, 145, 188, 202, 203, 215, 269, 277], "wrapper": [14, 20, 35, 38, 49, 50, 52, 56, 59, 76, 79, 82, 86, 98, 100, 103, 115, 117, 248, 274, 277, 300, 309, 313, 318], "wright": 84, "writabl": 44, "write": [13, 17, 24, 27, 30, 53, 61, 62, 72, 94, 117, 122, 127, 137, 138, 149, 155, 168, 169, 188, 190, 210, 222, 233, 254, 282, 320], "writeabl": 216, "writelin": 254, "written": [12, 33, 92, 147, 226, 232, 239, 295], "wrong": [5, 40, 49, 51, 71, 80, 98, 106, 117, 119, 131, 132, 144, 146, 147, 151, 168, 170, 247, 273, 275, 298], "wrong_length_gain": 114, "wu": [226, 230, 237, 239], "www": [8, 13, 15, 17, 123, 222, 224, 228, 229, 233, 234, 236, 238, 297, 320], "w\u03c3": [230, 237], "w\u1d62": [97, 310], "w\u1d64i\u1d64": 316, "w\u2081": [68, 97, 103, 202, 249, 250], "w\u2081j_e": 317, "w\u2081r\u2081\u00b2": 118, "w\u2082": [68, 97, 103, 202, 249, 250], "w\u2082j_u": 317, "w\u2082r\u2082\u00b2": 118, "w\u2083": [68, 97, 202, 249, 250], "w\u2083j_": 317, "w\u2083r\u2083\u00b2": 118, "w\u2084": [68, 97, 250], "w\u2091i\u2091": 316, "w\u209bi\u209b": 316, "x": [1, 5, 10, 12, 13, 17, 19, 21, 22, 23, 28, 30, 31, 34, 35, 36, 37, 39, 40, 41, 44, 50, 52, 55, 56, 58, 59, 61, 63, 68, 72, 73, 74, 75, 76, 77, 78, 81, 82, 84, 85, 86, 89, 92, 93, 94, 95, 97, 98, 101, 103, 105, 106, 107, 115, 118, 124, 125, 126, 127, 128, 134, 135, 144, 145, 146, 148, 149, 151, 152, 156, 160, 161, 162, 164, 165, 167, 169, 170, 171, 177, 178, 182, 185, 192, 193, 196, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 215, 216, 217, 218, 220, 224, 225, 226, 227, 231, 232, 234, 239, 240, 244, 246, 248, 249, 250, 253, 254, 256, 257, 258, 261, 265, 272, 277, 279, 282, 285, 287, 288, 289, 290, 293, 294, 295, 296, 297, 299, 301, 306, 309, 310, 313, 315, 316, 317, 320, 323], "x0": [35, 44, 61, 84, 131, 135, 203, 208, 216, 232, 253], "x0_batch": 203, "x0_dot": [131, 135], "x1": [30, 199, 225, 240], "x1_end": 73, "x2": [30, 199, 225, 240], "x2_end": 73, "x3": 30, "x4": [30, 200], "x5": 200, "x509": 92, "x_": [52, 84, 119, 191, 193, 198, 199, 200, 202, 208, 225, 232, 240, 245, 246, 279, 290], "x_0": [35, 84, 200, 299], "x_1": [35, 156, 191, 202, 220, 225, 240, 291], "x_2": [156, 191, 202, 220, 225, 240], "x_4": 61, "x_5": 61, "x_a": 279, "x_arr": [59, 61, 216], "x_arr_list": 61, "x_arrai": 203, "x_b": [19, 53, 193, 216, 250], "x_batch": [193, 216, 217, 254], "x_best": 202, "x_bound": 136, "x_cart": 98, "x_curr": [61, 216], "x_current": [61, 84, 203], "x_desir": [107, 125], "x_dot": [10, 17, 41, 61, 63, 73, 75, 76, 77, 185, 204, 220, 258], "x_dot_gain": 73, "x_eq": 84, "x_final": [97, 107], "x_gain": 73, "x_h": 200, "x_i": [193, 200, 201, 202, 215, 229, 238, 246, 290, 291, 292, 293], "x_j": [290, 291], "x_k": [39, 84], "x_max": [35, 61, 84, 103, 162], "x_mean": 39, "x_measur": 118, "x_min": [35, 61, 162], "x_n": [52, 84, 200, 291], "x_new": 162, "x_next": [61, 118, 200, 203, 216], "x_next_ful": 203, "x_next_lr": 203, "x_noisi": 68, "x_normal": 35, "x_po": 258, "x_ref": [84, 103, 118, 249, 279, 317], "x_safe": 249, "x_sat": 35, "x_sat_norm": 35, "x_target": 84, "x_temp": 61, "x_test": 313, "x_train": 313, "x_true": 68, "x_val": 61, "x_valu": 207, "x_vel": 258, "xaxi": 317, "xdist": [151, 282], "xdot": [41, 81, 171, 177, 232], "xfail": 284, "xi": [200, 279], "xin": [224, 234], "xl": 201, "xlabel": [53, 86, 118, 133, 134, 135, 148, 166, 167, 170, 171, 193, 202, 253, 254, 280], "xml": [39, 87, 151, 282, 283], "xms512m": 92, "xmx512m": 92, "xor": 177, "xplore": 298, "xref": 84, "xscale": 166, "xsrf": 90, "xtick": 169, "xu": [123, 201], "xx": 232, "xxx": 21, "xxxxxxx": 320, "xyz": 115, "xzf": 92, "x\u00b2": 97, "x\u03b8_1\u03b8_2x": [225, 240], "x\u1d62": [162, 191, 251, 310, 316], "x\u1d62\u1d57": 97, "x\u1d63\u2091f": 316, "x\u2080": [84, 199, 317], "x\u2081": [84, 97, 161, 199, 202, 310], "x\u2081\u00b2": 30, "x\u2082": [97, 161, 199, 202], "x\u2082\u00b2": 30, "x\u2083": 97, "x\u2099": 310, "x\u209c": 310, "x\u2c7c": 310, "y": [23, 28, 30, 35, 39, 50, 52, 62, 77, 81, 90, 91, 92, 98, 102, 106, 115, 119, 144, 149, 150, 156, 159, 163, 164, 169, 170, 178, 192, 193, 194, 197, 199, 201, 202, 204, 205, 219, 220, 221, 225, 226, 227, 229, 230, 231, 232, 237, 238, 239, 240, 246, 254, 255, 257, 258, 280, 289, 290, 291, 294, 295, 297, 310, 313, 317, 320], "y0": [150, 219, 220, 232], "y1": [225, 240], "y2": [225, 240], "y_": 232, "y_1": [220, 225, 240], "y_2": [220, 225, 240], "y_full": 35, "y_half1": 35, "y_half2": 35, "y_i": 290, "y_k": 119, "y_mean": 39, "y_regressor": 258, "y_train": 313, "y_valu": 207, "yaml": [8, 10, 12, 14, 16, 19, 21, 22, 24, 34, 36, 37, 38, 39, 40, 45, 49, 52, 55, 56, 59, 61, 62, 65, 67, 68, 74, 76, 78, 80, 82, 83, 84, 86, 89, 91, 92, 93, 98, 102, 103, 104, 105, 106, 116, 117, 118, 119, 120, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 147, 148, 150, 151, 165, 166, 167, 170, 171, 177, 182, 185, 188, 196, 199, 203, 208, 216, 217, 218, 221, 222, 223, 227, 231, 232, 233, 235, 242, 244, 248, 250, 254, 257, 265, 275, 276, 280, 285, 291, 293, 302, 317, 318, 320, 321], "yamlerror": [117, 254], "yanas": 8, "yang": [77, 205, 230, 237], "yao": [77, 205, 230, 237], "yasir": [224, 234], "yaxi": 317, "ye": [15, 25, 26, 31, 36, 40, 51, 53, 61, 65, 67, 84, 85, 86, 92, 94, 112, 122, 124, 126, 132, 145, 162, 163, 166, 167, 169, 170, 197, 200, 208, 242, 251, 252, 253, 274, 298, 316, 320], "year": [2, 8, 16, 17, 89, 123, 126, 129, 187, 188, 257, 297, 298, 310, 320], "yellow": [163, 254], "yerr": [178, 310], "yet": [14, 28, 70, 202, 210, 223, 235, 242], "yield": [17, 22, 53, 61, 104, 112, 123, 125, 193, 201, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 239, 240, 246, 282, 287, 290, 293, 294, 299], "ylabel": [53, 86, 118, 133, 134, 135, 148, 166, 167, 170, 171, 193, 202, 253, 254, 280], "yml": [10, 16, 37, 39, 63, 91, 94, 98, 102, 151, 188, 281, 302, 315, 320], "york": [197, 205], "you": [12, 22, 34, 70, 95, 98, 115, 116, 122, 127, 140, 145, 147, 149, 157, 161, 162, 163, 164, 166, 167, 168, 169, 170, 178, 185, 265, 266, 267, 268, 270, 277, 310, 315], "young": [78, 194, 196, 197, 205], "your": [2, 7, 22, 31, 64, 69, 70, 90, 92, 94, 95, 98, 118, 121, 127, 129, 132, 133, 135, 137, 138, 140, 142, 144, 145, 148, 152, 153, 155, 158, 166, 167, 169, 185, 189, 232, 253, 265, 266, 267, 270, 296, 303, 313, 320], "your_control": 185, "your_work2025": 320, "yourself": [163, 164], "youtub": 11, "yscale": [53, 280], "yudong": [224, 234], "yuhui": 123, "yuri": 123, "yyyi": 70, "y\u2081": 310, "y\u2082": 310, "z": [23, 41, 68, 82, 84, 92, 93, 98, 119, 193, 199, 200, 202, 205, 206, 224, 226, 227, 228, 231, 234, 236, 239, 245, 249, 257, 267, 269, 271, 272, 279, 287, 290, 297, 310], "z0": 299, "z_": 232, "z_beta": 313, "z_crit": 313, "z_current": 85, "z_histori": 85, "z_max": 85, "z_new": [79, 85], "z_prev": 79, "z_satur": 85, "z_score": 119, "za": 299, "zac": 8, "zavala": 123, "zdt1": [193, 291], "zeitz": 86, "zenodo": [8, 169, 310, 320], "zero": [1, 12, 17, 20, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 40, 41, 45, 51, 53, 55, 57, 59, 61, 62, 63, 65, 67, 68, 73, 74, 75, 76, 77, 78, 79, 81, 84, 85, 89, 92, 98, 101, 104, 106, 114, 116, 117, 119, 120, 127, 129, 143, 146, 150, 151, 155, 161, 163, 164, 167, 170, 171, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 208, 209, 213, 215, 218, 219, 220, 221, 222, 224, 225, 226, 227, 230, 231, 232, 233, 234, 237, 239, 240, 242, 244, 246, 248, 254, 255, 259, 260, 273, 274, 276, 278, 283, 284, 287, 288, 290, 291, 294, 300, 301, 306, 313, 318], "zero_dt": 75, "zero_gain": 75, "zero_order_hold": [9, 61], "zerocontrol": 9, "zeromq": [8, 15], "zeroorderhold": [59, 61], "zeros_lik": [107, 193, 201], "zeta": [191, 249, 287, 294], "zeta1": [199, 249], "zeta2": [199, 249], "zeta_eff": 287, "zeta_i": 294, "zeta_max_poss": 252, "zeta_min_poss": 252, "zhan": [123, 202], "zhang": [123, 205, 224, 227, 228, 231, 234, 236, 291], "zhaolin": [224, 234], "zhong": [86, 227, 230, 231, 237], "zhu": [226, 239], "zinob": [78, 123, 205], "zip": [49, 61, 73, 90, 93, 98, 106, 109, 112, 114, 115, 116, 117, 149, 178, 201, 207, 247, 248, 249, 251, 254, 277, 290], "zlib": [177, 185], "zmq": 91, "zoh": [61, 84], "zone": [51, 55, 63, 72, 76, 79, 81, 82, 103, 197, 199, 205, 222, 224, 227, 231, 233, 234, 242, 253, 273, 275, 276, 279, 287, 290, 301], "zoom": [1, 27, 28, 30, 31, 129, 152, 153, 156, 157, 164, 263, 265, 316], "zoomabl": [28, 150, 170], "zotero": [122, 320], "z\u1d40": 84, "z\u1d62": 310, "z\u2081": [161, 310], "z\u2081\u00b2": 310, "z\u2082": [161, 310], "z\u2082\u00b2": 310, "z\u2099": 310, "\u00b2": [53, 68, 77, 84, 86, 97, 99, 103, 107, 128, 149, 167, 170, 205, 217, 225, 240, 249, 310], "\u00b2_q": [84, 103], "\u00b2_r": [84, 103], "\u00b2dt": 277, "\u00b2\u03b8": 161, "\u00b3": 205, "\u00b5": [151, 166], "\u00b9": [78, 84, 85, 97, 168, 196, 204, 205, 206, 209, 220, 225, 240, 249, 316, 317], "\u00b9b": [103, 205, 206], "\u00b9f": 103, "\u00b9g": 161, "\u00b9l": 206, "\u00b9lm": 103, "\u00b9m\u1d40": 205, "\u00b9q": 161, "\u00bd": [86, 161, 249], "\u00bdi\u2081\u03b8": 161, "\u00bdi\u2082\u03b8": 161, "\u00bdm\u2080\u1e8b\u00b2": 161, "\u00bdm\u2081": 161, "\u00bdm\u2082": 161, "\u00bds\u00b2": [40, 97, 163, 192, 204, 249, 301], "\u00bds\u1d40": 249, "\u00bds\u1d40p": 249, "\u00bdx": 317, "\u00bdz\u00b2": [85, 205, 206, 249], "\u00bd\u03b3": 249, "\u00bd\u03b6\u00b2": 163, "\u00bd\u03c3\u00b2": [77, 78, 205, 206], "\u00e2": 296, "\u00e5str\u00f6m": [86, 301, 310, 320], "\u00eb": 249, "\u00eb\u2081": [97, 194, 204, 249], "\u00eb\u2082": [97, 194, 204, 249], "\u00f6zg\u00fcner": [78, 194, 196, 197, 205], "\u00fb": 99, "\u00fc": [78, 194, 196, 197, 205], "\u0117": [86, 249, 298], "\u01171": [72, 112], "\u01172": [72, 112], "\u0117_e": 86, "\u0117_x": 258, "\u0117_\u03b8\u2081": 258, "\u0117_\u03b8\u2082": 258, "\u0117\u2081": [76, 97, 99, 103, 105, 194, 204, 253, 274], "\u0117\u2082": [76, 97, 99, 103, 105, 194, 204, 253, 274], "\u0177": 119, "\u017c": [85, 205, 249], "\u017c\u2081": 161, "\u017c\u2081\u00b2": [134, 161], "\u017c\u2082": 161, "\u017c\u2082\u00b2": [134, 161], "\u0233": 310, "\u03b1": [45, 53, 57, 65, 72, 78, 86, 97, 98, 101, 103, 105, 119, 125, 126, 127, 131, 132, 133, 163, 166, 167, 169, 178, 192, 195, 196, 197, 199, 205, 206, 216, 249, 273, 274, 275, 279, 290, 308], "\u03b11": 98, "\u03b12": 98, "\u03b1_adapt": 166, "\u03b1_correct": [310, 313], "\u03b1i": [205, 206], "\u03b1k": 205, "\u03b1x": 199, "\u03b1x\u2081": 199, "\u03b1\u00b2": [97, 125, 126, 166], "\u03b1\u03c3": [230, 237], "\u03b1\u2080": 166, "\u03b1\u2081": [36, 73, 81], "\u03b1\u2081\u00b2": 73, "\u03b1\u2081\u03b8\u2081": 36, "\u03b1\u2082": [36, 73], "\u03b1\u2082\u03b8\u2082": 36, "\u03b1\u2083": 36, "\u03b1\u2083x": 36, "\u03b2": [36, 53, 57, 97, 125, 126, 131, 132, 133, 163, 166, 167, 168, 199, 205, 216, 310], "\u03b2_adapt": 166, "\u03b2t": 310, "\u03b2x\u2082": 199, "\u03b2\u2080": 166, "\u03b2\u2081": [36, 168], "\u03b2\u2082": [36, 168], "\u03b2\u2083": 36, "\u03b3": [36, 45, 51, 53, 56, 57, 58, 72, 73, 76, 77, 80, 81, 82, 98, 99, 100, 101, 103, 105, 106, 113, 115, 131, 132, 133, 166, 167, 168, 179, 191, 197, 201, 205, 230, 237, 247, 249, 250, 253, 273, 275, 276, 279, 292, 310], "\u03b3_max": [77, 205], "\u03b3_\u03b1": 166, "\u03b3_\u03b2": 166, "\u03b3ijk": [225, 240], "\u03b3y\u209c": 310, "\u03b3\u1d62": 205, "\u03b3\u2081": [36, 40, 99, 181, 205, 222, 233, 301], "\u03b3\u2082": [36, 40, 99, 181, 205, 222, 233, 301], "\u03b3\u2083": 36, "\u03b3\u2096": 310, "\u03b4": [76, 77, 84, 97, 98, 103, 119, 195, 197, 205, 249, 254, 290, 292, 308, 309, 310], "\u03b4_i": 279, "\u03b4_max": 98, "\u03b4_u": 84, "\u03b4e\u1d62": 84, "\u03b4f": 274, "\u03b4h": 284, "\u03b4t": [84, 119], "\u03b4u": [53, 84, 217], "\u03b4u\u00b2": 53, "\u03b4x": 202, "\u03b4y\u209c": 310, "\u03b4\u00b2": [84, 119, 310], "\u03b4\u03b8\u1d62": 310, "\u03b5": [55, 76, 78, 79, 81, 85, 103, 128, 131, 132, 133, 146, 148, 163, 164, 166, 167, 170, 182, 192, 195, 196, 197, 201, 204, 205, 206, 249, 283, 284, 292, 299, 310, 316], "\u03b5_0": 163, "\u03b5_accept": 209, "\u03b5_base": 194, "\u03b5_eff": [163, 192, 196], "\u03b5_effect": 194, "\u03b5_switch": 249, "\u03b5_taper": 205, "\u03b5_threshold": [205, 206], "\u03b5\u2080": [78, 195, 205, 206], "\u03b5\u2081": [78, 99, 195, 205, 206], "\u03b5\u2082": 99, "\u03b5\u2098\u1d62\u2099": 195, "\u03b5\u209c": 310, "\u03b6": [73, 163, 249, 273, 279], "\u03b6\u00b2": 249, "\u03b6\u03c0": 249, "\u03b6\u03c9\u2099t": 249, "\u03b6\u1d62": [192, 204, 247, 249], "\u03b6\u2082": 247, "\u03b7": [12, 75, 77, 78, 81, 98, 99, 103, 112, 124, 125, 126, 195, 196, 197, 199, 204, 205, 206, 209, 249, 251, 274, 279, 284, 316, 317], "\u03b7_c": 205, "\u03b7t": [78, 85, 197, 205], "\u03b7\u00b2": [169, 310], "\u03b8": [12, 36, 40, 61, 63, 72, 73, 76, 77, 78, 81, 84, 85, 86, 97, 98, 101, 103, 105, 107, 118, 124, 125, 134, 135, 161, 163, 170, 183, 185, 191, 194, 198, 203, 204, 205, 206, 209, 225, 232, 240, 249, 250, 253, 258, 265, 278, 301, 310, 313, 316, 317], "\u03b81": [35, 53, 72, 75, 77, 78, 81, 94, 101, 112, 124, 125, 158, 168, 185, 203, 232, 313], "\u03b81_dot": 75, "\u03b81_init": 68, "\u03b81_trajectori": 75, "\u03b81m_": [225, 240], "\u03b82": [35, 53, 72, 75, 77, 78, 81, 94, 101, 112, 124, 125, 158, 168, 185, 203, 232, 313], "\u03b82_dot": 75, "\u03b82_init": 68, "\u03b82_trajectori": 75, "\u03b82m_": [225, 240], "\u03b8_1": [225, 240], "\u03b8_1i_1": [225, 240], "\u03b8_1m_2l_c2co": [225, 240], "\u03b8_1m_2l_c2g": [225, 240], "\u03b8_2": [225, 240], "\u03b8_2m_2l_1l_c2co": [225, 240], "\u03b8_err": 84, "\u03b8_max": 84, "\u03b8_ref": 317, "\u03b8\u1d62": [61, 68, 249, 310, 316], "\u03b8\u1d62_k": 84, "\u03b8\u1d62\u03b8\u2c7c": 161, "\u03b8\u2081": [1, 12, 61, 73, 76, 77, 78, 81, 84, 85, 86, 97, 98, 103, 105, 107, 118, 121, 124, 126, 127, 129, 132, 134, 135, 136, 146, 149, 150, 152, 160, 161, 163, 164, 166, 170, 183, 191, 194, 198, 200, 201, 204, 205, 206, 209, 216, 227, 230, 231, 237, 249, 258, 265, 278, 279, 301, 316, 317], "\u03b8\u2081_ddot": 97, "\u03b8\u2081_dot": 97, "\u03b8\u2081_k": 84, "\u03b8\u2081_ref": 317, "\u03b8\u2081dt": 76, "\u03b8\u2081\u1d48": [97, 103, 204], "\u03b8\u2081\u1d63\u2091f": [279, 316], "\u03b8\u2081\u2080": 317, "\u03b8\u2082": [1, 12, 61, 73, 76, 77, 78, 81, 84, 85, 86, 97, 98, 103, 105, 107, 118, 121, 124, 126, 127, 129, 132, 134, 135, 136, 146, 149, 150, 152, 160, 161, 163, 164, 166, 170, 183, 191, 194, 198, 200, 201, 204, 205, 206, 209, 216, 227, 230, 231, 237, 249, 258, 265, 278, 279, 301, 316, 317], "\u03b8\u2082_k": 84, "\u03b8\u2082_ref": 317, "\u03b8\u2082dt": 76, "\u03b8\u2082\u1d48": [97, 103, 204], "\u03b8\u2082\u1d63\u2091f": [279, 316], "\u03b8\u2082\u2080": 317, "\u03b8\u2098\u1d62\u2099": 316, "\u03b8\u2098\u2090\u2093": 316, "\u03b8\u2c7c": 310, "\u03ba": [78, 198, 205, 209, 225, 240, 290], "\u03ba_max": 290, "\u03ba_mthr": [225, 240], "\u03bb": [72, 75, 84, 98, 119, 120, 125, 163, 183, 202, 213, 249, 252, 253, 279, 290], "\u03bb1": [38, 45, 51, 53, 56, 57, 58, 61, 76, 77, 78, 80, 81, 82, 84, 86, 98, 100, 101, 103, 105, 106, 113, 115, 128, 131, 132, 133, 148, 166, 167, 168, 182, 183, 196, 199, 201, 202, 204, 208, 215, 216, 230, 237, 250, 253, 273, 274, 275, 276, 279, 280, 290, 321], "\u03bb1\u03b81": 232, "\u03bb2": [38, 45, 51, 53, 56, 57, 58, 61, 76, 77, 78, 80, 81, 82, 84, 86, 98, 100, 101, 103, 105, 106, 113, 115, 128, 131, 132, 133, 148, 166, 167, 168, 182, 183, 196, 199, 201, 202, 204, 208, 215, 216, 230, 237, 250, 253, 273, 274, 275, 276, 279, 280, 321], "\u03bb2k_": [230, 237], "\u03bb2\u03b82": 232, "\u03bb_c": [36, 40, 205, 301], "\u03bb_i": 125, "\u03bb_max": 279, "\u03bb_min": 163, "\u03bbe": [249, 298], "\u03bbi": [35, 112, 213], "\u03bbt": [75, 209], "\u03bb\u03c3": 119, "\u03bb\u1d62": [73, 98, 192, 199, 204, 205, 247, 249, 279], "\u03bb\u1d62\u03b8\u1d62": [77, 78, 85], "\u03bb\u2081": [12, 13, 36, 51, 73, 76, 77, 78, 81, 85, 97, 98, 103, 146, 148, 163, 164, 166, 167, 168, 170, 183, 192, 194, 196, 201, 202, 204, 205, 206, 222, 233, 249, 253, 254, 273, 274, 275, 279, 280, 301], "\u03bb\u2081_max": 252, "\u03bb\u2081e": 12, "\u03bb\u2081e\u2081": [76, 97, 99, 103, 105, 194, 253], "\u03bb\u2081\u00eb\u2081": 204, "\u03bb\u2081\u0117\u2081": [97, 99, 192, 194, 204, 249, 251, 274], "\u03bb\u2081\u03b8": [76, 78, 196, 199, 204, 205, 206], "\u03bb\u2081\u03b8\u2081": [36, 40, 77, 78, 85, 205, 206, 301], "\u03bb\u2081\u03b8\u2082": [129, 163], "\u03bb\u2082": [12, 36, 51, 73, 76, 77, 78, 81, 85, 97, 98, 103, 146, 148, 163, 164, 166, 167, 168, 170, 183, 192, 194, 196, 201, 202, 204, 205, 206, 222, 233, 247, 249, 253, 254, 273, 274, 275, 279, 280, 301], "\u03bb\u2082_max": 252, "\u03bb\u2082d\u03b8\u2082": 129, "\u03bb\u2082e\u2082": [76, 97, 99, 103, 105, 194, 253], "\u03bb\u2082\u00eb\u2082": 204, "\u03bb\u2082\u0117": 12, "\u03bb\u2082\u0117\u2082": [97, 99, 192, 194, 204, 249, 251, 274], "\u03bb\u2082\u03b8": [76, 78, 163, 196, 199, 204, 205, 206], "\u03bb\u2082\u03b8\u2082": [36, 40, 77, 78, 85, 205, 206, 301], "\u03bb\u2083": 12, "\u03bb\u2084": 12, "\u03bb\u2098\u1d62\u2099": 195, "\u03bc": [12, 36, 41, 78, 81, 97, 118, 119, 120, 197, 199, 284, 285, 300, 308], "\u03bc_": 119, "\u03bc_control": 310, "\u03bc_diff": 310, "\u03bc_ref": 119, "\u03bc_treatment": 310, "\u03bc\u2080": [119, 310], "\u03bc\u2081": [97, 119, 310], "\u03bc\u2082": [97, 310], "\u03bd": 97, "\u03be": [279, 308], "\u03c0": [35, 61, 68, 72, 73, 84, 86, 164, 170, 198, 203, 225, 240, 249, 250, 261, 310], "\u03c1": [125, 126, 183, 195, 196, 204, 249, 279, 310], "\u03c1_max": 249, "\u03c1i": [196, 204], "\u03c1\u00b2": 310, "\u03c1\u03b5\u2080": 195, "\u03c3": [45, 62, 65, 67, 68, 72, 78, 79, 81, 88, 97, 98, 99, 103, 105, 118, 119, 120, 177, 195, 197, 205, 206, 209, 216, 227, 231, 232, 247, 249, 250, 273, 275, 279, 284, 285, 308, 316], "\u03c3_": 84, "\u03c3_b": 53, "\u03c3_control": 310, "\u03c3_energi": 68, "\u03c3_max": [213, 290], "\u03c3_n": [53, 197], "\u03c3_noise\u00b2": 119, "\u03c3_norm": 68, "\u03c3_pool": 310, "\u03c3d": 205, "\u03c3k": [98, 103, 249, 273, 275], "\u03c3k\u1d62": [77, 85], "\u03c3\u00b2": [53, 205, 217, 310, 313], "\u03c3\u03c3": [77, 78, 205, 206], "\u03c3\u1d62": 310, "\u03c3\u2080": 205, "\u03c3\u2081": 36, "\u03c3\u2082": 36, "\u03c3\u2083": 36, "\u03c3\u2096": 310, "\u03c3\u2c7c\u03b4\u2c7c\u03b4y\u209c": 310, "\u03c4": [79, 81, 84, 97, 107, 205], "\u03c4_adapt": 72, "\u03c4_d": 279, "\u03c4_k": 119, "\u03c4_surfac": 72, "\u03c4\u1d62": 205, "\u03c4\u2081": 206, "\u03c4\u2082": 206, "\u03c6": [12, 36, 97, 98, 103, 124, 156, 162, 163, 191, 209, 249, 251, 252, 279, 290, 310], "\u03c6_i": 279, "\u03c6\u00b2": [162, 251], "\u03c6\u2081": 36, "\u03c6\u2082": 36, "\u03c6\u2083": 36, "\u03c7": [162, 191, 209, 251], "\u03c7\u00b2": [310, 312], "\u03c9": [97, 199, 201, 214, 251, 290, 304], "\u03c9_max": 202, "\u03c9_min": 202, "\u03c9n": 112, "\u03c9\u00b2": 310, "\u03c9\u00b2sin": 30, "\u03c9\u2081": 36, "\u03c9\u2081\u03b8\u2081": 36, "\u03c9\u2082": 36, "\u03c9\u2082\u03b8\u2082": 36, "\u03c9\u2083": 36, "\u03c9\u2083x": 36, "\u03c9\u2099": [163, 249, 251], "\u03c9\u2099\u00b2": [249, 251], "\u03c9\u2099\u00b2e": 249, "\u03c9\u2099\u1d62": [192, 204, 249], "\u0641\u0627\u0631\u0633\u06cc": 265, "\u1d3a": 84, "\u1d40": [61, 84, 134, 160, 161, 205, 249, 317], "\u1d40m": 317, "\u1d47": 310, "\u1d4f": 316, "\u1d50": 310, "\u1d62": [77, 78, 85, 97, 134, 161, 205, 310], "\u1e0b": 197, "\u1e41": 161, "\u1e61": [12, 36, 75, 76, 81, 97, 98, 99, 103, 125, 160, 163, 192, 194, 196, 199, 204, 207, 209, 249, 251, 255, 274, 284, 316], "\u1e61_ref": 98, "\u1e61\u2081": 204, "\u1e8b": [12, 36, 40, 61, 63, 72, 73, 76, 77, 78, 81, 84, 85, 86, 97, 98, 101, 105, 107, 118, 125, 161, 185, 191, 194, 196, 203, 205, 209, 220, 249, 258, 265, 278, 301, 313, 316, 317], "\u1e8b_cart": 98, "\u1e8b_ref": 317, "\u1e8b\u00b2": [86, 161], "\u1e8b\u03b8": 161, "\u1e8b\u1d62": 160, "\u1e8b\u2080": 317, "\u1e8b\u2081": 161, "\u1e8b\u2081\u00b2": [134, 161], "\u1e8b\u2082": 161, "\u1e8b\u2082\u00b2": [134, 161], "\u1e8d": [30, 86, 161, 220], "\u1e91": 310, "\u2074": [205, 290], "\u2076": [205, 261, 290, 310], "\u2078": 205, "\u2080": 84, "\u2080\u1d40": [68, 97, 107, 197], "\u2080\u1d57": 97, "\u2080\u2085": 310, "\u2081": [12, 36, 40, 61, 63, 73, 76, 77, 78, 81, 84, 85, 86, 97, 98, 103, 105, 107, 118, 125, 161, 163, 183, 191, 196, 199, 204, 205, 206, 209, 249, 251, 258, 265, 278, 279, 301, 310, 316, 317], "\u2081_ref": 317, "\u2081co": 161, "\u2081cos\u03b8\u2081": 86, "\u2081sin": 161, "\u2081sin\u03b8\u2081": 86, "\u2081\u00b2": [86, 161], "\u2081\u03b8": 161, "\u2081\u1d3a": 97, "\u2081\u1d48": [97, 103, 204], "\u2081\u207f": [97, 310], "\u2081\u2080": 317, "\u2082": [12, 36, 40, 61, 63, 73, 76, 77, 78, 81, 84, 85, 86, 97, 98, 103, 105, 107, 118, 119, 161, 163, 183, 191, 196, 199, 204, 205, 206, 209, 249, 253, 258, 265, 273, 275, 278, 279, 301, 310, 316, 317], "\u2082_ref": 317, "\u2082co": 161, "\u2082cos\u03b8\u2082": 86, "\u2082sin": 161, "\u2082sin\u03b8\u2082": 86, "\u2082\u00b2": 161, "\u2082\u1d48": [97, 103, 204], "\u2082\u2080": 317, "\u2083": 36, "\u2089\u2085": 97, "\u2096": 310, "\u2098": 310, "\u2099": 310, "\u211d": [98, 198, 205, 249, 317], "\u211d_i": 279, "\u211d\u00b2": 249, "\u211d\u00b3": 317, "\u211d\u00b3\u02e3\u00b3": [205, 317], "\u211d\u1d2e\u02e3\u1d40": 250, "\u211d\u1d2e\u02e3\u1d40\u02e3\u2076": 250, "\u211d\u1d40": 250, "\u211d\u1d50\u02e3\u1d3a": 84, "\u211d\u2074": [76, 249], "\u211d\u2075": [76, 249], "\u211d\u2076": [76, 98, 201, 202, 205, 249, 317], "\u211d\u207f": [97, 119, 202], "\u211d\u207f\u02e3": 84, "\u211d\u207f\u02e3\u1d50": 84, "\u211d\u207f\u02e3\u207f": 84, "\u2139": 115, "\u2c7c": 310, "\ud835\udc9e": 317, "\ud835\udcaa": 317}, "titles": ["Academic Integrity Statement <strong>Status:</strong> To be completed in Phase B (Citation System Implementation)", "Changelog All notable changes to the ResearchPlan validation system will be documented in this file. The format is based on Keep a Changelog,", "Citations &amp; Academic Attribution <strong>Project:</strong> Double Inverted Pendulum - Sliding Mode Control with PSO Optimization", "Academic Theory Citations &amp; References <strong>Project:</strong> Double Inverted Pendulum - Sliding Mode Control with PSO Optimization", "Citation System Documentation <strong>Status:</strong> To be completed in Phase B (Citation System Implementation)", "Contributing \u2013 ResearchPlanSpec Validation", "Controller Factory Documentation &gt; <strong>Note:</strong> This document has been consolidated into the Factory System Guide. ## Quick Links - <strong><span class=\"xref myst\">Factory System Guide</span></strong> - Complete controller factory documentation", "Documentation Cross-Reference Audit Report <strong>Report Date:</strong> 2025-10-07", "Software Dependencies &amp; Citations <strong>Project:</strong> Double Inverted Pendulum - Sliding Mode Control with PSO Optimization", "Documentation Coverage Matrix", "Documentation Coverage Implementation Plan", "DIP-SMC-PSO Documentation Inventory Summary", "Documentation Style Guide", "\ud83d\udcda World-Class Documentation System for DIP_SMC_PSO ## \ud83c\udf1f Overview This repository now features a <strong>world-class technical documentation system</strong> designed for research-grade publications. The system provides LaTeX-quality mathematical rendering, professional citation management, and cross-referencing features. ## \u2728 Features ### \ud83d\udd2c Research-Grade Mathematics", "Documentation Code Example Validation Report <strong>Report Date:</strong> 2025-10-07", "License Compliance &amp; Attribution <strong>Project:</strong> Double Inverted Pendulum - Sliding Mode Control with PSO Optimization", "Sphinx Documentation Implementation Package ## \ud83d\udcc1 Package Contents for ChatGPT Review This package contains the complete implementation of production-grade Sphinx documentation with GitHub CI/CD based on expert recommendations. ### \ud83d\ude80 Core Implementation Files #### GitHub Workflows (Enhanced CI/CD)", "Software Design Patterns &amp; Architecture Attribution <strong>Project:</strong> Double Inverted Pendulum - Sliding Mode Control with PSO Optimization", "Plant Configuration Guide", "PSO Documentation Validation Report", "PSO Integration Guide", "Quick Start: Issue #12 Validation", "Optimal Sliding Mode Control for a Double-Inverted Pendulum via PSO ", "Release Checklist Use this checklist when preparing a new release of the ResearchPlan validation system. ## Pre-Release ### Code &amp; Documentation", "Sphinx Documentation - 100% Warning Elimination Complete", "Sphinx Phase 10 Completion Report", "Sphinx Phase 11 Completion Report", "Phase 2 Completion Report: Live Python Code Execution", "Phase 3 Completion Report: Plotly Interactive Charts", "Phase 4: Jupyter Notebooks Integration - Completion Report", "Phase 5 Completion Report: Mathematical Visualization Library", "Phase 6 Completion Report: Progressive Web App (PWA)", "Sphinx Documentation Phase 8 - Final Summary", "Sphinx Documentation Phase 9 - Final Progress Report", "Testing Guide", "Advanced Numerical Stability Guide <strong>guide to numerical stability, robustness, and error mitigation in the DIP-SMC-PSO framework.</strong>", "Complete SMC Controller Comparison Matrix", "Technical Coverage Analysis &amp; Implementation Guide", "<strong>Controller Factory Integration Analysis Report</strong>", "Coverage Analysis Methodology Framework", "Hybrid SMC Runtime Fix - Complete Technical Documentation", "Controller Memory Patterns - Best Practices", "Analysis &amp; Technical Reports", "PSO Convergence Analysis - Issue #12", "NumPy Copy Pattern Optimization: View Conversion Guide <strong>Issue</strong>: #16 - NumPy copy pattern analysis and optimization", "5. Analysis &amp; Verification Plan ## \ud83d\udd27 <strong>Recent Testing Infrastructure Improvements</strong> (September 2024) ### <strong>Vector Simulation Engine Robustness</strong> The vector simulation engine (<code class=\"docutils literal notranslate\"><span class=\"pre\">src/simulation/engines/vector_sim.py</span></code>) has been enhanced with edge case handling and improved reliability: #### <strong>\u2705 Fixes Applied</strong> 1. <strong>Scalar Control Input Support</strong> - <strong>Issue</strong>: <code class=\"docutils literal notranslate\"><span class=\"pre\">IndexError</span></code> when control input was 0-dimensional scalar - <strong>Fix</strong>: Added proper scalar handling with <code class=\"docutils literal notranslate\"><span class=\"pre\">.item()</span></code> extraction for 0D arrays - <strong>Benefit</strong>: Supports simplified test scenarios and edge cases 2. <strong>Flexible Control Sequence Length</strong> - <strong>Issue</strong>: Crashes when simulation horizon exceeded control input sequence length - <strong>Fix</strong>: Implemented graceful bounds checking with <code class=\"docutils literal notranslate\"><span class=\"pre\">min(i,</span> <span class=\"pre\">length-1)</span></code> indexing strategy - <strong>Benefit</strong>: Uses last available control input when sequence is exhausted 3. <strong>Empty State Array Handling</strong> - <strong>Issue</strong>: Tests expected exceptions for empty arrays, but function handled them gracefully - <strong>Fix</strong>: Updated test expectations to match actual behavior (returns <code class=\"docutils literal notranslate\"><span class=\"pre\">(1,</span> <span class=\"pre\">0)</span></code> shaped array) - <strong>Benefit</strong>: Consistent behavior for degenerate cases 4. <strong>Mock Function Accuracy</strong> - <strong>Issue</strong>: Test mocks didn\u2019t reflect actual physics-based state evolution - <strong>Fix</strong>: Updated mock dynamics to properly simulate <code class=\"docutils literal notranslate\"><span class=\"pre\">state</span> <span class=\"pre\">+</span> <span class=\"pre\">dt</span> <span class=\"pre\">*</span> <span class=\"pre\">state_derivative</span></code> evolution - <strong>Benefit</strong>: Tests now validate realistic controller-plant interactions #### <strong>\u2705 Test Coverage Improvements</strong> <strong>Vector Simulation Test Suite</strong>: Now <strong>100% passing</strong> (20/21 tests pass, 1 skipped)", "Configuration Schema Reference <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain configuration schema documentation including: ## Planned Content ### YAML Configuration Structure", "Controller API Reference &gt; <strong>Note:</strong> Controller API documentation has been consolidated into references. ## Quick Links - <strong><span class=\"xref myst\">Factory System API</span></strong> - Complete factory and controller creation API", "Controller Theory Reference <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain controller theory documentation including: ## Planned Content ### Sliding Mode Control Theory", "Factory Methods API Reference ## Overview This document provides API reference documentation for the Enterprise Controller Factory system. The factory provides thread-safe, type-safe controller instantiation with deep PSO integration and robust error handling. ## Table of Contents 1. <span class=\"xref myst\">Core Factory Functions</span>", "Factory API Reference ## Controller Factory System - GitHub Issue #6 Implementation ### Overview The Controller Factory System provides a unified, type-safe interface for creating and managing sliding mode control (SMC) controllers in the DIP-SMC-PSO project. This system implements the factory pattern to ensure consistent controller instantiation, parameter validation, and optimization integration. ### Architecture #### Core Components 1. <strong>Main Factory</strong> (<code class=\"docutils literal notranslate\"><span class=\"pre\">src/controllers/factory.py</span></code>) - Central controller registry and creation interface - Thread-safe operations with RLock protection - error handling and validation - Legacy compatibility support 2. <strong>SMC Factory</strong> (<code class=\"docutils literal notranslate\"><span class=\"pre\">src/controllers/factory/smc_factory.py</span></code>) - Specialized factory for SMC controllers - PSO optimization integration - Type-safe parameter handling 3. <strong>Legacy Factory</strong> (<code class=\"docutils literal notranslate\"><span class=\"pre\">src/controllers/factory/legacy_factory.py</span></code>) - Backward compatibility interface - Deprecation handling and migration support ### Supported Controllers | Controller Type | Class | Gains | Description |", "Factory System API Reference <strong>Module:</strong> <code class=\"docutils literal notranslate\"><span class=\"pre\">src.controllers.factory</span></code>", "API Reference Documentation", "Optimization Module API Reference <strong>Project:</strong> Double-Inverted Pendulum SMC Control System", "Performance Benchmarks Reference <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain performance benchmarking documentation including: ## Planned Content ### Benchmark Methodology", "Phase 4.1 Controller API Documentation Completion Report <strong>Date:</strong> 2025-10-07", "Phase 4.2 Completion Report: Factory System API Documentation <strong>Project:</strong> Double-Inverted Pendulum SMC Control System", "Phase 4.3 Completion Report: Optimization Module API Documentation <strong>Project:</strong> Double-Inverted Pendulum SMC Control System", "Phase 4.3 Progress Report: Optimization Module API Documentation <strong>Project:</strong> Double-Inverted Pendulum SMC Control System", "Phase 4.4 Completion Report: Simulation Engine API Documentation <strong>Project:</strong> Double-Inverted Pendulum SMC Control System", "PSO Optimization Guide <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain PSO optimization documentation including: ## Planned Content ### PSO Algorithm Fundamentals", "Simulation Engine API Reference <strong>Project:</strong> Double-Inverted Pendulum SMC Control System", "3. System Architecture", "Controller System Architecture Documentation <strong>Date</strong>: 2025-09-29", "System Architecture Control Room", "Controller Performance Benchmarks with Statistical Analysis <strong>Project:</strong> Double-Inverted Pendulum Sliding Mode Control", "Performance Benchmarks", "Phase 3.2 Completion Report: Controller Performance Benchmarks <strong>Project:</strong> Double-Inverted Pendulum Sliding Mode Control", "Benchmarks &amp; Methodology This project includes benchmarking features for statistical analysis and performance comparison of sliding mode controllers. The benchmarking system provides standardized evaluation protocols and robust statistical metrics. ## Overview The benchmarking framework evaluates controllers across multiple dimensions: - <strong>Performance metrics</strong>: ISE, ITAE, RMS control effort, overshoot, constraint violations", "Bibliography &amp; Academic References", "Automated Git Backup System", "CODE BEAUTIFICATION SPECIALIST: Assessment Report <strong>Agent</strong>: Code Beautification &amp; Directory Organization Specialist", "Configuration Integration Documentation ## Overview This document provides guidance on integrating the configuration system with the Enterprise Controller Factory. The DIP SMC-PSO project features a sophisticated configuration architecture that supports multiple sources, type safety, validation, and integration with controller creation workflows. ## Table of Contents 1. <span class=\"xref myst\">Configuration Architecture</span>", "Configuration Schema Validation Documentation", "2. Application Context", "Control Law Testing Standards", "Controller-PSO Interface API Documentation", "Adaptive Sliding Mode Control Technical Guide", "Classical Sliding Mode Control Technical Guide", "Control Primitives Reference <strong>Double-Inverted Pendulum Sliding Mode Control</strong>", "SMC Controller Factory System Guide <strong>Double-Inverted Pendulum Sliding Mode Control</strong>", "Hybrid Adaptive Super-Twisting SMC Technical Guide", "Controllers Module Documentation", "Control Systems Documentation (Legacy)", "Model Predictive Control Technical Guide", "Super-Twisting Sliding Mode Control Technical Guide", "Swing-Up SMC Technical Guide", "Coverage Analysis &amp; Quality Gates This document describes the coverage analysis system and quality gates implementation for the DIP-SMC-PSO project. ## Current Coverage Status <strong>Overall Coverage</strong>: 25.9% \u279c <strong>Target</strong>: 85%", "Coverage Analysis Methodology Framework", "\ud83d\ude80 Sphinx Documentation System - Deployment Guide ## \u2705 System Successfully Deployed! Your production-grade Sphinx documentation system is now <strong>ready for use</strong>. All expert recommendations have been implemented and the system has been committed to your repository. ## \ud83d\udccb Next Steps for Activation ### 1. GitHub Repository Settings To activate the documentation system, configure these GitHub settings: #### <strong>GitHub Pages:</strong>", "Streamlit Deployment Guide", "Docker Deployment Guide", "Production Deployment Guide <strong>Date</strong>: 2025-09-29", "Deployment Validation Checklists and Quality Gates", "Documentation Quality Gates", "Documentation Structure &amp; Site Map", "Examples", "Mathematical Notation Standards for DIP-SMC-PSO Documentation", "Factory Integration Documentation Suite", "Configuration Migration Mathematical Foundations", "Factory Configuration Reference ## Overview The SMC Controller Factory system provides a unified, type-safe interface for creating sliding mode controllers with parameter validation, deprecation management, and PSO optimization integration. This reference documents the factory configuration system implemented to resolve GitHub Issue #6. ## Factory Architecture ### Core Components ```", "Controller Integration Guide ## Overview This guide provides instructions for integrating SMC controllers with the factory system, plant models, and PSO optimization workflows. It covers the enhanced integration patterns implemented to resolve GitHub Issue #6 factory integration challenges. ## Factory-Controller Integration Architecture ### Controller Lifecycle Management ```", "Deprecation Management System ## Overview The SMC Controller Factory includes a deprecation management system designed to handle configuration changes, parameter renames, and interface modifications while maintaining backward compatibility. This system provides systematic deprecation warnings, migration paths, and graceful degradation mechanisms to support smooth evolution of the codebase. ## Deprecation Architecture ### Deprecation Severity Levels ```python", "Enhanced Factory API Reference", "Enhanced PSO Integration Guide", "Factory API Reference", "Factory Integration User Guide", "GitHub Issue #6 Factory Integration Documentation", "Migration Guide for Existing Configurations ## Overview This migration guide helps users transition from older controller factory configurations to the enhanced GitHub Issue #6 resolution implementation. The guide covers automated migration tools, manual migration procedures, and best practices for maintaining system stability during transitions. ## Migration Overview ### What Changed in GitHub Issue #6 Resolution The factory integration fixes address several critical areas: 1. <strong>Parameter Interface Unification</strong>: Standardized parameter handling across all SMC controller types", "Parameter Interface Specification ## Overview This document provides a specification of the parameter interface system implemented in the SMC Controller Factory. The interface resolves the gamma vs gains parameter conflicts and establishes clear parameter handling contracts across all controller types. ## Parameter Resolution Architecture ### Hierarchical Parameter Sources The factory implements a multi-level parameter resolution system: ```", "Factory Performance Benchmarks <strong>Note:</strong> Factory performance metrics are documented in the main benchmarks section. <strong>See:</strong> <span class=\"xref myst\">Controller Performance Benchmarks</span>", "Production Deployment Guide", "PSO Factory Integration API Reference", "PSO Integration Workflow and Best Practices ## Overview This document provides guidance for integrating the SMC Controller Factory with Particle Swarm Optimization (PSO) workflows. The integration enables automated controller parameter tuning while maintaining factory validation, thread safety, and performance requirements. ## PSO Integration Architecture ### High-Level PSO-Factory Integration Flow ```", "Testing and Validation Documentation ## Overview This document provides testing and validation strategies for the SMC Controller Factory system. The testing framework ensures robust operation, factory integration quality, and performance validation to support the GitHub Issue #6 resolution with 95%+ test coverage and enterprise-grade quality assurance. ## Testing Architecture ### Multi-Level Testing Strategy ```", "Factory Troubleshooting and Diagnostics Guide", "Factory Integration System Documentation ## Overview The Double-Inverted Pendulum (DIP) SMC-PSO project implements a factory integration system that provides robust, thread-safe controller instantiation with deep PSO optimization integration. This documentation covers the architecture, implementation patterns, and usage guidelines for the factory system that resolves GitHub issue #6. ## Table of Contents 1. <span class=\"xref myst\">Architecture Overview</span>", "Factory Integration Troubleshooting Guide ## Overview This troubleshooting guide addresses common issues encountered when using the Enterprise Controller Factory system in the DIP SMC-PSO project. The guide provides systematic diagnostic procedures, root cause analysis, and proven approaches for factory integration problems. ## Table of Contents 1. <span class=\"xref myst\">Quick Diagnosis</span>", "Fault Detection &amp; Isolation (FDI) Guide ## Overview The DIP_SMC_PSO system includes a Fault Detection and Isolation (FDI) module that monitors system health in real-time. The FDI system compares model predictions with actual measurements to detect deviations that may indicate component failures, sensor faults, or unexpected disturbances. ## Architecture The FDI system uses a <strong>model-based residual approach</strong>: ```", "Fault Detection and Isolation (FDI) System - Technical Documentation ## Table of Contents 1. <span class=\"xref myst\">Mathematical Foundations</span>", "FDI Threshold Calibration Methodology <strong>Issue</strong>: #18 - FDI Threshold Too Sensitive - False Positives", "Reviewer Documentation Package <strong>Project:</strong> Double Inverted Pendulum - Sliding Mode Control with PSO Optimization", "Citation FAQ <strong>For Reviewers:</strong> Frequently asked questions about citation system and academic integrity <strong>Last Updated:</strong> 2025-10-09", "Citation Quick Reference <strong>For Reviewers:</strong> Fast access to citation information and most-cited sources <strong>Last Updated:</strong> 2025-10-09", "Reproduction Guide", "Theorem Verification Guide", "Verification Checklist", "User Guides &amp; Tutorials", "Quick Reference Guide Essential commands, patterns, and workflows for the DIP SMC PSO framework.", "User Guides &amp; Tutorials Welcome to the DIP SMC PSO framework documentation! This guide covers help you navigate the documentation and find what you need.", "API Reference Guides <strong>Type:</strong> Technical Reference with Examples", "Configuration API Guide", "Controllers API Guide", "Optimization API Guide", "Plant Models API Guide", "Simulation API Guide", "Utilities API Guide", "Features Documentation", "Phase 6 Completion Summary:", "Changelog - Collapsible Code Blocks Feature", "Configuration Reference", "Collapsible Code Blocks - Integration Guide", "Maintenance Guide - Collapsible Code Blocks", "Technical Reference - Collapsible Code Blocks", "Troubleshooting Guide - Collapsible Code Blocks", "Collapsible Code Blocks - User Guide", "Getting Started", "Getting Started Guide Validation Report <strong>Phase 5.1: Getting Started Guide Validation</strong>", "How-To: Optimization Workflows <strong>Type:</strong> Task-Oriented Guide", "How-To: Result Analysis", "How-To: Running Simulations <strong>Type:</strong> Task-Oriented Guide", "How-To: Testing &amp; Validation <strong>Type:</strong> Task-Oriented Guide", "3D Interactive Pendulum Visualization", "Interactive Features", "Jupyter Notebooks Integration", "Live Python Code Execution", "Mathematical Visualizations Demo", "Interactive Plotly Charts Demo", "Interactive Configuration Guide", "Interactive Visualizations Guide", "Theory &amp; Explanation", "Double-Inverted Pendulum Dynamics", "PSO Algorithm Theory", "Sliding Mode Control Theory", "Tutorial 01: Your First Simulation <strong>Level:</strong> Beginner", "Tutorial 01 Validation Report <strong>Phase 5.2: Tutorial 01 (\u201cYour First Simulation\u201d) Validation</strong>", "Tutorial 02: Controller Comparison &amp; Selection <strong>Level:</strong> Intermediate", "Tutorial 03: PSO Optimization for Controller Tuning <strong>Level:</strong> Intermediate to Advanced", "Tutorial 04: Custom Controller Development <strong>Level:</strong> Advanced", "Tutorial 05: End-to-End Research Workflow <strong>Level:</strong> Advanced", "User Guide: DIP SMC PSO Framework", "Batch Simulation Workflow Guide", "Custom Cost Functions for PSO Optimization <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain guidance on designing custom cost functions for PSO-based controller parameter optimization. ## Planned Content ### Cost Function Design Principles", "HIL Disaster Recovery <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain disaster recovery procedures for Hardware-in-the-Loop production systems. ## Planned Content ### Disaster Scenarios", "Multi-Machine HIL Setup <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain guidance on distributed Hardware-in-the-Loop architectures with multiple machines. ## Planned Content ### Architecture Patterns", "HIL Production Deployment Checklist <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain a pre-deployment checklist for production HIL systems. ## Planned Content ### Pre-Deployment Validation", "HIL Safety Validation <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain safety validation procedures for Hardware-in-the-Loop controller deployment. ## Planned Content ### Safety Validation Framework", "HIL (Hardware-in-the-Loop) Workflow Guide", "Monte Carlo Validation Quick Start Guide", "PSO Optimization for Adaptive SMC <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain guidance on optimizing Adaptive Sliding Mode Controller parameters using Particle Swarm Optimization. ## Planned Content ### Adaptive SMC Parameter Space", "Controller Optimization for HIL <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain guidance on optimizing controller parameters for Hardware-in-the-Loop (HIL) deployment using PSO. ## Planned Content ### HIL-Specific Optimization Considerations", "PSO Optimization for Hybrid Adaptive STA-SMC <strong>Status:</strong> \ud83d\udea7 Under Construction This document will contain guidance on optimizing Hybrid Adaptive Super-Twisting SMC parameters using Particle Swarm Optimization. ## Planned Content ### Hybrid Adaptive STA-SMC Parameter Space", "PSO Optimization Workflow Guide", "PSO Optimization Guide: Super-Twisting SMC", "PSO vs Grid Search Comparison <strong>Status:</strong> \ud83d\udea7 Under Construction This document will provide a comparison between Particle Swarm Optimization and traditional grid search methods for controller parameter tuning. ## Planned Content ### Methodology Comparison", "Hardware-in-the-Loop (HIL) Quickstart Guide", "Testing and Benchmarks", "Citation System Implementation Plan ## Overview Implementation of a citation and bibliography system for the DIP_SMC_PSO documentation, based on ChatGPT\u2019s analysis and the existing strategy in CLAUDE.md. ## Source Analysis <strong>Analyzed ChatGPT Implementation:</strong>", "Advanced Sphinx Documentation System - Implementation Report ## Executive Summary I have successfully implemented <strong>all 6 expert recommendations</strong> from ChatGPT\u2019s technical review, resulting in a production-grade Sphinx documentation system with CI/CD automation, enhanced security, and robust quality gates. ## \u2705 All Expert Recommendations Implemented ### 1. \u2705 Workflow Efficiency (PR-fast vs nightly-complete)", "DIP SMC PSO Documentation", "\ud83d\udd35 ULTIMATE ORCHESTRATOR - GitHub Issue #9 Strategic Resolution Plan <strong>Mission</strong>: Strategic coordination for GitHub Issue #9 - Coverage Analysis &amp; Quality Gates Resolution", "Mathematical Algorithm Validation Documentation", "SMC Mathematical Foundations Documentation This directory contains mathematical documentation for all SMC algorithm fixes and validation methodology implemented for GitHub Issue #5. ## \ud83d\udccb Documentation Overview This mathematical foundation documentation provides: - <strong>Complete mathematical theory</strong> behind all SMC algorithm implementations", "Advanced Algorithms Guide <strong>Technical Reference for Optimization, Numerical Stability, and Algorithm Comparison</strong>", "SMC Algorithm Fixes and Mathematical Validation Summary This document provides a summary of all mathematical algorithm fixes, validation improvements, and corrected implementations in the SMC controller system for GitHub Issue #5. ## 1. Executive Summary The SMC mathematical foundation has been completely restructured and validated with the following major improvements: - <strong>Boundary Layer Mathematics</strong>: Corrected chattering reduction theory and implementation", "Boundary Layer Mathematical Derivations", "ClassicalSMCConfig Parameters and Validation Rules This document provides specification of the <code class=\"docutils literal notranslate\"><span class=\"pre\">ClassicalSMCConfig</span></code> parameters, their mathematical foundations, validation rules, and edge case handling. ## 1. Configuration Schema Overview The <code class=\"docutils literal notranslate\"><span class=\"pre\">ClassicalSMCConfig</span></code> dataclass provides type-safe, validated configuration for Classical Sliding Mode Control with the following parameter categories: - <strong>Control Parameters</strong>: Core SMC gains and timing", "SMC Controller Comparison Theory", "Double Inverted Pendulum Dynamics: Complete Derivation", "Mathematical Foundations", "Numerical Integration Methods: Theory and Analysis", "Optimization Landscape Analysis for Controller Gain Tuning", "Particle Swarm Optimization: Mathematical Theory <strong>Module:</strong> Optimization", "Simulation Architecture Guide", "Sliding Surface Mathematical Properties and Stability Analysis", "Complete Sliding Mode Control Mathematical Theory", "SMC Mathematical Theory Documentation", "Mathematical Test Validation Methodology This document describes the methodology for validating mathematical properties and algorithm correctness in the SMC controller implementations. ## 1. Overview The test validation methodology ensures that all mathematical algorithms and fixes in the SMC system are rigorously validated through: - <strong>Property-based testing</strong>: Verification of mathematical properties", "Validation Framework Guide <strong>System Reliability Foundation: Robust Parameter Validation &amp; Scientific Verification</strong>", "Mathematical Validation Procedures for Control Systems ## Executive Summary This document establishes mathematical validation procedures for the double-inverted pendulum sliding mode control (DIP-SMC) project, ensuring theoretical soundness and implementation correctness through rigorous mathematical property verification. The procedures integrate control theory, optimization theory, and numerical analysis validation with automated testing frameworks. <strong>Core Mathematical Domains:</strong>", "Controller Memory Management Patterns (Issue #15 Resolution) <strong>Date:</strong> 2025-10-01", "Controller Memory Management Quick Reference", "Numerical Stability Operations Reference", "Numerical Stability Guide <strong>Version</strong>: 1.2.0 | <strong>Last Updated</strong>: 2025-10-01 ## Overview This guide documents the adaptive matrix regularization system implemented in the double-inverted pendulum control framework. The system provides robust numerical stability for matrix operations in plant dynamics, controllers, and optimization algorithms.", "PSO Optimization Documentation (Legacy)", "PSO Core Algorithm: Implementation Guide <strong>Module:</strong> Optimization", "Optimization &amp; Simulation Guide", "Optimization &amp; Simulation Documentation <strong>PSO Optimization and Simulation Infrastructure</strong>", "ULTIMATE ORCHESTRATOR EXECUTIVE DEPLOYMENT SUMMARY", "Plant Models Documentation <strong>Double Inverted Pendulum Dynamics Models</strong>", "Plant Models Guide", "1.x Plant Model", "Abstract This project presents a holistic software framework for the automated design and validation of robust nonlinear controllers. By synergizing sliding mode control (SMC) with particle swarm optimization (PSO), the framework delivers a toolchain to solve the canonical double inverted pendulum problem. It integrates multiple controller architectures, a dual\u2011model simulation environment, an interactive command\u2011line interface and a web\u2011based dashboard, a lightweight fault detection module and networked hardware\u2011in\u2011the\u2011loop testing. Together, these components bridge the gap between theoretical controller design and practical deployment, illustrating a generalizable methodology for the robust control of complex nonlinear systems.", "1 Problem Statement &amp; Objectives", "Previous Work Before the Project", "<strong>A Technical Report on the Modeling and Configuration of a Cart\u2011Based Double Inverted Pendulum System</strong> ### <strong>Introduction</strong> #### <strong>Purpose and Scope</strong> This report provides a theoretical and practical foundation for modelling and controlling a cart\u2011based double inverted pendulum (DIP) system<aside class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<span class=\"docutils literal\">D:\\Projects\\main\\docs\\presentation/3-System Modling.md</span>, line 1)</p>\n<p>Unknown interpreted text role \u201ccite\u201d. [myst.role_unknown]</p>\n</aside>\n. The goal is to deliver a self\u2011contained guide for control systems engineers working with Python\u2011based simulations<aside class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<span class=\"docutils literal\">D:\\Projects\\main\\docs\\presentation/3-System Modling.md</span>, line 1)</p>\n<p>Unknown interpreted text role \u201ccite\u201d. [myst.role_unknown]</p>\n</aside>\n. The document derives the nonlinear equations of motion from first principles, enumerates all required physical, simulation and controller parameters, and proposes a formal configuration schema. Where appropriate, the report cross\u2011references the accompanying project files (particularly the high\u2011fidelity implementation in <code class=\"docutils literal notranslate\"><span class=\"pre\">src/core/dynamics.py</span></code> and the configuration file <code class=\"docutils literal notranslate\"><span class=\"pre\">config.yaml</span></code>) to ensure applicability to real simulation code <code class=\"docutils literal notranslate\"><span class=\"pre\">DIP_SMC_PSO/src/core/dynamics.py</span></code> <code class=\"docutils literal notranslate\"><span class=\"pre\">DIP_SMC_PSO/config.yaml</span></code>. #### <strong>The Double Inverted Pendulum as a Benchmark Problem</strong> A double inverted pendulum consists of two pendulums attached in series to a cart. The second pendulum is attached to the end of the first, so the system has three degrees of freedom: the cart position and the two pendulum angles. Only one actuator applies a horizontal force to the cart, making the system underactuated; there is one control input for three state variables. Control of such a system is challenging because it is inherently unstable and will fall over unless stabilised <aside class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<span class=\"docutils literal\">D:\\Projects\\main\\docs\\presentation/3-System Modling.md</span>, line 1)</p>\n<p>Unknown interpreted text role \u201ccite\u201d. [myst.role_unknown]</p>\n</aside>\n. Classical control literature emphasises that the DIPC\u2019s single actuator must regulate three degrees of freedom, making the system underactuated<aside class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<span class=\"docutils literal\">D:\\Projects\\main\\docs\\presentation/3-System Modling.md</span>, line 1)</p>\n<p>Unknown interpreted text role \u201ccite\u201d. [myst.role_unknown]</p>\n</aside>\n. The double inverted pendulum also exhibits chaotic dynamics. The motion is governed by coupled ordinary differential equations that display strong sensitivity to initial conditions<aside class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<span class=\"docutils literal\">D:\\Projects\\main\\docs\\presentation/3-System Modling.md</span>, line 1)</p>\n<p>Unknown interpreted text role \u201ccite\u201d. [myst.role_unknown]</p>\n</aside>\n. Small changes in starting state can lead to vastly different trajectories, so an accurate nonlinear model is essential for control design. These properties make the DIP a popular benchmark for advanced control strategies, including sliding\u2011mode control, optimal control and reinforcement learning. #### <strong>Methodology</strong> The dynamic model is derived using Lagrangian mechanics, an energy\u2011based formulation widely used for open\u2011chain robots and underactuated systems <aside class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<span class=\"docutils literal\">D:\\Projects\\main\\docs\\presentation/3-System Modling.md</span>, line 1)</p>\n<p>Unknown interpreted text role \u201ccite\u201d. [myst.role_unknown]</p>\n</aside>\n. In this approach the kinetic and potential energies of each component are computed and combined to form the Lagrangian L=T\u2212VL = T - V. The Euler\u2013Lagrange equations are then applied to obtain the equations of motion (EOM). For the double inverted pendulum, the Lagrangian is the difference between the sum of kinetic energies and the sum of gravitational potentials <aside class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<span class=\"docutils literal\">D:\\Projects\\main\\docs\\presentation/3-System Modling.md</span>, line 1)</p>\n<p>Unknown interpreted text role \u201ccite\u201d. [myst.role_unknown]</p>\n</aside>\n. The resulting nonlinear second\u2011order differential equations are transformed into a state\u2011space form suitable for control design. The derived model is validated by comparing with the high\u2011fidelity implementation in the accompanying Python project (<code class=\"docutils literal notranslate\"><span class=\"pre\">DoubleInvertedPendulum</span></code> class), ensuring that parameter names and units match those in <code class=\"docutils literal notranslate\"><span class=\"pre\">config.yaml</span></code>. \u2014\u2014 ## <strong>Section 1: System Dynamics and Mathematical Modeling</strong> ### <strong>1.1 System Definition, Assumptions, and Nomenclature</strong> #### <strong>System Diagram</strong> The double inverted pendulum on a cart comprises a cart of mass mcm_{c} that translates horizontally on a track. Two rigid pendulum links are attached in series; the first link (mass m1m_{1}, length l1l_{1}) is pinned to the cart and the second link (mass m2m_{2}, length l2l_{2}) is attached to the end of the first. The centres of mass of the links are located at distances lc1l_{c1} and lc2l_{c2} from their respective pivots. Angles \u03b81\\theta_{1} and \u03b82\\theta_{2} are measured from the upward vertical, and the horizontal displacement of the cart is xx. Gravity acts downward with acceleration gg. A horizontal force uu applied to the cart constitutes the single control input. A schematic of the system is shown in Figure 1<aside class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<span class=\"docutils literal\">D:\\Projects\\main\\docs\\presentation/3-System Modling.md</span>, line 1)</p>\n<p>Unknown interpreted text role \u201ccite\u201d. [myst.role_unknown]</p>\n</aside>\n.  #### <strong>Model Assumptions</strong> 1. <strong>Rigid links.</strong> Each pendulum link is treated as a rigid body with constant mass and moment of inertia. There is no flexural deformation<aside class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<span class=\"docutils literal\">D:\\Projects\\main\\docs\\presentation/3-System Modling.md</span>, line 1)</p>\n<p>Unknown interpreted text role \u201ccite\u201d. [myst.role_unknown]</p>\n</aside>\n.", "Sliding Mode Control for a Double\u2011Inverted Pendulum: Bridging Theory and Implementation", "5 Chattering &amp; Mitigation", "<strong>Simulation Analysis and Enhancements for the Double Inverted Pendulum Control System</strong> ## 1\u00a0Introduction and Background The double\u2011inverted pendulum (DIP) consists of two slender rigid links mounted on a cart that can move along a horizontal rail. Each link is hinged at its base and is inherently unstable in the upright position, so even small disturbances will cause it to fall. The control objective is to keep the cart at a desired position (usually the origin) while balancing both pendulums upright. The project implements a <strong>classical sliding\u2011mode controller (SMC)</strong>, a robust control strategy that forces the system state onto a user\u2011defined switching surface and maintains it there despite matched uncertainties and disturbances[1]. The controller defines a <strong>sliding surface</strong> \\sigma = \\lambda_{1}\\theta_{1} + \\lambda_{2}\\theta_{2} + k_{1}{\\dot{\\theta}}<em>{1} + k</em>{2}{\\dot{\\theta}}<em>{2} where $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\theta_{1}</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\theta_{2}</span></code>$ are the pendulum angles and $<code class=\"docutils literal notranslate\"><span class=\"pre\">{\\dot{\\theta}}_{1}</span></code>$, $<code class=\"docutils literal notranslate\"><span class=\"pre\">{\\dot{\\theta}}_{2}</span></code>$ are their rates. When $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\sigma</span> <span class=\"pre\">=</span> <span class=\"pre\">0</span></code>$ the system behaves like a reduced\u2011order linear system that drives the pendulum angles and velocities to zero. As in standard SMC design the control law combines an <strong>equivalent control</strong> term (obtained by canceling the nominal dynamics) and a <strong>robust control</strong> term that forces the system to reach and stay on the sliding surface[1]: \\ u = u_{\\mathrm{eq}} - K\\mathrm{sat}\\Bigl(\\tfrac{\\sigma}{\\epsilon}\\Bigr) - k_{\\mathrm{d}}\\sigma \\ Here $<code class=\"docutils literal notranslate\"><span class=\"pre\">sat(</span> <span class=\"pre\">\\cdot</span> <span class=\"pre\">)</span></code>$ is a continuous approximation of the discontinuous $<code class=\"docutils literal notranslate\"><span class=\"pre\">sign</span></code>$ function. Classical SMC uses a discontinuous $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\mathrm{sign}(\\sigma)</span></code>$ which produces high\u2011frequency chattering. A common remedy is to introduce a boundary layer and replace $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\mathrm{sign}(\\sigma)</span></code>$ with a smooth saturation function such as the hyperbolic tangent[2]. In the provided code the <code class=\"docutils literal notranslate\"><span class=\"pre\">saturate</span></code> utility chooses between a hyperbolic tangent and a linear saturation: def saturate(sigma: float | ndarray, epsilon: float, method: str = \u201ctanh\u201d): # Continuous approximation of sign(sigma) within a boundary layer s = np.asarray(sigma, dtype=float) / epsilon if method == \u201ctanh\u201d: return np.tanh(s) elif method == \u201clinear\u201d: return np.clip(s, -1.0, 1.0) The parameter $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span> <span class=\"pre\">&gt;</span> <span class=\"pre\">0</span></code>$ defines a <strong>boundary layer</strong> that mitigates chattering by smoothing the switching action[2]. As $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span> <span class=\"pre\">\\rightarrow</span> <span class=\"pre\">0</span></code>$ the saturation approximates the discontinuous $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\mathrm{sign}</span></code>$ function, whereas increasing $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span></code>$ yields smoother control at the expense of convergence speed[3]. The baseline controller sets $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span> <span class=\"pre\">=</span> <span class=\"pre\">0.02</span></code>$ and uses the hyperbolic tangent method, consistent with improved power reaching laws that use smooth saturation functions to reduce chattering[2]. ## 2\u00a0Simulation Framework Challenges ### 2.1\u00a0Numerical stiffness from discontinuous control Sliding\u2011mode control uses high\u2011gain feedback and discontinuous switching to force states onto the sliding surface[1]. In practice the boundary layer smooths the discontinuity, but for small $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span></code>$ the right\u2011hand side still exhibits very steep gradients. The dynamics of the DIP combine slow cart motion with fast pendulum oscillations and fast switching in the control law. This results in <strong>stiff differential equations</strong>: the solver must resolve both slow and very fast dynamics simultaneously. Explicit fixed\u2011step integrators (such as Euler or fourth\u2011order Runge\u2013Kutta) cannot safely integrate such systems because large steps lead to oscillations or divergence, whereas very small steps yield high computational cost. Implicit stiff solvers are therefore preferred for systems with multiple time scales[4]. ### 2.2\u00a0Limitations of the fixed\u2013step simulation The original simulation loop employed a fixed time step $<code class=\"docutils literal notranslate\"><span class=\"pre\">dt</span> <span class=\"pre\">=</span> <span class=\"pre\">0.01\\,\\text{s}</span></code>$ and integrated the dynamics using a hand\u2011coded RK4 method in <code class=\"docutils literal notranslate\"><span class=\"pre\">dynamics.DoubleInvertedPendulum.step</span></code>. With the baseline SMC gains the system was highly unstable for anything other than tiny initial angles. Even when the step was reduced to 0.001\u00a0s, the integration frequently diverged because the solver could not adapt to the stiff dynamics near the switching surface. Moreover, because the control law computes a model\u2011based equivalent control <code class=\"docutils literal notranslate\"><span class=\"pre\">u_eq</span></code> by inverting the inertia matrix, numerical singularities or large condition numbers can appear during integration. The controller code detects near\u2011singular matrices and returns zero to preserve stability, but the resulting abrupt change in torque further stiffens the problem. ### 2.3\u00a0Need for adaptive stiff integrators The <strong>SciPy</strong> routine <code class=\"docutils literal notranslate\"><span class=\"pre\">solve_ivp</span></code> provides a suite of adaptive methods that adjust the step size to meet prescribed error tolerances. Explicit methods like <code class=\"docutils literal notranslate\"><span class=\"pre\">RK45</span></code> are efficient for non\u2011stiff systems, while implicit methods such as the <strong>Backward Differentiation Formula (BDF)</strong> or <strong>Radau</strong> are recommended for stiff problems. Implicit BDF methods suffer from an order barrier\u2014orders above five are unstable\u2014whereas Radau IIA schemes are A\u2011stable and L\u2011stable at arbitrary order, providing large stability regions for stiff systems[4][5]. For our system, preliminary experiments showed that <code class=\"docutils literal notranslate\"><span class=\"pre\">RK45</span></code> took extremely small steps and failed to converge, whereas <code class=\"docutils literal notranslate\"><span class=\"pre\">Radau</span></code> handled the stiff sliding dynamics more robustly. A robust simulation loop therefore employs <code class=\"docutils literal notranslate\"><span class=\"pre\">solve_ivp</span></code> with an adaptive stiff integrator: from scipy.integrate import solve_ivp def dip_ode(t, x, controller, dyn): # x = [x, theta1, theta2, xdot, dtheta1, dtheta2] u, <em>, _ = controller.compute_control(x, (), {}) dxdt = dyn.rhs(x, u) return dxdt sol = solve_ivp( lambda t, y: dip_ode(t, y, smc_controller, pendulum), t_span=(0.0, T), y0=x0, method=\u2019Radau\u2019, atol=1e-8, rtol=1e-6, max_step=0.01, ) The solver automatically reduces the step size near steep gradients and increases it when the dynamics slow down, yielding accurate trajectories with fewer function evaluations. ## 3\u00a0Proposed Enhancements and Methodology ### 3.1\u00a0Adaptive integrators and event handling Switching to adaptive stiff solvers addresses the numerical instability observed with fixed\u2011step methods. <strong>Event functions</strong> can be added to <code class=\"docutils literal notranslate\"><span class=\"pre\">solve_ivp</span></code> to halt integration if the pendulum angles exceed safe limits (e.g., $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\left|</span> <span class=\"pre\">\\theta_{i}</span> <span class=\"pre\">\\right|</span> <span class=\"pre\">&gt;</span> <span class=\"pre\">\\pi/2</span></code>$ ). By terminating unstable simulations early we avoid wasting computational effort and can classify initial states as failures. The integrator parameters $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\text{rtol}</span> <span class=\"pre\">=</span> <span class=\"pre\">10^{-</span> <span class=\"pre\">6}</span></code>$ , $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\text{atol}</span> <span class=\"pre\">=</span> <span class=\"pre\">10^{-</span> <span class=\"pre\">8}</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\text{max\\_step}</span> <span class=\"pre\">=</span> <span class=\"pre\">0.01\\,\\text{s}</span></code>$ were found to balance accuracy and speed in the stiff regime. ### 3.2\u00a0Chattering mitigation via boundary layer The discontinuous <code class=\"docutils literal notranslate\"><span class=\"pre\">sign()</span></code> function in the baseline SMC produces high\u2011frequency chatter[1]. Introducing a <strong>boundary layer</strong> smooths the switching term so that the control becomes u</em>{robust} = - K, sat\\left( \\frac{\\sigma}{\\epsilon} \\right) - k</em>{d}\\sigma, where $<code class=\"docutils literal notranslate\"><span class=\"pre\">sat\\left(</span> <span class=\"pre\">\\frac{\\sigma}{\\epsilon}</span> <span class=\"pre\">\\right)</span></code>$ is either $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\tanh(\\sigma/\\epsilon)</span></code>$ or $<code class=\"docutils literal notranslate\"><span class=\"pre\">clip(\\sigma/\\epsilon,</span> <span class=\"pre\">-1,1)</span></code>$. The derivative term $<code class=\"docutils literal notranslate\"><span class=\"pre\">-</span> <span class=\"pre\">k_{d}\\sigma</span></code>$ further damps sliding dynamics. Choosing $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span></code>$ too small leads to chattering; increasing $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span></code>$ reduces chattering but slows convergence[3]. Simulation results show that $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span> <span class=\"pre\">=</span> <span class=\"pre\">0.02</span></code>$ provides a good compromise for the DIP. Adaptive boundary layers can also be implemented to widen $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span></code>$ when $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\sigma</span></code>$ is large and tighten it near the origin, as suggested in improved power\u2011reaching laws for sliding\u2011mode control[2]. ### 3.3\u00a0Filtering noisy measurements In practice sensors introduce noise that can drive the controller and cause chattering. Two complementary filters are proposed: 1. <strong>Moving average filter.</strong> A simple moving average computes the unweighted mean of the last $<code class=\"docutils literal notranslate\"><span class=\"pre\">k</span></code>$ samples. For a sequence $<code class=\"docutils literal notranslate\"><span class=\"pre\">p_{1},p_{2},\\ldots,p_{n}</span></code>$ the mean over the last $<code class=\"docutils literal notranslate\"><span class=\"pre\">k</span></code>$ samples is \u00a0 {SMA}<em>{k} = \\frac{p</em>{n - k + 1} + p_{n - k + 2} + \\cdots + p_{n}}{k} = \\frac{1}{k}\\sum_{i = n - k + 1}^{n}p_{i},, Smoothing filters such as the moving average reduce high\u2011frequency noise by averaging neighbouring points[6]. In functional near\u2011infrared spectroscopy data processing, the moving average filter replaces the value at each point with the average of neighbouring data points, thereby reducing high\u2011frequency fluctuations[7]. Applying an SMA to measured angles smooths high\u2011frequency noise but introduces a delay proportional to $<code class=\"docutils literal notranslate\"><span class=\"pre\">k/2</span></code>$. Choosing $<code class=\"docutils literal notranslate\"><span class=\"pre\">k</span></code>$ between 3 and 7 samples at a <strong>100\u00a0Hz</strong> (10\u00a0ms) sampling rate offers a good compromise between smoothing and latency. 1. <strong>Kalman filter.</strong> The Kalman filter models the system in discrete state\u2013space form $<code class=\"docutils literal notranslate\"><span class=\"pre\">x_{k</span> <span class=\"pre\">+</span> <span class=\"pre\">1}</span> <span class=\"pre\">=</span> <span class=\"pre\">Fx_{k}</span> <span class=\"pre\">+</span> <span class=\"pre\">Bu_{k}</span> <span class=\"pre\">+</span> <span class=\"pre\">w_{k}</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">y_{k}</span> <span class=\"pre\">=</span> <span class=\"pre\">Hx_{k}</span> <span class=\"pre\">+</span> <span class=\"pre\">v_{k}</span></code>$ . It recursively performs a <strong>prediction</strong> and <strong>update</strong> step. The prediction step computes the a\u2011priori state and covariance \u00a0 {\\widehat{x}}<em>{k|k - 1} = F</em>{k}{\\widehat{x}}<em>{k - 1|k - 1} + B</em>{k}u_{k},\\quad P_{k|k - 1} = F_{k}P_{k - 1|k - 1}F_{k}^{\\mathsf{T}} + Q_{k} and the update step incorporates the measurement $<code class=\"docutils literal notranslate\"><span class=\"pre\">z_{k}</span></code>$ using the Kalman gain $<code class=\"docutils literal notranslate\"><span class=\"pre\">K_{k}</span></code>$ K_{k} = P_{k|k - 1}H_{k}^{\\mathsf{T}}S_{k}^{- 1},\\quad{\\widehat{x}}<em>{k|k} = {\\widehat{x}}</em>{k|k - 1} + K_{k}\\left( z_{k} - H_{k}{\\widehat{x}}<em>{k|k - 1} \\right),\\quad P</em>{k|k} = \\left( I - K_{k}H_{k} \\right)P_{k|k - 1}, where $<code class=\"docutils literal notranslate\"><span class=\"pre\">S_{k}</span> <span class=\"pre\">=</span> <span class=\"pre\">H_{k}P_{k|k</span> <span class=\"pre\">-</span> <span class=\"pre\">1}H_{k}^{\\mathsf{T}}</span> <span class=\"pre\">+</span> <span class=\"pre\">R_{k}</span></code>$ is the innovation covariance. Under the assumption that the process and measurement noise are independent, white and Gaussian, the Kalman filter provides an optimal linear estimator[8][9]. It can be interpreted as computing the a\u2011posteriori state estimate as a linear combination of the prediction and the measurement residual, with the Kalman gain weighting how much trust is placed in the measurement[10][11]. The innovation sequence (measurement residual) is the difference between the actual measurement and its prediction and has zero mean with covariance equal to $<code class=\"docutils literal notranslate\"><span class=\"pre\">S_{k}</span></code>$[12]. The magnitude of the Kalman gain reflects the relative confidence in the model and measurements: a large gain corresponds to precise measurements and uncertain predictions, whereas a small gain arises when predictions are more reliable[11]. ### 3.4\u00a0Improved PSO cost function The particle swarm optimisation (PSO) routine tunes the six gains $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\left\\lbrack</span> <span class=\"pre\">k_{1},k_{2},\\lambda_{1},\\lambda_{2},K,k_{d}</span> <span class=\"pre\">\\right\\rbrack</span></code>$ to minimise a cost function. PSO is a population\u2011based metaheuristic inspired by the collective behaviour of bird flocks: each particle (candidate solution) remembers its best previous position and is attracted toward the best position found by the entire swarm. Velocities are updated using cognitive and social weights with random coefficients, and positions are updated accordingly. Because the algorithm does not rely on gradients it can be applied to a wide range of optimisation problems and has spawned numerous variations[13][14]. The cost is computed from the simulated trajectory using weighted integrals: J = w_{e} \\cdot \\frac{1}{N_{e}}\\int_{0}^{T} \\parallel x(t) \\parallel^{2}dt\\mspace{6mu} + w_{u} \\cdot \\frac{1}{N_{u}}\\int_{0}^{T}u(t)^{2}dt\\mspace{6mu} + w_{\\dot{u}} \\cdot \\frac{1}{N_{\\dot{u}}}\\int_{0}^{T}\\dot{u}(t)^{2}dt\\mspace{6mu} + w_{\\sigma} \\cdot \\frac{1}{N_{\\sigma}}\\int_{0}^{T}\\sigma(t)^{2}dt\\mspace{6mu} + w_{stab} \\cdot \\frac{T - t_{fail}}{T} \\cdot P_{penalty}. The first term (state error) penalises deviations of cart position and pendulum angles from zero. The second and third terms penalise large control efforts and large control slews, reflecting actuator limitations. The fourth term penalises large sliding surface values, encouraging the system to converge quickly onto the sliding manifold. The last term applies a penalty if the simulation fails before the full duration, with the penalty proportional to how early the failure occurs. In the provided configuration the weights are $<code class=\"docutils literal notranslate\"><span class=\"pre\">w_{e}</span> <span class=\"pre\">=</span> <span class=\"pre\">50</span></code>$ , $<code class=\"docutils literal notranslate\"><span class=\"pre\">w_{u}</span> <span class=\"pre\">=</span> <span class=\"pre\">0.2</span></code>$ , $<code class=\"docutils literal notranslate\"><span class=\"pre\">w_{\\dot{u}}</span> <span class=\"pre\">=</span> <span class=\"pre\">0.1</span></code>$ , $<code class=\"docutils literal notranslate\"><span class=\"pre\">w_{\\sigma}</span> <span class=\"pre\">=</span> <span class=\"pre\">0.1</span></code>$ and the penalty constant $<code class=\"docutils literal notranslate\"><span class=\"pre\">P_{penalty}</span> <span class=\"pre\">=</span> <span class=\"pre\">1000</span></code>$ . Each integral is normalised by an empirically chosen constant $<code class=\"docutils literal notranslate\"><span class=\"pre\">N_{e},N_{u},N_{\\dot{u}},N_{\\sigma}</span></code>$ to make the contributions comparable. ### 3.5\u00a0Region\u2011of\u2011attraction mapping To quantify the controller\u2019s basin of attraction we systematically sample initial conditions. For each pair of initial angles $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\theta_{1}(0),\\theta_{2}(0)</span></code>$ (with zero velocities and cart position) we integrate the system until the final time or until either pendulum angle exceeds $<code class=\"docutils literal notranslate\"><span class=\"pre\">0.5\\pi</span></code>$ radians. A simulation is labelled a <strong>success</strong> if the final angles are within \u00b10.05\u00a0rad and velocities are within \u00b10.05\u00a0rad/s of zero. We visualise the results by colouring successful and unsuccessful initial conditions in the plane. Section\u00a05 presents the resulting region of attraction (RoA). ### 3.6\u00a0Monte\u00a0Carlo robustness analysis In dynamical systems theory the <strong>region of attraction</strong> (also called the domain of attraction) is the set of initial conditions whose trajectories converge to an equilibrium. For an asymptotically stable system this region is an open, invariant set containing the equilibrium; Lyapunov functions are commonly used to estimate its extent[4]. While the cost function includes a penalty for early failure, it evaluates performance only at nominal or lightly perturbed parameters. To assess robustness under uncertainty we perform a <strong>Monte\u00a0Carlo</strong> study. Monte\u00a0Carlo simulation is a universal numerical method that evaluates the behaviour of complex systems by repeatedly sampling random inputs; it is prized for its accuracy and flexibility but its chief disadvantage is the heavy computational cost due to the large number of simulations required[15]. By drawing parameter and initial condition samples from specified distributions and integrating the dynamics for each draw we approximate the probability of success and characterise the distribution of performance metrics. The standard error of Monte\u00a0Carlo estimates decreases with the square root of the number of simulations, and the results can be presented as probability distributions, reliability estimates or confidence intervals[16]. The procedure adopted here is as follows: 1. <strong>Define parameter distributions.</strong> For each physical parameter (mass, length, inertia, friction) we assume a uniform distribution within \u00b15\u00a0% of the nominal value.", "Particle Swarm Optimization for Sliding\u2011Mode Controller Tuning of a Double Inverted Pendulum ## Introduction The <strong>double inverted pendulum (DIP)</strong> mounted on a translating cart is a widely used benchmark for nonlinear and underactuated control. The system contains two serial pendulums that must be maintained upright while the cart remains near the origin. Due to the underactuation and the coupling between the pendulums and the cart, the dynamics are highly nonlinear and possess multiple unstable equilibrium points, so stabilisation requires a carefully designed controller. <strong>Sliding\u2011mode control (SMC)</strong> is a nonlinear control technique that uses a discontinuous control law to force the state trajectories onto a prescribed sliding surface. Once on the surface, the system evolution is insensitive to matched disturbances and model uncertainties, which endows SMC with strong robustness[1][2]. However, the discontinuous control input introduces high\u2011frequency switching, known as <strong>chattering</strong>, which can excite unmodelled dynamics and degrade performance[3]. Selecting the gains that define the sliding surface and switching law is therefore a non\u2011trivial design problem: small gains lead to slow convergence whereas large gains increase chattering. Meta\u2011heuristic optimisation techniques such as <strong>particle swarm optimisation (PSO)</strong> offer a principled way to automate gain tuning. PSO views each candidate set of controller gains as a particle in a population, and the particles explore the search space by updating their velocities and positions. At each iteration the velocity of particle\u00a0<em>i</em> is influenced by its own best position and the global best position found by the swarm, scaled by acceleration coefficients and random vectors[4]. An inertia weight may be included to control the influence of the previous velocity; larger inertia promotes exploration while smaller inertia encourages exploitation[5]. Because PSO only requires evaluations of the objective function and not its gradient, it is attractive for tuning nonlinear controllers where simulation is the only way to assess performance. This report uses PSO to optimise the gains of a sliding\u2011mode controller for the DIP. \\mathbf{v}<em>{i}(t + 1) = w,\\mathbf{v}</em>{i}(t) + c_{1}r_{1}\\bigl( \\mathbf{p}<em>{\\mathrm{best},i} - \\mathbf{x}</em>{i}(t) \\bigr) + c_{2}r_{2}\\bigl( \\mathbf{g}<em>{\\mathrm{best}} - \\mathbf{x}</em>{i}(t) \\bigr), \\mathbf{x}<em>{i}(t + 1) = \\mathbf{x}</em>{i}(t) + \\mathbf{v}<em>{i}(t + 1), where $w$ is the inertia weight and $c_{1},c_{2}$ are cognitive and social acceleration coefficients; $r_{1},r_{2}$ are uniformly distributed random vectors on $[0,1]$[4]. The inertia term $w\\mathbf{v}_{i}(t)$ retains a portion of the previous velocity, the cognitive term drives the particle toward its personal best position and the social term attracts it toward the global best. Shi and Eberhart introduced the inertia weight to balance global exploration and local exploitation: a large inertia weight emphasises exploration whereas a small one speeds convergence but risks premature stagnation[5]. These update equations allow the swarm to share information and converge toward promising solutions. The goal of this project is to design and tune an SMC for a DIP using PSO. The existing code implements a DIP simulator, a classical sliding\u2011mode controller and a PSO optimizer. The current documentation provides a high\u2011level overview but lacks detailed system modelling, mathematical formulations, implementation details and analysis. This report fills these gaps: it derives the DIP equations of motion, formalizes the SMC and PSO formulations, summarizes the optimization procedure in pseudocode, presents simulation results and discusses limitations and future work. ## System\u00a0Modelling &amp; Problem Statement ### Double Inverted Pendulum Dynamics The DIP consists of a cart of mass $<code class=\"docutils literal notranslate\"><span class=\"pre\">M</span></code>$ that can translate along a track, a lower pendulum of mass $<code class=\"docutils literal notranslate\"><span class=\"pre\">m_{1}</span></code>$ and length $<code class=\"docutils literal notranslate\"><span class=\"pre\">l_{1}</span></code>$ , and an upper pendulum of mass $<code class=\"docutils literal notranslate\"><span class=\"pre\">m_{2}</span></code>$ and length $<code class=\"docutils literal notranslate\"><span class=\"pre\">l_{2}</span></code>$ . The centres of mass (COM) are at distances $<code class=\"docutils literal notranslate\"><span class=\"pre\">d_{1}</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">d_{2}</span></code>$ from the pivot, and the pendulums have inertias $<code class=\"docutils literal notranslate\"><span class=\"pre\">J_{1}</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">J_{2}</span></code>$ about their COMs. Let $<code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code>$ be the cart position, $<code class=\"docutils literal notranslate\"><span class=\"pre\">q_{1}</span></code>$ the lower pendulum angle (zero at upright) and $<code class=\"docutils literal notranslate\"><span class=\"pre\">q_{2}</span></code>$ the upper pendulum angle. The state vector is \\mathbf{x} = \\left\\lbrack x,, q</em>{1},, q_{2},,\\dot{x},,{\\dot{q}}<em>{1},,{\\dot{q}}</em>{2} \\right\\rbrack^{\\top}. Applying the Euler\u2013Lagrange method to the DIP yields a <strong>manipulator form</strong>. In the rotary double\u2011inverted pendulum literature the equations of motion are derived from the system\u2019s kinetic and potential energies; the resulting model is expressed in a manipulator form with inertia matrix $H(\\mathbf{q})$, Coriolis matrix $C(\\mathbf{q},\\dot{\\mathbf{q}})$, gravity vector $G(\\mathbf{q})$ and friction term $D(\\dot{\\mathbf{q}})$[6]. Following this standard approach, the DIP dynamics are written as H\\left( \\mathbf{q} \\right),\\ddot{\\mathbf{q}} + C\\left( \\mathbf{q},\\dot{\\mathbf{q}} \\right),\\dot{\\mathbf{q}} + G\\left( \\mathbf{q} \\right) + D\\left( \\dot{\\mathbf{q}} \\right) = B, u, where $\\mathbf{q} = [x, q_{1}, q_{2}]^{\\top}$. The <strong>inertia matrix</strong> $H(\\mathbf{q})$ depends on the masses and geometries, $C(\\mathbf{q},\\dot{\\mathbf{q}})$ contains Coriolis and centrifugal terms, $G(\\mathbf{q})$ collects gravitational forces and $D(\\dot{\\mathbf{q}})$ models viscous friction. The <strong>input matrix</strong> $B = [1,0,0]^{\\top}$ highlights the underactuation since only the cart is actuated. In our implementation these matrices are computed numerically from physical parameters specified in a YAML configuration. The resulting continuous\u2011time state\u2011space model used for simulation is \\dot{\\mathbf{x}} = \\begin{bmatrix} \\dot{x} \\ {\\dot{q}}<em>{1} \\ {\\dot{q}}</em>{2} \\ H^{- 1}\\left( \\mathbf{q} \\right)\\left( Bu - C\\dot{\\mathbf{q}} - G\\left( \\mathbf{q} \\right) - D\\dot{\\mathbf{q}} \\right) \\end{bmatrix}. Numerical integration uses a fourth\u2011order Runge\u2013Kutta method with a time step $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\Delta</span> <span class=\"pre\">t</span> <span class=\"pre\">=</span> <span class=\"pre\">0.01\\</span> <span class=\"pre\">s</span></code>$ . The simulation length is typically $<code class=\"docutils literal notranslate\"><span class=\"pre\">10\\</span> <span class=\"pre\">s</span></code>$ , and initial angles are set close to 0 (upright) while the cart starts at the origin. ### Control Objective The goal is to stabilize the DIP at the equilibrium $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\left(</span> <span class=\"pre\">x,q_{1},q_{2}</span> <span class=\"pre\">\\right)</span> <span class=\"pre\">=</span> <span class=\"pre\">(0,0,0)</span></code>$ while keeping the cart near the origin and minimizing oscillations. Specifically, the control problem is to find a force input $<code class=\"docutils literal notranslate\"><span class=\"pre\">u(t)</span></code>$ constrained by $<code class=\"docutils literal notranslate\"><span class=\"pre\">|u|</span> <span class=\"pre\">\\leq</span> <span class=\"pre\">u_{\\max}</span></code>$ (here $<code class=\"docutils literal notranslate\"><span class=\"pre\">u_{\\max}</span> <span class=\"pre\">=</span> <span class=\"pre\">150\\</span> <span class=\"pre\">N</span></code>$ ) that forces $<code class=\"docutils literal notranslate\"><span class=\"pre\">q_{1}(t),q_{2}(t)</span> <span class=\"pre\">\\rightarrow</span> <span class=\"pre\">0</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">x(t)</span> <span class=\"pre\">\\rightarrow</span> <span class=\"pre\">0</span></code>$ . A sliding\u2011mode controller with adjustable gains is adopted. Selecting suitable gains is formulated as an optimization problem solved with PSO. ## Methodology: Sliding\u2011Mode Control &amp; Particle Swarm Optimization ### Classical Sliding\u2011Mode Controller (SMC) Sliding\u2011mode control uses a discontinuous control law to drive the system trajectories onto a predefined <strong>sliding surface</strong> and keep them there. When the state reaches the sliding surface the dynamics become insensitive to matched disturbances and uncertainties[7][2]. For the DIP the sliding surface is chosen as a linear combination of the pendulum angles and their angular rates: s(t) = \\lambda_{1}, q_{1} + \\lambda_{2}, q_{2} + k_{1},{\\dot{q}}<em>{1} + k</em>{2},{\\dot{q}}_{2}, where $<code class=\"docutils literal notranslate\"><span class=\"pre\">k_{1},k_{2},\\lambda_{1},\\lambda_{2}</span> <span class=\"pre\">&gt;</span> <span class=\"pre\">0</span></code>$ are design parameters. When $<code class=\"docutils literal notranslate\"><span class=\"pre\">s</span> <span class=\"pre\">=</span> <span class=\"pre\">0</span></code>$ the angles and angular rates satisfy a desired relationship that leads to convergence. The SMC control input is composed of an <strong>equivalent control</strong> $<code class=\"docutils literal notranslate\"><span class=\"pre\">u_{\\text{eq}}</span></code>$ that cancels the nominal dynamics and a <strong>robust control</strong> $<code class=\"docutils literal notranslate\"><span class=\"pre\">u_{\\text{robust}}</span></code>$ to drive $<code class=\"docutils literal notranslate\"><span class=\"pre\">s</span></code>$ to zero:", "8 \u2013 Results and Discussion This chapter analyses the <strong>particle\u2011swarm\u2011optimisation (PSO)</strong> tuning of several sliding\u2011mode control (SMC) variants for the double\u2011inverted pendulum (DIP). The goal is to interpret the experimental results generated by the provided simulation and optimisation framework and relate them to the theoretical concepts developed in the preceding chapters. #### 8.1 Experimental setup ##### 8.1.1 Simulation environment All experiments were performed using the Python implementation supplied with this project. Two dynamic models are available: a <strong>simplified model</strong> (<code class=\"docutils literal notranslate\"><span class=\"pre\">src/core/dynamics.py</span></code>) and a <strong>full model</strong> (<code class=\"docutils literal notranslate\"><span class=\"pre\">src/core/dynamics_full.py</span></code>). The simplified model approximates the inertia and coupling terms of the DIP and is used during the PSO search to reduce computational cost, while the full model retains all nonlinear terms for validation. Sliding\u2011mode controllers applied to under\u2011actuated systems such as the inverted pendulum lead to stiff, non\u2011smooth dynamics; implicit stiff solvers (e.g., Radau) are therefore recommended [1,\u202f2]. The simulation parameters are specified in <code class=\"docutils literal notranslate\"><span class=\"pre\">config.yaml</span></code>: each simulation runs for 10\u202fs with a time step dt=0.01\\mathrm{d}t = 0.01\u202fs, the initial state is [x,\u03b81,\u03b82,x\u02d9,\u03b8\u02d91,\u03b8\u02d92]=[0,0.05,\u22120.03,0,0,0][x, \\theta_{1}, \\theta_{2}, \\dot{x}, \\dot{\\theta}<em>{1}, \\dot{\\theta}</em>{2}] = [0, 0.05, -0.03, 0, 0, 0], and the actuator force is saturated at 150\u202fN. A command\u2011line interface and Streamlit front end allow interactive experiments, such as injecting disturbances and switching integrators, while the dual\u2011model architecture provides high\u2011throughput searches and accurate validation. ##### 8.1.2 Controller variants Four SMC variants are considered: - <strong>Classical SMC</strong> \u2013 uses a first\u2011order sliding surface \u03c3=k1\u03b8\u02d91+k2\u03b8\u02d92+\u03bb1\u03b81+\u03bb2\u03b82\\sigma = k_{1}\\dot{\\theta}<em>{1} + k</em>{2}\\dot{\\theta}<em>{2} + \\lambda</em>{1}\\theta_{1} + \\lambda_{2}\\theta_{2}. The control law combines an equivalent term, a discontinuous switching term and a derivative term [3]. To reduce high\u2011frequency chattering inherent in discontinuous SMC, a boundary layer implements a continuous approximation of the sign function [4].", "Chattering Mitigation", "Research Presentation Materials", "Abstract This project presents a holistic software framework for the automated design and validation of robust nonlinear controllers. By synergizing sliding mode control (SMC) with particle swarm optimization (PSO), the framework delivers a toolchain to solve the canonical double inverted pendulum problem. It integrates multiple controller architectures, a dual\u2011model simulation environment, an interactive command\u2011line interface and a web\u2011based dashboard, a lightweight fault detection module and networked hardware\u2011in\u2011the\u2011loop testing. Together, these components bridge the gap between theoretical controller design and practical deployment, illustrating a generalizable methodology for the robust control of complex nonlinear systems.", "Previous Work Before the Project", "Problem Statement", "<strong>Simulation Analysis and Enhancements for the Double Inverted Pendulum Control System</strong> ## 1\u00a0Introduction and Background The double\u2011inverted pendulum (DIP) consists of two slender rigid links mounted on a cart that can move along a horizontal rail. Each link is hinged at its base and is inherently unstable in the upright position, so even small disturbances will cause it to fall. The control objective is to keep the cart at a desired position (usually the origin) while balancing both pendulums upright. The project implements a <strong>classical sliding\u2011mode controller (SMC)</strong>, a robust control strategy that forces the system state onto a user\u2011defined switching surface and maintains it there despite matched uncertainties and disturbances[1]. The controller defines a <strong>sliding surface</strong> \\sigma = \\lambda_{1}\\theta_{1} + \\lambda_{2}\\theta_{2} + k_{1}{\\dot{\\theta}}<em>{1} + k</em>{2}{\\dot{\\theta}}<em>{2} where $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\theta_{1}</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\theta_{2}</span></code>$ are the pendulum angles and $<code class=\"docutils literal notranslate\"><span class=\"pre\">{\\dot{\\theta}}_{1}</span></code>$, $<code class=\"docutils literal notranslate\"><span class=\"pre\">{\\dot{\\theta}}_{2}</span></code>$ are their rates. When $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\sigma</span> <span class=\"pre\">=</span> <span class=\"pre\">0</span></code>$ the system behaves like a reduced\u2011order linear system that drives the pendulum angles and velocities to zero. As in standard SMC design the control law combines an <strong>equivalent control</strong> term (obtained by canceling the nominal dynamics) and a <strong>robust control</strong> term that forces the system to reach and stay on the sliding surface[1]: \\ u = u_{\\mathrm{eq}} - K\\mathrm{sat}\\Bigl(\\tfrac{\\sigma}{\\epsilon}\\Bigr) - k_{\\mathrm{d}}\\sigma \\ Here $<code class=\"docutils literal notranslate\"><span class=\"pre\">sat(</span> <span class=\"pre\">\\cdot</span> <span class=\"pre\">)</span></code>$ is a continuous approximation of the discontinuous $<code class=\"docutils literal notranslate\"><span class=\"pre\">sign</span></code>$ function. Classical SMC uses a discontinuous $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\mathrm{sign}(\\sigma)</span></code>$ which produces high\u2011frequency chattering. A common remedy is to introduce a boundary layer and replace $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\mathrm{sign}(\\sigma)</span></code>$ with a smooth saturation function such as the hyperbolic tangent[2]. In the provided code the <code class=\"docutils literal notranslate\"><span class=\"pre\">saturate</span></code> utility chooses between a hyperbolic tangent and a linear saturation: def saturate(sigma: float | ndarray, epsilon: float, method: str = \u201ctanh\u201d): # Continuous approximation of sign(sigma) within a boundary layer s = np.asarray(sigma, dtype=float) / epsilon if method == \u201ctanh\u201d: return np.tanh(s) elif method == \u201clinear\u201d: return np.clip(s, -1.0, 1.0) The parameter $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span> <span class=\"pre\">&gt;</span> <span class=\"pre\">0</span></code>$ defines a <strong>boundary layer</strong> that mitigates chattering by smoothing the switching action[2]. As $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span> <span class=\"pre\">\\rightarrow</span> <span class=\"pre\">0</span></code>$ the saturation approximates the discontinuous $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\mathrm{sign}</span></code>$ function, whereas increasing $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span></code>$ yields smoother control at the expense of convergence speed[3]. The baseline controller sets $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span> <span class=\"pre\">=</span> <span class=\"pre\">0.02</span></code>$ and uses the hyperbolic tangent method, consistent with improved power reaching laws that use smooth saturation functions to reduce chattering[2]. ## 2\u00a0Simulation Framework Challenges ### 2.1\u00a0Numerical stiffness from discontinuous control Sliding\u2011mode control uses high\u2011gain feedback and discontinuous switching to force states onto the sliding surface[1]. In practice the boundary layer smooths the discontinuity, but for small $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span></code>$ the right\u2011hand side still exhibits very steep gradients. The dynamics of the DIP combine slow cart motion with fast pendulum oscillations and fast switching in the control law. This results in <strong>stiff differential equations</strong>: the solver must resolve both slow and very fast dynamics simultaneously. Explicit fixed\u2011step integrators (such as Euler or fourth\u2011order Runge\u2013Kutta) cannot safely integrate such systems because large steps lead to oscillations or divergence, whereas very small steps yield high computational cost. Implicit stiff solvers are therefore preferred for systems with multiple time scales[4]. ### 2.2\u00a0Limitations of the fixed\u2013step simulation The original simulation loop employed a fixed time step $<code class=\"docutils literal notranslate\"><span class=\"pre\">dt</span> <span class=\"pre\">=</span> <span class=\"pre\">0.01\\,\\text{s}</span></code>$ and integrated the dynamics using a hand\u2011coded RK4 method in <code class=\"docutils literal notranslate\"><span class=\"pre\">dynamics.DoubleInvertedPendulum.step</span></code>. With the baseline SMC gains the system was highly unstable for anything other than tiny initial angles. Even when the step was reduced to 0.001\u00a0s, the integration frequently diverged because the solver could not adapt to the stiff dynamics near the switching surface. Moreover, because the control law computes a model\u2011based equivalent control <code class=\"docutils literal notranslate\"><span class=\"pre\">u_eq</span></code> by inverting the inertia matrix, numerical singularities or large condition numbers can appear during integration. The controller code detects near\u2011singular matrices and returns zero to preserve stability, but the resulting abrupt change in torque further stiffens the problem. ### 2.3\u00a0Need for adaptive stiff integrators The <strong>SciPy</strong> routine <code class=\"docutils literal notranslate\"><span class=\"pre\">solve_ivp</span></code> provides a suite of adaptive methods that adjust the step size to meet prescribed error tolerances. Explicit methods like <code class=\"docutils literal notranslate\"><span class=\"pre\">RK45</span></code> are efficient for non\u2011stiff systems, while implicit methods such as the <strong>Backward Differentiation Formula (BDF)</strong> or <strong>Radau</strong> are recommended for stiff problems. Implicit BDF methods suffer from an order barrier\u2014orders above five are unstable\u2014whereas Radau IIA schemes are A\u2011stable and L\u2011stable at arbitrary order, providing large stability regions for stiff systems[4][5]. For our system, preliminary experiments showed that <code class=\"docutils literal notranslate\"><span class=\"pre\">RK45</span></code> took extremely small steps and failed to converge, whereas <code class=\"docutils literal notranslate\"><span class=\"pre\">Radau</span></code> handled the stiff sliding dynamics more robustly. A robust simulation loop therefore employs <code class=\"docutils literal notranslate\"><span class=\"pre\">solve_ivp</span></code> with an adaptive stiff integrator: from scipy.integrate import solve_ivp def dip_ode(t, x, controller, dyn): # x = [x, theta1, theta2, xdot, dtheta1, dtheta2] u, <em>, _ = controller.compute_control(x, (), {}) dxdt = dyn.rhs(x, u) return dxdt sol = solve_ivp( lambda t, y: dip_ode(t, y, smc_controller, pendulum), t_span=(0.0, T), y0=x0, method=\u2019Radau\u2019, atol=1e-8, rtol=1e-6, max_step=0.01, ) The solver automatically reduces the step size near steep gradients and increases it when the dynamics slow down, yielding accurate trajectories with fewer function evaluations. ## 3\u00a0Proposed Enhancements and Methodology ### 3.1\u00a0Adaptive integrators and event handling Switching to adaptive stiff solvers addresses the numerical instability observed with fixed\u2011step methods. <strong>Event functions</strong> can be added to <code class=\"docutils literal notranslate\"><span class=\"pre\">solve_ivp</span></code> to halt integration if the pendulum angles exceed safe limits (e.g., $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\left|</span> <span class=\"pre\">\\theta_{i}</span> <span class=\"pre\">\\right|</span> <span class=\"pre\">&gt;</span> <span class=\"pre\">\\pi/2</span></code>$ ). By terminating unstable simulations early we avoid wasting computational effort and can classify initial states as failures. The integrator parameters $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\text{rtol}</span> <span class=\"pre\">=</span> <span class=\"pre\">10^{-</span> <span class=\"pre\">6}</span></code>$ , $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\text{atol}</span> <span class=\"pre\">=</span> <span class=\"pre\">10^{-</span> <span class=\"pre\">8}</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\text{max\\_step}</span> <span class=\"pre\">=</span> <span class=\"pre\">0.01\\,\\text{s}</span></code>$ were found to balance accuracy and speed in the stiff regime. ### 3.2\u00a0Chattering mitigation via boundary layer The discontinuous <code class=\"docutils literal notranslate\"><span class=\"pre\">sign()</span></code> function in the baseline SMC produces high\u2011frequency chatter[1]. Introducing a <strong>boundary layer</strong> smooths the switching term so that the control becomes u</em>{robust} = - K, sat\\left( \\frac{\\sigma}{\\epsilon} \\right) - k</em>{d}\\sigma, where $<code class=\"docutils literal notranslate\"><span class=\"pre\">sat\\left(</span> <span class=\"pre\">\\frac{\\sigma}{\\epsilon}</span> <span class=\"pre\">\\right)</span></code>$ is either $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\tanh(\\sigma/\\epsilon)</span></code>$ or $<code class=\"docutils literal notranslate\"><span class=\"pre\">clip(\\sigma/\\epsilon,</span> <span class=\"pre\">-1,1)</span></code>$. The derivative term $<code class=\"docutils literal notranslate\"><span class=\"pre\">-</span> <span class=\"pre\">k_{d}\\sigma</span></code>$ further damps sliding dynamics. Choosing $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span></code>$ too small leads to chattering; increasing $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span></code>$ reduces chattering but slows convergence[3]. Simulation results show that $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span> <span class=\"pre\">=</span> <span class=\"pre\">0.02</span></code>$ provides a good compromise for the DIP. Adaptive boundary layers can also be implemented to widen $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\epsilon</span></code>$ when $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\sigma</span></code>$ is large and tighten it near the origin, as suggested in improved power\u2011reaching laws for sliding\u2011mode control[2]. ### 3.3\u00a0Filtering noisy measurements In practice sensors introduce noise that can drive the controller and cause chattering. Two complementary filters are proposed: 1. <strong>Moving average filter.</strong> A simple moving average computes the unweighted mean of the last $<code class=\"docutils literal notranslate\"><span class=\"pre\">k</span></code>$ samples. For a sequence $<code class=\"docutils literal notranslate\"><span class=\"pre\">p_{1},p_{2},\\ldots,p_{n}</span></code>$ the mean over the last $<code class=\"docutils literal notranslate\"><span class=\"pre\">k</span></code>$ samples is \u00a0 {SMA}<em>{k} = \\frac{p</em>{n - k + 1} + p_{n - k + 2} + \\cdots + p_{n}}{k} = \\frac{1}{k}\\sum_{i = n - k + 1}^{n}p_{i},, Smoothing filters such as the moving average reduce high\u2011frequency noise by averaging neighbouring points[6]. In functional near\u2011infrared spectroscopy data processing, the moving average filter replaces the value at each point with the average of neighbouring data points, thereby reducing high\u2011frequency fluctuations[7]. Applying an SMA to measured angles smooths high\u2011frequency noise but introduces a delay proportional to $<code class=\"docutils literal notranslate\"><span class=\"pre\">k/2</span></code>$. Choosing $<code class=\"docutils literal notranslate\"><span class=\"pre\">k</span></code>$ between 3 and 7 samples at a <strong>100\u00a0Hz</strong> (10\u00a0ms) sampling rate offers a good compromise between smoothing and latency. 1. <strong>Kalman filter.</strong> The Kalman filter models the system in discrete state\u2013space form $<code class=\"docutils literal notranslate\"><span class=\"pre\">x_{k</span> <span class=\"pre\">+</span> <span class=\"pre\">1}</span> <span class=\"pre\">=</span> <span class=\"pre\">Fx_{k}</span> <span class=\"pre\">+</span> <span class=\"pre\">Bu_{k}</span> <span class=\"pre\">+</span> <span class=\"pre\">w_{k}</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">y_{k}</span> <span class=\"pre\">=</span> <span class=\"pre\">Hx_{k}</span> <span class=\"pre\">+</span> <span class=\"pre\">v_{k}</span></code>$ . It recursively performs a <strong>prediction</strong> and <strong>update</strong> step. The prediction step computes the a\u2011priori state and covariance \u00a0 {\\widehat{x}}<em>{k|k - 1} = F</em>{k}{\\widehat{x}}<em>{k - 1|k - 1} + B</em>{k}u_{k},\\quad P_{k|k - 1} = F_{k}P_{k - 1|k - 1}F_{k}^{\\mathsf{T}} + Q_{k} and the update step incorporates the measurement $<code class=\"docutils literal notranslate\"><span class=\"pre\">z_{k}</span></code>$ using the Kalman gain $<code class=\"docutils literal notranslate\"><span class=\"pre\">K_{k}</span></code>$ K_{k} = P_{k|k - 1}H_{k}^{\\mathsf{T}}S_{k}^{- 1},\\quad{\\widehat{x}}<em>{k|k} = {\\widehat{x}}</em>{k|k - 1} + K_{k}\\left( z_{k} - H_{k}{\\widehat{x}}<em>{k|k - 1} \\right),\\quad P</em>{k|k} = \\left( I - K_{k}H_{k} \\right)P_{k|k - 1}, where $<code class=\"docutils literal notranslate\"><span class=\"pre\">S_{k}</span> <span class=\"pre\">=</span> <span class=\"pre\">H_{k}P_{k|k</span> <span class=\"pre\">-</span> <span class=\"pre\">1}H_{k}^{\\mathsf{T}}</span> <span class=\"pre\">+</span> <span class=\"pre\">R_{k}</span></code>$ is the innovation covariance. Under the assumption that the process and measurement noise are independent, white and Gaussian, the Kalman filter provides an optimal linear estimator[8][9]. It can be interpreted as computing the a\u2011posteriori state estimate as a linear combination of the prediction and the measurement residual, with the Kalman gain weighting how much trust is placed in the measurement[10][11]. The innovation sequence (measurement residual) is the difference between the actual measurement and its prediction and has zero mean with covariance equal to $<code class=\"docutils literal notranslate\"><span class=\"pre\">S_{k}</span></code>$[12]. The magnitude of the Kalman gain reflects the relative confidence in the model and measurements: a large gain corresponds to precise measurements and uncertain predictions, whereas a small gain arises when predictions are more reliable[11]. ### 3.4\u00a0Improved PSO cost function The particle swarm optimisation (PSO) routine tunes the six gains $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\left\\lbrack</span> <span class=\"pre\">k_{1},k_{2},\\lambda_{1},\\lambda_{2},K,k_{d}</span> <span class=\"pre\">\\right\\rbrack</span></code>$ to minimise a cost function. PSO is a population\u2011based metaheuristic inspired by the collective behaviour of bird flocks: each particle (candidate solution) remembers its best previous position and is attracted toward the best position found by the entire swarm. Velocities are updated using cognitive and social weights with random coefficients, and positions are updated accordingly. Because the algorithm does not rely on gradients it can be applied to a wide range of optimisation problems and has spawned numerous variations[13][14]. The cost is computed from the simulated trajectory using weighted integrals: J = w_{e} \\cdot \\frac{1}{N_{e}}\\int_{0}^{T} \\parallel x(t) \\parallel^{2}dt\\mspace{6mu} + w_{u} \\cdot \\frac{1}{N_{u}}\\int_{0}^{T}u(t)^{2}dt\\mspace{6mu} + w_{\\dot{u}} \\cdot \\frac{1}{N_{\\dot{u}}}\\int_{0}^{T}\\dot{u}(t)^{2}dt\\mspace{6mu} + w_{\\sigma} \\cdot \\frac{1}{N_{\\sigma}}\\int_{0}^{T}\\sigma(t)^{2}dt\\mspace{6mu} + w_{stab} \\cdot \\frac{T - t_{fail}}{T} \\cdot P_{penalty}. The first term (state error) penalises deviations of cart position and pendulum angles from zero. The second and third terms penalise large control efforts and large control slews, reflecting actuator limitations. The fourth term penalises large sliding surface values, encouraging the system to converge quickly onto the sliding manifold. The last term applies a penalty if the simulation fails before the full duration, with the penalty proportional to how early the failure occurs. In the provided configuration the weights are $<code class=\"docutils literal notranslate\"><span class=\"pre\">w_{e}</span> <span class=\"pre\">=</span> <span class=\"pre\">50</span></code>$ , $<code class=\"docutils literal notranslate\"><span class=\"pre\">w_{u}</span> <span class=\"pre\">=</span> <span class=\"pre\">0.2</span></code>$ , $<code class=\"docutils literal notranslate\"><span class=\"pre\">w_{\\dot{u}}</span> <span class=\"pre\">=</span> <span class=\"pre\">0.1</span></code>$ , $<code class=\"docutils literal notranslate\"><span class=\"pre\">w_{\\sigma}</span> <span class=\"pre\">=</span> <span class=\"pre\">0.1</span></code>$ and the penalty constant $<code class=\"docutils literal notranslate\"><span class=\"pre\">P_{penalty}</span> <span class=\"pre\">=</span> <span class=\"pre\">1000</span></code>$ . Each integral is normalised by an empirically chosen constant $<code class=\"docutils literal notranslate\"><span class=\"pre\">N_{e},N_{u},N_{\\dot{u}},N_{\\sigma}</span></code>$ to make the contributions comparable. ### 3.5\u00a0Region\u2011of\u2011attraction mapping To quantify the controller\u2019s basin of attraction we systematically sample initial conditions. For each pair of initial angles $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\theta_{1}(0),\\theta_{2}(0)</span></code>$ (with zero velocities and cart position) we integrate the system until the final time or until either pendulum angle exceeds $<code class=\"docutils literal notranslate\"><span class=\"pre\">0.5\\pi</span></code>$ radians. A simulation is labelled a <strong>success</strong> if the final angles are within \u00b10.05\u00a0rad and velocities are within \u00b10.05\u00a0rad/s of zero. We visualise the results by colouring successful and unsuccessful initial conditions in the plane. Section\u00a05 presents the resulting region of attraction (RoA). ### 3.6\u00a0Monte\u00a0Carlo robustness analysis In dynamical systems theory the <strong>region of attraction</strong> (also called the domain of attraction) is the set of initial conditions whose trajectories converge to an equilibrium. For an asymptotically stable system this region is an open, invariant set containing the equilibrium; Lyapunov functions are commonly used to estimate its extent[4]. While the cost function includes a penalty for early failure, it evaluates performance only at nominal or lightly perturbed parameters. To assess robustness under uncertainty we perform a <strong>Monte\u00a0Carlo</strong> study. Monte\u00a0Carlo simulation is a universal numerical method that evaluates the behaviour of complex systems by repeatedly sampling random inputs; it is prized for its accuracy and flexibility but its chief disadvantage is the heavy computational cost due to the large number of simulations required[15]. By drawing parameter and initial condition samples from specified distributions and integrating the dynamics for each draw we approximate the probability of success and characterise the distribution of performance metrics. The standard error of Monte\u00a0Carlo estimates decreases with the square root of the number of simulations, and the results can be presented as probability distributions, reliability estimates or confidence intervals[16]. The procedure adopted here is as follows: 1. <strong>Define parameter distributions.</strong> For each physical parameter (mass, length, inertia, friction) we assume a uniform distribution within \u00b15\u00a0% of the nominal value.", "8 \u2013 Results and Discussion This chapter analyses the <strong>particle\u2011swarm\u2011optimisation (PSO)</strong> tuning of several sliding\u2011mode control (SMC) variants for the double\u2011inverted pendulum (DIP). The goal is to interpret the experimental results generated by the provided simulation and optimisation framework and relate them to the theoretical concepts developed in the preceding chapters. #### 8.1 Experimental setup ##### 8.1.1 Simulation environment All experiments were performed using the Python implementation supplied with this project. Two dynamic models are available: a <strong>simplified model</strong> (<code class=\"docutils literal notranslate\"><span class=\"pre\">src/core/dynamics.py</span></code>) and a <strong>full model</strong> (<code class=\"docutils literal notranslate\"><span class=\"pre\">src/core/dynamics_full.py</span></code>). The simplified model approximates the inertia and coupling terms of the DIP and is used during the PSO search to reduce computational cost, while the full model retains all nonlinear terms for validation. Sliding\u2011mode controllers applied to under\u2011actuated systems such as the inverted pendulum lead to stiff, non\u2011smooth dynamics; implicit stiff solvers (e.g., Radau) are therefore recommended [1,\u202f2]. The simulation parameters are specified in <code class=\"docutils literal notranslate\"><span class=\"pre\">config.yaml</span></code>: each simulation runs for 10\u202fs with a time step dt=0.01\\mathrm{d}t = 0.01\u202fs, the initial state is [x,\u03b81,\u03b82,x\u02d9,\u03b8\u02d91,\u03b8\u02d92]=[0,0.05,\u22120.03,0,0,0][x, \\theta_{1}, \\theta_{2}, \\dot{x}, \\dot{\\theta}<em>{1}, \\dot{\\theta}</em>{2}] = [0, 0.05, -0.03, 0, 0, 0], and the actuator force is saturated at 150\u202fN. A command\u2011line interface and Streamlit front end allow interactive experiments, such as injecting disturbances and switching integrators, while the dual\u2011model architecture provides high\u2011throughput searches and accurate validation. ##### 8.1.2 Controller variants Four SMC variants are considered: - <strong>Classical SMC</strong> \u2013 uses a first\u2011order sliding surface \u03c3=k1\u03b8\u02d91+k2\u03b8\u02d92+\u03bb1\u03b81+\u03bb2\u03b82\\sigma = k_{1}\\dot{\\theta}<em>{1} + k</em>{2}\\dot{\\theta}<em>{2} + \\lambda</em>{1}\\theta_{1} + \\lambda_{2}\\theta_{2}. The control law combines an equivalent term, a discontinuous switching term and a derivative term [3]. To reduce high\u2011frequency chattering inherent in discontinuous SMC, a boundary layer implements a continuous approximation of the sign function [4].", "Particle Swarm Optimization for Sliding\u2011Mode Controller Tuning of a Double Inverted Pendulum ## Introduction The <strong>double inverted pendulum (DIP)</strong> mounted on a translating cart is a widely used benchmark for nonlinear and underactuated control. The system contains two serial pendulums that must be maintained upright while the cart remains near the origin. Due to the underactuation and the coupling between the pendulums and the cart, the dynamics are highly nonlinear and possess multiple unstable equilibrium points, so stabilisation requires a carefully designed controller. <strong>Sliding\u2011mode control (SMC)</strong> is a nonlinear control technique that uses a discontinuous control law to force the state trajectories onto a prescribed sliding surface. Once on the surface, the system evolution is insensitive to matched disturbances and model uncertainties, which endows SMC with strong robustness[1][2]. However, the discontinuous control input introduces high\u2011frequency switching, known as <strong>chattering</strong>, which can excite unmodelled dynamics and degrade performance[3]. Selecting the gains that define the sliding surface and switching law is therefore a non\u2011trivial design problem: small gains lead to slow convergence whereas large gains increase chattering. Meta\u2011heuristic optimisation techniques such as <strong>particle swarm optimisation (PSO)</strong> offer a principled way to automate gain tuning. PSO views each candidate set of controller gains as a particle in a population, and the particles explore the search space by updating their velocities and positions. At each iteration the velocity of particle\u00a0<em>i</em> is influenced by its own best position and the global best position found by the swarm, scaled by acceleration coefficients and random vectors[4]. An inertia weight may be included to control the influence of the previous velocity; larger inertia promotes exploration while smaller inertia encourages exploitation[5]. Because PSO only requires evaluations of the objective function and not its gradient, it is attractive for tuning nonlinear controllers where simulation is the only way to assess performance. This report uses PSO to optimise the gains of a sliding\u2011mode controller for the DIP. \\mathbf{v}<em>{i}(t + 1) = w,\\mathbf{v}</em>{i}(t) + c_{1}r_{1}\\bigl( \\mathbf{p}<em>{\\mathrm{best},i} - \\mathbf{x}</em>{i}(t) \\bigr) + c_{2}r_{2}\\bigl( \\mathbf{g}<em>{\\mathrm{best}} - \\mathbf{x}</em>{i}(t) \\bigr), \\mathbf{x}<em>{i}(t + 1) = \\mathbf{x}</em>{i}(t) + \\mathbf{v}<em>{i}(t + 1), where $w$ is the inertia weight and $c_{1},c_{2}$ are cognitive and social acceleration coefficients; $r_{1},r_{2}$ are uniformly distributed random vectors on $[0,1]$[4]. The inertia term $w\\mathbf{v}_{i}(t)$ retains a portion of the previous velocity, the cognitive term drives the particle toward its personal best position and the social term attracts it toward the global best. Shi and Eberhart introduced the inertia weight to balance global exploration and local exploitation: a large inertia weight emphasises exploration whereas a small one speeds convergence but risks premature stagnation[5]. These update equations allow the swarm to share information and converge toward promising solutions. The goal of this project is to design and tune an SMC for a DIP using PSO. The existing code implements a DIP simulator, a classical sliding\u2011mode controller and a PSO optimizer. The current documentation provides a high\u2011level overview but lacks detailed system modelling, mathematical formulations, implementation details and analysis. This report fills these gaps: it derives the DIP equations of motion, formalizes the SMC and PSO formulations, summarizes the optimization procedure in pseudocode, presents simulation results and discusses limitations and future work. ## System\u00a0Modelling &amp; Problem Statement ### Double Inverted Pendulum Dynamics The DIP consists of a cart of mass $<code class=\"docutils literal notranslate\"><span class=\"pre\">M</span></code>$ that can translate along a track, a lower pendulum of mass $<code class=\"docutils literal notranslate\"><span class=\"pre\">m_{1}</span></code>$ and length $<code class=\"docutils literal notranslate\"><span class=\"pre\">l_{1}</span></code>$ , and an upper pendulum of mass $<code class=\"docutils literal notranslate\"><span class=\"pre\">m_{2}</span></code>$ and length $<code class=\"docutils literal notranslate\"><span class=\"pre\">l_{2}</span></code>$ . The centres of mass (COM) are at distances $<code class=\"docutils literal notranslate\"><span class=\"pre\">d_{1}</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">d_{2}</span></code>$ from the pivot, and the pendulums have inertias $<code class=\"docutils literal notranslate\"><span class=\"pre\">J_{1}</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">J_{2}</span></code>$ about their COMs. Let $<code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code>$ be the cart position, $<code class=\"docutils literal notranslate\"><span class=\"pre\">q_{1}</span></code>$ the lower pendulum angle (zero at upright) and $<code class=\"docutils literal notranslate\"><span class=\"pre\">q_{2}</span></code>$ the upper pendulum angle. The state vector is \\mathbf{x} = \\left\\lbrack x,, q</em>{1},, q_{2},,\\dot{x},,{\\dot{q}}<em>{1},,{\\dot{q}}</em>{2} \\right\\rbrack^{\\top}. Applying the Euler\u2013Lagrange method to the DIP yields a <strong>manipulator form</strong>. In the rotary double\u2011inverted pendulum literature the equations of motion are derived from the system\u2019s kinetic and potential energies; the resulting model is expressed in a manipulator form with inertia matrix $H(\\mathbf{q})$, Coriolis matrix $C(\\mathbf{q},\\dot{\\mathbf{q}})$, gravity vector $G(\\mathbf{q})$ and friction term $D(\\dot{\\mathbf{q}})$[6]. Following this standard approach, the DIP dynamics are written as H\\left( \\mathbf{q} \\right),\\ddot{\\mathbf{q}} + C\\left( \\mathbf{q},\\dot{\\mathbf{q}} \\right),\\dot{\\mathbf{q}} + G\\left( \\mathbf{q} \\right) + D\\left( \\dot{\\mathbf{q}} \\right) = B, u, where $\\mathbf{q} = [x, q_{1}, q_{2}]^{\\top}$. The <strong>inertia matrix</strong> $H(\\mathbf{q})$ depends on the masses and geometries, $C(\\mathbf{q},\\dot{\\mathbf{q}})$ contains Coriolis and centrifugal terms, $G(\\mathbf{q})$ collects gravitational forces and $D(\\dot{\\mathbf{q}})$ models viscous friction. The <strong>input matrix</strong> $B = [1,0,0]^{\\top}$ highlights the underactuation since only the cart is actuated. In our implementation these matrices are computed numerically from physical parameters specified in a YAML configuration. The resulting continuous\u2011time state\u2011space model used for simulation is \\dot{\\mathbf{x}} = \\begin{bmatrix} \\dot{x} \\ {\\dot{q}}<em>{1} \\ {\\dot{q}}</em>{2} \\ H^{- 1}\\left( \\mathbf{q} \\right)\\left( Bu - C\\dot{\\mathbf{q}} - G\\left( \\mathbf{q} \\right) - D\\dot{\\mathbf{q}} \\right) \\end{bmatrix}. Numerical integration uses a fourth\u2011order Runge\u2013Kutta method with a time step $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\Delta</span> <span class=\"pre\">t</span> <span class=\"pre\">=</span> <span class=\"pre\">0.01\\</span> <span class=\"pre\">s</span></code>$ . The simulation length is typically $<code class=\"docutils literal notranslate\"><span class=\"pre\">10\\</span> <span class=\"pre\">s</span></code>$ , and initial angles are set close to 0 (upright) while the cart starts at the origin. ### Control Objective The goal is to stabilize the DIP at the equilibrium $<code class=\"docutils literal notranslate\"><span class=\"pre\">\\left(</span> <span class=\"pre\">x,q_{1},q_{2}</span> <span class=\"pre\">\\right)</span> <span class=\"pre\">=</span> <span class=\"pre\">(0,0,0)</span></code>$ while keeping the cart near the origin and minimizing oscillations. Specifically, the control problem is to find a force input $<code class=\"docutils literal notranslate\"><span class=\"pre\">u(t)</span></code>$ constrained by $<code class=\"docutils literal notranslate\"><span class=\"pre\">|u|</span> <span class=\"pre\">\\leq</span> <span class=\"pre\">u_{\\max}</span></code>$ (here $<code class=\"docutils literal notranslate\"><span class=\"pre\">u_{\\max}</span> <span class=\"pre\">=</span> <span class=\"pre\">150\\</span> <span class=\"pre\">N</span></code>$ ) that forces $<code class=\"docutils literal notranslate\"><span class=\"pre\">q_{1}(t),q_{2}(t)</span> <span class=\"pre\">\\rightarrow</span> <span class=\"pre\">0</span></code>$ and $<code class=\"docutils literal notranslate\"><span class=\"pre\">x(t)</span> <span class=\"pre\">\\rightarrow</span> <span class=\"pre\">0</span></code>$ . A sliding\u2011mode controller with adjustable gains is adopted. Selecting suitable gains is formulated as an optimization problem solved with PSO. ## Methodology: Sliding\u2011Mode Control &amp; Particle Swarm Optimization ### Classical Sliding\u2011Mode Controller (SMC) Sliding\u2011mode control uses a discontinuous control law to drive the system trajectories onto a predefined <strong>sliding surface</strong> and keep them there. When the state reaches the sliding surface the dynamics become insensitive to matched disturbances and uncertainties[7][2]. For the DIP the sliding surface is chosen as a linear combination of the pendulum angles and their angular rates: s(t) = \\lambda_{1}, q_{1} + \\lambda_{2}, q_{2} + k_{1},{\\dot{q}}<em>{1} + k</em>{2},{\\dot{q}}_{2}, where $<code class=\"docutils literal notranslate\"><span class=\"pre\">k_{1},k_{2},\\lambda_{1},\\lambda_{2}</span> <span class=\"pre\">&gt;</span> <span class=\"pre\">0</span></code>$ are design parameters. When $<code class=\"docutils literal notranslate\"><span class=\"pre\">s</span> <span class=\"pre\">=</span> <span class=\"pre\">0</span></code>$ the angles and angular rates satisfy a desired relationship that leads to convergence. The SMC control input is composed of an <strong>equivalent control</strong> $<code class=\"docutils literal notranslate\"><span class=\"pre\">u_{\\text{eq}}</span></code>$ that cancels the nominal dynamics and a <strong>robust control</strong> $<code class=\"docutils literal notranslate\"><span class=\"pre\">u_{\\text{robust}}</span></code>$ to drive $<code class=\"docutils literal notranslate\"><span class=\"pre\">s</span></code>$ to zero:", "Sliding Mode Control for a Double\u2011Inverted Pendulum: Bridging Theory and Implementation", "<strong>A Technical Report on the Modeling and Configuration of a Cart\u2011Based Double Inverted Pendulum System</strong> ### <strong>Introduction</strong> #### <strong>Purpose and Scope</strong> This report provides a theoretical and practical foundation for modelling and controlling a cart\u2011based double inverted pendulum (DIP) system[1]. The goal is to deliver a self\u2011contained guide for control systems engineers working with Python\u2011based simulations[1]. The document derives the nonlinear equations of motion from first principles, enumerates all required physical, simulation and controller parameters, and proposes a formal configuration schema. Where appropriate, the report cross\u2011references the accompanying project files (particularly the high\u2011fidelity implementation in <code class=\"docutils literal notranslate\"><span class=\"pre\">src/core/dynamics.py</span></code> and the configuration file <code class=\"docutils literal notranslate\"><span class=\"pre\">config.yaml</span></code>) to ensure applicability to real simulation code <code class=\"docutils literal notranslate\"><span class=\"pre\">DIP_SMC_PSO/src/core/dynamics.py</span></code> <code class=\"docutils literal notranslate\"><span class=\"pre\">DIP_SMC_PSO/config.yaml</span></code>. #### <strong>The Double Inverted Pendulum as a Benchmark Problem</strong> A double inverted pendulum consists of two pendulums attached in series to a cart. The second pendulum is attached to the end of the first, so the system has three degrees of freedom: the cart position and the two pendulum angles. Only one actuator applies a horizontal force to the cart, making the system underactuated; there is one control input for three state variables. Control of such a system is challenging because it is inherently unstable and will fall over unless stabilised [1]. Classical control literature emphasises that the DIPC\u2019s single actuator must regulate three degrees of freedom, making the system underactuated[1]. The double inverted pendulum also exhibits chaotic dynamics. The motion is governed by coupled ordinary differential equations that display strong sensitivity to initial conditions[2]. Small changes in starting state can lead to vastly different trajectories, so an accurate nonlinear model is essential for control design. These properties make the DIP a popular benchmark for advanced control strategies, including sliding\u2011mode control, optimal control and reinforcement learning. #### <strong>Methodology</strong> The dynamic model is derived using Lagrangian mechanics, an energy\u2011based formulation widely used for open\u2011chain robots and underactuated systems [3]. In this approach the kinetic and potential energies of each component are computed and combined to form the Lagrangian L=T\u2212VL = T - V. The Euler\u2013Lagrange equations are then applied to obtain the equations of motion (EOM). For the double inverted pendulum, the Lagrangian is the difference between the sum of kinetic energies and the sum of gravitational potentials [1]. The resulting nonlinear second\u2011order differential equations are transformed into a state\u2011space form suitable for control design. The derived model is validated by comparing with the high\u2011fidelity implementation in the accompanying Python project (<code class=\"docutils literal notranslate\"><span class=\"pre\">DoubleInvertedPendulum</span></code> class), ensuring that parameter names and units match those in <code class=\"docutils literal notranslate\"><span class=\"pre\">config.yaml</span></code>. \u2014\u2014 ## <strong>Section 1: System Dynamics and Mathematical Modeling</strong> ### <strong>1.1 System Definition, Assumptions, and Nomenclature</strong> #### <strong>System Diagram</strong> The double inverted pendulum on a cart comprises a cart of mass mcm_{c} that translates horizontally on a track. Two rigid pendulum links are attached in series; the first link (mass m1m_{1}, length l1l_{1}) is pinned to the cart and the second link (mass m2m_{2}, length l2l_{2}) is attached to the end of the first. The centres of mass of the links are located at distances lc1l_{c1} and lc2l_{c2} from their respective pivots. Angles \u03b81\\theta_{1} and \u03b82\\theta_{2} are measured from the upward vertical, and the horizontal displacement of the cart is xx. Gravity acts downward with acceleration gg. A horizontal force uu applied to the cart constitutes the single control input. A schematic of the system is shown in Figure 1[1].  #### <strong>Model Assumptions</strong> 1. <strong>Rigid links.</strong> Each pendulum link is treated as a rigid body with constant mass and moment of inertia. There is no flexural deformation[1].", "Production Deployment", "Production Readiness Assessment v2.0 <strong>Date</strong>: 2025-09-29", "Production Documentation Summary", "Production Readiness Assessment - Final Report <strong>Date:</strong> 2025-09-29", "Production Readiness Assessment Framework", "PSO Algorithm Mathematical Foundations", "PSO Configuration Schema Documentation", "PSO-Factory Integration Patterns Documentation ## Overview This document provides guidance on integrating the factory system with Particle Swarm Optimization (PSO) workflows. The DIP SMC-PSO project features native PSO integration patterns that streamline controller optimization while maintaining scientific rigor and performance. ## Table of Contents 1. <span class=\"xref myst\">PSO Integration Architecture</span>", "PSO Gain Bounds Mathematical Foundations", "PSO Integration System Architecture", "PSO Integration Technical Specification", "PSO Optimization Workflow Specifications", "PSO Optimization Workflow User Guide", "PSO Troubleshooting and Maintenance Manual", "Quality Gate Independence Framework ## Executive Summary The Quality Gate Independence Framework establishes resilient, parallel validation paths that operate independently to prevent cascade failures and ensure robust quality assessment for the double-inverted pendulum sliding mode control (DIP-SMC) project. This framework addresses the critical issue identified in GitHub Issue #9 where single component failures could prevent system validation. <strong>Core Principle:</strong> No single point of failure should block system quality assessment. ## 1. Framework Architecture ### 1.1 Independent Validation Paths The framework implements <strong>four parallel, independent validation paths</strong> that can operate and report results independently: ```python", "Bibliography", "References and Citations ```{toctree}", "Mathematical Notation Reference Guide", "Results and Analysis ```{toctree}", "Results &amp; Plots", "Safety System Validation Protocols", "Visual Documentation Navigator", "Interactive Documentation Map", "Visual Documentation Map", "Streamlit Dashboard User Guide", "Documentation Styling Library This directory contains documentation styling templates and patterns inspired by the <strong>react-bits-library</strong> project, adapted for the DIP-SMC-PSO control systems framework.", "React Bits - Quick Reference Cheat Sheet", "React Bits - Complete Component Index", "React Bits Integration Guide", "Module Readme Template", "React Bits - Quick Start Guide", "Symbols &amp; Units", "Configuration Schema Reference - Factory Integration ## Complete Configuration Schema Documentation for All Controller Types <strong>Document Version:</strong> 2.0", "Controller Factory Integration Technical Documentation ## Overview This document provides technical documentation for the controller factory pattern implementation in the double-inverted pendulum sliding mode control (DIP-SMC) system. The factory pattern serves as the primary instantiation mechanism for all SMC variants, ensuring consistent interfaces, robust error handling, and integration with optimization algorithms. ## Table of Contents 1. <span class=\"xref myst\">Factory Pattern Architecture</span>", "Factory Integration Fixes - GitHub Issue #6 ## Documentation for Resolved Factory Pattern Implementation <strong>Issue Resolution Date:</strong> November 2024", "Factory Usage Examples - Guide ## Advanced Controller Factory Usage Patterns This document provides practical examples for using the enhanced controller factory system after the GitHub Issue #6 resolution.", "Technical Documentation", "Integration Protocols and Cross-Domain Specifications ## Overview This document defines the integration protocols and cross-domain specifications for the controller factory within the double-inverted pendulum sliding mode control (DIP-SMC) ecosystem. These protocols ensure communication and data exchange between controllers, plant models, optimization algorithms, simulation engines, and hardware-in-the-loop (HIL) systems. ## Table of Contents 1. <span class=\"xref myst\">System Architecture Overview</span>", "Mathematical Foundations for Controller Factory Integration ## Overview This document provides mathematical foundations for the controller factory integration, focusing on the theoretical underpinnings of sliding mode control (SMC) algorithms, stability analysis, and optimization integration. The mathematical framework ensures that all factory-created controllers satisfy fundamental control theory requirements. ## Table of Contents 1. <span class=\"xref myst\">Classical SMC Mathematical Framework</span>", "PSO Integration Workflows - Factory Integration ## PSO-Factory Integration Documentation <strong>Document Version:</strong> 2.0", "Test Execution Guide", "Test Execution Guide", "Test Infrastructure Documentation", "Test Infrastructure Validation Report", "Test Protocols", "Theoretical Foundations ```{toctree}", "Lyapunov Stability Analysis for DIP-SMC System", "Mathematical References", "Notation and Conventions", "Numerical Stability Methods for Double-Inverted Pendulum Control", "Particle Swarm Optimization Algorithm Mathematical Foundations <strong>Authors:</strong> Documentation Expert Agent", "PSO Convergence Analysis <strong>Note:</strong> PSO convergence analysis has been integrated into the PSO theory documentation. <strong>See:</strong> <span class=\"xref myst\">PSO Optimization Complete Theory</span>", "Complete PSO Optimization Theory This section provides coverage of Particle Swarm Optimization (PSO) theory as applied to sliding mode controller parameter tuning, including mathematical foundations, convergence analysis, and multi-objective optimization strategies. ## Introduction to Particle Swarm Optimization Particle Swarm Optimization <aside class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<span class=\"docutils literal\">D:\\Projects\\main\\docs\\theory/pso_optimization_complete.md</span>, line 1)</p>\n<p>Unknown interpreted text role \u201ccite\u201d. [myst.role_unknown]</p>\n</aside>\n is a population-based metaheuristic inspired by the social behavior of bird flocking and fish schooling. In the context of control systems, PSO provides an effective framework for automated parameter tuning and multi-objective optimization. ### Biological Inspiration The algorithm mimics the collective intelligence observed in nature:", "Complete Sliding Mode Control Theory This section provides coverage of sliding mode control theory as applied to the double-inverted pendulum system, including mathematical foundations, stability analysis, and chattering mitigation strategies.", "Complete System Dynamics This section provides a derivation of the double-inverted pendulum dynamics from first principles, including the complete mathematical development, linearization analysis, and state-space representation. ## Physical System Description The double-inverted pendulum consists of a cart of mass <span class=\"math notranslate nohighlight\">\\(m_0\\)</span> moving horizontally along a track, with two pendulum links of masses <span class=\"math notranslate nohighlight\">\\(m_1\\)</span> and <span class=\"math notranslate nohighlight\">\\(m_2\\)</span> and lengths <span class=\"math notranslate nohighlight\">\\(l_1\\)</span> and <span class=\"math notranslate nohighlight\">\\(l_2\\)</span> respectively, connected in series as shown in <code class=\"xref std std-numref docutils literal notranslate\"><span class=\"pre\">fig:dip_system</span></code>. ```{figure} ../visual/dip_system_diagram.png", "Theory Overview", "AST Traversal Patterns for Code Claim Extraction <strong>Author:</strong> Documentation Expert Agent", "Claim Extraction User Guide <strong>Phase 1: Claim Extraction Infrastructure (Week 1)</strong>", "Formal Claim Extraction - Regex Pattern Reference", "Hybrid SMC Runtime Fix Technical Analysis", "Hybrid SMC Runtime Fix - Complete Technical Documentation <strong>Date</strong>: 2025-09-29", "Troubleshooting &amp; Issue Resolution", "Tutorial 02: Interactive Controller Performance Comparison", "Tutorial 03: PSO Optimization Deep Dive <strong>Status:</strong> Planned for Phase 7", "Tutorials &amp; Learning Guides", "4. Use Cases &amp; Operating Modes", "Validation API Reference &gt; <strong>Coming Soon:</strong> validation API documentation. ## Current Resources For validation APIs, see: - <strong><span class=\"xref myst\">Analysis Validation</span></strong> - Validation metrics API", "Validation &amp; Verification", "Phase 3.3 Completion Report: Simulation Result Validation Documentation <strong>Completion Date:</strong> 2025-10-07", "Simulation Result Validation Methodology <strong>Document Status:</strong> Phase 3.3 Completion - Monte Carlo and Statistical Testing Framework", "Simulation Validation Guide &gt; <strong>Note:</strong> Simulation validation is covered in multiple guides. ## Quick Links - <strong><span class=\"xref myst\">Validation Examples</span></strong> - Practical validation patterns", "Statistical Reference Tables &gt; <strong>Coming Soon:</strong> statistical reference tables for validation. ## Current Resources For statistical validation, see: - <strong><span class=\"xref myst\">Statistical Tests</span></strong> - Statistical test implementations", "Validation Examples: Practical Implementation Guide <strong>Document Status:</strong> Phase 3.3 Completion - Executable Examples", "Validation Workflow Guide &gt; <strong>Coming Soon:</strong> validation workflow documentation. ## Current Resources For validation guidance, see: - <strong><span class=\"xref myst\">Validation Examples</span></strong> - Practical validation examples and patterns", "Documentation Versioning Guide", "Visual Documentation ```{toctree}", "System Diagrams This section provides visual representations of the double-inverted pendulum system, including physical structure, coordinate systems, and signal flow diagrams. ## Physical System Architecture ### Double-Inverted Pendulum Structure ```{mermaid}", "Phase 3.1 Completion Report: PSO Convergence Visualization with MCP Integration <strong>Project:</strong> Double-Inverted Pendulum Sliding Mode Control", "PSO Convergence Visualization", "Research Workflow Guide", "Complete Integration Workflow Guide", "Workflows &amp; Integration Guides", "Quick Start Guide for Running Tests <strong>Document Version</strong>: 1.0"], "titleterms": {"": [2, 3, 12, 17, 63, 99, 104, 107, 111, 112, 113, 130, 149, 167, 187, 188, 191, 194, 207, 221, 223, 225, 228, 229, 230, 235, 236, 237, 238, 240, 278, 280, 290, 297, 300, 313], "0": [3, 8, 9, 10, 24, 45, 49, 51, 53, 58, 61, 63, 65, 72, 73, 78, 79, 80, 81, 86, 93, 94, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 116, 119, 120, 139, 151, 168, 190, 191, 193, 194, 207, 213, 215, 228, 229, 230, 236, 237, 238, 242, 243, 247, 248, 251, 252, 259, 261, 273, 274, 275, 278, 280, 282, 283, 291, 300, 310, 313, 321, 323], "00": 313, "000": 58, "000000": [300, 321], "000001": 313, "000003": 313, "0001": 313, "0002": 313, "001": [3, 72, 99, 102, 108, 109, 113, 228, 236, 274, 278, 291], "0012": 313, "0018": 313, "002": 112, "0023": 313, "004": 3, "005": 3, "0056": 313, "007": [309, 310], "0071": 313, "008": [3, 125], "00e": 35, "01": [7, 78, 99, 102, 107, 108, 109, 112, 113, 130, 164, 165, 191, 194, 207, 210, 213, 228, 229, 230, 236, 237, 238, 291, 306], "010": [3, 125], "013": 313, "016": [3, 125], "0167": 313, "019": 3, "02": [7, 72, 99, 102, 108, 109, 166, 194, 207, 228, 236, 274, 303], "020": [3, 125], "021": 125, "022": 3, "0225": 65, "023": 3, "0234": 313, "025": 72, "026": 313, "03": [101, 167, 194, 207, 230, 237, 304], "031": 313, "04": [35, 168], "0412": 313, "0421": 313, "045": 313, "0456": 313, "05": [101, 119, 169, 178, 193, 194, 207, 228, 230, 236, 237, 252, 278, 280, 310, 313], "0523": 313, "0534": 313, "056": 313, "060123": 313, "062": 313, "064": 313, "07": [7, 10, 14, 55, 57, 177, 183, 309], "071234": 313, "073": 313, "076543": 313, "08": [194, 207], "0823": 313, "0867": 313, "087": 313, "087654": 313, "089012": 313, "09": [63, 92, 122, 123, 218, 242, 244, 284, 301], "0900": 313, "091234": 313, "097": 313, "098": 313, "098234": 313, "0d": 45, "0m": 259, "0o077": 63, "1": [0, 2, 3, 4, 7, 8, 9, 10, 11, 14, 15, 17, 19, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 45, 49, 50, 51, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 139, 141, 143, 144, 145, 146, 147, 154, 155, 156, 158, 164, 165, 166, 167, 168, 169, 171, 177, 182, 183, 185, 188, 190, 191, 193, 194, 195, 196, 197, 198, 203, 204, 205, 206, 207, 208, 210, 211, 213, 215, 216, 220, 221, 223, 224, 225, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 240, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 265, 266, 268, 269, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 287, 288, 290, 291, 296, 297, 298, 299, 300, 301, 303, 304, 309, 310, 313, 318, 320, 321, 323], "10": [3, 7, 8, 10, 11, 14, 25, 26, 49, 53, 55, 57, 72, 80, 99, 102, 104, 107, 108, 109, 111, 112, 113, 116, 122, 123, 139, 144, 147, 151, 155, 177, 178, 183, 191, 193, 194, 195, 207, 210, 213, 218, 228, 229, 230, 236, 237, 238, 242, 245, 246, 247, 248, 249, 251, 252, 253, 259, 274, 275, 278, 280, 284, 291, 301, 309, 313], "100": [7, 10, 11, 24, 37, 45, 55, 56, 57, 59, 63, 65, 73, 78, 92, 99, 102, 107, 108, 109, 111, 112, 119, 120, 121, 122, 143, 190, 193, 194, 207, 215, 218, 228, 236, 245, 252, 259, 261, 274, 275, 278, 283, 313], "1000": [99, 104, 111, 112, 191, 194, 228, 236], "10000": [135, 291, 313], "100m": 99, "102": [3, 17], "1024": [111, 252], "103": [119, 120], "104": 57, "104k": 57, "105": 3, "109": 44, "10a": 25, "10b": 25, "10c": 25, "10h": 10, "10m": [111, 274], "10mb": 111, "10x": 130, "11": [3, 26, 121, 122, 125, 126, 165, 228, 236, 246, 253], "111": 3, "112": 3, "113": 284, "115": 3, "118": 10, "11a": 26, "11b": 26, "12": [3, 7, 11, 21, 43, 49, 53, 67, 72, 79, 99, 102, 103, 107, 108, 111, 127, 139, 151, 165, 194, 228, 236, 251, 252, 280, 313], "120": [3, 53, 59], "121": 11, "122": 3, "123": 313, "1234": [68, 313], "123456": 313, "123456789": 194, "124": [3, 309], "1247": 3, "125": [7, 59, 242], "1251": 3, "1263": 3, "128": 3, "129": 55, "13": [3, 228, 236, 313], "130": 61, "131": 84, "132": 3, "134": [3, 313], "1342": 313, "135": 120, "138": [3, 24, 313], "14": [3, 10, 19, 53, 228, 236, 300], "142": [3, 84], "143": 3, "1430": 3, "1436": 3, "1443": 3, "145": [3, 313], "148": 7, "14h": 10, "15": [3, 10, 11, 44, 49, 61, 72, 79, 99, 101, 102, 103, 107, 108, 111, 120, 121, 124, 126, 147, 151, 189, 193, 194, 207, 210, 228, 236, 247, 252, 275, 280], "150": [14, 51, 80, 99, 104, 108, 109, 113, 116, 120, 229, 230, 237, 238, 247, 274, 298], "151": 147, "153": 84, "155": 3, "158": 3, "15h": 10, "15mb": 210, "16": [3, 7, 8, 11, 44, 228, 236, 313], "160": [3, 72], "1631": 3, "1637": 3, "164": 10, "165": 298, "1651": 3, "167": [55, 119, 147, 313], "168": 3, "17": [3, 7, 165, 284, 300], "173": 55, "176": 3, "18": [3, 7, 49, 61, 72, 99, 102, 107, 108, 119, 120, 313], "180": [3, 111], "182": 28, "185": 3, "1892": 3, "19": [3, 55, 111], "190": 59, "1907": 3, "1912": 3, "1914": 3, "1919": 3, "192": 147, "193": 55, "1942": 3, "1948": 3, "197": 313, "1977": 3, "1983": 3, "1986": 3, "1991": [3, 123], "1992": [3, 81, 297], "1993": [3, 193], "1994": 17, "1995": [3, 123, 193, 291], "1996": 3, "1998": [3, 123, 297], "1999": 3, "1d": 202, "1e": [53, 63, 79, 99, 104, 108, 109, 112, 113, 194, 207, 228, 236, 247, 248, 251, 252, 275, 291], "1e4": 194, "1e6": [63, 194, 278], "1e8": 194, "1f": [99, 111, 112, 252], "1kn": 99, "1m": [99, 112], "1n": [99, 165], "2": [3, 7, 8, 9, 10, 11, 14, 17, 19, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 41, 45, 50, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 70, 72, 74, 76, 77, 78, 79, 80, 84, 85, 90, 91, 97, 98, 99, 101, 102, 104, 107, 108, 109, 111, 112, 113, 116, 119, 121, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 141, 143, 144, 145, 147, 154, 155, 156, 158, 165, 166, 168, 169, 171, 177, 178, 183, 185, 191, 193, 194, 195, 197, 198, 203, 204, 206, 207, 211, 213, 215, 216, 218, 220, 224, 225, 227, 228, 229, 230, 231, 234, 236, 237, 238, 240, 245, 246, 247, 248, 249, 250, 251, 252, 254, 258, 259, 261, 265, 268, 269, 271, 273, 275, 278, 280, 284, 287, 288, 290, 291, 296, 297, 298, 299, 300, 303, 309, 310, 313, 318, 320, 323], "20": [3, 9, 10, 11, 45, 49, 53, 72, 80, 99, 102, 103, 104, 107, 108, 111, 112, 113, 116, 126, 252, 259, 267, 275, 280, 310, 313], "200": [3, 99, 101, 107, 112, 313], "2000": 3, "2002": [3, 123, 193, 202, 291], "2003": [3, 123], "2005": 3, "2006": 3, "2007": 3, "2008": [3, 193], "2009": [3, 123, 193], "200k": 58, "200m": 261, "2010": 3, "2011": 193, "2012": [3, 123], "2013": 193, "2014": [3, 123], "2016": [3, 17], "2020": 8, "2024": [45, 275], "2025": [7, 10, 11, 14, 55, 57, 63, 92, 122, 123, 139, 177, 183, 210, 213, 218, 242, 244, 284, 301, 309], "205": 147, "21": [3, 45, 55, 111], "210": 3, "2106": 3, "2107": 3, "211": [7, 313], "2110": 3, "212": [3, 309], "214": 3, "2145": 313, "215": 165, "22": [3, 61, 72, 123], "220": 3, "222": 3, "223": 313, "225": 3, "23": [3, 313], "234": 313, "236": 284, "239": 165, "24": [11, 268], "245": 313, "246": 313, "24x": 14, "25": [7, 11, 14, 49, 72, 87, 99, 101, 102, 104, 107, 108, 111, 116, 247, 268, 275, 300, 313], "250": 298, "258": 11, "259": 298, "26": 313, "260": 59, "261": 3, "267": 313, "27": 61, "270": 3, "28": 284, "287": [3, 313], "289": 313, "29": [55, 63, 92, 218, 242, 244, 301], "298": 313, "2d": [156, 291], "2e": 251, "2f": [53, 78, 99, 111, 112, 215, 252], "2h": 10, "2m": 112, "2nd": [3, 166, 193], "2x": 11, "2x2": 207, "2\u03b6_max": 247, "2\u03b6_min": 247, "2\u03c0": 112, "3": [3, 7, 9, 10, 11, 14, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 41, 45, 50, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 72, 74, 76, 77, 78, 79, 80, 84, 85, 90, 91, 97, 99, 101, 102, 104, 107, 108, 109, 111, 112, 116, 119, 121, 123, 124, 125, 126, 127, 131, 132, 133, 135, 136, 138, 141, 143, 144, 145, 147, 154, 155, 156, 158, 165, 166, 167, 171, 177, 183, 191, 193, 194, 195, 197, 203, 204, 206, 207, 211, 216, 220, 224, 227, 228, 229, 230, 231, 234, 236, 237, 238, 240, 245, 246, 247, 248, 249, 250, 251, 252, 253, 258, 259, 261, 265, 268, 269, 271, 274, 275, 280, 284, 287, 288, 290, 291, 296, 297, 299, 303, 309, 310, 313, 318, 320], "30": [7, 10, 11, 63, 68, 72, 80, 104, 112, 113, 116, 124, 126, 142, 148, 190, 193, 248, 259, 268, 275, 278, 313], "300": [28, 53, 58, 111], "3000": 113, "304": 3, "305": 7, "309": 313, "312": 313, "3134": 300, "316": 10, "317": 3, "318": 17, "31kb": 318, "32": 11, "320": 3, "321654987": 194, "322": 3, "323": 3, "325": 3, "328": 3, "33": 3, "333": 61, "336": 11, "34": [55, 165, 313], "342": 3, "3421": 313, "345": 313, "3456": 313, "35": [49, 53, 72, 99, 102, 103, 108, 111, 123], "36": [268, 313], "362": 84, "364": 44, "368": 14, "37": 3, "38": 3, "387": 313, "389": 313, "39": [32, 122], "391": 313, "396": 84, "398": 313, "3a": [21, 58], "3b": 21, "3d": [53, 129, 152, 153, 156, 215, 271], "3f": [78, 99, 107, 112, 215, 247, 252, 280], "3h": 10, "3n": 165, "3rd": 3, "3x": 11, "4": [3, 7, 10, 11, 27, 28, 29, 30, 31, 33, 34, 35, 36, 41, 45, 49, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 72, 76, 77, 80, 82, 84, 85, 90, 91, 92, 97, 99, 101, 102, 104, 107, 108, 109, 111, 112, 113, 119, 123, 124, 125, 126, 127, 131, 132, 141, 143, 144, 145, 147, 154, 155, 156, 158, 165, 166, 168, 169, 171, 177, 183, 191, 193, 194, 195, 197, 201, 203, 204, 205, 206, 207, 215, 220, 223, 224, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 245, 246, 247, 248, 249, 250, 251, 252, 254, 261, 265, 269, 274, 275, 280, 287, 290, 291, 299, 306, 309, 310, 313, 318, 320, 321], "40": [7, 11, 57, 72, 104, 116, 298], "407": 84, "412": 313, "42": [193, 252], "43": [3, 280], "432": 313, "437": 28, "44": [3, 300], "445": 313, "449": 300, "45": [3, 7, 10, 59, 124, 126, 200], "453": 3, "456": 313, "4567": 313, "456789123": 194, "458": 194, "463": 84, "465": [3, 313], "47": 10, "470": 59, "471": 28, "474": 318, "477": 3, "480": 59, "483": 300, "487": 313, "489": 313, "49": 3, "492": 3, "49445": 3, "4a": [57, 58], "4b": [57, 58], "4e": 53, "4f": [53, 112, 215], "4k\u2082": 251, "4th": [61, 193, 200], "5": [3, 7, 8, 10, 11, 25, 26, 27, 28, 29, 30, 31, 45, 49, 53, 55, 57, 59, 61, 63, 67, 68, 72, 76, 77, 78, 79, 80, 85, 91, 97, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 116, 119, 121, 122, 123, 124, 126, 141, 142, 143, 144, 147, 151, 154, 156, 165, 168, 171, 177, 189, 191, 192, 193, 194, 195, 197, 201, 203, 204, 206, 207, 215, 224, 227, 228, 229, 231, 234, 236, 238, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 265, 274, 275, 280, 287, 290, 291, 297, 298, 299, 309, 310, 313, 318, 320], "50": [10, 11, 53, 80, 86, 107, 111, 112, 116, 119, 121, 151, 194, 228, 236, 247, 248, 251, 259, 275, 278, 280, 291, 298, 313], "500": [11, 59, 111, 298], "5000": 113, "500b": 112, "500mb": 111, "507": 17, "50m": [111, 261], "51": 53, "512": [165, 313], "52": [3, 10], "521": 313, "53": 53, "533": 165, "54": 53, "543": 17, "55": 280, "550": 59, "56": 3, "567": 313, "57": [3, 44], "576": 3, "58": [3, 309], "581": 3, "583": 3, "586": 3, "59": 61, "5h": 10, "5m": [111, 259], "5th": [61, 102, 108, 109, 243], "6": [3, 7, 10, 11, 14, 27, 30, 31, 50, 53, 55, 56, 57, 59, 61, 63, 72, 76, 85, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 119, 123, 126, 127, 138, 143, 144, 147, 148, 156, 167, 171, 177, 188, 190, 191, 194, 195, 197, 201, 204, 205, 206, 207, 218, 224, 227, 228, 229, 231, 234, 236, 238, 247, 248, 249, 251, 252, 253, 254, 275, 276, 278, 280, 287, 290, 291, 298, 310, 313, 318, 320], "60": [7, 11, 126, 148, 280], "600": [111, 318], "608": 165, "611": 313, "615": [3, 14], "62": [3, 53], "6216": 300, "628": 10, "63": [53, 309], "65": [3, 7, 61], "6523": 313, "653": 313, "654987321": 194, "66": 309, "67": [3, 313], "673": 309, "674": 300, "675": 300, "677": 300, "68": [98, 106], "680": 300, "684": 11, "687": 313, "689": 300, "69": [3, 247, 252], "690": 300, "698": 313, "6f": [53, 112, 275, 280], "6mu": [228, 236], "6th": 108, "6x": 120, "7": [3, 7, 10, 11, 30, 31, 44, 53, 59, 61, 63, 76, 79, 80, 97, 104, 112, 119, 123, 138, 139, 142, 144, 147, 165, 168, 171, 177, 182, 193, 195, 204, 206, 218, 224, 227, 228, 229, 231, 234, 236, 238, 242, 248, 249, 252, 287, 290, 291, 298, 301, 304, 310, 313, 318, 320], "70": 11, "700": 79, "71": [3, 53], "712": 10, "72": [10, 53, 84], "720": 32, "721": 7, "723": 7, "7231": 313, "729": 3, "73": [3, 11], "732": 3, "740": 3, "743": 313, "75": [11, 101, 111, 313], "751": 3, "752": 313, "754": [3, 290], "766": 3, "77": [3, 147, 300, 313], "776": 313, "789": 313, "7891": 313, "789123456": 194, "8": [3, 11, 17, 28, 32, 49, 53, 56, 59, 61, 72, 76, 97, 99, 101, 102, 103, 104, 107, 108, 111, 113, 123, 127, 138, 144, 147, 151, 168, 171, 177, 182, 194, 195, 201, 204, 207, 215, 218, 224, 227, 228, 230, 231, 234, 236, 237, 242, 243, 246, 247, 249, 251, 252, 253, 274, 280, 287, 290, 291, 297, 298, 301, 309, 313], "80": [11, 53, 111, 112, 119, 120, 122, 248, 313], "8123": 313, "823": 313, "8234": 313, "83": 3, "836": 313, "841": [309, 310], "85": [3, 55, 61, 87, 280], "854": 313, "86": [3, 313], "862": 291, "865": 313, "87": [3, 61], "8734": 313, "875": 3, "876": 313, "879": 3, "884": 313, "885": 3, "89": [3, 10, 313], "8901": 313, "891": 313, "892": 313, "894": 291, "8a": [24, 32], "8b": [24, 32], "8c": 32, "8h": 10, "9": [3, 7, 11, 24, 33, 39, 53, 76, 78, 80, 87, 98, 101, 106, 112, 120, 123, 144, 147, 190, 193, 195, 215, 218, 227, 228, 231, 236, 242, 246, 247, 248, 249, 251, 253, 255, 284, 287, 290, 291, 297, 298, 313], "90": [3, 55, 112], "904": 313, "905": 309, "906": 309, "907": 3, "91": 313, "912": 313, "9177": 313, "918": 3, "92": [55, 107], "920": 309, "923": 313, "93": 3, "937": 3, "94": [7, 121, 122, 123], "945": 3, "95": [9, 10, 11, 55, 94, 98, 106, 111, 114, 261, 274, 313], "95th": [310, 313], "96": 57, "963": 313, "97": 218, "971": 3, "974": 313, "9765": 313, "9798": 313, "98": 165, "9821": 313, "983": 313, "987": [309, 313], "987654321": 194, "99": [7, 11, 78, 107, 111, 112, 313], "992": 313, "998": 313, "99th": 313, "9_": 63, "9a": 33, "9b": 33, "9c": 33, "9d": [24, 33], "9e": [24, 33], "9f": [24, 33], "9g": [24, 33], "A": [3, 9, 10, 11, 41, 58, 65, 130, 147, 165, 177, 182, 193, 224, 225, 228, 229, 230, 234, 236, 237, 238, 240, 249, 261, 290, 291, 300], "As": [228, 236, 243], "At": [229, 238, 313], "Be": 266, "By": [123, 127, 222, 228, 233, 236, 267, 268, 271], "FOR": [111, 218], "For": [2, 3, 8, 98, 99, 107, 110, 111, 112, 122, 123, 130, 137, 138, 166, 171, 177, 182, 199, 207, 213, 225, 228, 229, 236, 238, 240, 247, 267, 269, 279, 280, 283, 291, 292, 307, 312, 314], "ISE": [68, 149, 251], "If": [3, 21, 102, 107, 108, 112, 141, 142, 247, 310], "In": [8, 17, 35, 111, 150, 151, 205, 225, 228, 229, 236, 238, 240, 256, 280, 293, 315], "It": [51, 61, 70, 78, 86, 99, 101, 143, 164, 167, 208, 222, 228, 233, 236], "NO": 300, "NOT": [41, 111, 147, 299], "No": [8, 11, 55, 93, 99, 107, 108, 111, 112, 119, 122, 139, 167, 171, 210, 245, 246, 252, 255, 269, 275, 280, 299], "Not": [57, 70, 84, 91, 124, 125, 142, 147, 159, 170, 177, 269, 315], "OR": 146, "On": 303, "One": [3, 267, 313], "The": [1, 3, 11, 13, 14, 35, 40, 45, 49, 50, 51, 53, 55, 61, 63, 68, 71, 72, 73, 76, 78, 79, 80, 81, 86, 88, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 130, 147, 162, 163, 164, 165, 166, 168, 193, 194, 196, 205, 207, 208, 209, 211, 213, 223, 225, 228, 229, 230, 235, 236, 237, 238, 240, 243, 246, 248, 251, 255, 259, 273, 274, 275, 278, 279, 280, 283, 284, 291, 293, 295, 300, 301], "Then": 253, "There": [225, 240], "These": [93, 130, 193, 225, 229, 238, 240, 278], "To": [0, 4, 89, 127, 130, 145, 148, 149, 150, 151, 228, 230, 236, 237, 266, 270, 313], "WITH": [71, 111], "With": [3, 15, 84, 133, 205, 228, 236, 284, 299, 321], "_": [3, 108, 111, 122, 191, 194, 207, 228, 229, 236, 238, 274, 278], "_1": 219, "_2": 219, "__init__": [26, 168], "_accelerate_converg": 252, "_adapt_pso_paramet": 252, "_analyze_performance_trend": 252, "_apply_constraint_rul": 247, "_apply_safety_limit": 278, "_assess_converg": 113, "_assess_perform": 113, "_bounds_converg": 247, "_build_constraint_graph": 247, "_calculate_composite_statu": 255, "_calculate_diversity_trend": 113, "_calculate_improvement_r": 113, "_calculate_swarm_divers": 113, "_call_count": 112, "_canonicalize_controller_typ": 17, "_check_categori": 247, "_check_converg": 63, "_check_emergency_condit": 278, "_compute_control_effort": 278, "_compute_equivalent_control": 191, "_compute_fitness_scor": 63, "_compute_overshoot": 278, "_compute_parameter_adapt": 252, "_compute_settling_tim": 278, "_compute_sliding_surfac": 191, "_compute_steady_state_error": 278, "_create_dynam": 63, "_create_emergency_fallback": 113, "_create_fallback_control": 113, "_create_fitness_evalu": 63, "_create_optimization_result": 63, "_estimate_memory_requir": 252, "_evaluate_controller_perform": 280, "_evaluate_particle_saf": 113, "_evaluate_perform": 278, "_evaluate_popul": 63, "_evaluate_single_object": 278, "_evaluation_lock": 104, "_evict_least_us": 274, "_execute_analysis_phas": 252, "_execute_optimization_loop": 252, "_execute_setup_phas": 252, "_execute_tuner_initi": 252, "_execute_validation_phas": 252, "_extract_controller_paramet": 109, "_extract_performance_metr": 63, "_fit": 250, "_generate_auto_fix": 247, "_generate_manual_act": 247, "_generate_test_st": 101, "_get_controller_bound": 63, "_get_controller_info": 17, "_get_next_vers": 247, "_get_parameter_bound": 63, "_get_safety_limit": 278, "_get_surface_deriv": 194, "_get_theoretical_bound": 278, "_histori": [80, 112], "_i": 291, "_identify_stagnation_period": 113, "_initial_st": 112, "_initialize_pso_environ": 104, "_initialize_swarm": 63, "_inner_help": 297, "_last_control": 278, "_last_error": 112, "_lock": 113, "_make_deployment_decis": 255, "_max_inst": 274, "_message_queu": 278, "_migrate_from_v1_0": 247, "_migrate_from_v1_5": 247, "_migrate_from_v2_0": 247, "_monitor_issue2_compli": 252, "_monitor_loop": 280, "_normalize_metr": 63, "_optimize_memory_usag": 252, "_pool": 274, "_prepare_optimization_config": 63, "_reset_metr": 112, "_resolve_controller_gain": [17, 72, 109], "_restructure_bounds_v1_5": 247, "_run_simul": 63, "_set_nested_valu": 247, "_setup_optimization_environ": 113, "_should_adapt_paramet": 252, "_should_apply_strategi": 252, "_should_termin": 113, "_simulate_scenario": 280, "_state_var": [80, 112], "_static": 31, "_step": [228, 236], "_subscrib": 278, "_tighten_bounds_dynam": 252, "_total_compute_tim": 112, "_update_best": 63, "_update_swarm": 63, "_usage_count": 274, "_validate_constraints_realtim": 252, "_validate_controller_gain": [17, 80, 116], "_validate_controller_specific_constraint": 104, "_validate_gain": 194, "_validate_mathematical_constraint": 194, "_validate_optimized_control": 63, "_validate_paramet": 194, "_validate_physical_constraint": 109, "_validate_pso_gain": 113, "ab": [63, 78, 99, 101, 112, 191, 194, 207, 248, 251, 278], "abc": [61, 194], "about": [15, 122, 147, 229, 238, 270, 300], "abov": [57, 194, 228, 236], "abrupt": [228, 236], "absolut": 149, "abstract": [61, 169, 194, 222, 227, 231, 233, 297], "abstractmethod": [61, 194], "academ": [0, 2, 3, 8, 11, 15, 69, 122], "acceler": [85, 140, 143, 225, 229, 238, 240, 252], "acceleration_result": 252, "accept": [12, 57, 58, 99, 120, 213, 252, 298, 313], "acceptance_criteria": 252, "access": [28, 30, 31, 41, 70, 103, 121, 122, 123, 126, 140, 145, 154, 156, 208], "accompani": [225, 240], "accomplish": [40, 218], "accord": [194, 205], "accordingli": [228, 236], "accur": [225, 228, 230, 236, 237, 240], "accuraci": [3, 45, 61, 84, 97, 121, 122, 126, 158, 163, 193, 198, 200, 207, 228, 236], "accuracy_audit": 121, "accuracy_metr": 3, "achiev": [11, 14, 24, 25, 26, 31, 56, 57, 58, 59, 67, 107, 113, 120, 168, 190, 218, 242, 243, 279, 284, 309, 318, 321], "acknowledg": [17, 138], "acquisit": 111, "across": [2, 7, 17, 44, 67, 68, 73, 99, 102, 107, 108, 109, 113, 145, 207, 208, 278, 280, 284, 310, 313], "act": [225, 240], "action": [7, 10, 11, 32, 40, 63, 93, 94, 144, 198, 224, 228, 234, 236, 243, 247, 252, 282, 283, 284, 315, 318], "activ": [89, 315], "actual": [7, 45, 57, 118, 147, 165, 182, 228, 236, 300], "actual_count": 99, "actuat": [99, 107, 112, 205, 223, 225, 228, 229, 230, 235, 236, 237, 238, 240, 251], "actuator_satur": 247, "ad": [45, 51, 94, 139, 140, 168, 228, 236, 247, 251, 275], "adapt": [3, 11, 35, 36, 61, 63, 65, 67, 69, 77, 79, 80, 81, 99, 102, 104, 107, 108, 109, 112, 116, 123, 124, 132, 147, 156, 163, 166, 169, 179, 181, 194, 195, 197, 200, 201, 204, 205, 213, 215, 220, 224, 226, 227, 228, 231, 234, 236, 239, 246, 248, 249, 250, 251, 252, 256, 258, 266, 274, 279, 280, 284, 287, 288, 289, 290, 291, 297, 300, 301, 310, 313, 318, 321], "adapt_paramet": 248, "adapt_rate_limit": [99, 108, 109], "adaptation_config": 104, "adaptation_gain": [102, 108], "adaptation_law": [102, 108], "adaptation_param": [99, 101], "adaptation_r": [99, 102, 107, 108], "adaptation_rang": 99, "adaptation_ratio": 99, "adaptive_callback": 248, "adaptive_config": [99, 102, 108], "adaptive_control": 248, "adaptive_gain": [49, 99, 108], "adaptive_param": 99, "adaptive_pso_optim": [104, 248], "adaptive_smc": [3, 17, 36, 43, 49, 55, 68, 72, 80, 99, 102, 104, 109, 112, 274, 280], "adaptive_smc_deprec": 102, "adaptive_sta": 102, "adaptive_strategi": 215, "adaptive_weight": 215, "adaptivepsocontrol": 248, "adaptiveregular": 213, "adaptivesmc": [55, 79, 107, 211], "adaptivesmcconfig": 274, "adaptivesmcoutput": 79, "add": [7, 15, 44, 51, 58, 80, 108, 109, 113, 141, 142, 147, 247, 251, 252, 267, 271, 274, 298], "add_gate_result": 252, "add_strategy_result": 252, "addison": 17, "addit": [17, 55, 57, 63, 84, 91, 101, 103, 116, 207], "address": [57, 106, 108, 115, 117, 205, 228, 236, 255, 275, 279, 280], "adequ": 313, "adjust": [35, 215, 228, 229, 236, 238, 247, 248, 252, 269, 321], "adopt": [11, 228, 229, 236, 238], "adr": 11, "advanc": [35, 70, 72, 82, 84, 99, 103, 105, 133, 135, 141, 154, 156, 157, 159, 167, 168, 169, 170, 171, 177, 183, 185, 188, 193, 224, 225, 234, 240, 248, 251, 253, 265, 267, 275, 276, 280, 284, 304, 321], "advantag": [200, 226, 239, 291], "advisori": [94, 147], "affect": [72, 255], "after": [11, 57, 99, 112, 113, 148, 155, 183, 194, 207, 276, 280, 303, 313], "after_memori": 111, "against": [63, 147, 165, 251, 252, 259], "agent": [71, 190, 218, 243, 291, 297], "aggreg": [39, 55, 99, 193, 250, 251, 310], "ai": [12, 284], "aic": 313, "aio": 8, "aiohttp": 8, "al": [8, 123, 193], "alarm": [119, 120], "alert": [25, 92, 111, 112, 245, 252, 261], "alert_histori": 111, "alert_kei": 111, "algebra": [3, 155], "algorithm": [0, 3, 36, 40, 53, 56, 57, 60, 76, 77, 78, 81, 84, 85, 97, 112, 160, 162, 163, 167, 168, 183, 191, 192, 193, 194, 201, 207, 213, 215, 217, 223, 226, 227, 228, 231, 235, 236, 239, 242, 243, 245, 246, 249, 250, 251, 258, 274, 278, 279, 280, 282, 283, 284, 287, 291, 293, 299, 300, 310], "algorithm_param": [99, 247, 252], "algorithmic_gain": 99, "alias": [17, 49, 51, 290], "alias_map": 274, "align": 310, "all": [0, 1, 3, 7, 17, 21, 33, 36, 51, 55, 56, 57, 58, 59, 61, 63, 65, 72, 73, 79, 80, 89, 92, 93, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 121, 122, 123, 125, 126, 128, 130, 145, 147, 151, 165, 168, 182, 188, 191, 192, 194, 199, 207, 208, 210, 213, 215, 218, 225, 230, 237, 240, 243, 245, 251, 252, 255, 273, 274, 275, 278, 279, 280, 281, 283, 284, 291, 318, 321, 323], "all_checks_pass": 252, "allclos": [191, 207], "allevi": 205, "alloc": 112, "allow": [111, 229, 230, 237, 238], "almost": 3, "along": [228, 229, 236, 238, 295], "alpha": [53, 99, 102, 108, 109, 168, 207, 291], "alpha1": 191, "alpha2": 191, "alpha_pow": [102, 108], "alreadi": [10, 41, 55, 91, 108, 111], "also": [7, 65, 69, 225, 228, 236, 240], "altair": 8, "altern": [21, 58, 112, 262, 263], "alwai": [168, 310], "amplif": [119, 290], "amplitud": [112, 259], "an": [3, 120, 222, 225, 228, 229, 230, 233, 236, 237, 238, 240, 284, 293], "analogi": 163, "analys": [230, 237], "analysi": [3, 7, 10, 11, 19, 25, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 55, 56, 57, 58, 59, 63, 65, 66, 67, 68, 71, 77, 81, 84, 87, 88, 95, 97, 98, 99, 104, 107, 108, 111, 112, 117, 119, 120, 124, 134, 135, 136, 149, 150, 156, 158, 160, 161, 163, 169, 170, 171, 177, 178, 183, 187, 190, 191, 194, 195, 197, 199, 200, 201, 202, 204, 205, 206, 207, 209, 213, 215, 218, 224, 227, 228, 229, 231, 234, 236, 238, 246, 247, 249, 252, 253, 259, 261, 275, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 303, 307, 309, 310, 313, 318, 320], "analysis_result": [108, 252], "analyt": 309, "analyz": [53, 56, 57, 61, 67, 99, 108, 170, 177, 187, 193, 252, 269, 280, 318], "analyze_control_bandwidth": 99, "analyze_converg": [63, 252], "analyze_cross_refer": 7, "analyze_pso_st": 291, "angl": [63, 68, 86, 112, 161, 198, 223, 225, 228, 229, 235, 236, 238, 240, 259, 278], "angle_error": 63, "angle_limit": 63, "angle_limit_exceed": 278, "angular": [112, 229, 238], "ani": [17, 21, 51, 61, 63, 72, 79, 80, 99, 101, 104, 108, 109, 112, 113, 116, 122, 168, 194, 207, 247, 250, 252, 274, 278, 321], "anim": [28, 136, 140, 141, 142, 143, 145, 267, 268, 269], "animationdur": 140, "annaswami": 3, "annot": 278, "annual": 142, "anova": [313, 318], "answer": [121, 122], "anti": [12, 41, 85, 251], "anyth": [228, 236], "api": [7, 11, 12, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 76, 82, 95, 98, 103, 105, 107, 112, 119, 121, 127, 128, 130, 131, 132, 133, 134, 135, 136, 143, 150, 154, 171, 216, 220, 275, 307, 308], "app": 31, "appear": [27, 140, 228, 236], "append": [53, 63, 99, 111, 112, 113, 191, 194, 207, 215, 247, 248, 251, 252, 274, 278, 280], "appendix": [10, 11, 58, 65, 121, 171, 177, 182, 249, 290, 298], "appli": [3, 24, 44, 45, 63, 104, 111, 112, 123, 165, 168, 225, 228, 229, 230, 236, 237, 238, 240, 247, 252, 278, 291, 293, 294], "applic": [3, 15, 53, 67, 74, 116, 119, 166, 197, 199, 225, 240, 261, 265, 274, 290, 291, 310, 321], "applied_fix": 247, "applied_optim": 252, "apply_auto_fix": 247, "apply_safety_filt": 63, "apply_suppress": 111, "approach": [3, 20, 37, 53, 57, 58, 72, 73, 98, 115, 116, 117, 118, 119, 120, 150, 193, 201, 225, 229, 238, 240, 254, 282, 297, 310], "appropri": [121, 133, 225, 240], "approv": [40, 93, 218], "approxim": [3, 79, 120, 161, 194, 195, 198, 206, 227, 228, 230, 231, 236, 237], "ar": [3, 12, 17, 27, 36, 55, 57, 63, 65, 71, 92, 99, 107, 108, 110, 111, 121, 122, 130, 147, 199, 207, 223, 225, 228, 229, 230, 235, 236, 237, 238, 240, 291, 323], "arang": [53, 191], "arbitrari": [228, 236], "architectur": [4, 11, 17, 20, 28, 30, 31, 34, 38, 50, 51, 53, 57, 59, 61, 62, 63, 64, 70, 71, 72, 73, 77, 84, 85, 93, 100, 101, 102, 103, 104, 107, 109, 113, 114, 116, 118, 130, 132, 143, 153, 155, 168, 171, 174, 177, 185, 194, 203, 213, 217, 218, 220, 222, 224, 230, 233, 234, 237, 247, 248, 249, 250, 252, 255, 261, 264, 274, 275, 278, 279, 284, 298, 317], "area": [108, 111, 123, 245, 256], "arg": [17, 101, 104, 107, 112, 113, 215, 278], "aria": 143, "aris": [228, 236], "around": [61, 84, 205], "arrai": [17, 41, 44, 45, 80, 101, 102, 104, 107, 108, 109, 111, 112, 113, 130, 140, 155, 191, 194, 207, 208, 216, 247, 252, 274, 278, 291], "array_kei": 247, "art": 3, "artifact": [121, 190, 243, 290, 318], "as_complet": 113, "asarrai": [113, 228, 236], "ascher": 3, "ascii": 71, "ask": [11, 122, 253, 267, 271], "aspect": 321, "assert": [72, 107, 108, 191, 194, 207, 261], "assess": [11, 19, 24, 25, 26, 32, 37, 39, 44, 57, 65, 71, 93, 111, 113, 120, 121, 126, 190, 218, 228, 229, 236, 238, 242, 243, 244, 245, 252, 254, 255, 284, 300, 301, 313], "asset": 266, "assist": 284, "assum": [99, 108, 111, 112, 228, 236], "assumpt": [225, 228, 236, 240, 291, 310, 313], "assur": [55, 58, 64, 97, 114, 243, 252], "ast": [10, 14, 297], "asymptot": [3, 168, 207, 228, 236, 288], "atol": [228, 236], "atom": 284, "attach": [205, 225, 240], "attack": 63, "attempt": 116, "attent": 37, "attract": [205, 228, 229, 236, 238], "attribut": [0, 2, 8, 15, 17, 61, 72, 79, 80, 81, 104, 111, 112, 113, 121, 124, 126, 143, 250, 251, 252, 300], "attributeconfig": 72, "attribution_audit_executive_summari": 121, "audienc": [98, 182], "audit": [7, 31, 121, 124, 126, 252], "aurora": 271, "authent": 70, "author": [63, 122, 123, 169, 291, 297, 299], "auto": [11, 52, 94, 102, 130, 194, 247], "auto_fix": 247, "auto_migr": 102, "autodoc": [24, 33], "autom": [4, 7, 10, 11, 14, 27, 37, 57, 70, 73, 92, 98, 104, 108, 113, 125, 147, 185, 188, 209, 222, 229, 233, 238, 252, 254, 256, 261, 284, 293, 298, 315], "automat": [3, 51, 70, 93, 101, 102, 104, 107, 111, 112, 113, 128, 133, 210, 228, 236, 247, 252, 275, 280, 283, 315], "automatica": [3, 11], "autonom": 3, "autosummari": 11, "auxiliari": 79, "avail": [45, 49, 51, 53, 55, 84, 102, 104, 111, 112, 137, 153, 207, 230, 237, 252, 275, 278, 305], "available_memori": 252, "averag": [65, 111, 112, 113, 215, 228, 236, 310], "average_controller_creation_time_m": 112, "average_cpu_utilization_perc": 112, "average_creation_time_m": 111, "average_fit": [104, 112], "average_fitness_computation_time_m": 112, "average_integration_scor": 101, "average_memory_usag": 112, "average_memory_usage_perc": 112, "average_simulation_time_m": 112, "average_tim": 112, "avg": [111, 112, 215, 313], "avg_cpu": 112, "avg_creation_tim": 112, "avg_damping_ratio": 252, "avg_evaluation_tim": 113, "avg_fit": 215, "avg_fitness_tim": 112, "avg_memori": 112, "avg_simulation_tim": 112, "avg_tim": [111, 113], "avg_time_m": 112, "avg_zeta": 252, "avoid": [12, 41, 116, 228, 236, 250, 252, 297], "aw": [90, 91], "awai": [191, 207], "awar": [12, 70, 297], "ax": 53, "axhlin": 53, "axi": [53, 79, 194, 207, 251], "azur": 91, "b": [0, 3, 4, 9, 28, 41, 58, 65, 165, 177, 228, 229, 236, 238, 251, 261, 290, 291], "back": [7, 70, 111], "backbon": 193, "backend": [282, 283], "background": [3, 127, 164, 183, 210, 223, 228, 235, 236, 267, 268, 271], "backport": 315, "backup": [70, 92, 108, 111], "backup_fil": 108, "backup_index": 254, "backward": [50, 76, 80, 102, 228, 236, 251, 274, 275], "bad": [12, 72, 168], "badg": 266, "balanc": [53, 77, 79, 85, 113, 202, 228, 229, 236, 238, 248, 251, 313], "band": 290, "bandwidth": [99, 104, 107], "bandwidth_analysi": 99, "bandwidth_ok": 99, "bandwidth_ratio": 99, "banner": 315, "bar": [53, 149, 157, 159, 169], "bare": 79, "barrier": [3, 201, 228, 236], "base": [1, 3, 10, 11, 16, 37, 41, 45, 53, 61, 63, 67, 68, 72, 78, 80, 86, 99, 101, 104, 107, 118, 131, 147, 162, 172, 187, 193, 194, 207, 215, 216, 220, 222, 224, 225, 228, 233, 234, 236, 240, 248, 251, 252, 261, 273, 274, 278, 284, 290, 293, 297, 318, 321], "base_config": [63, 109], "base_control": 278, "base_thick": 194, "base_threshold": 194, "basedynamicsmodel": 61, "baselin": [25, 53, 78, 165, 166, 167, 183, 228, 236, 252, 280, 310], "baseline_control": 280, "baseline_hyperparamet": 53, "baseline_valu": 53, "basemodel": 72, "baseorchestr": 61, "bash": [7, 44, 92, 121, 123, 128, 146, 148, 150, 151, 166, 168, 182, 254, 282, 283, 298, 321, 323], "basic": [20, 49, 51, 57, 59, 61, 76, 77, 78, 84, 85, 91, 98, 99, 104, 111, 119, 128, 131, 133, 135, 148, 149, 150, 154, 156, 159, 167, 170, 171, 177, 182, 213, 219, 220, 248, 251, 253, 276, 280, 304, 321, 323], "basic_function": 111, "basin": [228, 236], "batch": [7, 57, 59, 61, 84, 116, 133, 135, 170, 171, 211, 216, 246, 250, 251], "batch_siz": 113, "batchorchestr": [61, 203], "batchresultcontain": 61, "bdf": [228, 236], "beautif": 71, "becaus": [225, 228, 229, 236, 238, 240], "becom": [35, 205, 228, 229, 236, 238, 291], "been": [6, 45, 47, 89, 112, 147, 182, 194, 243, 259, 291, 292], "befor": [49, 53, 57, 67, 81, 93, 94, 108, 167, 169, 194, 207, 224, 228, 234, 236, 252, 274, 300, 301, 303, 310, 320], "before_memori": 111, "begin": [219, 229, 238, 291], "beginn": [130, 164], "behav": [205, 228, 236], "behavior": [45, 70, 85, 107, 144, 147, 167, 193, 194, 202, 207, 293], "behaviour": [193, 228, 236], "behind": 192, "below": [94, 111], "benchmark": [3, 7, 8, 41, 54, 57, 58, 65, 66, 67, 68, 76, 77, 81, 84, 85, 93, 110, 111, 116, 143, 151, 162, 164, 166, 177, 186, 205, 208, 223, 225, 229, 235, 238, 240, 245, 246, 252, 259, 274, 284, 298, 299, 309, 310], "benchmark_factory_perform": 274, "benchmark_metadata": 68, "benchmark_perform": 111, "benchmarksuit": 309, "benefit": [14, 45, 275], "bergh": 3, "bernstein": 3, "best": [8, 17, 24, 32, 33, 35, 36, 41, 53, 57, 63, 65, 72, 79, 80, 91, 94, 98, 108, 112, 113, 131, 150, 154, 159, 166, 167, 168, 169, 170, 171, 182, 203, 215, 228, 229, 236, 238, 252, 253, 271, 275, 280, 282, 290, 299, 300, 310, 313, 315], "best_control": 280, "best_cost": [63, 112, 252, 275, 280], "best_cost_histori": 251, "best_fit": [53, 104, 112, 113, 215], "best_fitness_achiev": [112, 113], "best_fitness_histori": [113, 248], "best_gain": [63, 112, 252, 275, 280], "best_nam": 280, "best_object": 53, "best_po": 252, "better": [49, 107, 280, 313], "between": [3, 53, 57, 104, 112, 130, 134, 184, 222, 223, 225, 228, 229, 233, 235, 236, 238, 240, 274, 275, 278, 280], "bhat": 3, "bia": [309, 313], "bias\u00b2": 313, "bib": 123, "bibliographi": [3, 32, 69, 95, 122, 187, 256], "bibtex": [8, 17, 24, 32, 33, 69, 121, 122, 123, 126], "bigl": [228, 229, 236, 238], "bigr": [228, 229, 236, 238], "bin": [53, 117, 169, 178, 248], "bio": [162, 167], "biolog": 293, "bird": [167, 193, 228, 236, 293], "birkh\u00e4us": 3, "bit": [266, 267, 268, 269, 271], "black": 8, "blackwel": 3, "block": [10, 11, 62, 94, 137, 139, 141, 142, 143, 144, 145, 255, 258, 275, 299, 313], "blocker": [10, 190], "blue": [53, 111], "blue_green_deploy": 111, "bmatrix": [219, 229, 238, 291], "bnf": 299, "bodi": [225, 240], "bold": 53, "bonferroni": 313, "book": [3, 17, 123], "bool": [49, 51, 61, 63, 79, 80, 104, 112, 113, 251, 278], "boolean": 104, "bootstrap": [149, 309, 313], "borda": 310, "both": [36, 81, 112, 194, 205, 207, 228, 236, 252], "bound": [3, 20, 45, 53, 57, 58, 61, 63, 73, 79, 84, 99, 104, 107, 108, 109, 111, 112, 113, 116, 120, 131, 132, 133, 168, 170, 183, 191, 194, 201, 204, 205, 207, 246, 247, 248, 249, 251, 252, 261, 275, 278, 287, 290], "boundari": [3, 35, 63, 103, 107, 112, 156, 163, 191, 194, 195, 205, 206, 207, 226, 227, 228, 230, 231, 236, 237, 239, 290, 297], "boundary_lay": [72, 78, 99, 102, 103, 108, 109, 194, 207, 274], "boundary_layer_thick": [102, 108], "boundarylay": [194, 207], "bounded": 3, "bounds_arrai": 112, "bounds_correct": 247, "bounds_low": 104, "bounds_map": [107, 116], "bounds_max": 191, "bounds_min": 191, "bounds_tighten": 252, "bounds_upp": 104, "bounds_us": 112, "boundsoptimizationstrategi": 58, "bowl": 156, "box": 157, "branch": [261, 315], "break": [63, 113, 142, 147, 210, 275], "breakdown": [7, 11, 24, 25, 32, 218, 224, 234, 242], "bridg": [57, 58, 99, 104, 130, 222, 226, 233, 239, 275, 278], "broadcast": [155, 216], "broader": [3, 274], "broken": [7, 94], "broken_link": 7, "brows": 271, "browser": [27, 28, 30, 31, 137, 139, 140, 142, 143, 145, 151, 152, 153, 156, 157, 265, 318], "br\u00e9geault": 3, "bu": [229, 238, 278], "bu_": [228, 236], "budget": [57, 58, 133, 309], "buffer": 168, "bug": [40, 119, 144], "build": [2, 17, 24, 25, 26, 27, 28, 29, 30, 32, 91, 138, 142, 247, 315], "builder": 158, "built": [15, 30, 31, 88, 91, 280], "burden": 11, "burton": 3, "butcher": 3, "button": [140, 141, 142, 145, 154], "buttontitl": 140, "buzzword": 12, "byte": [11, 297], "c": [3, 9, 28, 61, 88, 225, 229, 238, 240, 247, 261], "c1": [53, 99, 112, 191, 215, 225, 240, 247, 248, 291, 313, 318], "c2": [53, 99, 112, 191, 215, 225, 240, 247, 248, 291, 313, 318], "c_": [229, 238], "c_1": [53, 291], "c_2": [53, 291], "c_i": 3, "c_idx": 247, "c_max": 247, "c_max_from_lambda": 247, "c_min": 247, "c_min_from_lambda": 247, "cach": [17, 29, 31, 104, 111, 154, 155, 220, 284, 299], "cache_entries_remov": 111, "cache_s": 104, "calcul": [101, 112, 113, 119, 154, 194], "calibr": [119, 120], "call": [17, 53, 104, 112, 207, 228, 236, 300], "call_count": 112, "callabl": [80, 113, 251, 252, 278], "callback": [53, 278, 280], "cambridg": 3, "can": [17, 35, 40, 44, 102, 111, 145, 205, 225, 228, 229, 236, 238, 240, 255, 291, 321], "canari": 111, "canary_metr": 111, "canary_success": 111, "cancel": [108, 113, 228, 229, 236, 238, 290], "candid": [63, 78, 104, 107, 204, 207, 228, 229, 236, 238, 287], "candidate_control": 63, "cannot": [11, 102, 228, 236, 274, 310, 313], "canon": [3, 205, 222, 233, 291], "capabl": 321, "captur": 183, "card": [267, 269, 271], "carefulli": [229, 238], "carlo": [61, 97, 119, 135, 149, 171, 178, 228, 236, 251, 284, 290, 309, 310, 313], "cart": [63, 81, 112, 168, 198, 205, 223, 225, 228, 229, 235, 236, 238, 240, 259, 289, 295], "cart_mass": 193, "cascad": 255, "case": [17, 45, 61, 72, 107, 111, 116, 119, 140, 169, 194, 196, 197, 202, 219, 248, 251, 267, 268, 271, 284, 290, 291, 299, 306, 310, 313, 323], "catalog": 17, "catastroph": 290, "catch": 275, "categor": 7, "categori": [7, 10, 11, 25, 34, 53, 107, 112, 115, 119, 123, 124, 193, 196, 218, 243, 245, 247, 264, 271, 281, 323], "category_error": 247, "caus": [7, 24, 35, 81, 99, 109, 117, 119, 120, 163, 194, 205, 228, 236, 247, 249, 300], "cd": [11, 16, 24, 94, 188, 281, 282, 283], "cdn": 141, "cdot": [88, 228, 236], "cell": [29, 154], "center": 278, "centr": [225, 229, 238, 240], "central": [50, 208, 213, 274, 278], "centrifug": [198, 229, 238], "certif": 261, "certifi": 0, "chain": [225, 240], "challeng": [25, 26, 27, 29, 31, 33, 57, 101, 134, 143, 161, 166, 168, 205, 223, 225, 228, 235, 236, 240, 310], "chang": [1, 5, 27, 70, 99, 102, 108, 125, 139, 141, 142, 145, 147, 164, 165, 207, 225, 228, 236, 240, 247, 259, 269, 275, 306], "changelog": [1, 139], "channel": [141, 205], "chaotic": [225, 240], "chapter": [3, 230, 237], "charact": 63, "character": [3, 291], "characteris": [228, 236], "characterist": [77, 81, 84, 85, 86, 104, 112, 119, 143, 147, 166, 197, 201, 213, 220, 251], "chart": [27, 28, 57, 65, 67, 149, 153, 157, 159, 318], "chatgpt": [16, 187, 188], "chatter": [3, 35, 72, 77, 78, 79, 84, 85, 86, 99, 102, 107, 124, 132, 156, 163, 166, 183, 194, 195, 197, 205, 227, 228, 229, 230, 231, 236, 237, 238, 251, 290, 294, 297], "chattering_penalti": 248, "chattering_reduct": 99, "chattering_toler": 36, "cheat": [267, 298], "check": [7, 21, 27, 30, 44, 45, 51, 53, 61, 63, 70, 77, 80, 90, 94, 99, 104, 108, 111, 112, 113, 115, 119, 121, 125, 126, 146, 147, 168, 194, 204, 207, 208, 211, 247, 248, 249, 251, 252, 254, 269, 274, 278, 300, 320], "check_backward_compat": 111, "check_converg": [53, 251], "check_dependency_upd": 111, "check_deprecated_paramet": 108, "check_performance_alert": 112, "check_safety_condit": 252, "check_stabl": 207, "checkbox": 154, "checker": [56, 57], "checklist": [8, 11, 12, 23, 29, 31, 56, 58, 84, 92, 93, 97, 115, 117, 121, 124, 125, 126, 137, 138, 142, 167, 169, 175, 177, 183, 245, 249, 251, 252, 254, 261, 269, 271, 290, 300, 320], "checkpoint": 70, "checksum": 177, "chen": 3, "chetan": 17, "chi": [3, 191, 291], "chief": [228, 236], "chirp": 259, "choic": [36, 65], "choos": [133, 135, 150, 183, 203, 228, 236, 269], "choppi": 145, "chosen": [207, 228, 229, 236, 238], "ci": [11, 16, 24, 34, 94, 188, 281, 282, 283, 310, 313], "circular": 210, "citat": [0, 2, 3, 4, 8, 13, 17, 69, 121, 122, 123, 124, 125, 126, 187, 256, 257, 297, 298, 299], "citation_report": 121, "cite": [2, 15, 122, 123], "citizen": 248, "claim": [3, 12, 121, 122, 291, 297, 298, 299, 310], "claim_extract": 298, "claims_inventori": 298, "clamp": [63, 162, 247, 250, 251], "clariti": 102, "class": [3, 9, 10, 11, 13, 17, 49, 50, 51, 53, 55, 56, 58, 61, 63, 72, 76, 79, 80, 97, 99, 101, 103, 104, 107, 109, 111, 112, 113, 116, 130, 135, 168, 191, 194, 203, 207, 208, 215, 225, 240, 247, 248, 250, 251, 252, 255, 261, 273, 274, 278, 280, 297, 300, 309], "classic": [3, 17, 61, 65, 67, 76, 78, 80, 99, 102, 103, 104, 107, 108, 109, 111, 112, 116, 123, 124, 125, 128, 132, 148, 156, 158, 163, 164, 166, 168, 169, 182, 183, 191, 194, 195, 196, 197, 201, 205, 206, 207, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 251, 253, 275, 279, 280, 287, 291, 297, 313, 318, 321], "classic_smc": [3, 55, 80, 274], "classical_adapt": [99, 102, 108], "classical_config": [99, 102, 108], "classical_gain": [99, 108], "classical_param": 99, "classical_smc": [17, 36, 43, 49, 68, 72, 80, 99, 102, 103, 104, 109, 111, 112, 247, 252, 274, 280], "classical_smc_deprec": 102, "classical_smc_technical_guid": 7, "classical_sta": 102, "classicalsmc": [55, 78, 79, 107, 191, 211, 297], "classicalsmcconfig": [103, 194, 196, 207, 274, 275], "classicalsmcoutput": 79, "classif": [44, 247, 261], "classifi": [228, 236, 252], "classroom": 31, "claud": [39, 70, 187, 267, 271], "clean": [80, 113, 168, 210], "cleanup": [111, 113, 168, 210, 211], "cleanup_blue_environ": 111, "cleanup_cach": 111, "cleanup_green": 111, "clear": [57, 67, 72, 93, 109, 116, 165, 208], "clearcodeblockst": 143, "clerc": [3, 193, 202, 246, 291], "cli": [5, 91, 147, 150, 165, 208, 265, 270], "client": [128, 177], "clip": [63, 104, 112, 191, 194, 207, 228, 236, 247, 278], "clone": [121, 124, 146], "close": [3, 104, 119, 120, 205, 207, 229, 238], "cloud": [90, 91], "code": [5, 8, 11, 14, 17, 20, 23, 27, 29, 31, 37, 51, 55, 56, 57, 59, 61, 71, 81, 84, 91, 94, 121, 125, 126, 131, 137, 139, 141, 142, 143, 144, 145, 153, 154, 155, 171, 178, 225, 227, 228, 229, 231, 236, 238, 240, 245, 247, 258, 261, 275, 297, 298, 300, 309, 313, 318], "code_extractor": 298, "code_review_autom": 300, "codebas": [17, 41, 71, 102, 195, 298, 299], "codeblock": 143, "codeblockst": 143, "codeclaimextractor": 297, "coeff": 313, "coeffici": [3, 53, 72, 99, 162, 191, 215, 228, 229, 236, 238, 249, 251, 252, 259, 310], "coetse": 3, "cognit": [53, 162, 215, 228, 229, 236, 238, 248, 313], "cognitive_weight": 215, "cohen": [149, 313], "collabor": 243, "collaps": [137, 139, 141, 142, 143, 144, 145, 251], "collapseal": 143, "collapsecodeblock": 143, "collapsedicon": 140, "collect": [88, 111, 113, 119, 120, 210, 228, 229, 236, 238, 252, 293, 310, 313, 320], "collect_daily_metr": 111, "collect_metr": 252, "colon": 299, "color": [53, 141, 263, 269], "colour": [228, 236], "column": 65, "com": [17, 39, 229, 238], "combin": [63, 78, 81, 86, 108, 166, 194, 207, 225, 228, 229, 230, 236, 237, 238, 240, 259, 269, 279, 301], "come": [307, 312, 314], "comm_config": 278, "command": [25, 34, 55, 126, 128, 147, 150, 165, 170, 177, 182, 183, 189, 208, 211, 222, 230, 233, 237, 267, 281, 282, 290, 298, 323], "comment": [86, 300], "commerci": 8, "commit": [10, 12, 25, 32, 33, 37, 40, 44, 70, 89, 94, 282, 300], "common": [7, 11, 20, 34, 35, 53, 61, 70, 77, 84, 85, 91, 94, 98, 115, 116, 117, 125, 130, 142, 144, 148, 151, 158, 170, 185, 211, 228, 236, 252, 253, 254, 265, 267, 269, 281, 282, 283, 290, 297, 310, 313, 321, 323], "commonli": [228, 236], "commun": [11, 158, 261, 278, 284], "communication_config": 278, "communication_failur": 278, "comp": 65, "compact": [3, 198], "compar": [3, 77, 118, 149, 169, 170, 225, 226, 227, 228, 231, 236, 239, 240, 280, 287, 313, 318], "compare_controller_perform": 280, "comparison": [3, 7, 14, 25, 28, 29, 30, 31, 36, 40, 41, 53, 57, 65, 68, 84, 85, 124, 132, 134, 135, 136, 149, 154, 156, 157, 158, 159, 162, 163, 166, 169, 177, 183, 184, 193, 197, 198, 199, 200, 203, 205, 219, 220, 227, 231, 280, 291, 297, 303, 309, 310, 313, 318], "comparison_data": 280, "compat": [20, 28, 30, 31, 38, 50, 51, 53, 61, 73, 76, 80, 99, 102, 104, 111, 116, 128, 140, 141, 142, 156, 157, 247, 251, 265, 269, 274, 275, 278], "compatibility_issu": 247, "compens": 205, "compet": 321, "compil": [8, 41, 216, 220, 299], "complement": 178, "complementari": [228, 236], "complet": [0, 3, 4, 6, 7, 11, 14, 16, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36, 40, 47, 51, 52, 55, 56, 57, 58, 59, 61, 63, 66, 67, 69, 72, 77, 78, 82, 85, 98, 99, 102, 103, 104, 107, 108, 111, 112, 121, 126, 128, 131, 132, 135, 138, 156, 169, 177, 178, 182, 188, 191, 192, 194, 198, 205, 208, 243, 251, 252, 254, 255, 256, 268, 273, 275, 280, 284, 292, 293, 294, 295, 297, 300, 301, 308, 309, 310, 313, 318, 321], "complete_pso_optimization_exampl": 112, "complete_research_workflow": 280, "completed_count": 113, "complex": [3, 40, 53, 57, 84, 108, 112, 116, 119, 193, 197, 215, 222, 228, 233, 236, 283, 284, 291, 297, 299], "complex_chang": 102, "complex_param": 102, "complianc": [8, 11, 15, 71, 76, 190, 243, 247, 252, 261], "compliance_stat": 252, "compliance_valid": 255, "compliancevalidationpath": 255, "compliant": 252, "compliant_mask": 252, "compliant_particl": 252, "compon": [20, 28, 50, 56, 57, 59, 63, 64, 73, 84, 93, 100, 107, 111, 118, 127, 128, 164, 171, 190, 194, 201, 203, 207, 213, 218, 222, 225, 233, 240, 242, 245, 250, 251, 255, 258, 261, 267, 268, 269, 270, 271, 278, 280, 284, 298, 323], "compos": [11, 63, 91, 229, 238], "composit": 256, "comprehens": [55, 76, 80, 141, 142], "comprehensive_health_check": 111, "compress": 111, "compris": [225, 240], "compromis": [228, 236], "comput": [3, 8, 36, 49, 51, 61, 63, 65, 77, 78, 84, 101, 104, 111, 112, 113, 116, 119, 136, 147, 166, 168, 191, 193, 194, 195, 197, 198, 200, 203, 204, 206, 207, 215, 216, 220, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 249, 250, 251, 252, 278, 279, 284, 287, 290, 291, 297, 299, 309, 310], "computation": 291, "computation_tim": 112, "computational_resourc": 36, "compute_chattering_index": 78, "compute_confidence_interv": 251, "compute_control": [49, 51, 79, 80, 81, 101, 104, 111, 112, 116, 168, 191, 194, 207, 228, 236, 278, 280, 297, 300], "compute_deriv": 194, "compute_divers": 215, "compute_dynam": 61, "compute_fit": 63, "compute_fitness_cost": 251, "compute_graded_penalti": 251, "compute_is": 78, "compute_lyapunov_funct": 191, "compute_multi_objective_fit": 112, "compute_rm": 78, "compute_switching_control": 194, "compute_switching_funct": [194, 207], "compute_tim": 112, "compute_validation_metr": 112, "concaten": 33, "concept": [197, 200, 230, 237, 279], "concern": [65, 116, 194], "concert": 53, "conclus": [11, 24, 25, 26, 27, 28, 29, 31, 32, 33, 39, 40, 41, 56, 65, 67, 76, 79, 80, 119, 120, 243, 246, 254, 274, 275, 278, 279, 284, 310, 313, 321], "concret": [61, 224, 234], "concurr": [17, 103, 107, 111, 116, 283], "concurrent_cr": 111, "condit": [3, 35, 41, 53, 70, 78, 99, 104, 107, 111, 119, 120, 164, 165, 170, 171, 183, 191, 194, 202, 204, 206, 207, 213, 218, 220, 225, 228, 236, 240, 246, 251, 278, 279, 280, 284, 290, 291, 310, 313], "conf": [28, 30, 31, 315], "confer": 3, "confid": [11, 149, 218, 228, 236, 251, 299, 310, 313, 321], "confidence_interv": 251, "config": [7, 10, 17, 26, 51, 53, 63, 72, 73, 80, 81, 101, 104, 105, 107, 109, 111, 112, 113, 116, 130, 131, 134, 140, 146, 164, 168, 183, 193, 194, 207, 224, 225, 226, 230, 234, 237, 239, 240, 247, 248, 250, 251, 252, 253, 273, 274, 275, 282, 300], "config_class": [51, 103, 274], "config_cont": [63, 68], "config_data": 108, "config_file_path": 108, "config_gain": 72, "config_hash": [68, 274], "config_larg": 194, "config_old": 108, "config_path": [53, 63, 108], "config_smal": 194, "configclass": 51, "configdict": 49, "configerror": 72, "configur": [8, 11, 17, 18, 27, 28, 29, 30, 31, 34, 46, 49, 51, 52, 53, 56, 61, 63, 68, 72, 73, 77, 80, 81, 84, 85, 86, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 107, 108, 109, 111, 112, 116, 117, 119, 120, 130, 131, 134, 135, 139, 140, 141, 147, 158, 165, 166, 168, 170, 177, 185, 193, 194, 196, 198, 200, 201, 203, 207, 215, 220, 223, 224, 225, 226, 228, 229, 234, 235, 236, 238, 239, 240, 245, 247, 248, 250, 251, 252, 253, 265, 273, 274, 275, 276, 277, 278, 280, 283, 290, 300, 313, 315], "configuration_schema": 7, "configurationerror": [251, 274], "configurationerrorhandl": 247, "configurationmigr": 247, "configurationmigrationutil": 108, "configurationqualityg": 252, "confirm": [108, 121, 147], "conflict": [34, 70, 109, 117, 121, 122, 258, 269], "conftest": [34, 151, 283], "confus": 310, "connect": [177, 295], "consequ": [227, 231], "conserv": [77, 84, 99, 104, 107, 134, 200, 219, 220, 313], "consid": [147, 202, 230, 237, 279, 291, 297, 313], "consider": [20, 27, 70, 90, 104, 116, 137, 139, 141, 143, 171, 180, 185, 191, 195, 204, 208, 226, 239, 246, 279, 280, 291], "consist": [29, 45, 50, 53, 57, 61, 63, 80, 99, 102, 104, 112, 121, 164, 168, 194, 204, 207, 213, 225, 228, 229, 236, 238, 240, 247, 251, 265, 274, 295, 310], "consol": [30, 215], "consolid": [6, 32, 47], "constant": [104, 225, 228, 236, 240, 250, 258, 288, 289], "constitut": [225, 240], "constrain": [3, 229, 238, 247], "constraint": [29, 51, 53, 63, 68, 73, 74, 80, 84, 104, 107, 109, 112, 120, 133, 147, 168, 194, 197, 201, 206, 220, 245, 247, 249, 252, 284, 290], "constraint_graph": 247, "constraint_result": 252, "constraint_viol": 252, "constraintpropag": 247, "constrict": [53, 162, 191, 202, 291], "construct": [3, 44, 46, 48, 54, 60, 172, 173, 174, 175, 176, 179, 180, 181, 184, 208], "contact": [121, 142], "contain": [16, 46, 48, 54, 59, 60, 61, 63, 91, 108, 112, 165, 171, 172, 173, 174, 175, 176, 179, 180, 181, 192, 194, 225, 228, 229, 236, 238, 240, 266, 274], "container": 11, "content": [0, 3, 4, 8, 11, 15, 16, 17, 27, 29, 35, 46, 48, 49, 53, 54, 60, 61, 63, 65, 72, 73, 77, 78, 79, 80, 81, 84, 85, 86, 91, 93, 107, 112, 116, 117, 119, 120, 131, 132, 133, 134, 135, 136, 143, 148, 149, 150, 151, 161, 162, 163, 170, 172, 173, 174, 175, 176, 179, 180, 181, 184, 191, 193, 197, 198, 200, 201, 202, 203, 205, 208, 215, 216, 220, 241, 245, 248, 261, 273, 274, 275, 276, 278, 279, 280, 283, 297, 298, 299, 300, 304, 310, 313, 320, 321], "context": [3, 11, 12, 74, 98, 112, 121, 126, 135, 203, 256, 293, 297, 299], "continu": [3, 53, 79, 84, 85, 104, 111, 112, 113, 166, 167, 194, 206, 207, 228, 229, 230, 236, 237, 238, 245, 251, 252, 261, 275, 280, 283, 321], "contract": [11, 62, 76, 109, 190, 250, 251, 278], "contribut": [5, 11, 26, 82, 127, 137, 218, 228, 236, 246, 256, 270, 309], "contributor": [11, 270], "control": [2, 3, 6, 7, 8, 10, 11, 15, 17, 20, 22, 28, 30, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 123, 127, 128, 130, 132, 135, 136, 140, 141, 145, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 171, 172, 176, 177, 179, 180, 182, 183, 184, 185, 189, 191, 193, 194, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 217, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 258, 259, 261, 265, 266, 273, 274, 275, 276, 278, 279, 280, 283, 284, 287, 288, 289, 290, 291, 293, 294, 296, 297, 300, 301, 302, 303, 304, 309, 310, 313, 318, 320, 321], "control_act": [63, 278], "control_arrai": 101, "control_cal": 104, "control_chang": 278, "control_computation_success": 101, "control_effort": [63, 78, 112, 248, 251, 278], "control_effort_sq": 251, "control_failur": 104, "control_force_limit": 63, "control_input": 61, "control_magnitud": 101, "control_output": [79, 116, 194, 207, 280], "control_r": 251, "control_rate_sq": 251, "control_result": [101, 278], "control_satur": 112, "control_shap": 101, "control_valu": [80, 101, 111, 112, 278], "controlact": 278, "controllability_threshold": 194, "controller_alias": 80, "controller_class": [17, 107, 116, 274], "controller_config": [101, 108, 116], "controller_creation_failur": 112, "controller_creation_tim": [111, 112], "controller_enum": 280, "controller_factori": [53, 80, 113, 193, 248, 250, 251, 252, 278], "controller_gain": [17, 112], "controller_info": [17, 51, 72, 80, 109, 116, 274], "controller_larg": 194, "controller_map": 107, "controller_nam": [80, 112, 280], "controller_performance_benchmark": 110, "controller_registri": [51, 103, 104, 251, 274], "controller_result": 101, "controller_smal": 194, "controller_st": 280, "controller_theori": 7, "controller_typ": [7, 17, 49, 51, 53, 58, 63, 72, 80, 99, 101, 104, 105, 108, 109, 111, 112, 113, 116, 247, 248, 251, 252, 274, 275, 278, 280], "controllerclass": 51, "controllerconfig": 72, "controllerdeprecationwarn": 108, "controllerintegrationvalid": 101, "controllerplantbridg": 278, "controllerpool": 274, "controllerprotocol": [49, 51, 101], "controllertyp": [275, 280], "controllertypeerror": 274, "controloutput": 49, "conv": [53, 318], "conv_metr": 252, "conv_veloc": 53, "conveni": [51, 298], "convent": [17, 160, 203, 205, 258, 289], "converg": [3, 11, 28, 42, 43, 53, 57, 58, 63, 85, 99, 102, 107, 112, 113, 124, 125, 133, 148, 157, 158, 159, 162, 163, 168, 170, 183, 191, 193, 195, 197, 200, 201, 202, 204, 205, 206, 215, 216, 228, 229, 236, 238, 245, 246, 247, 249, 250, 251, 252, 253, 258, 259, 275, 279, 280, 282, 283, 284, 288, 290, 291, 292, 293, 303, 309, 310, 318, 319], "convergence_acceler": 252, "convergence_analysi": [113, 252], "convergence_conditions_met": 99, "convergence_criteria": 63, "convergence_improv": 53, "convergence_iter": [63, 112], "convergence_r": [107, 112, 252, 291], "convergence_statu": [63, 113], "convergence_threshold": [63, 113, 275], "convergence_tim": [36, 99], "convergence_veloc": 53, "convergencecriteria": 53, "convergencemonitor": [53, 252], "convergencestatu": 53, "convers": [12, 44], "convert": [99, 108, 111, 112], "convex": [3, 167, 201], "coordin": [190, 198, 218, 289, 317], "copi": [41, 44, 108, 141, 216, 247, 267, 268, 269, 271, 278], "copybutton": 142, "copyleft": 8, "core": [8, 10, 12, 16, 19, 27, 28, 29, 31, 36, 38, 49, 50, 52, 56, 57, 59, 61, 63, 64, 76, 77, 80, 82, 84, 85, 86, 98, 100, 105, 107, 112, 113, 147, 149, 166, 170, 193, 196, 208, 209, 213, 215, 218, 224, 225, 230, 234, 237, 240, 242, 250, 255, 274, 275], "corioli": [198, 229, 238], "corollari": [298, 299], "correct": [7, 14, 107, 119, 121, 147, 165, 194, 204, 207, 209, 247, 249, 310, 313], "correctli": [107, 119, 121, 147, 207, 323], "correspond": [112, 228, 236], "cost": [36, 40, 53, 78, 84, 97, 130, 133, 166, 172, 183, 193, 197, 198, 200, 228, 230, 236, 237, 242, 250, 251, 252, 253, 275, 278, 279, 280, 288, 289, 291, 300, 318, 321], "cost_histori": [112, 252], "cost_improv": 252, "costs_per_r": 251, "could": [120, 228, 236, 255, 297], "count": [51, 57, 80, 82, 99, 104, 111, 162, 168, 215, 252, 310], "counter": 112, "coupl": [81, 99, 223, 225, 229, 230, 235, 237, 238, 240, 291], "covari": [228, 236], "cover": [4, 63, 98, 101, 106, 108, 111, 116, 122, 129, 182, 212, 283, 284, 304, 309, 311], "coverag": [7, 9, 10, 11, 14, 19, 20, 37, 39, 45, 55, 56, 57, 59, 73, 82, 87, 88, 94, 114, 121, 122, 125, 126, 138, 143, 151, 186, 190, 194, 245, 261, 275, 281, 282, 283, 284, 293, 294, 299, 309], "coverage_valid": 255, "coveragevalidationpath": 255, "cpu": [111, 112, 113], "cpu_perc": 112, "cpu_sampl": 112, "cpu_util": 112, "crash": [45, 112, 135, 211], "crc": [3, 177], "creat": [7, 11, 17, 24, 27, 28, 30, 31, 32, 33, 49, 50, 51, 53, 57, 61, 63, 72, 78, 80, 99, 100, 101, 105, 107, 108, 109, 111, 112, 113, 116, 124, 130, 131, 147, 169, 170, 194, 243, 266, 274, 275, 276, 278, 279, 280, 298, 309, 315, 318, 319], "create_backup": 108, "create_control": [17, 49, 51, 53, 56, 63, 101, 105, 107, 111, 113, 116, 130, 132, 251, 274, 275, 278, 280], "create_controller_with_parameter_recoveri": 109, "create_fallback_configur": 274, "create_full_config": [72, 116], "create_hil_control": 278, "create_minimal_config": [72, 109, 116, 274], "create_model": 278, "create_optimization_object": 278, "create_pareto_optim": 278, "create_pso_controller_factori": [49, 80, 111, 113, 248], "create_pso_optimized_control": 101, "create_smc_for_pso": [80, 107, 112, 116, 130, 132], "creation": [20, 47, 50, 51, 56, 72, 80, 98, 101, 107, 111, 112, 113, 116, 117, 194, 273, 274, 275], "creation_error": 101, "creation_failur": 112, "creation_success": 101, "creation_tim": [111, 112], "credenti": 70, "credibl": 11, "credit": 270, "crisi": [39, 190, 218], "criteria": [3, 14, 21, 28, 53, 56, 57, 58, 63, 67, 85, 93, 99, 102, 108, 113, 120, 138, 169, 190, 195, 213, 245, 251, 252, 298, 323], "criterion": [14, 56, 57, 58, 213], "critic": [7, 9, 10, 11, 24, 37, 40, 41, 63, 67, 84, 104, 106, 107, 108, 111, 116, 119, 126, 190, 218, 245, 247, 249, 252, 254, 255, 261, 275, 284, 300, 310], "cross": [5, 7, 13, 26, 53, 55, 57, 58, 73, 121, 126, 156, 205, 225, 240, 258, 274, 278, 288, 290, 309, 310, 313], "cross_refer": 7, "cross_reference_databas": 7, "cross_valid": 309, "crossvalid": 309, "css": [28, 30, 31, 140], "csv": [61, 65, 149, 178], "ctrl": 147, "cuda": 91, "cumul": 26, "current": [10, 11, 28, 29, 39, 49, 51, 58, 61, 71, 79, 87, 93, 111, 112, 119, 142, 168, 170, 195, 215, 229, 238, 242, 243, 245, 247, 251, 252, 256, 269, 307, 312, 314], "current_avg": 112, "current_best": [113, 251], "current_best_cost": 280, "current_best_fit": 248, "current_bound": 248, "current_iter": [63, 280], "current_memori": 112, "current_metr": 252, "current_s": 247, "current_schema_vers": 247, "current_start": 113, "current_valu": 252, "current_vers": [111, 247], "current_w": 252, "curv": [11, 309], "custom": [29, 30, 53, 70, 90, 127, 130, 132, 133, 134, 135, 140, 141, 143, 156, 159, 168, 170, 172, 183, 185, 193, 203, 253, 265, 290, 303], "custom_batch_optim": 321, "cv": [309, 310, 313], "cvar": 313, "cvxpy": [8, 84], "cycl": 243, "c\u1d62": 207, "c\u2081": [99, 247, 251], "c\u2082": [99, 247, 251], "d": [3, 9, 28, 65, 67, 85, 149, 165, 194, 205, 228, 229, 230, 236, 237, 238, 291, 313], "d_": [229, 238], "daemon": 280, "dahlquist": 3, "dai": 11, "daili": [111, 170], "daily_mainten": 111, "damp": [72, 77, 85, 107, 112, 194, 207, 228, 236, 251, 252], "damping_compli": 252, "damping_gain": 108, "damping_ok": 252, "damping_ratio": [247, 251], "damping_ratio_1": 252, "damping_ratio_2": 252, "danger": 63, "dark": [30, 140, 269], "dashboard": [15, 39, 64, 111, 128, 170, 222, 233, 245, 261, 265, 267, 268, 269, 271, 284, 315, 318], "data": [11, 28, 63, 64, 65, 67, 119, 120, 149, 159, 168, 177, 178, 185, 190, 203, 228, 236, 247, 252, 261, 278, 280, 310, 313, 318, 320], "databas": [7, 51], "dataclass": [51, 72, 80, 102, 104, 107, 112, 194, 196, 273, 275], "dataexchangebu": 278, "dataset": 159, "date": [7, 10, 14, 55, 57, 63, 92, 108, 210, 218, 242, 244, 275, 301, 309], "datetim": 68, "ddot": [229, 238], "dead": [77, 226, 239], "dead_zon": [79, 108], "deadband": 3, "deadlock": [111, 284], "deadzon": 136, "debt": [24, 32], "debug": [20, 79, 91, 112, 117, 142, 143, 185, 207, 213, 215, 321], "decad": [2, 17], "decai": [191, 246], "decis": [11, 36, 57, 61, 93, 197, 200, 218, 245, 309], "decomposit": 309, "decor": 17, "decoupl": 88, "decreas": [3, 113, 191, 215, 228, 236, 291], "dedic": [19, 58, 273], "dedupl": 32, "deduplicate_bibtex": [24, 32], "deep": [49, 51, 111, 116, 304], "deep_performance_analysi": 111, "def": [17, 36, 49, 51, 53, 58, 61, 63, 72, 78, 79, 80, 99, 101, 104, 107, 108, 109, 111, 112, 113, 116, 168, 191, 194, 207, 215, 228, 236, 247, 248, 250, 251, 252, 255, 274, 275, 278, 280, 297, 300], "default": [17, 36, 49, 51, 79, 86, 99, 108, 112, 113, 128, 131, 133, 140, 147, 150, 153, 165, 167, 168, 183, 215, 251, 253, 273, 274, 276, 291], "default_gain": [51, 103, 104, 108, 113, 274], "default_surface_gain": 108, "defens": [35, 41, 44, 112], "defin": [49, 61, 78, 112, 169, 205, 228, 229, 236, 238, 278, 291, 320], "definit": [3, 49, 61, 73, 76, 97, 98, 134, 191, 195, 204, 215, 223, 225, 235, 240, 246, 251, 273, 290, 291, 299, 301, 310], "deflect": 205, "deform": [225, 240], "degener": 45, "degrad": [51, 72, 99, 102, 112, 113, 116, 229, 238, 252], "degre": [68, 205, 207, 223, 225, 235, 240, 278], "del": [104, 111, 210, 247, 251], "delai": [119, 228, 236], "deliv": [29, 56, 65, 67, 222, 225, 233, 240, 243, 275], "deliver": [7, 56, 57, 58, 59, 65, 67, 138, 218, 243, 298, 309, 318], "delta": [3, 229, 238], "demo": [11, 27, 28, 29, 30, 156, 157], "demonstr": [31, 57, 71, 112, 280, 284], "den": 3, "deni": 91, "denomin": 79, "densiti": [7, 85], "depend": [2, 3, 8, 28, 29, 49, 57, 63, 111, 117, 124, 142, 147, 195, 229, 238, 247, 267, 269, 271, 310], "deploi": [89, 92, 111, 243, 321], "deploy": [11, 24, 29, 31, 37, 40, 63, 65, 67, 89, 90, 91, 92, 93, 95, 98, 111, 141, 175, 176, 177, 180, 183, 190, 211, 218, 222, 233, 241, 243, 245, 251, 252, 261, 280, 282, 283], "deploy_canari": 111, "deploy_to_green": 111, "deploy_with_canari": 111, "deployment_recommend": 255, "deprec": [5, 50, 98, 100, 102, 108, 111, 247, 250, 251, 315], "deprecated_field": [247, 251], "deprecated_param": 108, "deprecationlevel": 102, "deprecationmap": 102, "depth": [17, 309], "deriv": [3, 53, 72, 99, 104, 107, 112, 161, 167, 194, 195, 198, 200, 202, 204, 225, 228, 229, 230, 236, 237, 238, 240, 247, 249, 287, 289, 290, 295], "derrac": 193, "describ": [87, 207], "descript": [12, 40, 50, 51, 61, 65, 81, 103, 119, 161, 164, 220, 247, 295, 310, 313, 318], "descriptor": 122, "design": [3, 11, 13, 17, 41, 51, 53, 63, 76, 77, 78, 81, 85, 86, 99, 102, 103, 104, 112, 116, 119, 132, 133, 143, 163, 166, 169, 172, 190, 194, 195, 203, 204, 206, 208, 220, 222, 225, 228, 229, 233, 236, 238, 240, 247, 248, 249, 258, 274, 279, 283, 287, 288, 290, 291, 297, 320], "desir": [57, 99, 104, 107, 228, 229, 236, 238], "despit": [211, 228, 236], "destroi": 111, "destruct": 147, "detail": [3, 7, 20, 25, 27, 29, 43, 53, 55, 77, 84, 85, 90, 99, 110, 111, 124, 125, 130, 139, 143, 147, 152, 153, 154, 155, 165, 199, 229, 238, 242, 250, 252, 275, 292, 318, 323], "detect": [3, 53, 69, 94, 111, 112, 113, 118, 119, 120, 142, 158, 185, 208, 215, 222, 228, 233, 236, 245, 247, 251, 252, 261, 284, 297, 299, 310], "detect_inst": 251, "detect_memory_leak": 111, "determin": [3, 63, 65, 113, 247], "determinist": [3, 194, 207, 291], "dev_tool": 298, "develop": [11, 34, 90, 91, 127, 131, 138, 168, 170, 230, 237, 256, 275, 282, 283, 295, 323], "deviat": [68, 86, 118, 194, 228, 236, 251], "devic": 140, "diagnos": 321, "diagnose_configuration_error": 247, "diagnosi": [3, 117, 144, 213, 247], "diagnost": [77, 84, 85, 98, 104, 111, 115, 117, 133, 144, 148, 247, 252, 254, 280, 290, 318], "diagram": [57, 59, 62, 107, 225, 240, 317], "dict": [51, 63, 72, 79, 80, 99, 101, 104, 108, 109, 112, 113, 116, 130, 168, 247, 248, 250, 251, 252, 278, 297], "dictionari": [44, 72, 79, 101, 112], "did": 111, "didn": [32, 45], "diff": [191, 251], "differ": [49, 102, 112, 130, 134, 167, 168, 225, 228, 236, 240, 280, 291, 310, 313], "differenti": [3, 194, 225, 228, 236, 240], "difficult": [11, 223, 235], "dimens": [53, 61, 68, 112, 113, 309], "dimension": [45, 157, 251, 291, 303, 318], "ding": 3, "dip": [0, 3, 11, 35, 39, 50, 71, 72, 81, 87, 88, 97, 101, 104, 116, 117, 128, 129, 130, 146, 150, 151, 160, 161, 164, 165, 170, 189, 193, 205, 208, 209, 210, 219, 220, 223, 225, 228, 229, 230, 235, 236, 237, 238, 240, 248, 255, 266, 274, 278, 287, 290, 291, 321], "dip_doc": 7, "dip_lowrank": 171, "dip_od": [228, 236], "dip_smc_pso": [13, 118, 187, 225, 240], "dip_system": 295, "dip_system_diagram": 295, "dipc": [225, 240], "direct": [3, 26, 29, 30, 32, 41, 49, 77, 78, 84, 154, 159, 256, 268, 300], "directli": 112, "directori": [7, 71, 91, 192, 253, 266, 268, 298], "disabl": [11, 113, 141], "disadvantag": [200, 228, 236], "disast": 173, "discontinu": [78, 167, 205, 228, 229, 230, 236, 237, 238], "discov": 33, "discoveri": [95, 284], "discret": [84, 99, 228, 236, 290], "discuss": [3, 227, 229, 230, 231, 237, 238], "displac": [225, 240], "displai": [53, 108, 112, 124, 147, 153, 154, 155, 159, 225, 240, 283], "distanc": [113, 225, 229, 238, 240], "distinct": 112, "distribut": [119, 174, 228, 229, 236, 238, 251, 299, 309, 310, 313, 321], "disturb": [3, 74, 84, 104, 107, 112, 118, 197, 205, 228, 229, 230, 236, 237, 238, 259, 265, 280], "dive": 304, "diverg": [35, 124, 150, 228, 236, 310], "divers": [53, 113, 215, 251, 252, 318], "diversity_histori": [113, 215, 251], "diversity_metr": 252, "diversity_threshold": 251, "diversity_trend": 113, "divis": [79, 168, 252], "do": [121, 130], "doc": [3, 7, 11, 24, 31, 32, 33, 53, 57, 58, 65, 102, 121, 123, 130, 141, 146, 147, 298, 309, 315], "docker": [11, 63, 90, 91], "dockerfil": [11, 91], "docstr": [11, 55, 57, 58, 94, 97, 121, 297, 298, 318], "document": [0, 1, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 23, 24, 25, 26, 28, 29, 32, 33, 36, 39, 40, 42, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 66, 67, 69, 72, 73, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 116, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 137, 138, 141, 142, 145, 147, 154, 156, 165, 169, 172, 173, 174, 175, 176, 179, 180, 181, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 205, 206, 207, 209, 210, 213, 214, 216, 217, 219, 220, 225, 229, 238, 240, 241, 243, 247, 248, 258, 261, 262, 263, 264, 265, 266, 267, 268, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 291, 292, 297, 298, 299, 300, 301, 302, 305, 307, 308, 309, 310, 313, 314, 315, 316, 318, 320, 321, 322, 323], "doe": [145, 228, 236], "doesn": [27, 70, 112, 147, 155, 255, 310], "doi": [121, 122, 123], "domain": [2, 7, 72, 116, 131, 209, 228, 236, 274, 278, 284], "don": [112, 145, 310], "done": 113, "dopri5": 200, "dormand": [3, 61, 200], "dormandprince45": 61, "dot": [3, 219, 228, 229, 230, 236, 237, 238, 247], "doubl": [2, 3, 8, 15, 17, 22, 36, 53, 56, 57, 58, 59, 61, 63, 65, 67, 73, 77, 78, 79, 80, 81, 84, 85, 86, 92, 93, 99, 116, 121, 123, 130, 134, 143, 160, 161, 164, 191, 198, 205, 207, 209, 213, 219, 222, 223, 225, 226, 228, 229, 230, 233, 235, 236, 237, 238, 239, 240, 243, 245, 249, 255, 258, 261, 274, 275, 278, 279, 282, 283, 284, 290, 291, 294, 295, 317, 318, 321], "doubleinvertedpendulum": [191, 225, 228, 236, 240], "dover": 3, "down": [86, 228, 236], "downward": [225, 240], "dp45": 61, "dpi": 53, "draw": [228, 236], "drive": [228, 229, 236, 238], "driven": [53, 130], "dropout": 306, "dt": [45, 61, 72, 78, 84, 99, 107, 108, 109, 112, 119, 132, 147, 191, 194, 207, 228, 230, 236, 237, 251, 274, 278, 280, 291], "dt_matrix": 251, "dtheta1": [228, 236, 278], "dtheta2": [228, 236, 278], "dtype": [104, 228, 236, 251], "du": [251, 280, 291], "du2": 251, "dual": [222, 230, 233, 237], "due": [102, 111, 119, 120, 210, 228, 229, 236, 238], "durat": [78, 111, 112, 124, 141, 142, 147, 158, 170, 228, 236, 280, 323], "dure": [99, 108, 119, 120, 228, 230, 236, 237, 251, 252, 283], "dx": [168, 278], "dxdt": [228, 236], "dyn": [228, 236], "dynam": [3, 10, 35, 44, 45, 51, 53, 57, 59, 61, 63, 64, 73, 84, 86, 97, 104, 130, 134, 135, 160, 161, 191, 193, 198, 199, 202, 203, 205, 207, 213, 219, 220, 224, 225, 228, 229, 230, 234, 236, 237, 238, 240, 248, 249, 258, 265, 279, 287, 288, 290, 291, 295], "dynamics_config": 63, "dynamics_ful": [230, 237], "dynamics_interfac": 61, "dynamics_model": [51, 108, 119], "dynamicsmodel": [61, 220], "dynamicsresult": [61, 220], "d\u03b8\u2081": 168, "d\u03b8\u2082": 168, "e": [3, 17, 63, 79, 101, 104, 108, 111, 112, 113, 116, 168, 228, 230, 236, 237, 247, 251, 252, 255, 274, 278, 282, 291, 297], "e1": 191, "e1_dot": 191, "e1_histori": 191, "e1_new": 191, "e2": [191, 274], "e2_dot": 191, "e2_histori": 191, "e2_new": 191, "each": [11, 30, 31, 37, 53, 99, 102, 104, 107, 112, 113, 130, 132, 154, 166, 191, 193, 194, 207, 225, 228, 229, 230, 236, 237, 238, 240, 251, 252, 255, 273, 278, 280, 291, 310, 321], "earli": [53, 112, 113, 203, 208, 216, 228, 236, 248, 251], "earlier_divers": 113, "early_stop": 247, "eas": 140, "easi": [51, 274], "eberhart": [3, 123, 193, 229, 238, 291], "ec": 91, "ec2": 90, "echo": [92, 254, 282, 283], "ecosystem": [19, 63, 156, 278], "ed": 3, "edg": [45, 107, 119, 194, 196, 251], "edit": [164, 168, 193], "educ": 265, "edward": [3, 123, 297], "effect": [11, 86, 109, 149, 167, 195, 197, 201, 243, 250, 271, 293, 309, 310, 313], "effective_thick": 194, "effici": [41, 53, 57, 61, 63, 65, 111, 113, 116, 121, 171, 188, 193, 198, 216, 228, 236, 248, 249, 274, 309, 310, 318], "efficiency_scor": 53, "effort": [11, 68, 86, 104, 149, 156, 183, 205, 228, 236, 251, 280, 303], "eig": 99, "eigen1": 99, "eigen2": 99, "eigenvalu": [3, 53, 99, 287], "either": [228, 236], "ekf": 120, "elast": 91, "electro": 3, "element": [17, 41, 102, 104, 108, 109, 112, 194, 250], "elif": [36, 53, 63, 80, 99, 104, 107, 108, 109, 111, 112, 113, 194, 215, 228, 236, 247, 248, 274, 278], "elimin": [3, 24, 32], "els": [36, 63, 78, 80, 99, 101, 104, 107, 108, 111, 112, 113, 194, 207, 215, 247, 248, 251, 252, 275, 278, 280], "email": 111, "embed": [11, 154, 156, 197, 200, 297, 318], "emerg": [37, 67, 98, 113, 142, 254, 261, 278], "emergency_procedur": 63, "emergency_recoveri": 254, "emergency_stop": [63, 278], "emergency_stop_condit": 278, "emphasis": [223, 225, 229, 235, 238, 240], "empir": [3, 228, 236, 313], "emploi": [81, 119, 228, 236, 283], "empti": [45, 79, 112, 280], "enabl": [11, 91, 112, 113, 142, 193, 252, 274], "enable_monitor": 112, "enable_performance_predict": 53, "encod": 297, "encount": [27, 117], "encourag": [228, 229, 236, 238], "end": [63, 111, 169, 193, 208, 219, 225, 229, 230, 237, 238, 240, 251, 274, 280, 321], "endow": [229, 238], "endswith": 108, "endtoendworkflowvalid": 208, "energi": [3, 63, 86, 104, 134, 156, 161, 198, 200, 219, 220, 225, 229, 238, 240, 251], "energy_gain": 86, "enforc": [37, 39, 51, 73, 107, 249, 252, 283], "engag": 11, "engelbrecht": 3, "engin": [2, 3, 11, 17, 30, 45, 52, 57, 59, 61, 64, 104, 152, 203, 224, 225, 234, 240, 246, 250, 278], "english": 3, "enhanc": [7, 16, 17, 27, 28, 29, 30, 31, 37, 45, 57, 58, 70, 71, 98, 99, 101, 102, 103, 104, 105, 106, 108, 111, 115, 119, 139, 142, 147, 188, 194, 195, 218, 224, 228, 234, 236, 247, 249, 250, 251, 269, 271, 273, 275, 276, 280, 284, 300, 315], "enhanced_featur": 247, "enhancedconvergenceanalyz": 53, "enhancedpsofactori": [275, 280], "enlarg": 205, "enough": 207, "ensur": [3, 50, 73, 93, 99, 102, 104, 107, 108, 111, 114, 207, 208, 209, 225, 240, 243, 246, 247, 251, 255, 274, 278, 279], "enter": 108, "enterpris": [49, 51, 71, 72, 80, 101, 114, 116, 117], "enterprisecontrollerfactori": 101, "enthusiasm": 12, "entir": [113, 208, 228, 236], "entri": [81, 104, 121, 122, 123, 147, 208], "enum": [51, 102, 107, 112, 132, 147], "enumer": [104, 107, 109, 112, 113, 225, 240, 251, 280], "env": [34, 53, 117, 169, 178, 248], "environ": [27, 34, 65, 68, 72, 92, 104, 111, 113, 124, 131, 147, 154, 197, 222, 224, 230, 233, 234, 237, 245, 283], "eom": [225, 240], "eps_eff": 78, "epsilon": [3, 79, 207, 228, 236, 252], "epsilon_eff": 78, "eq": [3, 107, 228, 229, 236, 238, 291], "eq_ratio": 78, "equal": [228, 236], "equat": [3, 53, 57, 134, 161, 198, 220, 223, 225, 227, 228, 229, 231, 235, 236, 238, 240, 256, 287, 288, 291, 299], "equilibrium": [84, 101, 191, 228, 229, 236, 238], "equival": [7, 78, 85, 206, 226, 228, 229, 230, 236, 237, 238, 239], "error": [3, 5, 20, 24, 25, 26, 33, 35, 36, 40, 44, 49, 50, 51, 55, 72, 76, 92, 99, 101, 102, 104, 107, 108, 111, 112, 113, 116, 119, 124, 135, 147, 149, 150, 154, 171, 191, 195, 197, 200, 204, 205, 208, 218, 228, 236, 242, 247, 251, 252, 255, 274, 275, 278, 280, 282, 283, 290, 297, 300, 301, 310, 323], "error_cas": 111, "error_categori": 247, "error_cod": 247, "error_handl": 111, "error_messag": [112, 252], "error_metr": 112, "error_r": 112, "error_thresh": 99, "error_threshold": [99, 102, 108], "escap": 252, "essenti": [121, 128, 225, 240, 252, 267, 282, 323], "essential_param": 72, "establish": [3, 24, 32, 33, 56, 57, 59, 93, 109, 165, 167, 209, 252, 255, 259], "estim": [3, 7, 14, 57, 58, 81, 99, 102, 104, 107, 120, 163, 171, 228, 236, 279, 301, 313], "estimate_bound": [102, 108], "estimate_lipschitz_const": 104, "estimate_max_adaptation_r": 104, "estimate_min_switching_gain": 104, "estimate_settling_time_chang": 99, "estimate_stability_properti": 112, "estimated_convergence_r": 99, "estimated_convergence_tim": 99, "estimated_settling_tim": 99, "estimated_uncertainti": 107, "et": [8, 123, 193], "eta": 3, "etc": [141, 146], "euler": [61, 161, 198, 200, 225, 228, 229, 236, 238, 240, 290], "eval": 63, "evalu": [3, 51, 53, 63, 68, 78, 80, 104, 111, 112, 113, 116, 133, 193, 217, 219, 228, 229, 236, 238, 246, 250, 251, 252, 259, 275, 276, 278, 280, 310], "evaluate_alert": 111, "evaluate_canary_metr": 111, "evaluate_control": 107, "evaluate_controller_perform": 248, "evaluate_fit": 63, "evaluate_metr": 111, "evaluate_quality_g": 252, "evaluate_single_step": 112, "evaluate_swarm_parallel": 113, "evaluate_swarm_with_phys": 251, "evaluation_count": 113, "evaluation_lock": 113, "evaluation_tim": 113, "evaluation_time_histori": 113, "evaluations_per_second": 112, "even": [120, 228, 236], "event": [112, 143, 228, 236], "everi": 210, "evict": 104, "evid": [56, 310], "evolut": [45, 77, 102, 229, 238, 247, 251, 287, 318], "evolutionari": [3, 193], "exactli": [99, 108, 194], "exampl": [5, 7, 11, 12, 14, 17, 27, 30, 31, 36, 44, 49, 51, 53, 55, 57, 58, 59, 61, 63, 68, 72, 76, 77, 78, 79, 80, 82, 84, 85, 88, 96, 97, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 116, 117, 121, 122, 123, 130, 132, 135, 141, 151, 153, 154, 155, 156, 157, 159, 168, 169, 171, 177, 178, 182, 183, 185, 191, 193, 194, 195, 200, 203, 207, 208, 213, 215, 216, 219, 220, 224, 234, 247, 248, 250, 251, 252, 255, 266, 269, 271, 273, 274, 275, 276, 278, 280, 282, 297, 298, 299, 300, 308, 309, 310, 311, 313, 314, 321], "exce": [10, 55, 57, 71, 112, 191, 228, 236, 284], "exceed": [45, 278, 313], "excel": [11, 65, 243], "except": [12, 45, 51, 63, 72, 80, 101, 104, 108, 111, 112, 113, 116, 247, 248, 252, 255, 274, 275, 278, 280, 283, 297], "exception": [24, 284], "excess": [77, 99, 104, 119, 120, 132, 183], "exchang": [190, 278], "excit": [205, 229, 238], "exclud": 283, "exclus": [140, 145], "exec": 63, "execut": [7, 9, 10, 11, 14, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 41, 44, 55, 56, 57, 58, 59, 61, 63, 65, 67, 71, 73, 75, 77, 78, 81, 84, 85, 86, 88, 92, 93, 107, 112, 133, 135, 147, 148, 151, 153, 154, 155, 165, 171, 177, 182, 183, 188, 190, 191, 194, 197, 209, 210, 218, 242, 243, 245, 249, 252, 255, 261, 265, 275, 281, 282, 283, 284, 287, 290, 291, 298, 300, 309, 313, 318, 321], "execute_independent_valid": 255, "execute_optimization_workflow": 252, "execution_tim": [111, 112], "exemplari": 284, "exercis": [168, 303], "exhaust": 45, "exhibit": [210, 225, 228, 236, 240], "exist": [3, 7, 11, 20, 30, 39, 55, 70, 98, 108, 187, 194, 208, 229, 238, 269, 275], "exit": 70, "exp": [191, 252], "expand": [145, 248, 284], "expandal": 143, "expandcodeblock": 143, "expandedicon": 140, "expans": 248, "expect": [11, 17, 21, 24, 25, 26, 45, 51, 53, 55, 57, 80, 81, 104, 109, 111, 112, 120, 124, 126, 144, 147, 165, 168, 171, 290, 291, 298, 299, 310, 313], "expected_count": [99, 109, 168], "expected_improv": 252, "expected_reaching_r": 207, "expected_valid": 151, "expens": [49, 228, 236], "experi": [138, 147, 164, 165, 166, 169, 228, 230, 236, 237, 275, 320], "experienc": [119, 120], "experiment": [169, 224, 230, 234, 237, 313, 320], "expert": [16, 89, 127, 188, 243, 291, 297], "explain": 147, "explan": [17, 160, 163, 284], "explicit": [3, 49, 61, 72, 79, 200, 210, 228, 236], "explicit_gain": 72, "explicitli": 80, "explod": 35, "exploit": [53, 162, 202, 215, 229, 238, 248, 252, 313, 318], "explor": [11, 28, 53, 156, 158, 162, 183, 202, 215, 229, 238, 248, 253, 291, 313, 318], "explos": [3, 193], "expon": [99, 102, 168], "exponenti": [3, 125, 156, 191, 197, 206, 291, 313], "export": [61, 90, 149, 156, 265], "express": [229, 238], "ext": 11, "extend": [3, 99, 111, 119, 120, 207, 247, 252, 290, 318], "extens": [8, 11, 27, 28, 29, 30, 51, 56, 57, 111, 141, 143, 246, 274, 291], "extent": [228, 236], "extern": [7, 52, 127, 185, 259], "external_disturb": 104, "extract": [4, 7, 14, 45, 63, 80, 99, 104, 112, 191, 194, 252, 275, 297, 298, 299, 318], "extract_from_fil": 297, "extractor": 297, "extrapol": 3, "extrem": [99, 194, 218, 228, 236, 313], "extreme_st": 101, "f": [3, 17, 53, 61, 63, 78, 80, 99, 104, 107, 108, 109, 111, 112, 113, 116, 168, 191, 194, 215, 228, 236, 247, 251, 252, 274, 275, 278, 280, 297, 313], "f_": [228, 236], "face": [26, 315], "factor": [53, 162, 191, 202], "factori": [6, 10, 17, 38, 47, 49, 50, 51, 52, 53, 56, 57, 58, 61, 63, 72, 76, 77, 80, 82, 84, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 132, 220, 248, 251, 252, 273, 274, 275, 276, 277, 278, 279, 280], "factory_func": 111, "factory_system_api_refer": [53, 57], "factoryalertmanag": 111, "factoryconfigurationerror": 107, "factoryerror": 274, "factoryhealthcheck": 111, "factorymaintenancemanag": 111, "fail": [5, 21, 34, 63, 70, 94, 99, 101, 107, 108, 109, 111, 112, 113, 116, 131, 147, 151, 155, 170, 208, 228, 236, 247, 251, 252, 254, 255, 274, 275, 278, 280, 283, 310, 313, 318], "failed_check": [111, 252], "failed_evalu": [112, 113], "failed_fix": 247, "failed_test": 99, "failur": [11, 34, 88, 94, 107, 113, 117, 118, 120, 177, 190, 206, 228, 236, 251, 252, 254, 255, 283, 284, 318], "failure_count": 113, "fall": [225, 228, 236, 240], "fallback": [31, 62, 72, 79, 84, 104, 111, 112, 113, 116, 275], "fallback_param": 274, "fals": [17, 36, 49, 51, 53, 55, 58, 61, 63, 68, 72, 78, 79, 80, 88, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 116, 117, 119, 120, 135, 151, 168, 169, 178, 191, 193, 194, 207, 208, 215, 247, 248, 250, 251, 252, 255, 273, 274, 275, 276, 278, 280, 291, 297, 298, 299, 300, 310, 313, 321], "faq": [11, 94, 122, 145, 253], "fast": [36, 77, 99, 113, 123, 151, 158, 168, 188, 207, 208, 215, 228, 236, 282, 283, 291], "faster": [85, 130, 168, 252], "fastest": [65, 313], "fault": [3, 69, 88, 118, 119, 120, 185, 222, 233, 245, 261, 284, 306], "fdi": [118, 119, 120, 185], "fdi_threshold_calibration_methodologi": 3, "fdisystem": 119, "feasibl": 84, "featur": [11, 13, 19, 25, 29, 30, 31, 51, 59, 61, 64, 68, 70, 72, 84, 90, 101, 104, 107, 113, 119, 133, 137, 139, 141, 142, 145, 147, 152, 153, 154, 156, 159, 170, 171, 185, 189, 203, 220, 247, 248, 251, 252, 265, 270, 273, 275, 278, 280, 299], "feedback": [3, 72, 153, 228, 236, 280, 283], "few": 7, "fewer": [205, 228, 236], "fidel": [130, 219, 220, 225, 240], "field": [5, 31, 72, 131, 247, 251], "fig": [53, 295], "figsiz": 53, "figur": [153, 155, 225, 240, 295], "file": [1, 7, 10, 11, 12, 14, 16, 17, 19, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 44, 51, 53, 57, 58, 59, 61, 63, 65, 67, 69, 70, 73, 91, 98, 108, 111, 121, 123, 126, 128, 131, 138, 139, 141, 142, 143, 159, 170, 213, 215, 225, 240, 253, 268, 269, 273, 284, 297, 298, 300, 309, 318], "file_path": 297, "file_stat": 63, "fill": [108, 229, 238], "filter": [63, 120, 136, 228, 236, 250, 251], "final": [10, 24, 25, 32, 33, 57, 113, 126, 130, 191, 218, 228, 236, 244, 247, 253, 280, 318], "final_c1": 215, "final_c2": 215, "final_cost": 63, "final_dist": 291, "final_divers": 113, "final_error": 191, "final_histori": 112, "final_inertia": 215, "final_kei": 247, "final_memori": 111, "final_state_var": 112, "find": [7, 10, 55, 65, 71, 112, 121, 123, 129, 130, 147, 165, 229, 238, 271], "find_convergence_iter": 112, "finit": [3, 36, 51, 80, 85, 99, 102, 104, 107, 109, 112, 125, 163, 168, 194, 197, 205, 206, 207, 249, 251, 279, 288, 321], "first": [3, 7, 31, 61, 72, 73, 102, 108, 112, 130, 147, 153, 155, 157, 164, 165, 177, 189, 225, 228, 230, 236, 237, 240, 248, 252, 290, 295], "fish": [167, 193, 293], "fit": [51, 53, 63, 78, 80, 104, 107, 112, 113, 116, 150, 215, 245, 246, 248, 250, 251, 275, 280, 290, 291, 309, 313], "fitness_computation_tim": 112, "fitness_evalu": 63, "fitness_funct": [78, 107, 112, 113, 248], "fitness_histori": 215, "fitness_improvement_r": 113, "fitness_result": 63, "fitness_scor": [63, 112], "fitness_start": 112, "fitness_std": 53, "fitness_tim": 112, "fitness_timeout": 275, "fitness_toler": 53, "fitness_valu": [63, 112, 113], "fitnessevalu": 63, "five": [228, 236], "fix": [3, 7, 24, 25, 26, 32, 33, 40, 45, 61, 63, 81, 94, 98, 106, 108, 119, 192, 194, 202, 204, 207, 228, 236, 247, 275, 300, 301, 315], "fix_all_concaten": 33, "fix_line1_concaten": 33, "fix_remaining_head": 32, "fix_sphinx_head": [24, 32], "fix_transition_error": 33, "fix_transition_hierarchi": [24, 33], "fix_typ": 247, "fixabl": 247, "fixed_config": 247, "fixed_step": 61, "fixtur": [5, 34], "flag": 121, "flaki": 34, "flanneri": 3, "flexibl": [45, 61, 80, 101, 112, 228, 236], "flexur": [225, 240], "float": [49, 51, 53, 58, 61, 63, 72, 79, 80, 86, 99, 101, 104, 107, 109, 112, 113, 116, 119, 130, 168, 191, 194, 215, 228, 236, 246, 248, 251, 274, 278, 280, 290, 297, 300], "float32": 290, "float64": 290, "flock": [167, 193, 228, 236, 293], "flow": [63, 64, 77, 85, 113, 143, 203, 252, 278, 317], "flowchart": [57, 197, 264], "fluctuat": [228, 236], "flush": 280, "focu": [36, 121, 248], "focus": [57, 140, 178, 243, 279], "fold": [141, 310], "follow": [36, 49, 57, 63, 71, 92, 112, 116, 119, 165, 194, 196, 210, 228, 229, 236, 238, 242, 248, 274, 297], "fontsiz": 53, "fontweight": 53, "footer": 315, "footnot": [24, 25, 33], "for_review": 121, "forc": [53, 63, 99, 107, 111, 112, 168, 205, 225, 228, 229, 230, 236, 237, 238, 240, 278, 297], "forev": [153, 155], "form": [161, 193, 198, 225, 228, 229, 236, 238, 240, 291], "formal": [3, 11, 122, 125, 191, 225, 229, 238, 240, 243, 279, 298, 299], "formal_extractor": 298, "format": [1, 17, 61, 65, 70, 102, 108, 112, 122, 123, 126, 185], "formul": [3, 53, 84, 99, 119, 169, 172, 200, 201, 224, 225, 226, 227, 229, 231, 234, 238, 239, 240, 246, 251, 258, 291, 320], "formula": [228, 236, 249], "forward": 290, "forwardeul": 61, "found": [14, 41, 63, 91, 108, 125, 154, 228, 229, 236, 238, 247, 269, 313], "foundat": [0, 3, 11, 36, 53, 55, 56, 57, 77, 78, 79, 81, 82, 84, 85, 86, 88, 95, 98, 99, 103, 107, 112, 119, 123, 156, 190, 191, 192, 193, 194, 195, 196, 199, 202, 204, 206, 208, 220, 225, 240, 246, 249, 251, 256, 274, 277, 279, 286, 291, 293, 294, 301], "four": [17, 53, 205, 230, 237, 255], "fourth": [228, 229, 236, 238, 290], "frac": [3, 228, 236, 291], "fraction": [168, 252], "framer": 271, "framework": [3, 8, 35, 37, 39, 42, 61, 63, 68, 76, 81, 88, 93, 99, 112, 114, 128, 129, 130, 146, 150, 151, 166, 168, 170, 176, 208, 209, 213, 222, 228, 230, 233, 236, 237, 243, 245, 246, 247, 249, 251, 252, 254, 255, 261, 266, 278, 279, 293, 309, 310], "franci": 3, "free": [167, 246], "freedom": [205, 223, 225, 235, 240], "frequenc": [17, 70, 99, 104, 112, 197, 205, 227, 228, 229, 230, 231, 236, 237, 238, 259], "frequent": [122, 228, 236, 253], "friction": [11, 198, 228, 229, 236, 238, 259], "fridman": 3, "friendli": [80, 112, 130, 147], "from": [3, 7, 11, 14, 17, 25, 26, 49, 51, 57, 67, 72, 86, 88, 98, 102, 104, 106, 107, 108, 111, 112, 119, 120, 134, 139, 141, 143, 147, 159, 165, 183, 188, 191, 193, 194, 207, 208, 225, 228, 229, 236, 238, 240, 242, 247, 251, 268, 274, 280, 295, 297, 298, 310, 318], "front": [183, 230, 237, 253, 278], "frontier": 201, "frozen": [72, 80, 112, 194, 273, 275], "ftsmc": 168, "fulfil": 243, "full": [34, 44, 58, 84, 99, 101, 102, 108, 112, 116, 122, 124, 130, 133, 134, 135, 154, 198, 207, 219, 220, 228, 230, 236, 237, 242, 267, 274, 275, 283, 298, 299, 318], "fulldipdynam": 220, "fulli": [36, 57, 63, 86, 92, 269, 275, 318, 321], "func": 17, "function": [3, 17, 37, 45, 49, 53, 56, 61, 63, 76, 77, 79, 80, 84, 97, 98, 102, 105, 107, 108, 111, 112, 113, 116, 130, 132, 133, 136, 143, 147, 156, 163, 172, 183, 191, 194, 195, 201, 203, 204, 206, 207, 228, 229, 230, 236, 237, 238, 242, 245, 246, 248, 249, 251, 252, 275, 278, 279, 280, 283, 287, 288, 289, 290, 291, 297, 300], "fundament": [3, 60, 163, 198, 200, 205, 246, 279, 288, 304], "further": [65, 81, 128, 183, 228, 236, 313], "futur": [26, 28, 29, 31, 32, 41, 57, 70, 113, 120, 137, 138, 139, 142, 147, 229, 238, 243, 249, 256, 284, 310, 315], "future_to_index": 113, "fuzzi": [224, 234], "fx_": [228, 236], "g": [3, 61, 72, 79, 80, 99, 104, 107, 109, 112, 168, 194, 198, 228, 229, 230, 236, 237, 238, 251, 274, 291], "g_best": 202, "ga": 162, "gain": [3, 17, 20, 34, 40, 49, 50, 51, 53, 56, 63, 72, 76, 77, 78, 79, 80, 82, 85, 86, 99, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 116, 128, 130, 131, 132, 133, 147, 148, 151, 154, 158, 163, 166, 167, 168, 171, 182, 183, 189, 194, 196, 201, 204, 206, 207, 208, 215, 217, 226, 227, 228, 229, 231, 236, 238, 239, 246, 248, 249, 251, 252, 253, 258, 273, 274, 275, 278, 279, 280, 287, 291, 297, 300, 301, 304, 318, 321], "gain_bound": [112, 113, 251, 278], "gain_count": [51, 80, 103, 104, 109, 112], "gain_indic": 247, "gain_nam": 109, "gain_ratio": 99, "gain_spec": 113, "gain_valid": 208, "gains1": 207, "gains2": 207, "gains_arrai": [78, 107, 113], "gainsarrai": [101, 113], "gainvalidationerror": [109, 274], "galleri": [153, 154], "gamma": [3, 17, 99, 102, 104, 108, 109, 116, 313], "gamma1": 108, "gamma2": 108, "gamma_max": 104, "gamma_min": 104, "gang": 17, "gao": 290, "gap": [9, 10, 11, 37, 39, 130, 140, 147, 222, 224, 229, 233, 234, 238, 284, 310], "garbag": [111, 210], "garc\u00eda": 193, "gate": [5, 9, 10, 11, 37, 39, 87, 93, 94, 111, 138, 188, 190, 218, 245, 252, 255, 282, 283], "gate_nam": 252, "gate_result": 252, "gaussian": [228, 236], "gb": [112, 252], "gc": 111, "gener": [3, 7, 11, 27, 28, 36, 52, 67, 72, 101, 104, 112, 113, 122, 124, 127, 130, 149, 151, 155, 159, 198, 208, 230, 237, 247, 251, 252, 253, 258, 279, 284, 289, 313, 318], "generaliz": [222, 233], "generate_migration_report": 247, "generate_optimization_report": 113, "generate_overall_assess": 252, "generate_performance_report": 112, "generate_physics_sampl": 251, "genet": 162, "geometr": 200, "geometri": [201, 229, 238], "gertler": 3, "get": [12, 36, 49, 61, 63, 70, 80, 81, 95, 99, 104, 107, 108, 109, 111, 113, 116, 127, 128, 129, 141, 144, 145, 146, 147, 154, 165, 194, 207, 247, 252, 274, 278, 280, 300], "get_cache_kei": 104, "get_control": 274, "get_control_dimens": 61, "get_controller_bound": 63, "get_convergence_analysi": 252, "get_data_schema": 278, "get_default_gain": [49, 51, 111, 113], "get_effective_controllability_threshold": 194, "get_evaluation_statist": 113, "get_gain_bounds_for_pso": [104, 107, 116, 248, 278], "get_optimization_statist": 113, "get_optimized_pso_bound": 104, "get_partial_result": 255, "get_performance_summari": 252, "get_physics_matric": 61, "get_state_dimens": 61, "get_statist": 104, "get_surface_gain": 207, "getattr": [51, 104, 112, 113, 116], "getpid": 111, "gev": 313, "gf": 112, "gg": [225, 240], "giridhar": 17, "git": [25, 39, 44, 70], "github": [11, 16, 39, 50, 89, 94, 98, 99, 100, 101, 103, 105, 106, 107, 108, 111, 114, 115, 116, 141, 190, 192, 194, 218, 243, 255, 275, 276, 280, 282, 283, 300, 315], "given": [49, 61, 63, 194], "global": [3, 63, 72, 102, 125, 143, 147, 162, 202, 229, 238, 250, 273, 278], "global_best": [63, 291], "global_best_posit": 191, "globalbestpso": 112, "go": [93, 245], "goal": [14, 25, 26, 29, 31, 138, 225, 229, 230, 237, 238, 240, 284, 298], "gof": 17, "golden": [34, 211], "golub": 193, "good": [3, 12, 71, 72, 113, 165, 208, 228, 236, 284, 313], "googl": 91, "got": [17, 80, 104, 109, 112, 132, 168], "govern": [225, 240, 291], "gpu": [91, 140, 143], "grace": [45, 51, 72, 102, 111, 112, 116, 252], "gracefulli": [45, 203], "grade": [13, 16, 51, 55, 71, 79, 89, 101, 114, 116, 188, 251, 284, 290, 309], "gradient": [3, 162, 167, 228, 229, 236, 238, 251, 269], "gradual": 111, "grammar": 299, "graph": [7, 247, 264], "graphic": 200, "gravit": [225, 229, 238, 240], "graviti": [198, 225, 229, 238, 240], "greek": 97, "green": [53, 111], "green_env": 111, "greet": 12, "grid": [53, 184, 271], "group": 63, "grow": [150, 211], "growth": [77, 210], "gsap": 271, "guarante": [3, 162, 191, 208, 245, 246, 284, 291, 299, 310], "guard": [135, 203], "guid": [2, 3, 6, 7, 11, 12, 14, 17, 18, 20, 27, 30, 34, 35, 37, 39, 44, 51, 60, 61, 77, 78, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 95, 98, 99, 101, 102, 104, 106, 108, 111, 115, 116, 117, 118, 119, 121, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 142, 144, 145, 147, 148, 150, 151, 153, 155, 158, 159, 160, 165, 169, 170, 171, 177, 178, 182, 183, 185, 193, 203, 208, 213, 215, 216, 217, 219, 220, 225, 240, 241, 253, 256, 258, 265, 269, 271, 275, 276, 281, 282, 283, 298, 305, 308, 311, 313, 314, 315, 320, 321, 322, 323], "guidanc": [56, 57, 59, 72, 113, 165, 172, 174, 179, 180, 181, 226, 239, 248, 309, 314], "guidelin": [3, 12, 17, 24, 41, 53, 77, 80, 85, 97, 116, 162, 163, 178, 183, 185, 195, 197, 198, 200, 202, 203, 210, 249, 251, 252, 253, 256, 266, 282, 287, 290, 291, 303, 313], "guldner": 3, "guru": 17, "h": [3, 229, 238, 291, 313], "h5py": 8, "h_": [228, 236], "ha": [6, 11, 45, 47, 56, 63, 81, 89, 102, 107, 108, 112, 147, 193, 194, 205, 225, 228, 236, 240, 243, 259, 273, 292, 300, 309], "hairer": 3, "hall": 3, "halt": [228, 236], "hamiltonian": [86, 200], "hand": [228, 236, 303], "handl": [17, 20, 45, 49, 50, 51, 63, 72, 76, 80, 84, 99, 101, 102, 104, 107, 108, 109, 111, 112, 113, 116, 133, 135, 154, 166, 191, 194, 196, 203, 226, 228, 236, 239, 247, 249, 250, 251, 252, 274, 275, 300, 306], "handle_pso_error": 112, "handled_error": 111, "handoff": [86, 298], "harden": 11, "hardwar": [52, 92, 127, 158, 170, 173, 174, 176, 177, 180, 185, 222, 224, 233, 234, 278, 284, 321], "harri": 8, "hasattr": [53, 80, 101, 104, 111, 112, 252, 278, 280], "hash": 104, "hashlib": 68, "have": [7, 10, 11, 55, 58, 89, 108, 112, 121, 122, 141, 144, 182, 188, 194, 207, 229, 238, 251, 271, 275, 291, 321], "header": [25, 32, 33, 71, 269, 271, 299], "headless": 283, "health": [77, 90, 107, 111, 113, 115, 118, 218, 245, 254, 284, 321], "health_check": 111, "health_ok": 111, "health_statu": 111, "healthi": [111, 247], "heatmap": 157, "heavi": [228, 236], "hedg": 12, "hello": 155, "helm": 17, "help": [21, 108, 121, 129, 141, 144, 145, 147, 150, 208, 211], "helper": [70, 132, 297], "here": [98, 130, 147, 228, 229, 236, 238], "hero": [267, 271], "heroku": 90, "hessian": 291, "heurist": [229, 238], "hexdigest": 68, "hide": [40, 53], "hierarch": [71, 72, 73, 109, 224, 234, 297], "hierarchi": [24, 32, 33, 51, 132, 203, 247, 261], "high": [11, 36, 37, 57, 59, 61, 63, 67, 84, 99, 104, 111, 112, 113, 130, 147, 158, 177, 194, 197, 205, 215, 218, 224, 225, 228, 229, 230, 234, 236, 237, 238, 240, 245, 247, 248, 250, 252, 253, 261, 278, 284, 313], "high_veloc": 101, "higham": 193, "higher": [3, 72, 107, 112, 123, 204, 205], "highest": [49, 65], "highli": [81, 228, 229, 236, 238], "highlight": [24, 229, 238], "hil": [64, 127, 128, 158, 170, 173, 174, 175, 176, 177, 180, 185, 278, 284, 321], "hil_control": 278, "hilcontrol": 278, "hilintegrationprotocol": 278, "hilsafetywrapp": 278, "hing": [228, 236], "hint": [9, 10, 94, 258, 318], "histor": [111, 168, 256], "histori": [24, 32, 33, 49, 53, 78, 79, 112, 113, 139, 142, 143, 168, 215, 252, 280, 300], "hit": 104, "hit_rat": 104, "holist": [222, 233], "homogen": [194, 207, 313], "hook": [10, 37, 40, 44, 94, 143], "horizon": [45, 61, 84], "horizont": [205, 225, 228, 236, 240, 295], "host": 141, "hour": [7, 11, 57, 127], "how": [7, 22, 70, 121, 122, 127, 130, 142, 143, 145, 148, 149, 150, 151, 228, 236, 253, 263, 270], "howev": [11, 71, 122, 147, 205, 229, 238], "html": [31, 151, 282, 315, 318], "htmlcov": 151, "http": [17, 39], "human": [51, 61, 112], "hurwitz": [194, 204, 207, 251], "hx_": [228, 236], "hybrid": [3, 36, 37, 40, 58, 63, 65, 67, 80, 81, 86, 92, 99, 102, 104, 107, 108, 109, 112, 132, 147, 166, 169, 181, 197, 201, 218, 224, 226, 227, 231, 234, 239, 242, 249, 251, 273, 274, 279, 300, 301, 303, 318, 321], "hybrid_adaptive_sta_smc": [17, 36, 43, 49, 55, 80, 99, 104, 109, 112, 147, 274, 300], "hybrid_mod": [99, 102, 108], "hybrid_smc_deprec": 102, "hybrid_sta": 274, "hybridadaptivestasmc": [55, 79, 107, 211, 300], "hybridadaptivestasmcconfig": 274, "hybridmod": 102, "hybridstaoutput": [79, 81, 300], "hyper_search": [247, 251], "hyper_tri": [247, 251], "hyperbol": [195, 228, 236], "hyperparamet": [53, 57, 58, 84, 133, 313, 318], "hypothes": 169, "hypothesi": [8, 97, 149, 309, 320], "hysteresi": [3, 86, 120, 195], "hz": [104, 228, 236], "i": [1, 3, 12, 17, 45, 51, 58, 61, 78, 86, 88, 89, 99, 102, 104, 107, 108, 109, 111, 112, 113, 115, 116, 119, 120, 121, 122, 130, 135, 144, 145, 146, 147, 161, 163, 164, 165, 167, 168, 188, 191, 193, 194, 205, 207, 215, 223, 225, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 247, 248, 251, 252, 269, 274, 278, 280, 291, 293, 297, 310, 311, 313], "i_i": 88, "icon": [31, 141, 142, 145], "idea": [0, 142, 269], "ident": [104, 207], "identif": [39, 261], "identifi": [3, 7, 24, 113, 115, 122, 147, 151, 165, 251, 255, 280, 297, 300, 318], "ieee": [3, 11, 290], "ignor": 310, "ii": [3, 226, 227, 231, 239], "iia": [228, 236], "iii": [3, 226, 227, 231, 239], "ill": [35, 290, 291], "illustr": [222, 233], "imag": 91, "immedi": [11, 14, 26, 28, 29, 31, 32, 37, 40, 44, 67, 70, 93, 115, 132, 138, 190, 208, 218, 243, 261, 267, 284, 318, 321], "immut": 80, "impact": [5, 11, 24, 26, 32, 33, 53, 70, 120, 138, 141, 158, 194, 213, 247, 256, 275, 291, 300, 301, 303], "implement": [0, 3, 4, 7, 9, 10, 11, 16, 17, 24, 25, 26, 27, 28, 29, 35, 36, 37, 38, 39, 41, 45, 50, 51, 53, 57, 61, 72, 76, 77, 79, 84, 85, 87, 89, 94, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 111, 112, 115, 116, 119, 120, 121, 125, 130, 132, 134, 135, 139, 142, 143, 147, 165, 168, 177, 178, 187, 188, 191, 192, 193, 194, 195, 198, 199, 200, 204, 205, 206, 207, 209, 210, 213, 215, 219, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 239, 240, 242, 243, 246, 249, 251, 252, 255, 256, 261, 274, 275, 278, 279, 280, 284, 288, 290, 291, 297, 298, 300, 309, 310, 312, 313, 318, 320], "implic": 246, "implicit": [228, 230, 236, 237], "import": [3, 14, 24, 29, 33, 34, 51, 56, 63, 71, 72, 104, 108, 111, 112, 116, 117, 124, 167, 228, 236, 265, 268, 269, 280, 288, 299, 310, 323], "importerror": [111, 112], "improv": [3, 11, 26, 27, 32, 37, 39, 45, 53, 57, 72, 81, 98, 99, 106, 111, 113, 120, 194, 215, 218, 228, 236, 241, 242, 247, 251, 252, 275, 280, 300, 313, 318], "improvement_pct": 215, "improvement_ratio": 280, "inaccur": 121, "inadequ": 252, "inappropri": 310, "includ": [46, 48, 49, 51, 54, 55, 59, 60, 68, 76, 86, 102, 107, 118, 191, 219, 223, 225, 228, 229, 235, 236, 238, 240, 246, 254, 293, 294, 295, 299, 317], "incom": 7, "incomplet": [7, 11, 113], "incorpor": [107, 228, 236], "incorrect": [7, 300], "incorrectli": 81, "increas": [72, 98, 111, 113, 191, 194, 205, 207, 215, 228, 229, 236, 238, 242, 247, 248, 291, 310, 313], "increment": 112, "independ": [3, 88, 119, 228, 236, 255], "independentvalidationpath": 255, "independentvalidationresult": 255, "index": [26, 27, 30, 41, 45, 70, 151, 197, 247, 268], "index_str": 247, "indexerror": 45, "indic": [11, 78, 99, 104, 118, 194, 201, 261, 269], "indirect": 3, "individu": [57, 113, 116, 145, 207, 247, 321], "induc": [24, 33, 205], "industri": 284, "inertia": [3, 53, 123, 158, 162, 193, 202, 215, 220, 225, 228, 229, 230, 236, 237, 238, 240, 246, 248, 250, 251, 252, 258, 291, 313], "inertia_weight": [215, 252], "inf": [104, 112, 113, 215, 248, 280], "infeas": 84, "infin": 35, "infinit": [194, 274], "influenc": [201, 229, 238], "info": [102, 215, 247], "inform": [3, 111, 123, 138, 142, 167, 189, 229, 238, 310, 315], "infrar": [228, 236], "infrastructur": [27, 30, 37, 39, 45, 82, 217, 283, 284, 298], "infti": 3, "inher": [225, 228, 230, 236, 237, 240], "ini": 300, "init": [51, 53, 63, 72, 80, 99, 101, 104, 111, 112, 113, 116, 168, 247, 248, 250, 251, 252, 255, 274, 278, 280], "initi": [3, 11, 51, 53, 63, 68, 72, 80, 86, 107, 112, 113, 133, 135, 164, 165, 168, 170, 171, 191, 200, 225, 228, 229, 230, 236, 237, 238, 240, 248, 252, 259, 280], "initial_bound": 247, "initial_c1": 215, "initial_c2": 215, "initial_error": 191, "initial_inertia": 215, "initial_memori": 111, "initial_posit": 291, "initial_st": [61, 112, 278], "initial_veloc": 291, "initialize_histori": 168, "initialize_swarm": 63, "inject": [63, 80, 119, 177, 230, 237, 265, 284], "inlin": [122, 154], "inner": 289, "innov": [36, 224, 228, 234, 236], "input": [3, 35, 45, 61, 63, 79, 93, 104, 108, 112, 136, 168, 194, 203, 205, 220, 223, 225, 228, 229, 235, 236, 238, 240, 274, 284, 298], "insecur": 63, "insensit": [205, 229, 238], "insid": 81, "insight": [24, 57, 201, 224, 234, 290], "inspect": 70, "inspir": [162, 167, 193, 228, 236, 266, 293], "inst": 65, "instability_mask": 251, "instabl": [35, 53, 99, 109, 134, 170, 194, 228, 236, 250, 251, 280], "instal": [29, 121, 124, 141, 146, 147, 159, 169, 265, 269, 270, 271, 290], "instanc": [17, 49, 51, 61, 63, 79, 91, 101, 102, 104, 105, 250, 251, 274, 275, 278], "instanti": [49, 50, 51, 56, 65, 77, 78, 80, 84, 103, 104, 105, 111, 116, 210, 251, 274], "instead": [57, 79, 81, 102, 135, 216], "instruct": [8, 92, 101], "insuffici": [11, 99, 111, 252, 310], "insufficient_data": [99, 113, 252], "int": [17, 51, 53, 61, 63, 79, 80, 104, 109, 112, 113, 116, 215, 247, 251, 252, 274, 278], "int_": [228, 236], "int_0": 291, "integr": [0, 3, 4, 7, 11, 20, 24, 27, 28, 29, 30, 31, 37, 38, 39, 40, 49, 50, 51, 53, 56, 57, 59, 61, 63, 65, 70, 72, 76, 77, 78, 79, 80, 84, 85, 92, 94, 95, 97, 98, 99, 100, 101, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 119, 122, 131, 132, 133, 134, 135, 136, 141, 149, 153, 154, 156, 159, 168, 185, 194, 200, 203, 209, 218, 222, 224, 228, 229, 230, 233, 234, 236, 237, 238, 243, 245, 248, 250, 251, 256, 261, 265, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290, 292, 298, 300, 309, 310, 315, 318, 321, 322], "integral_term": 191, "integrate_adaptive_smc": 101, "integrate_classical_smc": 101, "integrate_super_twisting_smc": 101, "integration_scor": 101, "integratorfactori": 61, "intellig": [3, 104, 162, 224, 234, 247, 284, 293], "intens": 57, "interact": [11, 27, 28, 30, 45, 57, 64, 67, 90, 91, 108, 129, 152, 153, 154, 156, 157, 158, 159, 201, 222, 230, 233, 237, 263, 267, 269, 278, 284, 303, 318, 321], "interactive_migration_wizard": 108, "interdepend": [73, 247, 251], "interest": 122, "interfac": [8, 20, 38, 49, 50, 51, 56, 61, 62, 63, 64, 76, 80, 100, 102, 104, 106, 107, 108, 109, 112, 113, 116, 119, 168, 170, 190, 194, 220, 222, 230, 233, 237, 250, 251, 265, 274, 278, 321], "intermedi": [41, 166, 167], "intern": [3, 7, 49, 79, 112, 168], "interpret": [53, 57, 149, 150, 183, 200, 228, 230, 236, 237, 313], "interquartil": 310, "interrog": 55, "interv": [112, 149, 208, 228, 236, 251, 310, 313], "intervent": 102, "introduc": [3, 205, 228, 229, 236, 238], "introduced_in_vers": 102, "introduct": [3, 61, 130, 167, 170, 193, 203, 205, 208, 222, 225, 226, 227, 228, 229, 231, 233, 236, 238, 239, 240, 293, 294, 297], "intuit": 163, "invalid": [3, 63, 99, 101, 102, 104, 107, 108, 111, 112, 113, 131, 133, 151, 207, 208, 250, 278, 299, 310], "invalid_gain": 207, "invalid_gain_index": 194, "invalid_indic": 194, "invalid_typ": 111, "invari": [3, 228, 236, 284], "inventori": [11, 306], "invers": [198, 220, 290], "invert": [2, 3, 8, 15, 17, 22, 36, 53, 56, 57, 58, 59, 61, 63, 65, 67, 73, 77, 78, 79, 80, 81, 84, 85, 86, 92, 93, 116, 121, 123, 130, 134, 160, 161, 164, 191, 198, 205, 209, 213, 219, 222, 223, 225, 226, 228, 229, 230, 233, 235, 236, 237, 238, 239, 240, 243, 245, 249, 255, 256, 258, 261, 274, 275, 278, 279, 282, 283, 284, 290, 291, 294, 295, 317, 318, 321], "invest": 11, "investig": [65, 300, 310, 318], "involv": 99, "ioannou": 3, "iqr": 310, "is_al": 111, "is_fallback": 113, "is_run": 280, "is_stabl": 107, "is_valid": [112, 247, 251], "ise": [104, 112, 248, 251], "isermann": 3, "isfinit": [80, 104, 109, 111, 112, 113, 194, 207, 274], "ish": 12, "isinst": [63, 72, 80, 99, 104, 108, 109, 112, 274], "isoformat": 68, "isol": [3, 69, 88, 118, 119, 120, 255], "iss": 3, "issu": [7, 10, 11, 20, 21, 33, 34, 35, 39, 43, 44, 45, 50, 70, 77, 84, 85, 91, 94, 98, 99, 100, 101, 103, 105, 106, 107, 108, 111, 112, 114, 115, 116, 117, 119, 120, 121, 124, 125, 141, 142, 144, 145, 155, 158, 159, 165, 170, 171, 177, 183, 185, 190, 192, 194, 210, 211, 218, 243, 247, 249, 251, 252, 253, 254, 255, 265, 269, 275, 276, 280, 282, 283, 290, 297, 298, 302, 321, 323], "issue2_bounds_viol": 247, "issue2_compli": 252, "issue2_damping_viol": 252, "issue2_overshoot_compli": 252, "issue2_result": 252, "issue2compliancequalityg": 252, "ist": 3, "ita": [68, 149], "item": [45, 63, 99, 101, 108, 111, 112, 247, 252, 255, 280], "iter": [53, 63, 104, 112, 113, 121, 130, 133, 162, 193, 210, 215, 229, 238, 247, 248, 251, 252, 280, 291, 313, 318], "iteration_histori": 113, "iteration_start": 252, "iteration_tim": 252, "its": [228, 229, 236, 238, 273], "iv": [3, 226, 227, 231, 239], "ivp": 200, "j": [3, 17, 30, 31, 57, 65, 67, 113, 142, 159, 228, 236, 251, 271, 279, 291, 318], "j_": [229, 238], "j_robust": 251, "javascript": [27, 28, 30, 140], "jiang": 3, "jit": [41, 216, 220], "jitter": 177, "johnson": 17, "join": [111, 169, 252], "joint": 81, "journal": [3, 11, 320], "journei": 264, "json": [7, 22, 31, 65, 108, 298], "jsonschema": 8, "jupyt": [11, 27, 29, 57, 97, 150, 153, 154], "jupyter_extens": 29, "just": [267, 271, 310], "justif": [99, 247, 252, 299], "k": [3, 72, 77, 99, 104, 107, 109, 112, 116, 191, 194, 205, 207, 228, 229, 230, 236, 237, 238, 247, 251, 291, 310, 313], "k1": [72, 79, 80, 99, 102, 104, 107, 108, 109, 112, 116, 151, 194, 207, 247, 252, 274], "k1_idx": 247, "k1_init": [80, 108, 112], "k1_le_k2_mask": 252, "k1_max": 104, "k1_min": 104, "k1_new": 300, "k1_particl": 252, "k1_prev": 112, "k1\u03b8": [230, 237], "k2": [72, 79, 80, 99, 102, 104, 107, 108, 109, 112, 116, 194, 207, 247, 252, 274], "k2_idx": 247, "k2_init": [80, 108, 112], "k2_max": 104, "k2_min": 104, "k2_new": 300, "k2_particl": 252, "k2_prev": 112, "k2\u03b8": [230, 237], "k8": 11, "k_": [228, 229, 230, 236, 237, 238], "k_1": 291, "k_2": 291, "k_adapt": [79, 107], "k_d": 291, "k_init": [108, 109], "k_max": [99, 102, 104, 108, 109], "k_min": [99, 102, 104, 108, 109], "k_swing": 86, "k_switch": [102, 108], "kalman": [120, 228, 236], "kappa": 291, "kd": [72, 99, 102, 104, 107, 109, 112, 116, 194, 247, 251], "kd_ratio": 99, "keep": [1, 228, 229, 236, 238], "kei": [7, 11, 14, 19, 25, 36, 52, 53, 56, 57, 59, 63, 65, 71, 76, 77, 79, 80, 84, 85, 98, 104, 106, 107, 112, 120, 121, 122, 126, 132, 137, 141, 147, 165, 166, 171, 189, 198, 199, 200, 201, 203, 212, 215, 220, 224, 234, 241, 242, 246, 247, 248, 254, 270, 273, 274, 275, 280, 284, 287, 290, 291, 309, 310, 318, 321], "kennedi": [3, 123, 193, 202, 246, 291], "keyboard": 145, "khalil": [3, 123], "kinet": [161, 198, 225, 229, 238, 240], "know": 121, "knowledg": 205, "known": [27, 28, 29, 33, 143, 229, 238, 283], "kokotov": 3, "kpi": 74, "kruskal": 313, "kubernet": [11, 63, 91], "kutta": [3, 61, 200, 228, 229, 236, 238, 290], "kwarg": [17, 61, 80, 101, 116, 168, 250, 278], "k\u1d62": 107, "k\u2081": [99, 107, 247, 251, 252], "k\u2081_min": 247, "k\u2081\u00b2": 251, "k\u2081\u03b8\u2081": 194, "k\u2082": [99, 107, 247, 251, 252], "k\u2082_max": 247, "k\u2082\u03b8\u2082": 194, "l": [3, 99, 225, 228, 236, 240, 248], "l0": 104, "l1l_": [225, 240], "l2l_": [225, 240], "l_": [229, 238], "l_1": 295, "l_2": 295, "l_estim": 99, "label": [53, 228, 236], "lack": [11, 229, 238], "lagrang": [161, 198, 225, 229, 238, 240], "lagrangian": [161, 198, 220, 225, 240, 258], "lam1": [99, 102, 104, 108, 116, 194, 207], "lam2": [99, 102, 104, 108, 116, 194, 207], "lambda": [3, 102, 228, 230, 236, 237, 247, 251, 252, 280], "lambda1": [191, 247, 251, 252], "lambda1_max": 247, "lambda2": [191, 247, 251, 252], "lambda2_max": 247, "lambda_": [228, 229, 230, 236, 237, 238, 291], "lambda_1": 291, "lambda_2": 291, "lambda_bounds_compli": 252, "lambda_bounds_ok": 252, "lambda_bounds_statu": 252, "lambda_idx": 247, "lambda_max": [104, 247], "lambda_min": [104, 247], "land": 269, "landscap": [201, 290], "languag": [12, 17, 265], "larg": [61, 63, 78, 86, 99, 171, 191, 194, 205, 207, 228, 229, 236, 238, 313], "large_angl": 101, "large_gain": 194, "large_st": 207, "larger": [229, 238, 313], "lasal": 3, "last": [45, 112, 122, 123, 213, 228, 236], "last_control": 49, "last_control_tim": 104, "last_error": 112, "last_sent": 111, "late": 248, "latenc": [62, 136, 158, 170, 177, 228, 236], "latex": [13, 81, 97, 149, 243, 258, 279, 299], "launch": [128, 170, 265, 321], "law": [3, 53, 75, 77, 85, 102, 107, 112, 156, 163, 166, 191, 204, 205, 207, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 258, 287, 288, 290, 291, 297, 301], "layer": [3, 35, 76, 103, 112, 116, 156, 163, 194, 195, 205, 206, 207, 226, 227, 228, 230, 231, 236, 237, 239, 261, 278, 290, 297], "lbrack": [228, 229, 236, 238], "lc1l_": [225, 240], "lc2l_": [225, 240], "ldot": [228, 236, 291], "lead": [191, 225, 228, 229, 230, 236, 237, 238, 240, 300], "leak": [99, 111, 119, 210, 310], "leak_rat": [72, 99, 108, 109], "learn": [11, 24, 25, 26, 27, 29, 31, 32, 33, 40, 57, 127, 130, 147, 160, 224, 225, 234, 240, 305, 309, 323], "learner": 11, "least": [3, 111, 194, 198, 313], "left": [228, 229, 236, 238, 291], "legaci": [20, 50, 61, 76, 83, 140, 214, 251], "legacy_config": 251, "legacy_factori": 50, "legend": [53, 263], "lemma": [3, 298, 299], "len": [17, 51, 53, 80, 99, 101, 104, 107, 108, 109, 111, 112, 113, 168, 194, 207, 215, 247, 248, 251, 252, 274, 278, 280], "length": [17, 45, 80, 84, 109, 225, 228, 229, 236, 238, 240, 259, 295], "leq": [3, 229, 238], "less": [99, 111, 310], "lesson": [24, 25, 26, 27, 29, 31, 32, 33, 40, 57], "let": [12, 229, 238], "letter": [3, 97], "levant": [3, 123, 193], "level": [55, 63, 72, 92, 102, 109, 113, 114, 127, 164, 166, 167, 168, 169, 194, 218, 229, 238, 247, 250, 252, 274, 280, 297, 298, 300, 313], "leven": 313, "lexer": 26, "li": [3, 123, 208], "librari": [15, 30, 122, 266, 268], "licens": [2, 8, 15, 270], "lifecycl": [31, 101, 320], "lighthous": 31, "lightli": [228, 236], "lightweight": [222, 233], "like": [3, 11, 81, 167, 228, 236, 297], "lim_": 194, "limit": [3, 27, 28, 29, 36, 63, 70, 84, 99, 104, 107, 112, 120, 143, 155, 161, 191, 194, 207, 228, 229, 236, 238, 251, 278], "linalg": [113, 191], "linalgerror": 213, "line": [11, 17, 28, 31, 33, 55, 56, 57, 58, 59, 84, 107, 147, 157, 165, 194, 222, 230, 233, 237, 280, 291, 300, 309, 310, 318], "linear": [3, 84, 155, 161, 194, 195, 198, 204, 205, 207, 215, 220, 228, 229, 236, 238, 246, 290, 291, 295], "linearslidingsurfac": [194, 207], "lineno": 297, "liner": 267, "linestyl": 53, "linewidth": 53, "link": [6, 7, 18, 26, 47, 52, 53, 57, 94, 127, 137, 138, 198, 225, 228, 236, 240, 241, 295, 309, 311, 319], "linkcheck": 8, "linspac": [194, 207], "lint": 142, "lipschitz": 104, "list": [17, 49, 51, 63, 72, 80, 99, 101, 104, 107, 108, 109, 112, 113, 116, 121, 194, 247, 271, 274, 278, 297], "list_available_control": [49, 51, 111], "literalinclud": [26, 215], "literatur": [223, 225, 229, 235, 238, 240, 290, 320], "live": [27, 57, 91, 153, 155, 159, 210, 280], "ll": [130, 160], "load": [30, 31, 53, 61, 108, 113, 131, 133, 134, 141, 147, 149, 153, 155, 159, 170, 178], "load_config": 53, "loan": 193, "local": [3, 34, 90, 92, 94, 145, 162, 202, 229, 238, 250, 251, 252, 315], "localhost": 177, "localstorag": [141, 143], "locat": [3, 10, 44, 55, 58, 65, 79, 108, 125, 128, 142, 147, 170, 208, 225, 240, 247, 267, 268], "lock": [70, 111, 117], "log": [53, 70, 91, 111, 112, 135, 142, 143, 147, 215, 254, 300, 318], "log_controller_cr": 112, "log_fil": 254, "log_fitness_evalu": 112, "log_iteration_statist": 215, "log_maintenance_result": 111, "log_resource_usag": 112, "log_simulation_execut": 112, "logger": [113, 116, 215, 274, 278, 297], "logic": [3, 41, 86, 111, 116, 224, 234, 261, 279, 300], "lognorm": 313, "logon": 70, "logs_rot": 111, "long": [104, 210, 211, 253, 261, 284, 290, 301], "longer": 11, "lookup": [104, 258], "loop": [3, 41, 52, 62, 63, 84, 104, 127, 132, 158, 170, 173, 174, 176, 177, 180, 185, 193, 205, 222, 224, 228, 233, 234, 236, 252, 278, 280, 290, 321], "loss": 177, "low": [11, 36, 44, 99, 147, 194, 215, 219, 220, 248, 252, 284, 310, 313], "low_divers": 113, "lower": [104, 107, 108, 116, 229, 238, 248, 275, 280, 310, 313], "lower_bound": [80, 107], "lowercas": 299, "lowest": [36, 313], "lowrank": [44, 61], "lowrankdipdynam": [61, 220], "lru": 104, "ltd": 3, "lunch": 246, "luo": 3, "lyapunov": [3, 11, 73, 77, 97, 104, 107, 123, 156, 160, 163, 191, 193, 204, 206, 207, 226, 228, 236, 239, 249, 258, 279, 283, 287, 288, 289, 290], "m": [3, 35, 53, 55, 61, 65, 111, 112, 198, 228, 229, 236, 238, 269], "m1m_": [225, 240], "m2m_": [225, 240], "m_": [229, 238], "m_0": 295, "m_1": 295, "m_2": 295, "machin": [174, 177, 194, 207, 299], "macreadi": 246, "magicbento": 271, "magnitud": [99, 228, 236, 251, 278], "mai": [11, 99, 109, 112, 118, 194, 229, 238, 247, 297, 313], "main": [50, 53, 62, 63, 65, 67, 81, 85, 110, 185, 189, 265, 300, 309], "maintain": [61, 99, 102, 108, 112, 113, 137, 138, 194, 228, 229, 236, 238, 248, 252, 254, 270, 274, 275, 278, 297, 313], "mainten": [11, 24, 25, 90, 92, 98, 111, 137, 138, 142, 243, 254, 256, 266, 301], "maintenance_log": 111, "maintenance_record": 111, "maintenance_typ": 111, "major": [15, 194, 242], "make": [92, 142, 205, 225, 228, 236, 240], "manag": [13, 50, 53, 57, 61, 63, 70, 72, 73, 77, 98, 100, 101, 102, 104, 107, 111, 112, 113, 170, 171, 210, 211, 250, 252, 315], "mandatori": [245, 261, 283], "mani": [11, 111, 116], "manifest": [11, 31, 300, 301, 318], "manifold": [205, 228, 236], "manipul": [3, 229, 238], "mann": 313, "manual": [21, 27, 70, 98, 102, 108, 122, 168, 193, 254, 261, 298], "manual_act": 247, "manuscript": 320, "map": [51, 55, 95, 121, 227, 228, 231, 236, 263, 264, 274], "margin": [11, 63, 99, 104, 245, 247], "mark": [7, 151, 194], "markdown": [7, 15, 122, 123, 258, 298, 299, 300], "marker": 284, "market": 12, "mask": [40, 104, 251], "mass": [35, 166, 198, 225, 228, 229, 236, 238, 240, 259, 287, 290, 295], "master": [69, 73, 124, 126, 140, 141, 145], "match": [3, 45, 57, 63, 107, 147, 194, 197, 205, 207, 225, 228, 229, 236, 238, 240, 269, 299], "materi": [232, 320], "math": [97, 104, 223, 235, 258, 299], "mathbb": 291, "mathbf": [219, 229, 238, 291], "mathemat": [3, 11, 13, 30, 36, 39, 40, 53, 55, 57, 73, 77, 78, 81, 82, 84, 85, 86, 88, 95, 97, 98, 99, 103, 104, 107, 112, 119, 121, 125, 126, 153, 156, 160, 163, 172, 183, 191, 192, 193, 194, 195, 196, 199, 202, 204, 205, 206, 207, 209, 220, 225, 229, 238, 240, 242, 243, 245, 246, 247, 249, 251, 252, 256, 258, 261, 273, 274, 277, 279, 284, 288, 289, 290, 291, 293, 294, 295, 298, 299, 301], "mathematical_constraint": 112, "mathematical_valid": 255, "mathematicalvalidationpath": 255, "mathrm": [228, 229, 230, 236, 237, 238], "mathsf": [228, 236], "mathviz": 30, "mathviz_extens": 30, "matlab": [65, 149], "matplotlib": [8, 155, 282, 283], "matric": [61, 228, 229, 236, 238, 258], "matrix": [9, 28, 31, 35, 36, 37, 40, 93, 140, 143, 161, 193, 197, 198, 200, 213, 218, 220, 228, 229, 236, 238, 242, 245, 246, 247, 285, 287, 289, 290, 291, 309], "matter": 35, "max": [3, 53, 72, 99, 102, 111, 112, 113, 191, 193, 207, 215, 228, 229, 236, 238, 247, 251, 252, 274, 291, 313], "max_angl": [63, 278], "max_bound": 247, "max_chang": 278, "max_control": 191, "max_control_r": 278, "max_damp": 104, "max_damping_requir": 104, "max_evalu": 53, "max_evaluation_tim": 113, "max_external_disturb": 104, "max_forc": [51, 63, 72, 78, 80, 99, 101, 103, 104, 107, 108, 109, 112, 113, 116, 168, 194, 207, 251, 252, 274, 278], "max_gain": 99, "max_inst": 274, "max_iter": [63, 215, 247, 275, 280], "max_lambda1": 252, "max_lambda2": 252, "max_lambda_bound": 252, "max_meta_evalu": 53, "max_model_uncertainti": 104, "max_nonlinear": 104, "max_optimization_tim": 58, "max_predicted_overshoot": 252, "max_rat": 278, "max_siz": [104, 194], "max_stagnation_iter": 53, "max_step": [228, 236], "max_tim": [111, 113], "max_tot": 247, "max_val": [113, 251], "max_valu": [79, 194], "max_veloc": 278, "max_work": 113, "maxim": 120, "maxima": 313, "maximum": [36, 104, 107, 113, 140, 197, 252, 278], "mb": 111, "mcm_": [225, 240], "mcp": [11, 56, 182, 183, 318], "md": [2, 3, 7, 8, 11, 19, 26, 29, 30, 39, 53, 57, 58, 70, 102, 110, 121, 147, 187, 292, 309, 318], "md5": 68, "mea": 119, "mean": [102, 111, 112, 113, 119, 120, 193, 215, 228, 236, 251, 252, 274, 310, 313], "mean_cost": 251, "mean_fit": 53, "measur": [35, 40, 88, 111, 118, 119, 142, 225, 228, 236, 240, 252, 300, 310], "measured_overshoot": 252, "measured_overshoot_perc": 252, "mechan": [3, 37, 53, 63, 72, 80, 85, 102, 104, 111, 116, 161, 197, 198, 220, 223, 225, 235, 240, 252, 274, 275], "median": 313, "medium": [11, 147, 245, 247, 284, 313], "meet": [10, 65, 111, 228, 236, 313], "memori": [30, 41, 91, 104, 111, 112, 113, 116, 119, 171, 203, 210, 211, 216, 248, 252, 274], "memory_after_mb": 111, "memory_before_mb": 111, "memory_cleanup": 111, "memory_freed_mb": 111, "memory_increas": 111, "memory_info": [111, 112], "memory_mb": [111, 252], "memory_optim": 252, "memory_sampl": 112, "memory_st": 111, "memory_usag": [111, 252], "memorymonitor": 252, "menu": 267, "merg": 131, "mermaid": [251, 252, 259, 274, 278, 317], "messag": [70, 102, 111, 112, 208, 247, 252, 275, 300, 301], "met": [26, 56, 138], "meta": [53, 229, 238], "meta_optim": 53, "metadata": [17, 36, 49, 51, 53, 55, 57, 58, 61, 63, 68, 72, 78, 79, 80, 88, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 116, 117, 135, 151, 168, 169, 178, 191, 193, 194, 207, 208, 215, 247, 248, 250, 251, 252, 255, 273, 274, 275, 276, 278, 280, 297, 298, 300, 310, 313, 321], "metaheurist": [193, 224, 228, 234, 236, 293], "method": [3, 9, 10, 17, 26, 49, 55, 58, 61, 69, 77, 79, 80, 81, 84, 85, 112, 119, 130, 160, 162, 184, 191, 194, 199, 200, 201, 206, 210, 220, 224, 227, 228, 229, 231, 234, 236, 238, 268, 271, 284, 290, 297, 300, 309, 310, 313], "methodolog": 120, "methodologi": [3, 39, 42, 54, 65, 68, 88, 93, 119, 120, 165, 178, 184, 192, 199, 207, 222, 225, 227, 228, 229, 231, 233, 236, 238, 240, 245, 251, 309, 310], "metric": [7, 11, 12, 14, 24, 27, 29, 30, 31, 37, 39, 53, 55, 57, 58, 63, 67, 68, 76, 77, 85, 97, 104, 110, 111, 112, 113, 130, 136, 139, 142, 147, 149, 159, 165, 170, 190, 195, 204, 215, 228, 236, 243, 245, 248, 249, 252, 256, 265, 278, 280, 284, 299, 303, 307, 309, 310, 313, 318, 321], "metrics_collect": 111, "metrics_histori": 53, "middl": 248, "migrat": [20, 50, 73, 76, 98, 99, 102, 108, 111, 139, 141, 247, 251, 275], "migrate_adaptive_smc_manu": 108, "migrate_classical_smc_manu": 108, "migrate_configur": 247, "migrate_configuration_fil": 108, "migrate_hybrid_smc_manu": 108, "migrate_hybrid_smc_parameters_mathemat": 99, "migrate_pso_configur": 251, "migrate_sta_smc_manu": 108, "migrated_config": [108, 247, 251], "migration_guid": [102, 108], "migration_rul": 247, "migration_success": 99, "migration_summari": 108, "migration_warn": 247, "migrationvalidationsuit": 99, "millisecond": 111, "mimic": 293, "min": [3, 11, 45, 99, 102, 104, 107, 112, 113, 194, 215, 247, 251, 252, 291, 313], "min_damping_ratio": 252, "min_diversity_threshold": 53, "min_dwell_tim": 99, "min_k1": 99, "min_k2": 99, "min_norm": 79, "min_siz": 194, "min_val": [113, 251], "min_valu": [79, 194], "min_zeta1": 252, "min_zeta2": 252, "mindmap": 264, "mine": 11, "minif": 142, "minim": [8, 109, 111, 112, 113, 116, 128, 140, 147, 150, 178, 229, 238, 267, 274, 279, 299], "minimal_config": [116, 274], "minimis": [228, 236], "minimum": [11, 57, 58, 99, 104, 178, 194, 252], "minor": 269, "minor_issu": 247, "minut": [111, 121, 124, 126, 141, 142, 189, 190, 253, 313, 323], "misattribut": 297, "mismatch": [70, 84, 125, 147, 247], "miss": [7, 11, 34, 81, 104, 108, 111, 112, 117, 247, 251, 252, 269, 297, 300], "mission": [40, 67, 190, 218, 243], "misus": 79, "mit": [8, 15], "mitig": [35, 37, 190, 227, 228, 231, 236, 247, 290, 294], "mix": 194, "mobil": 145, "mock": 45, "mode": [2, 3, 8, 15, 17, 22, 30, 36, 48, 50, 51, 53, 65, 67, 68, 69, 73, 76, 77, 78, 79, 80, 81, 85, 86, 91, 93, 97, 99, 100, 102, 103, 107, 108, 112, 121, 123, 140, 156, 160, 163, 166, 168, 179, 182, 185, 191, 193, 196, 199, 205, 206, 209, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 243, 245, 249, 250, 255, 256, 258, 269, 273, 274, 275, 278, 279, 283, 288, 289, 290, 291, 293, 294, 301, 306, 313, 318, 321], "mode_hysteresi": 99, "mode_map": 99, "model": [3, 5, 7, 36, 44, 51, 57, 59, 61, 78, 84, 88, 101, 107, 112, 118, 134, 135, 152, 166, 177, 191, 193, 198, 203, 205, 207, 210, 219, 220, 221, 222, 225, 227, 228, 229, 230, 231, 233, 236, 237, 238, 240, 242, 265, 278, 279, 284, 310, 313], "model_0_vs_model_3": 313, "model_1_vs_model_3": 313, "model_3": 313, "model_uncertainti": 104, "moder": [113, 194], "modern": [3, 123, 140], "modif": [3, 63, 102, 147, 165, 253], "modifi": [3, 24, 25, 26, 27, 28, 70, 94, 142, 164, 291], "modul": [7, 9, 10, 37, 51, 52, 53, 56, 57, 58, 59, 82, 84, 117, 118, 127, 130, 202, 213, 215, 222, 233, 250, 269, 270, 297, 309], "modular": [77, 85, 194, 274], "modularadaptivesmc": 274, "modularclassicalsmc": [103, 194, 207, 274], "modularhybridsmc": 274, "modularsupertwistingsmc": 274, "modulenotfounderror": [171, 177], "moment": [225, 240], "monitor": [37, 39, 44, 53, 57, 59, 61, 64, 76, 77, 78, 85, 90, 92, 98, 104, 111, 112, 113, 118, 133, 135, 136, 142, 148, 170, 211, 215, 220, 245, 250, 251, 252, 253, 254, 261, 280, 290, 301, 320, 321], "monitor_canari": 111, "monitor_classical_smc": 78, "monitor_deploy": 111, "monitor_dur": 111, "monitor_green_environ": 111, "monitor_iter": 252, "monitor_pso_perform": 112, "monitor_thread": 280, "monitoring_act": 112, "monitoring_config": 112, "monitoring_data": 252, "monitoringpython": 102, "monitoringresult": 252, "monitors_initi": 252, "monolith": 194, "monoton": [194, 207], "mont": [61, 97, 119, 135, 149, 171, 178, 228, 236, 251, 284, 290, 309, 310, 313], "monte_carlo": [309, 310, 313], "monte_carlo_quick_test": 178, "montecarloanalyz": 309, "month": [9, 10, 11], "monthli": 142, "more": [14, 57, 99, 116, 228, 236, 310], "moreno": [123, 193], "moreov": [228, 236], "most": [7, 81, 123, 127, 267, 288, 321], "motion": [3, 134, 143, 161, 198, 220, 223, 225, 227, 228, 229, 231, 235, 236, 238, 240, 271, 287, 291], "motiv": [195, 205, 222, 227, 231, 233], "moulai": 3, "mount": [91, 223, 228, 229, 235, 236, 238], "move": [102, 205, 207, 228, 236, 295], "mpc": [51, 55, 84, 116], "mpc_control": [17, 49, 55], "mpccontrol": 55, "mpl": 8, "mra": 3, "mspace": [228, 236], "much": [104, 228, 236], "multi": [33, 53, 61, 63, 72, 78, 91, 93, 109, 113, 114, 133, 156, 157, 159, 168, 174, 177, 183, 201, 243, 248, 251, 253, 274, 278, 279, 280, 291, 293, 299, 303, 309, 310, 321], "multi_object": 53, "multi_objective_pso_optim": 104, "multidimension": [3, 193], "multimod": [3, 201], "multiobjectivepsointegr": 278, "multipl": [49, 61, 68, 72, 101, 102, 116, 131, 148, 149, 156, 170, 174, 207, 222, 228, 229, 233, 236, 238, 251, 259, 274, 276, 279, 280, 309, 310, 311, 313], "multistep": 3, "must": [51, 61, 72, 80, 94, 99, 109, 112, 168, 191, 194, 207, 225, 228, 229, 236, 238, 240, 247, 251, 274, 313], "mutat": [41, 261], "mycustomcontrol": 168, "mypi": 300, "myst": [122, 258, 299], "n": [53, 61, 78, 79, 84, 88, 99, 108, 111, 112, 178, 210, 228, 229, 230, 236, 237, 238, 251, 278, 280, 291, 297, 313], "n1": 280, "n2": [111, 280], "n3": [111, 280], "n4": [111, 280], "n5": 111, "n6": 111, "n_": [228, 236], "n_dimens": 113, "n_eval": 193, "n_expect": 17, "n_gain": [51, 80, 104, 111, 112, 113, 116, 251, 252], "n_iter": 291, "n_particl": [53, 63, 104, 112, 191, 193, 247, 318], "n_process": [247, 251], "n_thread": 113, "n_trial": 68, "n_trials_per_ev": 53, "n_trials_per_evalu": 53, "name": [17, 53, 63, 79, 80, 99, 101, 111, 112, 225, 240, 252, 258, 268, 271, 300, 315], "namedtupl": 79, "namespac": 72, "nan": [112, 150, 194, 274], "nanalyz": 108, "narendra": 3, "nativ": [116, 248], "natur": [104, 223, 235, 293], "navig": [95, 98, 129, 189, 253, 262, 264, 267, 271], "nbaselin": 53, "ndarrai": [17, 49, 51, 53, 61, 63, 72, 79, 80, 81, 104, 109, 112, 113, 116, 168, 191, 194, 215, 228, 236, 248, 250, 251, 274, 278, 297, 300], "ndim": [104, 194], "necessari": 247, "need": [7, 21, 55, 102, 112, 129, 130, 144, 150, 167, 169, 210, 211, 228, 236, 269, 313], "needs_attent": 247, "neg": [99, 107, 111, 112, 151, 168, 194, 207], "neighbour": [228, 236], "nest": [72, 247, 297, 309], "netlifi": 141, "network": [3, 30, 31, 177, 185, 222, 224, 233, 234], "neural": [3, 224, 234], "never": 7, "new": [3, 23, 27, 28, 44, 51, 82, 94, 98, 102, 111, 112, 129, 138, 142, 147, 151, 226, 239, 251, 274, 275, 280, 310, 315, 323], "new_adapt": 108, "new_adaptation_r": 99, "new_bandwidth": 99, "new_bound": 247, "new_class": 108, "new_config": [99, 108, 247], "new_control": 51, "new_controller_config": 51, "new_gain": 99, "new_nam": [102, 108], "new_param": 99, "new_settl": 99, "new_settling_tim": 99, "new_sta": 108, "new_valu": 247, "new_vers": 111, "next": [14, 25, 26, 27, 28, 29, 31, 56, 57, 58, 67, 89, 104, 130, 131, 132, 133, 134, 135, 136, 138, 148, 149, 150, 152, 154, 156, 157, 158, 160, 169, 170, 171, 177, 182, 183, 198, 200, 201, 269, 271, 303, 318], "nice": 11, "nightli": 188, "nois": [3, 68, 119, 177, 185, 197, 228, 236], "noisi": [228, 236], "nomenclatur": [225, 240], "nomin": [166, 228, 229, 236, 238], "non": [3, 112, 149, 167, 168, 191, 193, 194, 207, 228, 229, 230, 236, 237, 238, 310, 313], "none": [17, 41, 49, 51, 79, 81, 101, 102, 104, 105, 108, 109, 111, 112, 113, 116, 194, 207, 215, 247, 250, 251, 252, 274, 275, 278, 280, 300], "nonlinear": [3, 81, 84, 104, 123, 130, 134, 135, 168, 205, 222, 223, 225, 229, 230, 233, 235, 237, 238, 240, 256], "nonparametr": 193, "nonstiff": 3, "noptim": 53, "norm": [113, 191, 251, 289], "normal": [17, 53, 119, 120, 147, 246, 250, 251, 290, 306, 309, 310, 313], "normalis": [228, 236], "not_applic": 99, "notabl": 1, "notat": [97, 121, 125, 126, 160, 199, 247, 258, 289, 299], "notation_guid": 121, "note": [3, 6, 47, 49, 57, 67, 110, 126, 138, 147, 178, 211, 221, 280, 292, 311], "notebook": [11, 29, 57, 91, 97, 150, 153, 154], "notic": 155, "notif": 111, "novemb": 275, "now": [13, 36, 45, 68, 89, 119, 210, 321], "np": [17, 49, 51, 53, 61, 63, 68, 72, 79, 80, 101, 104, 109, 111, 112, 113, 116, 168, 191, 194, 207, 215, 228, 236, 247, 248, 250, 251, 252, 274, 278, 291, 297], "nperform": [53, 108, 280], "nproce": 108, "nqualiti": 53, "nrun": 53, "nspeed": 53, "numba": [8, 41, 85, 216, 220], "number": [35, 51, 72, 80, 99, 112, 139, 155, 215, 228, 236, 267, 290, 291, 299, 313], "numer": [3, 35, 53, 59, 61, 63, 69, 79, 84, 99, 107, 109, 113, 119, 134, 160, 170, 191, 193, 194, 195, 199, 200, 204, 207, 209, 212, 213, 220, 226, 228, 229, 236, 238, 239, 246, 274, 279, 283, 284, 290], "numerical_method": 3, "numerical_st": [79, 99, 213], "numericalinstabilityerror": 135, "numerictyp": 79, "numpi": [8, 44, 51, 80, 81, 104, 111, 112, 155, 274, 287, 290, 291, 300], "numpy_vers": 68, "nvalid": 108, "nvisual": 53, "nyquist": 290, "nyquist_limit": 99, "n\u00f8rsett": 3, "o": [3, 63, 108, 111, 297], "obj": 278, "object": [10, 17, 29, 53, 61, 63, 67, 74, 78, 81, 101, 102, 104, 107, 116, 120, 121, 131, 133, 140, 166, 169, 183, 201, 218, 223, 228, 229, 235, 236, 238, 243, 248, 251, 253, 278, 279, 291, 293, 298, 300, 313, 321], "objective_funct": 278, "objectives_valu": 278, "objects_collect": 111, "observ": [3, 43, 147, 161, 193, 228, 236, 293], "obtain": [225, 228, 236, 240], "occur": [213, 228, 236], "occurr": 44, "octob": 11, "odot": 291, "off": [53, 158, 163, 197, 291], "offer": [228, 229, 236, 238], "offici": [17, 270], "offlin": [31, 145], "ok": 269, "old": [102, 315], "old_adapt": 108, "old_adaptation_r": 99, "old_bandwidth": 99, "old_bound": [247, 251], "old_class": 108, "old_config": [99, 108, 247], "old_gain": 99, "old_nam": [102, 108], "old_param": 99, "old_paramet": 108, "old_settl": 99, "old_settling_tim": 99, "old_sta": 108, "older": [108, 140], "oldest": 104, "oldest_kei": 104, "omega": 3, "omega_": 3, "omnibu": 313, "onboard": 11, "onc": [49, 145, 208, 229, 238], "one": [111, 223, 225, 229, 235, 238, 240, 255, 274, 313], "ones": [104, 251, 252, 310], "onli": [7, 11, 41, 49, 102, 108, 109, 112, 122, 130, 147, 151, 191, 207, 223, 225, 228, 229, 235, 236, 238, 240, 252, 282, 283, 313], "onlin": [17, 112, 166, 279, 310], "onto": [205, 228, 229, 236, 238], "oom": 211, "open": [8, 63, 108, 146, 151, 224, 225, 228, 234, 236, 240], "oper": [35, 36, 49, 50, 51, 63, 80, 92, 97, 100, 101, 103, 104, 107, 109, 111, 112, 113, 114, 116, 119, 120, 208, 210, 212, 213, 215, 216, 218, 221, 243, 245, 251, 255, 261, 278, 283, 284, 289, 290, 297, 306, 321], "opportun": [71, 197], "opt_result": 112, "optim": [2, 3, 7, 8, 15, 17, 20, 22, 35, 36, 40, 42, 44, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 63, 64, 65, 69, 71, 76, 77, 80, 81, 84, 85, 92, 97, 100, 101, 102, 103, 104, 105, 107, 111, 112, 113, 116, 121, 123, 124, 126, 127, 128, 130, 132, 133, 135, 140, 143, 148, 156, 158, 159, 167, 168, 170, 172, 179, 180, 181, 182, 183, 184, 189, 191, 193, 197, 199, 201, 202, 203, 209, 211, 213, 214, 215, 216, 217, 220, 222, 224, 225, 228, 229, 233, 234, 236, 238, 240, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 265, 274, 275, 276, 278, 279, 280, 283, 284, 288, 289, 290, 291, 292, 293, 299, 300, 301, 303, 304, 310, 318, 321], "optima": 162, "optimal_s": 247, "optimis": [53, 193, 224, 228, 229, 230, 234, 236, 237, 238, 252], "optimization_bound": 101, "optimization_config": 63, "optimization_fail": 252, "optimization_health": 113, "optimization_histori": [53, 112], "optimization_module_api_refer": 57, "optimization_monitor": 252, "optimization_report": 112, "optimization_result": [63, 112, 252, 275, 278, 280], "optimization_strategi": 252, "optimization_summari": 113, "optimizationloopresult": 252, "optimizationmonitor": [252, 280], "optimizationobject": 53, "optimizationpipelin": 63, "optimizationqualityg": 252, "optimizationresult": [63, 252, 278], "optimizationworkflowmanag": 252, "optimizationworkflowresult": 63, "optimize_adapt": 248, "optimize_adaptive_smc": 280, "optimize_bounds_for_control": 58, "optimize_classical_smc": 280, "optimize_control": [275, 280], "optimize_controller_comprehens": 275, "optimize_hyperparamet": 53, "optimize_sta_smc": 280, "optimize_workflow_perform": 252, "optimized_control": [112, 275, 280], "optimized_gain": [63, 252], "optimized_valu": 53, "optimum": [3, 251, 252], "option": [17, 26, 28, 30, 49, 57, 58, 70, 72, 79, 81, 90, 92, 101, 102, 104, 109, 111, 112, 116, 121, 142, 156, 159, 168, 170, 208, 251, 267, 278, 313], "optional_packag": 111, "optuna": 8, "orang": 53, "orchestr": [11, 59, 61, 171, 190, 203, 218, 243], "ord": 79, "order": [3, 5, 61, 80, 81, 107, 112, 123, 160, 166, 193, 200, 204, 205, 224, 225, 228, 229, 230, 234, 236, 237, 238, 240, 279, 290], "ordinari": [3, 225, 240], "organ": [71, 115, 127, 269], "orient": [3, 17, 61, 130, 148, 150, 151], "origin": [3, 14, 25, 26, 119, 120, 123, 162, 165, 210, 227, 228, 229, 231, 236, 238], "orphan": 7, "orphaned_doc": 7, "oscil": [3, 77, 194, 205, 228, 229, 236, 238], "oscillatori": [85, 291], "osorio": [123, 193], "other": [7, 108, 112, 141, 148, 154, 228, 236, 255], "our": [121, 228, 229, 236, 238], "out": [63, 91, 111, 145, 210, 300], "outcom": [11, 21, 120], "output": [27, 35, 49, 53, 55, 79, 104, 111, 112, 123, 142, 147, 150, 151, 165, 207, 208, 243, 290, 298, 300, 313], "outsid": [7, 207, 247], "over": [113, 159, 225, 228, 236, 240, 318], "overal": [10, 11, 33, 36, 65, 71, 87, 121, 122, 126, 147, 207, 247, 252, 284, 313], "overall_statu": [101, 111, 247, 255], "overcom": [25, 26, 29, 31, 57], "overdamp": 252, "overfit": 310, "overflow": 290, "overhead": [111, 112, 208, 213], "overli": [119, 120], "overrid": [53, 128, 131], "overrun": 177, "overshoot": [63, 68, 104, 107, 112, 156, 165, 247, 249, 251, 252, 278, 303], "overshoot_data": 252, "overshoot_measur": 252, "overshoot_prediction_compli": 252, "overshoot_prediction_ok": 252, "overview": [0, 2, 3, 4, 13, 18, 20, 28, 33, 35, 36, 42, 49, 50, 51, 52, 53, 61, 63, 65, 66, 68, 70, 72, 73, 79, 80, 82, 83, 90, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 125, 127, 130, 131, 132, 133, 134, 135, 136, 138, 143, 148, 149, 150, 151, 154, 156, 159, 161, 166, 168, 170, 171, 183, 185, 187, 189, 192, 196, 198, 199, 200, 201, 203, 205, 207, 213, 214, 216, 217, 219, 220, 224, 229, 232, 234, 238, 241, 248, 250, 252, 258, 261, 264, 265, 273, 274, 277, 278, 279, 280, 283, 296, 297, 298, 299, 302, 303, 304, 305, 308, 310, 315, 320, 321, 322], "owasp": 11, "own": [229, 238, 273], "p": [3, 228, 229, 236, 238, 251, 278, 291, 310, 313], "p0": [9, 10, 11], "p1": 11, "p2": 11, "p3": [10, 11], "p95": 274, "p95_creation_time_m": 111, "p95_time": 111, "p99_creation_time_m": 111, "p99_time": 111, "p_": [228, 236], "p_best": 202, "p_i": 88, "packag": [8, 16, 29, 63, 98, 111, 121, 271, 300, 320], "packet": [177, 185], "packt": 17, "page": [7, 15, 27, 28, 29, 30, 31, 89, 127, 141, 145, 152, 155, 156, 189, 269], "pagerduti": 111, "pair": [228, 236], "pairwis": [113, 313], "panda": [8, 67, 318], "panel": 265, "paper": [3, 8, 15, 122, 123], "paragraph": 299, "parallel": [61, 63, 104, 113, 133, 148, 170, 190, 228, 236, 255, 281, 284], "parallel_effici": 113, "parallelorchestr": 61, "parallelpsoevalu": 113, "param": [72, 108, 247], "paramet": [3, 20, 28, 35, 36, 49, 50, 51, 53, 56, 57, 61, 63, 72, 73, 76, 77, 80, 81, 84, 85, 86, 98, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 112, 113, 117, 119, 120, 124, 128, 130, 131, 132, 133, 134, 135, 136, 147, 148, 154, 156, 157, 162, 163, 164, 165, 166, 168, 170, 171, 172, 179, 180, 181, 183, 184, 194, 196, 197, 198, 201, 202, 205, 207, 208, 215, 216, 224, 225, 228, 229, 230, 234, 236, 237, 238, 240, 247, 248, 249, 251, 252, 253, 258, 259, 261, 265, 273, 274, 275, 278, 279, 280, 288, 289, 290, 291, 293, 310, 313, 318, 321], "parameter_adapt": 252, "parameter_adjust": 247, "parameter_bound": 63, "parameter_count": 99, "parameter_optim": 247, "parameter_uncertainti": 36, "parameter_valid": [17, 208], "parameter_variation_r": 104, "parameterresolutionerror": 109, "parameters_check": 99, "parametervalid": 109, "parametr": [149, 151, 193, 194, 279, 290, 310, 313], "pareto": [183, 201, 253, 278], "pareto_object": 278, "pars": [14, 297, 318], "parse_performance_benchmark": 67, "parser": [67, 297, 318], "part": [98, 103, 105, 106, 166, 167, 168, 171, 177, 182, 226, 239], "partial": [7, 53, 131, 201], "partial_result": 255, "particl": [3, 51, 57, 63, 80, 104, 112, 113, 116, 125, 148, 167, 179, 181, 182, 184, 191, 193, 202, 215, 222, 228, 229, 230, 233, 236, 237, 238, 246, 247, 248, 250, 251, 252, 256, 258, 280, 288, 291, 293], "particle_index": 113, "particle_posit": 63, "particularli": [167, 225, 240], "pass": [10, 21, 34, 45, 61, 93, 94, 99, 101, 107, 108, 109, 111, 112, 121, 130, 147, 165, 168, 194, 213, 218, 252, 274, 278, 280, 283, 297], "passed_test": 111, "pat": 70, "path": [5, 7, 11, 34, 37, 41, 98, 102, 108, 127, 130, 160, 247, 255, 297, 323], "path_nam": 255, "path_result": 255, "patienc": [112, 247, 251], "pattern": [7, 12, 14, 17, 28, 29, 34, 35, 41, 44, 49, 50, 51, 53, 55, 56, 57, 59, 61, 63, 71, 72, 80, 98, 101, 107, 111, 112, 116, 119, 128, 130, 131, 132, 133, 134, 135, 136, 142, 143, 156, 174, 190, 203, 210, 211, 248, 266, 267, 274, 275, 276, 280, 297, 298, 299, 311, 314, 321], "patton": 3, "pdf": 122, "peak": 112, "peak_memory_usag": 112, "peak_memory_usage_perc": 112, "peer": 320, "peg": 297, "penalis": [228, 236], "penalti": [53, 63, 113, 201, 228, 236, 250, 251, 280, 318], "pend": 28, "pendula": 205, "pendulum": [2, 3, 8, 15, 17, 22, 36, 53, 56, 57, 58, 59, 61, 63, 65, 67, 73, 77, 78, 79, 80, 81, 84, 85, 86, 92, 93, 99, 107, 112, 116, 121, 123, 130, 134, 152, 153, 160, 161, 164, 165, 191, 198, 205, 209, 213, 219, 222, 223, 225, 226, 228, 229, 230, 233, 235, 236, 237, 238, 239, 240, 243, 245, 249, 255, 256, 258, 261, 274, 275, 278, 279, 282, 283, 284, 289, 290, 291, 294, 295, 317, 318, 321], "pendulum1_length": 193, "pendulum1_mass": 193, "pendulum2_length": 193, "pendulum2_mass": 193, "pep": 17, "per": [53, 112, 193, 197, 210, 215, 310, 313, 318], "percent": 112, "percentag": [57, 111], "percentil": [274, 310, 313], "perf": 112, "perf_analysi": 275, "perf_count": [111, 112, 274], "perf_metr": 252, "perf_report": 112, "perfect": [10, 36, 65, 245, 321], "perfectli": 310, "perform": [8, 12, 20, 24, 27, 28, 30, 31, 32, 34, 36, 37, 40, 41, 53, 54, 61, 63, 65, 66, 67, 68, 70, 76, 77, 78, 81, 84, 85, 86, 90, 91, 92, 93, 97, 98, 99, 102, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 133, 135, 136, 139, 140, 141, 142, 143, 147, 149, 151, 152, 153, 154, 155, 156, 157, 159, 166, 167, 170, 171, 177, 183, 185, 195, 197, 203, 204, 208, 213, 215, 216, 217, 220, 224, 228, 229, 230, 234, 236, 237, 238, 245, 246, 247, 248, 249, 250, 252, 253, 259, 261, 265, 274, 275, 276, 278, 280, 284, 298, 299, 303, 309, 310, 313, 318, 321], "perform_health_check": 111, "performance_accept": 280, "performance_analysi": [252, 275, 280], "performance_chang": 99, "performance_chart": 65, "performance_histori": 252, "performance_metr": [101, 112, 113, 252, 278], "performance_object": 112, "performance_preserv": 99, "performance_prior": 36, "performance_report": 112, "performance_stat": 112, "performance_statu": 113, "performance_threshold": [99, 102], "performance_valid": 255, "performanceanalyz": 99, "performancemonitor": [61, 252], "performancequalityg": 252, "performancevalidationpath": 255, "period": [112, 113, 245, 261], "permiss": [8, 63, 91], "perruquetti": 3, "persist": [104, 122, 141, 143, 145, 155], "person": [63, 70, 229, 238], "personal_best": [63, 291], "personal_best_posit": 191, "perspect": 3, "perturb": [112, 165, 193, 228, 236, 278], "petzold": 3, "phase": [0, 3, 4, 7, 9, 10, 14, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 52, 53, 55, 56, 57, 58, 59, 63, 65, 67, 126, 138, 139, 142, 143, 147, 149, 156, 163, 165, 169, 190, 197, 245, 248, 252, 297, 298, 304, 309, 310, 313, 318, 320], "phase_4_3_completion_report": 58, "phi": [3, 247, 291], "phi_1": 3, "phi_2": 3, "philosophi": [112, 208, 248], "physic": [45, 53, 57, 61, 68, 72, 73, 74, 99, 107, 109, 134, 152, 161, 164, 193, 216, 220, 225, 227, 228, 229, 231, 236, 238, 240, 251, 252, 258, 289, 295, 317], "physical_realiz": 99, "physics_param": 251, "physics_sampl": 251, "physics_uncertainti": 193, "physicsuncertaintyschema": 251, "pi": [112, 228, 236, 252, 278], "pika": 8, "pin": [225, 240], "pipelin": [11, 34, 63, 93, 133, 135, 136, 220, 250, 251, 298, 300], "pitfal": [53, 252, 297, 310], "pivot": [31, 225, 229, 238, 240], "place": [81, 228, 236], "placehold": 7, "placement": [3, 99, 104, 107, 163, 287], "plain": 299, "plan": [0, 4, 9, 10, 11, 26, 30, 37, 45, 46, 48, 54, 56, 60, 139, 172, 173, 174, 175, 176, 179, 180, 181, 184, 187, 190, 304, 310], "plane": [228, 236], "plant": [7, 18, 44, 45, 61, 64, 101, 104, 134, 205, 213, 219, 220, 221, 278], "plant_config": [101, 113, 278], "plant_config_or_model": 116, "plant_config_typ": 101, "plant_model": 278, "plant_model_config": 278, "plant_param": 104, "plantmodelregistri": 278, "platform": [65, 68, 91], "plestan": 3, "plot": [53, 57, 61, 79, 124, 128, 136, 147, 150, 157, 260, 319], "plotli": [8, 27, 28, 153, 157], "plt": 53, "png": [53, 295], "po": 252, "point": [27, 49, 57, 143, 208, 221, 228, 229, 236, 238, 246, 255, 290, 306, 313], "pole": [3, 104, 107, 163, 287], "poli": 3, "polici": [5, 142, 143, 256, 315], "polish": [10, 28], "polyakov": 3, "polynomi": 251, "pomet": 3, "pool": [61, 113, 274], "poor": [113, 252, 253, 313], "pop": 313, "popul": [53, 104, 113, 158, 169, 193, 228, 229, 236, 238, 293, 313], "popular": [127, 225, 240, 267, 271], "population_divers": 53, "population_s": [275, 280], "port": [91, 270], "portfolio": 36, "portion": [229, 238], "portrait": [149, 156, 197], "posit": [3, 10, 51, 53, 63, 72, 80, 86, 99, 104, 107, 109, 112, 119, 120, 168, 191, 194, 198, 207, 223, 225, 228, 229, 235, 236, 238, 240, 251, 252, 259, 280, 291, 299, 310], "position_error": 63, "position_histori": 252, "possess": [229, 238], "possibl": 116, "post": [40, 92, 93, 252, 278], "post_init": 194, "posteriori": [228, 236], "postur": 11, "potenti": [63, 161, 198, 225, 229, 238, 240], "power": [85, 99, 156, 168, 191, 228, 236, 309, 310, 313], "power_expon": [99, 102, 108, 109], "poznyak": 3, "pp": 3, "pr": 188, "practic": [3, 8, 17, 24, 32, 33, 35, 41, 53, 57, 72, 79, 80, 91, 94, 98, 107, 108, 113, 131, 148, 150, 154, 159, 163, 165, 167, 168, 169, 170, 171, 178, 182, 193, 197, 199, 200, 201, 203, 205, 222, 223, 224, 225, 226, 228, 233, 234, 235, 236, 239, 240, 249, 252, 253, 274, 276, 279, 282, 299, 304, 309, 310, 311, 313, 314, 315], "prali": 3, "pre": [10, 12, 23, 31, 37, 40, 44, 91, 92, 94, 108, 111, 116, 167, 175, 177, 205, 245, 250, 251, 252, 261, 278, 282, 300, 310, 321], "pre_deployment_check": 111, "preced": [230, 237], "precis": [194, 197, 207, 228, 236, 246, 290, 298], "predefin": [229, 238], "predict": [51, 53, 78, 84, 118, 228, 236, 249, 252, 284, 310], "predicted_iterations_remain": 53, "predicted_overshoot": 252, "predicted_overshoot_perc": 252, "predicted_overshoot_rang": 252, "prefer": [41, 97, 108, 228, 236], "preliminari": [228, 236], "prematur": [162, 215, 229, 238, 251], "premature_convergence_detect": 53, "prentic": 3, "prepar": [23, 318, 320], "prepend": 251, "preprint": 320, "preprocess": 63, "prerequisit": [34, 91, 124, 141, 160, 298], "prescrib": [224, 228, 229, 234, 236, 238], "present": [3, 19, 41, 108, 205, 222, 228, 229, 232, 233, 236, 238, 246, 279, 291], "preserv": [11, 98, 99, 104, 112, 228, 236, 274], "press": 3, "prevent": [3, 11, 24, 40, 44, 63, 79, 86, 99, 104, 143, 210, 247, 254, 255, 283, 284, 300], "preview": 315, "previou": [29, 30, 31, 57, 111, 156, 224, 228, 229, 234, 236, 238, 242, 278], "primari": [17, 29, 49, 53, 56, 63, 77, 81, 85, 105, 107, 110, 112, 119, 123, 166, 169, 243, 274, 292, 300, 301], "primarili": [223, 235], "primit": [79, 82, 136], "princ": [3, 61, 200], "principl": [3, 12, 84, 103, 112, 127, 132, 143, 162, 166, 172, 198, 203, 220, 225, 226, 229, 238, 239, 240, 247, 248, 255, 258, 274, 295, 310], "print": [53, 78, 99, 107, 108, 111, 112, 145, 275, 280], "print_optimization_summari": 112, "prior": 205, "priori": [228, 236], "priorit": 284, "prioriti": [11, 37, 49, 57, 58, 72, 80, 121, 147, 261, 284], "prize": [228, 236], "prng": 250, "pro": [267, 269, 271], "probabilist": 3, "probabl": [3, 228, 236], "problem": [3, 24, 25, 33, 35, 81, 84, 117, 119, 120, 131, 132, 133, 134, 135, 144, 164, 167, 169, 190, 200, 205, 210, 213, 218, 222, 223, 225, 227, 228, 229, 231, 233, 235, 236, 238, 240, 246, 291, 296, 297, 300, 310, 321], "problemat": [247, 251], "proce": [63, 108], "procedur": [12, 25, 73, 92, 93, 98, 108, 115, 117, 142, 173, 176, 177, 209, 228, 229, 236, 238, 254, 261, 283, 285, 298], "proceed": 3, "process": [3, 4, 11, 59, 63, 97, 111, 113, 122, 135, 139, 170, 207, 228, 236, 252, 274], "produc": [194, 207, 228, 236, 279], "product": [11, 16, 24, 25, 26, 32, 40, 51, 56, 57, 59, 63, 65, 67, 71, 79, 89, 91, 92, 93, 95, 98, 107, 111, 112, 131, 142, 148, 158, 166, 173, 175, 177, 183, 188, 190, 203, 211, 215, 218, 241, 242, 243, 244, 245, 251, 275, 282, 283, 284, 289, 301, 309, 321], "production_config": 111, "production_readiness_check": 111, "productionfactorydeploy": 111, "profession": [12, 13, 17, 25, 28], "profil": [41, 136, 203, 303], "program": [84, 112], "programmat": [131, 134, 150], "progress": [31, 33, 58, 113, 147, 159, 165, 169, 170, 215, 248, 253, 267, 269, 280, 320], "progress_queu": 280, "project": [0, 2, 3, 8, 11, 14, 15, 17, 50, 53, 56, 57, 58, 59, 61, 65, 66, 67, 68, 72, 73, 87, 95, 98, 107, 116, 117, 121, 122, 138, 141, 189, 193, 205, 209, 222, 224, 225, 228, 229, 230, 233, 234, 236, 237, 238, 240, 248, 253, 255, 266, 268, 282, 283, 284, 308, 318, 320], "prometheu": 92, "prometheus_cli": 111, "promis": [229, 238], "promot": [229, 238], "prompt": 67, "prong": 298, "proof": [3, 11, 163, 191, 197, 243, 249, 287, 291, 299], "prop": 267, "propag": [247, 290, 310], "propagate_constraint": 247, "propagated_bound": 247, "proper": [0, 45, 99, 107, 108, 109, 111, 112, 119], "properli": 45, "properti": [37, 40, 49, 55, 61, 112, 119, 161, 191, 194, 195, 204, 206, 207, 209, 225, 240, 245, 261, 282, 284, 287], "proport": [3, 77, 228, 236], "propos": [17, 142, 225, 228, 236, 240, 278], "proposit": [298, 299], "protect": [50, 51, 80, 111, 113], "protocol": [49, 61, 68, 76, 93, 119, 177, 185, 190, 220, 245, 251, 261, 274, 278, 285, 298, 310], "prototyp": [158, 197], "prove": 3, "proven": [117, 291], "provid": [0, 2, 3, 4, 13, 39, 49, 50, 51, 56, 57, 59, 61, 63, 68, 72, 73, 76, 78, 79, 80, 92, 93, 99, 100, 101, 102, 103, 104, 105, 107, 109, 112, 113, 114, 116, 117, 119, 121, 122, 130, 147, 148, 150, 165, 166, 178, 182, 184, 191, 192, 193, 194, 196, 207, 208, 210, 213, 217, 219, 225, 228, 229, 230, 236, 237, 238, 240, 243, 246, 248, 251, 252, 254, 273, 274, 275, 276, 278, 279, 280, 284, 291, 293, 294, 295, 297, 299, 304, 317, 321], "pseudo": 290, "pseudocod": [229, 238], "pseudorandom": 310, "pso": [0, 2, 3, 7, 8, 11, 15, 17, 19, 20, 22, 28, 35, 36, 38, 39, 40, 42, 43, 49, 50, 51, 53, 56, 57, 59, 60, 61, 63, 64, 69, 71, 72, 73, 76, 77, 78, 80, 81, 84, 85, 87, 88, 92, 93, 97, 98, 100, 101, 103, 104, 105, 107, 111, 112, 113, 116, 117, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 146, 148, 150, 151, 157, 158, 159, 160, 162, 167, 168, 170, 172, 179, 180, 181, 182, 183, 184, 189, 191, 193, 199, 202, 208, 210, 211, 214, 215, 217, 222, 223, 224, 228, 229, 230, 233, 234, 235, 236, 237, 238, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 261, 265, 266, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 293, 300, 303, 304, 310, 313, 318, 319, 321], "pso_algorithm_found": [53, 57], "pso_config": [104, 112, 275, 280], "pso_configurationvalid": 247, "pso_configvalid": 251, "pso_convergence_chart": 318, "pso_convergence_monitor": 53, "pso_convergence_risk": 247, "pso_convergencemonitor": 251, "pso_error": 101, "pso_factori": [275, 280], "pso_factory_bridg": [275, 280], "pso_fit": 112, "pso_health": 254, "pso_health_monitor": 254, "pso_hyperparameter_optim": 53, "pso_integr": 111, "pso_integration_success": 101, "pso_metr": 112, "pso_opt": 101, "pso_optim": [3, 7, 250, 291], "pso_optimization_complet": [3, 292], "pso_optimization_data_flow": 63, "pso_optimization_guid": 7, "pso_param": [112, 248], "pso_result": 252, "pso_test_result": 101, "pso_tun": 251, "pso_wrapp": 101, "psoconfig": 251, "psocontrollerwrapp": [51, 80, 104, 107, 112, 113, 116], "psofactoryconfig": [112, 275, 280], "psofactoryintegr": 278, "psofactoryinterfac": [104, 113], "psohyperparameteroptim": 53, "psooptim": 63, "psoperformancemonitor": 112, "psoprogressmonitor": 113, "psotun": [53, 57, 133, 193, 216, 248, 250, 251, 252], "psutil": [8, 111, 112, 252], "public": [2, 3, 10, 13, 15, 56, 58, 59, 121, 127, 320], "publish": [17, 278], "pull": 91, "purpos": [12, 79, 80, 98, 119, 178, 202, 225, 240, 299, 323], "push": [24, 94], "put": [104, 280], "pwa": 31, "py": [3, 7, 17, 24, 28, 29, 30, 31, 32, 33, 34, 38, 44, 45, 50, 51, 55, 56, 59, 61, 67, 79, 146, 147, 151, 207, 208, 213, 215, 225, 230, 237, 240, 250, 275, 283, 291, 298, 300, 309, 310, 315, 321], "pydant": [8, 72, 111], "pydocstyl": 55, "pygment": [8, 26], "pymodbu": 8, "pyodid": [27, 28], "pyswarm": [8, 112, 250], "pytest": [7, 8, 56, 57, 107, 151, 194, 207, 284, 323], "python": [10, 14, 17, 27, 35, 49, 51, 53, 55, 56, 59, 61, 63, 65, 72, 78, 79, 80, 102, 107, 112, 115, 116, 117, 128, 130, 146, 147, 148, 150, 151, 153, 155, 168, 169, 178, 194, 207, 208, 210, 213, 215, 225, 230, 237, 240, 247, 248, 250, 251, 252, 255, 258, 273, 274, 275, 276, 278, 280, 283, 297, 298, 300, 310, 313], "python3": [53, 117, 248], "python_vers": 68, "pythonpath": 151, "pyyaml": [8, 111], "pyzmq": 8, "q": [11, 130, 198, 219, 229, 238, 253], "q1": 122, "q2": [121, 122], "q3": [121, 122], "q4": [121, 122], "q5": [121, 122], "q6": 122, "q7": 122, "q_": [228, 229, 236, 238], "qed": 299, "qp": 84, "quad": [228, 236, 291], "quadrat": [84, 291], "qualiti": [8, 9, 10, 11, 13, 14, 24, 25, 26, 28, 29, 32, 37, 39, 53, 55, 57, 58, 59, 64, 67, 71, 87, 93, 94, 97, 101, 111, 114, 121, 126, 137, 138, 142, 188, 190, 218, 243, 245, 247, 252, 255, 256, 275, 282, 283, 284, 299, 309, 318, 320], "quality_g": [252, 282, 283], "quality_improv": 53, "quality_improvement100": 53, "qualityg": 252, "qualitygatereport": 252, "qualitygateresult": 252, "qualitygatesystem": 252, "quantif": [195, 251, 290, 310, 313], "quantifi": [228, 236, 310], "quantit": [227, 231], "quarterli": 142, "quasi": 290, "queri": 51, "question": [11, 121, 122, 130, 169, 224, 234, 253, 320], "queue": [280, 298], "quick": [2, 6, 10, 12, 18, 20, 21, 26, 47, 77, 82, 85, 90, 91, 92, 94, 95, 98, 115, 117, 121, 123, 124, 125, 126, 127, 128, 129, 137, 141, 142, 144, 148, 150, 151, 152, 153, 155, 157, 158, 170, 171, 177, 178, 182, 185, 189, 197, 211, 212, 219, 241, 253, 258, 264, 265, 266, 267, 268, 269, 271, 281, 282, 283, 288, 291, 298, 311, 319, 321, 323], "quickli": [115, 228, 236], "quickstart": 185, "q\u2081": 310, "q\u2083": 310, "r": [3, 17, 63, 108, 111, 291], "r1": 191, "r2": 191, "r_": [228, 229, 236, 238], "r_1": 291, "r_2": 291, "race": 284, "rad": [104, 112, 228, 236, 278], "radar": [157, 159], "radau": [228, 230, 236, 237], "radial": 3, "radian": [228, 236], "rail": [228, 236], "rais": [17, 63, 80, 99, 101, 104, 107, 109, 111, 112, 168, 194, 207, 247, 251, 274, 278], "ran": 147, "random": [155, 162, 171, 191, 194, 228, 229, 236, 238, 291, 310, 313], "random_se": 68, "rang": [63, 81, 99, 102, 104, 111, 112, 113, 120, 158, 165, 191, 194, 207, 208, 228, 236, 247, 252, 274, 278, 291, 310, 313], "range_valid": 208, "rank": [65, 219, 220, 280, 309, 310, 313, 318], "rapid": [130, 197, 205, 283], "rare": 7, "rate": [3, 11, 84, 98, 99, 102, 104, 106, 107, 108, 109, 111, 112, 113, 119, 120, 147, 185, 205, 215, 218, 228, 229, 236, 238, 251, 252, 278, 280, 283, 291, 313, 318], "rather": [57, 120, 223, 235], "ratio": [99, 194, 207, 215, 251, 252], "rational": [11, 31, 53, 58], "raw": 297, "raw_metr": 112, "rbrack": [228, 229, 236, 238], "re": [11, 63, 269, 318], "reach": [3, 156, 194, 204, 205, 206, 207, 228, 229, 236, 238, 251, 287, 290, 297], "reachabl": 206, "react": [266, 267, 268, 269, 271], "read": [41, 63, 81, 112, 122, 128, 141, 160], "read_text": 297, "readabl": [51, 61, 112, 299], "readi": [11, 24, 25, 26, 32, 40, 51, 56, 57, 59, 67, 71, 89, 92, 93, 107, 108, 111, 166, 190, 215, 218, 241, 242, 243, 244, 245, 275, 280, 284, 301, 321], "readm": [8, 19, 270], "readthedoc": 315, "real": [3, 7, 17, 37, 39, 53, 61, 73, 84, 112, 118, 119, 177, 182, 183, 195, 197, 225, 240, 245, 249, 252, 253, 261, 274, 280, 284, 310, 321], "real_time_optimization_integr": 280, "realist": [45, 134, 310], "realiz": [99, 251], "realization_cost": 251, "realpython": 17, "reason": [63, 99, 104, 107, 112, 194, 207], "reassur": 147, "reced": 84, "recent": [45, 81, 223, 226, 235, 239], "recent_cost": 112, "recent_divers": 113, "recip": [3, 149, 150], "recommend": [7, 11, 16, 20, 24, 31, 32, 40, 53, 57, 58, 61, 67, 70, 73, 84, 89, 90, 93, 94, 99, 111, 113, 121, 126, 128, 140, 147, 160, 166, 178, 182, 188, 195, 197, 200, 201, 202, 210, 218, 224, 226, 228, 230, 234, 236, 237, 239, 243, 249, 252, 253, 269, 271, 282, 283, 284, 291, 299, 309, 313, 318], "recommended_act": 63, "record": [11, 113], "recoveri": [92, 93, 98, 111, 112, 119, 173, 220, 252, 254, 261, 274, 280], "recreat": 116, "recurs": [3, 228, 236], "red": 53, "reduc": [3, 11, 35, 63, 72, 120, 143, 205, 228, 230, 236, 237, 249, 252, 278, 284, 297], "reduct": [3, 77, 79, 85, 102, 107, 120, 156, 194, 197], "refactor": [11, 17], "refer": [2, 3, 7, 10, 11, 12, 17, 20, 26, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 69, 77, 79, 81, 82, 84, 85, 86, 94, 95, 98, 100, 103, 105, 107, 110, 112, 119, 121, 123, 125, 126, 127, 128, 130, 140, 143, 147, 159, 170, 171, 177, 182, 193, 197, 199, 203, 204, 206, 208, 210, 211, 212, 213, 216, 219, 220, 222, 224, 225, 226, 227, 231, 233, 234, 239, 240, 245, 257, 258, 259, 267, 268, 273, 275, 287, 288, 289, 290, 291, 292, 296, 297, 298, 299, 301, 303, 307, 308, 309, 312, 323], "referenc": [7, 13, 57], "refin": [133, 202, 248, 253], "reflect": [45, 228, 236], "refresh": 155, "refus": 177, "regex": [297, 299, 318], "regim": [228, 236], "region": [3, 53, 156, 200, 201, 228, 236], "regist": [31, 70, 310], "registr": 31, "registri": [17, 50, 51, 61, 251, 274], "registry_default": 72, "registry_info": [104, 251], "regress": [24, 34, 44, 142, 247, 252, 290], "regressionqualityg": 252, "regul": [3, 225, 240], "regular": [25, 108, 109, 204, 213, 220, 252, 254, 290], "reinforc": [224, 225, 234, 240], "reject": [3, 84, 107, 194, 259, 313], "rel": [7, 99, 228, 236], "relat": [42, 53, 57, 64, 66, 82, 124, 125, 148, 152, 155, 169, 185, 213, 216, 219, 220, 230, 237, 265, 277, 281, 302, 305, 308, 322], "relationship": [3, 53, 57, 107, 229, 238, 247], "relative_improv": 251, "relative_improvement_threshold": 53, "releas": [11, 23, 139, 315], "relev": [7, 252], "reli": [228, 236], "reliabl": [11, 45, 93, 111, 208, 215, 228, 236, 274, 275], "reload": 91, "remain": [10, 24, 25, 26, 28, 32, 33, 53, 57, 113, 229, 238, 241], "remedi": [65, 67, 228, 236], "rememb": [228, 236], "remot": 70, "remov": [7, 44, 63, 102, 104, 108, 147, 247, 251], "removed_in_vers": 102, "renam": [102, 108], "render": [13, 152, 258], "repeat": [112, 194, 207], "repeatedli": [11, 228, 236], "repetit": 313, "replac": [7, 12, 102, 108, 147, 228, 236, 267], "report": [7, 11, 14, 19, 25, 26, 27, 28, 29, 30, 31, 33, 38, 39, 42, 52, 55, 56, 57, 58, 59, 66, 67, 71, 95, 112, 113, 143, 144, 145, 147, 151, 165, 169, 188, 225, 226, 229, 238, 239, 240, 243, 244, 247, 251, 252, 255, 282, 284, 308, 309, 310, 318], "repositori": [13, 39, 70, 71, 89, 121, 124, 146], "repr": 112, "repres": [78, 81, 120, 252, 279], "represent": [112, 134, 135, 288, 289, 295, 317], "reproduc": [68, 91, 121, 124, 169, 170, 252, 320], "reproduct": [121, 124, 126], "reproduction_guid": 121, "request": [11, 25], "requestanimationfram": 143, "requir": [7, 8, 11, 15, 27, 28, 34, 36, 37, 38, 51, 55, 56, 57, 58, 61, 65, 67, 80, 92, 99, 102, 104, 107, 108, 109, 111, 112, 113, 124, 128, 132, 135, 141, 147, 152, 153, 155, 190, 194, 195, 204, 205, 206, 207, 225, 228, 229, 236, 238, 240, 245, 247, 249, 250, 251, 252, 261, 265, 267, 269, 274, 279, 284, 290, 301, 310, 313, 321], "require_in_rang": 208, "required_memori": 252, "required_packag": 111, "required_param": [51, 103], "research": [2, 4, 13, 17, 31, 55, 127, 156, 166, 169, 170, 178, 197, 224, 232, 234, 256, 265, 274, 280, 284, 290, 298, 309, 320], "researchplan": [1, 22, 23], "researchplanspec": [5, 22], "reserv": 58, "reset": [33, 49, 81, 112, 145, 153, 300], "reset_performance_stat": 112, "reshap": 104, "residu": [3, 118, 119, 120, 228, 236], "resili": [190, 255], "resolut": [36, 39, 49, 70, 72, 92, 98, 103, 105, 106, 108, 109, 111, 114, 115, 121, 190, 210, 218, 242, 249, 251, 258, 275, 276, 300, 302, 321], "resolv": [10, 17, 33, 49, 100, 101, 109, 111, 116, 122, 228, 236, 254, 275, 300], "resourc": [11, 17, 91, 111, 112, 113, 121, 136, 145, 168, 245, 252, 266, 307, 312, 314], "resource_metr": 112, "respect": [225, 240, 295], "respond": 207, "respons": [63, 77, 94, 185, 194, 245, 259, 261], "restart": 252, "restart_mechan": 252, "restor": 111, "restore_factory_default": 254, "restore_factory_vers": 111, "restore_from_backup": 254, "restrict": 8, "restructur": [7, 194, 247], "restructured_config": 102, "result": [7, 14, 21, 25, 26, 27, 33, 40, 41, 44, 53, 55, 58, 59, 61, 63, 77, 78, 80, 81, 85, 91, 99, 101, 104, 107, 108, 111, 112, 113, 120, 121, 126, 128, 133, 134, 135, 136, 147, 149, 150, 159, 165, 169, 170, 171, 177, 178, 183, 188, 193, 194, 199, 205, 207, 208, 218, 225, 227, 228, 229, 230, 231, 236, 237, 238, 240, 250, 252, 255, 259, 260, 274, 275, 278, 280, 284, 290, 291, 299, 309, 310, 313, 318, 320, 321], "result1": 291, "result2": 291, "result_larg": 194, "result_smal": 194, "resultcontain": 61, "retain": [229, 230, 237, 238], "retriev": [17, 53, 104], "return": [17, 36, 40, 45, 49, 51, 53, 63, 78, 79, 80, 81, 99, 101, 104, 107, 108, 109, 111, 112, 113, 116, 168, 183, 191, 194, 207, 215, 228, 236, 247, 248, 251, 252, 255, 274, 275, 278, 280, 297, 300, 313], "reus": [116, 276], "reusabl": 17, "reveal": [44, 65], "review": [16, 58, 97, 121, 122, 123, 125, 126, 188, 243, 245, 261, 298, 300, 320], "rh": [228, 236], "rho": 3, "ridg": 290, "right": [135, 203, 228, 229, 236, 238, 291], "rightarrow": [228, 229, 236, 238], "rigid": [225, 228, 236, 240], "rigor": [3, 11, 39, 103, 104, 107, 119, 120, 191, 207, 209, 243, 246, 248, 279, 291, 310], "risk": [37, 44, 190, 194, 215, 229, 238, 245, 251, 309, 310, 313], "risk_factor": 251, "riter": 280, "rk": 3, "rk4": [3, 200, 228, 236], "rk45": [3, 200, 228, 236, 290], "rlock": [50, 103, 104, 113], "rm": [68, 165], "rng": 250, "roa": [228, 236], "roadmap": [10, 39, 82], "robot": [3, 225, 240, 290], "robust": [3, 35, 45, 49, 53, 68, 77, 78, 79, 80, 84, 112, 114, 116, 133, 163, 166, 169, 188, 193, 194, 197, 205, 208, 213, 222, 226, 228, 229, 233, 236, 238, 239, 248, 251, 252, 255, 259, 274, 275, 276, 280, 284, 290, 291, 309, 310, 321], "robust_cost": 251, "robust_optimization_under_uncertainti": 251, "robust_ratio": 78, "robustli": [228, 236], "robustness_improv": 53, "robustness_improvement100": 53, "robustness_penalti": 248, "robustness_studi": 169, "role": [218, 243], "roll": 111, "rollback": [93, 111, 142], "rollback_canari": 111, "rollback_data": 111, "rollback_deploy": 111, "rollout": 111, "room": 64, "root": [24, 81, 117, 119, 228, 236, 249, 300], "rotari": [229, 238], "rotat": 111, "rotate_log": 111, "rough": 99, "round": [104, 290], "rounded_gain": 104, "routin": [228, 236], "row": 65, "rss": 111, "rstrip": 247, "rtd": 8, "rtol": [207, 228, 236], "rubric": 57, "rugged": 201, "rule": [3, 5, 17, 20, 41, 51, 53, 72, 73, 80, 99, 104, 111, 140, 194, 196, 211, 247, 251, 258, 273], "run": [53, 61, 63, 70, 78, 91, 99, 101, 104, 108, 111, 112, 115, 117, 121, 124, 125, 126, 128, 135, 145, 150, 151, 155, 165, 167, 169, 170, 177, 183, 185, 186, 189, 210, 211, 230, 237, 247, 248, 275, 278, 280, 281, 282, 283, 290, 303, 310, 313, 318, 320, 321, 323], "run_full_integration_suit": 101, "run_full_valid": 99, "run_migration_test_suit": 108, "run_optimization_workflow": 63, "run_simul": [61, 63, 78, 112, 203, 216], "rung": [3, 61, 200, 228, 229, 236, 238, 290], "runge_kutta": 61, "runnabl": [17, 36, 49, 51, 53, 55, 58, 61, 63, 68, 72, 78, 79, 80, 88, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 116, 117, 135, 151, 168, 169, 178, 191, 193, 194, 207, 208, 215, 247, 248, 250, 251, 252, 255, 273, 274, 275, 276, 278, 280, 297, 298, 300, 310, 313, 321], "runner": [27, 84, 203], "runtim": [36, 37, 40, 73, 81, 92, 111, 141, 153, 155, 218, 242, 252, 261, 300, 301], "runtimeerror": [111, 112], "s1": [194, 207], "s2": [194, 207], "s_": [228, 236], "s_combin": [194, 207], "s_origin": 207, "s_scale": 207, "s_valu": [194, 207], "safe": [17, 44, 49, 50, 51, 63, 72, 76, 79, 80, 100, 101, 102, 103, 104, 105, 107, 111, 112, 113, 116, 194, 196, 228, 236, 252, 273, 274], "safe_control": 63, "safe_controller_cr": 274, "safe_divid": 79, "safe_exp": 79, "safe_load": 108, "safe_norm": 79, "safe_oper": 79, "safe_sqrt": 79, "safeguard": 194, "safeti": [37, 49, 59, 61, 63, 65, 67, 72, 73, 79, 93, 98, 103, 104, 107, 111, 112, 113, 117, 119, 135, 176, 185, 190, 194, 203, 243, 245, 249, 252, 261, 273, 274, 278, 284, 310, 313], "safety_alert": 252, "safety_config": [63, 278], "safety_factor": 63, "safety_limit": [63, 278], "safety_margin": 104, "safety_result": 252, "safety_statu": 63, "safety_viol": 63, "safetymanag": 63, "safetymonitor": 252, "safetyqualityg": 252, "safetyvalidationresult": 63, "safetyviol": 63, "sai": 147, "same": [11, 59, 102, 165, 276], "sampl": [11, 28, 34, 84, 99, 119, 178, 185, 228, 236, 251, 252, 284, 290, 309, 310, 313], "sampling_tim": 99, "sanit": [63, 136, 147], "sanitize_user_input": 63, "sanitized_valu": 63, "sastri": 3, "sat": [77, 102, 228, 236], "satisfact": [11, 251], "satisfi": [51, 107, 207, 229, 238, 279], "satur": [78, 79, 104, 107, 112, 132, 136, 195, 207, 226, 228, 230, 236, 237, 239, 251, 261, 297], "save": [53, 128, 133, 147, 169, 170], "savefig": 53, "scalabl": [84, 111, 177], "scalar": [41, 45, 99, 112, 289], "scale": [53, 61, 194, 220, 228, 229, 236, 238, 290], "scan": [7, 44, 111], "scatter": [28, 157], "scenario": [45, 72, 131, 148, 169, 173, 259, 275, 278, 280, 310, 313], "schedul": [58, 70, 193, 243, 246, 250, 251, 297], "schema": [5, 10, 46, 51, 56, 72, 73, 107, 112, 131, 143, 196, 225, 240, 247, 251, 273, 275, 277, 278, 298], "schemat": [225, 240], "scheme": [3, 228, 236], "school": [167, 193, 293], "scienc": [3, 11], "scientif": [3, 8, 15, 39, 99, 107, 119, 208, 248, 284], "scipi": [8, 111, 228, 236], "scope": [28, 56, 57, 210, 218, 225, 240, 297, 300], "score": [25, 26, 53, 57, 63, 65, 101, 104, 107, 111, 218, 241, 242, 245, 284, 299, 310, 313], "script": [7, 24, 32, 33, 39, 67, 92, 115, 124, 125, 126, 144, 147, 254, 290, 298, 300, 318, 320, 321], "search": [63, 95, 104, 113, 127, 162, 184, 201, 202, 229, 230, 237, 238, 248, 249, 291], "sec": 112, "second": [81, 108, 111, 112, 155, 193, 225, 228, 236, 240, 261, 279, 298, 313], "secondari": [29, 107, 112], "section": [3, 7, 19, 53, 55, 57, 59, 84, 110, 217, 219, 225, 226, 228, 236, 239, 240, 254, 267, 271, 291, 293, 294, 295, 299, 317], "secur": [11, 63, 70, 90, 91, 92, 93, 111, 143, 153, 188], "security_scan": 111, "securityerror": 63, "securitymanag": 63, "see": [7, 69, 102, 110, 130, 145, 146, 199, 292, 307, 312, 314], "seed": [53, 68, 147, 167, 193, 250, 252], "seek": 279, "seem": 121, "select": [3, 17, 36, 53, 61, 79, 80, 82, 85, 120, 135, 154, 158, 162, 163, 166, 195, 197, 198, 200, 201, 202, 203, 229, 238, 265, 287, 290, 291, 303, 310, 313, 321], "select_smc_control": 36, "selector": [140, 141, 142, 143, 154, 315], "self": [17, 26, 49, 51, 53, 58, 61, 63, 72, 80, 99, 101, 104, 111, 112, 113, 116, 122, 168, 191, 194, 207, 215, 225, 240, 247, 248, 250, 251, 252, 255, 274, 278, 280, 297, 300], "semant": 102, "send": 111, "send_notif": 111, "senior": 11, "sensibl": 251, "sensit": [35, 53, 119, 120, 134, 135, 158, 201, 207, 225, 240, 251, 290, 309, 318, 320], "sensor": [68, 118, 177, 185, 197, 228, 236, 261, 306], "separ": [102, 108, 116], "septemb": 45, "sequenc": [45, 117, 155, 228, 236, 247, 261, 282, 321], "sequenti": 61, "seri": [127, 200, 205, 225, 240, 295, 310], "serial": [229, 238], "serv": 274, "server": [128, 177, 211], "servic": [31, 91], "session": [58, 112], "set": [3, 8, 72, 89, 90, 99, 104, 133, 140, 150, 185, 228, 229, 236, 238, 247, 249, 253, 265, 276, 282, 306], "set_titl": 53, "set_xlabel": 53, "set_xtick": 53, "set_xticklabel": 53, "set_ylabel": 53, "set_yscal": 53, "setdefault": [99, 108], "setpoint": 306, "settl": [3, 72, 99, 107, 149, 156, 158, 159, 165, 303, 313], "settling_analysi": 99, "settling_ok": 99, "settling_ratio": 99, "settling_tim": [63, 104, 278], "settling_time_comparison": 65, "settling_time_requir": 104, "setup": [74, 84, 92, 98, 104, 111, 112, 128, 153, 174, 177, 185, 230, 237, 252, 267, 313, 321], "setup_fail": 252, "setup_green_environ": 111, "setup_result": 252, "setupresult": 252, "sever": [63, 102, 108, 111, 230, 237, 247, 248, 252, 313], "sh": [254, 282, 283], "shannon": 290, "shape": [45, 101, 104, 112, 113, 203, 251, 252], "shapiro": 313, "share": [99, 229, 238], "sheet": [267, 298], "shell": [91, 298], "shi": [3, 123, 229, 238], "shinytext": 271, "short": [99, 210, 261], "shortcut": 145, "shortfal": 313, "should": [72, 99, 107, 108, 109, 111, 113, 130, 146, 194, 207, 253, 255], "should_termin": 113, "show": [3, 7, 65, 112, 147, 151, 228, 236, 313, 315], "shown": [7, 225, 240, 295], "shrink": 290, "shtessel": [3, 123], "shutdown": 113, "siam": 3, "sibl": 140, "side": [156, 228, 236, 250], "sigma": [78, 79, 80, 119, 228, 230, 236, 237, 251, 291], "sigma2": 251, "sigmoid": 102, "sign": [3, 79, 102, 107, 108, 112, 136, 191, 194, 206, 207, 228, 230, 236, 237, 278, 289], "signal": [53, 84, 156, 168, 191, 259, 261, 278, 317], "signatur": [51, 76, 105, 130, 203, 208, 251], "signific": [109, 147, 223, 235, 310, 313], "significantli": 313, "silent": [147, 252], "sim_start": 112, "sim_tim": 112, "simpl": [3, 36, 78, 104, 116, 171, 211, 228, 236, 253, 280], "simple_renam": 102, "simplifi": [3, 44, 45, 51, 61, 80, 99, 101, 104, 107, 112, 130, 134, 135, 161, 198, 202, 207, 219, 220, 230, 237, 275, 291], "simplified_dip": 278, "simplifieddipconfig": 220, "simplifieddipdynam": 220, "simul": [3, 7, 30, 35, 45, 49, 52, 57, 59, 61, 63, 64, 78, 84, 91, 104, 107, 112, 119, 120, 121, 124, 126, 128, 130, 132, 135, 146, 147, 150, 154, 158, 159, 164, 165, 167, 170, 171, 177, 185, 189, 191, 203, 210, 211, 216, 217, 220, 222, 225, 227, 228, 229, 230, 231, 233, 236, 237, 238, 240, 250, 252, 265, 278, 280, 290, 300, 303, 309, 310, 311, 320, 321], "simulate_pso_particle_trajectori": 291, "simulate_system": 191, "simulate_system_batch": 216, "simulation_compli": 252, "simulation_config": [104, 112], "simulation_execution_tim": 112, "simulation_failur": [104, 112], "simulation_ok": 252, "simulation_overshoot_limit": 252, "simulation_result": [63, 278], "simulation_result_valid": 309, "simulation_runn": [59, 61], "simulation_tim": 112, "simulationcach": 104, "simulationcontext": [135, 203, 216], "simulationresult": [63, 278], "simulationrunn": [57, 59, 61, 134, 135], "simultan": [61, 228, 236], "sinc": [229, 238], "singl": [3, 34, 58, 61, 107, 112, 123, 128, 132, 194, 202, 208, 210, 211, 225, 240, 243, 252, 255, 278, 290, 321], "singular": [35, 206, 226, 228, 236, 239, 251], "sinusoid": 259, "site": 95, "six": [228, 236], "size": [31, 53, 61, 65, 112, 119, 133, 141, 149, 158, 162, 178, 228, 236, 247, 252, 290, 297, 309, 310, 313, 318], "size_saved_mb": 111, "skill": 127, "skip": [45, 111, 252, 297], "sla": 111, "sla_met": 111, "sla_result": 111, "slack": 111, "sleep": 280, "slender": [228, 236], "slew": [84, 228, 236], "slice": 41, "slide": [2, 3, 8, 15, 17, 22, 36, 48, 50, 51, 53, 65, 67, 68, 69, 73, 76, 77, 78, 79, 80, 81, 85, 86, 93, 97, 99, 100, 103, 107, 112, 121, 123, 125, 156, 160, 163, 166, 168, 179, 182, 191, 193, 194, 196, 199, 204, 205, 206, 207, 209, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 243, 245, 249, 250, 251, 255, 256, 258, 261, 273, 274, 275, 278, 279, 283, 287, 288, 289, 290, 291, 293, 294, 297, 301, 313, 318, 321], "slider": 154, "sliding_energi": 251, "slidingsurfac": 194, "slightli": 248, "slope": [79, 194], "slotin": [3, 123, 297], "slow": [77, 84, 85, 91, 99, 111, 112, 113, 117, 133, 135, 151, 171, 183, 215, 228, 229, 236, 238, 252], "slower": [11, 104], "sluggish": 194, "sm": 111, "sma": [228, 236], "small": [99, 109, 112, 161, 194, 198, 207, 225, 228, 229, 236, 238, 240, 278, 313], "small_disturb": 101, "small_gain": 194, "small_stat": 207, "smaller": [229, 238, 310], "smart": 145, "smc": [0, 3, 7, 11, 20, 30, 35, 36, 39, 40, 50, 51, 53, 55, 56, 57, 58, 59, 61, 63, 65, 67, 71, 72, 73, 76, 78, 80, 81, 82, 84, 86, 87, 88, 92, 93, 97, 99, 100, 101, 102, 104, 107, 108, 109, 112, 113, 114, 116, 117, 123, 124, 125, 128, 129, 130, 132, 146, 148, 150, 151, 156, 158, 163, 165, 166, 167, 168, 169, 170, 179, 181, 182, 183, 189, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 205, 206, 207, 208, 209, 210, 215, 218, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 242, 245, 246, 247, 248, 249, 251, 252, 253, 255, 261, 266, 273, 274, 275, 278, 279, 280, 282, 283, 284, 287, 290, 291, 297, 300, 301, 303, 313, 318, 321], "smc_classic": [80, 274], "smc_control": [228, 236], "smc_factori": 50, "smc_gain_spec": [80, 113], "smc_theory_complet": 3, "smc_type": [49, 80, 107, 116], "smc_v1": [80, 274], "smcconfig": 107, "smcfactori": 107, "smcgainvalid": 208, "smcprotocol": [80, 107, 112], "smctype": [49, 51, 53, 58, 80, 104, 107, 111, 112, 113, 116, 132, 248, 278], "smoke": [93, 111, 124, 141, 142], "smoke_test_green": 111, "smooth": [3, 36, 99, 102, 143, 228, 230, 236, 237], "smooth_switch": 108, "smoother": [85, 228, 236], "snippet": [14, 121], "so": [225, 228, 229, 236, 238, 240], "social": [53, 162, 167, 193, 215, 228, 229, 236, 238, 248, 293, 313], "social_weight": 215, "softwar": [2, 8, 17, 69, 222, 233, 256], "sol": [228, 236], "solid": [56, 274], "solut": [3, 24, 25, 33, 53, 84, 115, 120, 141, 143, 144, 150, 163, 228, 229, 236, 238, 269, 290, 310, 323], "solv": [3, 84, 222, 229, 233, 238], "solve_ivp": [228, 236], "solver": [84, 228, 230, 236, 237], "some": [107, 112, 121, 122, 145, 146], "soon": [307, 312, 314], "sophist": [71, 72, 81, 283, 321], "sort": [111, 280], "sound": [99, 119, 209, 279], "sourc": [7, 8, 17, 49, 57, 58, 69, 72, 84, 109, 121, 123, 125, 142, 187, 197, 247, 290, 297, 298, 309, 310], "source_vers": 247, "space": [3, 25, 28, 134, 140, 145, 156, 157, 179, 181, 193, 198, 201, 225, 228, 229, 236, 238, 240, 249, 288, 289, 291, 295, 299], "span": 11, "spawn": [228, 236], "spec": 80, "special": [50, 55, 80, 113, 116, 252, 284, 289], "specialist": [71, 243], "specif": [12, 17, 20, 27, 28, 30, 37, 49, 51, 53, 57, 63, 76, 80, 85, 92, 98, 99, 102, 104, 107, 109, 110, 111, 112, 113, 116, 119, 124, 166, 168, 177, 180, 190, 196, 197, 201, 211, 229, 238, 247, 249, 250, 251, 252, 274, 275, 278, 281, 290, 291, 321, 323], "specifi": [17, 61, 208, 228, 229, 230, 236, 237, 238, 251, 310], "spectral": 85, "spectroscopi": [228, 236], "speed": [41, 63, 67, 84, 104, 158, 219, 228, 229, 236, 238, 247, 252, 291, 318], "speedup": [53, 171], "sphinx": [8, 11, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 89, 97, 141, 188, 315], "sphinxcontrib": 8, "split": [58, 102, 108, 247, 313], "sponsorship": 270, "spot": 126, "spreadsheet": 61, "spring": 271, "springer": [3, 81], "spurgeon": [3, 123, 297], "sqrt": [3, 104, 194, 207, 251, 252, 291], "squar": [3, 149, 228, 236, 259], "src": [3, 7, 17, 38, 44, 45, 50, 51, 55, 59, 61, 79, 111, 146, 208, 213, 215, 224, 225, 230, 234, 237, 240, 250, 275, 280, 291, 298, 300, 310], "ssl": 92, "st": 194, "st_mode": 63, "sta": [3, 53, 65, 67, 80, 85, 102, 104, 107, 108, 109, 112, 123, 124, 132, 163, 166, 169, 181, 183, 197, 201, 224, 226, 227, 231, 234, 239, 247, 249, 251, 252, 274, 280, 300, 301, 303, 318, 321], "sta_bound": 247, "sta_param": 101, "sta_smc": [3, 17, 36, 43, 49, 55, 68, 80, 99, 104, 109, 112, 247, 251, 252, 274, 275, 280], "sta_smc_deprec": 102, "sta_stability_viol": 252, "sta_stabl": 247, "stab": [228, 236], "stabil": [3, 5, 11, 35, 37, 53, 63, 65, 69, 72, 73, 77, 79, 80, 86, 98, 99, 104, 106, 107, 108, 109, 111, 112, 119, 123, 125, 156, 160, 163, 183, 191, 193, 194, 195, 200, 201, 202, 204, 206, 207, 208, 212, 213, 220, 226, 228, 229, 236, 238, 239, 242, 245, 246, 249, 250, 251, 258, 261, 279, 280, 283, 284, 287, 288, 290, 291, 294, 310, 313], "stabilis": [225, 229, 238, 240], "stability_analysi": [101, 112], "stability_margin": [99, 107], "stability_penalti": 251, "stability_result": 107, "stabilityresult": 107, "stabilityvalid": 99, "stabl": [3, 104, 107, 112, 113, 147, 191, 207, 228, 236, 274], "stable_empir": 291, "stable_gain": 207, "stable_theoret": 291, "stage": [91, 93], "stagnat": [53, 113, 162, 229, 238, 248, 251], "stagnation_count": [113, 248, 251], "stagnation_period": 113, "stagnation_threshold": 113, "stai": [228, 236], "stale": 154, "standalon": 318, "standard": [0, 3, 25, 26, 39, 49, 57, 58, 59, 65, 68, 71, 75, 94, 95, 97, 102, 108, 112, 116, 137, 138, 194, 227, 228, 229, 231, 236, 238, 243, 245, 251, 259, 261, 266, 274, 278, 283, 284, 290, 291, 310, 313], "standardresultcontain": 61, "staoutput": 79, "start": [12, 20, 21, 49, 77, 85, 90, 91, 95, 98, 111, 112, 121, 126, 127, 128, 129, 130, 141, 146, 147, 148, 152, 153, 154, 155, 157, 165, 169, 170, 177, 178, 182, 189, 193, 225, 229, 238, 240, 253, 254, 265, 266, 271, 274, 280, 281, 282, 298, 306, 321, 323], "start_monitor": [112, 280], "start_tim": [104, 111, 112, 113], "startup": 306, "stasmc": 211, "stasmcconfig": 274, "stat": [63, 112, 270], "state": [3, 10, 24, 35, 39, 44, 45, 49, 51, 61, 63, 71, 72, 77, 78, 79, 80, 101, 104, 112, 113, 116, 119, 120, 134, 135, 136, 141, 145, 147, 149, 150, 157, 161, 168, 191, 194, 195, 197, 199, 205, 207, 219, 220, 225, 228, 229, 230, 236, 237, 238, 240, 251, 258, 278, 279, 280, 288, 289, 291, 295, 297, 300], "state1": [194, 207], "state2": [194, 207], "state_deriv": 45, "state_dot": 194, "state_error": [251, 280], "state_error_sq": 251, "state_nam": 101, "state_var": [80, 112, 168, 300], "stateless": [79, 112], "statement": [0, 40, 81, 120, 122, 125, 205, 223, 229, 235, 238, 246, 297, 300], "statevector": [49, 101], "static": [40, 41, 141, 300], "staticmethod": [63, 99, 101, 107, 109], "station": 64, "stationar": 309, "statist": [3, 7, 17, 24, 25, 29, 55, 57, 65, 67, 68, 97, 104, 112, 113, 119, 120, 136, 138, 149, 155, 171, 178, 193, 215, 256, 267, 269, 284, 309, 310, 312, 313, 318, 320], "statistical_test": 309, "statisticaltestsuit": 309, "statu": [0, 4, 7, 11, 14, 24, 25, 26, 28, 31, 40, 46, 48, 53, 54, 55, 56, 57, 59, 60, 63, 64, 67, 70, 71, 87, 93, 94, 107, 113, 115, 119, 147, 153, 165, 172, 173, 174, 175, 176, 179, 180, 181, 184, 191, 195, 218, 242, 243, 245, 247, 252, 254, 255, 284, 298, 304, 310, 313], "std": [194, 207, 251, 274, 313], "std_cost": 251, "std_dev": [194, 207], "steadi": [72, 195, 197, 205], "steady_state_error": 278, "steep": [11, 228, 236], "step": [3, 14, 21, 25, 26, 27, 28, 29, 31, 51, 56, 57, 58, 61, 63, 67, 89, 92, 108, 112, 119, 121, 122, 124, 125, 130, 131, 132, 133, 134, 135, 136, 138, 141, 146, 147, 148, 149, 150, 152, 154, 156, 157, 158, 160, 163, 167, 168, 169, 170, 171, 177, 178, 182, 183, 198, 200, 201, 203, 228, 229, 230, 236, 237, 238, 253, 259, 269, 271, 275, 278, 280, 290, 298, 303, 318], "step_warn": 247, "stiff": [3, 228, 230, 236, 237], "stiffen": [228, 236], "still": [144, 213, 228, 236, 315], "stochast": 3, "stop": [53, 112, 203, 216, 261, 278, 280], "stop_monitor": [112, 280], "storag": [64, 104, 145, 250], "storagekei": 140, "store": [104, 111], "str": [17, 49, 51, 63, 72, 79, 99, 101, 104, 108, 109, 111, 112, 113, 116, 119, 228, 236, 247, 248, 250, 251, 252, 255, 274, 278, 280, 297], "straightforward": 78, "strateg": [7, 31, 57, 71, 190, 218, 284], "strategi": [3, 10, 11, 31, 37, 45, 57, 58, 61, 63, 84, 88, 111, 114, 155, 158, 162, 182, 187, 190, 201, 202, 225, 227, 228, 231, 236, 240, 247, 250, 252, 253, 279, 284, 290, 293, 294, 298, 299, 309, 310, 315], "strategy_func": 252, "strategy_nam": 252, "strategy_result": 252, "stream": 190, "streamlin": 248, "streamlit": [8, 15, 90, 128, 170, 230, 237, 265], "strength": [11, 38, 76, 166, 320], "stress": 111, "strict": [72, 123, 274], "strict_valid": 112, "strictli": 207, "string": [80, 112, 274], "strip": 108, "strong": [7, 11, 57, 71, 207, 225, 229, 238, 240, 278], "strongli": 205, "structlog": 111, "structur": [3, 19, 46, 51, 57, 71, 72, 73, 77, 79, 84, 85, 95, 98, 107, 109, 111, 122, 129, 131, 135, 138, 143, 165, 170, 171, 220, 226, 232, 239, 247, 251, 261, 264, 266, 268, 271, 273, 274, 278, 298, 299, 300, 317], "struggl": [162, 205], "stub": [7, 11], "studi": [3, 61, 169, 178, 193, 223, 228, 235, 236, 259, 269, 318], "study_timeout": [247, 251], "style": [12, 17, 27, 28, 29, 30, 31, 121, 140, 141, 142, 159, 256, 266, 268, 269, 271, 299], "sub": [58, 63, 80, 99, 102, 108, 111], "sub_controller_gain": [99, 102, 108], "sub_gain": [99, 108], "submiss": [11, 320], "submit": [11, 113], "suboptim": 247, "suboptimal_swarm_s": 247, "subplot": 53, "subprocess": 63, "subscrib": 278, "subscript": 97, "subsystem": [194, 207, 224, 234], "success": [5, 11, 12, 14, 21, 24, 25, 26, 27, 28, 36, 40, 44, 56, 57, 58, 63, 67, 88, 92, 98, 101, 106, 107, 108, 111, 112, 138, 147, 169, 190, 218, 228, 236, 242, 252, 275, 280, 321, 323], "success_count": 113, "success_r": [101, 111, 112, 113], "successful_control": 101, "successful_evalu": [104, 112, 113], "successful_integr": 101, "successfulli": [56, 57, 59, 65, 67, 89, 108, 111, 120, 147, 188, 243, 280, 309, 318], "suffer": [228, 236], "suffici": 3, "suggest": [228, 236, 247, 252], "suggested_valu": 252, "suggested_w": 252, "suit": [7, 14, 34, 41, 45, 73, 98, 99, 101, 108, 117, 121, 124, 126, 147, 189, 207, 228, 236, 243, 246, 283, 284], "suitabl": [225, 229, 238, 240], "suite_result": 101, "sum": [63, 101, 108, 111, 113, 201, 207, 225, 240, 251, 252, 278], "sum_": [88, 228, 236], "summar": [229, 238], "summari": [7, 8, 9, 10, 11, 14, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 40, 41, 43, 44, 55, 56, 57, 58, 59, 63, 65, 67, 71, 72, 73, 75, 77, 78, 81, 82, 84, 85, 86, 92, 93, 101, 107, 111, 112, 123, 125, 126, 138, 147, 156, 161, 162, 163, 165, 169, 171, 177, 182, 188, 191, 194, 197, 198, 200, 201, 205, 209, 210, 215, 218, 226, 239, 242, 243, 245, 247, 249, 252, 255, 261, 275, 284, 287, 290, 291, 299, 300, 309, 313, 318, 321], "sun": 3, "super": [3, 65, 80, 81, 85, 97, 99, 104, 107, 108, 112, 125, 132, 156, 163, 166, 181, 183, 191, 193, 201, 204, 206, 224, 226, 227, 231, 234, 239, 245, 249, 251, 258, 273, 279, 287, 301, 313], "super_twist": [80, 107, 112, 274], "superscript": 97, "supertwist": [80, 112], "supertwistingsmc": [55, 79, 107], "supplementari": 320, "suppli": [230, 237], "support": [11, 17, 20, 27, 30, 45, 50, 51, 72, 76, 91, 101, 102, 103, 105, 107, 112, 113, 114, 116, 121, 137, 139, 140, 141, 142, 143, 145, 153, 156, 157, 159, 243, 265, 269, 279, 315], "supports_dynam": [51, 103], "suppress": 111, "suppressed_alert": 111, "suppression_rul": 111, "sure": 3, "surfac": [3, 72, 77, 78, 79, 80, 81, 85, 99, 104, 107, 108, 109, 112, 125, 156, 163, 168, 191, 194, 204, 205, 206, 207, 226, 228, 229, 230, 236, 237, 238, 239, 249, 251, 252, 258, 261, 287, 288, 290, 297, 301], "surface1": 207, "surface2": 207, "surface_consistency_check": 99, "surface_coupl": 99, "surface_deriv": 194, "surface_dist": 78, "surface_eig": 99, "surface_eigenvalu": 99, "surface_gain": [99, 107, 108], "surface_valu": 194, "survei": 3, "suspici": 63, "suspicious_pattern": 63, "sustain": 138, "svd": 290, "sw": [31, 107], "swarm": [3, 51, 53, 57, 63, 104, 112, 113, 133, 148, 162, 167, 179, 181, 182, 184, 193, 202, 215, 222, 228, 229, 230, 233, 236, 237, 238, 247, 248, 251, 256, 258, 280, 291, 293, 318], "swarm_cost": 251, "swarm_divers": 252, "swarm_posit": [53, 63, 113, 251], "swarm_siz": 113, "swarm_stat": 252, "sweep": [156, 171], "swing": 86, "swing_up_smc": 55, "swingupsmc": 55, "switch": [3, 72, 77, 78, 99, 102, 104, 107, 108, 109, 111, 112, 134, 194, 205, 207, 226, 228, 229, 230, 236, 237, 238, 239, 249, 251, 258, 279, 290, 315], "switch_cent": 207, "switch_funct": [102, 108], "switch_left": 207, "switch_method": [102, 108, 109, 194, 207], "switch_neg": 207, "switch_po": 207, "switch_right": 207, "switch_threshold": [99, 102, 108], "switch_traffic_to_blu": 111, "switch_traffic_to_green": 111, "switch_valu": [194, 207], "switching_criteria": [99, 102, 108], "switching_function_typ": [102, 108], "switching_magnitud": 99, "sy": 68, "symbol": [81, 97, 121, 272, 299], "sympi": 8, "symptom": [35, 115, 116, 117, 144, 150, 253, 254, 282, 283, 298, 300], "synerg": [222, 233], "syntax": [14, 57, 147, 247, 297, 299], "syntaxerror": 297, "synthesi": [3, 224, 227, 231, 234], "system": [0, 1, 3, 4, 6, 13, 23, 35, 36, 42, 47, 49, 50, 51, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 68, 70, 72, 73, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 130, 132, 134, 143, 146, 153, 154, 155, 161, 163, 164, 173, 175, 187, 188, 191, 193, 194, 197, 199, 200, 203, 205, 207, 208, 209, 213, 218, 220, 222, 223, 225, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 240, 242, 243, 245, 247, 248, 250, 252, 254, 255, 256, 258, 259, 261, 266, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 290, 291, 293, 294, 295, 297, 309, 310, 317, 318, 321], "system_bandwidth": 104, "system_nam": 72, "system_st": [63, 278], "systemat": [39, 93, 98, 102, 115, 117, 121, 198, 228, 236, 284], "systemst": 278, "s\u00b2": [107, 207], "s\u1e61": 207, "t": [3, 27, 32, 45, 70, 77, 88, 111, 112, 119, 145, 147, 149, 155, 191, 219, 225, 228, 229, 230, 236, 237, 238, 240, 251, 255, 291, 310, 313, 318], "t_": [3, 228, 236, 291, 297], "t_final": [191, 278], "t_n": 61, "t_r": 3, "t_span": [228, 236], "tabl": [3, 8, 15, 17, 24, 35, 43, 49, 53, 61, 65, 72, 73, 77, 78, 79, 80, 81, 84, 85, 86, 91, 93, 107, 112, 116, 117, 119, 120, 131, 132, 133, 134, 135, 136, 148, 149, 150, 151, 161, 162, 163, 166, 170, 191, 193, 197, 198, 200, 201, 202, 203, 205, 208, 215, 216, 220, 245, 248, 258, 261, 273, 274, 275, 276, 278, 279, 280, 283, 290, 291, 297, 298, 299, 300, 310, 312, 313, 320, 321], "tac": 11, "tag": 315, "take": [113, 153, 155, 253, 313], "takeawai": [79, 80, 200, 215], "tangent": [195, 228, 236], "tanh": [3, 79, 102, 108, 109, 112, 194, 207, 228, 236], "target": [7, 9, 10, 11, 14, 37, 56, 57, 58, 59, 67, 71, 87, 92, 98, 111, 120, 182, 190, 191, 218, 245, 251, 274, 280, 284, 296, 298, 313], "target_zeta_rang": 247, "task": [10, 70, 111, 113, 127, 130, 148, 150, 151], "task_func": 111, "task_nam": 111, "tau": 3, "taylor": [3, 200], "teach": 265, "team": 111, "technic": [12, 13, 20, 24, 26, 27, 28, 30, 31, 32, 37, 40, 42, 77, 78, 81, 82, 84, 85, 86, 95, 107, 119, 121, 130, 137, 139, 143, 152, 153, 154, 155, 156, 188, 193, 217, 219, 225, 240, 243, 251, 274, 277, 300, 301, 309], "techniqu": [3, 117, 143, 148, 203, 229, 238, 253, 290], "technologi": 3, "templat": [7, 70, 151, 158, 261, 266, 270], "term": [12, 77, 85, 156, 168, 198, 228, 229, 230, 236, 237, 238, 261, 284, 301], "termin": [113, 146, 147, 151, 168, 224, 228, 234, 236, 251, 252], "termination_reason": 113, "test": [7, 8, 14, 20, 26, 27, 28, 29, 30, 31, 34, 37, 41, 44, 45, 56, 57, 61, 64, 65, 68, 70, 73, 75, 76, 88, 92, 93, 95, 97, 98, 99, 101, 107, 108, 111, 114, 119, 121, 124, 125, 126, 128, 133, 137, 138, 141, 142, 143, 146, 147, 149, 151, 153, 165, 166, 168, 169, 182, 186, 189, 190, 191, 193, 194, 199, 204, 206, 207, 208, 209, 222, 223, 224, 233, 234, 235, 245, 246, 252, 259, 261, 275, 278, 280, 281, 282, 283, 284, 285, 299, 300, 309, 310, 312, 313, 315, 318, 321, 322, 323], "test_artifact": 7, "test_benchmark": [44, 151], "test_boundary_lay": 207, "test_boundary_layer_asymptotic_behavior": 207, "test_boundary_layer_continu": 207, "test_boundary_layer_monoton": 207, "test_boundary_layer_monotonicity_all_method": 194, "test_boundary_layer_valid": 207, "test_cas": 107, "test_computation_precision_consist": 194, "test_config_valid": 207, "test_control": [151, 207, 252], "test_control_law_decomposit": 207, "test_controller_perform": 151, "test_cross_refer": 7, "test_document": 7, "test_end_to_end": 151, "test_end_to_end_mathematical_properti": 191, "test_end_to_end_valid": 208, "test_example_syntax_valid": 14, "test_factory_exampl": 56, "test_floating_point_consist": 207, "test_gain": [111, 252], "test_hurwitz_stability_check": 207, "test_integr": [151, 208], "test_lyapunov_function_properti": [191, 207], "test_memory_regress": 44, "test_my_control": 151, "test_negative_surface_gains_reject": 194, "test_new_control": 51, "test_numerical_st": 99, "test_numerical_stability_extreme_valu": 194, "test_numerical_stability_large_valu": 207, "test_numerical_stability_small_valu": 207, "test_parameter_count": 99, "test_performance_preserv": 99, "test_physical_realiz": 99, "test_positive_gain_requir": 207, "test_reaching_law_satisfact": 207, "test_result": 99, "test_scenario": [107, 280], "test_sliding_surface_gain_sensit": 207, "test_sliding_surface_homogen": 207, "test_sliding_surface_linear": 207, "test_sliding_surface_linearity_properti": 194, "test_sliding_surface_st": 191, "test_stability_preserv": 99, "test_stat": [101, 111, 112, 280], "test_switching_gain_valid": 207, "test_timestamp": 101, "test_util": 208, "test_validation_framework": 208, "test_zero_surface_gains_reject": 194, "testclassicalsmcconfigvalid": 207, "testconfigurationvalidationcoverag": 194, "testmathematicalcorrect": 191, "testnumericalaccuraci": 207, "testsystemlevelmathemat": 207, "teukolski": 3, "text": [3, 7, 11, 86, 199, 228, 229, 236, 238, 256, 267, 268, 271, 291, 297, 299], "textbook": 17, "tfrac": [228, 236], "than": [14, 57, 99, 104, 111, 116, 120, 168, 205, 223, 228, 235, 236, 313], "thank": 121, "thei": [223, 235], "them": [45, 108, 229, 230, 237, 238], "theme": [8, 90, 141, 269, 315], "theorem": [3, 53, 121, 122, 123, 125, 126, 246, 288, 290, 291, 298, 299], "theorem_verification_guid": 121, "theoret": [0, 11, 57, 99, 107, 191, 195, 199, 202, 208, 209, 222, 225, 230, 233, 237, 240, 245, 246, 249, 252, 274, 278, 279, 286, 291, 297], "theori": [2, 3, 7, 11, 12, 30, 48, 53, 55, 57, 69, 73, 77, 81, 82, 84, 85, 86, 88, 97, 98, 99, 104, 107, 119, 121, 123, 127, 153, 156, 160, 162, 163, 164, 165, 192, 193, 194, 195, 197, 199, 200, 202, 205, 206, 209, 226, 228, 236, 239, 245, 249, 256, 273, 279, 283, 289, 290, 292, 293, 294, 296, 301, 309], "therebi": [228, 236], "therefor": [228, 229, 230, 236, 237, 238], "thesadeq": 39, "thesi": [8, 15], "theta": [3, 219, 228, 230, 236, 237, 291], "theta1": [191, 194, 228, 236, 278], "theta1_dot": [191, 194], "theta2": [191, 194, 228, 236, 278], "theta2_dot": [191, 194], "theta_": [225, 228, 230, 236, 237, 240], "theta_1": 219, "theta_2": 219, "thi": [0, 1, 2, 3, 4, 6, 7, 8, 13, 15, 16, 17, 23, 36, 39, 46, 48, 49, 50, 54, 56, 57, 59, 60, 63, 68, 72, 73, 87, 92, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 121, 122, 129, 141, 144, 145, 147, 148, 150, 151, 161, 166, 168, 169, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 191, 192, 193, 194, 196, 205, 207, 209, 210, 213, 217, 219, 222, 225, 228, 229, 230, 233, 236, 237, 238, 240, 243, 248, 251, 254, 255, 266, 274, 276, 278, 279, 280, 291, 293, 294, 295, 297, 304, 309, 313, 317, 321], "thick": [3, 194, 207], "third": [228, 236], "those": [225, 240], "thread": [17, 49, 50, 51, 61, 65, 80, 98, 100, 101, 103, 104, 105, 107, 111, 112, 113, 116, 117, 243, 280, 284], "thread_pool": 113, "thread_safeti": 111, "threadpoolexecutor": 113, "three": [2, 156, 223, 225, 235, 240, 261, 271, 298], "threshold": [3, 25, 39, 79, 93, 99, 101, 108, 111, 112, 119, 120, 194, 245, 261, 313], "threshold_high": 215, "threshold_low": 215, "through": [11, 63, 98, 107, 116, 120, 182, 199, 205, 207, 209, 247, 274, 279, 291, 310], "throughout": [3, 17, 252], "throughput": [61, 230, 237, 250, 298], "thumb": 99, "tier": [11, 261], "tight": 104, "tight_layout": 53, "tighten": [228, 236], "tighter": 3, "tikhonov": 290, "time": [3, 11, 17, 30, 31, 36, 37, 39, 53, 57, 61, 62, 65, 72, 73, 84, 85, 86, 91, 99, 101, 102, 104, 107, 111, 112, 113, 116, 118, 119, 120, 125, 141, 147, 149, 153, 156, 158, 159, 163, 165, 168, 177, 191, 194, 195, 196, 197, 204, 205, 206, 207, 208, 213, 215, 228, 229, 230, 236, 237, 238, 245, 246, 249, 251, 252, 253, 261, 273, 274, 279, 280, 284, 287, 288, 290, 291, 297, 298, 299, 303, 310, 313, 321], "time_thresh": 99, "time_threshold": [99, 102, 108], "timelin": [10, 94, 124, 190], "timeout": [51, 80, 111, 113, 117, 153, 154, 155, 280], "timeout_second": 113, "timeouterror": 111, "timestamp": [68, 111], "timestep": [107, 119, 135, 170, 197, 200, 274], "tini": [228, 236], "tip": [20, 34, 77, 133, 135, 145, 154, 215, 253, 267, 269, 271], "titl": [169, 299], "tl": 92, "to_controller_param": 107, "toctre": [217, 257, 259, 286, 316], "togeth": [7, 222, 233], "togglebutton": 141, "token": [57, 58, 70], "toler": [3, 88, 99, 104, 112, 190, 228, 236, 247, 251], "tolist": [112, 252, 278], "too": [99, 109, 119, 120, 133, 135, 191, 194, 228, 236], "took": [228, 236], "tool": [3, 8, 55, 69, 77, 84, 85, 98, 108, 117, 136, 265, 280, 298], "toolchain": [222, 233], "top": [7, 9, 11, 121, 123, 229, 238, 247, 267, 298, 313], "topic": [122, 123, 183, 212, 214, 278, 292, 304], "topologi": 62, "torqu": [228, 236], "total": [7, 11, 19, 25, 57, 58, 59, 86, 112, 123, 138, 198, 207, 213, 215, 300, 309, 318], "total_control": 207, "total_controllers_test": 101, "total_cost": [251, 278, 280], "total_error": 112, "total_error_count": 112, "total_ev": 112, "total_evalu": [104, 112, 113], "total_evaluation_tim": 113, "total_iter": 113, "total_optimization_tim": [112, 113], "total_particl": 252, "total_request": 104, "total_scor": 101, "total_test": 111, "total_tim": [112, 252], "total_warn": 108, "total_weight": 280, "touch": 10, "toward": [207, 228, 229, 236, 238], "tqdm": 169, "track": [3, 61, 84, 104, 112, 113, 142, 195, 197, 204, 205, 215, 225, 229, 238, 240, 253, 259, 267, 295, 318], "tracking_error": 78, "trade": [158, 163, 197, 291], "tradit": 184, "traffic": 111, "trail": 252, "train": [310, 313], "trajectori": [3, 84, 99, 149, 157, 191, 225, 228, 229, 236, 238, 240, 318], "transact": [3, 269], "transfer": [30, 31], "transform": [99, 225, 240], "transit": [12, 24, 25, 33, 99, 108], "transition_smooth": 99, "translat": [3, 225, 229, 238, 240], "travers": 297, "treat": [225, 240], "treatis": 3, "treatment": 3, "tree": [36, 57, 61, 197, 200, 297], "trelea": 3, "trend": [113, 224, 234, 252, 256, 284], "trial": [53, 135, 178, 310, 313], "triangul": 310, "trick": 145, "trigger": [93, 120], "trilogi": 309, "triplet": 53, "trivial": [229, 238], "troubleshoot": [11, 34, 70, 77, 84, 85, 90, 91, 94, 98, 115, 116, 117, 124, 131, 132, 133, 134, 135, 141, 144, 147, 150, 151, 153, 154, 155, 158, 159, 170, 171, 177, 183, 185, 213, 253, 254, 265, 282, 283, 284, 290, 298, 302, 315, 321, 323], "true": [53, 63, 72, 80, 99, 101, 102, 103, 104, 111, 112, 113, 143, 151, 194, 247, 251, 252, 273, 275, 278, 280, 291], "truncat": 200, "trust": [228, 236], "try": [63, 72, 101, 104, 108, 111, 112, 113, 116, 247, 248, 252, 255, 274, 275, 278, 280, 297], "tsmc": 168, "tunabl": 81, "tune": [3, 35, 51, 53, 57, 63, 77, 78, 80, 84, 85, 92, 104, 112, 113, 133, 148, 166, 167, 183, 184, 195, 201, 215, 217, 224, 226, 228, 229, 230, 234, 236, 237, 238, 239, 265, 291, 293, 304, 310, 313, 318], "tuner": [53, 76, 193, 250, 252], "tuner_fail": 252, "tuner_result": 252, "tupl": [61, 79, 81, 101, 104, 107, 108, 109, 112, 113, 116, 119, 247, 248, 251, 278, 300], "tutori": [7, 11, 12, 14, 17, 27, 57, 95, 127, 129, 130, 153, 154, 164, 165, 166, 167, 168, 169, 178, 193, 303, 304, 305], "twist": [3, 65, 80, 81, 85, 97, 99, 104, 107, 108, 112, 125, 132, 156, 163, 166, 181, 183, 191, 193, 201, 204, 206, 224, 226, 227, 231, 234, 239, 245, 249, 251, 258, 273, 279, 287, 301, 313], "two": [86, 102, 132, 149, 163, 205, 223, 225, 228, 229, 230, 235, 236, 237, 238, 240, 295, 298], "type": [9, 10, 17, 20, 40, 49, 50, 51, 53, 55, 61, 63, 65, 72, 73, 76, 79, 80, 83, 94, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 116, 130, 132, 134, 148, 150, 151, 157, 158, 159, 178, 194, 196, 197, 203, 205, 208, 219, 220, 247, 249, 252, 258, 273, 274, 278, 280, 299, 300, 318], "typeerror": [101, 109, 111, 112, 274], "typic": [86, 102, 109, 112, 116, 170, 198, 229, 238, 288], "typographi": 267, "t\u2080": 310, "t\u2081": 310, "t\u2082": 310, "u": [3, 79, 80, 101, 104, 107, 111, 112, 119, 191, 207, 228, 229, 236, 238, 248, 251, 278, 280, 291, 313], "u1": 191, "u2": 251, "u_": [3, 107, 228, 229, 236, 238], "u_adapt": 112, "u_c": 85, "u_d": 207, "u_deriv": 207, "u_eq": [78, 85, 112, 191, 207, 228, 236], "u_equival": [191, 207], "u_int": 79, "u_int_new": 300, "u_int_prev": 112, "u_limit": 278, "u_max": 191, "u_n": 61, "u_robust": 78, "u_saf": 278, "u_sat": [104, 300], "u_satur": 207, "u_sta": 112, "u_sw": [112, 191, 207], "u_switch": [191, 207], "u_unsatur": 207, "uc": 306, "ui": [15, 29, 267], "ultim": [3, 190, 218, 243], "unbalanc": 99, "unbound": [3, 77, 150], "uncertain": [228, 236, 251], "uncertainti": [3, 68, 104, 124, 166, 193, 205, 228, 229, 236, 238, 250, 251, 259, 279, 280, 290, 310, 313, 321], "uncertainty_bound": [104, 107], "uncertainty_config": 251, "unchang": 275, "uncit": 121, "under": [3, 46, 48, 54, 60, 119, 120, 137, 139, 166, 172, 173, 174, 175, 176, 179, 180, 181, 184, 223, 228, 230, 235, 236, 237, 251, 310, 313], "underactu": [163, 205, 225, 229, 238, 240], "underdamp": 252, "underfit": 313, "underflow": 290, "underli": [104, 112], "underpin": 279, "understand": [11, 35, 121, 126, 149, 167, 177], "understood": 78, "undocu": [9, 10], "unequ": [149, 313], "unexpect": [14, 111, 118, 297], "unhealthi": 111, "unicod": 97, "unicodedecodeerror": 297, "unif": 108, "unifi": [50, 51, 63, 72, 80, 81, 99, 100, 106, 107, 112, 205, 226, 239, 279, 287], "uniform": [3, 191, 194, 228, 236, 291], "uniformli": [229, 238], "unimod": [3, 125], "uninterrupt": 58, "union": [17, 49, 72, 79, 80, 109, 116], "unit": [20, 56, 119, 151, 207, 225, 240, 261, 272, 282, 283], "univers": [3, 51, 63, 122, 228, 236, 279], "unknown": [111, 116, 131, 197, 247, 252, 274, 278, 280, 297], "unless": [225, 240], "unlik": 297, "unmatch": 3, "unmodel": [205, 229, 238], "unnecessari": [12, 44], "unnumb": 299, "unpack": 41, "unrealist": 99, "unrecogn": 108, "unregist": 70, "unreleas": 139, "unsaf": 63, "unstabl": [99, 223, 225, 228, 229, 235, 236, 238, 240], "unsuccess": [228, 236], "unsupport": 247, "until": [228, 236], "untyp": 72, "unus": 53, "unweight": [228, 236], "up": [10, 70, 86, 108, 113, 168, 210], "updat": [3, 7, 28, 29, 30, 45, 53, 63, 77, 79, 104, 108, 109, 111, 112, 113, 122, 123, 138, 142, 147, 159, 167, 168, 191, 213, 215, 228, 229, 236, 238, 247, 249, 251, 256, 266, 280, 291], "update_adaptive_paramet": 215, "update_particl": 191, "update_progress": [113, 280], "update_swarm_velocities_and_posit": 63, "update_traffic_split": 111, "updated_swarm": 63, "upgrad": 142, "upon": [2, 17], "upper": [3, 63, 104, 111, 112, 116, 120, 223, 229, 235, 238, 248, 275], "upper_bound": [80, 107], "upright": [228, 229, 236, 238, 290], "upward": [225, 240], "url": [70, 121, 122, 123, 315], "us": [3, 8, 15, 17, 23, 30, 31, 36, 41, 45, 49, 51, 57, 67, 72, 79, 80, 84, 86, 89, 91, 99, 102, 103, 104, 107, 108, 111, 112, 113, 116, 117, 118, 121, 122, 123, 128, 130, 132, 133, 140, 141, 145, 148, 154, 168, 178, 179, 180, 181, 183, 193, 197, 202, 203, 210, 213, 217, 219, 225, 228, 229, 230, 236, 237, 238, 240, 247, 248, 251, 253, 263, 265, 267, 268, 269, 271, 274, 276, 279, 291, 297, 299, 306, 310, 313, 321, 323], "usabl": [106, 275], "usag": [5, 17, 30, 49, 51, 69, 70, 76, 77, 78, 82, 84, 85, 98, 101, 102, 108, 111, 112, 116, 130, 131, 135, 147, 150, 156, 159, 199, 203, 210, 213, 219, 220, 252, 268, 276, 290, 321], "use_robust_evalu": 280, "user": [7, 11, 25, 26, 27, 28, 57, 63, 95, 98, 106, 108, 127, 129, 130, 138, 145, 147, 170, 171, 177, 182, 228, 236, 253, 264, 265, 298, 315, 321], "user_input": 63, "usr": [53, 117, 169, 178, 248], "usual": [228, 236], "utf": 297, "util": [3, 10, 17, 79, 112, 136, 208, 223, 228, 235, 236, 252, 279], "utkin": [3, 81, 123, 297, 301], "uu": [225, 240], "u\u2081": 191, "u\u2082": 191, "v": [3, 11, 14, 30, 31, 53, 57, 63, 81, 107, 109, 130, 131, 134, 158, 162, 163, 183, 184, 188, 191, 197, 198, 202, 207, 225, 229, 238, 240, 251, 291, 297, 301, 303, 313, 318], "v1": [108, 247], "v2": [242, 247], "v3": 102, "v_": [228, 236], "v_valu": 191, "val_result": 112, "valid": [1, 3, 4, 5, 7, 8, 12, 14, 17, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 35, 37, 39, 40, 41, 45, 49, 50, 51, 53, 55, 56, 57, 58, 59, 61, 63, 65, 67, 70, 72, 73, 76, 77, 80, 84, 85, 88, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 119, 120, 121, 124, 126, 130, 131, 132, 133, 134, 136, 147, 148, 151, 158, 165, 168, 170, 171, 175, 176, 177, 178, 182, 183, 190, 191, 192, 194, 195, 196, 199, 203, 204, 206, 207, 208, 209, 211, 213, 218, 219, 220, 222, 224, 225, 230, 233, 234, 237, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 255, 256, 261, 273, 274, 275, 278, 279, 280, 282, 283, 284, 287, 290, 291, 298, 299, 300, 307, 308, 309, 310, 311, 312, 313, 314, 320], "valid_control": 107, "valid_gain": 207, "valid_mask": [104, 116, 251], "valid_param": 108, "validate_adaptive_smc_converg": 99, "validate_classical_smc_st": 99, "validate_complete_config": 247, "validate_config": 72, "validate_configur": 111, "validate_configuration_integr": 63, "validate_control_safeti": 63, "validate_controller_gain": 251, "validate_controller_integr": 101, "validate_gain": [17, 51, 104, 116, 250, 251], "validate_gain_structur": 109, "validate_getting_start": 147, "validate_hyperparamet": 251, "validate_independ": 255, "validate_input": 274, "validate_lyapunov_stability_condit": 107, "validate_mathematical_constraint": 107, "validate_migrated_configur": 108, "validate_parameter_rang": 109, "validate_perform": 111, "validate_smc_gain": [49, 80, 107, 113], "validate_st": 61, "validate_sta_smc_finite_time_converg": 99, "validate_state_input": 112, "validation_config": 104, "validation_en": 113, "validation_exampl": 309, "validation_failur": [104, 112], "validation_funct": 102, "validation_metr": 112, "validation_path": 255, "validation_result": [63, 108, 112, 247, 251, 252, 275, 280], "validationerror": 131, "validationpython": 207, "validationresult": 255, "valu": [7, 11, 14, 51, 53, 57, 63, 72, 79, 80, 101, 102, 104, 108, 111, 112, 113, 116, 119, 120, 131, 150, 194, 200, 202, 207, 208, 215, 228, 236, 247, 252, 274, 278, 280, 284, 291, 310, 313, 318], "valueerror": [17, 80, 99, 101, 104, 107, 109, 111, 112, 116, 132, 168, 194, 207, 247, 274, 278], "van": [3, 193], "var": [254, 310, 313], "vari": [3, 215, 246, 259, 280, 291, 318, 321], "variabl": [3, 34, 111, 112, 119, 121, 143, 161, 168, 191, 225, 227, 231, 240, 246, 251, 258, 289, 300, 310], "varianc": [120, 149, 251, 309, 313], "variant": [36, 65, 67, 103, 104, 166, 205, 226, 230, 237, 239, 274, 279, 283, 291], "variat": [68, 104, 166, 197, 205, 228, 236, 259, 310, 313], "vastli": [225, 240], "vector": [45, 51, 61, 76, 79, 104, 112, 113, 168, 194, 198, 199, 203, 216, 219, 220, 229, 238, 246, 250, 251, 279, 284, 289, 291], "vector_sim": [45, 250], "vectoris": 250, "veloc": [3, 11, 53, 63, 104, 112, 162, 167, 191, 228, 229, 236, 238, 250, 251, 278, 291], "velocity_clamp": [247, 251], "velocity_limit_exceed": 278, "verbos": [55, 112, 147, 151], "veri": [99, 194, 207, 223, 228, 235, 236, 252], "verif": [25, 26, 27, 28, 30, 45, 107, 111, 121, 124, 125, 126, 138, 155, 177, 183, 190, 191, 194, 195, 199, 200, 206, 207, 208, 209, 226, 239, 249, 252, 261, 279, 284, 300, 308], "verifi": [70, 107, 111, 119, 121, 122, 125, 126, 141, 146, 151, 167, 191, 252, 320], "verify_backup": 111, "verify_controller_st": 107, "verify_depend": 111, "verify_production_depend": 111, "verlag": [3, 81], "version": [5, 53, 68, 73, 78, 81, 86, 93, 111, 128, 131, 138, 139, 142, 143, 146, 147, 191, 213, 243, 247, 251, 269, 273, 280, 282, 283, 300, 315, 321, 323], "vertic": [225, 240], "vetterl": 3, "via": [3, 22, 84, 113, 122, 202, 210, 228, 236, 250, 270, 313], "viabl": 109, "video": [11, 57], "vidyasagar": 3, "view": [41, 44, 123, 150, 170, 216, 229, 238, 262, 263, 318], "violat": [63, 68, 107, 183, 206, 247, 252], "violation_count": 252, "violation_particl": 252, "virtanen": 8, "virtual": [124, 147], "virtual_memori": [112, 252], "viscou": [229, 238], "visibl": 147, "visit": [31, 297], "visual": [11, 17, 30, 53, 57, 65, 67, 77, 90, 129, 136, 149, 152, 153, 155, 156, 157, 159, 189, 227, 231, 262, 264, 265, 266, 269, 295, 310, 316, 317, 318, 319, 320], "visualis": [227, 228, 231, 236], "vl": [225, 240], "vlissid": 17, "volum": [91, 138], "vp": 90, "vr": 27, "vulner": 11, "w": [3, 53, 112, 191, 229, 238, 248, 252, 278, 291, 313, 318], "w_": [228, 236, 291], "w_1": 291, "w_2": 291, "w_3": 291, "w_4": 291, "w_i": 88, "w_schedul": [193, 247, 251], "wa": [30, 31, 45, 81, 119, 120, 147, 165, 228, 236, 300], "wai": [229, 238, 271, 276, 313], "wait": 113, "walkthrough": 57, "walli": 313, "wanner": 3, "warn": [5, 24, 25, 26, 32, 33, 63, 78, 79, 99, 102, 108, 109, 111, 112, 113, 116, 147, 247, 251, 252, 278, 297, 315], "warner": [102, 108], "warning_angl": 63, "wast": [228, 236], "watchdog": 8, "wave": 259, "we": [2, 122, 228, 236, 279], "weak": 7, "weakref": 210, "wear": 205, "web": [8, 15, 27, 31, 170, 222, 233, 318, 321], "webxr": [27, 31], "week": [9, 10, 11, 39, 82, 298], "weekli": [111, 243, 261], "weekly_mainten": 111, "weight": [3, 53, 63, 78, 84, 119, 123, 156, 158, 162, 193, 201, 202, 215, 218, 228, 229, 236, 238, 245, 246, 248, 250, 251, 252, 258, 278, 280, 310, 313], "welch": [149, 313], "welcom": [121, 129], "well": [7, 24, 25, 26, 27, 29, 31, 33, 72, 78, 213, 291], "went": [27, 31], "were": [122, 147, 228, 230, 236, 237, 275], "weslei": 17, "what": [24, 25, 26, 27, 29, 30, 31, 32, 33, 70, 108, 121, 122, 129, 130, 145, 146, 155, 160, 163, 167, 168, 271], "when": [12, 17, 23, 30, 31, 41, 45, 80, 94, 109, 116, 117, 130, 132, 154, 162, 183, 205, 207, 210, 228, 229, 236, 238, 266, 274, 323], "where": [3, 27, 88, 102, 107, 112, 130, 194, 225, 228, 229, 236, 238, 240, 251, 252, 255, 279, 291, 297], "wherea": [228, 229, 236, 238], "whether": 51, "which": [168, 228, 229, 236, 238], "while": [65, 67, 102, 112, 113, 120, 178, 228, 229, 230, 236, 237, 238, 247, 248, 274, 275, 280], "white": [228, 236], "whitnei": 313, "whose": [228, 236], "why": [35, 121, 122, 145, 161, 163, 167, 226, 239, 310, 318], "wide": [99, 208, 225, 228, 229, 236, 238, 240], "widehat": [228, 236], "widen": [228, 236], "widget": [29, 154], "width": [53, 313], "wilei": 3, "wilk": 313, "window": 65, "windup": 85, "winner": 67, "wise": 133, "within": [111, 120, 165, 194, 207, 208, 228, 236, 251, 261, 278], "within_bound": 101, "within_satur": 101, "without": [7, 107, 116, 122, 166, 207, 251, 299, 310, 323], "wittenmark": [3, 123], "wizard": 108, "wolpert": 246, "word": 12, "work": [7, 8, 24, 25, 26, 27, 28, 29, 32, 33, 53, 70, 121, 143, 145, 147, 155, 178, 190, 224, 225, 229, 234, 238, 240, 241, 267, 269, 274, 275, 315, 323], "worker": [27, 31], "workflow": [7, 11, 12, 16, 20, 21, 31, 34, 53, 57, 63, 72, 80, 84, 94, 98, 101, 104, 111, 112, 113, 115, 121, 125, 127, 128, 130, 148, 156, 167, 169, 170, 171, 177, 178, 182, 183, 188, 208, 248, 251, 252, 253, 265, 275, 277, 280, 282, 283, 290, 298, 300, 304, 308, 310, 314, 315, 320, 321, 322, 323], "workflow_config": 252, "workflow_result": [63, 252], "workflow_st": 252, "workflow_start_tim": 252, "workflowperformanceoptim": 252, "workflowst": 252, "world": [11, 13, 36, 63, 155, 177, 182], "worst": [215, 290, 310, 313], "worst_fit": 215, "would": [207, 280], "wrap": [113, 267, 278], "wrapper": [17, 51, 61, 80, 101, 104, 107, 112, 113, 116, 278], "writabl": 63, "write": [12, 151, 266], "written": [229, 238, 291], "wrong": [111, 112], "w\u2081": 251, "w\u2082": 251, "w\u2083": 251, "w\u2084": 251, "x": [3, 53, 79, 102, 104, 108, 112, 132, 168, 191, 194, 202, 207, 219, 221, 228, 229, 230, 236, 237, 238, 251, 278, 280, 291, 298], "x0": [191, 228, 236], "x1": [194, 207], "x2": [194, 207], "x_": [61, 228, 236], "x_cart": 112, "x_dot": 191, "x_n": 61, "x_ref": 251, "xdot": [228, 236], "xfail": 283, "xss": 143, "xx": [225, 240], "x\u2080": 194, "x\u2081": 194, "x\u2082": 194, "y": [3, 53, 108, 132, 228, 236, 298], "y0": [228, 236], "y_": [228, 236], "yaml": [46, 51, 53, 63, 72, 73, 77, 81, 85, 107, 108, 111, 146, 164, 168, 169, 183, 193, 224, 225, 226, 229, 230, 234, 237, 238, 239, 240, 247, 251, 252, 253, 273, 282, 283, 300], "yang": 3, "year": 122, "yield": [228, 229, 236, 238], "yml": [11, 92, 108, 300], "you": [102, 121, 129, 130, 141, 146, 151, 160, 269, 271, 280], "young": 3, "your": [89, 102, 141, 146, 150, 157, 164, 165, 168, 268, 269, 271, 323], "z": [79, 80, 85, 112, 291], "z0": 63, "z_": [63, 228, 236], "za": 63, "zero": [112, 168, 191, 194, 207, 228, 229, 236, 238, 252], "zeta": 247, "zeta1": [194, 207, 252], "zeta1_viol": 252, "zeta2": [194, 207, 252], "zeta2_viol": 252, "zeta_avg": 252, "zeta_rang": 247, "zinob": 3, "zip": [113, 278], "zone": [77, 226, 239], "\u00b2": 247, "\u00b2dt": [251, 280], "\u00e5str\u00f6m": [3, 123], "\u00f6zg\u00fcner": 3, "\u00fc": 3, "\u0117\u2081": 191, "\u0117\u2082": 191, "\u03b1": [77, 99, 168, 194, 207, 251, 310, 313], "\u03b11": [107, 112], "\u03b12": [107, 112], "\u03b1x": 194, "\u03b1x\u2081": 194, "\u03b1\u2081": 191, "\u03b1\u2082": 191, "\u03b2": 194, "\u03b2x\u2082": 194, "\u03b3": [107, 109, 112, 251], "\u03b4": [107, 313], "\u03b4_max": 107, "\u03b5": 77, "\u03b6": [247, 251, 252], "\u03b6_max": 247, "\u03b6_min": 247, "\u03b6\u2081": [247, 252], "\u03b6\u2082": 252, "\u03b7": [107, 207], "\u03b8": [35, 104, 112, 230, 237, 251, 279], "\u03b81": [225, 230, 237, 240], "\u03b82": [225, 230, 237, 240], "\u03b8\u2080": 251, "\u03b8\u2081": [63, 104, 112, 168], "\u03b8\u2082": [63, 104, 112, 168], "\u03ba": 35, "\u03bb": [99, 247], "\u03bb1": [72, 99, 102, 107, 109, 112, 194], "\u03bb1\u03b81": [230, 237], "\u03bb2": [72, 99, 102, 107, 109, 112, 194], "\u03bb2\u03b82": [230, 237], "\u03bb\u1d62": [107, 207], "\u03bb\u2081": [99, 247, 251, 252], "\u03bb\u2081_max": 247, "\u03bb\u2081e\u2081": 191, "\u03bb\u2081\u03b8": 194, "\u03bb\u2081\u03bb\u2082": 251, "\u03bb\u2082": [99, 251, 252], "\u03bb\u2082_max": 247, "\u03bb\u2082e\u2082": 191, "\u03bb\u2082\u03b8": 194, "\u03bc": [208, 310, 313], "\u03be": 313, "\u03c0": 191, "\u03c3": [3, 77, 85, 112, 230, 237, 251, 310, 313], "\u03c3k": 112, "\u03c3\u00b2": 251, "\u03c6": [112, 247], "\u03c9": [202, 215], "\u1e61": 112, "\u1e61_ref": 112, "\u1e8b": [104, 112], "\u1e8b_cart": 112, "\u2080\u1d40": 251, "\u2080\u1d40u\u00b2": 251, "\u2080\u1d40\u03c3\u00b2": 251, "\u2081": [104, 112, 194], "\u2082": [104, 112, 194], "\u211d": 112, "\u211d\u2074": 251, "\u211d\u2075": 251, "\u211d\u2076": [112, 251], "\u211d\u207f": 251}})