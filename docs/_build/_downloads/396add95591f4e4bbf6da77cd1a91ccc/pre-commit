#!/bin/sh
# Pre-commit hook for DIP-SMC-PSO project
# Phase 6.5: Local Quality Gate Validation
#
# This hook runs local validation checks before allowing commits.
# To bypass (use sparingly): git commit --no-verify

set -e

echo "🔍 Running pre-commit quality checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track failures
FAILURES=0

# Function to print colored status
print_status() {
    if [ $1 -eq 0 ]; then
        echo "${GREEN}✓${NC} $2"
    else
        echo "${RED}✗${NC} $2"
        FAILURES=$((FAILURES + 1))
    fi
}

# 1. Check Python syntax
echo "\n${YELLOW}[1/5]${NC} Checking Python syntax..."
PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

if [ -n "$PYTHON_FILES" ]; then
    for file in $PYTHON_FILES; do
        python -m py_compile "$file" 2>/dev/null
        print_status $? "Python syntax: $file"
    done
else
    echo "  No Python files to check"
fi

# 2. Check for large files
echo "\n${YELLOW}[2/5]${NC} Checking for large files..."
LARGE_FILES=$(git diff --cached --name-only --diff-filter=ACM | while read file; do
    if [ -f "$file" ] && [ $(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null) -gt 1048576 ]; then
        echo "$file"
    fi
done)

if [ -n "$LARGE_FILES" ]; then
    echo "${RED}✗${NC} Large files detected (>1MB):"
    echo "$LARGE_FILES"
    FAILURES=$((FAILURES + 1))
else
    print_status 0 "No large files detected"
fi

# 3. Check for debugging statements
echo "\n${YELLOW}[3/5]${NC} Checking for debugging statements..."
DEBUG_FOUND=0

if [ -n "$PYTHON_FILES" ]; then
    for file in $PYTHON_FILES; do
        if grep -qE "(import pdb|breakpoint\(\)|import ipdb)" "$file"; then
            echo "  ${RED}Warning:${NC} Found debugging statements in $file"
            DEBUG_FOUND=1
        fi
    done
fi

if [ $DEBUG_FOUND -eq 0 ]; then
    print_status 0 "No debugging statements found"
fi

# 4. Check for TODO/FIXME comments in staged code
echo "\n${YELLOW}[4/5]${NC} Checking for TODO/FIXME markers..."
TODO_COUNT=0

if [ -n "$PYTHON_FILES" ]; then
    TODO_COUNT=$(git diff --cached | grep -E '^\+.*#.*(TODO|FIXME)' | wc -l || true)
fi

if [ $TODO_COUNT -gt 0 ]; then
    echo "  ${YELLOW}Info:${NC} $TODO_COUNT TODO/FIXME comments added"
else
    echo "  No new TODO/FIXME markers"
fi

# 5. Run quick linting (ruff) if available
echo "\n${YELLOW}[5/5]${NC} Running ruff linter..."

if command -v ruff &> /dev/null; then
    if [ -n "$PYTHON_FILES" ]; then
        ruff check $PYTHON_FILES --quiet 2>/dev/null
        print_status $? "Ruff linting"
    else
        echo "  No Python files to lint"
    fi
else
    echo "  ${YELLOW}Skipped${NC} (ruff not installed)"
fi

# Summary
echo "\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

if [ $FAILURES -eq 0 ]; then
    echo "${GREEN}✓ All pre-commit checks passed!${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
    exit 0
else
    echo "${RED}✗ $FAILURES check(s) failed!${NC}"
    echo ""
    echo "To fix:"
    echo "  - Fix the issues above"
    echo "  - Or bypass with: git commit --no-verify (not recommended)"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
    exit 1
fi
