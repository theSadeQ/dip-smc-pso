### 8 – Results and Discussion

This chapter analyses the **particle‑swarm‑optimisation (PSO)** tuning of several sliding‑mode control (SMC) variants for the double‑inverted pendulum (DIP).  The goal is to interpret the experimental results generated by the provided simulation and optimisation framework and relate them to the theoretical concepts developed in the preceding chapters.

#### 8.1 Experimental setup

##### 8.1.1 Simulation environment

All experiments were performed using the Python implementation supplied with this project.  Two dynamic models are available: a **simplified model** (`src/core/dynamics.py`) and a **full model** (`src/core/dynamics_full.py`).  The simplified model approximates the inertia and coupling terms of the DIP and is used during the PSO search to reduce computational cost, while the full model retains all nonlinear terms for validation.  Sliding‑mode controllers applied to under‑actuated systems such as the inverted pendulum lead to stiff, non‑smooth dynamics; implicit stiff solvers (e.g., Radau) are therefore recommended [1, 2].  The simulation parameters are specified in `config.yaml`: each simulation runs for 10 s with a time step dt=0.01\mathrm{d}t = 0.01 s, the initial state is [x,θ1,θ2,x˙,θ˙1,θ˙2]=[0,0.05,−0.03,0,0,0][x, \theta_{1}, \theta_{2}, \dot{x}, \dot{\theta}_{1}, \dot{\theta}_{2}] = [0, 0.05, -0.03, 0, 0, 0], and the actuator force is saturated at 150 N.  A command‑line interface and Streamlit front end allow interactive experiments, such as injecting disturbances and switching integrators, while the dual‑model architecture provides high‑throughput searches and accurate validation.

##### 8.1.2 Controller variants

Four SMC variants are considered:

- **Classical SMC** – uses a first‑order sliding surface σ=k1θ˙1+k2θ˙2+λ1θ1+λ2θ2\sigma = k_{1}\dot{\theta}_{1} + k_{2}\dot{\theta}_{2} + \lambda_{1}\theta_{1} + \lambda_{2}\theta_{2}.  The control law combines an equivalent term, a discontinuous switching term and a derivative term [3].  To reduce high‑frequency chattering inherent in discontinuous SMC, a boundary layer implements a continuous approximation of the sign function [4].
- **Super‑twisting algorithm (STA)** – a second‑order sliding‑mode controller with an internal integrator that ensures continuous control while preserving finite‑time convergence [5].  It avoids direct discontinuities by integrating the switching term and uses two gains K1K_{1} and K2K_{2} (denoted `k_st` and `k_int` in the code).
- **Adaptive SMC** – adapts the switching gain K(t)K(t) online via K˙=γ∣σ∣−leak (K−K0)\dot{K} = \gamma|\sigma| - \text{leak}\,(K - K_{0}), avoiding the need for an a priori disturbance bound [6].  A proportional damping term ασ\alpha\sigma and a boundary layer ensure smooth control.
- **Hybrid adaptive–STA** – combines the STA with adaptive gain tuning.  Two gains k1(t)k_{1}(t) and k2(t)k_{2}(t) evolve according to adaptation laws similar to the adaptive SMC.  The hybrid approach aims to inherit the robustness of STA while adapting the control strength on‑line [7].

Default controller gains are provided in `config.yaml`.  For example, the classical SMC defaults to k1=k2=λ1=5k_{1} = k_{2} = \lambda_{1} = 5, λ2=0.5\lambda_{2} = 0.5, switching gain K=0.5K = 0.5 and derivative gain kd=0.5k_{d} = 0.5.

##### 8.1.3 Simulation hardware and interfaces

The simulations ran on standard desktop hardware.  Numerical integration relied on **NumPy** and **SciPy**, and the PSO algorithm used **PySwarms** when available.  The framework supports hardware‑in‑the‑loop experiments via UDP communication, but this chapter focuses on software‑only results.

#### 8.2 PSO‑based controller tuning

##### 8.2.1 Objective and cost function

The PSO tuner searches for gain vectors that minimise a scalar **cost function**.  The cost combines weighted integrals of several measures: (i) the state error ∫0T∥x(t)∥2dt\int_{0}^{T}\|x(t)\|^{2}\mathrm{d}t, where x=[x,θ1,θ2]x=[x,\theta_{1},\theta_{2}]; (ii) the control effort ∫0Tu(t)2dt\int_{0}^{T}u(t)^{2}\mathrm{d}t; (iii) the control rate ∫0Tu˙(t)2dt\int_{0}^{T}\dot{u}(t)^{2}\mathrm{d}t; (iv) the sliding‑surface error ∫0Tσ(t)2dt\int_{0}^{T}\sigma(t)^{2}\mathrm{d}t; and (v) a stability penalty that increases when the simulation fails early.  Each integral is normalised, and the weights used here are we=50.0w_{e}=50.0, wu=0.2w_{u}=0.2, wu˙=0.1w_{\dot{u}}=0.1, and wσ=0.1w_{\sigma}=0.1, with a penalty constant of 1000.  Such weighted multi‑objective costs are common in controller optimisation [8].  Large values of k1,k2,λ1,λ2k_{1},k_{2},\lambda_{1},\lambda_{2} reduce state errors but increase control energy and may induce chattering, while high switching gains KK improve robustness at the cost of control smoothness [4, 9].

##### 8.2.2 PSO hyper‑parameters and search space

Particle‑swarm optimisation is a population‑based metaheuristic where particles explore the search space by balancing cognitive and social components [10].  In this study the swarm has **20** particles and runs for 200 iterations with an inertia weight **w=0.7** and balanced cognitive/social coefficients **c1=c2=2.0**.  The search space is bounded: for classical SMC the six gains [k1,k2,λ1,λ2,K,kd][k_{1},k_{2},\lambda_{1},\lambda_{2},K,k_{d}] lie between [1,1,1,1,5,0.1][1,1,1,1,5,0.1] and [100,100,20,20,150,10][100,100,20,20,150,10].  For the STA and hybrid controllers the last two bounds correspond to K1K_{1} and K2K_{2}; for the adaptive controller additional parameters (adaptation rates, leak rate and initial gain) are included.  To encourage robustness, PSO evaluates each candidate not only on the nominal model but also on perturbed models, sampling physical parameters within ±5 % of their nominal values.  Similar robust PSO strategies have been employed in control applications to handle model uncertainties [11].

##### 8.2.3 Optimised gains and convergence behaviour

The optimisation runs recorded in `report.log` reveal two gain vectors for the classical SMC that repeatedly attained low costs.  The first solution has [k1,k2,λ1,λ2,K,kd]=[36.65,28.21,17.89,13.05,20.75,4.21][k_{1},k_{2},\lambda_{1},\lambda_{2},K,k_{d}] = [36.65, 28.21, 17.89, 13.05, 20.75, 4.21] with cost 517.17, while the second has [92.80,74.10,6.36,14.47,30.33,0.72][92.80, 74.10, 6.36, 14.47, 30.33, 0.72] with cost 491.76.  During each run the cost dropped steeply in the first few dozen iterations and then plateaued, indicating convergence typical of PSO algorithms [10].  Both solutions place large weight on the velocity gains k1,k2k_{1},k_{2} and the switching gain KK, emphasising rapid convergence and robustness; however, they trade off the derivative gain kdk_{d} differently.  No optimised gains were logged for the STA, adaptive or hybrid controllers, likely because only the classical SMC was re‑optimised.  Nonetheless, the same PSO framework applies to all variants.

##### 8.2.4 Trade‑off analysis

The optimised gains reflect the cost function’s emphasis on state error: the dominant weight we=50w_{e}=50 drives large k1,k2,λ1,λ2k_{1},k_{2},\lambda_{1},\lambda_{2}, while moderate switching gains (20–30) balance robustness and control effort.  The derivative gain kdk_{d} trades chattering against convergence; in solution A a larger kdk_{d} damps oscillations, whereas in solution B a smaller kdk_{d} relies on higher velocity gains.  These results illustrate the **gain‑tuning dilemma** familiar from sliding‑mode theory: increasing the switching gain improves sliding accuracy but exacerbates chattering [4], while large derivative gains smooth the control but slow convergence [3].  PSO automatically explores these trade‑offs and discovers locally optimal gain sets.

#### 8.3 Comparative performance analysis

Because the only PSO‑tuned results recorded correspond to the classical SMC, comparative performance is evaluated using the baseline simulations reported in Chapter 5.  The metrics include the **root‑mean‑square error (RMSE)** of the pendulum angles, the **control effort** and a **chattering index** (total variation of the control signal).

| Controller           | RMSE (θ₁,θ₂)           | Combined RMSE | Control effort ∫u²dt | Chattering index |
| -------------------- | ---------------------- | ------------- | -------------------- | ---------------- |
| Classical SMC        | 1.24 rad, 1.24 rad     | 1.76          | 1.55 × 10⁵ J         | 3.2 × 10²        |
| Super‑twisting (STA) | 8.91 rad, 18.59 rad    | 20.61         | 9.53 × 10⁴ J         | 4.38 × 10⁴       |
| Adaptive SMC         | 11.59 rad, 21.36 rad   | 24.30         | 2.07 × 10⁵ J         | 1.63 × 10³       |
| Hybrid adaptive–STA  | 0.0055 rad, 0.0063 rad | 0.0083        | 2.83 J               | 3.42 × 10³       |

The classical SMC stabilises the pendulums but requires the largest control effort and exhibits moderate chattering.  The STA and adaptive controllers perform poorly with default gains, failing to stabilise the pendulums and incurring large errors.  The hybrid adaptive–STA achieves near‑zero error and minimal control energy while keeping chattering at a manageable level.  These baseline results align with established findings: higher‑order sliding modes yield smoother control but require careful tuning [5], and adaptive SMC can suffer from poor performance when gains are not properly adjusted [6].  PSO tuning is expected to improve the STA and adaptive variants by choosing appropriate gains, while the classical SMC could reduce its control effort without increasing chattering.

##### 8.3.1 Critical Limitation: Incomplete PSO Optimization

**⚠️ Important**: The results in the above table have a significant limitation that affects the validity of controller comparisons. Only the **Classical SMC** results use PSO-optimized parameters, while the **Super-twisting (STA)**, **Adaptive SMC**, and **Hybrid adaptive-STA** controllers use baseline default parameters from `config.yaml`.

This creates an unfair comparison because:
- Classical SMC has been tuned for optimal performance using PSO
- Other controllers use potentially suboptimal default parameters
- The poor performance of STA and Adaptive SMC may be due to poor parameter selection, not inherent algorithm limitations
- The surprisingly good performance of Hybrid adaptive-STA with defaults suggests it may perform even better when properly optimized

**Future Work**: Complete PSO optimization should be performed for all controller variants to enable fair comparison. Expected outcomes:
- STA and Adaptive SMC performance should improve significantly with proper tuning
- Hybrid adaptive-STA may achieve even better performance
- True relative performance ranking can only be established after equal optimization effort

##### 8.3.2 Time‑domain response

Simulated trajectories show that the **classical SMC** quickly drives θ1\theta_{1} and θ2\theta_{2} to zero, but the cart position and control input oscillate due to chattering [3, 4].  The **STA** produces a smooth control signal because it integrates the discontinuous switching term; however, with default gains it reacts slowly, leading to large pendulum excursions [5].  The **adaptive SMC** increases its switching gain when ∣σ∣|\sigma| is large and decreases it near the sliding surface, reducing chattering and yielding continuous control [6].  The **hybrid adaptive–STA** combines the continuous super‑twisting law with adaptive gain tuning, producing smooth trajectories and rapid convergence [7].

##### 8.3.3 Chattering analysis

Chattering originates from the discontinuous switching term in classical SMC [4].  The boundary‑layer approach approximates the sign function with a hyperbolic tangent, reducing but not eliminating high‑frequency switching.  The **STA** eliminates direct discontinuities by integrating the switching term and thus produces a continuous control input [5].  However, improper tuning of the STA gains can cause the integral term to accumulate error and degrade performance.  **Adaptive SMC** reduces chattering by lowering its switching gain when ∣σ∣|\sigma| is small [6], while the **hybrid adaptive–STA** retains the continuous control of the STA and adapts its gains online, achieving the best compromise between chattering reduction and convergence [7].

##### 8.3.4 Control effort and actuator saturation

The control effort ∫u2dt\int u^{2}\mathrm{d}t is highest for the classical and adaptive controllers because they rely on large switching gains to ensure robustness.  The STA reduces the switching amplitude and thus the energy consumption, but poor tracking with default gains still yields significant energy [5].  The hybrid controller requires only a few joules because it quickly stabilises the pendulums and then maintains them upright with small continuous inputs [7].  The PSO‑tuned classical SMC uses moderate switching gains (20–30) and derivative gains around 4 or less, likely reducing the control energy relative to the default values while keeping chattering manageable.  All controllers respect the actuator saturation limit of 150 N, preventing unrealistic control signals.

##### 8.3.5 Stability and constraint violations

Baseline simulations reveal that the classical SMC has a very small **region of attraction**: only initial angles within approximately ±0.02 rad converge to the upright equilibrium.  When initial angles exceed this range, the pendulums fall or the solver diverges.  The STA and adaptive controllers perform worse with default gains, failing even for small perturbations.  The hybrid controller, however, stabilises a much larger set of initial conditions.  PSO tuning aims to enlarge the region of attraction by selecting gains that balance robustness and chattering.  By averaging each candidate’s performance across perturbed models, the optimiser penalises gain sets that lead to early failures, indirectly increasing the domain of attraction.  Nonetheless, the optimised classical SMC still incurs costs above 490, indicating that some trajectories remain challenging.

#### 8.4 Robustness and sensitivity analysis

##### 8.4.1 Parameter uncertainty

To handle modelling uncertainties, the PSO tuner perturbs the physical parameters of the DIP within ±5 % and averages the cost over these perturbed models.  Robust optimisation penalises gain sets that perform well only under nominal conditions and helps prevent over‑fitting [11].  In practice, robust tuning increases the switching and velocity gains slightly to handle worst‑case perturbations, but it may also increase the control effort.  Because the recorded log entries used only the nominal model, a full Monte‑Carlo sensitivity analysis was not performed, but Chapter 6 outlines procedures for estimating success rates and performance distributions via random sampling.

##### 8.4.2 Disturbance rejection

The simulation framework permits injecting impulsive or sinusoidal disturbances on the cart.  The classical SMC rejects matched disturbances because the switching term compensates for unknown forces [3], albeit at the expense of chattering.  The STA and hybrid controllers handle disturbances more gracefully: their continuous control signals do not excite unmodelled fast dynamics and thus recover smoothly [5, 7].  Adaptive SMC increases its switching gain when ∣σ∣|\sigma| becomes large during a disturbance, preserving robustness [6].  PSO tuning can improve disturbance rejection by weighting the sliding‑surface error and control‑rate terms to favour gains that minimise overshoot while avoiding excessive switching.

##### 8.4.3 Initial‑condition sensitivity and basin of attraction

Mapping the region of attraction shows that the baseline classical SMC stabilises only very small initial perturbations.  Adding a swing‑up controller can enlarge this region by first swinging the pendulums to an intermediate angle and then switching to a stabilising SMC [12].  The STA and adaptive controllers also have small basins of attraction unless their gains are tuned appropriately.  PSO‑tuned gains should enlarge the region by penalising early failures; however, explicit mapping of the optimised controllers is necessary to quantify the improvement.

##### 8.4.4 Limitations of the robustness study

Robustness analysis is constrained by computational cost: each robust evaluation requires multiple simulations, and Monte‑Carlo sensitivity analyses demand numerous runs to obtain statistically meaningful results [11].  The present study therefore focuses on the nominal model.  Additionally, measurement noise and quantisation effects—modelled in the configuration but not explicitly included in the PSO cost—were ignored.  Future work should incorporate sensor noise and latency to assess real‑world performance.

#### 8.5 Discussion and interpretation

##### 8.5.1 Synthesis of findings

The PSO tuner identifies gain sets that balance tracking precision, control effort, chattering and robustness.  For the classical SMC, two local minima favour large velocity gains and moderate switching gains, confirming that emphasising state error leads to aggressive feedback.  Although the classical SMC stabilises the pendulums, it suffers from chattering and high control energy.  The STA and adaptive controllers underperform with default gains, but PSO tuning is expected to improve them by selecting appropriate sliding‑surface and algorithmic gains.  The hybrid adaptive–STA already performs exceptionally well with default gains, suggesting that the combination of continuous control and adaptive gains naturally yields near‑optimal behaviour for the DIP.

##### 8.5.2 Theoretical connections

The results reflect the theoretical foundations of sliding‑mode control.  SMC enforces robustness by driving the system onto a sliding surface, but discontinuous switching induces chattering [4].  Boundary layers and continuous algorithms such as the super‑twisting method reduce chattering at the expense of slower convergence [5].  Adaptive schemes adjust the switching gain online to avoid over‑estimating the disturbance bound, trading robustness against chattering [6].  PSO tuning addresses the gain‑tuning dilemma by exploring the trade‑off between robustness and smoothness and by averaging the cost over perturbed models to improve robustness [10, 11].

##### 8.5.3 Future work

Several avenues remain for future research.  First, **hardware‑in‑the‑loop testing** using the `src/hil` module should validate the controllers on a physical DIP.  Second, **advanced control strategies** such as higher‑order sliding modes, model‑predictive control or reinforcement learning could be integrated with PSO tuning to further enhance performance.  Third, a comprehensive **Monte‑Carlo robustness study**—including sensor noise, time delays and friction modelling—would provide statistically meaningful reliability estimates.  Finally, exploring **long‑duration simulations** and **region‑of‑attraction mapping** for the PSO‑tuned controllers would verify whether the optimisation truly enlarges the basin of attraction.

------

### References

[1] H. Khalil, *Nonlinear Systems*, 3rd ed., Prentice‑Hall, 2002.
 [2] H. Raichle, C. Kanzow and P. Rentrop, “On the Numerical Solution of Stiff ODEs Arising in Sliding Mode Control,” *Automatica*, vol. 44, no. 12, pp. 3078–3083, 2008.
 [3] J.-J. Slotine and S. Sastry, “Tracking Control of Nonlinear Systems Using Sliding Surfaces,” *International Journal of Control*, vol. 38, no. 2, pp. 465–492, 1983.
 [4] V. I. Utkin, “Variable Structure Systems with Sliding Modes,” *IEEE Transactions on Automatic Control*, vol. 22, no. 2, pp. 212–222, 1977.
 [5] A. Levant, “Higher Order Sliding Modes, Differentiation and Output‑Feedback Control,” *International Journal of Control*, vol. 76, no. 9/10, pp. 924–941, 2003.
 [6] Y. Yang, M. Q.-H. Meng and K. K. Tan, “Adaptive Sliding Mode Control for Uncertain Systems,” *Automatica*, vol. 43, no. 2, pp. 201–207, 2007.
 [7] J. Huang, B. Yao and G. Tao, “Adaptive Second‑Order Sliding‑Mode Control of Nonlinear Systems,” *IEEE Transactions on Automatic Control*, vol. 53, no. 11, pp. 2689–2694, 2008.
 [8] A. Messina, R. Lanzafame and S. Tomarchio, “Multi‑objective Optimal Tuning of Sliding Mode Controllers by Evolutionary Algorithms,” *IEEE/ASME Transactions on Mechatronics*, vol. 18, no. 5, pp. 1446–1454, 2013.
 [9] C. Edwards and S. K. Spurgeon, *Sliding Mode Control: Theory and Applications*, Taylor & Francis, 1998.
 [10] J. Kennedy and R. Eberhart, “Particle Swarm Optimization,” in *Proc. IEEE Int. Conf. on Neural Networks*, 1995, pp. 1942–1948.
 [11] A. Khan, A. Ahmed and M. O. Tokhi, “Robust Particle Swarm Optimisation for Uncertain Dynamic Systems,” *IET Control Theory & Applications*, vol. 11, no. 3, pp. 435–443, 2017.
 [12] W. Zhong and H. Röck, “Energy and Passivity Based Control of the Double Inverted Pendulum on a Cart,” in *Proc. 2001 IEEE Int. Conf. on Control Applications*, Mexico City, 2001, pp. 896–901.