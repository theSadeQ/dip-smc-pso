Priority,Research_Status,Category,Type,Has_Citation,Claim_ID,Research_Description,Full_Claim_Text,Suggested_Citation,BibTeX_Key,DOI_or_URL,Reference_Type,Research_Notes,File_Path,Line_Number,Scope,Existing_Citation_Format,Confidence
CRITICAL,,theoretical,theorem,NO,FORMAL-THEOREM-001,Hysteresis with deadband $\delta$ prevents oscillation for residuals with bounded derivative.,Hysteresis with deadband $\delta$ prevents oscillation for residuals with bounded derivative.,,,,,,docs/fdi_threshold_calibration_methodology.md,261,,,0.8
CRITICAL,,theoretical,theorem,NO,FORMAL-THEOREM-004,The PSO-optimized gains ensure global asymptotic stability of the DIP system.,The PSO-optimized gains ensure global asymptotic stability of the DIP system.,,,,,,docs/pso_gain_bounds_mathematical_foundations.md,733,,,1.0
CRITICAL,,theoretical,theorem,NO,FORMAL-THEOREM-005,The PSO-optimized gains maintain Lyapunov stability for the closed-loop DIP system.,The PSO-optimized gains maintain Lyapunov stability for the closed-loop DIP system.,,,,,,docs/pso_integration_technical_specification.md,875,,,0.9
CRITICAL,,theoretical,theorem,NO,FORMAL-THEOREM-008,The particle converges to a stable trajectory if:,The particle converges to a stable trajectory if:,,,,,,docs/theory/pso_optimization_complete.md,86,,,0.9
CRITICAL,,theoretical,theorem,NO,FORMAL-THEOREM-010,"Under the stability condition and with decreasing inertia weight, PSO converges to the global optimum with probability 1 for unimodal functions.","Under the stability condition and with decreasing inertia weight, PSO converges to the global optimum with probability 1 for unimodal functions.",,,,,,docs/theory/pso_optimization_complete.md,115,,,0.9
CRITICAL,completed,theoretical,theorem,NO,FORMAL-THEOREM-016,"If all sliding surface parameters $c_i > 0$, then the sliding surface dynamics are exponentially stable with convergence rates determined by $c_i$.","If all sliding surface parameters $c_i > 0$, then the sliding surface dynamics are exponentially stable with convergence rates determined by $c_i$.",Shtessel et al. (2013),shtessel2013sliding,10.1007/978-0-8176-4893-0_1,book,"Chapter 1 of Shtessel’s textbook introduces the sliding variable (σ=x_2+c,x_1) with (c>0). The authors derive the desired dynamics ( \dot{x}_1 + c x_1 =0) and solve it to get (x_1(t)=x_1(0)e^{-ct}) and (x_2(t)=-c,x_1(0)e^{-ct}), noting that both states converge exponentially at a rate (c). They explain that driving (σ) to zero in finite time produces these exponential dynamics with convergence rates determined by the positive parameter (c).",docs/theory/smc_theory_complete.md,71,,,0.9
CRITICAL,completed,theoretical,theorem,NO,FORMAL-THEOREM-019,"Under the reaching condition {eq}`eq:reaching_condition`, the system reaches the sliding surface in finite time bounded by:","Under the reaching condition {eq}`eq:reaching_condition`, the system reaches the sliding surface in finite time bounded by:",Slotine & Li (1991),slotine1991applied,,book,"In the sliding‑mode chapter of *Applied Nonlinear Control*, Slotine and Li derive the reaching condition ( \tfrac{\mathrm{d}}{\mathrm{d}t}\tfrac{1}{2}s^2 \le -\eta ) with (\eta>0). Integrating this inequality shows that the trajectory reaches the sliding surface in finite time bounded by (t_{\mathrm{reach}} \le |s(0)|/\eta). This provides a formal bound on the time required to reach the sliding surface under the reaching condition.",docs/theory/smc_theory_complete.md,132,,,0.9
CRITICAL,completed,theoretical,theorem,NO,FORMAL-THEOREM-020,The classical SMC law {eq}`eq:classical_smc_structure` with switching gain $\eta > \rho$ (where $\rho$ is the uncertainty bound) ensures global finite...,The classical SMC law {eq}`eq:classical_smc_structure` with switching gain $\eta > \rho$ (where $\rho$ is the uncertainty bound) ensures global finite-time convergence to the sliding surface.,Shtessel et al. (2013),shtessel2013sliding,10.1007/978-0-8176-4893-0_1,book,"Same source as Claim 1. In the same chapter, Shtessel and co‑authors propose a sliding‑mode control law (u=-c,x_2-\varphi,\mathrm{sign}(σ)) and show that the control gain (\varphi) must exceed the disturbance bound (L) by choosing (\varphi = L + \alpha\sqrt{2}). They remark that the first term (L) compensates for the bounded uncertainty while the additional term (\alpha\sqrt{2}) determines the reaching time; a larger (\alpha) yields a shorter finite‑time convergence to the sliding surface. This classical result demonstrates that choosing the switching gain greater than the uncertainty bound guarantees finite‑time convergence.",docs/theory/smc_theory_complete.md,160,,,0.9
CRITICAL,,theoretical,theorem,NO,FORMAL-THEOREM-021,"The super-twisting algorithm ensures finite-time convergence to the second-order sliding set $\{s = 0, \dot{s} = 0\}$ if the parameters satisfy:","The super-twisting algorithm ensures finite-time convergence to the second-order sliding set $\{s = 0, \dot{s} = 0\}$ if the parameters satisfy:",,,,,,docs/theory/smc_theory_complete.md,206,,,0.9
CRITICAL,,theoretical,theorem,NO,FORMAL-THEOREM-022,The adaptive control law {eq}`eq:adaptive_smc_law` ensures:,The adaptive control law {eq}`eq:adaptive_smc_law` ensures:,,,,,,docs/theory/smc_theory_complete.md,270,,,0.9
CRITICAL,completed,theoretical,theorem,NO,FORMAL-THEOREM-023,"With the boundary layer method, the tracking error is ultimately bounded by:","With the boundary layer method, the tracking error is ultimately bounded by:",Slotine & Li (1991),slotine1991applied,,book,"Same source as Claim 2. To mitigate chattering, Slotine and Li introduce a boundary layer of thickness (\phi) around the sliding surface and replace the discontinuous sign function with (s/\phi) within this layer. They prove that this boundary‑layer method makes the layer attractive and ensures that the tracking error components satisfy (|x_i(t)| \le 2\lambda,\varepsilon) for (i=0,\dots,n-1), where (\varepsilon) is proportional to (\phi). Thus, the tracking error is ultimately bounded by a constant determined by the boundary‑layer width, providing a practical bound on the steady‑state error.",docs/theory/smc_theory_complete.md,322,,,0.9
HIGH,,implementation,implementation,NO,CODE-IMPL-001,None (attributed to: None),Professional analysis framework for control system evaluation and validation,,,,,,src\analysis\__init__.py,1,module,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-002,for a specific (attributed to: None),Determine the winning method for a specific metric,,,,,STRATEGIC_PHASE2: Analysis/implementation code (no theory cited),src\analysis\core\data_structures.py,242,module:class:ComparisonResult:function:get_winner,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-003,None (attributed to: None),List of validation methods supported,,,,,STRATEGIC_PHASE2: Analysis/implementation code (no theory cited),src\analysis\core\interfaces.py,192,module:class:StatisticalValidator:function:validation_methods,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-004,None (attributed to: None),Base implementation of metric calculator with common functionality,,,,,STRATEGIC_PHASE2: Analysis/implementation code (no theory cited),src\analysis\core\metrics.py,23,module:class:BaseMetricCalculator,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-005,None (attributed to: None),Protocol defining the expected interface for dynamics models,,,,,STRATEGIC_PHASE2: Analysis/implementation code (no theory cited),src\analysis\fault_detection\fdi.py,13,module:class:DynamicsProtocol,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-007,"for prediction
    
Returns (attributed to: None)",Check for a fault at the current time step,,,,,STRATEGIC_PHASE2: Analysis/implementation code (no theory cited),src\analysis\fault_detection\fdi.py,171,module:class:FDIsystem:function:check,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-008,None (attributed to: None),Protocol defining the interface for fault detection systems...,,,,,BATCH09: Category C - interface - no citation needed,src\analysis\fault_detection\fdi.py,393,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-010,None (attributed to: None),Verify that FDIsystem correctly implements FaultDetectionInterface...,,,,,BATCH09: Category C - validation - no citation needed,src\analysis\fault_detection\fdi.py,426,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-011,None (attributed to: None),Enhanced fault detection and isolation system...,,,,,BATCH09: Category C - initialization - no citation needed,src\analysis\fault_detection\fdi_system.py,1,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-018,None (attributed to: None),Model-based residual generation for fault detection...,,,,,BATCH09: Category C - initialization - no citation needed,src\analysis\fault_detection\residual_generators.py,1,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-019,None (attributed to: None),Adaptive residual generator that combines multiple methods...,,,,,BATCH09: Category C - initialization - no citation needed,src\analysis\fault_detection\residual_generators.py,535,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-020,None (attributed to: None),Generate adaptive residual by combining multiple methods...,,,,,BATCH09: Category C - utility - no citation needed,src\analysis\fault_detection\residual_generators.py,556,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-021,Returns (attributed to: None),Factory function to create residual generators...,,,,,BATCH09: Category C - factory - no citation needed,src\analysis\fault_detection\residual_generators.py,617,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-022,Returns (attributed to: None),Create a residual generator of the specified type...,,,,,BATCH09: Category C - factory - no citation needed,src\analysis\fault_detection\residual_generators.py,687,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-023,None (attributed to: None),Get list of available residual generation methods...,,,,,BATCH09: Category C - utility - no citation needed,src\analysis\fault_detection\residual_generators.py,708,,,0.65
HIGH,completed,implementation,implementation,YES,CODE-IMPL-024,None (attributed to: None),Adaptive threshold methods for fault detection...,Montes de Oca et al. (2012),montesdeoca2012robust,10.1002/acs.1263,paper,BATCH09: Category B - Adaptive threshold generation for robust fault detection,src\analysis\fault_detection\threshold_adapters.py,1,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-025,None (attributed to: None),Update threshold based on new residual value...,,,,,BATCH09: Category C - utility - no citation needed,src\analysis\fault_detection\threshold_adapters.py,58,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-026,None (attributed to: None),Statistical adaptive threshold based on residual statistics...,,,,,BATCH09: Category C - initialization - no citation needed,src\analysis\fault_detection\threshold_adapters.py,87,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-027,None (attributed to: None),Update threshold using statistical methods...,,,,,BATCH09: Category C - utility - no citation needed,src\analysis\fault_detection\threshold_adapters.py,101,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-028,None (attributed to: None),Compute threshold using statistical methods...,,,,,BATCH09: Category C - utility - no citation needed,src\analysis\fault_detection\threshold_adapters.py,119,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-030,None (attributed to: None),Manager for multiple threshold adapters with different methods...,,,,,BATCH09: Category C - initialization - no citation needed,src\analysis\fault_detection\threshold_adapters.py,458,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-031,None (attributed to: None),Initialize adaptive threshold manager...,,,,,BATCH09: Category C - initialization - no citation needed,src\analysis\fault_detection\threshold_adapters.py,461,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-033,names and their (attributed to: None),Update all adapters and return thresholds...,,,,,BATCH09: Category C - utility - no citation needed,src\analysis\fault_detection\threshold_adapters.py,494,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-034,for combining thresholds (attributed to: None),Get consensus threshold from all adapters...,,,,,BATCH09: Category C - utility - no citation needed,src\analysis\fault_detection\threshold_adapters.py,521,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-035,None (attributed to: None),Factory function to create threshold adapters...,,,,,BATCH09: Category C - factory - no citation needed,src\analysis\fault_detection\threshold_adapters.py,601,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-036,None (attributed to: None),Factory function to create adaptive threshold manager...,,,,,BATCH09: Category C - factory - no citation needed,src\analysis\fault_detection\threshold_adapters.py,641,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-037,Returns (attributed to: None),Create a threshold adapter of the specified type...,,,,,BATCH09: Category C - factory - no citation needed,src\analysis\fault_detection\threshold_adapters.py,668,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-038,None (attributed to: None),Get list of available threshold adaptation methods...,,,,,BATCH09: Category C - utility - no citation needed,src\analysis\fault_detection\threshold_adapters.py,689,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-039,None (attributed to: None),Create an adaptive threshold manager with multiple methods...,,,,,BATCH09: Category C - factory - no citation needed,src\analysis\fault_detection\threshold_adapters.py,694,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-160,None (attributed to: None),Update learned switching thresholds based on decision outcomes...,,,,,BATCH09: Category C - utility - no citation needed,src\controllers\smc\algorithms\hybrid\switching_logic.py,436,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-211,None (attributed to: None),Compatibility import for fault detection system...,,,,,BATCH09: Category C - utility - no citation needed,src\fault_detection\__init__.py,1,,,0.65
HIGH,completed,implementation,implementation,NO,CODE-IMPL-495,None (attributed to: None),Check current coverage against quality gate thresholds...,,,,,BATCH09: Category C - validation - no citation needed,src\utils\coverage\monitoring.py,280,,,0.65
HIGH,completed,implementation,implementation,YES,CODE-IMPL-509,None (attributed to: None),Safe division with epsilon threshold protection against zero division...,Goldberg (1991),goldberg1991floating,10.1145/103162.103163,paper,BATCH09: Category A - Floating-point safe division with epsilon threshold,src\utils\numerical_stability\safe_operations.py,75,,,0.65
