[
 {
 "claim_id": "CODE-IMPL-085",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "Uses simulator default settings, pure initialization without algorithm.",
 "code_summary": "use default from simulator...",
 "needs_citation": false,
 "implementation_type": "initialization"
 },
 {
 "claim_id": "CODE-IMPL-115",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "Calls the system dynamics function, a straightforward utility implementation.",
 "code_summary": "Robustly call continuous\u2011time dynamics: xdot = f(x,u)...",
 "needs_citation": false,
 "implementation_type": "utility"
 },
 {
 "claim_id": "CODE-IMPL-117",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "Handles imports for compatibility, no algorithm or theory involved.",
 "code_summary": "Compatibility import for MPC controller...",
 "needs_citation": false,
 "implementation_type": "utility"
 },
 {
 "claim_id": "CODE-IMPL-446",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "Integration code with fallback mechanism, implementation detail rather than a new algorithm.",
 "code_summary": "Safely integrate using fallback method...",
 "needs_citation": false,
 "implementation_type": "utility"
 },
 {
 "claim_id": "CODE-IMPL-448",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "States a property of the integration method; it's a code comment rather than an algorithmic implementation.",
 "code_summary": "Integration method order (exact for linear systems)...",
 "needs_citation": false,
 "implementation_type": "utility"
 },
 {
 "claim_id": "CODE-IMPL-449",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "Performs zero-order-hold integration on nonlinear dynamics, a practical implementation detail.",
 "code_summary": "Integrate nonlinear system with ZOH control approximation...",
 "needs_citation": false,
 "implementation_type": "utility"
 },
 {
 "claim_id": "CODE-IMPL-477",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "Defines data container classes for results; purely implementation code.",
 "code_summary": "Result container implementations for simulation data...",
 "needs_citation": false,
 "implementation_type": "utility"
 },
 {
 "claim_id": "CODE-IMPL-478",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "Implements a generic recovery strategy, a software design component rather than a theoretical concept.",
 "code_summary": "Implement recovery strategy...",
 "needs_citation": false,
 "implementation_type": "utility"
 },
 {
 "claim_id": "CODE-IMPL-479",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "Implements an emergency stop behavior; it's code for a specific action, not an algorithm from literature.",
 "code_summary": "Emergency stop recovery strategy...",
 "needs_citation": false,
 "implementation_type": "utility"
 },
 {
 "claim_id": "CODE-IMPL-480",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "Implements state limiting logic; a practical code solution with no citation needed.",
 "code_summary": "State limiting recovery strategy...",
 "needs_citation": false,
 "implementation_type": "utility"
 },
 {
 "claim_id": "CODE-IMPL-481",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "Registers recovery strategies in the system; typical interface code, not an algorithm concept.",
 "code_summary": "Register recovery strategy for specific violation type...",
 "needs_citation": false,
 "implementation_type": "utility"
 },
 {
 "claim_id": "CODE-IMPL-482",
 "category": "C",
 "confidence": "HIGH",
 "rationale": "Dispatches the recovery strategy; general implementation code.",
 "code_summary": "Apply appropriate recovery strategy...",
 "needs_citation": false,
 "implementation_type": "utility"
 }
 ]
