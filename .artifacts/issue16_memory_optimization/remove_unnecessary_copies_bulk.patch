--- a/src/interfaces/data_exchange/factory_resilient.py
+++ b/src/interfaces/data_exchange/factory_resilient.py
@@ -168,7 +168,7 @@
     def get_statistics(self) -> Dict[str, Any]:
         """Get factory statistics."""
         with self._stats_lock:
-            stats = self._stats.copy()
+            stats = self._stats
 
         with self._cache_lock:
             stats['cached_serializers'] = len(self._serializer_cache)

--- a/src/interfaces/hil/fault_injection.py
+++ b/src/interfaces/hil/fault_injection.py
@@ -150,7 +150,7 @@
     @property
     def statistics(self) -> Dict[str, Any]:
         """Get fault injection statistics."""
-        stats = self._stats.copy()
+        stats = self._stats
         stats['fault_types_used'] = list(stats['fault_types_used'])
         return stats
 

--- a/src/interfaces/hil/real_time_sync.py
+++ b/src/interfaces/hil/real_time_sync.py
@@ -116,7 +116,7 @@
 
     def get_statistics(self) -> Dict[str, Any]:
         """Get deadline miss statistics."""
-        stats = self._statistics.copy()
+        stats = self._statistics
         if stats['total_deadlines'] > 0:
             stats['miss_rate'] = stats['missed_deadlines'] / stats['total_deadlines']
         else:
@@ -251,7 +251,7 @@
 
     def get_timing_statistics(self) -> Dict[str, Any]:
         """Get timing performance statistics."""
-        stats = self._performance_stats.copy()
+        stats = self._performance_stats
 
         if stats['iterations'] > 0:
             stats['avg_jitter'] = stats['total_jitter'] / stats['iterations']

--- a/src/interfaces/network/http_interface.py
+++ b/src/interfaces/network/http_interface.py
@@ -174,7 +174,7 @@
 
     def get_statistics(self) -> Dict[str, Any]:
         """Get HTTP communication statistics."""
-        stats = self._stats.copy()
+        stats = self._stats
         stats['connection_state'] = self._connection_state.value
         stats['is_server'] = self._app is not None
         stats['registered_routes'] = len(self._routes)

--- a/src/interfaces/network/message_queue.py
+++ b/src/interfaces/network/message_queue.py
@@ -187,7 +187,7 @@
 
     def get_statistics(self) -> Dict[str, Any]:
         """Get ZeroMQ communication statistics."""
-        stats = self._stats.copy()
+        stats = self._stats
         stats['connection_state'] = self._connection_state.value
         stats['active_sockets'] = len(self._sockets)
         stats['socket_names'] = list(self._sockets.keys())
@@ -597,7 +597,7 @@
 
     def get_statistics(self) -> Dict[str, Any]:
         """Get RabbitMQ communication statistics."""
-        stats = self._stats.copy()
+        stats = self._stats
         stats['connection_state'] = self._connection_state.value
         stats['active_queues'] = len(self._queues)
         stats['active_exchanges'] = len(self._exchanges)

--- a/src/interfaces/network/tcp_interface.py
+++ b/src/interfaces/network/tcp_interface.py
@@ -218,7 +218,7 @@
 
     def get_statistics(self) -> Dict[str, Any]:
         """Get TCP communication statistics."""
-        stats = self._stats.copy()
+        stats = self._stats
         stats['connection_state'] = self._connection_state.value
         stats['active_clients'] = len(self._clients)
         stats['is_server'] = self._server is not None

--- a/src/interfaces/network/udp_interface.py
+++ b/src/interfaces/network/udp_interface.py
@@ -186,7 +186,7 @@
 
     def get_statistics(self) -> Dict[str, Any]:
         """Get UDP communication statistics."""
-        stats = self._stats.copy()
+        stats = self._stats
         stats['connection_state'] = self._connection_state.value
         stats['sequence_number'] = self._sequence_number
         stats['expected_sequence'] = self._expected_sequence

--- a/src/interfaces/network/udp_interface_threadsafe.py
+++ b/src/interfaces/network/udp_interface_threadsafe.py
@@ -231,7 +231,7 @@
     def get_statistics(self) -> Dict[str, Any]:
         """Get UDP communication statistics safely."""
         with self._stats_lock:
-            stats = self._stats.copy()
+            stats = self._stats
 
         with self._state_lock:
             stats['connection_state'] = self._connection_state.value

--- a/src/interfaces/network/websocket_interface.py
+++ b/src/interfaces/network/websocket_interface.py
@@ -222,7 +222,7 @@
 
     def get_statistics(self) -> Dict[str, Any]:
         """Get WebSocket communication statistics."""
-        stats = self._stats.copy()
+        stats = self._stats
         stats['connection_state'] = self._connection_state.value
         stats['connected_clients'] = len(self._clients)
         stats['is_server'] = self._server is not None

--- a/src/plant/models/base/dynamics_interface.py
+++ b/src/plant/models/base/dynamics_interface.py
@@ -292,7 +292,7 @@
             return self._create_success_result(
                 state_derivative,
                 time=time,
-                control_input=control_input.copy(),
+                control_input=control_input,
                 **kwargs
             )
 

--- a/src/plant/models/full/dynamics.py
+++ b/src/plant/models/full/dynamics.py
@@ -116,8 +116,8 @@
         if not self._validate_inputs(state, control_input):
             return self._create_failure_result(
                 "Invalid inputs",
-                state=state.copy(),
-                control_input=control_input.copy(),
+                state=state,
+                control_input=control_input,
                 time=time
             )
 
@@ -128,8 +128,8 @@
                 if not self._check_physical_constraints(sanitized_state):
                     return self._create_failure_result(
                         "Physical constraints violated",
-                        state=state.copy(),
-                        control_input=control_input.copy(),
+                        state=state,
+                        control_input=control_input,
                         time=time
                     )
             else:
@@ -149,8 +149,8 @@
             if not self._validate_state_derivative(state_derivative):
                 return self._create_failure_result(
                     "Invalid state derivative computed",
-                    state=sanitized_state.copy(),
-                    control_input=control_input.copy(),
+                    state=sanitized_state,
+                    control_input=control_input,
                     time=time
                 )
 
@@ -163,8 +163,8 @@
 
             return self._create_success_result(
                 state_derivative,
-                state=sanitized_state.copy(),
-                control_input=control_input.copy(),
+                state=sanitized_state,
+                control_input=control_input,
                 time=time,
                 wind_velocity=wind_velocity.copy() if wind_velocity is not None else None,
                 **diagnostics
@@ -176,8 +176,8 @@
 
             return self._create_failure_result(
                 f"Numerical instability: {e}",
-                state=state.copy(),
-                control_input=control_input.copy(),
+                state=state,
+                control_input=control_input,
                 time=time,
                 error_type="numerical_instability"
             )
@@ -188,8 +188,8 @@
 
             return self._create_failure_result(
                 f"Dynamics computation failed: {e}",
-                state=state.copy(),
-                control_input=control_input.copy(),
+                state=state,
+                control_input=control_input,
                 time=time,
                 error_type="computation_error"
             )
@@ -289,7 +289,7 @@
 
     def get_integration_statistics(self) -> Dict[str, Any]:
         """Get integration performance statistics."""
-        stats = self.integration_stats.copy()
+        stats = self.integration_stats
         if stats['total_steps'] > 0:
             stats['success_rate'] = stats['successful_steps'] / stats['total_steps']
             stats['rejection_rate'] = stats['rejected_steps'] / stats['total_steps']
@@ -388,7 +388,7 @@
                 diagnostics['derivative_consistency_error'] = derivative_error
 
         # Store for next iteration
-        self._last_state = state.copy()
+        self._last_state = state
         self._last_time = time
 
         return diagnostics

--- a/src/plant/models/lowrank/dynamics.py
+++ b/src/plant/models/lowrank/dynamics.py
@@ -106,8 +106,8 @@
         if not self._validate_inputs(state, control_input):
             return self._create_failure_result(
                 "Invalid inputs",
-                state=state.copy(),
-                control_input=control_input.copy(),
+                state=state,
+                control_input=control_input,
                 time=time
             )
 
@@ -129,8 +129,8 @@
             if not self.physics.validate_computation(sanitized_state, state_derivative):
                 return self._create_failure_result(
                     "Invalid state derivative computed",
-                    state=sanitized_state.copy(),
-                    control_input=control_input.copy(),
+                    state=sanitized_state,
+                    control_input=control_input,
                     time=time
                 )
 
@@ -144,8 +144,8 @@
 
             return self._create_success_result(
                 state_derivative,
-                state=sanitized_state.copy(),
-                control_input=control_input.copy(),
+                state=sanitized_state,
+                control_input=control_input,
                 time=time,
                 **diagnostics
             )
@@ -154,8 +154,8 @@
             self._record_failed_computation()
             return self._create_failure_result(
                 f"Numerical instability: {e}",
-                state=state.copy(),
-                control_input=control_input.copy(),
+                state=state,
+                control_input=control_input,
                 time=time,
                 error_type="numerical_instability"
             )
@@ -164,8 +164,8 @@
             self._record_failed_computation()
             return self._create_failure_result(
                 f"Dynamics computation failed: {e}",
-                state=state.copy(),
-                control_input=control_input.copy(),
+                state=state,
+                control_input=control_input,
                 time=time,
                 error_type="computation_error"
             )
@@ -269,7 +269,7 @@
 
     def get_computation_statistics(self) -> Dict[str, Any]:
         """Get computation performance statistics."""
-        stats = self.computation_stats.copy()
+        stats = self.computation_stats
         if stats['total_computations'] > 0:
             stats['success_rate'] = stats['successful_computations'] / stats['total_computations']
             stats['failure_rate'] = stats['failed_computations'] / stats['total_computations']

--- a/src/plant/models/simplified/dynamics.py
+++ b/src/plant/models/simplified/dynamics.py
@@ -161,14 +161,14 @@
         if not self.validate_state(state):
             return self._create_failure_result(
                 "Invalid state vector",
-                state=state.copy(),
+                state=state,
                 time=time
             )
 
         if not self._validate_control_input(control_input):
             return self._create_failure_result(
                 "Invalid control input",
-                control_input=control_input.copy(),
+                control_input=control_input,
                 time=time
             )
 
@@ -186,8 +186,8 @@
             if not self._validate_state_derivative(state_derivative):
                 return self._create_failure_result(
                     "Invalid state derivative computed",
-                    state=state.copy(),
-                    control_input=control_input.copy(),
+                    state=state,
+                    control_input=control_input,
                     time=time
                 )
 
@@ -197,8 +197,8 @@
 
             return self._create_success_result(
                 state_derivative,
-                state=sanitized_state.copy(),
-                control_input=control_input.copy(),
+                state=sanitized_state,
+                control_input=control_input,
                 time=time,
                 total_energy=self.physics.compute_total_energy(sanitized_state),
                 kinetic_energy=self.physics.compute_kinetic_energy(sanitized_state),
@@ -212,8 +212,8 @@
 
             return self._create_failure_result(
                 f"Numerical instability: {e}",
-                state=state.copy(),
-                control_input=control_input.copy(),
+                state=state,
+                control_input=control_input,
                 time=time,
                 error_type="numerical_instability"
             )
@@ -225,8 +225,8 @@
 
             return self._create_failure_result(
                 f"Dynamics computation failed: {e}",
-                state=state.copy(),
-                control_input=control_input.copy(),
+                state=state,
+                control_input=control_input,
                 time=time,
                 error_type="computation_error"
             )
