{
  "metadata": {
    "total_claims": 519,
    "cited": 26,
    "by_format": {
      "null": 493,
      "bracket": 23,
      "numbered": 3
    },
    "by_scope": {
      "module": 519
    }
  },
  "claims": [
    {
      "id": "CODE-IMPL-001",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Professional analysis framework for control system evaluation and validation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-002",
      "type": "implementation",
      "scope": "module:class:ComparisonResult:function:get_winner",
      "claim_text": "Determine the winning method for a specific metric",
      "algorithm_name": "for a specific",
      "source_attribution": null,
      "file_path": "src\\analysis\\core\\data_structures.py",
      "line_number": 242,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-003",
      "type": "implementation",
      "scope": "module:class:StatisticalValidator:function:validation_methods",
      "claim_text": "List of validation methods supported",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\core\\interfaces.py",
      "line_number": 192,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-004",
      "type": "implementation",
      "scope": "module:class:BaseMetricCalculator",
      "claim_text": "Base implementation of metric calculator with common functionality",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\core\\metrics.py",
      "line_number": 23,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-005",
      "type": "implementation",
      "scope": "module:class:DynamicsProtocol",
      "claim_text": "Protocol defining the expected interface for dynamics models",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi.py",
      "line_number": 13,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-006",
      "type": "implementation",
      "scope": "module:class:FDIsystem",
      "claim_text": "Lightweight, modular Fault Detection and Isolation (FDI) system with",
      "algorithm_name": "to operating conditions",
      "source_attribution": "218697608892619\u2020L682-L687",
      "file_path": "src\\analysis\\fault_detection\\fdi.py",
      "line_number": 36,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-007",
      "type": "implementation",
      "scope": "module:class:FDIsystem:function:check",
      "claim_text": "Check for a fault at the current time step",
      "algorithm_name": "for prediction\n    \nReturns",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi.py",
      "line_number": 171,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-008",
      "type": "implementation",
      "scope": "module:class:FaultDetectionInterface",
      "claim_text": "Protocol defining the interface for fault detection systems",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi.py",
      "line_number": 393,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-009",
      "type": "implementation",
      "scope": "module:class:FaultDetectionInterface:function:check",
      "claim_text": "Check for a fault at the current time step",
      "algorithm_name": "for prediction\n\nReturns",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi.py",
      "line_number": 401,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-010",
      "type": "implementation",
      "scope": "module:function:_verify_interface",
      "claim_text": "Verify that FDIsystem correctly implements FaultDetectionInterface",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi.py",
      "line_number": 426,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-011",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Enhanced fault detection and isolation system",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-012",
      "type": "implementation",
      "scope": "module:class:DetectionMethod",
      "claim_text": "Enumeration of detection methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 36,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-013",
      "type": "implementation",
      "scope": "module:class:EnhancedFaultDetector:function:_detect_outliers",
      "claim_text": "Detect outliers using statistical methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 602,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-014",
      "type": "implementation",
      "scope": "module:class:EnhancedFaultDetector:function:_detect_change_points_statistical",
      "claim_text": "Detect change points using statistical methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 627,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-015",
      "type": "implementation",
      "scope": "module:class:EnhancedFaultDetector:function:_classify_heuristic",
      "claim_text": "Heuristic fault classification based on features",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 834,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-016",
      "type": "implementation",
      "scope": "module:class:EnhancedFaultDetector:function:_compute_statistical_severity",
      "claim_text": "Compute severity based on statistical anomalies",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 875,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-017",
      "type": "implementation",
      "scope": "module:class:FDIsystem:function:check",
      "claim_text": "Check for a fault at the current time step",
      "algorithm_name": "for prediction\n\nReturns",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 1089,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-018",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Model-based residual generation for fault detection",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-019",
      "type": "implementation",
      "scope": "module:class:AdaptiveResidualGenerator",
      "claim_text": "Adaptive residual generator that combines multiple methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 535,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-020",
      "type": "implementation",
      "scope": "module:class:AdaptiveResidualGenerator:function:generate_residual",
      "claim_text": "Generate adaptive residual by combining multiple methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 556,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-021",
      "type": "implementation",
      "scope": "module:function:create_residual_generator",
      "claim_text": "Factory function to create residual generators",
      "algorithm_name": "Returns",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 617,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-022",
      "type": "implementation",
      "scope": "module:class:ResidualGeneratorFactory:function:create_generator",
      "claim_text": "Create a residual generator of the specified type",
      "algorithm_name": "Returns",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 687,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-023",
      "type": "implementation",
      "scope": "module:class:ResidualGeneratorFactory:function:get_available_methods",
      "claim_text": "Get list of available residual generation methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 708,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-024",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive threshold methods for fault detection",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-025",
      "type": "implementation",
      "scope": "module:class:ThresholdAdapter:function:update",
      "claim_text": "Update threshold based on new residual value",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 58,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-026",
      "type": "implementation",
      "scope": "module:class:StatisticalThresholdAdapter",
      "claim_text": "Statistical adaptive threshold based on residual statistics",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 87,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-027",
      "type": "implementation",
      "scope": "module:class:StatisticalThresholdAdapter:function:update",
      "claim_text": "Update threshold using statistical methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 101,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-028",
      "type": "implementation",
      "scope": "module:class:StatisticalThresholdAdapter:function:_compute_statistical_threshold",
      "claim_text": "Compute threshold using statistical methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 119,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-029",
      "type": "implementation",
      "scope": "module:class:StatisticalThresholdAdapter:function:_reject_outliers",
      "claim_text": "Reject outliers using IQR or Z-score method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 152,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-030",
      "type": "implementation",
      "scope": "module:class:AdaptiveThresholdManager",
      "claim_text": "Manager for multiple threshold adapters with different methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 458,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-031",
      "type": "implementation",
      "scope": "module:class:AdaptiveThresholdManager:function:__init__",
      "claim_text": "Initialize adaptive threshold manager",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 461,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-032",
      "type": "implementation",
      "scope": "module:class:AdaptiveThresholdManager:function:_create_adapter",
      "claim_text": "Create adapter for specified method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 480,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-033",
      "type": "implementation",
      "scope": "module:class:AdaptiveThresholdManager:function:update",
      "claim_text": "Update all adapters and return thresholds",
      "algorithm_name": "names and their",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 494,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-034",
      "type": "implementation",
      "scope": "module:class:AdaptiveThresholdManager:function:get_consensus_threshold",
      "claim_text": "Get consensus threshold from all adapters",
      "algorithm_name": "for combining thresholds",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 521,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-035",
      "type": "implementation",
      "scope": "module:function:create_threshold_adapter",
      "claim_text": "Factory function to create threshold adapters",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 601,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-036",
      "type": "implementation",
      "scope": "module:function:create_adaptive_threshold_manager",
      "claim_text": "Factory function to create adaptive threshold manager",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 641,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-037",
      "type": "implementation",
      "scope": "module:class:ThresholdAdapterFactory:function:create_adapter",
      "claim_text": "Create a threshold adapter of the specified type",
      "algorithm_name": "Returns",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 668,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-038",
      "type": "implementation",
      "scope": "module:class:ThresholdAdapterFactory:function:get_available_methods",
      "claim_text": "Get list of available threshold adaptation methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 689,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-039",
      "type": "implementation",
      "scope": "module:class:ThresholdAdapterFactory:function:create_manager",
      "claim_text": "Create an adaptive threshold manager with multiple methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 694,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-040",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Linearisation and controllability/observability analysis utilities",
      "algorithm_name": "of state variables",
      "source_attribution": "920100172589331\u2020L79-L84",
      "file_path": "src\\analysis\\performance\\control_analysis.py",
      "line_number": 1,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-041",
      "type": "implementation",
      "scope": "module:function:controllability_matrix",
      "claim_text": "Construct the controllability matrix of an LTI system",
      "algorithm_name": "equal to ``n``",
      "source_attribution": "920100172589331\u2020L79-L84",
      "file_path": "src\\analysis\\performance\\control_analysis.py",
      "line_number": 49,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-042",
      "type": "implementation",
      "scope": "module:function:observability_matrix",
      "claim_text": "Construct the observability matrix of an LTI system",
      "algorithm_name": "equal to ``n``",
      "source_attribution": "920100172589331\u2020L79-L84",
      "file_path": "src\\analysis\\performance\\control_analysis.py",
      "line_number": 76,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-043",
      "type": "implementation",
      "scope": "module:function:check_controllability_observability",
      "claim_text": "Check controllability and observability of an LTI system",
      "algorithm_name": "rank test passes",
      "source_attribution": "920100172589331\u2020L79-L84",
      "file_path": "src\\analysis\\performance\\control_analysis.py",
      "line_number": 141,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-044",
      "type": "implementation",
      "scope": "module:class:StabilityAnalyzer:function:_analyze_analytical_lyapunov",
      "claim_text": "Analyze Lyapunov stability analytically with robust numerical methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\performance\\stability_analysis.py",
      "line_number": 678,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-045",
      "type": "implementation",
      "scope": "module:class:StabilityAnalyzer:function:_solve_lyapunov_svd",
      "claim_text": "Solve Lyapunov equation using SVD-based robust method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\performance\\stability_analysis.py",
      "line_number": 796,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-046",
      "type": "implementation",
      "scope": "module:class:StabilityAnalyzer:function:_estimate_largest_lyapunov_exponent",
      "claim_text": "Estimate largest Lyapunov exponent (simplified method)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\performance\\stability_analysis.py",
      "line_number": 852,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-047",
      "type": "implementation",
      "scope": "module:class:StabilityAnalyzer:function:_compute_stability_index",
      "claim_text": "Compute stability index based on variance growth",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\performance\\stability_analysis.py",
      "line_number": 877,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-048",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Benchmarking and comparison tools for analysis validation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-049",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:validation_methods",
      "claim_text": "List of validation methods supported",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 79,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-050",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:validate",
      "claim_text": "Perform comprehensive benchmarking analysis",
      "algorithm_name": "for comparison\n\nReturns",
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 90,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-051",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_run_simulation_benchmarks",
      "claim_text": "Run simulation benchmarks for all methods and test cases",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 181,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-052",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_run_method_trials",
      "claim_text": "Run multiple trials for a single method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 201,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-053",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_perform_performance_comparison",
      "claim_text": "Perform performance comparison between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 364,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-054",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_perform_robustness_comparison",
      "claim_text": "Perform robustness comparison between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 401,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-055",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_perform_significance_testing",
      "claim_text": "Perform statistical significance testing between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 455,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-056",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_perform_effect_size_analysis",
      "claim_text": "Perform effect size analysis between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 493,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-057",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_extract_method_performance",
      "claim_text": "Extract method performance data from results",
      "algorithm_name": "performance data from",
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 565,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-058",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_compare_two_methods",
      "claim_text": "Compare two methods on a single metric",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 588,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-059",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_rank_methods_by_performance",
      "claim_text": "Rank methods by performance on primary metric",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 621,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-060",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_perform_statistical_test",
      "claim_text": "Perform statistical test between two methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 636,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-061",
      "type": "implementation",
      "scope": "module:class:TrialBatch",
      "claim_text": "Collection of trial results with analysis methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\core.py",
      "line_number": 89,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-062",
      "type": "implementation",
      "scope": "module:function:run_multiple_trials",
      "claim_text": "Run multiple trials according to configuration",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\core.py",
      "line_number": 246,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-063",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Cross-validation methods for analysis validation and model selection",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\cross_validation.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-064",
      "type": "implementation",
      "scope": "module:class:CrossValidationConfig",
      "claim_text": "Configuration for cross-validation methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\cross_validation.py",
      "line_number": 92,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-065",
      "type": "implementation",
      "scope": "module:class:CrossValidator:function:validation_methods",
      "claim_text": "List of validation methods supported",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\cross_validation.py",
      "line_number": 141,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-066",
      "type": "implementation",
      "scope": "module:class:CrossValidator:function:_get_cv_splitter",
      "claim_text": "Get cross-validation splitter based on configuration",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\cross_validation.py",
      "line_number": 317,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-067",
      "type": "implementation",
      "scope": "module:class:MonteCarloAnalyzer:function:validation_methods",
      "claim_text": "List of validation methods supported",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\monte_carlo.py",
      "line_number": 84,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-068",
      "type": "implementation",
      "scope": "module:class:MonteCarloAnalyzer:function:_generate_parameter_samples",
      "claim_text": "Generate parameter samples according to specified distributions",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\monte_carlo.py",
      "line_number": 197,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-069",
      "type": "implementation",
      "scope": "module:class:MonteCarloAnalyzer:function:_sobol_sampling",
      "claim_text": "Sobol sequence sampling (simplified implementation)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\monte_carlo.py",
      "line_number": 260,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-070",
      "type": "implementation",
      "scope": "module:class:MonteCarloAnalyzer:function:_analyze_data_with_monte_carlo",
      "claim_text": "Analyze existing data using Monte Carlo methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\monte_carlo.py",
      "line_number": 552,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-071",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Statistical benchmarking utilities for the Double Inverted Pendulum project",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistical_benchmarks.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-072",
      "type": "implementation",
      "scope": "module:function:compute_metrics",
      "claim_text": "Compute performance metrics for a batch of trajectories",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistical_benchmarks.py",
      "line_number": 147,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-073",
      "type": "implementation",
      "scope": "module:function:run_trials",
      "claim_text": "Run multiple simulations and return per\u2011trial metrics with confidence intervals",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistical_benchmarks.py",
      "line_number": 185,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-074",
      "type": "implementation",
      "scope": "module:function:run_trials_with_advanced_statistics",
      "claim_text": "use bootstrap confidence intervals\n**kwargs :\n    Additional arguments passed to trial runner\n\nReturns\n-------\nlist of dict, dict",
      "algorithm_name": "bootstrap confidence intervals\n**kwargs :\n    Additional arguments passed to trial runner\n\nReturns\n-------\nlist",
      "source_attribution": "dict, dict",
      "file_path": "src\\analysis\\validation\\statistical_benchmarks.py",
      "line_number": 257,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-075",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Statistical testing framework for analysis validation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistical_tests.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-076",
      "type": "implementation",
      "scope": "module:class:StatisticalTestSuite:function:validation_methods",
      "claim_text": "List of validation methods supported",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistical_tests.py",
      "line_number": 81,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-077",
      "type": "implementation",
      "scope": "module:function:correlation_analysis",
      "claim_text": "Compute correlation between two variables",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistics.py",
      "line_number": 236,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-078",
      "type": "implementation",
      "scope": "module:function:normality_test",
      "claim_text": "Test for normality using multiple methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistics.py",
      "line_number": 287,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-079",
      "type": "implementation",
      "scope": "module:function:outlier_detection",
      "claim_text": "Detect outliers in data",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistics.py",
      "line_number": 346,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-080",
      "type": "implementation",
      "scope": "module:class:AnalysisPlotter:function:_plot_metric_comparison",
      "claim_text": "Plot metric comparison between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\visualization\\analysis_plots.py",
      "line_number": 428,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-081",
      "type": "implementation",
      "scope": "module:class:AnalysisPlotter:function:_extract_comparison_data",
      "claim_text": "Extract comparison data between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\visualization\\analysis_plots.py",
      "line_number": 800,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-082",
      "type": "implementation",
      "scope": "module:class:StatisticalPlotter:function:plot_correlation_matrix",
      "claim_text": "Create correlation matrix heatmap",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\visualization\\statistical_plots.py",
      "line_number": 376,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-083",
      "type": "implementation",
      "scope": "module:class:StatisticalPlotter:function:plot_convergence_analysis",
      "claim_text": "Plot convergence behavior of iterative algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\visualization\\statistical_plots.py",
      "line_number": 439,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-084",
      "type": "implementation",
      "scope": "module",
      "claim_text": "implements the trial execution logic for running multiple\nindependent simulations of control systems",
      "algorithm_name": "the trial execution logic for running multiple\nindependent simulations",
      "source_attribution": "control systems",
      "file_path": "src\\benchmarks\\core\\trial_runner.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-085",
      "type": "implementation",
      "scope": "module:function:execute_single_trial",
      "claim_text": "use default from simulator",
      "algorithm_name": "default",
      "source_attribution": "simulator",
      "file_path": "src\\benchmarks\\core\\trial_runner.py",
      "line_number": 29,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-086",
      "type": "implementation",
      "scope": "module:function:run_multiple_trials",
      "claim_text": "Execute multiple independent simulation trials",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\benchmarks\\core\\trial_runner.py",
      "line_number": 105,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-087",
      "type": "implementation",
      "scope": "module:function:compute_basic_metrics",
      "claim_text": "Compute the basic metrics from original statistical_benchmarks",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\benchmarks\\metrics\\__init__.py",
      "line_number": 69,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-088",
      "type": "implementation",
      "scope": "module",
      "claim_text": "implements metrics that quantify constraint violations in\ncontrol systems",
      "algorithm_name": "metrics that quantify constraint violations",
      "source_attribution": "control systems",
      "file_path": "src\\benchmarks\\metrics\\constraint_metrics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-089",
      "type": "implementation",
      "scope": "module",
      "claim_text": "derived from classical control theory and provide quantitative measures\nof system performance",
      "algorithm_name": "classical control theory and provide quantitative measures",
      "source_attribution": "system performance",
      "file_path": "src\\benchmarks\\metrics\\control_metrics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-090",
      "type": "implementation",
      "scope": "module",
      "claim_text": "implements metrics that characterize the stability and\ntransient behavior of controlled systems",
      "algorithm_name": "metrics that characterize the stability and\ntransient behavior",
      "source_attribution": "controlled systems",
      "file_path": "src\\benchmarks\\metrics\\stability_metrics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-091",
      "type": "implementation",
      "scope": "module:function:compute_overshoot",
      "claim_text": "Compute maximum overshoot across specified state variables",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\benchmarks\\metrics\\stability_metrics.py",
      "line_number": 22,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-092",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Statistical benchmarking utilities for the Double Inverted Pendulum project",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\benchmarks\\statistical_benchmarks_v2.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-093",
      "type": "implementation",
      "scope": "module:function:compute_metrics",
      "claim_text": "Compute performance metrics for a batch of trajectories",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\benchmarks\\statistical_benchmarks_v2.py",
      "line_number": 40,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-094",
      "type": "implementation",
      "scope": "module:function:run_trials",
      "claim_text": "Run multiple simulations and return per\u2011trial metrics with confidence intervals",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\benchmarks\\statistical_benchmarks_v2.py",
      "line_number": 78,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-095",
      "type": "implementation",
      "scope": "module:function:run_trials_with_advanced_statistics",
      "claim_text": "use bootstrap confidence intervals\n**kwargs :\n    Additional arguments passed to trial runner\n\nReturns\n-------\nlist of dict, dict",
      "algorithm_name": "bootstrap confidence intervals\n**kwargs :\n    Additional arguments passed to trial runner\n\nReturns\n-------\nlist",
      "source_attribution": "dict, dict",
      "file_path": "src\\benchmarks\\statistical_benchmarks_v2.py",
      "line_number": 150,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-096",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Statistical analysis package for control system benchmarking",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\benchmarks\\statistics\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-097",
      "type": "implementation",
      "scope": "module",
      "claim_text": "implements statistical methods for analyzing performance metrics\ncollected from multiple simulation trials",
      "algorithm_name": "statistical methods for analyzing performance metrics\ncollected",
      "source_attribution": "multiple simulation trials",
      "file_path": "src\\benchmarks\\statistics\\confidence_intervals.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-098",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Centralised logging configuration with provenance stamping",
      "algorithm_name": "satisfying reproducibility guidelines",
      "source_attribution": "985132039892507\u2020L364-L377",
      "file_path": "src\\config\\logging.py",
      "line_number": 1,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-099",
      "type": "implementation",
      "scope": "module:function:configure_provenance_logging",
      "claim_text": "Configure the root logger with provenance stamping",
      "algorithm_name": "be reproduced exactly",
      "source_attribution": "985132039892507\u2020L364-L377",
      "file_path": "src\\config\\logging.py",
      "line_number": 116,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-100",
      "type": "implementation",
      "scope": "module:class:STASMCConfig",
      "claim_text": "Configuration for Super-Twisting Algorithm Sliding Mode Controller",
      "algorithm_name": "Sliding Mode Controller",
      "source_attribution": null,
      "file_path": "src\\config\\schemas.py",
      "line_number": 179,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-101",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Compatibility import for Adaptive SMC controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\adaptive_smc.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-102",
      "type": "implementation",
      "scope": "module:function:require_positive",
      "claim_text": "Validate that a numeric value is positive (or non\u2011negative)",
      "algorithm_name": "adaptive control laws",
      "source_attribution": "462167782799487\u2020L186-L195",
      "file_path": "src\\controllers\\base\\control_primitives.py",
      "line_number": 14,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-103",
      "type": "implementation",
      "scope": "module:function:require_in_range",
      "claim_text": "Validate that a numeric value lies within a closed or open interval",
      "algorithm_name": "to ensure stability",
      "source_attribution": "462167782799487\u2020L186-L195",
      "file_path": "src\\controllers\\base\\control_primitives.py",
      "line_number": 62,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-104",
      "type": "implementation",
      "scope": "module:function:saturate",
      "claim_text": "based on the\nexpected amplitude of measurement noise and the desired steady\u2011state",
      "algorithm_name": "the\nexpected amplitude",
      "source_attribution": "measurement noise and the desired steady\u2011state",
      "file_path": "src\\controllers\\base\\control_primitives.py",
      "line_number": 110,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.8
    },
    {
      "id": "CODE-IMPL-105",
      "type": "implementation",
      "scope": "module:class:ControllerInterface",
      "claim_text": "Abstract base class for all controllers in the DIP system",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\base\\controller_interface.py",
      "line_number": 12,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-106",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Use the clean SMC factory for new code\n    from controllers",
      "algorithm_name": "the clean SMC factory for new code",
      "source_attribution": "controllers",
      "file_path": "src\\controllers\\factory\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-107",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Use legacy factory only for backward compatibility\n    from controllers",
      "algorithm_name": "legacy factory only for backward compatibility",
      "source_attribution": "controllers",
      "file_path": "src\\controllers\\factory\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-108",
      "type": "implementation",
      "scope": "module:function:_as_dict",
      "claim_text": "Convert an object to dictionary representation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory\\__init__.py",
      "line_number": 167,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-109",
      "type": "implementation",
      "scope": "module:class:DeadlockDetector",
      "claim_text": "Simple deadlock detection based on lock wait times and thread states",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory\\core\\threading.py",
      "line_number": 180,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-110",
      "type": "implementation",
      "scope": "module:class:ControllerDeprecationWarner:function:_issue_deprecation_warning",
      "claim_text": "Issue appropriate deprecation warning based on severity level",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory\\deprecation.py",
      "line_number": 169,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-111",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Fallback configuration classes for SMC controllers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory\\fallback_configs.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-112",
      "type": "implementation",
      "scope": "module:function:get_optimized_pso_bounds",
      "claim_text": "Get optimized PSO bounds based on performance targets",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory\\pso_integration.py",
      "line_number": 377,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-113",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Enterprise Controller Factory - Production-Ready Controller Instantiation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-114",
      "type": "implementation",
      "scope": "module:class:PSOControllerWrapper:function:_add_step_method_to_dynamics",
      "claim_text": "Add step method to dynamics model for simulation compatibility",
      "algorithm_name": "to dynamics model",
      "source_attribution": null,
      "file_path": "src\\controllers\\factory.py",
      "line_number": 974,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-115",
      "type": "implementation",
      "scope": "module:function:_call_f",
      "claim_text": "Robustly call continuous\u2011time dynamics: xdot = f(x,u)",
      "algorithm_name": "names",
      "source_attribution": null,
      "file_path": "src\\controllers\\mpc\\mpc_controller.py",
      "line_number": 41,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-116",
      "type": "implementation",
      "scope": "module:function:_numeric_linearize_continuous",
      "claim_text": "Finite\u2011difference linearization around (x_eq, u_eq) using a central",
      "algorithm_name": "one\u2011sided (forward) differences",
      "source_attribution": "738473614585036\u2020L239-L256",
      "file_path": "src\\controllers\\mpc\\mpc_controller.py",
      "line_number": 72,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-117",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Compatibility import for MPC controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\mpc_controller.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-118",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Sliding Mode Controllers for the double inverted pendulum system",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-119",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive sliding\u2011mode controller with online gain adaptation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\adaptive_smc.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-120",
      "type": "implementation",
      "scope": "module:class:AdaptiveSMC:function:validate_gains",
      "claim_text": "Validate that a suitable gain sequence has been provided",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\adaptive_smc.py",
      "line_number": 215,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-121",
      "type": "implementation",
      "scope": "module:class:AdaptiveSMC:function:compute_control",
      "claim_text": "use named tuples are\n    subclasses of ``tuple``",
      "algorithm_name": "named tuples are\n    subclasses",
      "source_attribution": "``tuple``",
      "file_path": "src\\controllers\\smc\\adaptive_smc.py",
      "line_number": 263,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-122",
      "type": "implementation",
      "scope": "module:class:AdaptiveSMC:function:set_dynamics",
      "claim_text": "Set dynamics model (for compatibility, not used in this implementation)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\adaptive_smc.py",
      "line_number": 427,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-123",
      "type": "implementation",
      "scope": "module",
      "claim_text": "SMC Algorithms Package",
      "algorithm_name": "is split into",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-124",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive SMC Algorithm Package",
      "algorithm_name": "Package",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-125",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive Gain Update Laws for Adaptive SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\adaptation_law.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-126",
      "type": "implementation",
      "scope": "module:class:AdaptationLaw",
      "claim_text": "Online gain adaptation for Adaptive SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\adaptation_law.py",
      "line_number": 21,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-127",
      "type": "implementation",
      "scope": "module:class:AdaptationLaw:function:update_gain",
      "claim_text": "Update adaptive gain using adaptation law",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\adaptation_law.py",
      "line_number": 83,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-128",
      "type": "implementation",
      "scope": "module:class:AdaptiveSMCConfig",
      "claim_text": "Type-safe configuration for Adaptive SMC controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\config.py",
      "line_number": 18,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-129",
      "type": "implementation",
      "scope": "module:class:AdaptiveSMCConfig:function:_validate_gains",
      "claim_text": "Validate gain vector according to adaptive SMC theory",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\config.py",
      "line_number": 52,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-130",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Implements Adaptive Sliding Mode Control using composed components:\n- LinearSlidingSurface: Surface computation\n- AdaptationLaw: Online gain adjustment\n- UncertaintyEstimator: Disturbance bound estimation\n- SwitchingFunction: Smooth chattering reduction\n\nReplaces the monolithic 427-line controller with composition of focused modules",
      "algorithm_name": "Adaptive Sliding Mode Control using composed components:\n- LinearSlidingSurface: Surface computation\n- AdaptationLaw: Online gain adjustment\n- UncertaintyEstimator: Disturbance bound estimation\n- SwitchingFunction: Smooth chattering reduction\n\nReplaces the monolithic 427-line controller with composition",
      "source_attribution": "focused modules",
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\controller.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-131",
      "type": "implementation",
      "scope": "module:class:ModularAdaptiveSMC:function:compute_control",
      "claim_text": "Compute adaptive SMC control law",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\controller.py",
      "line_number": 76,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-132",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Implements online estimation of system uncertainties and disturbance bounds",
      "algorithm_name": "online estimation",
      "source_attribution": "system uncertainties and disturbance bounds",
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\parameter_estimation.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-133",
      "type": "implementation",
      "scope": "module:class:UncertaintyEstimator:function:update_estimate",
      "claim_text": "Update uncertainty estimate based on sliding surface behavior",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\parameter_estimation.py",
      "line_number": 64,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-134",
      "type": "implementation",
      "scope": "module:class:UncertaintyEstimator:function:update_estimates",
      "claim_text": "Compatibility method for tests - maps to update_estimate with surface derivative",
      "algorithm_name": "for tests",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\parameter_estimation.py",
      "line_number": 181,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-135",
      "type": "implementation",
      "scope": "module:class:ParameterIdentifier:function:update_parameters",
      "claim_text": "Update parameter estimates using RLS algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\parameter_estimation.py",
      "line_number": 250,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-136",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Classical SMC Algorithm Package",
      "algorithm_name": "Package",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-137",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Implements boundary layer method for chattering reduction in sliding mode control",
      "algorithm_name": "boundary layer method for chattering reduction",
      "source_attribution": "sliding mode control",
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\boundary_layer.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-138",
      "type": "implementation",
      "scope": "module:class:BoundaryLayer",
      "claim_text": "Boundary layer implementation for chattering reduction",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\boundary_layer.py",
      "line_number": 23,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-139",
      "type": "implementation",
      "scope": "module:class:BoundaryLayer:function:__init__",
      "claim_text": "Initialize boundary layer",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\boundary_layer.py",
      "line_number": 31,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-140",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Configuration Schema for Classical SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\config.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-141",
      "type": "implementation",
      "scope": "module:class:ClassicalSMCConfig",
      "claim_text": "Type-safe configuration for Classical SMC controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\config.py",
      "line_number": 19,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-142",
      "type": "implementation",
      "scope": "module:class:ClassicalSMCConfig:function:_validate_gains",
      "claim_text": "Validate gain vector according to SMC theory",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\config.py",
      "line_number": 56,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-143",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Modular Classical SMC Controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\controller.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-144",
      "type": "implementation",
      "scope": "module",
      "claim_text": "implementation of Hybrid Sliding Mode Control that intelligently\nswitches between multiple SMC algorithms based on system conditions:\n\n- Controller: Main orchestration with intelligent switching\n- SwitchingLogic: Decision-making logic for controller selection\n- Configuration: Type-safe parameter configuration for hybrid operation\n\nThis provides optimal performance by selecting the most appropriate SMC algorithm",
      "algorithm_name": "Hybrid Sliding Mode Control that intelligently\nswitches between multiple SMC algorithms based on system conditions:\n\n- Controller: Main orchestration with intelligent switching\n- SwitchingLogic: Decision-making logic for controller selection\n- Configuration: Type-safe parameter configuration for hybrid operation\n\nThis provides optimal performance",
      "source_attribution": "selecting the most appropriate SMC algorithm",
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-145",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Configuration Schema for Hybrid SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\config.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-146",
      "type": "implementation",
      "scope": "module:class:HybridSMCConfig:function:get_active_controllers",
      "claim_text": "Get list of active controller types based on hybrid mode",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\config.py",
      "line_number": 216,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-147",
      "type": "implementation",
      "scope": "module:class:HybridSMCConfig:function:is_switching_allowed",
      "claim_text": "Check if switching is allowed based on minimum switching time",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\config.py",
      "line_number": 255,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-148",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Modular Hybrid SMC Controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\controller.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-149",
      "type": "implementation",
      "scope": "module:class:ModularHybridSMC",
      "claim_text": "Modular Hybrid SMC using intelligent switching between multiple controllers",
      "algorithm_name": "based on current",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\controller.py",
      "line_number": 66,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-150",
      "type": "implementation",
      "scope": "module:class:ModularHybridSMC:function:_initialize_controllers",
      "claim_text": "Initialize individual SMC controllers based on hybrid mode",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\controller.py",
      "line_number": 112,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-151",
      "type": "implementation",
      "scope": "module:class:ModularHybridSMC:function:compute_control",
      "claim_text": "Compute hybrid SMC control law",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\controller.py",
      "line_number": 140,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-152",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Hybrid Switching Logic for Multi-Controller SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-153",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic",
      "claim_text": "Intelligent switching logic for hybrid SMC controllers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 47,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-154",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_surface_magnitude_switching",
      "claim_text": "Evaluate switching based on sliding surface magnitude",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 210,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-155",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_control_effort_switching",
      "claim_text": "Evaluate switching based on control effort",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 265,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-156",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_tracking_error_switching",
      "claim_text": "Evaluate switching based on tracking error",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 291,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-157",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_adaptation_rate_switching",
      "claim_text": "Evaluate switching based on adaptation rate (for adaptive controllers)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 319,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-158",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_performance_index_switching",
      "claim_text": "Evaluate switching based on comprehensive performance index",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 343,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-159",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_time_based_switching",
      "claim_text": "Evaluate switching based on time (round-robin or scheduled switching)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 381,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-160",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_update_learned_thresholds",
      "claim_text": "Update learned switching thresholds based on decision outcomes",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 436,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-161",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Super-Twisting SMC Algorithm Package",
      "algorithm_name": "Package",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-162",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Configuration Schema for Super-Twisting SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\config.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-163",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMCConfig",
      "claim_text": "Type-safe configuration for Super-Twisting SMC controller",
      "algorithm_name": "theory",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\config.py",
      "line_number": 23,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-164",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMCConfig:function:_validate_gains",
      "claim_text": "Validate gain vector according to Super-Twisting theory",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\config.py",
      "line_number": 62,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-165",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Modular Super-Twisting SMC Controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\controller.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-166",
      "type": "implementation",
      "scope": "module:class:ModularSuperTwistingSMC:function:compute_control",
      "claim_text": "Compute Super-Twisting SMC control law",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\controller.py",
      "line_number": 71,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-167",
      "type": "implementation",
      "scope": "module:class:ModularSuperTwistingSMC:function:validate_gains",
      "claim_text": "Vectorized feasibility check for super\u2011twisting SMC gains",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\controller.py",
      "line_number": 248,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-168",
      "type": "implementation",
      "scope": "module:class:ModularSuperTwistingSMC:function:reset",
      "claim_text": "Reset controller state (interface compliance)",
      "algorithm_name": "interface for compatibility",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\controller.py",
      "line_number": 315,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-169",
      "type": "implementation",
      "scope": "module:class:ModularSuperTwistingSMC:function:get_convergence_estimate",
      "claim_text": "Estimate convergence properties",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\controller.py",
      "line_number": 375,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-170",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Super-Twisting Algorithm Implementation",
      "algorithm_name": "Implementation",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-171",
      "type": "implementation",
      "scope": "module:class:SuperTwistingAlgorithm",
      "claim_text": "Core Super-Twisting sliding mode algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 23,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-172",
      "type": "implementation",
      "scope": "module:class:SuperTwistingAlgorithm:function:__init__",
      "claim_text": "Initialize Super-Twisting algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 32,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-173",
      "type": "implementation",
      "scope": "module:class:SuperTwistingAlgorithm:function:_compute_switching_function",
      "claim_text": "Compute switching function sign(s) with smooth approximation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 121,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-174",
      "type": "implementation",
      "scope": "module:class:SuperTwistingAlgorithm:function:reset_state",
      "claim_text": "Reset algorithm internal state",
      "algorithm_name": "internal state",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 146,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-175",
      "type": "implementation",
      "scope": "module:class:SuperTwistingAlgorithm:function:get_state_dict",
      "claim_text": "Get current algorithm state for logging/debugging",
      "algorithm_name": "state for logging",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 271,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-176",
      "type": "implementation",
      "scope": "module:class:ClassicalSMC",
      "claim_text": "implements the conventional first\u2011order sliding\u2011mode law\nconsisting of a model\u2011based equivalent control ``u_eq`` and a robust",
      "algorithm_name": "the conventional first\u2011order sliding\u2011mode law\nconsisting",
      "source_attribution": "a model\u2011based equivalent control ``u_eq`` and a robust",
      "file_path": "src\\controllers\\smc\\classic_smc.py",
      "line_number": 21,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.8
    },
    {
      "id": "CODE-IMPL-177",
      "type": "implementation",
      "scope": "module:class:ClassicalSMC",
      "claim_text": "uses a continuous approximation to\nthe sign function (either a hyperbolic tangent or a piecewise\u2011linear\nsaturation) within a boundary layer of width ``epsilon`` to attenuate",
      "algorithm_name": "a continuous approximation to\nthe sign function (either a hyperbolic tangent or a piecewise\u2011linear\nsaturation) within a boundary layer",
      "source_attribution": "width ``epsilon`` to attenuate",
      "file_path": "src\\controllers\\smc\\classic_smc.py",
      "line_number": 21,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.8
    },
    {
      "id": "CODE-IMPL-178",
      "type": "implementation",
      "scope": "module:class:ClassicalSMC:function:validate_gains",
      "claim_text": "uses six gains in the order",
      "algorithm_name": "six gains",
      "source_attribution": "the order",
      "file_path": "src\\controllers\\smc\\classic_smc.py",
      "line_number": 282,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-179",
      "type": "implementation",
      "scope": "module:class:ClassicalSMC:function:compute_control",
      "claim_text": "Compute the control input for the classical SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\classic_smc.py",
      "line_number": 413,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-180",
      "type": "implementation",
      "scope": "module:class:ClassicalSMC:function:reset",
      "claim_text": "Reset ClassicalSMC controller state",
      "algorithm_name": "is provided for",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\classic_smc.py",
      "line_number": 488,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-181",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Equivalent Control Computation for SMC Controllers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\equivalent_control.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-182",
      "type": "implementation",
      "scope": "module:class:EquivalentControl:function:__init__",
      "claim_text": "Initialize equivalent control computation",
      "algorithm_name": "regularization_alpha",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\equivalent_control.py",
      "line_number": 35,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-183",
      "type": "implementation",
      "scope": "module:class:SMCGainValidator",
      "claim_text": "Centralized gain validation for all SMC controller types",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\gain_validation.py",
      "line_number": 45,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-184",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Sliding Surface Calculations for SMC Controllers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\sliding_surface.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-185",
      "type": "implementation",
      "scope": "module:class:LinearSlidingSurface",
      "claim_text": "Linear sliding surface for conventional SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\sliding_surface.py",
      "line_number": 46,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-186",
      "type": "implementation",
      "scope": "module:class:LinearSlidingSurface:function:compute_surface",
      "claim_text": "Compatibility method for test interface - alias for compute()",
      "algorithm_name": "for test interface",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\sliding_surface.py",
      "line_number": 132,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-187",
      "type": "implementation",
      "scope": "module:class:HigherOrderSlidingSurface",
      "claim_text": "Higher-order sliding surface for Super-Twisting and advanced SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\sliding_surface.py",
      "line_number": 180,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-188",
      "type": "implementation",
      "scope": "module:class:HigherOrderSlidingSurface:function:compute",
      "claim_text": "Compute higher-order sliding surface (simplified implementation)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\sliding_surface.py",
      "line_number": 213,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-189",
      "type": "implementation",
      "scope": "module:class:SwitchingMethod",
      "claim_text": "Available switching function methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 22,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-190",
      "type": "implementation",
      "scope": "module:class:SwitchingFunction:function:__init__",
      "claim_text": "Initialize switching function",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 38,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-191",
      "type": "implementation",
      "scope": "module:class:SwitchingFunction:function:_get_switching_function",
      "claim_text": "Get the appropriate switching function implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 56,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-192",
      "type": "implementation",
      "scope": "module:class:SwitchingFunction:function:_sign_switching",
      "claim_text": "uses chattering in practice",
      "algorithm_name": "chattering",
      "source_attribution": "practice",
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 148,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-193",
      "type": "implementation",
      "scope": "module:class:SwitchingFunction:function:get_derivative",
      "claim_text": "Compute derivative of switching function",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 199,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-194",
      "type": "implementation",
      "scope": "module:function:tanh_switching",
      "claim_text": "Hyperbolic tangent switching function with optimized slope",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 229,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-195",
      "type": "implementation",
      "scope": "module:function:sign_switching",
      "claim_text": "uses chattering in real systems",
      "algorithm_name": "chattering",
      "source_attribution": "real systems",
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 270,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-196",
      "type": "implementation",
      "scope": "module:function:adaptive_boundary_layer",
      "claim_text": "Adaptive boundary layer thickness based on surface derivative",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 297,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-197",
      "type": "implementation",
      "scope": "module:class:HybridAdaptiveSTASMC",
      "claim_text": "Hybrid Adaptive Super\u2013Twisting SMC for a double\u2011inverted pendulum",
      "algorithm_name": "simplifies stability proofs",
      "source_attribution": "895515998216162\u2020L326-L329",
      "file_path": "src\\controllers\\smc\\hybrid_adaptive_sta_smc.py",
      "line_number": 26,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-198",
      "type": "implementation",
      "scope": "module:class:HybridAdaptiveSTASMC:function:_compute_taper_factor",
      "claim_text": "Compute tapering factor for adaptive gain growth",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\hybrid_adaptive_sta_smc.py",
      "line_number": 385,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-199",
      "type": "implementation",
      "scope": "module:class:HybridAdaptiveSTASMC:function:_compute_sliding_surface",
      "claim_text": "Compute the sliding surface value s",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\hybrid_adaptive_sta_smc.py",
      "line_number": 397,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-200",
      "type": "implementation",
      "scope": "module:class:HybridAdaptiveSTASMC:function:_compute_equivalent_control",
      "claim_text": "Compute an approximate equivalent control based on the system",
      "algorithm_name": "is nearly singular",
      "source_attribution": "385796022798831\u2020L145-L149",
      "file_path": "src\\controllers\\smc\\hybrid_adaptive_sta_smc.py",
      "line_number": 442,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-201",
      "type": "implementation",
      "scope": "module:function:_sta_smc_control_numba",
      "claim_text": "Numba\u2011accelerated core of the Super\u2011Twisting SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 35,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-202",
      "type": "implementation",
      "scope": "module:function:_sta_smc_core",
      "claim_text": "Numba-accelerated core using precomputed sigma and its saturated sign",
      "algorithm_name": "multiplied by ``Kaw``",
      "source_attribution": "789743582768797\u2020L224-L249",
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 89,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-203",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMC",
      "claim_text": "uses a continuous saturation function within a boundary\n layer ``\u03b5`` to approximate the sign of the sliding variable \u03c3,",
      "algorithm_name": "a continuous saturation function within a boundary\n layer ``\u03b5`` to approximate the sign",
      "source_attribution": "the sliding variable \u03c3,",
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 129,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.8
    },
    {
      "id": "CODE-IMPL-204",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMC:function:__init__",
      "claim_text": "Initialize a Super\u2011Twisting Sliding Mode Controller",
      "algorithm_name": "for saturated sign",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 195,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-205",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMC:function:validate_gains",
      "claim_text": "use the sliding surface is a linear combination of state",
      "algorithm_name": "the sliding surface is a linear combination",
      "source_attribution": "state",
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 391,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-206",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMC:function:gains",
      "claim_text": "Return a copy of the gains used to configure this controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 438,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-207",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMC:function:_compute_equivalent_control",
      "claim_text": "Compute the model\u2011based equivalent control ``u_eq`` using Tikhonov regularisation",
      "algorithm_name": "in control\nliterature",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 513,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-208",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Compatibility import for Super-Twisting SMC controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\sta_smc.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-209",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Swing-up SMC controller compatibility module",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\swing_up_smc.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-210",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Compatibility import module for vector simulation functionality",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\core\\vector_sim.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-211",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Compatibility import for fault detection system",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\fault_detection\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-212",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Compatibility import for fault detection and isolation system",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\fault_detection\\fdi.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-213",
      "type": "implementation",
      "scope": "module:class:CompatibilityMatrix:function:_estimate_domain_test_coverage",
      "claim_text": "Estimate test coverage for a domain (simplified implementation)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\compatibility_matrix.py",
      "line_number": 315,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-214",
      "type": "implementation",
      "scope": "module:class:CompatibilityMatrix:function:_assess_production_readiness",
      "claim_text": "Assess overall production readiness based on compatibility analysis",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\compatibility_matrix.py",
      "line_number": 637,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-215",
      "type": "implementation",
      "scope": "module:class:CompatibilityMatrix:function:_get_production_recommendation",
      "claim_text": "Get production recommendation based on status",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\compatibility_matrix.py",
      "line_number": 662,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-216",
      "type": "implementation",
      "scope": "module:function:asdict",
      "claim_text": "Convert dataclass to dictionary (simplified implementation)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\compatibility_matrix.py",
      "line_number": 672,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-217",
      "type": "implementation",
      "scope": "module:class:ProductionReadinessScorer:function:_calculate_testing_score",
      "claim_text": "Calculate testing component score based on pytest results",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\production_readiness.py",
      "line_number": 328,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-218",
      "type": "implementation",
      "scope": "module:class:ProductionReadinessScorer:function:_determine_readiness_level",
      "claim_text": "Determine production readiness level based on score and gate status",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\production_readiness.py",
      "line_number": 542,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-219",
      "type": "implementation",
      "scope": "module:class:ProductionReadinessScorer:function:_analyze_improvement_trend",
      "claim_text": "Analyze improvement trend based on historical data",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\integration\\production_readiness.py",
      "line_number": 617,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-220",
      "type": "implementation",
      "scope": "module:class:CompressionType",
      "claim_text": "Compression algorithm types",
      "algorithm_name": "types",
      "source_attribution": null,
      "file_path": "src\\interfaces\\data_exchange\\data_types.py",
      "line_number": 42,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-221",
      "type": "implementation",
      "scope": "module:class:DataMessage:function:is_expired",
      "claim_text": "Check if message has expired based on TTL",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\data_exchange\\data_types.py",
      "line_number": 170,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-222",
      "type": "implementation",
      "scope": "module:class:SerializerFactory:function:auto_select_serializer",
      "claim_text": "Automatically select best serializer based on data analysis",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\data_exchange\\factory.py",
      "line_number": 100,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-223",
      "type": "implementation",
      "scope": "module:class:SerializerFactory:function:_create_serializer_impl",
      "claim_text": "Internal serializer creation implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\data_exchange\\factory.py",
      "line_number": 156,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-224",
      "type": "implementation",
      "scope": "module",
      "claim_text": "RESILIENT Factory for serializers and data exchange components",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\data_exchange\\factory_resilient.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-225",
      "type": "implementation",
      "scope": "module:class:ResilientSerializerFactory:function:_create_serializer_impl",
      "claim_text": "Implementation of serializer creation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\data_exchange\\factory_resilient.py",
      "line_number": 247,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-226",
      "type": "implementation",
      "scope": "module:class:DataSchema:function:is_valid",
      "claim_text": "Check if data is valid according to this schema",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\data_exchange\\schemas.py",
      "line_number": 416,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-227",
      "type": "implementation",
      "scope": "module:class:ServoActuator",
      "claim_text": "Servo motor actuator implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\actuators.py",
      "line_number": 314,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-228",
      "type": "implementation",
      "scope": "module:class:StepperMotor",
      "claim_text": "Stepper motor actuator implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\actuators.py",
      "line_number": 634,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-229",
      "type": "implementation",
      "scope": "module:class:PneumaticActuator",
      "claim_text": "Pneumatic actuator implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\actuators.py",
      "line_number": 808,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-230",
      "type": "implementation",
      "scope": "module:class:NIDAQInterface",
      "claim_text": "National Instruments DAQ interface implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\daq_systems.py",
      "line_number": 293,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-231",
      "type": "implementation",
      "scope": "module:class:AdcInterface",
      "claim_text": "Generic ADC interface implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\daq_systems.py",
      "line_number": 572,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-232",
      "type": "implementation",
      "scope": "module:class:BaseDevice",
      "claim_text": "Base implementation of DeviceDriver with common functionality",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\device_drivers.py",
      "line_number": 428,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-233",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Hardware interface factory for creating device drivers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\factory.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-234",
      "type": "implementation",
      "scope": "module:class:AnalogSensor",
      "claim_text": "Analog sensor implementation for continuous value measurements",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\sensors.py",
      "line_number": 218,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-235",
      "type": "implementation",
      "scope": "module:class:DigitalSensor",
      "claim_text": "Digital sensor implementation for binary state measurements",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\sensors.py",
      "line_number": 359,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-236",
      "type": "implementation",
      "scope": "module:class:IMUSensor",
      "claim_text": "Inertial Measurement Unit sensor implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\sensors.py",
      "line_number": 521,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-237",
      "type": "implementation",
      "scope": "module:class:ModbusDevice",
      "claim_text": "Modbus RTU/TCP device implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\serial_devices.py",
      "line_number": 255,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-238",
      "type": "implementation",
      "scope": "module:class:CANDevice",
      "claim_text": "CAN bus device implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hardware\\serial_devices.py",
      "line_number": 543,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-239",
      "type": "implementation",
      "scope": "module:class:LinearPlantModel",
      "claim_text": "Linear plant model implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\hil\\simulation_bridge.py",
      "line_number": 183,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-240",
      "type": "implementation",
      "scope": "module:class:TroubleshootingAssistant:function:_get_potential_causes",
      "claim_text": "uses for a category of issues",
      "algorithm_name": "for a category",
      "source_attribution": "issues",
      "file_path": "src\\interfaces\\monitoring\\diagnostics.py",
      "line_number": 598,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-241",
      "type": "implementation",
      "scope": "module:class:ComponentHealth:function:_update_overall_status",
      "claim_text": "Update overall status based on recent check results",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\monitoring\\health_monitor.py",
      "line_number": 114,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-242",
      "type": "implementation",
      "scope": "module:class:MetricsCollector:function:_record_metric_value",
      "claim_text": "Record metric value with appropriate method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\monitoring\\metrics_collector.py",
      "line_number": 388,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-243",
      "type": "implementation",
      "scope": "module",
      "claim_text": "DEADLOCK-FREE Metrics Collection System - Production Ready",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\monitoring\\metrics_collector_deadlock_free.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-244",
      "type": "implementation",
      "scope": "module:class:DeadlockFreeMetric",
      "claim_text": "Individual metric with deadlock-free implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\monitoring\\metrics_collector_deadlock_free.py",
      "line_number": 77,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-245",
      "type": "implementation",
      "scope": "module:class:DeadlockFreeMetricsCollector:function:collect_metric",
      "claim_text": "Collect metric value - DEADLOCK-FREE implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\monitoring\\metrics_collector_deadlock_free.py",
      "line_number": 276,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-246",
      "type": "implementation",
      "scope": "module:class:MetricConfig",
      "claim_text": "Configuration for individual metrics based on environment profile",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\monitoring\\metrics_collector_fixed.py",
      "line_number": 85,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-247",
      "type": "implementation",
      "scope": "module:class:Metric:function:__post_init__",
      "claim_text": "Configure metric based on profile after initialization",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\monitoring\\metrics_collector_fixed.py",
      "line_number": 149,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-248",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Performance-optimized serialization with monitoring and metrics",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\monitoring\\performance_tracker.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-249",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Network interface factory for creating communication interfaces",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\network\\factory.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-250",
      "type": "implementation",
      "scope": "module",
      "claim_text": "DEADLOCK-FREE UDP communication interface for real-time control systems",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\interfaces\\network\\udp_interface_deadlock_free.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-251",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Professional optimization framework for control engineering applications",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-252",
      "type": "implementation",
      "scope": "module:function:create_optimizer",
      "claim_text": "Create an optimizer of specified type",
      "algorithm_name": "name",
      "source_attribution": null,
      "file_path": "src\\optimization\\__init__.py",
      "line_number": 108,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-253",
      "type": "implementation",
      "scope": "module:function:create_control_problem",
      "claim_text": "Create a control optimization problem",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\__init__.py",
      "line_number": 158,
      "has_citation": true,
      "citation_format": "numbered",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-254",
      "type": "implementation",
      "scope": "module:function:run_optimization_study",
      "claim_text": "Run comprehensive optimization study comparing multiple algorithms",
      "algorithm_name": "names or configured",
      "source_attribution": null,
      "file_path": "src\\optimization\\__init__.py",
      "line_number": 225,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-255",
      "type": "implementation",
      "scope": "module:function:example_algorithm_comparison",
      "claim_text": "Example: Compare multiple optimization algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\__init__.py",
      "line_number": 311,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-256",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Professional optimization algorithms for control engineering applications",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-257",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Base classes for optimization algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-258",
      "type": "implementation",
      "scope": "module:class:OptimizationAlgorithm",
      "claim_text": "Abstract base class for optimization algorithms",
      "algorithm_name": "initialization",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 15,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-259",
      "type": "implementation",
      "scope": "module:class:OptimizationAlgorithm:function:__init__",
      "claim_text": "Initialize the optimization algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 23,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-260",
      "type": "implementation",
      "scope": "module:class:OptimizationAlgorithm:function:optimize",
      "claim_text": "Run the optimization algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 30,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-261",
      "type": "implementation",
      "scope": "module:class:OptimizationAlgorithm:function:get_algorithm_info",
      "claim_text": "Get information about the algorithm",
      "algorithm_name": "information including name",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 52,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-262",
      "type": "implementation",
      "scope": "module:class:OptimizationAlgorithm:function:reset",
      "claim_text": "Reset the algorithm to initial state",
      "algorithm_name": "to initial state",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 66,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-263",
      "type": "implementation",
      "scope": "module:class:OptimizationAlgorithm:function:supports_constraints",
      "claim_text": "Check if algorithm supports constraints",
      "algorithm_name": "supports constraints",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 71,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-264",
      "type": "implementation",
      "scope": "module:class:OptimizationAlgorithm:function:supports_parallel_evaluation",
      "claim_text": "Check if algorithm supports parallel function evaluation",
      "algorithm_name": "supports parallel function",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 81,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-265",
      "type": "implementation",
      "scope": "module:class:OptimizationAlgorithm:function:get_default_parameters",
      "claim_text": "Get default algorithm parameters",
      "algorithm_name": "parameters",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 91,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-266",
      "type": "implementation",
      "scope": "module:class:PopulationBasedAlgorithm",
      "claim_text": "Base class for population-based optimization algorithms",
      "algorithm_name": "with common functionality",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 102,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-267",
      "type": "implementation",
      "scope": "module:class:PopulationBasedAlgorithm:function:__init__",
      "claim_text": "Initialize population-based algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 109,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-268",
      "type": "implementation",
      "scope": "module:class:PopulationBasedAlgorithm:function:get_algorithm_info",
      "claim_text": "Get algorithm information including population details",
      "algorithm_name": "information including population",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 122,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-269",
      "type": "implementation",
      "scope": "module:class:PopulationBasedAlgorithm:function:reset",
      "claim_text": "Reset the algorithm including population",
      "algorithm_name": "including population",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 132,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-270",
      "type": "implementation",
      "scope": "module:class:PopulationBasedAlgorithm:function:supports_parallel_evaluation",
      "claim_text": "Population-based algorithms typically support parallel evaluation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 138,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-271",
      "type": "implementation",
      "scope": "module:class:GradientBasedAlgorithm",
      "claim_text": "Base class for gradient-based optimization algorithms",
      "algorithm_name": "with common functionality",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 143,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-272",
      "type": "implementation",
      "scope": "module:class:GradientBasedAlgorithm:function:__init__",
      "claim_text": "Initialize gradient-based algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 150,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-273",
      "type": "implementation",
      "scope": "module:class:GradientBasedAlgorithm:function:get_algorithm_info",
      "claim_text": "Get algorithm information including gradient details",
      "algorithm_name": "information including gradient",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 163,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-274",
      "type": "implementation",
      "scope": "module:class:GradientBasedAlgorithm:function:reset",
      "claim_text": "Reset the algorithm including gradient information",
      "algorithm_name": "including gradient information",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 173,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-275",
      "type": "implementation",
      "scope": "module:class:GradientBasedAlgorithm:function:requires_gradients",
      "claim_text": "Check if algorithm requires analytical gradients",
      "algorithm_name": "requires analytical gradients",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\base.py",
      "line_number": 179,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-276",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Bayesian optimization algorithms for parameter tuning",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\bayesian\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-277",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Evolutionary optimization algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-278",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Differential Evolution optimization algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\differential.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-279",
      "type": "implementation",
      "scope": "module:class:DifferentialEvolution",
      "claim_text": "Differential Evolution algorithm for global optimization",
      "algorithm_name": "for global optimization",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\differential.py",
      "line_number": 19,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-280",
      "type": "implementation",
      "scope": "module:class:DifferentialEvolution:function:__init__",
      "claim_text": "Initialize Differential Evolution optimizer",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\differential.py",
      "line_number": 26,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-281",
      "type": "implementation",
      "scope": "module:class:DifferentialEvolution:function:algorithm_name",
      "claim_text": "Algorithm name.",
      "algorithm_name": "name",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\differential.py",
      "line_number": 91,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-282",
      "type": "implementation",
      "scope": "module:class:DifferentialEvolution:function:supports_constraints",
      "claim_text": "DE can handle constraints through penalty methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\differential.py",
      "line_number": 96,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-283",
      "type": "implementation",
      "scope": "module:class:DifferentialEvolution:function:_mutate",
      "claim_text": "Apply DE mutation strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\differential.py",
      "line_number": 231,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-284",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Genetic Algorithm implementation for control parameter optimization",
      "algorithm_name": "implementation for control",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\genetic.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-285",
      "type": "implementation",
      "scope": "module:class:GeneticAlgorithmConfig",
      "claim_text": "Configuration for Genetic Algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\genetic.py",
      "line_number": 23,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-286",
      "type": "implementation",
      "scope": "module:class:Individual",
      "claim_text": "Individual in the genetic algorithm population",
      "algorithm_name": "population",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\genetic.py",
      "line_number": 41,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-287",
      "type": "implementation",
      "scope": "module:class:GeneticAlgorithm",
      "claim_text": "Genetic Algorithm for parameter optimization",
      "algorithm_name": "for parameter optimization",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\genetic.py",
      "line_number": 61,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-288",
      "type": "implementation",
      "scope": "module:class:GeneticAlgorithm:function:__init__",
      "claim_text": "Initialize Genetic Algorithm",
      "algorithm_name": "configuration",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\genetic.py",
      "line_number": 76,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-289",
      "type": "implementation",
      "scope": "module:class:GeneticAlgorithm:function:optimize",
      "claim_text": "Run genetic algorithm optimization",
      "algorithm_name": "optimization",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\genetic.py",
      "line_number": 103,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-290",
      "type": "implementation",
      "scope": "module:class:GeneticAlgorithm:function:_select_individual",
      "claim_text": "Select individual based on selection method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\genetic.py",
      "line_number": 263,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-291",
      "type": "implementation",
      "scope": "module:class:GeneticAlgorithm:function:_update_algorithm_state",
      "claim_text": "Update algorithm state after each generation",
      "algorithm_name": "state after each",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\genetic.py",
      "line_number": 444,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-292",
      "type": "implementation",
      "scope": "module:class:GeneticAlgorithm:function:_update_adaptive_parameters",
      "claim_text": "Update adaptive algorithm parameters",
      "algorithm_name": "parameters",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\genetic.py",
      "line_number": 483,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-293",
      "type": "implementation",
      "scope": "module:class:GeneticAlgorithm:function:_check_convergence",
      "claim_text": "Check if algorithm has converged",
      "algorithm_name": "has converged",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\evolutionary\\genetic.py",
      "line_number": 501,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-294",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Gradient-based optimization algorithms for control parameter tuning",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\gradient\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-295",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Gradient-based optimization algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\gradient_based\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-296",
      "type": "implementation",
      "scope": "module",
      "claim_text": "BFGS quasi-Newton optimization algorithm with numerical gradients",
      "algorithm_name": "with numerical gradients",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\gradient_based\\bfgs.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-297",
      "type": "implementation",
      "scope": "module:class:BFGSConfig",
      "claim_text": "Configuration for BFGS algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\gradient_based\\bfgs.py",
      "line_number": 20,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-298",
      "type": "implementation",
      "scope": "module:class:BFGSOptimizer",
      "claim_text": "BFGS quasi-Newton optimization algorithm",
      "algorithm_name": "is a quasi",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\gradient_based\\bfgs.py",
      "line_number": 37,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-299",
      "type": "implementation",
      "scope": "module:class:BFGSOptimizer:function:__init__",
      "claim_text": "Initialize BFGS algorithm",
      "algorithm_name": "configuration",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\gradient_based\\bfgs.py",
      "line_number": 53,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-300",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Nelder-Mead simplex optimization algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\gradient_based\\nelder_mead.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-301",
      "type": "implementation",
      "scope": "module:class:NelderMeadConfig",
      "claim_text": "Configuration for Nelder-Mead algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\gradient_based\\nelder_mead.py",
      "line_number": 20,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-302",
      "type": "implementation",
      "scope": "module:class:NelderMead",
      "claim_text": "uses a simplex\n(n+1 vertices in n dimensions) to navigate the parameter space",
      "algorithm_name": "a simplex\n(n+1 vertices",
      "source_attribution": "n dimensions) to navigate the parameter space",
      "file_path": "src\\optimization\\algorithms\\gradient_based\\nelder_mead.py",
      "line_number": 109,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-303",
      "type": "implementation",
      "scope": "module:class:NelderMead:function:__init__",
      "claim_text": "Initialize Nelder-Mead algorithm",
      "algorithm_name": "configuration",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\gradient_based\\nelder_mead.py",
      "line_number": 125,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-304",
      "type": "implementation",
      "scope": "module:class:NelderMead:function:_perform_iteration",
      "claim_text": "Perform one iteration of Nelder-Mead algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\gradient_based\\nelder_mead.py",
      "line_number": 243,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-305",
      "type": "implementation",
      "scope": "module:class:NelderMead:function:_update_adaptive_parameters",
      "claim_text": "Update adaptive algorithm parameters",
      "algorithm_name": "parameters",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\gradient_based\\nelder_mead.py",
      "line_number": 344,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-306",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Memory-efficient PSO optimizer with production-grade memory management",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\memory_efficient_pso.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-307",
      "type": "implementation",
      "scope": "module:class:MemoryEfficientPSOTuner:function:optimise",
      "claim_text": "Run PSO optimization with memory management",
      "algorithm_name": "to add memory",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\memory_efficient_pso.py",
      "line_number": 289,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-308",
      "type": "implementation",
      "scope": "module:class:MemoryEfficientPSOTuner:function:_fitness",
      "claim_text": "Memory-aware fitness evaluation with monitoring and cleanup",
      "algorithm_name": "to add memory",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\memory_efficient_pso.py",
      "line_number": 327,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-309",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Multi-Objective Particle Swarm Optimization (MOPSO) for Controller Tuning",
      "algorithm_name": "specifically\ndesigned for",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\multi_objective_pso.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-310",
      "type": "implementation",
      "scope": "module:class:MultiObjectivePSO",
      "claim_text": "Multi-Objective Particle Swarm Optimization for Controller Tuning",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\multi_objective_pso.py",
      "line_number": 146,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-311",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Particle Swarm Optimisation (PSO) tuner for sliding-mode controllers",
      "algorithm_name": "around the vectorised",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\pso_optimizer.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-312",
      "type": "implementation",
      "scope": "module:function:_seeded_global_numpy",
      "claim_text": "Context manager to temporarily seed the global NumPy RNG",
      "algorithm_name": "to ensure deterministic",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\pso_optimizer.py",
      "line_number": 77,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-313",
      "type": "implementation",
      "scope": "module:class:PSOTuner",
      "claim_text": "High-throughput, vectorised tuner for sliding-mode controllers",
      "algorithm_name": "around the\nvectorised",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\pso_optimizer.py",
      "line_number": 103,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-314",
      "type": "implementation",
      "scope": "module:class:PSOTuner:function:optimise",
      "claim_text": "Run particle swarm optimisation with optional overrides",
      "algorithm_name": "constructs a",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\pso_optimizer.py",
      "line_number": 633,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-315",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Swarm intelligence optimization algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\swarm\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-316",
      "type": "implementation",
      "scope": "module:class:ParticleSwarmOptimizer",
      "claim_text": "Professional Particle Swarm Optimization algorithm",
      "algorithm_name": "with advanced features",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\swarm\\pso.py",
      "line_number": 19,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-317",
      "type": "implementation",
      "scope": "module:class:ParticleSwarmOptimizer:function:algorithm_name",
      "claim_text": "Algorithm name.",
      "algorithm_name": "name",
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\swarm\\pso.py",
      "line_number": 95,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-318",
      "type": "implementation",
      "scope": "module:class:ParticleSwarmOptimizer:function:supports_constraints",
      "claim_text": "PSO can handle constraints through penalty methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\algorithms\\swarm\\pso.py",
      "line_number": 100,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-319",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Optimization benchmarks and test functions for algorithm validation",
      "algorithm_name": "validation",
      "source_attribution": null,
      "file_path": "src\\optimization\\benchmarks\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-320",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Constraint handling for optimization problems in control systems",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\constraints\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-321",
      "type": "implementation",
      "scope": "module:class:OptimizationContext:function:create_optimizer_factory",
      "claim_text": "Factory method to create optimizers",
      "algorithm_name": "to create optimizers",
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\context.py",
      "line_number": 166,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-322",
      "type": "implementation",
      "scope": "module:class:OptimizationContext:function:get_available_algorithms",
      "claim_text": "Get list of available optimization algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\context.py",
      "line_number": 197,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-323",
      "type": "implementation",
      "scope": "module:function:optimize",
      "claim_text": "Quick optimization function",
      "algorithm_name": "name",
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\context.py",
      "line_number": 210,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-324",
      "type": "implementation",
      "scope": "module:class:Optimizer",
      "claim_text": "Abstract base class for optimization algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\interfaces.py",
      "line_number": 271,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-325",
      "type": "implementation",
      "scope": "module:class:Optimizer:function:__init__",
      "claim_text": "parameter_space : ParameterSpace",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\interfaces.py",
      "line_number": 274,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-326",
      "type": "implementation",
      "scope": "module:class:Optimizer:function:optimize",
      "claim_text": "problem : OptimizationProblem",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\interfaces.py",
      "line_number": 289,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-327",
      "type": "implementation",
      "scope": "module:class:Optimizer:function:algorithm_name",
      "claim_text": "Name of the optimization algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\interfaces.py",
      "line_number": 316,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-328",
      "type": "implementation",
      "scope": "module:class:Optimizer:function:supports_constraints",
      "claim_text": "Whether algorithm supports constraints",
      "algorithm_name": "supports constraints",
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\interfaces.py",
      "line_number": 322,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-329",
      "type": "implementation",
      "scope": "module:class:Optimizer:function:supports_bounds",
      "claim_text": "Whether algorithm supports parameter bounds",
      "algorithm_name": "supports parameter bounds",
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\interfaces.py",
      "line_number": 328,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-330",
      "type": "implementation",
      "scope": "module:class:Optimizer:function:is_population_based",
      "claim_text": "uses a population of candidates",
      "algorithm_name": "a population",
      "source_attribution": "candidates",
      "file_path": "src\\optimization\\core\\interfaces.py",
      "line_number": 334,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-331",
      "type": "implementation",
      "scope": "module:class:PopulationBasedOptimizer:function:update_population",
      "claim_text": "Update population based on fitness values",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\interfaces.py",
      "line_number": 399,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-332",
      "type": "implementation",
      "scope": "module:class:MultiObjectiveProblem:function:__init__",
      "claim_text": "Initialize multi-objective problem",
      "algorithm_name": "optimization_type",
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\problem.py",
      "line_number": 149,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-333",
      "type": "implementation",
      "scope": "module:class:OptimizationResultsManager:function:_generate_comparison_recommendations",
      "claim_text": "Generate recommendations based on comparison analysis",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\core\\results_manager.py",
      "line_number": 462,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-334",
      "type": "implementation",
      "scope": "module:class:CompositeObjective:function:__init__",
      "claim_text": "Initialize composite objective",
      "algorithm_name": "to combine objectives",
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\base.py",
      "line_number": 141,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-335",
      "type": "implementation",
      "scope": "module:class:CompositeObjective:function:_combine_objectives",
      "claim_text": "Combine objective values according to method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\base.py",
      "line_number": 187,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-336",
      "type": "implementation",
      "scope": "module:class:RobustnessObjective:function:_compute_objective_from_simulation",
      "claim_text": "Compute robustness objective",
      "algorithm_name": "evaluates robustness by",
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\control\\robustness.py",
      "line_number": 75,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-337",
      "type": "implementation",
      "scope": "module:class:StabilityMarginObjective:function:_compute_lyapunov_stability",
      "claim_text": "Compute Lyapunov-based stability metric",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\control\\stability.py",
      "line_number": 113,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-338",
      "type": "implementation",
      "scope": "module:class:StabilityMarginObjective:function:_compute_stability_margins",
      "claim_text": "uses frequency response estimation from simulation data",
      "algorithm_name": "frequency response estimation",
      "source_attribution": "simulation data",
      "file_path": "src\\optimization\\objectives\\control\\stability.py",
      "line_number": 158,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-339",
      "type": "implementation",
      "scope": "module:class:FrequencyResponseObjective",
      "claim_text": "Objective based on frequency response characteristics",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\control\\tracking.py",
      "line_number": 220,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-340",
      "type": "implementation",
      "scope": "module:class:ParetoObjective",
      "claim_text": "Multi-objective optimization using Pareto dominance",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\multi\\pareto.py",
      "line_number": 18,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-341",
      "type": "implementation",
      "scope": "module:class:ParetoObjective:function:__init__",
      "claim_text": "Initialize Pareto multi-objective",
      "algorithm_name": "to convert Pareto",
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\multi\\pareto.py",
      "line_number": 29,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-342",
      "type": "implementation",
      "scope": "module:class:WeightedSumObjective",
      "claim_text": "Multi-objective optimization using weighted sum scalarization",
      "algorithm_name": "is simple but",
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\multi\\weighted_sum.py",
      "line_number": 18,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-343",
      "type": "implementation",
      "scope": "module:class:WeightedSumObjective:function:__init__",
      "claim_text": "Initialize weighted sum multi-objective",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\multi\\weighted_sum.py",
      "line_number": 30,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-344",
      "type": "implementation",
      "scope": "module:class:WeightedSumObjective:function:_normalize_objectives",
      "claim_text": "Normalize objective values based on selected method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\multi\\weighted_sum.py",
      "line_number": 133,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-345",
      "type": "implementation",
      "scope": "module:class:AdaptiveWeightedSumObjective",
      "claim_text": "Adaptive weighted sum that automatically adjusts weights based on objective performance",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\multi\\weighted_sum.py",
      "line_number": 393,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-346",
      "type": "implementation",
      "scope": "module:class:AdaptiveWeightedSumObjective:function:_adapt_weights",
      "claim_text": "Adapt weights based on objective performance",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\multi\\weighted_sum.py",
      "line_number": 430,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-347",
      "type": "implementation",
      "scope": "module:class:UndershootObjective",
      "claim_text": "Objective function specifically for minimizing undershoot",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\system\\overshoot.py",
      "line_number": 410,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-348",
      "type": "implementation",
      "scope": "module:class:SettlingTimeObjective",
      "claim_text": "Objective function for minimizing system settling time",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\system\\settling_time.py",
      "line_number": 15,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-349",
      "type": "implementation",
      "scope": "module:class:SettlingTimeObjective:function:_find_settling_time",
      "claim_text": "Find the settling time based on tolerance criteria",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\objectives\\system\\settling_time.py",
      "line_number": 221,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-350",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Convergence analysis tools for optimization results",
      "algorithm_name": "performance assessment",
      "source_attribution": null,
      "file_path": "src\\optimization\\results\\convergence\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-351",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Convergence monitoring and analysis for optimization algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\results\\convergence.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-352",
      "type": "implementation",
      "scope": "module:class:ConvergenceAnalyzer:function:compare_convergence_curves",
      "claim_text": "Compare multiple convergence curves",
      "algorithm_name": "names to fitness",
      "source_attribution": null,
      "file_path": "src\\optimization\\results\\convergence.py",
      "line_number": 293,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-353",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Optimization solvers and interfaces for different optimization libraries",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\solvers\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-354",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Advanced PSO Hyperparameter Optimization for Factory-Generated Controllers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\tuning\\pso_hyperparameter_optimizer.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-355",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Validation and testing framework for optimization algorithms",
      "algorithm_name": "performance and reliability",
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-356",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Enhanced PSO Convergence Criteria and Validation Algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\enhanced_convergence_analyzer.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-357",
      "type": "implementation",
      "scope": "module:class:EnhancedConvergenceAnalyzer:function:_calculate_stagnation_score",
      "claim_text": "Calculate stagnation score based on recent fitness variations",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\enhanced_convergence_analyzer.py",
      "line_number": 392,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-358",
      "type": "implementation",
      "scope": "module:class:EnhancedConvergenceAnalyzer:function:_update_convergence_status",
      "claim_text": "Update internal convergence status based on metrics",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\enhanced_convergence_analyzer.py",
      "line_number": 602,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-359",
      "type": "implementation",
      "scope": "module:class:PSOConvergenceValidator",
      "claim_text": "Validation framework for PSO convergence algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\enhanced_convergence_analyzer.py",
      "line_number": 697,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-360",
      "type": "implementation",
      "scope": "module",
      "claim_text": "based on controller physics\n- Multi-objective parameter space analysis\n- Convergence-aware bounds adjustment\n- Statistical validation of parameter effectiveness",
      "algorithm_name": "controller physics\n- Multi-objective parameter space analysis\n- Convergence-aware bounds adjustment\n- Statistical validation",
      "source_attribution": "parameter effectiveness",
      "file_path": "src\\optimization\\validation\\pso_bounds_optimizer.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-361",
      "type": "implementation",
      "scope": "module:class:BoundsOptimizationStrategy",
      "claim_text": "Strategy for optimizing parameter bounds",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\pso_bounds_optimizer.py",
      "line_number": 37,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-362",
      "type": "implementation",
      "scope": "module:class:PSOBoundsOptimizer:function:optimize_bounds_for_controller",
      "claim_text": "Optimize PSO parameter bounds for specific controller type",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\pso_bounds_optimizer.py",
      "line_number": 165,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-363",
      "type": "implementation",
      "scope": "module:class:PSOBoundsOptimizer:function:_generate_performance_driven_bounds",
      "claim_text": "Generate bounds based on empirical performance data",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\pso_bounds_optimizer.py",
      "line_number": 293,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-364",
      "type": "implementation",
      "scope": "module:class:PSOBoundsOptimizer:function:_select_optimal_bounds",
      "claim_text": "Select optimal bounds based on performance metrics and strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\pso_bounds_optimizer.py",
      "line_number": 477,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-365",
      "type": "implementation",
      "scope": "module",
      "claim_text": "PSO Bounds Validation and Optimization Module",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\pso_bounds_validator.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-366",
      "type": "implementation",
      "scope": "module:class:PSOBoundsValidator:function:_estimate_convergence_difficulty",
      "claim_text": "Estimate convergence difficulty based on bounds width",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\pso_bounds_validator.py",
      "line_number": 336,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-367",
      "type": "implementation",
      "scope": "module:class:PSOBoundsValidator:function:_generate_improved_bounds",
      "claim_text": "Generate improved bounds based on theoretical analysis",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\optimization\\validation\\pso_bounds_validator.py",
      "line_number": 348,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-368",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Plant Dynamics and Physical Models for the Double Inverted Pendulum System",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-369",
      "type": "implementation",
      "scope": "module:class:BaseDIPConfig",
      "claim_text": "Base configuration class for Double Inverted Pendulum models",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\configurations\\base_config.py",
      "line_number": 201,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-370",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Plant core dynamics compatibility module",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\core\\dynamics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-371",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Numerical Stability Utilities for Plant Dynamics",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\core\\numerical_stability.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-372",
      "type": "implementation",
      "scope": "module:class:AdaptiveRegularizer",
      "claim_text": "Adaptive matrix regularization for improved numerical stability",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\core\\numerical_stability.py",
      "line_number": 54,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-373",
      "type": "implementation",
      "scope": "module:class:AdaptiveRegularizer:function:_apply_adaptive_regularization",
      "claim_text": "Apply adaptive regularization based on matrix conditioning",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\core\\numerical_stability.py",
      "line_number": 127,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-374",
      "type": "implementation",
      "scope": "module:class:DIPPhysicsMatrices",
      "claim_text": "Double Inverted Pendulum physics matrix computation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\core\\physics_matrices.py",
      "line_number": 45,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-375",
      "type": "implementation",
      "scope": "module:class:SimplifiedDIPPhysicsMatrices",
      "claim_text": "Simplified physics matrices for computational efficiency",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\core\\physics_matrices.py",
      "line_number": 248,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-376",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Base classes and interfaces for plant dynamics models",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\base\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-377",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Common interface for plant dynamics models",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\base\\dynamics_interface.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-378",
      "type": "implementation",
      "scope": "module:class:IntegrationMethod",
      "claim_text": "Available integration methods for dynamics",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\base\\dynamics_interface.py",
      "line_number": 19,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-379",
      "type": "implementation",
      "scope": "module:class:DynamicsModel:function:compute_dynamics",
      "claim_text": "Compute system dynamics at given state and input",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\base\\dynamics_interface.py",
      "line_number": 73,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-380",
      "type": "implementation",
      "scope": "module:class:BaseDynamicsModel",
      "claim_text": "Abstract base class for dynamics models",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\base\\dynamics_interface.py",
      "line_number": 130,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-381",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Full Fidelity Double Inverted Pendulum Model",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\full\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-382",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Full Fidelity DIP Dynamics Model",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\full\\dynamics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-383",
      "type": "implementation",
      "scope": "module:class:FullDIPDynamics",
      "claim_text": "Full Fidelity Double Inverted Pendulum Dynamics Model",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\full\\dynamics.py",
      "line_number": 29,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-384",
      "type": "implementation",
      "scope": "module:class:FullDIPDynamics:function:_rhs_core",
      "claim_text": "Compatibility method for legacy code expecting _rhs_core",
      "algorithm_name": "for legacy code",
      "source_attribution": null,
      "file_path": "src\\plant\\models\\full\\dynamics.py",
      "line_number": 530,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-385",
      "type": "implementation",
      "scope": "module:class:FullDIPDynamics:function:_rhs_core",
      "claim_text": "Compatibility method for legacy code expecting _rhs_core",
      "algorithm_name": "for legacy code",
      "source_attribution": null,
      "file_path": "src\\plant\\models\\full\\dynamics.py",
      "line_number": 566,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-386",
      "type": "implementation",
      "scope": "module:class:FullFidelityPhysicsComputer",
      "claim_text": "Full-fidelity physics computation for DIP dynamics",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\full\\physics.py",
      "line_number": 34,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-387",
      "type": "implementation",
      "scope": "module:class:FullFidelityPhysicsComputer:function:compute_complete_dynamics_rhs",
      "claim_text": "Compute complete right-hand side of dynamics equation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\full\\physics.py",
      "line_number": 70,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-388",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Low-rank Double Inverted Pendulum (DIP) Model Package",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\lowrank\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-389",
      "type": "implementation",
      "scope": "module:class:LowRankDIPConfig",
      "claim_text": "Configuration for Low-rank Double Inverted Pendulum Model",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\lowrank\\config.py",
      "line_number": 21,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-390",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Low-rank DIP Dynamics Model",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\lowrank\\dynamics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-391",
      "type": "implementation",
      "scope": "module:class:LowRankDIPDynamics",
      "claim_text": "Low-rank Double Inverted Pendulum Dynamics Model",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\lowrank\\dynamics.py",
      "line_number": 28,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-392",
      "type": "implementation",
      "scope": "module:class:LowRankDIPDynamics:function:_rhs_core",
      "claim_text": "Compatibility method for legacy code expecting _rhs_core",
      "algorithm_name": "for legacy code",
      "source_attribution": null,
      "file_path": "src\\plant\\models\\lowrank\\dynamics.py",
      "line_number": 387,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-393",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Low-rank DIP Physics Computer",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\lowrank\\physics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-394",
      "type": "implementation",
      "scope": "module:class:LowRankPhysicsComputer",
      "claim_text": "Low-rank Physics Computer for Double Inverted Pendulum",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\lowrank\\physics.py",
      "line_number": 20,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-395",
      "type": "implementation",
      "scope": "module",
      "claim_text": "implementation of the simplified DIP dynamics with:\n- Focused physics computation\n- Type-safe configuration\n- Numerical stability features\n- Performance optimizations\n\nRefactored from the monolithic 688-line dynamics",
      "algorithm_name": "the simplified DIP dynamics with:\n- Focused physics computation\n- Type-safe configuration\n- Numerical stability features\n- Performance optimizations\n\nRefactored",
      "source_attribution": "the monolithic 688-line dynamics",
      "file_path": "src\\plant\\models\\simplified\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-396",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Configuration for Simplified DIP Dynamics",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\simplified\\config.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-397",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Simplified DIP Dynamics Model",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\simplified\\dynamics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-398",
      "type": "implementation",
      "scope": "module:class:SimplifiedDIPDynamics",
      "claim_text": "implementation of simplified DIP dynamics featuring:\n- Type-safe configuration with validation\n- Numerical stability monitoring and recovery\n- Performance optimizations with JIT compilation\n- Clean separation of physics computation",
      "algorithm_name": "simplified DIP dynamics featuring:\n- Type-safe configuration with validation\n- Numerical stability monitoring and recovery\n- Performance optimizations with JIT compilation\n- Clean separation",
      "source_attribution": "physics computation",
      "file_path": "src\\plant\\models\\simplified\\dynamics.py",
      "line_number": 28,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-399",
      "type": "implementation",
      "scope": "module:class:SimplifiedDIPDynamics:function:_compute_standard_dynamics",
      "claim_text": "Compute dynamics using standard (modular) approach",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\simplified\\dynamics.py",
      "line_number": 290,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-400",
      "type": "implementation",
      "scope": "module:class:SimplifiedDIPDynamics:function:_compute_fast_dynamics",
      "claim_text": "Compute dynamics using fast JIT-compiled approach",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\simplified\\dynamics.py",
      "line_number": 298,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-401",
      "type": "implementation",
      "scope": "module:class:SimplifiedDIPDynamics:function:_rhs_core",
      "claim_text": "Compatibility method for legacy code expecting _rhs_core",
      "algorithm_name": "for legacy code",
      "source_attribution": null,
      "file_path": "src\\plant\\models\\simplified\\dynamics.py",
      "line_number": 417,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-402",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Simplified Physics Computation for DIP",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\simplified\\physics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-403",
      "type": "implementation",
      "scope": "module:class:SimplifiedPhysicsComputer",
      "claim_text": "Simplified physics computation for DIP dynamics",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\simplified\\physics.py",
      "line_number": 35,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-404",
      "type": "implementation",
      "scope": "module:function:compute_simplified_dynamics_numba",
      "claim_text": "JIT-compiled simplified dynamics computation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\plant\\models\\simplified\\physics.py",
      "line_number": 236,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-405",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Professional simulation framework for control engineering applications",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-406",
      "type": "implementation",
      "scope": "module:class:SimulationContext",
      "claim_text": "Initializes and holds the context for a simulation run",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\context\\simulation_context.py",
      "line_number": 30,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-407",
      "type": "implementation",
      "scope": "module:class:SimulationContext:function:_initialize_dynamics_model",
      "claim_text": "Initialize the correct dynamics model based on the configuration",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\context\\simulation_context.py",
      "line_number": 44,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-408",
      "type": "implementation",
      "scope": "module:class:SimulationContext:function:create_controller",
      "claim_text": "use defaults from config",
      "algorithm_name": "defaults",
      "source_attribution": "config",
      "file_path": "src\\simulation\\context\\simulation_context.py",
      "line_number": 81,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-409",
      "type": "implementation",
      "scope": "module:class:Integrator",
      "claim_text": "Base interface for numerical integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\interfaces.py",
      "line_number": 40,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-410",
      "type": "implementation",
      "scope": "module:class:Integrator:function:order",
      "claim_text": "Integration method order",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\interfaces.py",
      "line_number": 74,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-411",
      "type": "implementation",
      "scope": "module:class:Orchestrator:function:execute",
      "claim_text": "Execute simulation with specified strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\interfaces.py",
      "line_number": 89,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-412",
      "type": "implementation",
      "scope": "module:class:SimulationStrategy:function:analyze",
      "claim_text": "Perform strategy-specific analysis",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\interfaces.py",
      "line_number": 122,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-413",
      "type": "implementation",
      "scope": "module:class:SimulationContext:function:_initialize_dynamics_model",
      "claim_text": "Initialize the dynamics model based on configuration",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\simulation_context.py",
      "line_number": 43,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-414",
      "type": "implementation",
      "scope": "module:class:SimulationContext:function:create_controller",
      "claim_text": "Create a controller using the configuration",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\simulation_context.py",
      "line_number": 86,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-415",
      "type": "implementation",
      "scope": "module:class:TimeManager:function:advance_step",
      "claim_text": "Advance simulation by one time step",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\time_domain.py",
      "line_number": 72,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-416",
      "type": "implementation",
      "scope": "module:class:AdaptiveTimeStep:function:update_step_size",
      "claim_text": "Update time step based on error estimate",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\core\\time_domain.py",
      "line_number": 242,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-417",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Simulation engines and numerical integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-418",
      "type": "implementation",
      "scope": "module",
      "claim_text": "uses on a single step of the Dormand\u2013Prince",
      "algorithm_name": "on a single step",
      "source_attribution": "the Dormand\u2013Prince",
      "file_path": "src\\simulation\\engines\\adaptive_integrator.py",
      "line_number": 1,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.8
    },
    {
      "id": "CODE-IMPL-419",
      "type": "implementation",
      "scope": "module:function:rk45_step",
      "claim_text": "Perform a single Dormand\u2013Prince 4(5) integration step",
      "algorithm_name": "the Butcher tableau",
      "source_attribution": "313837333132264\u2020L58-L82",
      "file_path": "src\\simulation\\engines\\adaptive_integrator.py",
      "line_number": 37,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-420",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Simulation step router",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\simulation_runner.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-421",
      "type": "implementation",
      "scope": "module:function:get_step_fn",
      "claim_text": "Return the appropriate step function based on the configuration flag",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\simulation_runner.py",
      "line_number": 75,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-422",
      "type": "implementation",
      "scope": "module:function:step",
      "claim_text": "Unified simulation step entry point",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\simulation_runner.py",
      "line_number": 87,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-423",
      "type": "implementation",
      "scope": "module:function:run_simulation",
      "claim_text": "Simulate a single controller trajectory using an explicit Euler method",
      "algorithm_name": "that advances the",
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\simulation_runner.py",
      "line_number": 109,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-424",
      "type": "implementation",
      "scope": "module:class:SimulationRunner:function:__init__",
      "claim_text": "Initialize simulation runner",
      "algorithm_name": "dt",
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\simulation_runner.py",
      "line_number": 341,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-425",
      "type": "implementation",
      "scope": "module:function:simulate",
      "claim_text": "Simulate a dynamical system forward in time",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\vector_sim.py",
      "line_number": 38,
      "has_citation": true,
      "citation_format": "numbered",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-426",
      "type": "implementation",
      "scope": "module:function:simulate_system_batch",
      "claim_text": "Vectorised batch simulation of multiple controllers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\engines\\vector_sim.py",
      "line_number": 252,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-427",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Numerical integration methods for simulation framework",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-428",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive step-size integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-429",
      "type": "implementation",
      "scope": "module:class:ErrorController",
      "claim_text": "Basic error controller for adaptive step size methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\error_control.py",
      "line_number": 13,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-430",
      "type": "implementation",
      "scope": "module:class:ErrorController:function:update_step_size",
      "claim_text": "Update step size based on error estimate",
      "algorithm_name": "order for exponent",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\error_control.py",
      "line_number": 26,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-431",
      "type": "implementation",
      "scope": "module:class:PIController:function:update_step_size",
      "claim_text": "Update step size using PI control",
      "algorithm_name": "order\n\nReturns",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\error_control.py",
      "line_number": 97,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-432",
      "type": "implementation",
      "scope": "module:class:DeadBeatController:function:update_step_size",
      "claim_text": "Update step size using dead-beat control",
      "algorithm_name": "order\n\nReturns",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\error_control.py",
      "line_number": 175,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-433",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive Runge-Kutta integration methods with error control",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\runge_kutta.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-434",
      "type": "implementation",
      "scope": "module:class:AdaptiveRungeKutta",
      "claim_text": "Base class for adaptive Runge-Kutta methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\runge_kutta.py",
      "line_number": 16,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-435",
      "type": "implementation",
      "scope": "module:class:DormandPrince45",
      "claim_text": "Dormand-Prince 4(5) embedded Runge-Kutta method with adaptive step size",
      "algorithm_name": "with adaptive step",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\runge_kutta.py",
      "line_number": 99,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-436",
      "type": "implementation",
      "scope": "module:class:DormandPrince45:function:order",
      "claim_text": "Integration method order",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\runge_kutta.py",
      "line_number": 103,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-437",
      "type": "implementation",
      "scope": "module:function:rk45_step",
      "claim_text": "Legacy Dormand-Prince 4(5) step function for backward compatibility",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\runge_kutta.py",
      "line_number": 177,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-438",
      "type": "implementation",
      "scope": "module:function:_original_rk45_step",
      "claim_text": "Original RK45 implementation for fallback",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\adaptive\\runge_kutta.py",
      "line_number": 228,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-439",
      "type": "implementation",
      "scope": "module:class:BaseIntegrator",
      "claim_text": "Base class for numerical integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\base.py",
      "line_number": 16,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-440",
      "type": "implementation",
      "scope": "module:class:BaseIntegrator:function:__init__",
      "claim_text": "Initialize base integrator",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\base.py",
      "line_number": 19,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-441",
      "type": "implementation",
      "scope": "module:class:BaseIntegrator:function:order",
      "claim_text": "Integration method order",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\base.py",
      "line_number": 50,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-442",
      "type": "implementation",
      "scope": "module:class:BaseIntegrator:function:integrate_step",
      "claim_text": "Integrate dynamics forward by one time step (interface compatibility method)",
      "algorithm_name": "provides compatibility with",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\base.py",
      "line_number": 73,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-443",
      "type": "implementation",
      "scope": "module:class:IntegrationResult:function:__init__",
      "claim_text": "Initialize integration result",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\base.py",
      "line_number": 159,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-444",
      "type": "implementation",
      "scope": "module:class:LegacyDynamicsWrapper:function:__init__",
      "claim_text": "Initialize legacy wrapper",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\compatibility.py",
      "line_number": 102,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-445",
      "type": "implementation",
      "scope": "module:function:create_compatible_dynamics",
      "claim_text": "Create a dynamics model compatible with simulation engines",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\compatibility.py",
      "line_number": 146,
      "has_citation": true,
      "citation_format": "numbered",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-446",
      "type": "implementation",
      "scope": "module:class:IntegratorSafetyWrapper:function:_safe_fallback_integrate",
      "claim_text": "Safely integrate using fallback method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\compatibility.py",
      "line_number": 267,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-447",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Discrete-time integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\discrete\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-448",
      "type": "implementation",
      "scope": "module:class:ZeroOrderHold:function:order",
      "claim_text": "Integration method order (exact for linear systems)",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\discrete\\zero_order_hold.py",
      "line_number": 41,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-449",
      "type": "implementation",
      "scope": "module:class:ZeroOrderHold:function:_integrate_nonlinear",
      "claim_text": "Integrate nonlinear system with ZOH control approximation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\discrete\\zero_order_hold.py",
      "line_number": 132,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-450",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Fixed step-size integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-451",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Euler integration methods (explicit and implicit)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-452",
      "type": "implementation",
      "scope": "module:class:ForwardEuler",
      "claim_text": "Forward (explicit) Euler integration method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 16,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-453",
      "type": "implementation",
      "scope": "module:class:ForwardEuler:function:order",
      "claim_text": "Integration method order",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 20,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-454",
      "type": "implementation",
      "scope": "module:class:ForwardEuler:function:integrate",
      "claim_text": "Integrate using forward Euler method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 29,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-455",
      "type": "implementation",
      "scope": "module:class:BackwardEuler",
      "claim_text": "Backward (implicit) Euler integration method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 66,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-456",
      "type": "implementation",
      "scope": "module:class:BackwardEuler:function:order",
      "claim_text": "Integration method order",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 88,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-457",
      "type": "implementation",
      "scope": "module:class:BackwardEuler:function:integrate",
      "claim_text": "Integrate using backward Euler method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 97,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-458",
      "type": "implementation",
      "scope": "module:class:ModifiedEuler",
      "claim_text": "Modified Euler method (Heun's method)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 154,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-459",
      "type": "implementation",
      "scope": "module:class:ModifiedEuler:function:order",
      "claim_text": "Integration method order",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 158,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-460",
      "type": "implementation",
      "scope": "module:class:ModifiedEuler:function:integrate",
      "claim_text": "Integrate using modified Euler (Heun's) method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\euler.py",
      "line_number": 167,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-461",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Fixed step-size Runge-Kutta integration methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-462",
      "type": "implementation",
      "scope": "module:class:RungeKutta2",
      "claim_text": "Second-order Runge-Kutta method (midpoint rule)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 15,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-463",
      "type": "implementation",
      "scope": "module:class:RungeKutta2:function:order",
      "claim_text": "Integration method order",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 19,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-464",
      "type": "implementation",
      "scope": "module:class:RungeKutta2:function:integrate",
      "claim_text": "Integrate using second-order Runge-Kutta (midpoint) method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 28,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-465",
      "type": "implementation",
      "scope": "module:class:RungeKutta4",
      "claim_text": "Fourth-order Runge-Kutta method (classic RK4)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 66,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-466",
      "type": "implementation",
      "scope": "module:class:RungeKutta4:function:order",
      "claim_text": "Integration method order",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 70,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-467",
      "type": "implementation",
      "scope": "module:class:RungeKutta4:function:integrate",
      "claim_text": "Integrate using fourth-order Runge-Kutta method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 79,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-468",
      "type": "implementation",
      "scope": "module:class:RungeKutta38",
      "claim_text": "Runge-Kutta 3/8 rule (alternative 4th-order method)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 119,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-469",
      "type": "implementation",
      "scope": "module:class:RungeKutta38:function:order",
      "claim_text": "Integration method order",
      "algorithm_name": "order",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 123,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-470",
      "type": "implementation",
      "scope": "module:class:RungeKutta38:function:integrate",
      "claim_text": "Integrate using Runge-Kutta 3/8 rule",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 132,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-471",
      "type": "implementation",
      "scope": "module:class:ClassicalRungeKutta",
      "claim_text": "Alias for standard RK4 method for backward compatibility",
      "algorithm_name": "for backward compatibility",
      "source_attribution": null,
      "file_path": "src\\simulation\\integrators\\fixed_step\\runge_kutta.py",
      "line_number": 172,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-472",
      "type": "implementation",
      "scope": "module:class:BaseOrchestrator:function:_create_integrator",
      "claim_text": "Create appropriate integrator based on configuration",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\orchestrators\\base.py",
      "line_number": 49,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-473",
      "type": "implementation",
      "scope": "module:class:BaseOrchestrator:function:execute",
      "claim_text": "Execute simulation with orchestrator-specific strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\orchestrators\\base.py",
      "line_number": 102,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-474",
      "type": "implementation",
      "scope": "module:class:ParallelOrchestrator:function:_run_single_simulation",
      "claim_text": "Run a single simulation using sequential orchestrator",
      "algorithm_name": "creates a new",
      "source_attribution": null,
      "file_path": "src\\simulation\\orchestrators\\parallel.py",
      "line_number": 159,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-475",
      "type": "implementation",
      "scope": "module:class:HardwareInLoopOrchestrator:function:__init__",
      "claim_text": "Initialize HIL orchestrator",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\orchestrators\\real_time.py",
      "line_number": 240,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-476",
      "type": "implementation",
      "scope": "module:function:run_simulation",
      "claim_text": "Legacy simulation runner for backward compatibility",
      "algorithm_name": "dynamics_model",
      "source_attribution": null,
      "file_path": "src\\simulation\\orchestrators\\sequential.py",
      "line_number": 187,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-477",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Result container implementations for simulation data",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\results\\containers.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-478",
      "type": "implementation",
      "scope": "module:class:RecoveryStrategy:function:recover",
      "claim_text": "Implement recovery strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\safety\\recovery.py",
      "line_number": 18,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-479",
      "type": "implementation",
      "scope": "module:class:EmergencyStop",
      "claim_text": "Emergency stop recovery strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\safety\\recovery.py",
      "line_number": 38,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-480",
      "type": "implementation",
      "scope": "module:class:StateLimiter",
      "claim_text": "State limiting recovery strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\safety\\recovery.py",
      "line_number": 46,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-481",
      "type": "implementation",
      "scope": "module:class:SafetyRecovery:function:register_strategy",
      "claim_text": "Register recovery strategy for specific violation type",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\safety\\recovery.py",
      "line_number": 77,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-482",
      "type": "implementation",
      "scope": "module:class:SafetyRecovery:function:apply_recovery",
      "claim_text": "Apply appropriate recovery strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\safety\\recovery.py",
      "line_number": 81,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-483",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Simulation analysis strategies and paradigms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\strategies\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-484",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Monte Carlo simulation strategy for statistical analysis",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\strategies\\monte_carlo.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-485",
      "type": "implementation",
      "scope": "module:class:MonteCarloStrategy",
      "claim_text": "Monte Carlo simulation strategy for statistical analysis",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\strategies\\monte_carlo.py",
      "line_number": 16,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-486",
      "type": "implementation",
      "scope": "module:class:MonteCarloStrategy:function:__init__",
      "claim_text": "Initialize Monte Carlo strategy",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\simulation\\strategies\\monte_carlo.py",
      "line_number": 19,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-487",
      "type": "implementation",
      "scope": "module:class:ConfigCompatibilityMixin",
      "claim_text": "Mixin class for components that need configuration compatibility",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\config_compatibility.py",
      "line_number": 165,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-488",
      "type": "implementation",
      "scope": "module:function:wrap_physics_config",
      "claim_text": "Wrap physics configuration for compatibility with plant models",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\config_compatibility.py",
      "line_number": 182,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-489",
      "type": "implementation",
      "scope": "module:function:saturate",
      "claim_text": "based on the\nexpected amplitude of measurement noise and the desired steady\u2011state",
      "algorithm_name": "the\nexpected amplitude",
      "source_attribution": "measurement noise and the desired steady\u2011state",
      "file_path": "src\\utils\\control\\saturation.py",
      "line_number": 17,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-490",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Control analysis utilities compatibility module",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\control_analysis.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-491",
      "type": "implementation",
      "scope": "module:class:CoverageMonitor",
      "claim_text": "Implements mathematical analysis of coverage trends with automated",
      "algorithm_name": "mathematical analysis",
      "source_attribution": "coverage trends with automated",
      "file_path": "src\\utils\\coverage\\monitoring.py",
      "line_number": 54,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-492",
      "type": "implementation",
      "scope": "module:class:CoverageMonitor:function:analyze_coverage_trends:function:calculate_slope",
      "claim_text": "Calculate linear regression slope using least squares method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\coverage\\monitoring.py",
      "line_number": 203,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-493",
      "type": "implementation",
      "scope": "module:class:CoverageMonitor:function:analyze_coverage_trends:function:classify_trend",
      "claim_text": "Classify trend based on slope magnitude",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\coverage\\monitoring.py",
      "line_number": 222,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-494",
      "type": "implementation",
      "scope": "module:class:CoverageMonitor:function:_generate_trend_recommendation",
      "claim_text": "Generate actionable recommendations based on trend analysis",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\coverage\\monitoring.py",
      "line_number": 269,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-495",
      "type": "implementation",
      "scope": "module:class:CoverageMonitor:function:check_quality_gates",
      "claim_text": "Check current coverage against quality gate thresholds",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\coverage\\monitoring.py",
      "line_number": 280,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-496",
      "type": "implementation",
      "scope": "module:class:NotebookExporter",
      "claim_text": "Utility class for exporting data and plots from Jupyter notebooks",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\development\\jupyter_tools.py",
      "line_number": 24,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-497",
      "type": "implementation",
      "scope": "module:class:NotebookExporter:function:export_optimization_results",
      "claim_text": "Export PSO or other optimization results",
      "algorithm_name": "prefix",
      "source_attribution": null,
      "file_path": "src\\utils\\development\\jupyter_tools.py",
      "line_number": 188,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-498",
      "type": "implementation",
      "scope": "module",
      "claim_text": "use for optimal performance\n\nExample\n-------\n>>> from src",
      "algorithm_name": "for optimal performance\n\nExample\n-------\n>>>",
      "source_attribution": "src",
      "file_path": "src\\utils\\memory\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-499",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Production-grade memory pool for efficient memory management",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\memory\\memory_pool.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-500",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Implements the 9-step diagnostic checklist from Issue #1 resolution plan",
      "algorithm_name": "the 9-step diagnostic checklist",
      "source_attribution": "Issue #1 resolution plan",
      "file_path": "src\\utils\\monitoring\\diagnostics.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-501",
      "type": "implementation",
      "scope": "module:class:InstabilityType",
      "claim_text": "Classification of instability root causes",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\monitoring\\diagnostics.py",
      "line_number": 20,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-502",
      "type": "implementation",
      "scope": "module:class:DiagnosticChecklist",
      "claim_text": "Implements the priority-ranked diagnostic checklist from Issue #1 resolution:",
      "algorithm_name": "the priority-ranked diagnostic checklist",
      "source_attribution": "Issue #1 resolution:",
      "file_path": "src\\utils\\monitoring\\diagnostics.py",
      "line_number": 45,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-503",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Implements the stability monitoring solution from Issue #1 resolution plan,",
      "algorithm_name": "the stability monitoring solution",
      "source_attribution": "Issue #1 resolution plan,",
      "file_path": "src\\utils\\monitoring\\stability.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-504",
      "type": "implementation",
      "scope": "module:class:LyapunovDecreaseMonitor",
      "claim_text": "Implements LDR monitoring as specified in Issue #1 resolution:",
      "algorithm_name": "LDR monitoring as specified",
      "source_attribution": "Issue #1 resolution:",
      "file_path": "src\\utils\\monitoring\\stability.py",
      "line_number": 19,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-505",
      "type": "implementation",
      "scope": "module:class:SaturationMonitor",
      "claim_text": "Implements saturation monitoring as specified in Issue #1 resolution:",
      "algorithm_name": "saturation monitoring as specified",
      "source_attribution": "Issue #1 resolution:",
      "file_path": "src\\utils\\monitoring\\stability.py",
      "line_number": 152,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-506",
      "type": "implementation",
      "scope": "module:class:DynamicsConditioningMonitor",
      "claim_text": "Implements conditioning monitoring as specified in Issue #1 resolution:",
      "algorithm_name": "conditioning monitoring as specified",
      "source_attribution": "Issue #1 resolution:",
      "file_path": "src\\utils\\monitoring\\stability.py",
      "line_number": 301,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-507",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Numerical stability utilities for robust mathematical operations",
      "algorithm_name": "convergence",
      "source_attribution": null,
      "file_path": "src\\utils\\numerical_stability\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-508",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Safe mathematical operations with numerical stability guarantees",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\numerical_stability\\safe_operations.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-509",
      "type": "implementation",
      "scope": "module:function:safe_divide",
      "claim_text": "Safe division with epsilon threshold protection against zero division",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\numerical_stability\\safe_operations.py",
      "line_number": 75,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-510",
      "type": "implementation",
      "scope": "module:function:safe_sqrt",
      "claim_text": "Safe square root with negative value protection",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\numerical_stability\\safe_operations.py",
      "line_number": 205,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-511",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Global seeding utilities for reproducible simulations",
      "algorithm_name": "numbers of processors",
      "source_attribution": "675644021986605\u2020L385-L388",
      "file_path": "src\\utils\\reproducibility\\seed.py",
      "line_number": 1,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-512",
      "type": "implementation",
      "scope": "module:class:SeedManager:function:spawn",
      "claim_text": "Return a new integer seed derived from the master generator",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\reproducibility\\seed.py",
      "line_number": 79,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-513",
      "type": "implementation",
      "scope": "module:function:set_global_seed",
      "claim_text": "According to reproducibility guidelines in\ncomputational science, when random number generation is part of a",
      "algorithm_name": "reproducibility guidelines",
      "source_attribution": "computational science, when random number generation is part of a",
      "file_path": "src\\utils\\reproducibility\\seed.py",
      "line_number": 86,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.8
    },
    {
      "id": "CODE-IMPL-514",
      "type": "implementation",
      "scope": "module:function:create_rng",
      "claim_text": "Create a local NumPy random number generator",
      "algorithm_name": "or optimisation algorithms",
      "source_attribution": "675644021986605\u2020L385-L388",
      "file_path": "src\\utils\\reproducibility\\seed.py",
      "line_number": 135,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.75
    },
    {
      "id": "CODE-IMPL-515",
      "type": "implementation",
      "scope": "module",
      "claim_text": "use a named tuple inherits\nfrom ``tuple``) while also exposing descriptive attribute names to clarify",
      "algorithm_name": "a named tuple inherits",
      "source_attribution": "``tuple``) while also exposing descriptive attribute names to clarify",
      "file_path": "src\\utils\\types\\control_outputs.py",
      "line_number": 1,
      "has_citation": true,
      "citation_format": "bracket",
      "confidence": 0.8
    },
    {
      "id": "CODE-IMPL-516",
      "type": "implementation",
      "scope": "module:class:AdaptiveSMCOutput",
      "claim_text": "Return type for :class:`adaptive_smc",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\types\\control_outputs.py",
      "line_number": 60,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-517",
      "type": "implementation",
      "scope": "module:class:STAOutput",
      "claim_text": "according to the super\u2011twisting\n    algorithm and are needed to resume control in the next time step",
      "algorithm_name": "the super\u2011twisting\n    algorithm and are needed to resume control",
      "source_attribution": "the next time step",
      "file_path": "src\\utils\\types\\control_outputs.py",
      "line_number": 86,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6
    },
    {
      "id": "CODE-IMPL-518",
      "type": "implementation",
      "scope": "module:class:ProjectMovieGenerator",
      "claim_text": "Complete visualization plan generator for the entire DIP control project",
      "algorithm_name": "performance",
      "source_attribution": null,
      "file_path": "src\\utils\\visualization\\movie_generator.py",
      "line_number": 32,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    },
    {
      "id": "CODE-IMPL-519",
      "type": "implementation",
      "scope": "module:class:ProjectMovieGenerator:function:create_complete_project_movie",
      "claim_text": "Create a complete movie documenting the entire project",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\utils\\visualization\\movie_generator.py",
      "line_number": 53,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65
    }
  ]
}