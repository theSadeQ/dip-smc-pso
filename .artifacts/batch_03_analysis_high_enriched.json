{
  "metadata": {
    "total_claims": 72,
    "by_priority": {
      "HIGH": 72
    }
  },
  "research_queue": {
    "HIGH": [
      "CODE-IMPL-001",
      "CODE-IMPL-002",
      "CODE-IMPL-003",
      "CODE-IMPL-004",
      "CODE-IMPL-005",
      "CODE-IMPL-007",
      "CODE-IMPL-008",
      "CODE-IMPL-010",
      "CODE-IMPL-011",
      "CODE-IMPL-012",
      "CODE-IMPL-013",
      "CODE-IMPL-014",
      "CODE-IMPL-015",
      "CODE-IMPL-016",
      "CODE-IMPL-018",
      "CODE-IMPL-019",
      "CODE-IMPL-020",
      "CODE-IMPL-021",
      "CODE-IMPL-022",
      "CODE-IMPL-023",
      "CODE-IMPL-024",
      "CODE-IMPL-025",
      "CODE-IMPL-026",
      "CODE-IMPL-027",
      "CODE-IMPL-028",
      "CODE-IMPL-029",
      "CODE-IMPL-030",
      "CODE-IMPL-031",
      "CODE-IMPL-032",
      "CODE-IMPL-033",
      "CODE-IMPL-034",
      "CODE-IMPL-035",
      "CODE-IMPL-036",
      "CODE-IMPL-037",
      "CODE-IMPL-038",
      "CODE-IMPL-039",
      "CODE-IMPL-044",
      "CODE-IMPL-045",
      "CODE-IMPL-046",
      "CODE-IMPL-047",
      "CODE-IMPL-048",
      "CODE-IMPL-050",
      "CODE-IMPL-051",
      "CODE-IMPL-052",
      "CODE-IMPL-053",
      "CODE-IMPL-054",
      "CODE-IMPL-055",
      "CODE-IMPL-056",
      "CODE-IMPL-057",
      "CODE-IMPL-058",
      "CODE-IMPL-059",
      "CODE-IMPL-060",
      "CODE-IMPL-061",
      "CODE-IMPL-062",
      "CODE-IMPL-063",
      "CODE-IMPL-064",
      "CODE-IMPL-066",
      "CODE-IMPL-068",
      "CODE-IMPL-069",
      "CODE-IMPL-070",
      "CODE-IMPL-071",
      "CODE-IMPL-072",
      "CODE-IMPL-073",
      "CODE-IMPL-074",
      "CODE-IMPL-075",
      "CODE-IMPL-077",
      "CODE-IMPL-078",
      "CODE-IMPL-079",
      "CODE-IMPL-080",
      "CODE-IMPL-081",
      "CODE-IMPL-082",
      "CODE-IMPL-083"
    ],
    "CRITICAL": [],
    "MEDIUM": []
  },
  "claims": [
    {
      "id": "CODE-IMPL-001",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Professional analysis framework for control system evaluation and validation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-002",
      "type": "implementation",
      "scope": "module:class:ComparisonResult:function:get_winner",
      "claim_text": "Determine the winning method for a specific metric",
      "algorithm_name": "for a specific",
      "source_attribution": null,
      "file_path": "src\\analysis\\core\\data_structures.py",
      "line_number": 242,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-003",
      "type": "implementation",
      "scope": "module:class:StatisticalValidator:function:validation_methods",
      "claim_text": "List of validation methods supported",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\core\\interfaces.py",
      "line_number": 192,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-004",
      "type": "implementation",
      "scope": "module:class:BaseMetricCalculator",
      "claim_text": "Base implementation of metric calculator with common functionality",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\core\\metrics.py",
      "line_number": 23,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-005",
      "type": "implementation",
      "scope": "module:class:DynamicsProtocol",
      "claim_text": "Protocol defining the expected interface for dynamics models",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi.py",
      "line_number": 13,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-007",
      "type": "implementation",
      "scope": "module:class:FDIsystem:function:check",
      "claim_text": "Check for a fault at the current time step",
      "algorithm_name": "for prediction\n    \nReturns",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi.py",
      "line_number": 171,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-008",
      "type": "implementation",
      "scope": "module:class:FaultDetectionInterface",
      "claim_text": "Protocol defining the interface for fault detection systems",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi.py",
      "line_number": 393,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-010",
      "type": "implementation",
      "scope": "module:function:_verify_interface",
      "claim_text": "Verify that FDIsystem correctly implements FaultDetectionInterface",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi.py",
      "line_number": 426,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-011",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Enhanced fault detection and isolation system",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-012",
      "type": "implementation",
      "scope": "module:class:DetectionMethod",
      "claim_text": "Enumeration of detection methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 36,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-013",
      "type": "implementation",
      "scope": "module:class:EnhancedFaultDetector:function:_detect_outliers",
      "claim_text": "Detect outliers using statistical methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 602,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-014",
      "type": "implementation",
      "scope": "module:class:EnhancedFaultDetector:function:_detect_change_points_statistical",
      "claim_text": "Detect change points using statistical methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 627,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-015",
      "type": "implementation",
      "scope": "module:class:EnhancedFaultDetector:function:_classify_heuristic",
      "claim_text": "Heuristic fault classification based on features",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 834,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-016",
      "type": "implementation",
      "scope": "module:class:EnhancedFaultDetector:function:_compute_statistical_severity",
      "claim_text": "Compute severity based on statistical anomalies",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\fdi_system.py",
      "line_number": 875,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-018",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Model-based residual generation for fault detection",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-019",
      "type": "implementation",
      "scope": "module:class:AdaptiveResidualGenerator",
      "claim_text": "Adaptive residual generator that combines multiple methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 535,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-020",
      "type": "implementation",
      "scope": "module:class:AdaptiveResidualGenerator:function:generate_residual",
      "claim_text": "Generate adaptive residual by combining multiple methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 556,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-021",
      "type": "implementation",
      "scope": "module:function:create_residual_generator",
      "claim_text": "Factory function to create residual generators",
      "algorithm_name": "Returns",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 617,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-022",
      "type": "implementation",
      "scope": "module:class:ResidualGeneratorFactory:function:create_generator",
      "claim_text": "Create a residual generator of the specified type",
      "algorithm_name": "Returns",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 687,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-023",
      "type": "implementation",
      "scope": "module:class:ResidualGeneratorFactory:function:get_available_methods",
      "claim_text": "Get list of available residual generation methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\residual_generators.py",
      "line_number": 708,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-024",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive threshold methods for fault detection",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-025",
      "type": "implementation",
      "scope": "module:class:ThresholdAdapter:function:update",
      "claim_text": "Update threshold based on new residual value",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 58,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-026",
      "type": "implementation",
      "scope": "module:class:StatisticalThresholdAdapter",
      "claim_text": "Statistical adaptive threshold based on residual statistics",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 87,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-027",
      "type": "implementation",
      "scope": "module:class:StatisticalThresholdAdapter:function:update",
      "claim_text": "Update threshold using statistical methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 101,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-028",
      "type": "implementation",
      "scope": "module:class:StatisticalThresholdAdapter:function:_compute_statistical_threshold",
      "claim_text": "Compute threshold using statistical methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 119,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-029",
      "type": "implementation",
      "scope": "module:class:StatisticalThresholdAdapter:function:_reject_outliers",
      "claim_text": "Reject outliers using IQR or Z-score method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 152,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-030",
      "type": "implementation",
      "scope": "module:class:AdaptiveThresholdManager",
      "claim_text": "Manager for multiple threshold adapters with different methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 458,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-031",
      "type": "implementation",
      "scope": "module:class:AdaptiveThresholdManager:function:__init__",
      "claim_text": "Initialize adaptive threshold manager",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 461,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-032",
      "type": "implementation",
      "scope": "module:class:AdaptiveThresholdManager:function:_create_adapter",
      "claim_text": "Create adapter for specified method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 480,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-033",
      "type": "implementation",
      "scope": "module:class:AdaptiveThresholdManager:function:update",
      "claim_text": "Update all adapters and return thresholds",
      "algorithm_name": "names and their",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 494,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-034",
      "type": "implementation",
      "scope": "module:class:AdaptiveThresholdManager:function:get_consensus_threshold",
      "claim_text": "Get consensus threshold from all adapters",
      "algorithm_name": "for combining thresholds",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 521,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-035",
      "type": "implementation",
      "scope": "module:function:create_threshold_adapter",
      "claim_text": "Factory function to create threshold adapters",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 601,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-036",
      "type": "implementation",
      "scope": "module:function:create_adaptive_threshold_manager",
      "claim_text": "Factory function to create adaptive threshold manager",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 641,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-037",
      "type": "implementation",
      "scope": "module:class:ThresholdAdapterFactory:function:create_adapter",
      "claim_text": "Create a threshold adapter of the specified type",
      "algorithm_name": "Returns",
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 668,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-038",
      "type": "implementation",
      "scope": "module:class:ThresholdAdapterFactory:function:get_available_methods",
      "claim_text": "Get list of available threshold adaptation methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 689,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-039",
      "type": "implementation",
      "scope": "module:class:ThresholdAdapterFactory:function:create_manager",
      "claim_text": "Create an adaptive threshold manager with multiple methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\fault_detection\\threshold_adapters.py",
      "line_number": 694,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-044",
      "type": "implementation",
      "scope": "module:class:StabilityAnalyzer:function:_analyze_analytical_lyapunov",
      "claim_text": "Analyze Lyapunov stability analytically with robust numerical methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\performance\\stability_analysis.py",
      "line_number": 678,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-045",
      "type": "implementation",
      "scope": "module:class:StabilityAnalyzer:function:_solve_lyapunov_svd",
      "claim_text": "Solve Lyapunov equation using SVD-based robust method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\performance\\stability_analysis.py",
      "line_number": 796,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-046",
      "type": "implementation",
      "scope": "module:class:StabilityAnalyzer:function:_estimate_largest_lyapunov_exponent",
      "claim_text": "Estimate largest Lyapunov exponent (simplified method)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\performance\\stability_analysis.py",
      "line_number": 852,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-047",
      "type": "implementation",
      "scope": "module:class:StabilityAnalyzer:function:_compute_stability_index",
      "claim_text": "Compute stability index based on variance growth",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\performance\\stability_analysis.py",
      "line_number": 877,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-048",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Benchmarking and comparison tools for analysis validation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-050",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:validate",
      "claim_text": "Perform comprehensive benchmarking analysis",
      "algorithm_name": "for comparison\n\nReturns",
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 90,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-051",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_run_simulation_benchmarks",
      "claim_text": "Run simulation benchmarks for all methods and test cases",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 181,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-052",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_run_method_trials",
      "claim_text": "Run multiple trials for a single method",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 201,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-053",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_perform_performance_comparison",
      "claim_text": "Perform performance comparison between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 364,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-054",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_perform_robustness_comparison",
      "claim_text": "Perform robustness comparison between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 401,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-055",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_perform_significance_testing",
      "claim_text": "Perform statistical significance testing between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 455,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-056",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_perform_effect_size_analysis",
      "claim_text": "Perform effect size analysis between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 493,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-057",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_extract_method_performance",
      "claim_text": "Extract method performance data from results",
      "algorithm_name": "performance data from",
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 565,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-058",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_compare_two_methods",
      "claim_text": "Compare two methods on a single metric",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 588,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-059",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_rank_methods_by_performance",
      "claim_text": "Rank methods by performance on primary metric",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 621,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-060",
      "type": "implementation",
      "scope": "module:class:BenchmarkSuite:function:_perform_statistical_test",
      "claim_text": "Perform statistical test between two methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\benchmarking.py",
      "line_number": 636,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-061",
      "type": "implementation",
      "scope": "module:class:TrialBatch",
      "claim_text": "Collection of trial results with analysis methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\core.py",
      "line_number": 89,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-062",
      "type": "implementation",
      "scope": "module:function:run_multiple_trials",
      "claim_text": "Run multiple trials according to configuration",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\core.py",
      "line_number": 246,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-063",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Cross-validation methods for analysis validation and model selection",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\cross_validation.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-064",
      "type": "implementation",
      "scope": "module:class:CrossValidationConfig",
      "claim_text": "Configuration for cross-validation methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\cross_validation.py",
      "line_number": 92,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-066",
      "type": "implementation",
      "scope": "module:class:CrossValidator:function:_get_cv_splitter",
      "claim_text": "Get cross-validation splitter based on configuration",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\cross_validation.py",
      "line_number": 317,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-068",
      "type": "implementation",
      "scope": "module:class:MonteCarloAnalyzer:function:_generate_parameter_samples",
      "claim_text": "Generate parameter samples according to specified distributions",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\monte_carlo.py",
      "line_number": 197,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-069",
      "type": "implementation",
      "scope": "module:class:MonteCarloAnalyzer:function:_sobol_sampling",
      "claim_text": "Sobol sequence sampling (simplified implementation)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\monte_carlo.py",
      "line_number": 260,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-070",
      "type": "implementation",
      "scope": "module:class:MonteCarloAnalyzer:function:_analyze_data_with_monte_carlo",
      "claim_text": "Analyze existing data using Monte Carlo methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\monte_carlo.py",
      "line_number": 552,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-071",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Statistical benchmarking utilities for the Double Inverted Pendulum project",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistical_benchmarks.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-072",
      "type": "implementation",
      "scope": "module:function:compute_metrics",
      "claim_text": "Compute performance metrics for a batch of trajectories",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistical_benchmarks.py",
      "line_number": 147,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-073",
      "type": "implementation",
      "scope": "module:function:run_trials",
      "claim_text": "Run multiple simulations and return per\u00e2\u20ac\u2018trial metrics with confidence intervals",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistical_benchmarks.py",
      "line_number": 185,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-074",
      "type": "implementation",
      "scope": "module:function:run_trials_with_advanced_statistics",
      "claim_text": "use bootstrap confidence intervals\n**kwargs :\n    Additional arguments passed to trial runner\n\nReturns\n-------\nlist of dict, dict",
      "algorithm_name": "bootstrap confidence intervals\n**kwargs :\n    Additional arguments passed to trial runner\n\nReturns\n-------\nlist",
      "source_attribution": "dict, dict",
      "file_path": "src\\analysis\\validation\\statistical_benchmarks.py",
      "line_number": 257,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-075",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Statistical testing framework for analysis validation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistical_tests.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-077",
      "type": "implementation",
      "scope": "module:function:correlation_analysis",
      "claim_text": "Compute correlation between two variables",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistics.py",
      "line_number": 236,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-078",
      "type": "implementation",
      "scope": "module:function:normality_test",
      "claim_text": "Test for normality using multiple methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistics.py",
      "line_number": 287,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-079",
      "type": "implementation",
      "scope": "module:function:outlier_detection",
      "claim_text": "Detect outliers in data",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\validation\\statistics.py",
      "line_number": 346,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-080",
      "type": "implementation",
      "scope": "module:class:AnalysisPlotter:function:_plot_metric_comparison",
      "claim_text": "Plot metric comparison between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\visualization\\analysis_plots.py",
      "line_number": 428,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-081",
      "type": "implementation",
      "scope": "module:class:AnalysisPlotter:function:_extract_comparison_data",
      "claim_text": "Extract comparison data between methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\visualization\\analysis_plots.py",
      "line_number": 800,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-082",
      "type": "implementation",
      "scope": "module:class:StatisticalPlotter:function:plot_correlation_matrix",
      "claim_text": "Create correlation matrix heatmap",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\visualization\\statistical_plots.py",
      "line_number": 376,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-083",
      "type": "implementation",
      "scope": "module:class:StatisticalPlotter:function:plot_convergence_analysis",
      "claim_text": "Plot convergence behavior of iterative algorithms",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\analysis\\visualization\\statistical_plots.py",
      "line_number": 439,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    }
  ]
}