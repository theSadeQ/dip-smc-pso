{
  "metadata": {
    "total_claims": 98,
    "by_priority": {
      "HIGH": 98
    }
  },
  "research_queue": {
    "HIGH": [
      "CODE-IMPL-101",
      "CODE-IMPL-105",
      "CODE-IMPL-106",
      "CODE-IMPL-107",
      "CODE-IMPL-108",
      "CODE-IMPL-109",
      "CODE-IMPL-110",
      "CODE-IMPL-111",
      "CODE-IMPL-112",
      "CODE-IMPL-113",
      "CODE-IMPL-114",
      "CODE-IMPL-115",
      "CODE-IMPL-117",
      "CODE-IMPL-118",
      "CODE-IMPL-119",
      "CODE-IMPL-120",
      "CODE-IMPL-121",
      "CODE-IMPL-122",
      "CODE-IMPL-123",
      "CODE-IMPL-124",
      "CODE-IMPL-125",
      "CODE-IMPL-126",
      "CODE-IMPL-127",
      "CODE-IMPL-128",
      "CODE-IMPL-129",
      "CODE-IMPL-130",
      "CODE-IMPL-131",
      "CODE-IMPL-132",
      "CODE-IMPL-133",
      "CODE-IMPL-134",
      "CODE-IMPL-135",
      "CODE-IMPL-136",
      "CODE-IMPL-137",
      "CODE-IMPL-138",
      "CODE-IMPL-139",
      "CODE-IMPL-140",
      "CODE-IMPL-141",
      "CODE-IMPL-143",
      "CODE-IMPL-144",
      "CODE-IMPL-145",
      "CODE-IMPL-146",
      "CODE-IMPL-147",
      "CODE-IMPL-148",
      "CODE-IMPL-149",
      "CODE-IMPL-150",
      "CODE-IMPL-151",
      "CODE-IMPL-152",
      "CODE-IMPL-153",
      "CODE-IMPL-154",
      "CODE-IMPL-155",
      "CODE-IMPL-156",
      "CODE-IMPL-157",
      "CODE-IMPL-158",
      "CODE-IMPL-159",
      "CODE-IMPL-160",
      "CODE-IMPL-161",
      "CODE-IMPL-162",
      "CODE-IMPL-163",
      "CODE-IMPL-164",
      "CODE-IMPL-165",
      "CODE-IMPL-166",
      "CODE-IMPL-167",
      "CODE-IMPL-168",
      "CODE-IMPL-169",
      "CODE-IMPL-170",
      "CODE-IMPL-171",
      "CODE-IMPL-172",
      "CODE-IMPL-173",
      "CODE-IMPL-174",
      "CODE-IMPL-175",
      "CODE-IMPL-178",
      "CODE-IMPL-179",
      "CODE-IMPL-180",
      "CODE-IMPL-181",
      "CODE-IMPL-182",
      "CODE-IMPL-183",
      "CODE-IMPL-184",
      "CODE-IMPL-185",
      "CODE-IMPL-186",
      "CODE-IMPL-187",
      "CODE-IMPL-188",
      "CODE-IMPL-189",
      "CODE-IMPL-190",
      "CODE-IMPL-191",
      "CODE-IMPL-192",
      "CODE-IMPL-193",
      "CODE-IMPL-194",
      "CODE-IMPL-195",
      "CODE-IMPL-196",
      "CODE-IMPL-198",
      "CODE-IMPL-199",
      "CODE-IMPL-201",
      "CODE-IMPL-204",
      "CODE-IMPL-205",
      "CODE-IMPL-206",
      "CODE-IMPL-207",
      "CODE-IMPL-208",
      "CODE-IMPL-209"
    ],
    "CRITICAL": [],
    "MEDIUM": []
  },
  "claims": [
    {
      "id": "CODE-IMPL-101",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Compatibility import for Adaptive SMC controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\adaptive_smc.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-105",
      "type": "implementation",
      "scope": "module:class:ControllerInterface",
      "claim_text": "Abstract base class for all controllers in the DIP system",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\base\\controller_interface.py",
      "line_number": 12,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-106",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Use the clean SMC factory for new code\n    from controllers",
      "algorithm_name": "the clean SMC factory for new code",
      "source_attribution": "controllers",
      "file_path": "src\\controllers\\factory\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-107",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Use legacy factory only for backward compatibility\n    from controllers",
      "algorithm_name": "legacy factory only for backward compatibility",
      "source_attribution": "controllers",
      "file_path": "src\\controllers\\factory\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-108",
      "type": "implementation",
      "scope": "module:function:_as_dict",
      "claim_text": "Convert an object to dictionary representation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory\\__init__.py",
      "line_number": 167,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-109",
      "type": "implementation",
      "scope": "module:class:DeadlockDetector",
      "claim_text": "Simple deadlock detection based on lock wait times and thread states",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory\\core\\threading.py",
      "line_number": 180,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-110",
      "type": "implementation",
      "scope": "module:class:ControllerDeprecationWarner:function:_issue_deprecation_warning",
      "claim_text": "Issue appropriate deprecation warning based on severity level",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory\\deprecation.py",
      "line_number": 169,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-111",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Fallback configuration classes for SMC controllers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory\\fallback_configs.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-112",
      "type": "implementation",
      "scope": "module:function:get_optimized_pso_bounds",
      "claim_text": "Get optimized PSO bounds based on performance targets",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory\\pso_integration.py",
      "line_number": 377,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-113",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Enterprise Controller Factory - Production-Ready Controller Instantiation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\factory.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-114",
      "type": "implementation",
      "scope": "module:class:PSOControllerWrapper:function:_add_step_method_to_dynamics",
      "claim_text": "Add step method to dynamics model for simulation compatibility",
      "algorithm_name": "to dynamics model",
      "source_attribution": null,
      "file_path": "src\\controllers\\factory.py",
      "line_number": 974,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-115",
      "type": "implementation",
      "scope": "module:function:_call_f",
      "claim_text": "Robustly call continuous‑time dynamics: xdot = f(x,u)",
      "algorithm_name": "names",
      "source_attribution": null,
      "file_path": "src\\controllers\\mpc\\mpc_controller.py",
      "line_number": 41,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-117",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Compatibility import for MPC controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\mpc_controller.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-118",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Sliding Mode Controllers for the double inverted pendulum system",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-119",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive sliding‑mode controller with online gain adaptation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\adaptive_smc.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-120",
      "type": "implementation",
      "scope": "module:class:AdaptiveSMC:function:validate_gains",
      "claim_text": "Validate that a suitable gain sequence has been provided",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\adaptive_smc.py",
      "line_number": 215,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-121",
      "type": "implementation",
      "scope": "module:class:AdaptiveSMC:function:compute_control",
      "claim_text": "use named tuples are\n    subclasses of ``tuple``",
      "algorithm_name": "named tuples are\n    subclasses",
      "source_attribution": "``tuple``",
      "file_path": "src\\controllers\\smc\\adaptive_smc.py",
      "line_number": 263,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-122",
      "type": "implementation",
      "scope": "module:class:AdaptiveSMC:function:set_dynamics",
      "claim_text": "Set dynamics model (for compatibility, not used in this implementation)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\adaptive_smc.py",
      "line_number": 427,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-123",
      "type": "implementation",
      "scope": "module",
      "claim_text": "SMC Algorithms Package",
      "algorithm_name": "is split into",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-124",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive SMC Algorithm Package",
      "algorithm_name": "Package",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-125",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Adaptive Gain Update Laws for Adaptive SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\adaptation_law.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-126",
      "type": "implementation",
      "scope": "module:class:AdaptationLaw",
      "claim_text": "Online gain adaptation for Adaptive SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\adaptation_law.py",
      "line_number": 21,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-127",
      "type": "implementation",
      "scope": "module:class:AdaptationLaw:function:update_gain",
      "claim_text": "Update adaptive gain using adaptation law",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\adaptation_law.py",
      "line_number": 83,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-128",
      "type": "implementation",
      "scope": "module:class:AdaptiveSMCConfig",
      "claim_text": "Type-safe configuration for Adaptive SMC controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\config.py",
      "line_number": 18,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-129",
      "type": "implementation",
      "scope": "module:class:AdaptiveSMCConfig:function:_validate_gains",
      "claim_text": "Validate gain vector according to adaptive SMC theory",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\config.py",
      "line_number": 52,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-130",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Implements Adaptive Sliding Mode Control using composed components:\n- LinearSlidingSurface: Surface computation\n- AdaptationLaw: Online gain adjustment\n- UncertaintyEstimator: Disturbance bound estimation\n- SwitchingFunction: Smooth chattering reduction\n\nReplaces the monolithic 427-line controller with composition of focused modules",
      "algorithm_name": "Adaptive Sliding Mode Control using composed components:\n- LinearSlidingSurface: Surface computation\n- AdaptationLaw: Online gain adjustment\n- UncertaintyEstimator: Disturbance bound estimation\n- SwitchingFunction: Smooth chattering reduction\n\nReplaces the monolithic 427-line controller with composition",
      "source_attribution": "focused modules",
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\controller.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-131",
      "type": "implementation",
      "scope": "module:class:ModularAdaptiveSMC:function:compute_control",
      "claim_text": "Compute adaptive SMC control law",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\controller.py",
      "line_number": 76,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-132",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Implements online estimation of system uncertainties and disturbance bounds",
      "algorithm_name": "online estimation",
      "source_attribution": "system uncertainties and disturbance bounds",
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\parameter_estimation.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-133",
      "type": "implementation",
      "scope": "module:class:UncertaintyEstimator:function:update_estimate",
      "claim_text": "Update uncertainty estimate based on sliding surface behavior",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\parameter_estimation.py",
      "line_number": 64,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-134",
      "type": "implementation",
      "scope": "module:class:UncertaintyEstimator:function:update_estimates",
      "claim_text": "Compatibility method for tests - maps to update_estimate with surface derivative",
      "algorithm_name": "for tests",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\parameter_estimation.py",
      "line_number": 181,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-135",
      "type": "implementation",
      "scope": "module:class:ParameterIdentifier:function:update_parameters",
      "claim_text": "Update parameter estimates using RLS algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\adaptive\\parameter_estimation.py",
      "line_number": 250,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-136",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Classical SMC Algorithm Package",
      "algorithm_name": "Package",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-137",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Implements boundary layer method for chattering reduction in sliding mode control",
      "algorithm_name": "boundary layer method for chattering reduction",
      "source_attribution": "sliding mode control",
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\boundary_layer.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-138",
      "type": "implementation",
      "scope": "module:class:BoundaryLayer",
      "claim_text": "Boundary layer implementation for chattering reduction",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\boundary_layer.py",
      "line_number": 23,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-139",
      "type": "implementation",
      "scope": "module:class:BoundaryLayer:function:__init__",
      "claim_text": "Initialize boundary layer",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\boundary_layer.py",
      "line_number": 31,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-140",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Configuration Schema for Classical SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\config.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-141",
      "type": "implementation",
      "scope": "module:class:ClassicalSMCConfig",
      "claim_text": "Type-safe configuration for Classical SMC controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\config.py",
      "line_number": 19,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-143",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Modular Classical SMC Controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\classical\\controller.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-144",
      "type": "implementation",
      "scope": "module",
      "claim_text": "implementation of Hybrid Sliding Mode Control that intelligently\nswitches between multiple SMC algorithms based on system conditions:\n\n- Controller: Main orchestration with intelligent switching\n- SwitchingLogic: Decision-making logic for controller selection\n- Configuration: Type-safe parameter configuration for hybrid operation\n\nThis provides optimal performance by selecting the most appropriate SMC algorithm",
      "algorithm_name": "Hybrid Sliding Mode Control that intelligently\nswitches between multiple SMC algorithms based on system conditions:\n\n- Controller: Main orchestration with intelligent switching\n- SwitchingLogic: Decision-making logic for controller selection\n- Configuration: Type-safe parameter configuration for hybrid operation\n\nThis provides optimal performance",
      "source_attribution": "selecting the most appropriate SMC algorithm",
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-145",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Configuration Schema for Hybrid SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\config.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-146",
      "type": "implementation",
      "scope": "module:class:HybridSMCConfig:function:get_active_controllers",
      "claim_text": "Get list of active controller types based on hybrid mode",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\config.py",
      "line_number": 216,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-147",
      "type": "implementation",
      "scope": "module:class:HybridSMCConfig:function:is_switching_allowed",
      "claim_text": "Check if switching is allowed based on minimum switching time",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\config.py",
      "line_number": 255,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-148",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Modular Hybrid SMC Controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\controller.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-149",
      "type": "implementation",
      "scope": "module:class:ModularHybridSMC",
      "claim_text": "Modular Hybrid SMC using intelligent switching between multiple controllers",
      "algorithm_name": "based on current",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\controller.py",
      "line_number": 66,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-150",
      "type": "implementation",
      "scope": "module:class:ModularHybridSMC:function:_initialize_controllers",
      "claim_text": "Initialize individual SMC controllers based on hybrid mode",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\controller.py",
      "line_number": 112,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-151",
      "type": "implementation",
      "scope": "module:class:ModularHybridSMC:function:compute_control",
      "claim_text": "Compute hybrid SMC control law",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\controller.py",
      "line_number": 140,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-152",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Hybrid Switching Logic for Multi-Controller SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-153",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic",
      "claim_text": "Intelligent switching logic for hybrid SMC controllers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 47,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-154",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_surface_magnitude_switching",
      "claim_text": "Evaluate switching based on sliding surface magnitude",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 210,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-155",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_control_effort_switching",
      "claim_text": "Evaluate switching based on control effort",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 265,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-156",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_tracking_error_switching",
      "claim_text": "Evaluate switching based on tracking error",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 291,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-157",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_adaptation_rate_switching",
      "claim_text": "Evaluate switching based on adaptation rate (for adaptive controllers)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 319,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-158",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_performance_index_switching",
      "claim_text": "Evaluate switching based on comprehensive performance index",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 343,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-159",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_evaluate_time_based_switching",
      "claim_text": "Evaluate switching based on time (round-robin or scheduled switching)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 381,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-160",
      "type": "implementation",
      "scope": "module:class:HybridSwitchingLogic:function:_update_learned_thresholds",
      "claim_text": "Update learned switching thresholds based on decision outcomes",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\hybrid\\switching_logic.py",
      "line_number": 436,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-161",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Super-Twisting SMC Algorithm Package",
      "algorithm_name": "Package",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\__init__.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-162",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Configuration Schema for Super-Twisting SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\config.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-163",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMCConfig",
      "claim_text": "Type-safe configuration for Super-Twisting SMC controller",
      "algorithm_name": "theory",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\config.py",
      "line_number": 23,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-164",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMCConfig:function:_validate_gains",
      "claim_text": "Validate gain vector according to Super-Twisting theory",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\config.py",
      "line_number": 62,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-165",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Modular Super-Twisting SMC Controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\controller.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-166",
      "type": "implementation",
      "scope": "module:class:ModularSuperTwistingSMC:function:compute_control",
      "claim_text": "Compute Super-Twisting SMC control law",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\controller.py",
      "line_number": 71,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-167",
      "type": "implementation",
      "scope": "module:class:ModularSuperTwistingSMC:function:validate_gains",
      "claim_text": "Vectorized feasibility check for super‑twisting SMC gains",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\controller.py",
      "line_number": 248,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-168",
      "type": "implementation",
      "scope": "module:class:ModularSuperTwistingSMC:function:reset",
      "claim_text": "Reset controller state (interface compliance)",
      "algorithm_name": "interface for compatibility",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\controller.py",
      "line_number": 315,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-169",
      "type": "implementation",
      "scope": "module:class:ModularSuperTwistingSMC:function:get_convergence_estimate",
      "claim_text": "Estimate convergence properties",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\controller.py",
      "line_number": 375,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-170",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Super-Twisting Algorithm Implementation",
      "algorithm_name": "Implementation",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-171",
      "type": "implementation",
      "scope": "module:class:SuperTwistingAlgorithm",
      "claim_text": "Core Super-Twisting sliding mode algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 23,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-172",
      "type": "implementation",
      "scope": "module:class:SuperTwistingAlgorithm:function:__init__",
      "claim_text": "Initialize Super-Twisting algorithm",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 32,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-173",
      "type": "implementation",
      "scope": "module:class:SuperTwistingAlgorithm:function:_compute_switching_function",
      "claim_text": "Compute switching function sign(s) with smooth approximation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 121,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-174",
      "type": "implementation",
      "scope": "module:class:SuperTwistingAlgorithm:function:reset_state",
      "claim_text": "Reset algorithm internal state",
      "algorithm_name": "internal state",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 146,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-175",
      "type": "implementation",
      "scope": "module:class:SuperTwistingAlgorithm:function:get_state_dict",
      "claim_text": "Get current algorithm state for logging/debugging",
      "algorithm_name": "state for logging",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\algorithms\\super_twisting\\twisting_algorithm.py",
      "line_number": 271,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-178",
      "type": "implementation",
      "scope": "module:class:ClassicalSMC:function:validate_gains",
      "claim_text": "uses six gains in the order",
      "algorithm_name": "six gains",
      "source_attribution": "the order",
      "file_path": "src\\controllers\\smc\\classic_smc.py",
      "line_number": 282,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-179",
      "type": "implementation",
      "scope": "module:class:ClassicalSMC:function:compute_control",
      "claim_text": "Compute the control input for the classical SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\classic_smc.py",
      "line_number": 413,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-180",
      "type": "implementation",
      "scope": "module:class:ClassicalSMC:function:reset",
      "claim_text": "Reset ClassicalSMC controller state",
      "algorithm_name": "is provided for",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\classic_smc.py",
      "line_number": 488,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-181",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Equivalent Control Computation for SMC Controllers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\equivalent_control.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-182",
      "type": "implementation",
      "scope": "module:class:EquivalentControl:function:__init__",
      "claim_text": "Initialize equivalent control computation",
      "algorithm_name": "regularization_alpha",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\equivalent_control.py",
      "line_number": 35,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-183",
      "type": "implementation",
      "scope": "module:class:SMCGainValidator",
      "claim_text": "Centralized gain validation for all SMC controller types",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\gain_validation.py",
      "line_number": 45,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-184",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Sliding Surface Calculations for SMC Controllers",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\sliding_surface.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-185",
      "type": "implementation",
      "scope": "module:class:LinearSlidingSurface",
      "claim_text": "Linear sliding surface for conventional SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\sliding_surface.py",
      "line_number": 46,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-186",
      "type": "implementation",
      "scope": "module:class:LinearSlidingSurface:function:compute_surface",
      "claim_text": "Compatibility method for test interface - alias for compute()",
      "algorithm_name": "for test interface",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\sliding_surface.py",
      "line_number": 132,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-187",
      "type": "implementation",
      "scope": "module:class:HigherOrderSlidingSurface",
      "claim_text": "Higher-order sliding surface for Super-Twisting and advanced SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\sliding_surface.py",
      "line_number": 180,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-188",
      "type": "implementation",
      "scope": "module:class:HigherOrderSlidingSurface:function:compute",
      "claim_text": "Compute higher-order sliding surface (simplified implementation)",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\sliding_surface.py",
      "line_number": 213,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-189",
      "type": "implementation",
      "scope": "module:class:SwitchingMethod",
      "claim_text": "Available switching function methods",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 22,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-190",
      "type": "implementation",
      "scope": "module:class:SwitchingFunction:function:__init__",
      "claim_text": "Initialize switching function",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 38,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-191",
      "type": "implementation",
      "scope": "module:class:SwitchingFunction:function:_get_switching_function",
      "claim_text": "Get the appropriate switching function implementation",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 56,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-192",
      "type": "implementation",
      "scope": "module:class:SwitchingFunction:function:_sign_switching",
      "claim_text": "uses chattering in practice",
      "algorithm_name": "chattering",
      "source_attribution": "practice",
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 148,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-193",
      "type": "implementation",
      "scope": "module:class:SwitchingFunction:function:get_derivative",
      "claim_text": "Compute derivative of switching function",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 199,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-194",
      "type": "implementation",
      "scope": "module:function:tanh_switching",
      "claim_text": "Hyperbolic tangent switching function with optimized slope",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 229,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-195",
      "type": "implementation",
      "scope": "module:function:sign_switching",
      "claim_text": "uses chattering in real systems",
      "algorithm_name": "chattering",
      "source_attribution": "real systems",
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 270,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-196",
      "type": "implementation",
      "scope": "module:function:adaptive_boundary_layer",
      "claim_text": "Adaptive boundary layer thickness based on surface derivative",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\core\\switching_functions.py",
      "line_number": 297,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-198",
      "type": "implementation",
      "scope": "module:class:HybridAdaptiveSTASMC:function:_compute_taper_factor",
      "claim_text": "Compute tapering factor for adaptive gain growth",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\hybrid_adaptive_sta_smc.py",
      "line_number": 385,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-199",
      "type": "implementation",
      "scope": "module:class:HybridAdaptiveSTASMC:function:_compute_sliding_surface",
      "claim_text": "Compute the sliding surface value s",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\hybrid_adaptive_sta_smc.py",
      "line_number": 397,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-201",
      "type": "implementation",
      "scope": "module:function:_sta_smc_control_numba",
      "claim_text": "Numba‑accelerated core of the Super‑Twisting SMC",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 35,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-204",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMC:function:__init__",
      "claim_text": "Initialize a Super‑Twisting Sliding Mode Controller",
      "algorithm_name": "for saturated sign",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 195,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-205",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMC:function:validate_gains",
      "claim_text": "use the sliding surface is a linear combination of state",
      "algorithm_name": "the sliding surface is a linear combination",
      "source_attribution": "state",
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 391,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.6,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-206",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMC:function:gains",
      "claim_text": "Return a copy of the gains used to configure this controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 438,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-207",
      "type": "implementation",
      "scope": "module:class:SuperTwistingSMC:function:_compute_equivalent_control",
      "claim_text": "Compute the model‑based equivalent control ``u_eq`` using Tikhonov regularisation",
      "algorithm_name": "in control\nliterature",
      "source_attribution": null,
      "file_path": "src\\controllers\\smc\\sta_smc.py",
      "line_number": 513,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-208",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Compatibility import for Super-Twisting SMC controller",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\sta_smc.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    },
    {
      "id": "CODE-IMPL-209",
      "type": "implementation",
      "scope": "module",
      "claim_text": "Swing-up SMC controller compatibility module",
      "algorithm_name": null,
      "source_attribution": null,
      "file_path": "src\\controllers\\swing_up_smc.py",
      "line_number": 1,
      "has_citation": false,
      "citation_format": null,
      "confidence": 0.65,
      "category": "implementation",
      "priority": "HIGH"
    }
  ]
}